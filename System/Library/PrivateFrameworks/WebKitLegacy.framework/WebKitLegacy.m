void sub_1D7FBAC64(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebLocalizedString(_QWORD *a1, char *cStr)
{
  void *v4;
  unint64_t v5;
  CFStringRef v6;
  uint64_t v7;
  char v9;
  char **v10;
  char *v11;

  if (a1)
  {
    v4 = (void *)a1[1];
    if (!v4)
    {
      v4 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *a1));
      a1[1] = v4;
    }
  }
  else
  {
    v5 = atomic_load(&qword_1ECEC9918);
    if (v5 != -1)
    {
      v11 = &v9;
      v10 = &v11;
      std::__call_once(&qword_1ECEC9918, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebLocalizedString::$_0 &&>>);
    }
    v4 = (void *)_MergedGlobals_20;
  }
  v6 = CFStringCreateWithCStringNoCopy(0, cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v7 = objc_msgSend(v4, "localizedStringForKey:value:table:", v6, CFSTR("localized string not found"), 0);
  if (v6)
    CFRelease(v6);
  return v7;
}

void sub_1D7FBADC0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void BackForwardList::BackForwardList(BackForwardList *this, WebView *a2)
{
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E9D69208;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 7) = 0x64FFFFFFFFLL;
  *((_WORD *)this + 32) = 257;
}

void BackForwardList::~BackForwardList(BackForwardList *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  WTF *v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *(_QWORD *)this = off_1E9D69208;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_DWORD **)*((_QWORD *)this + 6);
      do
      {
        v8 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          *v5 = 0;
          if (v8)
          {
            if (*v8 == 1)
            {
              v6 = (WTF *)MEMORY[0x1D82A3F20]();
              WTF::fastFree(v6, v7);
            }
            else
            {
              --*v8;
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v9 = *((unsigned int *)this + 11);
  if ((_DWORD)v9)
  {
    v10 = (_DWORD **)*((_QWORD *)this + 4);
    v11 = 8 * v9;
    do
    {
      v14 = *v10;
      *v10 = 0;
      if (v14)
      {
        if (*v14 == 1)
        {
          v12 = (WTF *)MEMORY[0x1D82A3F20]();
          WTF::fastFree(v12, v13);
        }
        else
        {
          --*v14;
        }
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v15 = (WTF *)*((_QWORD *)this + 4);
  if (v15)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 0;
    v17 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  BackForwardList::~BackForwardList(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t BackForwardList::addItem(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::HistoryItem *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  void *v17;
  WebCore::BackForwardCache *v18;
  WebCore::BackForwardCache *v19;
  WTF *v20;
  void *v21;
  WebCore::HistoryItem ***v22;
  WebCore::HistoryItem *v23;
  WebCore::HistoryItem **v24;
  WebCore::HistoryItem *v25;
  WTF *v26;
  void *v27;
  WebCore::BackForwardCache *v28;
  WebCore::BackForwardCache *v29;
  WTF *v30;
  void *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  _DWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _DWORD *v51;
  WTF *v52;
  void *v53;

  v4 = *(unsigned int *)(result + 60);
  if ((_DWORD)v4)
  {
    v5 = result;
    if (*(_BYTE *)(result + 65))
    {
      v7 = *(unsigned int *)(result + 56);
      if ((_DWORD)v7 == -1)
      {
        v8 = *(unsigned int *)(result + 44);
      }
      else
      {
        v9 = v7 + 1;
        v8 = *(unsigned int *)(result + 44);
        if (v8 > v9)
        {
          do
          {
            while (1)
            {
              v10 = v8 - 1;
              v11 = *(_QWORD *)(v5 + 32);
              v12 = 8 * (v8 - 1);
              v13 = *(WebCore::HistoryItem **)(v11 + v12);
              *(_QWORD *)(v11 + v12) = 0;
              v14 = *(_QWORD *)(v5 + 32);
              v15 = *(_DWORD **)(v14 + v12);
              *(_QWORD *)(v14 + v12) = 0;
              if (v15)
              {
                if (*v15 == 1)
                {
                  v16 = (WTF *)MEMORY[0x1D82A3F20]();
                  WTF::fastFree(v16, v17);
                }
                else
                {
                  --*v15;
                }
              }
              *(_DWORD *)(v5 + 44) = v10;
              v18 = (WebCore::BackForwardCache *)WTF::HashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>((uint64_t *)(v5 + 48), (uint64_t)v13);
              v19 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v18);
              result = WebCore::BackForwardCache::remove(v19, v13);
              if (*(_DWORD *)v13 == 1)
                break;
              --*(_DWORD *)v13;
              v8 = *(unsigned int *)(v5 + 44);
              if (v8 <= v9)
                goto LABEL_14;
            }
            v20 = (WTF *)MEMORY[0x1D82A3F20](v13);
            result = WTF::fastFree(v20, v21);
            v8 = *(unsigned int *)(v5 + 44);
          }
          while (v8 > v9);
LABEL_14:
          v4 = *(unsigned int *)(v5 + 60);
        }
      }
      v22 = (WebCore::HistoryItem ***)(v5 + 32);
      if (v8 == v4 && (v4 == 1 || *(_DWORD *)(v5 + 56)))
      {
        if (!v4)
        {
          __break(0xC471u);
          return result;
        }
        v23 = **v22;
        **v22 = 0;
        v24 = *v22;
        v25 = **v22;
        **v22 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
          {
            v26 = (WTF *)MEMORY[0x1D82A3F20]();
            WTF::fastFree(v26, v27);
            v4 = *(unsigned int *)(v5 + 44);
          }
          else
          {
            --*(_DWORD *)v25;
          }
        }
        memmove(v24, v24 + 1, *(_QWORD *)(v5 + 32) + 8 * v4 - (_QWORD)(v24 + 1));
        --*(_DWORD *)(v5 + 44);
        v28 = (WebCore::BackForwardCache *)WTF::HashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>((uint64_t *)(v5 + 48), (uint64_t)v23);
        v29 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v28);
        WebCore::BackForwardCache::remove(v29, v23);
        --*(_DWORD *)(v5 + 56);
        if (*(_DWORD *)v23 == 1)
        {
          v30 = (WTF *)MEMORY[0x1D82A3F20](v23);
          WTF::fastFree(v30, v31);
        }
        else
        {
          --*(_DWORD *)v23;
        }
      }
      v32 = (_DWORD *)*a4;
      ++*(_DWORD *)*a4;
      v34 = (uint64_t *)(v5 + 48);
      v33 = *(_QWORD *)(v5 + 48);
      if (v33
        || (WTF::HashTable<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::rehash((uint64_t *)(v5 + 48), 8u), (v33 = *v34) != 0))
      {
        v35 = *(_DWORD *)(v33 - 8);
      }
      else
      {
        v35 = 0;
      }
      v36 = ((unint64_t)v32 + ~((_QWORD)v32 << 32)) ^ (((unint64_t)v32 + ~((_QWORD)v32 << 32)) >> 22);
      v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
      v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
      v39 = v35 & ((v38 >> 31) ^ v38);
      v40 = (_QWORD *)(v33 + 8 * v39);
      v41 = (_DWORD *)*v40;
      if (*v40)
      {
        v42 = 0;
        v43 = 1;
        while (v41 != v32)
        {
          if (v41 == (_DWORD *)-1)
            v42 = v40;
          v39 = (v39 + v43) & v35;
          v40 = (_QWORD *)(v33 + 8 * v39);
          v41 = (_DWORD *)*v40;
          ++v43;
          if (!*v40)
          {
            if (v42)
            {
              *v42 = 0;
              --*(_DWORD *)(*v34 - 16);
              v40 = v42;
            }
            goto LABEL_37;
          }
        }
        if (*v32 == 1)
        {
          v52 = (WTF *)MEMORY[0x1D82A3F20](v32);
          WTF::fastFree(v52, v53);
          v48 = (*(_DWORD *)(v5 + 56) + 1);
          v49 = *(unsigned int *)(v5 + 44);
          if ((_DWORD)v49 == *(_DWORD *)(v5 + 40))
            goto LABEL_52;
        }
        else
        {
          --*v32;
          v48 = (*(_DWORD *)(v5 + 56) + 1);
          v49 = *(unsigned int *)(v5 + 44);
          if ((_DWORD)v49 == *(_DWORD *)(v5 + 40))
            goto LABEL_52;
        }
        goto LABEL_53;
      }
LABEL_37:
      *v40 = v32;
      if (*v34)
      {
        ++*(_DWORD *)(*v34 - 12);
        v44 = *v34;
        if (*v34)
          goto LABEL_39;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v44 = *v34;
        if (*v34)
        {
LABEL_39:
          v45 = (*(_DWORD *)(v44 - 16) + *(_DWORD *)(v44 - 12));
          v46 = *(unsigned int *)(v44 - 4);
          if (v46 <= 0x400)
            goto LABEL_40;
          goto LABEL_48;
        }
      }
      v45 = *(unsigned int *)(v44 - 16);
      v46 = *(unsigned int *)(v44 - 4);
      if (v46 <= 0x400)
      {
LABEL_40:
        if (3 * v46 > 4 * v45)
          goto LABEL_51;
        if (!(_DWORD)v46)
        {
          v47 = 8;
LABEL_50:
          WTF::HashTable<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::rehash((uint64_t *)(v5 + 48), v47);
LABEL_51:
          v48 = (*(_DWORD *)(v5 + 56) + 1);
          v49 = *(unsigned int *)(v5 + 44);
          if ((_DWORD)v49 == *(_DWORD *)(v5 + 40))
          {
LABEL_52:
            a4 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 32, v49 + 1, (unint64_t)a4);
            LODWORD(v49) = *(_DWORD *)(v5 + 44);
          }
LABEL_53:
          v50 = (_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v48);
          result = (uint64_t)memmove(v50 + 1, v50, 8 * v49 - 8 * v48);
          v51 = (_DWORD *)*a4;
          *a4 = 0;
          *v50 = v51;
          ++*(_DWORD *)(v5 + 44);
          ++*(_DWORD *)(v5 + 56);
          return result;
        }
LABEL_49:
        v47 = (_DWORD)v46 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v46));
        goto LABEL_50;
      }
LABEL_48:
      if (v46 > 2 * v45)
        goto LABEL_51;
      goto LABEL_49;
    }
  }
  return result;
}

void sub_1D7FBB378(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FBB38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1D7FBB3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v2 + 8 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + 8 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = 8 * v8;
  v13 = *(_DWORD **)(v2 + v12);
  *(_QWORD *)(v2 + v12) = -1;
  if (!v13)
  {
LABEL_12:
    ++*(_DWORD *)(*a1 - 16);
    v14 = *a1;
    if (*a1)
      goto LABEL_13;
    goto LABEL_16;
  }
  if (*v13 != 1)
  {
    --*v13;
    goto LABEL_12;
  }
  v16 = (WTF *)MEMORY[0x1D82A3F20]();
  WTF::fastFree(v16, v17);
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
  {
LABEL_13:
    --*(_DWORD *)(v14 - 12);
    v15 = *a1;
    if (!*a1)
      return 1;
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(v14 - 12) = -1;
  v15 = *a1;
  if (!*a1)
    return 1;
LABEL_17:
  v18 = 6 * *(_DWORD *)(v15 - 12);
  v19 = *(_DWORD *)(v15 - 4);
  if (v18 >= v19 || v19 < 9)
    return 1;
  WTF::HashTable<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::rehash(a1, v19 >> 1);
  return 1;
}

_DWORD **WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(_DWORD **a1)
{
  _DWORD *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*v2 != 1)
  {
    --*v2;
    return a1;
  }
  v4 = (WTF *)MEMORY[0x1D82A3F20]();
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t BackForwardList::goToItem(uint64_t this, HistoryItem *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(this + 44);
  if ((_DWORD)v2)
  {
    v3 = 0;
    while (*(HistoryItem **)(*(_QWORD *)(this + 32) + 8 * v3) != a2)
    {
      if (v2 == ++v3)
        return this;
    }
    *(_DWORD *)(this + 56) = v3;
  }
  return this;
}

WTF *BackForwardList::backListWithLimit(WTF *result, void *a2, uint64_t a3)
{
  int v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  _DWORD *v11;
  unsigned int v12;
  unint64_t v13;
  WTF *v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  WTF *v24;

  v4 = (int)a2;
  v5 = result;
  if (*(_DWORD *)(a3 + 8))
  {
    v6 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(WTF **)a3;
      v8 = 8 * v6;
      do
      {
        v11 = *(_DWORD **)v7;
        *(_QWORD *)v7 = 0;
        if (v11)
        {
          if (*v11 == 1)
          {
            v9 = (WTF *)MEMORY[0x1D82A3F20]();
            WTF::fastFree(v9, v10);
          }
          else
          {
            --*v11;
          }
        }
        v7 = (WTF *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
      *(_DWORD *)(a3 + 12) = 0;
    }
    result = *(WTF **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  v12 = *((_DWORD *)v5 + 14);
  if (v12 != -1)
  {
    v13 = (v12 - v4) & ~((int)(v12 - v4) >> 31);
    if (v13 < v12)
    {
      do
      {
        while (1)
        {
          if (v13 >= *((unsigned int *)v5 + 11))
          {
LABEL_31:
            __break(0xC471u);
            JUMPOUT(0x1D7FBB75CLL);
          }
          v15 = *(_DWORD **)(*((_QWORD *)v5 + 4) + 8 * v13);
          v16 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v16 == *(_DWORD *)(a3 + 8))
            break;
          v14 = *(WTF **)a3;
          ++*v15;
          *((_QWORD *)v14 + v16) = v15;
          *(_DWORD *)(a3 + 12) = v16 + 1;
          if (++v13 >= v12)
            return result;
        }
        v17 = v16 + (v16 >> 2);
        if (v17 >= 0x10)
          v18 = v17 + 1;
        else
          v18 = 16;
        if (v18 <= v16 + 1)
          v19 = v16 + 1;
        else
          v19 = v18;
        if (v19 >> 29)
          goto LABEL_31;
        v20 = *(WTF **)a3;
        v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
        *(_DWORD *)(a3 + 8) = v19;
        *(_QWORD *)a3 = v21;
        result = (WTF *)memcpy(v21, v20, 8 * v16);
        if (v20)
        {
          if (*(WTF **)a3 == v20)
          {
            *(_QWORD *)a3 = 0;
            *(_DWORD *)(a3 + 8) = 0;
          }
          result = (WTF *)WTF::fastFree(v20, v22);
        }
        v23 = *(unsigned int *)(a3 + 12);
        v24 = *(WTF **)a3;
        ++*v15;
        *((_QWORD *)v24 + v23) = v15;
        v12 = *((_DWORD *)v5 + 14);
        *(_DWORD *)(a3 + 12) = v23 + 1;
        ++v13;
      }
      while (v13 < v12);
    }
  }
  return result;
}

WTF *BackForwardList::forwardListWithLimit(WTF *result, void *a2, uint64_t a3)
{
  int v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  signed int v16;
  _QWORD *v17;
  signed int v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WTF *v24;
  void *v25;
  void *v26;

  v4 = (int)a2;
  v5 = result;
  if (*(_DWORD *)(a3 + 8))
  {
    v6 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(WTF **)a3;
      v8 = 8 * v6;
      do
      {
        v11 = *(_DWORD **)v7;
        *(_QWORD *)v7 = 0;
        if (v11)
        {
          if (*v11 == 1)
          {
            v9 = (WTF *)MEMORY[0x1D82A3F20]();
            WTF::fastFree(v9, v10);
          }
          else
          {
            --*v11;
          }
        }
        v7 = (WTF *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
      *(_DWORD *)(a3 + 12) = 0;
    }
    result = *(WTF **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  v12 = *((_DWORD *)v5 + 11);
  if (v12)
  {
    v13 = v12 - 1;
    v14 = *((_DWORD *)v5 + 14);
    if (v14 < v13)
    {
      v15 = v13 >= v14 + v4 ? v14 + v4 : v13;
      v16 = v14 + 1;
      if ((int)(v14 + 1) <= v15)
      {
        while (1)
        {
          v18 = v16;
          if (*((unsigned int *)v5 + 11) <= (unint64_t)v16)
            break;
          v19 = *(_DWORD **)(*((_QWORD *)v5 + 4) + 8 * v16);
          v20 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v20 == *(_DWORD *)(a3 + 8))
          {
            v21 = v20 + (v20 >> 2);
            if (v21 >= 0x10)
              v22 = v21 + 1;
            else
              v22 = 16;
            if (v22 <= v20 + 1)
              v23 = v20 + 1;
            else
              v23 = v22;
            if (v23 >> 29)
              break;
            v24 = *(WTF **)a3;
            v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
            *(_DWORD *)(a3 + 8) = v23;
            *(_QWORD *)a3 = v25;
            result = (WTF *)memcpy(v25, v24, 8 * v20);
            if (v24)
            {
              if (*(WTF **)a3 == v24)
              {
                *(_QWORD *)a3 = 0;
                *(_DWORD *)(a3 + 8) = 0;
              }
              result = (WTF *)WTF::fastFree(v24, v26);
            }
            v20 = *(unsigned int *)(a3 + 12);
            v17 = (_QWORD *)(*(_QWORD *)a3 + 8 * v20);
          }
          else
          {
            v17 = (_QWORD *)(*(_QWORD *)a3 + 8 * v20);
          }
          ++*v19;
          *v17 = v19;
          *(_DWORD *)(a3 + 12) = v20 + 1;
          v16 = v18 + 1;
          if (v18 + 1 > v15)
            return result;
        }
        __break(0xC471u);
        JUMPOUT(0x1D7FBB910);
      }
    }
  }
  return result;
}

uint64_t BackForwardList::setCapacity(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::HistoryItem *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  void *v14;
  WebCore::BackForwardCache *v15;
  WebCore::BackForwardCache *v16;
  WTF *v17;
  void *v18;
  int v19;

  v3 = this;
  v4 = *(unsigned int *)(this + 44);
  v5 = v4;
  if ((int)v4 <= a2)
  {
    LODWORD(v6) = *(_DWORD *)(this + 44);
    if (!a2)
    {
LABEL_15:
      v19 = -1;
      goto LABEL_16;
    }
  }
  else
  {
    v6 = *(unsigned int *)(this + 44);
    do
    {
      while (1)
      {
        if (!v5)
        {
          __break(0xC471u);
          return this;
        }
        v7 = v6 - 1;
        v8 = *(_QWORD *)(v3 + 32);
        v9 = 8 * v7;
        v10 = *(WebCore::HistoryItem **)(v8 + 8 * v7);
        *(_QWORD *)(v8 + v9) = 0;
        v11 = *(_QWORD *)(v3 + 32);
        v12 = *(_DWORD **)(v11 + 8 * v7);
        *(_QWORD *)(v11 + v9) = 0;
        if (v12)
        {
          if (*v12 == 1)
          {
            v13 = (WTF *)MEMORY[0x1D82A3F20]();
            WTF::fastFree(v13, v14);
          }
          else
          {
            --*v12;
          }
        }
        *(_DWORD *)(v3 + 44) = v7;
        v15 = (WebCore::BackForwardCache *)WTF::HashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>((uint64_t *)(v3 + 48), (uint64_t)v10);
        v16 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v15);
        this = WebCore::BackForwardCache::remove(v16, v10);
        if (*(_DWORD *)v10 == 1)
          break;
        --*(_DWORD *)v10;
        v6 = *(unsigned int *)(v3 + 44);
        v5 = v6;
        v4 = v6;
        if ((int)v6 <= a2)
          goto LABEL_11;
      }
      v17 = (WTF *)MEMORY[0x1D82A3F20](v10);
      this = WTF::fastFree(v17, v18);
      v6 = *(unsigned int *)(v3 + 44);
      v5 = v6;
      v4 = v6;
    }
    while ((int)v6 > a2);
LABEL_11:
    if (!a2)
      goto LABEL_15;
  }
  if (v4 - 1 < (unint64_t)*(unsigned int *)(v3 + 56))
  {
    v19 = v6 - 1;
LABEL_16:
    *(_DWORD *)(v3 + 56) = v19;
  }
  *(_DWORD *)(v3 + 60) = a2;
  return this;
}

void sub_1D7FBBA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

uint64_t BackForwardList::backListCount(BackForwardList *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 14);
  if (v1 == -1)
    return 0;
  else
    return v1;
}

uint64_t BackForwardList::forwardListCount(BackForwardList *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14);
  if (v1 == -1)
    return 0;
  else
    return (*((_DWORD *)this + 11) + ~v1);
}

_DWORD *BackForwardList::itemAtIndex@<X0>(_DWORD *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  unsigned int v6;
  _DWORD *v7;

  if (-this[14] <= a2)
  {
    v5 = this;
    this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 48))(this);
    if ((int)this >= a2)
    {
      v6 = v5[14] + a2;
      if (v5[11] <= v6)
      {
        __break(0xC471u);
      }
      else
      {
        v7 = *(_DWORD **)(*((_QWORD *)v5 + 4) + 8 * v6);
        ++*v7;
        *a3 = v7;
      }
    }
    else
    {
      *a3 = 0;
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t BackForwardList::close(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  _DWORD *v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD **v11;
  WTF *v12;
  void *v13;
  _DWORD *v14;

  v2 = this;
  if (*(_DWORD *)(this + 40))
  {
    v3 = *(unsigned int *)(this + 44);
    if ((_DWORD)v3)
    {
      v4 = *(_DWORD ***)(this + 32);
      v5 = 8 * v3;
      do
      {
        v8 = *v4;
        *v4 = 0;
        if (v8)
        {
          if (*v8 == 1)
          {
            v6 = (WTF *)MEMORY[0x1D82A3F20]();
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*v8;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *(_DWORD *)(v2 + 44) = 0;
    }
    this = *(_QWORD *)(v2 + 32);
    if (this)
    {
      *(_QWORD *)(v2 + 32) = 0;
      *(_DWORD *)(v2 + 40) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  v9 = *(_DWORD ***)(v2 + 48);
  if (v9)
  {
    *(_QWORD *)(v2 + 48) = 0;
    v10 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v10)
    {
      v11 = v9;
      do
      {
        v14 = *v11;
        if (*v11 != (_DWORD *)-1)
        {
          *v11 = 0;
          if (v14)
          {
            if (*v14 == 1)
            {
              v12 = (WTF *)MEMORY[0x1D82A3F20]();
              WTF::fastFree(v12, v13);
            }
            else
            {
              --*v14;
            }
          }
        }
        ++v11;
        --v10;
      }
      while (v10);
    }
    this = WTF::fastFree((WTF *)(v9 - 2), a2);
  }
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 64) = 1;
  return this;
}

BOOL BackForwardList::containsItem(BackForwardList *this, const HistoryItem *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  const HistoryItem *v8;
  int v9;
  _BOOL8 result;

  v2 = *((_QWORD *)this + 6);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(const HistoryItem **)(v2 + 8 * v7);
  if (v8 == a2)
    return 1;
  v9 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v9) & v3;
    v8 = *(const HistoryItem **)(v2 + 8 * v7);
    ++v9;
  }
  while (v8 != a2);
  return result;
}

_DWORD *WTF::RefCounted<WebCore::HistoryItem>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x1D82A3F20]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF *v24;
  void *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 8 * i);
      v11 = (_DWORD *)*v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = (_DWORD *)*v10;
          *v10 = 0;
          *v21 = v22;
          v23 = (_DWORD *)*v10;
          *v10 = 0;
          if (v23)
          {
            if (*v23 == 1)
            {
              v24 = (WTF *)MEMORY[0x1D82A3F20]();
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*v23;
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 8 * v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 29)
        goto LABEL_30;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      memcpy(v19, v5, 8 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 29))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 8 * v6);
      v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1D7FBBFF8);
  }
  v13 = *(void **)a1;
  return (unint64_t)v13 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
}

_QWORD *BinaryPropertyListPlan::writeBooleanTrue(_QWORD *this)
{
  uint64_t v1;

  ++this[7];
  if (this[1] == -1)
  {
    v1 = this[6];
    this[6] = v1 + 1;
    this[1] = v1;
    ++this[8];
  }
  return this;
}

uint64_t *BinaryPropertyListPlan::writeInteger(uint64_t *this, int a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v2 = this;
  ++this[7];
  if (!a2)
  {
    if (this[2] != -1)
      return this;
    v20 = this[6];
    this[2] = v20;
    this[6] = v20 + 1;
    v19 = 2;
LABEL_33:
    v2[8] += v19;
    return this;
  }
  v5 = this + 3;
  v4 = this[3];
  if (v4
    || (this = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,unsigned long>>,WTF::DefaultHash<int>,WTF::HashMap<int,unsigned long,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(this + 3, 8u), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v6 & (v8 ^ HIWORD(v8));
  v10 = (_QWORD *)(v4 + 16 * v9);
  v11 = *(_DWORD *)v10;
  if (!*(_DWORD *)v10)
  {
LABEL_13:
    *(_DWORD *)v10 = a2;
    v10[1] = v2[6];
    v14 = v2[3];
    if (v14)
    {
      ++*(_DWORD *)(v14 - 12);
      v15 = *v5;
      if (*v5)
        goto LABEL_15;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v15 = *v5;
      if (*v5)
      {
LABEL_15:
        v16 = (*(_DWORD *)(v15 - 16) + *(_DWORD *)(v15 - 12));
        v17 = *(unsigned int *)(v15 - 4);
        if (v17 <= 0x400)
          goto LABEL_16;
        goto LABEL_23;
      }
    }
    v16 = *(unsigned int *)(v15 - 16);
    v17 = *(unsigned int *)(v15 - 4);
    if (v17 <= 0x400)
    {
LABEL_16:
      if (3 * v17 > 4 * v16)
        goto LABEL_26;
      if (!(_DWORD)v17)
      {
        v18 = 8;
LABEL_25:
        this = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,unsigned long>>,WTF::DefaultHash<int>,WTF::HashMap<int,unsigned long,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v2 + 3, v18);
LABEL_26:
        ++v2[6];
        if (a2 >= 0x100)
        {
          if (a2 >= 0x10000)
          {
            v19 = 9;
            if (a2 >= 0)
              v19 = 5;
          }
          else
          {
            v19 = 3;
          }
        }
        else
        {
          v19 = 2;
        }
        goto LABEL_33;
      }
LABEL_24:
      v18 = (_DWORD)v17 << (6 * *(_DWORD *)(v15 - 12) >= (2 * v17));
      goto LABEL_25;
    }
LABEL_23:
    if (v17 > 2 * v16)
      goto LABEL_26;
    goto LABEL_24;
  }
  v12 = 0;
  v13 = 1;
  while (v11 != a2)
  {
    if (v11 == -1)
      v12 = v10;
    v9 = (v9 + v13) & v6;
    v10 = (_QWORD *)(v4 + 16 * v9);
    v11 = *(_DWORD *)v10;
    ++v13;
    if (!*(_DWORD *)v10)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v10 = v12;
      }
      goto LABEL_13;
    }
  }
  return this;
}

uint64_t BinaryPropertyListPlan::writeString(BinaryPropertyListPlan *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  WTF **v11;
  int i;
  unsigned int v13;
  WTF **v14;
  WTF *v15;
  uint64_t result;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  const WTF::StringImpl *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (uint64_t *)((char *)this + 32);
  v6 = *((_QWORD *)this + 4);
  ++*((_QWORD *)this + 7);
  if (!v6)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 4, 8u);
    v6 = *v5;
    if (!*v5)
    {
      v7 = 0;
      v8 = *a2;
      v9 = *((_DWORD *)*a2 + 4);
      if (v9 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = *a2;
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
    goto LABEL_6;
LABEL_4:
  v10 = v9 >> 8;
LABEL_7:
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v7;
    v14 = (WTF **)(v6 + 16 * (v10 & v7));
    v15 = *v14;
    if (*v14 == (WTF *)-1)
    {
      v11 = (WTF **)(v6 + 16 * v13);
      goto LABEL_9;
    }
    if (!v15)
      break;
    result = WTF::equal(v15, *a2, a3);
    if ((result & 1) != 0)
      return result;
LABEL_9:
    v10 = i + v13;
  }
  if (v11)
  {
    *v11 = 0;
    v11[1] = 0;
    --*(_DWORD *)(*v5 - 16);
    v14 = v11;
  }
  v17 = *a2;
  if (*a2)
    *(_DWORD *)v17 += 2;
  *v14 = v17;
  v14[1] = (WTF *)*((_QWORD *)this + 6);
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    ++*(_DWORD *)(v18 - 12);
    v19 = *v5;
    if (*v5)
      goto LABEL_20;
LABEL_25:
    v20 = *(unsigned int *)(v19 - 16);
    v21 = *(unsigned int *)(v19 - 4);
    if (v21 > 0x400)
      goto LABEL_26;
LABEL_21:
    if (3 * v21 <= 4 * v20)
    {
      if (!(_DWORD)v21)
      {
        v22 = 8;
        goto LABEL_28;
      }
LABEL_27:
      v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
LABEL_28:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v22);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v19 = *v5;
    if (!*v5)
      goto LABEL_25;
LABEL_20:
    v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
    v21 = *(unsigned int *)(v19 - 4);
    if (v21 <= 0x400)
      goto LABEL_21;
LABEL_26:
    if (v21 <= 2 * v20)
      goto LABEL_27;
  }
  ++*((_QWORD *)this + 6);
  v23 = *a2;
  if (*a2)
  {
    v24 = *((_DWORD *)v23 + 1);
    if (v24 >= 0xF)
    {
      if (v24 >= 0x100)
      {
        v25 = 6;
        if (v24 < 0x10000)
          v25 = 4;
      }
      else
      {
        v25 = 3;
      }
    }
    else
    {
      v25 = 1;
    }
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = v24;
  v27 = v25 + v24 + *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v27;
  result = WTF::String::containsOnlyASCII(v23);
  if ((result & 1) == 0)
    *((_QWORD *)this + 8) = v27 + v26;
  return result;
}

uint64_t BinaryPropertyListPlan::writeIntegerArray(BinaryPropertyListPlan *this, const int *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  int v23;
  _QWORD *v24;
  BOOL v25;
  _QWORD *v26;
  unint64_t v27;
  unsigned int *v28;
  int v29;
  int i;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v7 = (uint64_t *)((char *)this + 40);
  v6 = *((_QWORD *)this + 5);
  v8 = *((_QWORD *)this + 7) + 1;
  *((_QWORD *)this + 7) = v8;
  if (v6
    || (WTF::HashTable<IntegerArray,WTF::KeyValuePair<IntegerArray,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IntegerArray,unsigned long>>,IntegerArrayHash,WTF::HashMap<IntegerArray,unsigned long,IntegerArrayHash,IntegerArrayHashTraits,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,IntegerArrayHashTraits>::rehash((uint64_t *)this + 5, 8u, 0), (v6 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = -1640531527;
    if (!a3)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
    v10 = -1640531527;
    if (!a3)
      goto LABEL_6;
  }
  v11 = 4 * a3;
  v12 = a2;
  do
  {
    v13 = *v12++;
    v10 = ((v13 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v13) << 16) ^ (v10 + (unsigned __int16)v13))
        + (((v13 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v13) << 16) ^ (v10 + (unsigned __int16)v13)) >> 11);
    v11 -= 4;
  }
  while (v11);
LABEL_6:
  v14 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
  v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  v16 = v15 ^ (v15 << 10);
  if (!v16)
    v16 = 0x800000;
  v17 = v16 & v9;
  v18 = v6 + 24 * v17;
  v19 = *(unsigned int **)v18;
  v20 = *(_QWORD *)(v18 + 8);
  result = v20 == 0;
  if (*(_QWORD *)v18)
    v22 = 0;
  else
    v22 = v20 == 0;
  if (v22)
    goto LABEL_40;
  if (a3 == -1)
  {
    if (v20 == -1)
      return result;
    for (i = 1; ; ++i)
    {
      v17 = (v17 + i) & v9;
      v18 = v6 + 24 * v17;
      v31 = *(_QWORD *)(v18 + 8);
      if (!*(_QWORD *)v18 && v31 == 0)
        break;
      if (v31 == -1)
        return result;
    }
LABEL_40:
    *(_QWORD *)v18 = a2;
    *(_QWORD *)(v18 + 8) = a3;
    *(_QWORD *)(v18 + 16) = 0;
    if (*v7)
    {
      ++*(_DWORD *)(*v7 - 12);
      v33 = *v7;
      if (*v7)
        goto LABEL_42;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v33 = *v7;
      if (*v7)
      {
LABEL_42:
        v34 = (*(_DWORD *)(v33 - 16) + *(_DWORD *)(v33 - 12));
        v35 = *(unsigned int *)(v33 - 4);
        if (v35 <= 0x400)
          goto LABEL_43;
        goto LABEL_48;
      }
    }
    v34 = *(unsigned int *)(v33 - 16);
    v35 = *(unsigned int *)(v33 - 4);
    if (v35 <= 0x400)
    {
LABEL_43:
      if (3 * v35 <= 4 * v34)
      {
        if (!(_DWORD)v35)
        {
          v36 = 8;
LABEL_50:
          result = (uint64_t)WTF::HashTable<IntegerArray,WTF::KeyValuePair<IntegerArray,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IntegerArray,unsigned long>>,IntegerArrayHash,WTF::HashMap<IntegerArray,unsigned long,IntegerArrayHash,IntegerArrayHashTraits,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,IntegerArrayHashTraits>::rehash(v7, v36, (unsigned int **)v18);
          v18 = result;
          goto LABEL_51;
        }
LABEL_49:
        v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v35));
        goto LABEL_50;
      }
LABEL_51:
      if (a3)
      {
        v37 = 0;
        do
          result = (*(uint64_t (**)(BinaryPropertyListPlan *, _QWORD))(*(_QWORD *)this + 8))(this, a2[v37++]);
        while (a3 != v37);
        v38 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v38 + 1;
        *(_QWORD *)(v18 + 16) = v38;
        v39 = 1;
        v40 = 3;
        v41 = 4;
        v42 = 10;
        if (!HIDWORD(a3))
          v42 = 6;
        if (a3 >= 0x10000)
          v41 = v42;
        if (a3 >= 0x100)
          v40 = v41;
        if (a3 >= 0xF)
          v39 = v40;
      }
      else
      {
        v43 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v43 + 1;
        *(_QWORD *)(v18 + 16) = v43;
        v39 = 1;
      }
      v44 = *((_QWORD *)this + 9) + a3;
      *((_QWORD *)this + 8) += v39;
      *((_QWORD *)this + 9) = v44;
      *((_QWORD *)this + 7) = v8;
      return result;
    }
LABEL_48:
    if (v35 <= 2 * v34)
      goto LABEL_49;
    goto LABEL_51;
  }
  v23 = 0;
  v24 = 0;
  while (1)
  {
    v26 = v24;
    v24 = (_QWORD *)v18;
    if (v20 == -1)
      goto LABEL_15;
    if (v20 == a3)
    {
      if ((result & 1) != 0)
        return result;
      if (*v19 == *a2)
        break;
    }
    v24 = v26;
LABEL_15:
    v17 = (++v23 + v17) & v9;
    v18 = v6 + 24 * v17;
    v19 = *(unsigned int **)v18;
    v20 = *(_QWORD *)(v18 + 8);
    result = v20 == 0;
    if (*(_QWORD *)v18)
      v25 = 0;
    else
      v25 = v20 == 0;
    if (v25)
    {
      if (v24)
      {
        *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        --*(_DWORD *)(*v7 - 16);
        v18 = (uint64_t)v24;
      }
      goto LABEL_40;
    }
  }
  v27 = 0;
  v28 = v19 + 1;
  while (a3 - 1 != v27)
  {
    result = v28[v27];
    v29 = a2[++v27];
    if ((_DWORD)result != v29)
    {
      v24 = v26;
      if (v27 < a3)
        goto LABEL_15;
      return result;
    }
  }
  return result;
}

BOOL BinaryPropertyListPlan::writeUniqueString(int64x2_t *this, WTF::String **a2)
{
  uint64_t v3;
  WTF::String *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;

  v3 = 1;
  this[3] = vaddq_s64(this[3], vdupq_n_s64(1uLL));
  v4 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v4 + 1);
    if (v5 >= 0xF)
    {
      if (v5 >= 0x100)
      {
        v3 = 6;
        if (v5 < 0x10000)
          v3 = 4;
      }
      else
      {
        v3 = 3;
      }
    }
    else
    {
      v3 = 1;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = v5;
  v7 = v3 + v5 + this[4].i64[0];
  this[4].i64[0] = v7;
  result = WTF::String::containsOnlyASCII(v4);
  if (!result)
    this[4].i64[0] = v7 + v6;
  return result;
}

size_t BinaryPropertyListPlan::writeUniqueString(int64x2_t *this, const char *__s)
{
  size_t result;
  uint64_t v4;
  uint64_t v5;

  this[3] = vaddq_s64(this[3], vdupq_n_s64(1uLL));
  result = strlen(__s);
  v4 = 3;
  v5 = 6;
  if (result < 0x10000uLL)
    v5 = 4;
  if (result >= 0x100uLL)
    v4 = v5;
  if (result < 0xFuLL)
    v4 = 1;
  this[4].i64[0] += v4 + result;
  return result;
}

uint64_t BinaryPropertyListPlan::writeArrayStart(BinaryPropertyListPlan *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  return v1;
}

_QWORD *BinaryPropertyListPlan::writeArrayEnd(_QWORD *this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = this[7];
  v3 = this[6] + 1;
  v4 = 1;
  v5 = 3;
  v6 = 10;
  if (!HIDWORD(v2))
    v6 = 6;
  if (v2 < 0x10000)
    v6 = 4;
  if (v2 >= 0x100)
    v5 = v6;
  v7 = this[9];
  if (v2 >= 0xF)
    v4 = v5;
  this[8] += v4;
  this[9] = v7 + v2;
  this[6] = v3;
  this[7] = a2 + 1;
  return this;
}

uint64_t BinaryPropertyListPlan::writeDictionaryStart(BinaryPropertyListPlan *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  return v1;
}

_QWORD *BinaryPropertyListPlan::writeDictionaryEnd(_QWORD *this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = this[7];
  v3 = this[6] + 1;
  v4 = 1;
  v5 = 3;
  v6 = 10;
  if (!(v2 >> 33))
    v6 = 6;
  if (v2 < 0x20000)
    v6 = 4;
  if (v2 >= 0x200)
    v5 = v6;
  v7 = this[9];
  if (v2 >= 0x1E)
    v4 = v5;
  this[8] += v4;
  this[9] = v7 + v2;
  this[6] = v3;
  this[7] = a2 + 1;
  return this;
}

BOOL WTF::String::containsOnlyASCII(WTF::String *this)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x16_t *v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x16_t *v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint16x4_t *v21;
  unsigned __int8 v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  uint64_t v30;
  int8x16_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint16x4_t *v38;
  unint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint16x8_t v46;
  uint32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  unsigned int v60;
  uint64_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t *v64;
  uint64_t v65;
  int8x16_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  uint8x8_t *v73;
  unint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint8x8_t v77;
  uint16x8_t v78;
  uint32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  uint32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  unint64_t v88;
  uint8x16_t *v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  uint16x8_t v101;
  uint32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  uint32x4_t v105;
  int8x16_t v106;
  uint32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  unsigned int v112;

  if (!this)
    return 1;
  v1 = *((_QWORD *)this + 1);
  v2 = *((unsigned int *)this + 1);
  v4 = (v1 & 7) == 0 || v2 == 0;
  if ((*((_BYTE *)this + 16) & 4) == 0)
  {
    v5 = v1 + 2 * v2;
    if (v4)
    {
      v6 = 0;
      v7 = *((_QWORD *)this + 1);
    }
    else
    {
      v6 = 0;
      v14 = 2 * v2 - 2;
      v15 = v1 + 2;
      v7 = *((_QWORD *)this + 1);
      do
      {
        v16 = *(unsigned __int16 *)v7;
        v7 += 2;
        *(_QWORD *)&v6 |= v16;
        if ((v15 & 7) == 0)
          break;
        v17 = v14;
        v14 -= 2;
        v15 += 2;
      }
      while (v17);
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    if (v7 >= (v5 & 0xFFFFFFFFFFFFFFF8))
    {
      v21 = (uint16x4_t *)v7;
      goto LABEL_50;
    }
    v19 = v7 + 8;
    if (v18 > v7 + 8)
      v19 = v5 & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 + ~v7;
    if (v20 >= 0x18)
    {
      v26 = (v20 >> 3) + 1;
      v21 = (uint16x4_t *)(v7 + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL));
      v27 = 0uLL;
      v28 = (int8x16_t)(unint64_t)v6;
      v29 = (int8x16_t *)(v7 + 16);
      v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = vorrq_s8(v29[-1], v28);
        v27 = vorrq_s8(*v29, v27);
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      v31 = vorrq_s8(v27, v28);
      v6 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_50:
        if (v21 != (uint16x4_t *)v5)
        {
          v33 = v1 + 2 * v2 - (_QWORD)v21 - 2;
          if (v33 >= 0x1E)
          {
            v35 = (v33 >> 1) + 1;
            v36 = 0uLL;
            v37 = (int8x16_t)(unint64_t)v6;
            v34 = (unsigned __int16 *)v21 + (v35 & 0xFFFFFFFFFFFFFFF0);
            v38 = v21 + 2;
            v39 = v35 & 0xFFFFFFFFFFFFFFF0;
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = 0uLL;
            do
            {
              v46 = *(uint16x8_t *)v38[-2].i8;
              v47 = vmovl_u16(*(uint16x4_t *)v46.i8);
              v48.i64[0] = v47.u32[0];
              v48.i64[1] = v47.u32[1];
              v49 = v48;
              v48.i64[0] = v47.u32[2];
              v48.i64[1] = v47.u32[3];
              v50 = v48;
              v51 = vmovl_high_u16(v46);
              v48.i64[0] = v51.u32[0];
              v48.i64[1] = v51.u32[1];
              v52 = v48;
              v48.i64[0] = v51.u32[2];
              v48.i64[1] = v51.u32[3];
              v53 = v48;
              v54 = vmovl_u16(*v38);
              v48.i64[0] = v54.u32[0];
              v48.i64[1] = v54.u32[1];
              v55 = v48;
              v48.i64[0] = v54.u32[2];
              v48.i64[1] = v54.u32[3];
              v56 = v48;
              v57 = vmovl_high_u16(*(uint16x8_t *)v38->i8);
              v48.i64[0] = v57.u32[0];
              v48.i64[1] = v57.u32[1];
              v58 = v48;
              v48.i64[0] = v57.u32[2];
              v48.i64[1] = v57.u32[3];
              v41 = vorrq_s8(v41, v53);
              v40 = vorrq_s8(v40, v52);
              v36 = vorrq_s8(v36, v50);
              v37 = vorrq_s8(v37, v49);
              v45 = vorrq_s8(v45, v48);
              v44 = vorrq_s8(v44, v58);
              v43 = vorrq_s8(v43, v56);
              v42 = vorrq_s8(v42, v55);
              v38 += 4;
              v39 -= 16;
            }
            while (v39);
            v59 = vorrq_s8(vorrq_s8(vorrq_s8(v42, v37), vorrq_s8(v44, v40)), vorrq_s8(vorrq_s8(v43, v36), vorrq_s8(v45, v41)));
            v6 = vorr_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
            if (v35 == (v35 & 0xFFFFFFFFFFFFFFF0))
              return (*(_QWORD *)&v6 & 0xFF80FF80FF80FF80) == 0;
          }
          else
          {
            v34 = (unsigned __int16 *)v21;
          }
          do
          {
            v60 = *v34++;
            *(_QWORD *)&v6 |= v60;
          }
          while (v34 != (unsigned __int16 *)v5);
        }
        return (*(_QWORD *)&v6 & 0xFF80FF80FF80FF80) == 0;
      }
    }
    else
    {
      v21 = (uint16x4_t *)v7;
    }
    do
    {
      v32 = (uint64_t)*v21++;
      *(_QWORD *)&v6 |= v32;
    }
    while ((unint64_t)v21 < v18);
    goto LABEL_50;
  }
  v9 = (uint8x16_t *)(v1 + v2);
  if (v4)
  {
    v10 = 0;
    v11 = *((_QWORD *)this + 1);
    v12 = (unint64_t)v9 & 0xFFFFFFFFFFFFFFF8;
    if (v1 >= ((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_14:
      v13 = (uint8x16_t *)v11;
      goto LABEL_62;
    }
  }
  else
  {
    v11 = v1 + 1;
    v22 = *(_BYTE *)v1;
    if (((v1 + 1) & 7) != 0 && (_DWORD)v2 != 1)
    {
      v22 |= *(_BYTE *)(v1 + 1);
      v11 = v1 + 2;
      if (((v1 + 2) & 7) != 0 && (_DWORD)v2 != 2)
      {
        v22 |= *(_BYTE *)(v1 + 2);
        v11 = v1 + 3;
        if (((v1 + 3) & 7) != 0 && (_DWORD)v2 != 3)
        {
          v22 |= *(_BYTE *)(v1 + 3);
          v11 = v1 + 4;
          if (((v1 + 4) & 7) != 0 && (_DWORD)v2 != 4)
          {
            v22 |= *(_BYTE *)(v1 + 4);
            v11 = v1 + 5;
            if (((v1 + 5) & 7) != 0 && (_DWORD)v2 != 5)
            {
              v22 |= *(_BYTE *)(v1 + 5);
              v11 = v1 + 6;
              if (((v1 + 6) & 7) != 0 && (_DWORD)v2 != 6)
              {
                v22 |= *(_BYTE *)(v1 + 6);
                v11 = v1 + 7;
                if (((v1 + 7) & 7) != 0 && (_DWORD)v2 != 7)
                {
                  v22 |= *(_BYTE *)(v1 + 7);
                  v11 = v1 + 8;
                }
              }
            }
          }
        }
      }
    }
    v10 = (int8x8_t)v22;
    v12 = (unint64_t)v9 & 0xFFFFFFFFFFFFFFF8;
    if (v11 >= ((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_14;
  }
  v24 = v11 + 8;
  if (v12 > v11 + 8)
    v24 = v12;
  v25 = v24 + ~v11;
  if (v25 < 0x18)
  {
    v13 = (uint8x16_t *)v11;
    do
    {
LABEL_61:
      v67 = v13->i64[0];
      v13 = (uint8x16_t *)((char *)v13 + 8);
      *(_QWORD *)&v10 |= v67;
    }
    while ((unint64_t)v13 < v12);
    goto LABEL_62;
  }
  v61 = (v25 >> 3) + 1;
  v13 = (uint8x16_t *)(v11 + 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL));
  v62 = 0uLL;
  v63 = (int8x16_t)(unint64_t)v10;
  v64 = (int8x16_t *)(v11 + 16);
  v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v63 = vorrq_s8(v64[-1], v63);
    v62 = vorrq_s8(*v64, v62);
    v64 += 2;
    v65 -= 4;
  }
  while (v65);
  v66 = vorrq_s8(v62, v63);
  v10 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_61;
LABEL_62:
  if (v13 != v9)
  {
    v68 = v1 + v2 - (_QWORD)v13;
    if (v68 < 8)
    {
      v69 = (unsigned __int8 *)v13;
      goto LABEL_76;
    }
    if (v68 >= 0x10)
    {
      v70 = v68 & 0xFFFFFFFFFFFFFFF0;
      v86 = 0uLL;
      v87 = (int8x16_t)(unint64_t)v10;
      v88 = v68 & 0xFFFFFFFFFFFFFFF0;
      v89 = v13;
      v90 = 0uLL;
      v91 = 0uLL;
      v92 = 0uLL;
      v93 = 0uLL;
      v94 = 0uLL;
      v95 = 0uLL;
      do
      {
        v96 = *v89++;
        v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
        v98 = vmovl_u16(*(uint16x4_t *)v97.i8);
        v99.i64[0] = v98.u32[0];
        v99.i64[1] = v98.u32[1];
        v100 = v99;
        v101 = vmovl_high_u8(v96);
        v102 = vmovl_high_u16(v101);
        v99.i64[0] = v102.u32[2];
        v99.i64[1] = v102.u32[3];
        v103 = v99;
        v99.i64[0] = v98.u32[2];
        v99.i64[1] = v98.u32[3];
        v104 = v99;
        v105 = vmovl_high_u16(v97);
        v99.i64[0] = v105.u32[0];
        v99.i64[1] = v105.u32[1];
        v106 = v99;
        v107 = vmovl_u16(*(uint16x4_t *)v101.i8);
        v99.i64[0] = v107.u32[0];
        v99.i64[1] = v107.u32[1];
        v108 = v99;
        v99.i64[0] = v102.u32[0];
        v99.i64[1] = v102.u32[1];
        v109 = v99;
        v99.i64[0] = v105.u32[2];
        v99.i64[1] = v105.u32[3];
        v110 = v99;
        v99.i64[0] = v107.u32[2];
        v99.i64[1] = v107.u32[3];
        v93 = vorrq_s8(v93, v99);
        v91 = vorrq_s8(v91, v110);
        v94 = vorrq_s8(v94, v109);
        v92 = vorrq_s8(v92, v108);
        v90 = vorrq_s8(v90, v106);
        v86 = vorrq_s8(v86, v104);
        v95 = vorrq_s8(v95, v103);
        v87 = vorrq_s8(v87, v100);
        v88 -= 16;
      }
      while (v88);
      v111 = vorrq_s8(vorrq_s8(vorrq_s8(v87, v92), vorrq_s8(v90, v94)), vorrq_s8(vorrq_s8(v86, v93), vorrq_s8(v91, v95)));
      v10 = vorr_s8(*(int8x8_t *)v111.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL));
      if (v68 == v70)
        return (*(_QWORD *)&v10 & 0x8080808080808080) == 0;
      if ((v68 & 8) == 0)
      {
        v69 = &v13->u8[v70];
        do
        {
LABEL_76:
          v112 = *v69++;
          *(_QWORD *)&v10 |= v112;
        }
        while (v69 != (unsigned __int8 *)v9);
        return (*(_QWORD *)&v10 & 0x8080808080808080) == 0;
      }
    }
    else
    {
      v70 = 0;
    }
    v69 = &v13->u8[v68 & 0xFFFFFFFFFFFFFFF8];
    v71 = 0uLL;
    v72 = (int8x16_t)(unint64_t)v10;
    v73 = (uint8x8_t *)&v13->i8[v70];
    v74 = v70 - (v68 & 0xFFFFFFFFFFFFFFF8);
    v75 = 0uLL;
    v76 = 0uLL;
    do
    {
      v77 = *v73++;
      v78 = vmovl_u8(v77);
      v79 = vmovl_u16(*(uint16x4_t *)v78.i8);
      v80.i64[0] = v79.u32[0];
      v80.i64[1] = v79.u32[1];
      v81 = v80;
      v80.i64[0] = v79.u32[2];
      v80.i64[1] = v79.u32[3];
      v82 = v80;
      v83 = vmovl_high_u16(v78);
      v80.i64[0] = v83.u32[0];
      v80.i64[1] = v83.u32[1];
      v84 = v80;
      v80.i64[0] = v83.u32[2];
      v80.i64[1] = v83.u32[3];
      v76 = vorrq_s8(v76, v80);
      v75 = vorrq_s8(v75, v84);
      v71 = vorrq_s8(v71, v82);
      v72 = vorrq_s8(v72, v81);
      v74 += 8;
    }
    while (v74);
    v85 = vorrq_s8(vorrq_s8(v72, v75), vorrq_s8(v71, v76));
    v10 = vorr_s8(*(int8x8_t *)v85.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8))
      return (*(_QWORD *)&v10 & 0x8080808080808080) == 0;
    goto LABEL_76;
  }
  return (*(_QWORD *)&v10 & 0x8080808080808080) == 0;
}

uint64_t BinaryPropertyListSerializer::BinaryPropertyListSerializer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1E9D692D0;
  *(_QWORD *)(a1 + 8) = &off_1E9D69260;
  v4 = -1;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 8);
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 56);
  do
  {
    v4 <<= 8;
    ++v5;
  }
  while ((v4 & v6) != 0);
  v7 = 0;
  v8 = 0;
  *(_DWORD *)(a1 + 88) = v5;
  v9 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 80) * v5 + 8;
  *(_QWORD *)(a1 + 96) = v9;
  v10 = -1;
  do
  {
    v10 <<= 8;
    v8 += v6;
    ++v7;
  }
  while ((v10 & v9) != 0);
  *(_DWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 112) = v9 + v8 + 32;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_QWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a1 + 136) = 0;
  if (v11)
  {
    *(_QWORD *)(a1 + 128) = v11 + 8;
    *(_QWORD *)(a1 + 144) = v11 + *(_QWORD *)(a1 + 96);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
    **(_QWORD **)(a1 + 120) = 0x30307473696C7062;
    v12 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
    *(_WORD *)(v12 - 28) = 0;
    *(_DWORD *)(v12 - 32) = 0;
    *(_BYTE *)(v12 - 26) = *(_DWORD *)(a1 + 104);
    *(_BYTE *)(v12 - 25) = *(_DWORD *)(a1 + 88);
    *(_QWORD *)(v12 - 24) = bswap64(*(_QWORD *)(a1 + 56));
    *(_QWORD *)(v12 - 16) = bswap64(*(_QWORD *)(a1 + 56) - 1);
    *(_QWORD *)(v12 - 8) = bswap64(*(_QWORD *)(a1 + 96));
  }
  return a1;
}

uint64_t BinaryPropertyListSerializer::writeBooleanTrue(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;

  v1 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(this + 136) == v1)
  {
    *(_QWORD *)(this + 136) = v1 + 1;
    v2 = *(int *)(this + 104);
    v3 = v2 - 1;
    v4 = *(_QWORD *)(this + 120);
    v5 = (_BYTE *)(*(_QWORD *)(this + 128) - v4);
    v6 = v4 + *(_QWORD *)(this + 96) + v1 * v2 + v2;
    switch(v3)
    {
      case 0:
        goto LABEL_10;
      case 1:
        goto LABEL_9;
      case 2:
        goto LABEL_8;
      case 3:
        goto LABEL_7;
      case 4:
        goto LABEL_6;
      case 5:
        goto LABEL_5;
      case 6:
        goto LABEL_4;
      case 7:
        *(_BYTE *)(v6 - 8) = HIBYTE(v5);
LABEL_4:
        *(_BYTE *)(v6 - 7) = BYTE6(v5);
LABEL_5:
        *(_BYTE *)(v6 - 6) = BYTE5(v5);
LABEL_6:
        *(_BYTE *)(v6 - 5) = BYTE4(v5);
LABEL_7:
        *(_BYTE *)(v6 - 4) = BYTE3(v5);
LABEL_8:
        *(_BYTE *)(v6 - 3) = BYTE2(v5);
LABEL_9:
        *(_BYTE *)(v6 - 2) = BYTE1(v5);
LABEL_10:
        *(_BYTE *)(v6 - 1) = (_BYTE)v5;
        v5 = *(_BYTE **)(this + 128);
        break;
      default:
        break;
    }
    *(_QWORD *)(this + 128) = v5 + 1;
    *v5 = 9;
  }
  switch(*(_DWORD *)(this + 88))
  {
    case 1:
      goto LABEL_20;
    case 2:
      goto LABEL_19;
    case 3:
      goto LABEL_18;
    case 4:
      goto LABEL_17;
    case 5:
      goto LABEL_16;
    case 6:
      goto LABEL_15;
    case 7:
      goto LABEL_14;
    case 8:
      v7 = (_BYTE *)(*(_QWORD *)(this + 144) - 1);
      *(_QWORD *)(this + 144) = v7;
      *v7 = HIBYTE(v1);
LABEL_14:
      v8 = (_BYTE *)(*(_QWORD *)(this + 144) - 1);
      *(_QWORD *)(this + 144) = v8;
      *v8 = BYTE6(v1);
LABEL_15:
      v9 = (_BYTE *)(*(_QWORD *)(this + 144) - 1);
      *(_QWORD *)(this + 144) = v9;
      *v9 = BYTE5(v1);
LABEL_16:
      v10 = (_BYTE *)(*(_QWORD *)(this + 144) - 1);
      *(_QWORD *)(this + 144) = v10;
      *v10 = BYTE4(v1);
LABEL_17:
      v11 = (_BYTE *)(*(_QWORD *)(this + 144) - 1);
      *(_QWORD *)(this + 144) = v11;
      *v11 = BYTE3(v1);
LABEL_18:
      v12 = (_BYTE *)(*(_QWORD *)(this + 144) - 1);
      *(_QWORD *)(this + 144) = v12;
      *v12 = BYTE2(v1);
LABEL_19:
      v13 = (_BYTE *)(*(_QWORD *)(this + 144) - 1);
      *(_QWORD *)(this + 144) = v13;
      *v13 = BYTE1(v1);
LABEL_20:
      v14 = (_BYTE *)(*(_QWORD *)(this + 144) - 1);
      *(_QWORD *)(this + 144) = v14;
      *v14 = v1;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t BinaryPropertyListSerializer::writeInteger(BinaryPropertyListSerializer *this, int a2)
{
  uint64_t result;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;

  result = BinaryPropertyListSerializer::writeIntegerWithoutAddingAggregateObjectReference(this, a2);
  switch(*((_DWORD *)this + 22))
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      goto LABEL_6;
    case 5:
      goto LABEL_5;
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_3;
    case 8:
      v4 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v4;
      *v4 = HIBYTE(result);
LABEL_3:
      v5 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v5;
      *v5 = BYTE6(result);
LABEL_4:
      v6 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v6;
      *v6 = BYTE5(result);
LABEL_5:
      v7 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v7;
      *v7 = BYTE4(result);
LABEL_6:
      v8 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v8;
      *v8 = BYTE3(result);
LABEL_7:
      v9 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v9;
      *v9 = BYTE2(result);
LABEL_8:
      v10 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v10;
      *v10 = BYTE1(result);
LABEL_9:
      v11 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v11;
      *v11 = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BinaryPropertyListSerializer::writeIntegerWithoutAddingAggregateObjectReference(BinaryPropertyListSerializer *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
  {
    v9 = *((_QWORD *)this + 3);
    if (*((_QWORD *)this + 17) == v9)
      goto LABEL_10;
    return v9;
  }
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_20;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = v3 & (v5 ^ HIWORD(v5));
  v7 = *(_DWORD *)(v2 + 16 * v6);
  if (v7 == a2)
  {
LABEL_7:
    v9 = *(_QWORD *)(v2 + 16 * v6 + 8);
    if (*((_QWORD *)this + 17) == v9)
      goto LABEL_10;
    return v9;
  }
  v8 = 1;
  while (v7)
  {
    v6 = ((_DWORD)v6 + v8) & v3;
    v7 = *(_DWORD *)(v2 + 16 * v6);
    ++v8;
    if (v7 == a2)
      goto LABEL_7;
  }
LABEL_20:
  v9 = 0;
  if (*((_QWORD *)this + 17))
    return v9;
LABEL_10:
  *((_QWORD *)this + 17) = v9 + 1;
  v10 = *((int *)this + 26);
  v11 = v10 - 1;
  v12 = *((_QWORD *)this + 15);
  v13 = *((_QWORD *)this + 16) - v12;
  v14 = v12 + *((_QWORD *)this + 12) + v9 * v10 + v10;
  switch(v11)
  {
    case 0:
      goto LABEL_18;
    case 1:
      goto LABEL_17;
    case 2:
      goto LABEL_16;
    case 3:
      goto LABEL_15;
    case 4:
      goto LABEL_14;
    case 5:
      goto LABEL_13;
    case 6:
      goto LABEL_12;
    case 7:
      *(_BYTE *)(v14 - 8) = HIBYTE(v13);
LABEL_12:
      *(_BYTE *)(v14 - 7) = BYTE6(v13);
LABEL_13:
      *(_BYTE *)(v14 - 6) = BYTE5(v13);
LABEL_14:
      *(_BYTE *)(v14 - 5) = BYTE4(v13);
LABEL_15:
      *(_BYTE *)(v14 - 4) = BYTE3(v13);
LABEL_16:
      *(_BYTE *)(v14 - 3) = BYTE2(v13);
LABEL_17:
      *(_BYTE *)(v14 - 2) = BYTE1(v13);
LABEL_18:
      *(_BYTE *)(v14 - 1) = v13;
      break;
    default:
      break;
  }
  BinaryPropertyListSerializer::appendInteger((uint64_t)this, a2);
  return v9;
}

uint64_t BinaryPropertyListSerializer::writeString(uint64_t this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int i;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;

  v4 = this;
  v5 = *(_QWORD *)(this + 40);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      this = WTF::StringImpl::hashSlowCase(*a2);
    else
      this = v7 >> 8;
    for (i = 0; ; this = (i + v10))
    {
      v10 = this & v6;
      v8 = *(_QWORD *)(v5 + 16 * v10);
      if (v8 != -1)
      {
        if (!v8)
          goto LABEL_12;
        this = WTF::equal(*(WTF **)(v5 + 16 * (this & v6)), *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v8 = *(_QWORD *)(v5 + 16 * v10 + 8);
  }
  else
  {
    v8 = 0;
  }
LABEL_12:
  if (*(_QWORD *)(v4 + 136) == v8)
    this = BinaryPropertyListSerializer::appendStringObject((BinaryPropertyListSerializer *)v4, (unsigned int **)a2);
  switch(*(_DWORD *)(v4 + 88))
  {
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      v11 = (_BYTE *)(*(_QWORD *)(v4 + 144) - 1);
      *(_QWORD *)(v4 + 144) = v11;
      *v11 = HIBYTE(v8);
LABEL_16:
      v12 = (_BYTE *)(*(_QWORD *)(v4 + 144) - 1);
      *(_QWORD *)(v4 + 144) = v12;
      *v12 = BYTE6(v8);
LABEL_17:
      v13 = (_BYTE *)(*(_QWORD *)(v4 + 144) - 1);
      *(_QWORD *)(v4 + 144) = v13;
      *v13 = BYTE5(v8);
LABEL_18:
      v14 = (_BYTE *)(*(_QWORD *)(v4 + 144) - 1);
      *(_QWORD *)(v4 + 144) = v14;
      *v14 = BYTE4(v8);
LABEL_19:
      v15 = (_BYTE *)(*(_QWORD *)(v4 + 144) - 1);
      *(_QWORD *)(v4 + 144) = v15;
      *v15 = BYTE3(v8);
LABEL_20:
      v16 = (_BYTE *)(*(_QWORD *)(v4 + 144) - 1);
      *(_QWORD *)(v4 + 144) = v16;
      *v16 = BYTE2(v8);
LABEL_21:
      v17 = (_BYTE *)(*(_QWORD *)(v4 + 144) - 1);
      *(_QWORD *)(v4 + 144) = v17;
      *v17 = BYTE1(v8);
LABEL_22:
      v18 = (_BYTE *)(*(_QWORD *)(v4 + 144) - 1);
      *(_QWORD *)(v4 + 144) = v18;
      *v18 = v8;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t BinaryPropertyListSerializer::appendStringObject(BinaryPropertyListSerializer *this, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t result;
  _BYTE *v12;
  char *v13;
  char v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t i;
  unsigned int *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unsigned int *v23;
  _BYTE *v24;
  unsigned int *v25;
  char v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;

  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v4 + 1;
  v5 = *((int *)this + 26);
  v6 = *((_QWORD *)this + 15);
  v7 = *((_QWORD *)this + 16) - v6;
  v8 = v6 + *((_QWORD *)this + 12) + v4 * v5 + v5;
  switch((int)v5)
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      goto LABEL_6;
    case 5:
      goto LABEL_5;
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_3;
    case 8:
      *(_BYTE *)(v8 - 8) = HIBYTE(v7);
LABEL_3:
      *(_BYTE *)(v8 - 7) = BYTE6(v7);
LABEL_4:
      *(_BYTE *)(v8 - 6) = BYTE5(v7);
LABEL_5:
      *(_BYTE *)(v8 - 5) = BYTE4(v7);
LABEL_6:
      *(_BYTE *)(v8 - 4) = BYTE3(v7);
LABEL_7:
      *(_BYTE *)(v8 - 3) = BYTE2(v7);
LABEL_8:
      *(_BYTE *)(v8 - 2) = BYTE1(v7);
LABEL_9:
      *(_BYTE *)(v8 - 1) = v7;
      break;
    default:
      break;
  }
  v9 = *a2;
  if (!*a2)
  {
    result = WTF::String::containsOnlyASCII(0);
    v13 = (char *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v13 + 1;
    if ((_DWORD)result)
      v14 = 80;
    else
      v14 = 96;
    *v13 = v14;
    return result;
  }
  v10 = v9[1];
  result = WTF::String::containsOnlyASCII((WTF::String *)v9);
  if ((result & 1) == 0)
  {
    if (v10 >= 0xF)
    {
      v21 = (_BYTE *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v21 + 1;
      *v21 = 111;
      result = BinaryPropertyListSerializer::appendInteger((uint64_t)this, v10);
    }
    else
    {
      v15 = (_BYTE *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v15 + 1;
      *v15 = v10 | 0x60;
      if (!(_DWORD)v10)
        return result;
    }
    v22 = 0;
    while (1)
    {
      v25 = *a2;
      if (!*a2)
        goto LABEL_41;
      if (v22 >= v25[1])
        break;
      if ((v25[4] & 4) != 0)
      {
        v30 = (_BYTE *)*((_QWORD *)this + 16);
        *((_QWORD *)this + 16) = v30 + 1;
        *v30 = 0;
        v23 = *a2;
        if (*a2)
        {
LABEL_42:
          if (v22 >= v23[1])
          {
            LOBYTE(v23) = 0;
          }
          else
          {
            v29 = *((_QWORD *)v23 + 1);
            if ((v23[4] & 4) != 0)
              LOBYTE(v23) = *(_BYTE *)(v29 + v22);
            else
              LOWORD(v23) = *(_WORD *)(v29 + 2 * v22);
          }
        }
      }
      else
      {
        v26 = *(_BYTE *)(*((_QWORD *)v25 + 1) + 2 * v22 + 1);
        v27 = (_BYTE *)*((_QWORD *)this + 16);
        *((_QWORD *)this + 16) = v27 + 1;
        *v27 = v26;
        v23 = *a2;
        if (*a2)
          goto LABEL_42;
      }
LABEL_34:
      v24 = (_BYTE *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v24 + 1;
      *v24 = (_BYTE)v23;
      if (v10 == ++v22)
        return result;
    }
    LOBYTE(v25) = 0;
LABEL_41:
    v28 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v28 + 1;
    *v28 = (_BYTE)v25;
    v23 = *a2;
    if (*a2)
      goto LABEL_42;
    goto LABEL_34;
  }
  if (v10 >= 0xF)
  {
    v16 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v16 + 1;
    *v16 = 95;
    result = BinaryPropertyListSerializer::appendInteger((uint64_t)this, v10);
  }
  else
  {
    v12 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v12 + 1;
    *v12 = v10 | 0x50;
    if (!(_DWORD)v10)
      return result;
  }
  for (i = 0; i != v10; ++i)
  {
    v18 = *a2;
    if (*a2)
    {
      if (i >= v18[1])
      {
        LOBYTE(v18) = 0;
      }
      else
      {
        v20 = *((_QWORD *)v18 + 1);
        if ((v18[4] & 4) != 0)
          LOBYTE(v18) = *(_BYTE *)(v20 + i);
        else
          LOWORD(v18) = *(_WORD *)(v20 + 2 * i);
      }
    }
    v19 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v19 + 1;
    *v19 = (_BYTE)v18;
  }
  return result;
}

uint64_t BinaryPropertyListSerializer::writeIntegerArray(uint64_t this, int *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  const int *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  _BYTE *v65;

  v5 = this;
  v6 = *(_QWORD *)(this + 48);
  if (!v6)
    goto LABEL_28;
  v7 = -1640531527;
  if (a3)
  {
    v8 = 4 * a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 = ((v10 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v10) << 16) ^ (v7 + (unsigned __int16)v10))
         + (((v10 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v10) << 16) ^ (v7 + (unsigned __int16)v10)) >> 11);
      v8 -= 4;
    }
    while (v8);
  }
  v11 = *(_DWORD *)(v6 - 8);
  v12 = (v7 ^ (8 * v7)) + ((v7 ^ (8 * v7)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = v13 ^ (v13 << 10);
  if (!v14)
    v14 = 0x800000;
  if (a3 == -1)
  {
    v17 = v14 & v11;
    v24 = (_QWORD *)(v6 + 24 * v17);
    v25 = v24[1];
    if (v25 == -1)
      goto LABEL_33;
    v26 = 1;
    while (v25 || *v24)
    {
      v17 = (v17 + v26) & v11;
      v24 = (_QWORD *)(v6 + 24 * v17);
      v25 = v24[1];
      ++v26;
      if (v25 == -1)
        goto LABEL_33;
    }
LABEL_28:
    v27 = 0;
    if (a3)
      goto LABEL_34;
    goto LABEL_36;
  }
  if (!a3)
  {
    v17 = v14 & v11;
    if (*(_QWORD *)(v6 + 24 * v17 + 8))
    {
      v28 = 1;
      do
        v17 = (v17 + v28++) & v11;
      while (*(_QWORD *)(v6 + 24 * v17 + 8));
    }
    goto LABEL_33;
  }
  for (i = 0; ; v14 = i + v17)
  {
    v17 = v14 & v11;
    v18 = v6 + 24 * v17;
    v19 = *(_QWORD *)(v18 + 8);
    if (v19 == -1)
      goto LABEL_14;
    v20 = *(_DWORD **)v18;
    if (v19 == a3)
      break;
    if (v19)
      v16 = 0;
    else
      v16 = v20 == 0;
    if (v16)
      goto LABEL_28;
LABEL_14:
    ++i;
  }
  if (*v20 != *a2)
    goto LABEL_14;
  v21 = 0;
  v22 = v20 + 1;
  while (a3 - 1 != v21)
  {
    this = v22[v21];
    v23 = a2[++v21];
    if ((_DWORD)this != v23)
    {
      if (v21 < a3)
        goto LABEL_14;
      break;
    }
  }
LABEL_33:
  v27 = *(_QWORD *)(v6 + 24 * v17 + 16);
  if (a3)
  {
LABEL_34:
    v29 = a2;
    v30 = a3;
    do
    {
      v31 = *v29++;
      this = BinaryPropertyListSerializer::writeIntegerWithoutAddingAggregateObjectReference((BinaryPropertyListSerializer *)v5, v31);
      --v30;
    }
    while (v30);
  }
LABEL_36:
  if (*(_QWORD *)(v5 + 136) == v27)
  {
    *(_QWORD *)(v5 + 136) = v27 + 1;
    v32 = *(int *)(v5 + 104);
    v33 = v32 - 1;
    v34 = *(_QWORD *)(v5 + 120);
    v35 = *(_QWORD *)(v5 + 128) - v34;
    v36 = v34 + *(_QWORD *)(v5 + 96) + v27 * v32 + v32;
    switch(v33)
    {
      case 0:
        goto LABEL_45;
      case 1:
        goto LABEL_44;
      case 2:
        goto LABEL_43;
      case 3:
        goto LABEL_42;
      case 4:
        goto LABEL_41;
      case 5:
        goto LABEL_40;
      case 6:
        goto LABEL_39;
      case 7:
        *(_BYTE *)(v36 - 8) = HIBYTE(v35);
LABEL_39:
        *(_BYTE *)(v36 - 7) = BYTE6(v35);
LABEL_40:
        *(_BYTE *)(v36 - 6) = BYTE5(v35);
LABEL_41:
        *(_BYTE *)(v36 - 5) = BYTE4(v35);
LABEL_42:
        *(_BYTE *)(v36 - 4) = BYTE3(v35);
LABEL_43:
        *(_BYTE *)(v36 - 3) = BYTE2(v35);
LABEL_44:
        *(_BYTE *)(v36 - 2) = BYTE1(v35);
LABEL_45:
        *(_BYTE *)(v36 - 1) = v35;
        break;
      default:
        break;
    }
    if (a3 >= 0xF)
    {
      v46 = *(_BYTE **)(v5 + 128);
      *(_QWORD *)(v5 + 128) = v46 + 1;
      *v46 = -81;
      this = BinaryPropertyListSerializer::appendInteger(v5, a3);
    }
    else
    {
      v37 = *(_BYTE **)(v5 + 128);
      *(_QWORD *)(v5 + 128) = v37 + 1;
      *v37 = a3 | 0xA0;
      if (!a3)
        goto LABEL_48;
    }
    v47 = 0;
    while (2)
    {
      v55 = a2[v47];
      v56 = (uint64_t *)(v5 + 24);
      if (!v55)
        goto LABEL_74;
      v57 = *(_QWORD *)(v5 + 32);
      if (v57)
      {
        v58 = *(_DWORD *)(v57 - 8);
        v59 = 9 * ((v55 + ~(v55 << 15)) ^ ((v55 + ~(v55 << 15)) >> 10));
        v60 = (v59 ^ (v59 >> 6)) + ~((v59 ^ (v59 >> 6)) << 11);
        v61 = v58 & (v60 ^ HIWORD(v60));
        v62 = *(_DWORD *)(v57 + 16 * v61);
        if (v62 != v55)
        {
          v63 = 1;
          while (v62)
          {
            v61 = ((_DWORD)v61 + v63) & v58;
            v62 = *(_DWORD *)(v57 + 16 * v61);
            ++v63;
            if (v62 == v55)
              goto LABEL_73;
          }
          v57 = 0;
          v64 = *(_DWORD *)(v5 + 88) - 1;
          if (v64 > 7)
          {
LABEL_66:
            if (a3 <= ++v47)
              goto LABEL_48;
            continue;
          }
LABEL_76:
          switch(v64)
          {
            case 0u:
              goto LABEL_65;
            case 1u:
              goto LABEL_64;
            case 2u:
              goto LABEL_63;
            case 3u:
              goto LABEL_62;
            case 4u:
              goto LABEL_61;
            case 5u:
              goto LABEL_60;
            case 6u:
              goto LABEL_59;
            case 7u:
              v65 = *(_BYTE **)(v5 + 128);
              *(_QWORD *)(v5 + 128) = v65 + 1;
              *v65 = HIBYTE(v57);
LABEL_59:
              v48 = *(_BYTE **)(v5 + 128);
              *(_QWORD *)(v5 + 128) = v48 + 1;
              *v48 = BYTE6(v57);
LABEL_60:
              v49 = *(_BYTE **)(v5 + 128);
              *(_QWORD *)(v5 + 128) = v49 + 1;
              *v49 = BYTE5(v57);
LABEL_61:
              v50 = *(_BYTE **)(v5 + 128);
              *(_QWORD *)(v5 + 128) = v50 + 1;
              *v50 = BYTE4(v57);
LABEL_62:
              v51 = *(_BYTE **)(v5 + 128);
              *(_QWORD *)(v5 + 128) = v51 + 1;
              *v51 = BYTE3(v57);
LABEL_63:
              v52 = *(_BYTE **)(v5 + 128);
              *(_QWORD *)(v5 + 128) = v52 + 1;
              *v52 = BYTE2(v57);
LABEL_64:
              v53 = *(_BYTE **)(v5 + 128);
              *(_QWORD *)(v5 + 128) = v53 + 1;
              *v53 = BYTE1(v57);
LABEL_65:
              v54 = *(_BYTE **)(v5 + 128);
              *(_QWORD *)(v5 + 128) = v54 + 1;
              *v54 = v57;
              break;
            default:
              goto LABEL_66;
          }
          goto LABEL_66;
        }
LABEL_73:
        v56 = (uint64_t *)(v57 + 16 * v61 + 8);
LABEL_74:
        v57 = *v56;
      }
      break;
    }
    v64 = *(_DWORD *)(v5 + 88) - 1;
    goto LABEL_76;
  }
LABEL_48:
  switch(*(_DWORD *)(v5 + 88))
  {
    case 1:
      goto LABEL_56;
    case 2:
      goto LABEL_55;
    case 3:
      goto LABEL_54;
    case 4:
      goto LABEL_53;
    case 5:
      goto LABEL_52;
    case 6:
      goto LABEL_51;
    case 7:
      goto LABEL_50;
    case 8:
      v38 = (_BYTE *)(*(_QWORD *)(v5 + 144) - 1);
      *(_QWORD *)(v5 + 144) = v38;
      *v38 = HIBYTE(v27);
LABEL_50:
      v39 = (_BYTE *)(*(_QWORD *)(v5 + 144) - 1);
      *(_QWORD *)(v5 + 144) = v39;
      *v39 = BYTE6(v27);
LABEL_51:
      v40 = (_BYTE *)(*(_QWORD *)(v5 + 144) - 1);
      *(_QWORD *)(v5 + 144) = v40;
      *v40 = BYTE5(v27);
LABEL_52:
      v41 = (_BYTE *)(*(_QWORD *)(v5 + 144) - 1);
      *(_QWORD *)(v5 + 144) = v41;
      *v41 = BYTE4(v27);
LABEL_53:
      v42 = (_BYTE *)(*(_QWORD *)(v5 + 144) - 1);
      *(_QWORD *)(v5 + 144) = v42;
      *v42 = BYTE3(v27);
LABEL_54:
      v43 = (_BYTE *)(*(_QWORD *)(v5 + 144) - 1);
      *(_QWORD *)(v5 + 144) = v43;
      *v43 = BYTE2(v27);
LABEL_55:
      v44 = (_BYTE *)(*(_QWORD *)(v5 + 144) - 1);
      *(_QWORD *)(v5 + 144) = v44;
      *v44 = BYTE1(v27);
LABEL_56:
      v45 = (_BYTE *)(*(_QWORD *)(v5 + 144) - 1);
      *(_QWORD *)(v5 + 144) = v45;
      *v45 = v27;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t BinaryPropertyListSerializer::writeUniqueString(BinaryPropertyListSerializer *this, const char *__s)
{
  const char *v2;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;
  _BYTE *v22;

  v2 = __s;
  v4 = *((_QWORD *)this + 17);
  switch(*((_DWORD *)this + 22))
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      goto LABEL_6;
    case 5:
      goto LABEL_5;
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_3;
    case 8:
      v5 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v5;
      *v5 = HIBYTE(v4);
LABEL_3:
      v6 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v6;
      *v6 = BYTE6(v4);
LABEL_4:
      v7 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v7;
      *v7 = BYTE5(v4);
LABEL_5:
      v8 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v8;
      *v8 = BYTE4(v4);
LABEL_6:
      v9 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v9;
      *v9 = BYTE3(v4);
LABEL_7:
      v10 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v10;
      *v10 = BYTE2(v4);
LABEL_8:
      v11 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v11;
      *v11 = BYTE1(v4);
LABEL_9:
      v12 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v12;
      *v12 = v4;
      v4 = *((_QWORD *)this + 17);
      break;
    default:
      break;
  }
  *((_QWORD *)this + 17) = v4 + 1;
  v13 = *((int *)this + 26);
  v14 = *((_QWORD *)this + 15);
  v15 = *((_QWORD *)this + 16) - v14;
  v16 = v14 + *((_QWORD *)this + 12) + v4 * v13 + v13;
  switch((int)v13)
  {
    case 1:
      goto LABEL_18;
    case 2:
      goto LABEL_17;
    case 3:
      goto LABEL_16;
    case 4:
      goto LABEL_15;
    case 5:
      goto LABEL_14;
    case 6:
      goto LABEL_13;
    case 7:
      goto LABEL_12;
    case 8:
      *(_BYTE *)(v16 - 8) = HIBYTE(v15);
LABEL_12:
      *(_BYTE *)(v16 - 7) = BYTE6(v15);
LABEL_13:
      *(_BYTE *)(v16 - 6) = BYTE5(v15);
LABEL_14:
      *(_BYTE *)(v16 - 5) = BYTE4(v15);
LABEL_15:
      *(_BYTE *)(v16 - 4) = BYTE3(v15);
LABEL_16:
      *(_BYTE *)(v16 - 3) = BYTE2(v15);
LABEL_17:
      *(_BYTE *)(v16 - 2) = BYTE1(v15);
LABEL_18:
      *(_BYTE *)(v16 - 1) = v15;
      break;
    default:
      break;
  }
  result = strlen(__s);
  v18 = result;
  if (result >= 0xFuLL)
  {
    v20 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v20 + 1;
    *v20 = 95;
    result = BinaryPropertyListSerializer::appendInteger((uint64_t)this, result);
  }
  else
  {
    v19 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v19 + 1;
    *v19 = result | 0x50;
    if (!(_DWORD)result)
      return result;
  }
  do
  {
    v21 = *v2++;
    v22 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v22 + 1;
    *v22 = v21;
    --v18;
  }
  while (v18);
  return result;
}

uint64_t BinaryPropertyListSerializer::writeUniqueString(BinaryPropertyListSerializer *this, unsigned int **a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;

  v2 = *((_QWORD *)this + 17);
  switch(*((_DWORD *)this + 22))
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      goto LABEL_6;
    case 5:
      goto LABEL_5;
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_3;
    case 8:
      v3 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v3;
      *v3 = HIBYTE(v2);
LABEL_3:
      v4 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v4;
      *v4 = BYTE6(v2);
LABEL_4:
      v5 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v5;
      *v5 = BYTE5(v2);
LABEL_5:
      v6 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v6;
      *v6 = BYTE4(v2);
LABEL_6:
      v7 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v7;
      *v7 = BYTE3(v2);
LABEL_7:
      v8 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v8;
      *v8 = BYTE2(v2);
LABEL_8:
      v9 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v9;
      *v9 = BYTE1(v2);
LABEL_9:
      v10 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
      *((_QWORD *)this + 18) = v10;
      *v10 = v2;
      break;
    default:
      return BinaryPropertyListSerializer::appendStringObject(this, a2);
  }
  return BinaryPropertyListSerializer::appendStringObject(this, a2);
}

uint64_t BinaryPropertyListSerializer::writeArrayStart(BinaryPropertyListSerializer *this)
{
  return *((_QWORD *)this + 18) - *((_QWORD *)this + 15);
}

void *BinaryPropertyListSerializer::writeArrayEnd(BinaryPropertyListSerializer *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  void *result;
  char *v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;

  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v4 + 1;
  v5 = *((_QWORD *)this + 15);
  v6 = *((int *)this + 26);
  v7 = v6 - 1;
  v8 = *((_QWORD *)this + 16) - v5;
  v9 = v5 + *((_QWORD *)this + 12) + v4 * v6 + v6;
  switch(v7)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      goto LABEL_5;
    case 5:
      goto LABEL_4;
    case 6:
      goto LABEL_3;
    case 7:
      *(_BYTE *)(v9 - 8) = HIBYTE(v8);
LABEL_3:
      *(_BYTE *)(v9 - 7) = BYTE6(v8);
LABEL_4:
      *(_BYTE *)(v9 - 6) = BYTE5(v8);
LABEL_5:
      *(_BYTE *)(v9 - 5) = BYTE4(v8);
LABEL_6:
      *(_BYTE *)(v9 - 4) = BYTE3(v8);
LABEL_7:
      *(_BYTE *)(v9 - 3) = BYTE2(v8);
LABEL_8:
      *(_BYTE *)(v9 - 2) = BYTE1(v8);
LABEL_9:
      *(_BYTE *)(v9 - 1) = v8;
      v5 = *((_QWORD *)this + 15);
      break;
    default:
      break;
  }
  v10 = *((_QWORD *)this + 18);
  v11 = v5 - v10 + a2;
  v12 = v11 / (unint64_t)*((int *)this + 22);
  if (v12 > 0xE)
  {
    v14 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v14 + 1;
    *v14 = -81;
    BinaryPropertyListSerializer::appendInteger((uint64_t)this, v12);
  }
  else
  {
    v13 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v13 + 1;
    *v13 = v12 | 0xA0;
  }
  v15 = (char *)*((_QWORD *)this + 16);
  v16 = *((_QWORD *)this + 15) + a2;
  *((_QWORD *)this + 18) = v16;
  result = memmove(v15, (const void *)(v16 - v11), v5 - v10 + a2);
  if (v11 >= 2)
  {
    v18 = &v15[~v10 + v5 + a2];
    v19 = v5 - v10 + a2;
    do
    {
      v20 = *v15;
      *v15++ = *v18;
      *v18-- = v20;
      v19 -= 2;
    }
    while (v19 > 1);
  }
  v21 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 16) += v11;
  if (v21 < *((_QWORD *)this + 7))
  {
    switch(*((_DWORD *)this + 22))
    {
      case 1:
        goto LABEL_25;
      case 2:
        goto LABEL_24;
      case 3:
        goto LABEL_23;
      case 4:
        goto LABEL_22;
      case 5:
        goto LABEL_21;
      case 6:
        goto LABEL_20;
      case 7:
        goto LABEL_19;
      case 8:
        v22 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v22;
        *v22 = HIBYTE(v4);
LABEL_19:
        v23 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v23;
        *v23 = BYTE6(v4);
LABEL_20:
        v24 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v24;
        *v24 = BYTE5(v4);
LABEL_21:
        v25 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v25;
        *v25 = BYTE4(v4);
LABEL_22:
        v26 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v26;
        *v26 = BYTE3(v4);
LABEL_23:
        v27 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v27;
        *v27 = BYTE2(v4);
LABEL_24:
        v28 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v28;
        *v28 = BYTE1(v4);
LABEL_25:
        v29 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v29;
        *v29 = v4;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t BinaryPropertyListSerializer::appendInteger(uint64_t this, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;

  if (a2 > 0xFF)
  {
    if (a2 >> 16)
    {
      v5 = *(_BYTE **)(this + 128);
      *(_QWORD *)(this + 128) = v5 + 1;
      if (HIDWORD(a2))
      {
        *v5 = 19;
        v6 = *(_BYTE **)(this + 128);
        *(_QWORD *)(this + 128) = v6 + 1;
        *v6 = HIBYTE(a2);
        v7 = *(_BYTE **)(this + 128);
        *(_QWORD *)(this + 128) = v7 + 1;
        *v7 = BYTE6(a2);
        v8 = *(_BYTE **)(this + 128);
        *(_QWORD *)(this + 128) = v8 + 1;
        *v8 = BYTE5(a2);
        v9 = *(_BYTE **)(this + 128);
        *(_QWORD *)(this + 128) = v9 + 1;
        *v9 = BYTE4(a2);
      }
      else
      {
        *v5 = 18;
      }
      v10 = *(_BYTE **)(this + 128);
      *(_QWORD *)(this + 128) = v10 + 1;
      *v10 = BYTE3(a2);
      v11 = *(_BYTE **)(this + 128);
      *(_QWORD *)(this + 128) = v11 + 1;
      *v11 = BYTE2(a2);
    }
    else
    {
      v4 = *(_BYTE **)(this + 128);
      *(_QWORD *)(this + 128) = v4 + 1;
      *v4 = 17;
    }
    v12 = *(_BYTE **)(this + 128);
    *(_QWORD *)(this + 128) = v12 + 1;
    *v12 = BYTE1(a2);
    v13 = *(_BYTE **)(this + 128);
    *(_QWORD *)(this + 128) = v13 + 1;
    *v13 = a2;
  }
  else
  {
    v2 = *(_BYTE **)(this + 128);
    *(_QWORD *)(this + 128) = v2 + 1;
    *v2 = 16;
    v3 = *(_BYTE **)(this + 128);
    *(_QWORD *)(this + 128) = v3 + 1;
    *v3 = a2;
  }
  return this;
}

uint64_t BinaryPropertyListSerializer::writeDictionaryStart(BinaryPropertyListSerializer *this)
{
  return *((_QWORD *)this + 18) - *((_QWORD *)this + 15);
}

void *BinaryPropertyListSerializer::writeDictionaryEnd(BinaryPropertyListSerializer *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  void *result;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;

  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v4 + 1;
  v5 = *((_QWORD *)this + 15);
  v6 = *((int *)this + 26);
  v7 = v6 - 1;
  v8 = *((_QWORD *)this + 16) - v5;
  v9 = v5 + *((_QWORD *)this + 12) + v4 * v6 + v6;
  switch(v7)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      goto LABEL_5;
    case 5:
      goto LABEL_4;
    case 6:
      goto LABEL_3;
    case 7:
      *(_BYTE *)(v9 - 8) = HIBYTE(v8);
LABEL_3:
      *(_BYTE *)(v9 - 7) = BYTE6(v8);
LABEL_4:
      *(_BYTE *)(v9 - 6) = BYTE5(v8);
LABEL_5:
      *(_BYTE *)(v9 - 5) = BYTE4(v8);
LABEL_6:
      *(_BYTE *)(v9 - 4) = BYTE3(v8);
LABEL_7:
      *(_BYTE *)(v9 - 3) = BYTE2(v8);
LABEL_8:
      *(_BYTE *)(v9 - 2) = BYTE1(v8);
LABEL_9:
      *(_BYTE *)(v9 - 1) = v8;
      v5 = *((_QWORD *)this + 15);
      break;
    default:
      break;
  }
  v10 = *((_QWORD *)this + 18);
  v11 = v5 - v10 + a2;
  v12 = v11 / (unint64_t)(2 * *((int *)this + 22));
  if (v12 > 0xE)
  {
    v14 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v14 + 1;
    *v14 = -33;
    BinaryPropertyListSerializer::appendInteger((uint64_t)this, v12);
  }
  else
  {
    v13 = (_BYTE *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v13 + 1;
    *v13 = v12 | 0xD0;
  }
  v15 = (char *)*((_QWORD *)this + 16);
  v16 = *((_QWORD *)this + 15) + a2;
  *((_QWORD *)this + 18) = v16;
  result = memmove(v15, (const void *)(v16 - v11), v5 - v10 + a2);
  if (v11 >= 2)
  {
    v18 = &v15[~v10 + v5 + a2];
    v19 = v5 - v10 + a2;
    do
    {
      v20 = *v15;
      *v15++ = *v18;
      *v18-- = v20;
      v19 -= 2;
    }
    while (v19 > 1);
  }
  v21 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 16) += v11;
  if (v21 != *((_QWORD *)this + 7))
  {
    switch(*((_DWORD *)this + 22))
    {
      case 1:
        goto LABEL_25;
      case 2:
        goto LABEL_24;
      case 3:
        goto LABEL_23;
      case 4:
        goto LABEL_22;
      case 5:
        goto LABEL_21;
      case 6:
        goto LABEL_20;
      case 7:
        goto LABEL_19;
      case 8:
        v22 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v22;
        *v22 = HIBYTE(v4);
LABEL_19:
        v23 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v23;
        *v23 = BYTE6(v4);
LABEL_20:
        v24 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v24;
        *v24 = BYTE5(v4);
LABEL_21:
        v25 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v25;
        *v25 = BYTE4(v4);
LABEL_22:
        v26 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v26;
        *v26 = BYTE3(v4);
LABEL_23:
        v27 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v27;
        *v27 = BYTE2(v4);
LABEL_24:
        v28 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v28;
        *v28 = BYTE1(v4);
LABEL_25:
        v29 = (_BYTE *)(*((_QWORD *)this + 18) - 1);
        *((_QWORD *)this + 18) = v29;
        *v29 = v4;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t BinaryPropertyListWriter::writePropertyList(BinaryPropertyListWriter *this)
{
  uint64_t result;
  StringImpl *v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  _QWORD v7[4];
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;

  result = BinaryPropertyListSerializer::BinaryPropertyListSerializer((uint64_t)v7, (uint64_t)this);
  v7[0] = &off_1E9D692D0;
  v7[1] = &off_1E9D69260;
  if (v10)
    result = WTF::fastFree((WTF *)(v10 - 16), v2);
  v3 = v9;
  if (v9)
  {
    v4 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v4)
    {
      v5 = v9;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, v2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    result = WTF::fastFree((WTF *)(v3 - 2), v2);
  }
  if (v8)
    return WTF::fastFree((WTF *)(v8 - 16), v2);
  return result;
}

void BinaryPropertyListSerializer::~BinaryPropertyListSerializer(BinaryPropertyListSerializer *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E9D692D0;
  *((_QWORD *)this + 1) = &off_1E9D69260;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)*((_QWORD *)this + 5);
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E9D692D0;
  *((_QWORD *)this + 1) = &off_1E9D69260;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)*((_QWORD *)this + 5);
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
  JUMPOUT(0x1D82A8D20);
}

void BinaryPropertyListPlan::~BinaryPropertyListPlan(BinaryPropertyListPlan *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E9D69260;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)*((_QWORD *)this + 4);
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E9D69260;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)*((_QWORD *)this + 4);
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
  JUMPOUT(0x1D82A8D20);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,unsigned long>>,WTF::DefaultHash<int>,WTF::HashMap<int,unsigned long,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_DWORD *)(v4 + 16 * i);
      if ((*v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = 0;
        v14 = 9 * ((*v10 + ~(*v10 << 15)) ^ ((*v10 + ~(*v10 << 15)) >> 10));
        v15 = ((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16);
        do
        {
          v16 = v15 & v12;
          v15 = ++v13 + v16;
        }
        while (*(_DWORD *)(v11 + 16 * v16));
        *(_OWORD *)(v11 + 16 * v16) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
          {
            v13 = *(_DWORD *)(v12 - 8);
            v14 = *((_DWORD *)v11 + 4);
            if (v14 >= 0x100)
              goto LABEL_12;
LABEL_14:
            v15 = WTF::StringImpl::hashSlowCase(v11);
          }
          else
          {
            v13 = 0;
            v14 = *((_DWORD *)v11 + 4);
            if (v14 < 0x100)
              goto LABEL_14;
LABEL_12:
            v15 = v14 >> 8;
          }
          v16 = 0;
          do
          {
            v17 = v15 & v13;
            v15 = ++v16 + v17;
          }
          while (*(_QWORD *)(v12 + 16 * v17));
          v18 = (WTF::StringImpl **)(v12 + 16 * v17);
          v19 = *(WTF::StringImpl **)(v4 + 16 * v9 + 8);
          *v18 = 0;
          v20 = *v10;
          *v10 = 0;
          *v18 = v20;
          v18[1] = v19;
          v21 = *v10;
          *v10 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v8);
            else
              *(_DWORD *)v21 -= 2;
          }
          goto LABEL_7;
        }
        *v10 = 0;
      }
LABEL_7:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::HashTable<IntegerArray,WTF::KeyValuePair<IntegerArray,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IntegerArray,unsigned long>>,IntegerArrayHash,WTF::HashMap<IntegerArray,unsigned long,IntegerArrayHash,IntegerArrayHashTraits,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,IntegerArrayHashTraits>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  BOOL v31;
  __int128 v32;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = (unsigned int **)(v6 + 24 * v13);
      v16 = v15[1];
      if (v16 != (unsigned int *)-1)
      {
        v17 = *v15;
        if (v16 || v17 != 0)
          break;
      }
LABEL_8:
      if (++v13 == v7)
        goto LABEL_32;
    }
    v19 = *a1;
    if (*a1)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v21 = -1640531527;
      if (!v16)
        goto LABEL_20;
    }
    else
    {
      v20 = 0;
      v21 = -1640531527;
      if (!v16)
        goto LABEL_20;
    }
    v22 = 4 * (_QWORD)v16;
    do
    {
      v23 = *v17++;
      v21 = ((v23 >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)v23) << 16) ^ (v21 + (unsigned __int16)v23))
          + (((v23 >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)v23) << 16) ^ (v21 + (unsigned __int16)v23)) >> 11);
      v22 -= 4;
    }
    while (v22);
LABEL_20:
    v24 = 0;
    v25 = (v21 ^ (8 * v21)) + ((v21 ^ (8 * v21)) >> 5);
    v26 = (v25 ^ (4 * v25)) + ((v25 ^ (4 * v25)) >> 15);
    v27 = v26 ^ (v26 << 10);
    if (v27)
      v28 = v27;
    else
      v28 = 0x800000;
    do
    {
      v29 = v28 & v20;
      v30 = (_QWORD *)(v19 + 24 * v29);
      v10 = (void *)v30[1];
      v28 = ++v24 + v29;
      if (*v30)
        v31 = 0;
      else
        v31 = v10 == 0;
    }
    while (!v31);
    v32 = *(_OWORD *)v15;
    v30[2] = v15[2];
    *(_OWORD *)v30 = v32;
    if (v15 == a3)
      v14 = v30;
    goto LABEL_8;
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_32:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

void HistoryPropertyListWriter::HistoryPropertyListWriter(HistoryPropertyListWriter *this)
{
  _DWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E9D69340;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 1) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 2) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 3) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 4) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 5) = v3;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *((_QWORD *)this + 6) = v2;
  *((_QWORD *)this + 7) = 0;
}

void sub_1D7FBEEEC(_Unwind_Exception *exception_object, StringImpl *a2)
{
  _QWORD *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = (WTF::StringImpl *)v2[4];
  v2[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)v2[3];
  v2[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)v2[2];
  v2[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)v2[1];
  v2[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *HistoryPropertyListWriter::buffer(HistoryPropertyListWriter *this, CFIndex a2)
{
  void *result;

  result = CFAllocatorAllocate(0, a2, 0);
  *((_QWORD *)this + 7) = result;
  *((_QWORD *)this + 8) = a2;
  return result;
}

uint64_t HistoryPropertyListWriter::writeObjects(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  StringImpl *v5;
  WTF::StringImpl *v6;
  StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v11;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 16))(a2, &v11);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 16))(a2, &v11);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, 1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v4);
}

void sub_1D7FBF114(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t HistoryPropertyListWriter::writeHistoryItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::HistoryItem *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char __str[32];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a3)
    v6 = *(WebCore::HistoryItem **)(*(_QWORD *)(a3 + 8) + 8);
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v8 = WebCore::HistoryItem::title(v6);
  v9 = WebCore::HistoryItem::alternateTitle(v6);
  v10 = *(_QWORD *)(a3 + 8);
  v11 = *(double *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 48);
  if (*(_QWORD *)v8 && *(_DWORD *)(*(_QWORD *)v8 + 4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 40);
  if (*(_QWORD *)v9 && *(_DWORD *)(*(_QWORD *)v9 + 4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 8);
  if (v11 != 0.0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 24);
  if (*((_BYTE *)v6 + 144))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 16);
  if (v12)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 32);
  v13 = WebCore::HistoryItem::urlString(v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v13);
  if (*(_QWORD *)v8 && *(_DWORD *)(*(_QWORD *)v8 + 4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
  if (*(_QWORD *)v9 && *(_DWORD *)(*(_QWORD *)v9 + 4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v9);
  if (v11 != 0.0)
  {
    snprintf(__str, 0x20uLL, "%.1lf", v11);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 32))(a2, __str);
  }
  if (*((_BYTE *)v6 + 144))
    (**(void (***)(uint64_t))a2)(a2);
  if (!v12)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v15 = result;
  v16 = *(unsigned int *)(v12 + 12);
  if (!(_DWORD)v16)
  {
LABEL_31:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v15);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v7);
  }
  v17 = 0;
  v18 = 0;
  v19 = 8 * v16;
  while (v18 < *(unsigned int *)(v12 + 12))
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)v12 + v17);
    ++v18;
    v17 += 8;
    if (v19 == v17)
      goto LABEL_31;
  }
  __break(0xC471u);
  return result;
}

void InProcessIDBServer::~InProcessIDBServer(InProcessIDBServer *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::IDBClient::IDBConnectionProxy *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  int v23;

  v20 = 0;
  v21 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = off_1E9D69670;
  v2[1] = this;
  v2[2] = &v20;
  v22 = (uint64_t)v2;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v22);
  v3 = v22;
  v22 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v22 = 0x7FF0000000000000;
  v23 = 0;
  WTF::BinarySemaphore::waitUntil();
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  v6 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v6)
  {
LABEL_8:
    v7 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v7)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
    goto LABEL_8;
  }
  v8 = *((_QWORD *)v6 + 2);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), v4);
  WTF::fastFree(v6, v4);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v7)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  do
  {
LABEL_13:
    v9 = __ldaxr((unsigned int *)v7);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v7));
  if (v10)
    goto LABEL_15;
  atomic_store(1u, (unsigned int *)v7);
  v16 = *(WebCore::IDBClient::IDBConnectionProxy **)(v7 + 24);
  *(_QWORD *)(v7 + 24) = 0;
  if (v16)
  {
    WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v16, v4);
    MEMORY[0x1D82A7124]();
  }
  v17 = *(unsigned int **)(v7 + 8);
  *(_QWORD *)(v7 + 8) = 0;
  if (!v17)
    goto LABEL_28;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (v19)
  {
LABEL_28:
    MEMORY[0x1D82A7250](v7);
    v11 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v11)
      goto LABEL_17;
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_17;
  }
  atomic_store(1u, v17);
  WTF::fastFree((WTF *)v17, v4);
  MEMORY[0x1D82A7250](v7);
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
    goto LABEL_16;
LABEL_17:
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  InProcessIDBServer::~InProcessIDBServer(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'InProcessIDBServer::~InProcessIDBServer(InProcessIDBServer *this)
{
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

void InProcessIDBServer::InProcessIDBServer(InProcessIDBServer *this, SessionID a2, const WTF::String *a3)
{
  unsigned int *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  WebCore::IDBClient::IDBConnectionProxy *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD *v18;

  *((_DWORD *)this + 6) = 1;
  v4 = (unsigned int *)((char *)this + 24);
  *(_QWORD *)this = off_1E9D69378;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_1E9D69528;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  WTF::WorkQueue::create();
  WebCore::IDBClient::IDBConnectionToServer::create();
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v16;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v12 = *(WebCore::IDBClient::IDBConnectionProxy **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      if (v12)
      {
        WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v12, v5);
        MEMORY[0x1D82A7124]();
      }
      v13 = *(unsigned int **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (!v13)
        goto LABEL_13;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v5);
        MEMORY[0x1D82A7250](v6);
      }
      else
      {
LABEL_13:
        MEMORY[0x1D82A7250](v6);
      }
    }
  }
  do
    v9 = __ldaxr(v4);
  while (__stlxr(v9 + 1, v4));
  WTF::String::isolatedCopy();
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &off_1E9D696F0;
  v10[1] = this;
  v10[2] = this;
  v10[3] = v17;
  v18 = v10;
  (*(void (**)(_QWORD, _QWORD **))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v18);
  v11 = v18;
  v18 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
}

unsigned int *InProcessIDBServer::deleteDatabase(InProcessIDBServer *this, const WebCore::IDBOpenRequestData *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  char v10;
  StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  char v21;
  InProcessIDBServer *v22;
  InProcessIDBServer *v23;
  __int128 v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _BYTE v27[24];
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v22 = this;
  v3 = (unsigned int *)((char *)this + 24);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v23 = this;
  WebCore::IDBOpenRequestData::isolatedCopy(a2);
  v5 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v5 = &off_1E9D69740;
  *(_QWORD *)(v5 + 8) = v22;
  *(_QWORD *)(v5 + 16) = v23;
  v6 = v24;
  *(_QWORD *)(v5 + 40) = v25;
  *(_OWORD *)(v5 + 24) = v6;
  v7 = v26;
  v23 = 0;
  v26 = 0;
  *(_QWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 56) = 0;
  *(_DWORD *)(v5 + 80) = -1;
  v8 = v28;
  if (v28 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69758[v28])(&v20, v5 + 56, v27);
    *(_DWORD *)(v5 + 80) = v8;
  }
  *(_BYTE *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 112) = -1;
  v9 = v30;
  if (v30 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69758[v30])(&v20);
    *(_DWORD *)(v5 + 112) = v9;
  }
  *(_BYTE *)(v5 + 120) = v31;
  v10 = v33;
  *(_QWORD *)(v5 + 128) = v32;
  *(_BYTE *)(v5 + 136) = v10;
  v20 = v5;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v20);
  v12 = v20;
  v20 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v30 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D695F8[v30])(&v21, &v29);
  v30 = -1;
  if (v28 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D695F8[v28])(&v21, v27);
  v28 = -1;
  v13 = v26;
  v26 = 0;
  if (!v13)
  {
LABEL_16:
    result = (unsigned int *)v23;
    v23 = 0;
    if (!result)
      return result;
    goto LABEL_19;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v13, v11);
  result = (unsigned int *)v23;
  v23 = 0;
  if (!result)
    return result;
LABEL_19:
  v15 = result + 6;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, result + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)result);
    return (unsigned int *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t InProcessIDBServer::didDeleteDatabase(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69778;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didDeleteDatabase(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didDeleteDatabase((InProcessIDBServer *)((char *)this - 16), a2);
}

unsigned int *InProcessIDBServer::openDatabase(InProcessIDBServer *this, const WebCore::IDBOpenRequestData *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  char v10;
  StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  char v21;
  InProcessIDBServer *v22;
  InProcessIDBServer *v23;
  __int128 v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _BYTE v27[24];
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v22 = this;
  v3 = (unsigned int *)((char *)this + 24);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v23 = this;
  WebCore::IDBOpenRequestData::isolatedCopy(a2);
  v5 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v5 = &off_1E9D697A0;
  *(_QWORD *)(v5 + 8) = v22;
  *(_QWORD *)(v5 + 16) = v23;
  v6 = v24;
  *(_QWORD *)(v5 + 40) = v25;
  *(_OWORD *)(v5 + 24) = v6;
  v7 = v26;
  v23 = 0;
  v26 = 0;
  *(_QWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 56) = 0;
  *(_DWORD *)(v5 + 80) = -1;
  v8 = v28;
  if (v28 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69758[v28])(&v20, v5 + 56, v27);
    *(_DWORD *)(v5 + 80) = v8;
  }
  *(_BYTE *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 112) = -1;
  v9 = v30;
  if (v30 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69758[v30])(&v20);
    *(_DWORD *)(v5 + 112) = v9;
  }
  *(_BYTE *)(v5 + 120) = v31;
  v10 = v33;
  *(_QWORD *)(v5 + 128) = v32;
  *(_BYTE *)(v5 + 136) = v10;
  v20 = v5;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v20);
  v12 = v20;
  v20 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v30 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D695F8[v30])(&v21, &v29);
  v30 = -1;
  if (v28 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D695F8[v28])(&v21, v27);
  v28 = -1;
  v13 = v26;
  v26 = 0;
  if (!v13)
  {
LABEL_16:
    result = (unsigned int *)v23;
    v23 = 0;
    if (!result)
      return result;
    goto LABEL_19;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v13, v11);
  result = (unsigned int *)v23;
  v23 = 0;
  if (!result)
    return result;
LABEL_19:
  v15 = result + 6;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, result + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)result);
    return (unsigned int *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t InProcessIDBServer::didOpenDatabase(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D697C8;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didOpenDatabase(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didOpenDatabase((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didAbortTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *this)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  StringImpl *v5;
  uint64_t v6;
  __int128 v10;
  __int16 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  v2 = (unsigned int *)(a1 + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)&v10 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  *((_QWORD *)&v10 + 1) = v4;
  WTF::String::isolatedCopy();
  WebCore::IDBError::IDBError();
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v6 = &off_1E9D697F0;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 24) = v10;
  *(_WORD *)(v6 + 40) = v11;
  *(_QWORD *)(v6 + 48) = v12;
  v14 = v6;
  WTF::callOnMainThread();
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didAbortTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *a2)
{
  return InProcessIDBServer::didAbortTransaction(a1 - 16, a2);
}

uint64_t InProcessIDBServer::didCommitTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *this)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  StringImpl *v5;
  uint64_t v6;
  __int128 v10;
  __int16 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  v2 = (unsigned int *)(a1 + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)&v10 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  *((_QWORD *)&v10 + 1) = v4;
  WTF::String::isolatedCopy();
  WebCore::IDBError::IDBError();
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v6 = &off_1E9D69818;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 24) = v10;
  *(_WORD *)(v6 + 40) = v11;
  *(_QWORD *)(v6 + 48) = v12;
  v14 = v6;
  WTF::callOnMainThread();
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didCommitTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *a2)
{
  return InProcessIDBServer::didCommitTransaction(a1 - 16, a2);
}

uint64_t InProcessIDBServer::didCreateObjectStore(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69840;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didCreateObjectStore(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didCreateObjectStore((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didDeleteObjectStore(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69868;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didDeleteObjectStore(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didDeleteObjectStore((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didRenameObjectStore(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69890;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didRenameObjectStore(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didRenameObjectStore((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didClearObjectStore(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D698B8;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didClearObjectStore(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didClearObjectStore((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didCreateIndex(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D698E0;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didCreateIndex(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didCreateIndex((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didDeleteIndex(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69908;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didDeleteIndex(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didDeleteIndex((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didRenameIndex(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69930;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didRenameIndex(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didRenameIndex((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didPutOrAdd(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69958;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didPutOrAdd(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didPutOrAdd((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didGetRecord(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69980;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didGetRecord(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didGetRecord((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didGetAllRecords(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D699A8;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didGetAllRecords(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didGetAllRecords((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didGetCount(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D699D0;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didGetCount(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didGetCount((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didDeleteRecord(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D699F8;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didDeleteRecord(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didDeleteRecord((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didOpenCursor(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69A20;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didOpenCursor(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didOpenCursor((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::didIterateCursor(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (unsigned int *)((char *)this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebCore::IDBResultData::isolatedCopy(a2);
  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v4 = off_1E9D69A48;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  v5 = v15;
  *(_QWORD *)(v4 + 40) = v16;
  *(_OWORD *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 48) = v17;
  v6 = v18;
  v18 = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 64) = v19;
  *(_QWORD *)(v4 + 80) = v20;
  v7 = *((_QWORD *)&v20 + 1);
  v20 = 0u;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = v21;
  v8 = *((_QWORD *)&v21 + 1);
  v21 = 0u;
  *(_QWORD *)(v4 + 104) = v8;
  v9 = v22;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = v23;
  v24 = v4;
  WTF::callOnMainThread();
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v15, v10);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didIterateCursor(InProcessIDBServer *this, const WebCore::IDBResultData *a2)
{
  return InProcessIDBServer::didIterateCursor((InProcessIDBServer *)((char *)this - 16), a2);
}

uint64_t InProcessIDBServer::abortTransaction(InProcessIDBServer *this, const WebCore::IDBResourceIdentifier *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  v3 = (unsigned int *)((char *)this + 24);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = WebCore::IDBResourceIdentifier::isolatedCopy(a2);
  v7 = v6;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v8 = &off_1E9D69A70;
  v8[1] = this;
  v8[2] = this;
  v8[3] = v5;
  v8[4] = v7;
  v10 = (uint64_t)v8;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v10);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t InProcessIDBServer::commitTransaction(InProcessIDBServer *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;

  v5 = (unsigned int *)((char *)this + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WebCore::IDBResourceIdentifier::isolatedCopy(a2);
  v9 = v8;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v10 = &off_1E9D69A98;
  v10[1] = this;
  v10[2] = this;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a3;
  v12 = (uint64_t)v10;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v12);
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t InProcessIDBServer::didFinishHandlingVersionChangeTransaction(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;

  v5 = (unsigned int *)(a1 + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  v9 = v8;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v10 = &off_1E9D69AC0;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = v7;
  v10[5] = v9;
  v12 = (uint64_t)v10;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), &v12);
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t InProcessIDBServer::createObjectStore(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBObjectStoreInfo *a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  StringImpl *v11;
  uint64_t v12;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (unsigned int *)((char *)this + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WebCore::IDBObjectStoreInfo::isolatedCopy();
  v6 = WTF::fastMalloc((WTF *)0xC0);
  v7 = v6;
  *(_QWORD *)v6 = off_1E9D69AE8;
  *(_QWORD *)(v6 + 8) = this;
  *(_QWORD *)(v6 + 16) = this;
  *(_OWORD *)(v6 + 24) = v16;
  *(_OWORD *)(v6 + 56) = v18;
  *(_OWORD *)(v6 + 40) = v17;
  *(_OWORD *)(v6 + 104) = v21;
  *(_QWORD *)(v6 + 120) = v22;
  *(_OWORD *)(v6 + 88) = v20;
  *(_OWORD *)(v6 + 72) = v19;
  *(_QWORD *)(v6 + 128) = v23;
  v8 = v24;
  v24 = 0;
  *(_QWORD *)(v6 + 136) = v8;
  *(_BYTE *)(v6 + 144) = 0;
  *(_BYTE *)(v6 + 168) = 0;
  if (v27)
  {
    *(_DWORD *)(v6 + 160) = -1;
    v9 = v26;
    if (v26 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t *))off_1E9D69B00[v26])(&v30, v6 + 144, &v25);
      *(_DWORD *)(v7 + 160) = v9;
    }
    *(_BYTE *)(v7 + 168) = 1;
  }
  *(_BYTE *)(v7 + 176) = v28;
  v10 = v29;
  v29 = 0;
  *(_QWORD *)(v7 + 184) = v10;
  v30 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v30);
  v12 = v30;
  v30 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)&v23, v11);
  return 0;
}

uint64_t InProcessIDBServer::deleteObjectStore(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WTF::String *a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  v4 = (unsigned int *)((char *)this + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WTF::String::isolatedCopy();
  v6 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v6 = &off_1E9D69B20;
  *(_QWORD *)(v6 + 8) = this;
  *(_QWORD *)(v6 + 16) = this;
  *(_OWORD *)(v6 + 24) = v11;
  *(_OWORD *)(v6 + 56) = v13;
  *(_OWORD *)(v6 + 40) = v12;
  *(_OWORD *)(v6 + 104) = v16;
  *(_QWORD *)(v6 + 120) = v17;
  *(_OWORD *)(v6 + 88) = v15;
  *(_OWORD *)(v6 + 72) = v14;
  *(_QWORD *)(v6 + 128) = v18;
  v19 = v6;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v19);
  v7 = v19;
  v19 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return 0;
}

uint64_t InProcessIDBServer::renameObjectStore(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, const WTF::String *a4)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  uint64_t v21;

  v6 = (unsigned int *)((char *)this + 24);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebCore::IDBRequestData::isolatedCopy(a2);
  *((_QWORD *)&v19 + 1) = a3;
  WTF::String::isolatedCopy();
  v8 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v8 = &off_1E9D69B48;
  *(_QWORD *)(v8 + 8) = this;
  *(_QWORD *)(v8 + 16) = this;
  *(_OWORD *)(v8 + 120) = v19;
  *(_OWORD *)(v8 + 104) = v18;
  *(_OWORD *)(v8 + 88) = v17;
  *(_OWORD *)(v8 + 72) = v16;
  *(_OWORD *)(v8 + 56) = v15;
  *(_OWORD *)(v8 + 40) = v14;
  *(_OWORD *)(v8 + 24) = v13;
  *(_QWORD *)(v8 + 136) = v20;
  v21 = v8;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v21);
  v9 = v21;
  v21 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return 0;
}

uint64_t InProcessIDBServer::clearObjectStore(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v5 = (unsigned int *)((char *)this + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::IDBRequestData::isolatedCopy(a2);
  *((_QWORD *)&v18 + 1) = a3;
  v7 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v7 = &off_1E9D69B70;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_OWORD *)(v7 + 120) = v18;
  *(_OWORD *)(v7 + 104) = v17;
  *(_OWORD *)(v7 + 88) = v16;
  *(_OWORD *)(v7 + 72) = v15;
  *(_OWORD *)(v7 + 40) = v13;
  *(_OWORD *)(v7 + 24) = v12;
  *(_OWORD *)(v7 + 56) = v14;
  v19 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v19);
  v8 = v19;
  v19 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return 0;
}

uint64_t InProcessIDBServer::createIndex(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIndexInfo *a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  WTF::StringImpl *v20;
  _BYTE v21[16];
  int v22;
  __int16 v23;
  uint64_t v24;
  char v25;

  v4 = (unsigned int *)((char *)this + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WebCore::IDBIndexInfo::isolatedCopy();
  v6 = WTF::fastMalloc((WTF *)0xB8);
  *(_QWORD *)v6 = &off_1E9D69B98;
  *(_QWORD *)(v6 + 8) = this;
  *(_QWORD *)(v6 + 16) = this;
  *(_OWORD *)(v6 + 24) = v12;
  *(_OWORD *)(v6 + 56) = v14;
  *(_OWORD *)(v6 + 40) = v13;
  *(_QWORD *)(v6 + 120) = v18;
  *(_OWORD *)(v6 + 104) = v17;
  *(_OWORD *)(v6 + 88) = v16;
  *(_OWORD *)(v6 + 72) = v15;
  *(_OWORD *)(v6 + 128) = v19;
  *(_QWORD *)(v6 + 144) = v20;
  *(_BYTE *)(v6 + 152) = 0;
  *(_DWORD *)(v6 + 168) = -1;
  v7 = v22;
  if (v22 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69B00[v22])(&v24, v6 + 152, v21);
    *(_DWORD *)(v6 + 168) = v7;
  }
  *(_WORD *)(v6 + 176) = v23;
  v24 = v6;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v24);
  v8 = v24;
  v24 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v22 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D69608[v22])(&v25, v21);
  return 0;
}

uint64_t InProcessIDBServer::deleteIndex(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, const WTF::String *a4)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  uint64_t v21;

  v6 = (unsigned int *)((char *)this + 24);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebCore::IDBRequestData::isolatedCopy(a2);
  *((_QWORD *)&v19 + 1) = a3;
  WTF::String::isolatedCopy();
  v8 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v8 = &off_1E9D69BC0;
  *(_QWORD *)(v8 + 8) = this;
  *(_QWORD *)(v8 + 16) = this;
  *(_OWORD *)(v8 + 120) = v19;
  *(_OWORD *)(v8 + 104) = v18;
  *(_OWORD *)(v8 + 88) = v17;
  *(_OWORD *)(v8 + 72) = v16;
  *(_OWORD *)(v8 + 56) = v15;
  *(_OWORD *)(v8 + 40) = v14;
  *(_OWORD *)(v8 + 24) = v13;
  *(_QWORD *)(v8 + 136) = v20;
  v21 = v8;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v21);
  v9 = v21;
  v21 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return 0;
}

uint64_t InProcessIDBServer::renameIndex(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, uint64_t a3, uint64_t a4, const WTF::String *a5)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  v8 = (unsigned int *)((char *)this + 24);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  WebCore::IDBRequestData::isolatedCopy(a2);
  *((_QWORD *)&v21 + 1) = a3;
  WTF::String::isolatedCopy();
  v10 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v10 = &off_1E9D69BE8;
  *(_QWORD *)(v10 + 8) = this;
  *(_QWORD *)(v10 + 16) = this;
  *(_OWORD *)(v10 + 24) = v15;
  *(_OWORD *)(v10 + 40) = v16;
  *(_OWORD *)(v10 + 56) = v17;
  *(_OWORD *)(v10 + 72) = v18;
  *(_OWORD *)(v10 + 120) = v21;
  *(_QWORD *)(v10 + 136) = a4;
  *(_OWORD *)(v10 + 104) = v20;
  *(_OWORD *)(v10 + 88) = v19;
  *(_QWORD *)(v10 + 144) = v22;
  v23 = v10;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v23);
  v11 = v23;
  v23 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return 0;
}

uint64_t InProcessIDBServer::putOrAdd(uint64_t a1, WebCore::IDBRequestData *this, WebCore::IDBKeyData *a3, WebCore::IDBValue *a4, char a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  StringImpl *v17;
  uint64_t v18;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  _BYTE v30[16];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;

  v9 = (unsigned int *)(a1 + 24);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  WebCore::IDBRequestData::isolatedCopy(this);
  WebCore::IDBKeyData::isolatedCopy(a3);
  WebCore::IDBValue::isolatedCopy(a4);
  v37 = a5;
  v11 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v11 = off_1E9D69C10;
  *(_QWORD *)(v11 + 8) = a1;
  *(_QWORD *)(v11 + 16) = a1;
  *(_OWORD *)(v11 + 24) = v22;
  *(_OWORD *)(v11 + 56) = v24;
  *(_OWORD *)(v11 + 40) = v23;
  *(_QWORD *)(v11 + 120) = v28;
  *(_OWORD *)(v11 + 104) = v27;
  *(_OWORD *)(v11 + 88) = v26;
  *(_OWORD *)(v11 + 72) = v25;
  *(_BYTE *)(v11 + 128) = v29;
  *(_BYTE *)(v11 + 136) = 0;
  *(_DWORD *)(v11 + 152) = -1;
  v12 = v31;
  if (v31 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69C28[v31])(&v38, v11 + 136, v30);
    *(_DWORD *)(v11 + 152) = v12;
  }
  *(_QWORD *)(v11 + 160) = v32;
  v13 = v33;
  v32 = 0;
  v33 = 0;
  *(_QWORD *)(v11 + 168) = v13;
  v14 = v34;
  v34 = 0;
  *(_QWORD *)(v11 + 176) = v14;
  v15 = v35;
  v35 = 0;
  *(_QWORD *)(v11 + 184) = v15;
  v16 = v36;
  v36 = 0;
  *(_QWORD *)(v11 + 192) = v16;
  *(_BYTE *)(v11 + 200) = v37;
  v38 = v11;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), &v38);
  v18 = v38;
  v38 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)&v32, v17);
  if (v31 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D69618[v31])(&v39, v30);
  return 0;
}

uint64_t InProcessIDBServer::getRecord(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetRecordData *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  char v31;

  v5 = (unsigned int *)((char *)this + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WebCore::IDBGetRecordData::isolatedCopy(a3);
  v7 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v7 = &off_1E9D69C80;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_OWORD *)(v7 + 24) = v15;
  *(_OWORD *)(v7 + 56) = v17;
  *(_OWORD *)(v7 + 40) = v16;
  *(_QWORD *)(v7 + 120) = v21;
  *(_OWORD *)(v7 + 104) = v20;
  *(_OWORD *)(v7 + 88) = v19;
  *(_OWORD *)(v7 + 72) = v18;
  *(_BYTE *)(v7 + 128) = v22;
  *(_BYTE *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 152) = -1;
  v8 = v24;
  if (v24 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69C28[v24])(&v30, v7 + 136, v23);
    *(_DWORD *)(v7 + 152) = v8;
  }
  v9 = v25;
  *(_BYTE *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 160) = v9;
  *(_DWORD *)(v7 + 184) = -1;
  v10 = v27;
  if (v27 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69C28[v27])(&v30);
    *(_DWORD *)(v7 + 184) = v10;
  }
  *(_WORD *)(v7 + 192) = v28;
  *(_BYTE *)(v7 + 200) = v29;
  v30 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v30);
  v11 = v30;
  v30 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v27 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D69618[v27])(&v31, &v26);
  v27 = -1;
  if (v24 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D69618[v24])(&v31, v23);
  return 0;
}

uint64_t InProcessIDBServer::getAllRecords(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBGetAllRecordsData *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  _BYTE v24[16];
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;

  v5 = (unsigned int *)((char *)this + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WebCore::IDBGetAllRecordsData::isolatedCopy(a3);
  v7 = WTF::fastMalloc((WTF *)0xE8);
  *(_QWORD *)v7 = &off_1E9D69CA8;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_OWORD *)(v7 + 24) = v16;
  *(_OWORD *)(v7 + 56) = v18;
  *(_OWORD *)(v7 + 40) = v17;
  *(_QWORD *)(v7 + 120) = v22;
  *(_OWORD *)(v7 + 104) = v21;
  *(_OWORD *)(v7 + 88) = v20;
  *(_OWORD *)(v7 + 72) = v19;
  *(_BYTE *)(v7 + 128) = v23;
  *(_BYTE *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 152) = -1;
  v8 = v25;
  if (v25 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69C28[v25])(&v32, v7 + 136, v24);
    *(_DWORD *)(v7 + 152) = v8;
  }
  v9 = v26;
  *(_BYTE *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 160) = v9;
  *(_DWORD *)(v7 + 184) = -1;
  v10 = v28;
  if (v28 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69C28[v28])(&v32);
    *(_DWORD *)(v7 + 184) = v10;
  }
  *(_WORD *)(v7 + 192) = v29;
  v11 = v31;
  *(_OWORD *)(v7 + 200) = v30;
  *(_OWORD *)(v7 + 216) = v11;
  v32 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v28 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D69618[v28])(&v33, &v27);
  v28 = -1;
  if (v25 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D69618[v25])(&v33, v24);
  return 0;
}

uint64_t InProcessIDBServer::getCount(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  char v30;

  v5 = (unsigned int *)((char *)this + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WebCore::IDBKeyRangeData::isolatedCopy(a3);
  v7 = WTF::fastMalloc((WTF *)0xC8);
  *(_QWORD *)v7 = &off_1E9D69CD0;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_OWORD *)(v7 + 24) = v15;
  *(_OWORD *)(v7 + 56) = v17;
  *(_OWORD *)(v7 + 40) = v16;
  *(_QWORD *)(v7 + 120) = v21;
  *(_OWORD *)(v7 + 104) = v20;
  *(_OWORD *)(v7 + 88) = v19;
  *(_OWORD *)(v7 + 72) = v18;
  *(_BYTE *)(v7 + 128) = v22;
  *(_BYTE *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 152) = -1;
  v8 = v24;
  if (v24 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69C28[v24])(&v29, v7 + 136, v23);
    *(_DWORD *)(v7 + 152) = v8;
  }
  v9 = v25;
  *(_BYTE *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 160) = v9;
  *(_DWORD *)(v7 + 184) = -1;
  v10 = v27;
  if (v27 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69C28[v27])(&v29);
    *(_DWORD *)(v7 + 184) = v10;
  }
  *(_WORD *)(v7 + 192) = v28;
  v29 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v29);
  v11 = v29;
  v29 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v27 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D69618[v27])(&v30, &v26);
  v27 = -1;
  if (v24 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D69618[v24])(&v30, v23);
  return 0;
}

uint64_t InProcessIDBServer::deleteRecord(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBKeyRangeData *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  char v30;

  v5 = (unsigned int *)((char *)this + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WebCore::IDBKeyRangeData::isolatedCopy(a3);
  v7 = WTF::fastMalloc((WTF *)0xC8);
  *(_QWORD *)v7 = &off_1E9D69CF8;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_OWORD *)(v7 + 24) = v15;
  *(_OWORD *)(v7 + 56) = v17;
  *(_OWORD *)(v7 + 40) = v16;
  *(_QWORD *)(v7 + 120) = v21;
  *(_OWORD *)(v7 + 104) = v20;
  *(_OWORD *)(v7 + 88) = v19;
  *(_OWORD *)(v7 + 72) = v18;
  *(_BYTE *)(v7 + 128) = v22;
  *(_BYTE *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 152) = -1;
  v8 = v24;
  if (v24 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69C28[v24])(&v29, v7 + 136, v23);
    *(_DWORD *)(v7 + 152) = v8;
  }
  v9 = v25;
  *(_BYTE *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 160) = v9;
  *(_DWORD *)(v7 + 184) = -1;
  v10 = v27;
  if (v27 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69C28[v27])(&v29);
    *(_DWORD *)(v7 + 184) = v10;
  }
  *(_WORD *)(v7 + 192) = v28;
  v29 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v29);
  v11 = v29;
  v29 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v27 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D69618[v27])(&v30, &v26);
  v27 = -1;
  if (v24 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D69618[v24])(&v30, v23);
  return 0;
}

uint64_t InProcessIDBServer::openCursor(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBCursorInfo *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  _BYTE v26[16];
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  char v35;

  v5 = (unsigned int *)((char *)this + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WebCore::IDBCursorInfo::isolatedCopy(a3);
  v7 = WTF::fastMalloc((WTF *)0x100);
  *(_QWORD *)v7 = &off_1E9D69D20;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_OWORD *)(v7 + 24) = v15;
  *(_OWORD *)(v7 + 56) = v17;
  *(_OWORD *)(v7 + 40) = v16;
  *(_QWORD *)(v7 + 120) = v21;
  *(_OWORD *)(v7 + 104) = v20;
  *(_OWORD *)(v7 + 88) = v19;
  *(_OWORD *)(v7 + 72) = v18;
  *(_OWORD *)(v7 + 144) = v23;
  *(_OWORD *)(v7 + 160) = v24;
  *(_OWORD *)(v7 + 128) = v22;
  *(_BYTE *)(v7 + 176) = v25;
  *(_BYTE *)(v7 + 184) = 0;
  *(_DWORD *)(v7 + 200) = -1;
  v8 = v27;
  if (v27 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69C28[v27])(&v34, v7 + 184, v26);
    *(_DWORD *)(v7 + 200) = v8;
  }
  v9 = v28;
  *(_BYTE *)(v7 + 216) = 0;
  *(_BYTE *)(v7 + 208) = v9;
  *(_DWORD *)(v7 + 232) = -1;
  v10 = v30;
  if (v30 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69C28[v30])(&v34);
    *(_DWORD *)(v7 + 232) = v10;
  }
  *(_WORD *)(v7 + 240) = v31;
  *(_WORD *)(v7 + 248) = v32;
  *(_BYTE *)(v7 + 250) = v33;
  v34 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v34);
  v11 = v34;
  v34 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v30 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D69618[v30])(&v35, &v29);
  v30 = -1;
  if (v27 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D69618[v27])(&v35, v26);
  return 0;
}

uint64_t InProcessIDBServer::iterateCursor(InProcessIDBServer *this, const WebCore::IDBRequestData *a2, const WebCore::IDBIterateCursorData *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  char v31;

  v5 = (unsigned int *)((char *)this + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::IDBRequestData::isolatedCopy(a2);
  WebCore::IDBIterateCursorData::isolatedCopy(a3);
  v7 = WTF::fastMalloc((WTF *)0xC8);
  *(_QWORD *)v7 = &off_1E9D69D48;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_OWORD *)(v7 + 24) = v15;
  *(_OWORD *)(v7 + 56) = v17;
  *(_OWORD *)(v7 + 40) = v16;
  *(_QWORD *)(v7 + 120) = v21;
  *(_OWORD *)(v7 + 104) = v20;
  *(_OWORD *)(v7 + 88) = v19;
  *(_OWORD *)(v7 + 72) = v18;
  *(_BYTE *)(v7 + 128) = v22;
  *(_BYTE *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 152) = -1;
  v8 = v24;
  if (v24 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69C28[v24])(&v30, v7 + 136, v23);
    *(_DWORD *)(v7 + 152) = v8;
  }
  v9 = v25;
  *(_BYTE *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 160) = v9;
  *(_DWORD *)(v7 + 184) = -1;
  v10 = v27;
  if (v27 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69C28[v27])(&v30);
    *(_DWORD *)(v7 + 184) = v10;
  }
  *(_DWORD *)(v7 + 192) = v28;
  *(_BYTE *)(v7 + 196) = v29;
  v30 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v30);
  v11 = v30;
  v30 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v27 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D69618[v27])(&v31, &v26);
  v27 = -1;
  if (v24 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D69618[v24])(&v31, v23);
  return 0;
}

uint64_t InProcessIDBServer::establishTransaction(uint64_t a1, uint64_t a2, WebCore::IDBTransactionInfo *this)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (unsigned int *)(a1 + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::IDBTransactionInfo::isolatedCopy(this);
  v6 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v6 = off_1E9D69D70;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = v16[1];
  *(_OWORD *)(v6 + 32) = v16[0];
  *(_OWORD *)(v6 + 48) = v7;
  *(_QWORD *)(v6 + 64) = v17;
  v8 = v18;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)(v6 + 72) = v8;
  v9 = v19;
  v19 = 0;
  *(_QWORD *)(v6 + 80) = v9;
  v20 = v6;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), &v20);
  v11 = v20;
  v20 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)v16, v10);
  return 0;
}

uint64_t InProcessIDBServer::fireVersionChangeEvent(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this, uint64_t a4)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;

  v6 = (unsigned int *)(a1 + 24);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(a2 + 8);
  v9 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  v11 = v10;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v12 = &off_1E9D69D98;
  v12[1] = a1;
  v12[2] = a1;
  v12[3] = v8;
  v12[4] = v9;
  v12[5] = v11;
  v12[6] = a4;
  v14 = (uint64_t)v12;
  WTF::callOnMainThread();
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::fireVersionChangeEvent(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this, uint64_t a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;

  v5 = a1 - 16;
  v6 = (unsigned int *)(a1 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(a2 + 8);
  v9 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  v11 = v10;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v12 = &off_1E9D69D98;
  v12[1] = v5;
  v12[2] = v5;
  v12[3] = v8;
  v12[4] = v9;
  v12[5] = v11;
  v12[6] = a4;
  v14 = (uint64_t)v12;
  WTF::callOnMainThread();
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

uint64_t InProcessIDBServer::didStartTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *this)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  StringImpl *v5;
  uint64_t v6;
  __int128 v10;
  __int16 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  v2 = (unsigned int *)(a1 + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)&v10 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  *((_QWORD *)&v10 + 1) = v4;
  WTF::String::isolatedCopy();
  WebCore::IDBError::IDBError();
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v6 = &off_1E9D69DC0;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 24) = v10;
  *(_WORD *)(v6 + 40) = v11;
  *(_QWORD *)(v6 + 48) = v12;
  v14 = v6;
  WTF::callOnMainThread();
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didStartTransaction(uint64_t a1, WebCore::IDBResourceIdentifier *a2)
{
  return InProcessIDBServer::didStartTransaction(a1 - 16, a2);
}

uint64_t InProcessIDBServer::didCloseFromServer(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  StringImpl *v4;
  uint64_t v5;
  uint64_t v9;
  __int16 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;

  v2 = (unsigned int *)(a1 + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v9 = *(_QWORD *)(a2 + 8);
  WTF::String::isolatedCopy();
  WebCore::IDBError::IDBError();
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v4);
    else
      *(_DWORD *)v12 -= 2;
  }
  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v5 = &off_1E9D69DE8;
  *(_QWORD *)(v5 + 8) = a1;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v9;
  *(_WORD *)(v5 + 32) = v10;
  *(_QWORD *)(v5 + 40) = v11;
  v13 = v5;
  WTF::callOnMainThread();
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 0;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didCloseFromServer(uint64_t a1, uint64_t a2)
{
  return InProcessIDBServer::didCloseFromServer(a1 - 16, a2);
}

uint64_t InProcessIDBServer::notifyOpenDBRequestBlocked(InProcessIDBServer *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;

  v7 = (unsigned int *)((char *)this + 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = WebCore::IDBResourceIdentifier::isolatedCopy(a2);
  v11 = v10;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v12 = &off_1E9D69E10;
  v12[1] = this;
  v12[2] = this;
  v12[3] = v9;
  v12[4] = v11;
  v12[5] = a3;
  v12[6] = a4;
  v14 = (uint64_t)v12;
  WTF::callOnMainThread();
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::notifyOpenDBRequestBlocked(InProcessIDBServer *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;

  v6 = (char *)this - 16;
  v7 = (unsigned int *)((char *)this + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = WebCore::IDBResourceIdentifier::isolatedCopy(a2);
  v11 = v10;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v12 = &off_1E9D69E10;
  v12[1] = v6;
  v12[2] = v6;
  v12[3] = v9;
  v12[4] = v11;
  v12[5] = a3;
  v12[6] = a4;
  v14 = (uint64_t)v12;
  WTF::callOnMainThread();
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

uint64_t InProcessIDBServer::databaseConnectionPendingClose(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = (unsigned int *)(a1 + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E9D69E38;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = a2;
  v8 = v6;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t InProcessIDBServer::databaseConnectionClosed(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = (unsigned int *)(a1 + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E9D69E60;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = a2;
  v8 = v6;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t InProcessIDBServer::abortOpenAndUpgradeNeeded(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  if (*((_BYTE *)this + 16))
  {
    v6 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
    v3 = v7;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  v9 = (unsigned int *)(a1 + 24);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v11 = &off_1E9D69E88;
  *(_QWORD *)(v11 + 8) = a1;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = v3;
  *(_BYTE *)(v11 + 48) = v8;
  v13 = v11;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), &v13);
  result = v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t InProcessIDBServer::didFireVersionChangeEvent(uint64_t a1, uint64_t a2, WebCore::IDBResourceIdentifier *this, char a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v7 = (unsigned int *)(a1 + 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = WebCore::IDBResourceIdentifier::isolatedCopy(this);
  v11 = v10;
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v12 = &off_1E9D69EB0;
  *(_QWORD *)(v12 + 8) = a1;
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  *(_QWORD *)(v12 + 32) = v9;
  *(_QWORD *)(v12 + 40) = v11;
  *(_BYTE *)(v12 + 48) = a4;
  v14 = v12;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), &v14);
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *InProcessIDBServer::openDBRequestCancelled(InProcessIDBServer *this, const WebCore::IDBOpenRequestData *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  char v10;
  StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  char v21;
  InProcessIDBServer *v22;
  InProcessIDBServer *v23;
  __int128 v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _BYTE v27[24];
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v22 = this;
  v3 = (unsigned int *)((char *)this + 24);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v23 = this;
  WebCore::IDBOpenRequestData::isolatedCopy(a2);
  v5 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v5 = &off_1E9D69ED8;
  *(_QWORD *)(v5 + 8) = v22;
  *(_QWORD *)(v5 + 16) = v23;
  v6 = v24;
  *(_QWORD *)(v5 + 40) = v25;
  *(_OWORD *)(v5 + 24) = v6;
  v7 = v26;
  v23 = 0;
  v26 = 0;
  *(_QWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 56) = 0;
  *(_DWORD *)(v5 + 80) = -1;
  v8 = v28;
  if (v28 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69758[v28])(&v20, v5 + 56, v27);
    *(_DWORD *)(v5 + 80) = v8;
  }
  *(_BYTE *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 112) = -1;
  v9 = v30;
  if (v30 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69758[v30])(&v20);
    *(_DWORD *)(v5 + 112) = v9;
  }
  *(_BYTE *)(v5 + 120) = v31;
  v10 = v33;
  *(_QWORD *)(v5 + 128) = v32;
  *(_BYTE *)(v5 + 136) = v10;
  v20 = v5;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7), &v20);
  v12 = v20;
  v20 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v30 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D695F8[v30])(&v21, &v29);
  v30 = -1;
  if (v28 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D695F8[v28])(&v21, v27);
  v28 = -1;
  v13 = v26;
  v26 = 0;
  if (!v13)
  {
LABEL_16:
    result = (unsigned int *)v23;
    v23 = 0;
    if (!result)
      return result;
    goto LABEL_19;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v13, v11);
  result = (unsigned int *)v23;
  v23 = 0;
  if (!result)
    return result;
LABEL_19:
  v15 = result + 6;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, result + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)result);
    return (unsigned int *)WTF::fastFree(v18, v19);
  }
  return result;
}

unsigned int *InProcessIDBServer::getAllDatabaseNamesAndVersions(uint64_t a1, _OWORD *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  InProcessIDBServer *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int *result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  InProcessIDBServer *v21;
  _BYTE v22[24];
  _BYTE v23[24];
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v20 = a1;
  v4 = (unsigned int *)(a1 + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v21 = (InProcessIDBServer *)a1;
  *(_QWORD *)v22 = WebCore::IDBClient::IDBConnectionToServer::identifier(*(WebCore::IDBClient::IDBConnectionToServer **)(a1 + 40));
  *(_OWORD *)&v22[8] = *a2;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  v6 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v6 = &off_1E9D69F00;
  *(_QWORD *)(v6 + 8) = v20;
  v7 = v21;
  v21 = 0;
  *(_QWORD *)(v6 + 16) = v7;
  v8 = *(_QWORD *)&v22[16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)v22;
  *(_QWORD *)(v6 + 40) = v8;
  *(_BYTE *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 72) = -1;
  v9 = v24;
  if (v24 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E9D69758[v24])(&v18, v6 + 48, v23);
    *(_DWORD *)(v6 + 72) = v9;
  }
  *(_BYTE *)(v6 + 80) = 0;
  *(_DWORD *)(v6 + 104) = -1;
  v10 = v26;
  if (v26 != -1)
  {
    ((void (*)(uint64_t *))off_1E9D69758[v26])(&v18);
    *(_DWORD *)(v6 + 104) = v10;
  }
  v18 = v6;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), &v18);
  v11 = v18;
  v18 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v26 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D695F8[v26])(&v19, &v25);
  v26 = -1;
  if (v24 != -1)
    ((void (*)(char *, _BYTE *))off_1E9D695F8[v24])(&v19, v23);
  v24 = -1;
  result = (unsigned int *)v21;
  v21 = 0;
  if (result)
  {
    v13 = result + 6;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, result + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)result);
      return (unsigned int *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

uint64_t InProcessIDBServer::didGetAllDatabaseNamesAndVersions(uint64_t a1, __int128 *a2, unint64_t *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (unsigned int *)(a1 + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v17 = *a2;
  v7 = *a3;
  v8 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v8)
  {
    v9 = v7 + 16 * v8;
    do
    {
      WTF::String::isolatedCopy();
      v11 = v18;
      v18 = 0;
      v20 = *(_QWORD *)(v7 + 8);
      v12 = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v10);
          *(_QWORD *)(v7 + 8) = v20;
          v18 = 0;
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      v7 += 16;
    }
    while (v7 < v9);
    v7 = *a3;
    v13 = *((_DWORD *)a3 + 3);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)a3 + 2);
  *a3 = 0;
  a3[1] = 0;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v15 = &off_1E9D69F28;
  *(_QWORD *)(v15 + 8) = a1;
  *(_QWORD *)(v15 + 16) = a1;
  *(_OWORD *)(v15 + 24) = v17;
  *(_QWORD *)(v15 + 40) = v7;
  *(_DWORD *)(v15 + 48) = v14;
  *(_DWORD *)(v15 + 52) = v13;
  v19 = v15;
  WTF::callOnMainThread();
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return result;
}

uint64_t `non-virtual thunk to'InProcessIDBServer::didGetAllDatabaseNamesAndVersions(uint64_t a1, __int128 *a2, unint64_t *a3)
{
  return InProcessIDBServer::didGetAllDatabaseNamesAndVersions(a1 - 16, a2, a3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, (StringImpl *)a2);
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      if (!result)
        return result;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (!result)
    return result;
LABEL_7:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
  *(_DWORD *)result -= 2;
  return result;
}

void WebCore::IDBResultData::~IDBResultData(WebCore::IDBResultData *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::IDBValue *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  WebCore::IDBValue *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  WebCore::IDBTransactionInfo *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::IDBObjectStoreInfo *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_BYTE *)(v3 + 64))
    {
      v4 = *(unsigned int *)(v3 + 56);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t))off_1E9D69608[v4])(&v37, v3 + 40);
      *(_DWORD *)(v3 + 56) = -1;
    }
    v5 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v5)
    {
      v6 = *(WebCore::IDBValue **)(v3 + 24);
      v7 = 40 * v5;
      do
      {
        WebCore::IDBValue::~IDBValue(v6, a2);
        v6 = (WebCore::IDBValue *)(v8 + 40);
        v7 -= 40;
      }
      while (v7);
    }
    v9 = *(WTF **)(v3 + 24);
    if (v9)
    {
      *(_QWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      WTF::fastFree(v9, a2);
    }
    v10 = *(unsigned int *)(v3 + 20);
    v11 = *(WTF **)(v3 + 8);
    if ((_DWORD)v10)
    {
      v12 = 32 * v10;
      v13 = (_DWORD *)((char *)v11 + 24);
      do
      {
        v14 = *v13;
        if ((_DWORD)v14 != -1)
          ((void (*)(char *, _DWORD *))off_1E9D69618[v14])(&v38, v13 - 4);
        *v13 = -1;
        v13 += 8;
        v12 -= 32;
      }
      while (v12);
      v11 = *(WTF **)(v3 + 8);
    }
    if (v11)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v11, a2);
    }
    MEMORY[0x1D82A4CDC](v3);
  }
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
  {
    v16 = *(_DWORD *)(v15 + 148);
    if (v16)
    {
      v17 = 104 * v16;
      v18 = (WebCore::IDBValue *)(*(_QWORD *)(v15 + 136) + 64);
      do
      {
        WebCore::IDBValue::~IDBValue(v18, a2);
        v19 = *((unsigned int *)v18 - 2);
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, char *))off_1E9D69618[v19])(&v39, (char *)v18 - 24);
        *((_DWORD *)v18 - 2) = -1;
        v20 = *((unsigned int *)v18 - 10);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, char *))off_1E9D69618[v20])(&v40, (char *)v18 - 56);
        *((_DWORD *)v18 - 10) = -1;
        v18 = (WebCore::IDBValue *)((char *)v18 + 104);
        v17 -= 104;
      }
      while (v17);
    }
    v21 = *(WTF **)(v15 + 136);
    if (v21)
    {
      *(_QWORD *)(v15 + 136) = 0;
      *(_DWORD *)(v15 + 144) = 0;
      WTF::fastFree(v21, a2);
    }
    if (*(_BYTE *)(v15 + 128))
    {
      v22 = *(unsigned int *)(v15 + 120);
      if ((_DWORD)v22 != -1)
        ((void (*)(char *, uint64_t))off_1E9D69608[v22])(&v41, v15 + 104);
      *(_DWORD *)(v15 + 120) = -1;
    }
    v23 = *(unsigned int *)(v15 + 96);
    if ((_DWORD)v23 != -1)
      ((void (*)(char *, uint64_t))off_1E9D69618[v23])(&v42, v15 + 80);
    *(_DWORD *)(v15 + 96) = -1;
    v24 = *(unsigned int *)(v15 + 64);
    if ((_DWORD)v24 != -1)
      ((void (*)(char *, uint64_t))off_1E9D69618[v24])(&v43, v15 + 48);
    *(_DWORD *)(v15 + 64) = -1;
    WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)v15, a2);
    MEMORY[0x1D82A4154]();
  }
  v25 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v25)
  {
    v26 = v25[6];
    if ((_DWORD)v26 != -1)
      ((void (*)(char *, unsigned int *))off_1E9D69618[v26])(&v36, v25 + 2);
    v25[6] = -1;
    WTF::fastFree((WTF *)v25, a2);
  }
  v27 = (WebCore::IDBTransactionInfo *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v27)
  {
    WebCore::IDBTransactionInfo::~IDBTransactionInfo(v27, a2);
    WTF::fastFree(v28, v29);
  }
  v30 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 32);
    if (v31)
    {
      v32 = *(unsigned int *)(v31 - 4);
      if ((_DWORD)v32)
      {
        v33 = (WebCore::IDBObjectStoreInfo *)(v31 + 8);
        do
        {
          if (*((_QWORD *)v33 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v33, a2);
          v33 = (WebCore::IDBObjectStoreInfo *)((char *)v33 + 72);
          --v32;
        }
        while (v32);
      }
      WTF::fastFree((WTF *)(v31 - 16), a2);
    }
    v34 = *(WTF::StringImpl **)v30;
    *(_QWORD *)v30 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, a2);
      else
        *(_DWORD *)v34 -= 2;
    }
    MEMORY[0x1D82A4CD0](v30);
  }
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, a2);
    else
      *(_DWORD *)v35 -= 2;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

void WebCore::IDBValue::~IDBValue(WebCore::IDBValue *this, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 5);
  if ((_DWORD)v8)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 1);
  if (v12)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v16 = *(WTF **)(v13 + 8);
      if (v16)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v16, a2);
      }
      WTF::fastFree((WTF *)v13, a2);
    }
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  result = *a2;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (_DWORD *)((char *)result + 24);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))off_1E9D69618[v7])(&v8, v6 - 4);
      *v6 = -1;
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
    result = *a2;
  }
  if (result)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      v5 = *(WTF **)(v2 + 8);
      if (v5)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v5, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

void WebCore::IDBTransactionInfo::~IDBTransactionInfo(WebCore::IDBTransactionInfo *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::IDBObjectStoreInfo *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 32);
    if (v4)
    {
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = (WebCore::IDBObjectStoreInfo *)(v4 + 8);
        do
        {
          if (*((_QWORD *)v6 - 1) != -1)
            WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(v6, a2);
          v6 = (WebCore::IDBObjectStoreInfo *)((char *)v6 + 72);
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    v7 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    MEMORY[0x1D82A4CD0](v3);
  }
  v8 = *((unsigned int *)this + 11);
  if ((_DWORD)v8)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 4);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v12, a2);
  }
}

void WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo(WebCore::IDBObjectStoreInfo *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 24;
      do
      {
        if (*(_QWORD *)(v5 - 24) != -1)
        {
          v6 = *(unsigned int *)(v5 + 24);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_1E9D69608[v6])(&v10, v5 + 8);
          *(_DWORD *)(v5 + 24) = -1;
          v7 = *(WTF::StringImpl **)v5;
          *(_QWORD *)v5 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v5 += 64;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v8 = *((unsigned int *)this + 8);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, char *))off_1E9D69608[v8])(&v11, (char *)this + 16);
    *((_DWORD *)this + 8) = -1;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::~InProcessIDBServer()::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  WTF *v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (unsigned __int8 *)(v3 + 28);
  if (__ldaxr((unsigned __int8 *)(v3 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v3 + 28);
LABEL_5:
  v6 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v4))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 28));
  v8 = *(WTF **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  if (!v8)
    return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
    return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
  }
  v9 = *((_QWORD *)v8 + 2);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  WTF::fastFree(v8, a2);
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
}

void WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(WebCore::IDBClient::IDBConnectionProxy *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::IDBClient::IDBConnectionProxy *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WebCore::IDBClient::IDBConnectionProxy *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t k;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t m;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t n;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ii;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v3);
    v17 = *(WebCore::IDBClient::IDBConnectionProxy **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v17)
    {
      WebCore::IDBClient::IDBConnectionProxy::~IDBConnectionProxy(v17);
      MEMORY[0x1D82A7124]();
    }
    v18 = *(unsigned int **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, a2);
      }
    }
    MEMORY[0x1D82A7250](v3);
    v6 = *((_QWORD *)this + 11);
    v7 = *((_QWORD *)this + 12);
    v8 = (WTF *)*((_QWORD *)this + 13);
    v9 = v6 == v7;
    if (v6 > v7)
      goto LABEL_5;
  }
  else
  {
LABEL_4:
    v6 = *((_QWORD *)this + 11);
    v7 = *((_QWORD *)this + 12);
    v8 = (WTF *)*((_QWORD *)this + 13);
    v9 = v6 == v7;
    if (v6 > v7)
    {
LABEL_5:
      if (v7)
      {
        v10 = 8 * v7;
        do
        {
          v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          v8 = (WTF *)((char *)v8 + 8);
          v10 -= 8;
        }
        while (v10);
        v8 = (WTF *)*((_QWORD *)this + 13);
        v6 = *((_QWORD *)this + 11);
      }
      v12 = *((unsigned int *)this + 28);
      if (v6 != v12)
      {
        v13 = 8 * v6;
        v14 = (uint64_t *)((char *)v8 + v13);
        v15 = 8 * v12 - v13;
        do
        {
          v16 = *v14;
          *v14 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
LABEL_12:
      v8 = (WTF *)*((_QWORD *)this + 13);
      goto LABEL_26;
    }
  }
  if (!v9)
  {
    v24 = 8 * v6;
    v25 = (uint64_t *)((char *)v8 + v24);
    v26 = 8 * v7 - v24;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      ++v25;
      v26 -= 8;
    }
    while (v26);
    goto LABEL_12;
  }
LABEL_26:
  if (v8)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v8, a2);
  }
  v21 = *((_QWORD *)this + 9);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v22)
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)(v21 + 24 * i) != -1)
        {
          v28 = v21 + 24 * i;
          v29 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = 0;
          if (v29)
          {
            v30 = (unsigned int *)(v29 + 36);
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              atomic_store(1u, (unsigned int *)(v29 + 36));
              v33 = *(_QWORD *)(v29 + 64);
              *(_QWORD *)(v29 + 64) = 0;
              if (v33)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
              v34 = *(WebCore::IDBClient::IDBConnectionProxy **)(v29 + 40);
              *(_QWORD *)(v29 + 40) = 0;
              if (v34)
                WebCore::IDBClient::IDBConnectionProxy::deref(v34);
              *(_QWORD *)v29 = &off_1E9D69698;
              v35 = *(unsigned int **)(v29 + 24);
              *(_QWORD *)(v29 + 24) = 0;
              if (v35)
              {
                do
                {
                  v36 = __ldaxr(v35);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, v35));
                if (!v37)
                {
                  atomic_store(1u, v35);
                  WTF::Thread::~Thread((WTF::Thread *)v35);
                  WTF::fastFree(v38, v39);
                }
              }
              WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v29);
              MEMORY[0x1D82A61D0]();
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v21 - 16), a2);
  }
  v40 = *((_QWORD *)this + 8);
  if (v40)
  {
    v41 = *(unsigned int *)(v40 - 4);
    if ((_DWORD)v41)
    {
      for (j = 0; j != v41; ++j)
      {
        if (*(_QWORD *)(v40 + 24 * j) != -1)
        {
          v43 = v40 + 24 * j;
          v44 = *(unsigned int **)(v43 + 16);
          *(_QWORD *)(v43 + 16) = 0;
          if (v44)
          {
            v45 = v44 + 2;
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v44 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v40 - 16), a2);
  }
  v48 = *((_QWORD *)this + 7);
  if (v48)
  {
    v49 = *(unsigned int *)(v48 - 4);
    if ((_DWORD)v49)
    {
      for (k = 0; k != v49; ++k)
      {
        if (*(_QWORD *)(v48 + 24 * k) != -1)
        {
          v51 = v48 + 24 * k;
          v52 = *(_QWORD *)(v51 + 16);
          *(_QWORD *)(v51 + 16) = 0;
          if (v52)
          {
            v53 = (unsigned int *)(v52 + 24);
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, (unsigned int *)(v52 + 24));
              v56 = MEMORY[0x1D82A476C]();
              MEMORY[0x1D82A4778](v56);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v48 - 16), a2);
  }
  v57 = *((_QWORD *)this + 6);
  if (v57)
  {
    v58 = *(unsigned int *)(v57 - 4);
    if ((_DWORD)v58)
    {
      for (m = 0; m != v58; ++m)
      {
        if (*(_QWORD *)(v57 + 24 * m) != -1)
        {
          v60 = v57 + 24 * m;
          v61 = *(_QWORD *)(v60 + 16);
          *(_QWORD *)(v60 + 16) = 0;
          if (v61)
          {
            v62 = (unsigned int *)(v61 + 24);
            do
            {
              v63 = __ldaxr(v62);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v62));
            if (!v64)
            {
              atomic_store(1u, (unsigned int *)(v61 + 24));
              v65 = MEMORY[0x1D82A476C]();
              MEMORY[0x1D82A4778](v65);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v57 - 16), a2);
  }
  v66 = *((_QWORD *)this + 5);
  if (v66)
  {
    v67 = *(unsigned int *)(v66 - 4);
    if ((_DWORD)v67)
    {
      for (n = 0; n != v67; ++n)
      {
        if (*(_QWORD *)(v66 + 24 * n) != -1)
        {
          v69 = v66 + 24 * n;
          v70 = *(_QWORD *)(v69 + 16);
          *(_QWORD *)(v69 + 16) = 0;
          if (v70)
          {
            v71 = (unsigned int *)(v70 + 24);
            do
            {
              v72 = __ldaxr(v71);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v71));
            if (!v73)
            {
              atomic_store(1u, (unsigned int *)(v70 + 24));
              v74 = MEMORY[0x1D82A476C]();
              MEMORY[0x1D82A4778](v74);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v66 - 16), a2);
  }
  v75 = *((_QWORD *)this + 4);
  if (v75)
  {
    v76 = *(unsigned int *)(v75 - 4);
    if ((_DWORD)v76)
    {
      for (ii = 0; ii != v76; ++ii)
      {
        if (*(_QWORD *)(v75 + 24 * ii) != -1)
        {
          v78 = v75 + 24 * ii;
          v79 = *(unsigned int **)(v78 + 16);
          *(_QWORD *)(v78 + 16) = 0;
          if (v79)
          {
            v80 = v79 + 15;
            do
            {
              v81 = __ldaxr(v80);
              v82 = v81 - 1;
            }
            while (__stlxr(v82, v80));
            if (!v82)
            {
              atomic_store(1u, v79 + 15);
              (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 72))(v79);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v75 - 16), a2);
  }
  v83 = *((_QWORD *)this + 3);
  if (v83)
    WTF::fastFree((WTF *)(v83 - 16), a2);
}

uint64_t WebCore::IDBActiveDOMObject::contextDestroyed(WebCore::IDBActiveDOMObject *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914]((char *)this + 32);
LABEL_5:
  result = WebCore::ContextDestructionObserver::contextDestroyed(this);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

uint64_t WebCore::ActiveDOMObject::virtualHasPendingActivity(WebCore::ActiveDOMObject *this)
{
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::InProcessIDBServer(PAL::SessionID,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D696F0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::InProcessIDBServer(PAL::SessionID,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D696F0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::InProcessIDBServer(PAL::SessionID,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  WTF *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  WTF *v12;
  WTF *v13;

  v1 = *(_QWORD *)(a1 + 8);
  WebCore::IDBServer::IDBConnectionToClient::create();
  v3 = *(WTF **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v12;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = *((_QWORD *)v3 + 2);
      if (v6)
        WTF::fastFree((WTF *)(v6 - 16), v2);
      WTF::fastFree(v3, v2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_11;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_11:
  v7 = WTF::fastMalloc((WTF *)0x50);
  v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E9D69718;
  v13 = v8;
  WebCore::IDBServer::IDBServer::IDBServer();
  if (v13)
    (*(void (**)(WTF *))(*(_QWORD *)v13 + 8))(v13);
  v9 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v7;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = WebCore::IDBServer::IDBServer::registerConnection();
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::InProcessIDBServer(PAL::SessionID,WTF::String const&)::$_0::operator()(void)::{lambda(WebCore::ClientOrigin const&,unsigned long long)#1},BOOL,WebCore::ClientOrigin const&,unsigned long long>::call()
{
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  char v13;
  char v14;

  *(_QWORD *)a1 = &off_1E9D69740;
  v3 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D695F8[v3])(&v13, a1 + 88);
  *(_DWORD *)(a1 + 112) = -1;
  v4 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E9D695F8[v4])(&v14, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      v6 = *(unsigned int **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (!v6)
        return a1;
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v6)
    return a1;
LABEL_11:
  v8 = v6 + 6;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (v10)
    return a1;
  atomic_store(1u, v6 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
  WTF::fastFree(v11, v12);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v11;
  void *v12;
  char v13;
  char v14;

  *(_QWORD *)this = &off_1E9D69740;
  v3 = *((unsigned int *)this + 28);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D695F8[v3])(&v13, (char *)this + 88);
  *((_DWORD *)this + 28) = -1;
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D695F8[v4])(&v14, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      v6 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v6)
        return WTF::fastFree(this, a2);
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v6)
    return WTF::fastFree(this, a2);
LABEL_11:
  v7 = v6 + 6;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
    WTF::fastFree(v11, v12);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::deleteDatabase();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteDatabase(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69778;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteDatabase(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69778;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteDatabase(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didDeleteDatabase();
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  char v13;
  char v14;

  *(_QWORD *)a1 = &off_1E9D697A0;
  v3 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D695F8[v3])(&v13, a1 + 88);
  *(_DWORD *)(a1 + 112) = -1;
  v4 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E9D695F8[v4])(&v14, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      v6 = *(unsigned int **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (!v6)
        return a1;
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v6)
    return a1;
LABEL_11:
  v8 = v6 + 6;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (v10)
    return a1;
  atomic_store(1u, v6 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
  WTF::fastFree(v11, v12);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v11;
  void *v12;
  char v13;
  char v14;

  *(_QWORD *)this = &off_1E9D697A0;
  v3 = *((unsigned int *)this + 28);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D695F8[v3])(&v13, (char *)this + 88);
  *((_DWORD *)this + 28) = -1;
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D695F8[v4])(&v14, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      v6 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v6)
        return WTF::fastFree(this, a2);
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v6)
    return WTF::fastFree(this, a2);
LABEL_11:
  v7 = v6 + 6;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
    WTF::fastFree(v11, v12);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDatabase(WebCore::IDBOpenRequestData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::openDatabase();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenDatabase(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D697C8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenDatabase(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D697C8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenDatabase(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didOpenDatabase();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didAbortTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D697F0;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didAbortTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D697F0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didAbortTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didAbortTransaction();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didCommitTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D69818;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCommitTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D69818;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCommitTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didCommitTransaction();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69840;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69840;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateObjectStore(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didCreateObjectStore();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69868;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69868;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteObjectStore(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didDeleteObjectStore();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69890;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69890;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameObjectStore(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didRenameObjectStore();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didClearObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D698B8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didClearObjectStore(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D698B8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didClearObjectStore(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didClearObjectStore();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D698E0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D698E0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCreateIndex(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didCreateIndex();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69908;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69908;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteIndex(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didDeleteIndex();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69930;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameIndex(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69930;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didRenameIndex(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didRenameIndex();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didPutOrAdd(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69958;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didPutOrAdd(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69958;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didPutOrAdd(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didPutOrAdd();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didGetRecord(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69980;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetRecord(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69980;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetRecord(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didGetRecord();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllRecords(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D699A8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllRecords(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D699A8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllRecords(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didGetAllRecords();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didGetCount(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D699D0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetCount(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D699D0;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetCount(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didGetCount();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteRecord(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D699F8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteRecord(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D699F8;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didDeleteRecord(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didDeleteRecord();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenCursor(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69A20;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenCursor(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69A20;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didOpenCursor(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didOpenCursor();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didIterateCursor(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69A48;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didIterateCursor(WebCore::IDBResultData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69A48;
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didIterateCursor(WebCore::IDBResultData const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didIterateCursor();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69A70;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69A70;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::abortTransaction(WebCore::IDBResourceIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::abortTransaction();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69A98;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69A98;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::commitTransaction(WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::commitTransaction();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didFinishHandlingVersionChangeTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69AC0;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didFinishHandlingVersionChangeTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69AC0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didFinishHandlingVersionChangeTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::didFinishHandlingVersionChangeTransaction();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69AE8;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 16), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69AE8;
  WebCore::IDBObjectStoreInfo::~IDBObjectStoreInfo((WebCore::IDBObjectStoreInfo *)(a1 + 16), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createObjectStore(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::createObjectStore();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D69B20;
  v3 = (WTF::StringImpl *)a1[16];
  a1[16] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D69B20;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteObjectStore(WebCore::IDBRequestData const&,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::deleteObjectStore();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::renameObjectStore(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D69B48;
  v3 = (WTF::StringImpl *)a1[17];
  a1[17] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::renameObjectStore(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D69B48;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::renameObjectStore(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::renameObjectStore();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::clearObjectStore(WebCore::IDBRequestData const&,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69B70;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::clearObjectStore(WebCore::IDBRequestData const&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69B70;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::clearObjectStore(WebCore::IDBRequestData const&,unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::clearObjectStore();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  char v12;

  *(_QWORD *)a1 = &off_1E9D69B98;
  v3 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69608[v3])(&v12, a1 + 152);
  *(_DWORD *)(a1 + 168) = -1;
  v4 = *(WTF::StringImpl **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      v5 = *(unsigned int **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (!v5)
        return a1;
      goto LABEL_9;
    }
    *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v5)
    return a1;
LABEL_9:
  v7 = v5 + 6;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v5 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
  WTF::fastFree(v10, v11);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  void *v12;
  char v13;

  *(_QWORD *)this = &off_1E9D69B98;
  v3 = *((unsigned int *)this + 42);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D69608[v3])(&v13, (char *)this + 152);
  *((_DWORD *)this + 42) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      v5 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v5)
        return WTF::fastFree(this, a2);
      goto LABEL_9;
    }
    *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v5)
    return WTF::fastFree(this, a2);
LABEL_9:
  v7 = v5 + 6;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return WTF::fastFree(this, a2);
  atomic_store(1u, v5 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
  WTF::fastFree(v10, v11);
  return WTF::fastFree(this, v12);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::createIndex(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::createIndex();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::deleteIndex(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D69BC0;
  v3 = (WTF::StringImpl *)a1[17];
  a1[17] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteIndex(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D69BC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteIndex(WebCore::IDBRequestData const&,unsigned long long,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::deleteIndex();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::renameIndex(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D69BE8;
  v3 = (WTF::StringImpl *)a1[18];
  a1[18] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::renameIndex(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D69BE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::renameIndex(WebCore::IDBRequestData const&,unsigned long long,unsigned long long,WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::renameIndex();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;
  char v11;

  *(_QWORD *)a1 = off_1E9D69C10;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 160), a2);
  v3 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v3])(&v11, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    return a1;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

{
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;
  void *v12;
  char v13;

  *(_QWORD *)a1 = off_1E9D69C10;
  WebCore::IDBValue::~IDBValue((WebCore::IDBValue *)(a1 + 160), a2);
  v4 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v4])(&v13, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v5 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v5)
    return WTF::fastFree((WTF *)a1, v3);
  v6 = v5 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return WTF::fastFree((WTF *)a1, v3);
  atomic_store(1u, v5 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
  WTF::fastFree(v10, v11);
  return WTF::fastFree((WTF *)a1, v12);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::putOrAdd(WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::putOrAdd();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN7WebCore10IDBKeyData7InvalidEN3WTF6VectorIS9_Lm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEENSB_6StringEdNS9_4DateENS8_20ThreadSafeDataBufferENS9_3MinENS9_3MaxEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSA_SF_SG_dSH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;
  char v11;
  char v12;

  *(_QWORD *)a1 = &off_1E9D69C80;
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v2])(&v11, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v3 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v3])(&v12, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    return a1;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E9D69C80;
  v3 = *((unsigned int *)this + 46);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v3])(&v12, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v4 = *((unsigned int *)this + 38);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v4])(&v13, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
      WTF::fastFree(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getRecord(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::getRecord();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;
  char v11;
  char v12;

  *(_QWORD *)a1 = &off_1E9D69CA8;
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v2])(&v11, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v3 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v3])(&v12, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    return a1;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E9D69CA8;
  v3 = *((unsigned int *)this + 46);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v3])(&v12, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v4 = *((unsigned int *)this + 38);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v4])(&v13, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
      WTF::fastFree(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllRecords(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::getAllRecords();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;
  char v11;
  char v12;

  *(_QWORD *)a1 = &off_1E9D69CD0;
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v2])(&v11, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v3 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v3])(&v12, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    return a1;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E9D69CD0;
  v3 = *((unsigned int *)this + 46);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v3])(&v12, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v4 = *((unsigned int *)this + 38);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v4])(&v13, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
      WTF::fastFree(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getCount(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::getCount();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;
  char v11;
  char v12;

  *(_QWORD *)a1 = &off_1E9D69CF8;
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v2])(&v11, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v3 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v3])(&v12, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    return a1;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E9D69CF8;
  v3 = *((unsigned int *)this + 46);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v3])(&v12, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v4 = *((unsigned int *)this + 38);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v4])(&v13, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
      WTF::fastFree(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::deleteRecord(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::deleteRecord();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;
  char v11;
  char v12;

  *(_QWORD *)a1 = &off_1E9D69D20;
  v2 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v2])(&v11, a1 + 216);
  *(_DWORD *)(a1 + 232) = -1;
  v3 = *(unsigned int *)(a1 + 200);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v3])(&v12, a1 + 184);
  *(_DWORD *)(a1 + 200) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    return a1;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E9D69D20;
  v3 = *((unsigned int *)this + 58);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v3])(&v12, (char *)this + 216);
  *((_DWORD *)this + 58) = -1;
  v4 = *((unsigned int *)this + 50);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v4])(&v13, (char *)this + 184);
  *((_DWORD *)this + 50) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
      WTF::fastFree(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openCursor(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::openCursor();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;
  char v11;
  char v12;

  *(_QWORD *)a1 = &off_1E9D69D48;
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v2])(&v11, a1 + 168);
  *(_DWORD *)(a1 + 184) = -1;
  v3 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D69618[v3])(&v12, a1 + 136);
  *(_DWORD *)(a1 + 152) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    return a1;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E9D69D48;
  v3 = *((unsigned int *)this + 46);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v3])(&v12, (char *)this + 168);
  *((_DWORD *)this + 46) = -1;
  v4 = *((unsigned int *)this + 38);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D69618[v4])(&v13, (char *)this + 136);
  *((_DWORD *)this + 38) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
      WTF::fastFree(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::iterateCursor(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::iterateCursor();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::establishTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = off_1E9D69D70;
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)(a1 + 4), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return a1;
  atomic_store(1u, v3 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::establishTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  void *v10;

  *a1 = off_1E9D69D70;
  WebCore::IDBTransactionInfo::~IDBTransactionInfo((WebCore::IDBTransactionInfo *)(a1 + 4), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    goto LABEL_5;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v8 = (WTF *)a1;
  }
  else
  {
LABEL_5:
    v8 = (WTF *)a1;
  }
  return WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::establishTransaction(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::establishTransaction();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::fireVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69D98;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::fireVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69D98;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::fireVersionChangeEvent(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBResourceIdentifier const&,unsigned long long)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::fireVersionChangeEvent();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didStartTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D69DC0;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didStartTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D69DC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didStartTransaction(WebCore::IDBResourceIdentifier const&,WebCore::IDBError const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didStartTransaction();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didCloseFromServer(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *a1 = &off_1E9D69DE8;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (v8)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCloseFromServer(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBError const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E9D69DE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v4)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_5;
LABEL_8:
  v6 = v4 + 6;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v4 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
    WTF::fastFree(v9, v10);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didCloseFromServer(WebCore::IDBServer::UniqueIDBDatabaseConnection &,WebCore::IDBError const&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didCloseFromServer();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::notifyOpenDBRequestBlocked(WebCore::IDBResourceIdentifier const&,unsigned long long,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69E10;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::notifyOpenDBRequestBlocked(WebCore::IDBResourceIdentifier const&,unsigned long long,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69E10;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::notifyOpenDBRequestBlocked(WebCore::IDBResourceIdentifier const&,unsigned long long,unsigned long long)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::notifyOpenDBRequestBlocked();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionPendingClose(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69E38;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionPendingClose(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69E38;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionPendingClose(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::databaseConnectionPendingClose();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionClosed(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69E60;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionClosed(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69E60;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::databaseConnectionClosed(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::databaseConnectionClosed();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::abortOpenAndUpgradeNeeded(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69E88;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::abortOpenAndUpgradeNeeded(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69E88;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::abortOpenAndUpgradeNeeded(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier> const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::abortOpenAndUpgradeNeeded();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::didFireVersionChangeEvent(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69EB0;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didFireVersionChangeEvent(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69EB0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didFireVersionChangeEvent(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::didFireVersionChangeEvent();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDBRequestCancelled(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  char v13;
  char v14;

  *(_QWORD *)a1 = &off_1E9D69ED8;
  v3 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D695F8[v3])(&v13, a1 + 88);
  *(_DWORD *)(a1 + 112) = -1;
  v4 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E9D695F8[v4])(&v14, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      v6 = *(unsigned int **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (!v6)
        return a1;
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v6)
    return a1;
LABEL_11:
  v8 = v6 + 6;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (v10)
    return a1;
  atomic_store(1u, v6 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
  WTF::fastFree(v11, v12);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDBRequestCancelled(WebCore::IDBOpenRequestData const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v11;
  void *v12;
  char v13;
  char v14;

  *(_QWORD *)this = &off_1E9D69ED8;
  v3 = *((unsigned int *)this + 28);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D695F8[v3])(&v13, (char *)this + 88);
  *((_DWORD *)this + 28) = -1;
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D695F8[v4])(&v14, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      v6 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v6)
        return WTF::fastFree(this, a2);
      goto LABEL_11;
    }
    *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v6)
    return WTF::fastFree(this, a2);
LABEL_11:
  v7 = v6 + 6;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v6);
    WTF::fastFree(v11, v12);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::openDBRequestCancelled(WebCore::IDBOpenRequestData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::openDBRequestCancelled();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;
  char v11;
  char v12;

  *(_QWORD *)a1 = &off_1E9D69F00;
  v2 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E9D695F8[v2])(&v11, a1 + 80);
  *(_DWORD *)(a1 + 104) = -1;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E9D695F8[v3])(&v12, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v4)
    return a1;
  v5 = v4 + 6;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return a1;
  atomic_store(1u, v4 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v4);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E9D69F00;
  v3 = *((unsigned int *)this + 26);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E9D695F8[v3])(&v12, (char *)this + 80);
  *((_DWORD *)this + 26) = -1;
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E9D695F8[v4])(&v13, (char *)this + 48);
  *((_DWORD *)this + 18) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 6;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v5);
      WTF::fastFree(v10, v11);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::getAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::getAllDatabaseNamesAndVersions();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v13;
  void *v14;

  *(_QWORD *)a1 = &off_1E9D69F28;
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)(a1 + 40);
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (!v8)
    return a1;
  v9 = v8 + 6;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (v11)
    return a1;
  atomic_store(1u, v8 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v8);
  WTF::fastFree(v13, v14);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  WTF *v13;
  void *v14;

  *(_QWORD *)this = &off_1E9D69F28;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v8)
    goto LABEL_14;
  v9 = v8 + 6;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v8 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v8);
    WTF::fastFree(v13, v14);
    v12 = this;
  }
  else
  {
LABEL_14:
    v12 = this;
  }
  return WTF::fastFree(v12, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::didGetAllDatabaseNamesAndVersions(WebCore::IDBResourceIdentifier const&,WTF::Vector<WebCore::IDBDatabaseNameAndVersion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call()
{
  return WebCore::IDBClient::IDBConnectionToServer::didGetAllDatabaseNamesAndVersions();
}

_QWORD *WTF::Detail::CallableWrapper<InProcessIDBServer::closeAndDeleteDatabasesModifiedSince(WTF::WallTime)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E9D69F50;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = v2 + 6;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v2 + 6);
  InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v2);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::closeAndDeleteDatabasesModifiedSince(WTF::WallTime)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E9D69F50;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 6;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 6);
    InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v3);
    WTF::fastFree(v8, v9);
    v7 = this;
  }
  else
  {
LABEL_5:
    v7 = this;
  }
  return WTF::fastFree(v7, a2);
}

uint64_t WTF::Detail::CallableWrapper<InProcessIDBServer::closeAndDeleteDatabasesModifiedSince(WTF::WallTime)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 28);
  if (__ldaxr((unsigned __int8 *)(v1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1 + 28);
LABEL_5:
  result = WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesModifiedSince();
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 28));
  }
  return result;
}

uint64_t LegacyHistoryItemClient::singleton(LegacyHistoryItemClient *this)
{
  uint64_t result;

    return LegacyHistoryItemClient::singleton(void)::client;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E9D69F78;
  LegacyHistoryItemClient::singleton(void)::client = result;
  return result;
}

uint64_t LegacyHistoryItemClient::historyItemChanged(LegacyHistoryItemClient *this, const WebCore::HistoryItem *a2)
{
  return WebThreadPostNotification();
}

uint64_t PopupMenuIOS::disconnectClient(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t SearchPopupMenuIOS::popupMenu(SearchPopupMenuIOS *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t SearchPopupMenuIOS::enabled(SearchPopupMenuIOS *this)
{
  return 0;
}

void SearchPopupMenuIOS::~SearchPopupMenuIOS(SearchPopupMenuIOS *this)
{
  _DWORD *v2;

  *(_QWORD *)this = off_1E9D69FE0;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

void SearchPopupMenuIOS::~SearchPopupMenuIOS(SearchPopupMenuIOS *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E9D69FE0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v4 = this;
      goto LABEL_5;
    }
    --v3[2];
  }
  v4 = this;
LABEL_5:
  WTF::fastFree(v4, a2);
}

void WebKit::StorageAreaImpl::~StorageAreaImpl(WebKit::StorageAreaImpl *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  StringImpl *v4;
  WebCore::StorageSyncManager *v5;
  unsigned int *v6;
  WTF *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;

  *(_QWORD *)this = off_1E9D6A020;
  *((_QWORD *)this + 8) = &unk_1E9D6A108;
  v2 = (WebKit::StorageAreaImpl *)((char *)this + 64);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (WebCore::StorageSyncManager *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v5)
  {
LABEL_6:
    v6 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v6)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    goto LABEL_6;
  }
  WebCore::StorageSyncManager::~StorageSyncManager(v5, v4);
  WTF::fastFree(v7, v8);
  v6 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v6)
    goto LABEL_11;
  do
  {
LABEL_9:
    v9 = __ldaxr(v6);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v6));
  if (!v10)
  {
    atomic_store(1u, v6);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E9D6A130;
    v20[1] = v6;
    v24 = v20;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
LABEL_11:
  v11 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v11)
    goto LABEL_14;
  if (*(_DWORD *)v11 == 1)
  {
    v15 = *((_QWORD *)v11 + 1);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 - 4);
      if ((_DWORD)v16)
      {
        v17 = (WTF::StringImpl **)*((_QWORD *)v11 + 1);
        while (1)
        {
          v18 = *v17;
          if (*v17 == (WTF::StringImpl *)-1)
            goto LABEL_22;
          v19 = v17[1];
          v17[1] = 0;
          if (!v19)
            goto LABEL_27;
          if (*(_DWORD *)v19 != 2)
            break;
          WTF::StringImpl::destroy(v19, v4);
          v18 = *v17;
          *v17 = 0;
          if (v18)
          {
LABEL_30:
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v4);
            else
              *(_DWORD *)v18 -= 2;
          }
LABEL_22:
          v17 += 2;
          if (!--v16)
            goto LABEL_32;
        }
        *(_DWORD *)v19 -= 2;
LABEL_27:
        *v17 = 0;
        if (v18)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_32:
      WTF::fastFree((WTF *)(v15 - 16), v4);
    }
    WTF::fastFree(v11, v4);
    v12 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v12)
      return;
    goto LABEL_15;
  }
  --*(_DWORD *)v11;
LABEL_14:
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v12)
    return;
  do
  {
LABEL_15:
    v13 = __ldaxr((unsigned int *)v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v12));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)v12);
    v21 = *(WTF::StringImpl **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v4);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = *(WTF::StringImpl **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v4);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = *(unsigned int *)(v12 + 32);
    if ((_DWORD)v23 != -1)
      ((void (*)(char *, uint64_t))off_1E9D6A098[v23])(&v25, v12 + 8);
    *(_DWORD *)(v12 + 32) = -1;
    WTF::fastFree((WTF *)v12, v4);
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::StorageAreaImpl::~StorageAreaImpl(this);
  WTF::fastFree(v1, v2);
}

void WebCore::Timer::~Timer(WebCore::Timer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &unk_1E9D6A108;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = &unk_1E9D6A108;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v3, v4);
}

WebCore::StorageSyncManager *WebKit::StorageAreaImpl::create@<X0>(char a1@<W0>, unsigned int *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  WebKit::StorageTracker *v12;
  WebCore::StorageSyncManager *result;
  WebCore::StorageSyncManager *v14;
  uint64_t v15;
  uint64_t v16;
  StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  WTF *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WebCore::StorageSyncManager *v28;
  _QWORD *v29;

  v8 = WTF::fastMalloc((WTF *)0x78);
  v9 = v8;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E9D6A020;
  *(_BYTE *)(v8 + 12) = a1;
  do
    v10 = __ldaxr(a2);
  while (__stlxr(v10 + 1, a2));
  *(_QWORD *)(v8 + 16) = a2;
  WebCore::StorageMap::StorageMap((WebCore::StorageMap *)(v8 + 24));
  *(_QWORD *)(v9 + 40) = 0;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(v9 + 48) = v11;
  *(_DWORD *)(v9 + 56) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v9 + 64));
  *(_QWORD *)(v9 + 64) = &unk_1E9D6A108;
  v12 = (WebKit::StorageTracker *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v12 = off_1E9D6A0B8;
  *((_QWORD *)v12 + 1) = WebKit::StorageAreaImpl::closeDatabaseTimerFired;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v9;
  *(_QWORD *)(v9 + 112) = v12;
  result = (WebCore::StorageSyncManager *)WebKit::StorageTracker::tracker(v12);
  *a4 = v9;
  v14 = *(WebCore::StorageSyncManager **)(v9 + 48);
  if (v14)
  {
    ++*(_DWORD *)v14;
    v27 = (_DWORD *)v9;
    v28 = v14;
    ++*(_DWORD *)(v9 + 8);
    WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)(*(_QWORD *)(v9 + 16) + 8));
    v15 = WTF::fastMalloc((WTF *)0xC0);
    v16 = WebKit::StorageAreaSync::StorageAreaSync(v15, (uint64_t *)&v28, (uint64_t *)&v27);
    v18 = *(unsigned int **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v16;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v24 = off_1E9D6A130;
        v24[1] = v18;
        v29 = v24;
        WTF::ensureOnMainThread();
        v25 = v29;
        v29 = 0;
        if (v25)
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
      }
    }
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v17);
        v21 = v27;
        v27 = 0;
        if (!v21)
          goto LABEL_15;
LABEL_13:
        if (v21[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
          result = v28;
          v28 = 0;
          if (!result)
            return result;
          goto LABEL_16;
        }
        --v21[2];
LABEL_15:
        result = v28;
        v28 = 0;
        if (!result)
          return result;
LABEL_16:
        if (*(_DWORD *)result == 1)
        {
          WebCore::StorageSyncManager::~StorageSyncManager(result, v17);
          return (WebCore::StorageSyncManager *)WTF::fastFree(v22, v23);
        }
        else
        {
          --*(_DWORD *)result;
        }
        return result;
      }
      *(_DWORD *)v26 -= 2;
    }
    v21 = v27;
    v27 = 0;
    if (!v21)
      goto LABEL_15;
    goto LABEL_13;
  }
  return result;
}

uint64_t WebKit::StorageAreaImpl::closeDatabaseTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v1 = *(_QWORD *)(this + 40);
  if (!v1)
    return this;
  v2 = this;
  if (*(_QWORD *)(v1 + 80))
  {
    v3 = (unsigned __int8 *)(v1 + 189);
    if (__ldaxr((unsigned __int8 *)(v1 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v1 + 189);
LABEL_7:
    while (!*(_BYTE *)(v1 + 191))
    {
      v8 = 0x7FF0000000000000;
      v9 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v1 + 190, (unsigned __int8 *)(v1 + 189), (WTF::TimeWithDynamicClockType *)&v8);
    }
    this = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 80) = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        v6 = __ldxr(v3);
        if (v6 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v3))
            goto LABEL_18;
          goto LABEL_17;
        }
LABEL_16:
        __clrex();
LABEL_17:
        this = WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 189));
        goto LABEL_18;
      }
      --*(_DWORD *)(this + 8);
    }
    v5 = __ldxr(v3);
    if (v5 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
LABEL_18:
  v7 = *(_QWORD *)(v2 + 40);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 104))
    {
      *(_BYTE *)(v7 + 188) = 1;
      if ((*(_QWORD *)(v7 + 40) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v7 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        return WebCore::TimerBase::start();
      }
    }
  }
  return this;
}

uint64_t WebKit::StorageAreaImpl::storageType(WebKit::StorageAreaImpl *this)
{
  return *((unsigned __int8 *)this + 12);
}

uint64_t WebKit::StorageAreaImpl::length(WebKit::StorageAreaImpl *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v9;
  int v10;

  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_QWORD *)(v2 + 80))
  {
    v3 = (unsigned __int8 *)(v2 + 189);
    if (__ldaxr((unsigned __int8 *)(v2 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v2 + 189);
LABEL_7:
    while (!*(_BYTE *)(v2 + 191))
    {
      v9 = 0x7FF0000000000000;
      v10 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v2 + 190, (unsigned __int8 *)(v2 + 189), (WTF::TimeWithDynamicClockType *)&v9);
    }
    v5 = *(_DWORD **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v5)
    {
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        v7 = __ldxr(v3);
        if (v7 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v3))
            return WebCore::StorageMap::length((WebKit::StorageAreaImpl *)((char *)this + 24));
          goto LABEL_17;
        }
LABEL_16:
        __clrex();
LABEL_17:
        WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 189));
        return WebCore::StorageMap::length((WebKit::StorageAreaImpl *)((char *)this + 24));
      }
      --v5[2];
    }
    v6 = __ldxr(v3);
    if (v6 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
  return WebCore::StorageMap::length((WebKit::StorageAreaImpl *)((char *)this + 24));
}

uint64_t WebKit::StorageAreaImpl::key(WebKit::StorageAreaImpl *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v9;
  int v10;

  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_QWORD *)(v2 + 80))
  {
    v3 = (unsigned __int8 *)(v2 + 189);
    if (__ldaxr((unsigned __int8 *)(v2 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v2 + 189);
LABEL_7:
    while (!*(_BYTE *)(v2 + 191))
    {
      v9 = 0x7FF0000000000000;
      v10 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v2 + 190, (unsigned __int8 *)(v2 + 189), (WTF::TimeWithDynamicClockType *)&v9);
    }
    v5 = *(_DWORD **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v5)
    {
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        v7 = __ldxr(v3);
        if (v7 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v3))
            return WebCore::StorageMap::key((WebKit::StorageAreaImpl *)((char *)this + 24));
          goto LABEL_17;
        }
LABEL_16:
        __clrex();
LABEL_17:
        WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 189));
        return WebCore::StorageMap::key((WebKit::StorageAreaImpl *)((char *)this + 24));
      }
      --v5[2];
    }
    v6 = __ldxr(v3);
    if (v6 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
  return WebCore::StorageMap::key((WebKit::StorageAreaImpl *)((char *)this + 24));
}

uint64_t WebKit::StorageAreaImpl::item(WebKit::StorageAreaImpl *this, const WTF::String *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v11;
  int v12;

  v4 = *((_QWORD *)this + 5);
  if (v4 && *(_QWORD *)(v4 + 80))
  {
    v5 = (unsigned __int8 *)(v4 + 189);
    if (__ldaxr((unsigned __int8 *)(v4 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v4 + 189);
LABEL_7:
    while (!*(_BYTE *)(v4 + 191))
    {
      v11 = 0x7FF0000000000000;
      v12 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (unsigned __int8 *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v11);
    }
    v7 = *(_DWORD **)(v4 + 80);
    *(_QWORD *)(v4 + 80) = 0;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        v9 = __ldxr(v5);
        if (v9 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v5))
            return WebCore::StorageMap::getItem((WebKit::StorageAreaImpl *)((char *)this + 24), a2);
          goto LABEL_17;
        }
LABEL_16:
        __clrex();
LABEL_17:
        WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
        return WebCore::StorageMap::getItem((WebKit::StorageAreaImpl *)((char *)this + 24), a2);
      }
      --v7[2];
    }
    v8 = __ldxr(v5);
    if (v8 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
  return WebCore::StorageMap::getItem((WebKit::StorageAreaImpl *)((char *)this + 24), a2);
}

WTF::StringImpl *WebKit::StorageAreaImpl::setItem(WebKit::StorageAreaImpl *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, BOOL *a5)
{
  uint64_t v10;
  unsigned __int8 *v11;
  _DWORD *v13;
  int v14;
  int v15;
  StringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;

  v10 = *((_QWORD *)this + 5);
  if (v10 && *(_QWORD *)(v10 + 80))
  {
    v11 = (unsigned __int8 *)(v10 + 189);
    if (__ldaxr((unsigned __int8 *)(v10 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v10 + 189);
LABEL_7:
    while (!*(_BYTE *)(v10 + 191))
    {
      v21 = 0x7FF0000000000000;
      v22 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v10 + 190, (unsigned __int8 *)(v10 + 189), (WTF::TimeWithDynamicClockType *)&v21);
    }
    v13 = *(_DWORD **)(v10 + 80);
    *(_QWORD *)(v10 + 80) = 0;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        v15 = __ldxr(v11);
        if (v15 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v11))
            goto LABEL_18;
          goto LABEL_17;
        }
LABEL_16:
        __clrex();
LABEL_17:
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 189));
        goto LABEL_18;
      }
      --v13[2];
    }
    v14 = __ldxr(v11);
    if (v14 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
LABEL_18:
  v20 = 0;
  WebCore::StorageMap::setItem((WebKit::StorageAreaImpl *)((char *)this + 24), a3, a4, (WTF::String *)&v20, a5);
  if (!*a5 && (WTF::equal(v20, *(const WTF::StringImpl **)a4, v17) & 1) == 0)
  {
    v18 = *((_QWORD *)this + 5);
    if (v18)
    {
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>((uint64_t *)(v18 + 64), (StringImpl *)a3, a4, (uint64_t)&v21);
      if ((*(_QWORD *)(v18 + 40) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v18 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        WebCore::TimerBase::start();
      }
    }
    WebKit::StorageAreaImpl::dispatchStorageEvent((unsigned __int8 *)this, a3, (const WTF::String *)&v20, a4, a2);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int8 *WebKit::StorageAreaImpl::dispatchStorageEvent(unsigned __int8 *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, WebCore::LocalFrame *a5)
{
  uint64_t v5;
  WebCore::Page *v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v5 = *((_QWORD *)a5 + 3);
  if (v5)
  {
    v6 = *(WebCore::Page **)(v5 + 8);
    if (v6)
    {
      if (this[12] - 1 > 1)
      {
        v9 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v9 = off_1E9D6A0E0;
        *((_QWORD *)v9 + 1) = a5;
        v11 = v9;
        WebCore::StorageEventDispatcher::dispatchSessionStorageEvents();
        this = v11;
        if (!v11)
          return this;
      }
      else
      {
        WebCore::Page::group(v6);
        v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v8 = off_1E9D6A0E0;
        *((_QWORD *)v8 + 1) = a5;
        v10 = v8;
        WebCore::StorageEventDispatcher::dispatchLocalStorageEvents();
        this = v10;
        if (!v10)
          return this;
      }
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::StorageAreaImpl::removeItem(WebKit::StorageAreaImpl *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  _DWORD *v9;
  int v10;
  int v11;
  WTF::StringImpl *result;
  uint64_t v13;
  StringImpl *v14;
  WTF::StringImpl *v15;
  StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;

  v6 = *((_QWORD *)this + 5);
  if (v6 && *(_QWORD *)(v6 + 80))
  {
    v7 = (unsigned __int8 *)(v6 + 189);
    if (__ldaxr((unsigned __int8 *)(v6 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v6 + 189);
LABEL_7:
    while (!*(_BYTE *)(v6 + 191))
    {
      v20 = (WTF::StringImpl *)0x7FF0000000000000;
      v21 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v6 + 190, (unsigned __int8 *)(v6 + 189), (WTF::TimeWithDynamicClockType *)&v20);
    }
    v9 = *(_DWORD **)(v6 + 80);
    *(_QWORD *)(v6 + 80) = 0;
    if (v9)
    {
      if (v9[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        v11 = __ldxr(v7);
        if (v11 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v7))
            goto LABEL_18;
LABEL_17:
          WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 189));
          goto LABEL_18;
        }
LABEL_16:
        __clrex();
        goto LABEL_17;
      }
      --v9[2];
    }
    v10 = __ldxr(v7);
    if (v10 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
LABEL_18:
  v19 = 0;
  result = (WTF::StringImpl *)WebCore::StorageMap::removeItem((WebKit::StorageAreaImpl *)((char *)this + 24), a3, (WTF::String *)&v19);
  if (!v19)
    return result;
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    v18 = 0;
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>((uint64_t *)(v13 + 64), (StringImpl *)a3, (const WTF::StringImpl *)&v18, (uint64_t)&v20);
    if ((*(_QWORD *)(v13 + 40) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(v13 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      WebCore::TimerBase::start();
    }
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v20 = 0;
  WebKit::StorageAreaImpl::dispatchStorageEvent((unsigned __int8 *)this, a3, (const WTF::String *)&v19, (const WTF::String *)&v20, a2);
  v17 = v20;
  v20 = 0;
  if (!v17)
  {
LABEL_30:
    result = v19;
    v19 = 0;
    if (!result)
      return result;
    goto LABEL_33;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v17, v16);
  result = v19;
  v19 = 0;
  if (!result)
    return result;
LABEL_33:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
  *(_DWORD *)result -= 2;
  return result;
}

WTF::StringImpl *WebKit::StorageAreaImpl::clear(WebKit::StorageAreaImpl *this, WebCore::LocalFrame *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v7;
  int v8;
  int v9;
  WTF::StringImpl *result;
  StringImpl *v11;
  uint64_t v12;
  StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;

  v4 = *((_QWORD *)this + 5);
  if (v4 && *(_QWORD *)(v4 + 80))
  {
    v5 = (unsigned __int8 *)(v4 + 189);
    if (__ldaxr((unsigned __int8 *)(v4 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v4 + 189);
LABEL_7:
    while (!*(_BYTE *)(v4 + 191))
    {
      v18 = (WTF::StringImpl *)0x7FF0000000000000;
      v19 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (unsigned __int8 *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v18);
    }
    v7 = *(_DWORD **)(v4 + 80);
    *(_QWORD *)(v4 + 80) = 0;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        v9 = __ldxr(v5);
        if (v9 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v5))
            goto LABEL_18;
LABEL_17:
          WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
          goto LABEL_18;
        }
LABEL_16:
        __clrex();
        goto LABEL_17;
      }
      --v7[2];
    }
    v8 = __ldxr(v5);
    if (v8 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
LABEL_18:
  result = (WTF::StringImpl *)WebCore::StorageMap::length((WebKit::StorageAreaImpl *)((char *)this + 24));
  if (!(_DWORD)result)
    return result;
  WebCore::StorageMap::clear((WebKit::StorageAreaImpl *)((char *)this + 24));
  v12 = *((_QWORD *)this + 5);
  if (v12)
    WebKit::StorageAreaSync::scheduleClear(v12, v11);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  WebKit::StorageAreaImpl::dispatchStorageEvent((unsigned __int8 *)this, (const WTF::String *)&v18, (const WTF::String *)&v17, (const WTF::String *)&v16, a2);
  v14 = v16;
  v16 = 0;
  if (!v14)
  {
LABEL_24:
    v15 = v17;
    v17 = 0;
    if (!v15)
      goto LABEL_29;
    goto LABEL_27;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v14, v13);
  v15 = v17;
  v17 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_27:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v13);
    result = v18;
    v18 = 0;
    if (!result)
      return result;
    goto LABEL_32;
  }
  *(_DWORD *)v15 -= 2;
LABEL_29:
  result = v18;
  v18 = 0;
  if (!result)
    return result;
LABEL_32:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WebKit::StorageAreaImpl::contains(WebKit::StorageAreaImpl *this, const WTF::String *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v11;
  int v12;

  v4 = *((_QWORD *)this + 5);
  if (v4 && *(_QWORD *)(v4 + 80))
  {
    v5 = (unsigned __int8 *)(v4 + 189);
    if (__ldaxr((unsigned __int8 *)(v4 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v4 + 189);
LABEL_7:
    while (!*(_BYTE *)(v4 + 191))
    {
      v11 = 0x7FF0000000000000;
      v12 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (unsigned __int8 *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v11);
    }
    v7 = *(_DWORD **)(v4 + 80);
    *(_QWORD *)(v4 + 80) = 0;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        v9 = __ldxr(v5);
        if (v9 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v5))
            return WebCore::StorageMap::contains((WebKit::StorageAreaImpl *)((char *)this + 24), a2);
          goto LABEL_17;
        }
LABEL_16:
        __clrex();
LABEL_17:
        WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
        return WebCore::StorageMap::contains((WebKit::StorageAreaImpl *)((char *)this + 24), a2);
      }
      --v7[2];
    }
    v8 = __ldxr(v5);
    if (v8 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
  return WebCore::StorageMap::contains((WebKit::StorageAreaImpl *)((char *)this + 24), a2);
}

uint64_t WebKit::StorageAreaImpl::clearForOriginDeletion(WebKit::StorageAreaImpl *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _DWORD *v5;
  int v6;
  int v7;
  StringImpl *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_QWORD *)(v2 + 80))
  {
    v3 = (unsigned __int8 *)(v2 + 189);
    if (__ldaxr((unsigned __int8 *)(v2 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v2 + 189);
LABEL_7:
    while (!*(_BYTE *)(v2 + 191))
    {
      v11 = 0x7FF0000000000000;
      v12 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v2 + 190, (unsigned __int8 *)(v2 + 189), (WTF::TimeWithDynamicClockType *)&v11);
    }
    v5 = *(_DWORD **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v5)
    {
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        v7 = __ldxr(v3);
        if (v7 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v3))
            goto LABEL_18;
          goto LABEL_17;
        }
LABEL_16:
        __clrex();
LABEL_17:
        WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 189));
        goto LABEL_18;
      }
      --v5[2];
    }
    v6 = __ldxr(v3);
    if (v6 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
LABEL_18:
  WebCore::StorageMap::clear((WebKit::StorageAreaImpl *)((char *)this + 24));
  result = *((_QWORD *)this + 5);
  if (result)
  {
    result = WebKit::StorageAreaSync::scheduleClear(result, v8);
    v10 = *((_QWORD *)this + 5);
    if (*(_QWORD *)(v10 + 104))
    {
      *(_BYTE *)(v10 + 188) = 1;
      if ((*(_QWORD *)(v10 + 40) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v10 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        return WebCore::TimerBase::start();
      }
    }
  }
  return result;
}

uint64_t WebKit::StorageAreaImpl::sync(uint64_t this, StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;

  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = this;
    if (!*(_QWORD *)(v3 + 80))
      goto LABEL_18;
    v5 = (unsigned __int8 *)(v3 + 189);
    if (__ldaxr((unsigned __int8 *)(v3 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v3 + 189);
LABEL_7:
    while (!*(_BYTE *)(v3 + 191))
    {
      v10 = 0x7FF0000000000000;
      v11 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v3 + 190, (unsigned __int8 *)(v3 + 189), (WTF::TimeWithDynamicClockType *)&v10);
    }
    v7 = *(_DWORD **)(v3 + 80);
    *(_QWORD *)(v3 + 80) = 0;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        v9 = __ldxr(v5);
        if (v9 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v5))
          {
LABEL_18:
            this = *(_QWORD *)(v4 + 40);
            if (this)
              return WebKit::StorageAreaSync::syncTimerFired(this, a2, a3);
            return this;
          }
LABEL_17:
          WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 189));
          goto LABEL_18;
        }
LABEL_16:
        __clrex();
        goto LABEL_17;
      }
      --v7[2];
    }
    v8 = __ldxr(v5);
    if (v8 == 1)
      goto LABEL_13;
    goto LABEL_16;
  }
  return this;
}

uint64_t WebKit::StorageAreaImpl::memoryBytesUsedByCache(WebKit::StorageAreaImpl *this)
{
  return 0;
}

uint64_t WebKit::StorageAreaImpl::incrementAccessCount(uint64_t this)
{
  ++*(_DWORD *)(this + 56);
  if ((*(_QWORD *)(this + 96) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(this + 96) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 64));
  }
  return this;
}

uint64_t WebKit::StorageAreaImpl::decrementAccessCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 56) - 1;
  *(_DWORD *)(this + 56) = v1;
  if (!v1)
  {
    if ((*(_QWORD *)(this + 96) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(this + 96) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 64));
    }
    WebKit::StorageTracker::tracker((WebKit::StorageTracker *)this);
    return WebCore::TimerBase::start();
  }
  return this;
}

uint64_t WebKit::StorageAreaImpl::closeDatabaseIfIdle(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((*(_QWORD *)(this + 96) & 0xFFFFFFFFFFFFLL) == 0)
    return this;
  if (*(double *)((*(_QWORD *)(this + 96) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    return this;
  v1 = this;
  this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 64));
  v2 = *(_QWORD *)(v1 + 40);
  if (!v2)
    return this;
  if (*(_QWORD *)(v2 + 80))
  {
    v3 = (unsigned __int8 *)(v2 + 189);
    if (__ldaxr((unsigned __int8 *)(v2 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_9;
    }
    MEMORY[0x1D82A3914](v2 + 189);
LABEL_9:
    while (!*(_BYTE *)(v2 + 191))
    {
      v8 = 0x7FF0000000000000;
      v9 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v2 + 190, (unsigned __int8 *)(v2 + 189), (WTF::TimeWithDynamicClockType *)&v8);
    }
    this = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        v6 = __ldxr(v3);
        if (v6 == 1)
        {
LABEL_15:
          if (!__stlxr(0, v3))
            goto LABEL_20;
          goto LABEL_19;
        }
LABEL_18:
        __clrex();
LABEL_19:
        this = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 189));
        goto LABEL_20;
      }
      --*(_DWORD *)(this + 8);
    }
    v5 = __ldxr(v3);
    if (v5 == 1)
      goto LABEL_15;
    goto LABEL_18;
  }
LABEL_20:
  v7 = *(_QWORD *)(v1 + 40);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 104))
    {
      *(_BYTE *)(v7 + 188) = 1;
      if ((*(_QWORD *)(v7 + 40) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v7 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        return WebCore::TimerBase::start();
      }
    }
  }
  return this;
}

WebCore::StorageSyncManager *WebKit::StorageAreaImpl::sessionChanged(WebKit::StorageAreaImpl *this, int a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v7;
  int v8;
  StringImpl *v9;
  const WTF::StringImpl *v10;
  WebCore::StorageSyncManager *result;
  WebCore::StorageSyncManager *v12;
  uint64_t v13;
  uint64_t v14;
  StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WebKit::StorageAreaImpl *v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  WTF *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebKit::StorageAreaImpl *v30;
  WebCore::StorageSyncManager *v31;
  uint64_t v32;
  int v33;

  v4 = *((_QWORD *)this + 5);
  if (v4 && *(_QWORD *)(v4 + 80))
  {
    v5 = (unsigned __int8 *)(v4 + 189);
    if (__ldaxr((unsigned __int8 *)(v4 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_7;
    }
    MEMORY[0x1D82A3914](v4 + 189);
LABEL_7:
    while (!*(_BYTE *)(v4 + 191))
    {
      v32 = 0x7FF0000000000000;
      v33 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 190, (unsigned __int8 *)(v4 + 189), (WTF::TimeWithDynamicClockType *)&v32);
    }
    v7 = *(_DWORD **)(v4 + 80);
    *(_QWORD *)(v4 + 80) = 0;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        v20 = __ldxr(v5);
        if (v20 == 1)
        {
LABEL_13:
          if (!__stlxr(0, v5))
            goto LABEL_14;
LABEL_28:
          WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 189));
          WebCore::StorageMap::clear((WebKit::StorageAreaImpl *)((char *)this + 24));
          result = (WebCore::StorageSyncManager *)*((_QWORD *)this + 5);
          if (a2)
            goto LABEL_15;
          goto LABEL_29;
        }
LABEL_27:
        __clrex();
        goto LABEL_28;
      }
      --v7[2];
    }
    v8 = __ldxr(v5);
    if (v8 == 1)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_14:
  WebCore::StorageMap::clear((WebKit::StorageAreaImpl *)((char *)this + 24));
  result = (WebCore::StorageSyncManager *)*((_QWORD *)this + 5);
  if (a2)
  {
LABEL_15:
    if (result)
      return result;
    v12 = (WebCore::StorageSyncManager *)*((_QWORD *)this + 6);
    if (!v12)
      return result;
    ++*(_DWORD *)v12;
    v30 = this;
    v31 = v12;
    ++*((_DWORD *)this + 2);
    WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)(*((_QWORD *)this + 2) + 8));
    v13 = WTF::fastMalloc((WTF *)0xC0);
    v14 = WebKit::StorageAreaSync::StorageAreaSync(v13, (uint64_t *)&v31, (uint64_t *)&v30);
    v16 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v14;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v27 = off_1E9D6A130;
        v27[1] = v16;
        v32 = (uint64_t)v27;
        WTF::ensureOnMainThread();
        v28 = v32;
        v32 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
    }
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v15);
        v19 = v30;
        v30 = 0;
        if (!v19)
          goto LABEL_39;
LABEL_36:
        if (*((_DWORD *)v19 + 2) == 1)
          (*(void (**)(WebKit::StorageAreaImpl *))(*(_QWORD *)v19 + 8))(v19);
        else
          --*((_DWORD *)v19 + 2);
LABEL_39:
        result = v31;
        v31 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::StorageSyncManager::~StorageSyncManager(result, v15);
            return (WebCore::StorageSyncManager *)WTF::fastFree(v25, v26);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        return result;
      }
      *(_DWORD *)v29 -= 2;
    }
    v19 = v30;
    v30 = 0;
    if (!v19)
      goto LABEL_39;
    goto LABEL_36;
  }
LABEL_29:
  if (result)
  {
    result = (WebCore::StorageSyncManager *)WebKit::StorageAreaSync::scheduleFinalSync(result, v9, v10);
    v21 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v24 = off_1E9D6A130;
        v24[1] = v21;
        v32 = (uint64_t)v24;
        WTF::ensureOnMainThread();
        result = (WebCore::StorageSyncManager *)v32;
        v32 = 0;
        if (result)
          return (WebCore::StorageSyncManager *)(*(uint64_t (**)(WebCore::StorageSyncManager *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::Timer::fired(WebCore::Timer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
}

WebKit::StorageAreaSync *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::StorageAreaSync,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1, StringImpl *a2)
{
  WebKit::StorageAreaSync *result;
  WTF *v3;
  void *v4;

  result = *(WebKit::StorageAreaSync **)(a1 + 8);
  if (result)
  {
    WebKit::StorageAreaSync::~StorageAreaSync(result, a2);
    return (WebKit::StorageAreaSync *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::StorageAreaImpl::*&)(void),WebKit::StorageAreaImpl*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

BOOL WTF::Detail::CallableWrapper<WebKit::StorageAreaImpl::dispatchStorageEvent(WTF::String const&,WTF::String const&,WTF::String const&,WebCore::LocalFrame &)::$_0,BOOL,WebCore::Storage &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::LocalDOMWindowProperty::frame((WebCore::LocalDOMWindowProperty *)(a2 + 16)) == *(_QWORD *)(a1 + 8);
}

void WebKit::StorageAreaSync::~StorageAreaSync(WebKit::StorageAreaSync *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  StringImpl *v9;
  WebCore::StorageSyncManager *v10;
  _DWORD *v11;
  WTF *v12;
  void *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 22);
      while (1)
      {
        v6 = *v5;
        if (*v5 == (WTF::StringImpl *)-1)
          goto LABEL_5;
        v7 = v5[1];
        v5[1] = 0;
        if (!v7)
          goto LABEL_10;
        if (*(_DWORD *)v7 != 2)
          break;
        WTF::StringImpl::destroy(v7, a2);
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
LABEL_13:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
LABEL_5:
        v5 += 2;
        if (!--v4)
          goto LABEL_15;
      }
      *(_DWORD *)v7 -= 2;
LABEL_10:
      *v5 = 0;
      if (v6)
        goto LABEL_13;
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, a2);
      WebCore::SQLiteDatabase::~SQLiteDatabase((WebKit::StorageAreaSync *)((char *)this + 96));
      v10 = (WebCore::StorageSyncManager *)*((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = 0;
      if (!v10)
        goto LABEL_24;
      goto LABEL_22;
    }
    *(_DWORD *)v8 -= 2;
  }
  WebCore::SQLiteDatabase::~SQLiteDatabase((WebKit::StorageAreaSync *)((char *)this + 96));
  v10 = (WebCore::StorageSyncManager *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (!v10)
  {
LABEL_24:
    v11 = (_DWORD *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (!v11)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_22:
  if (*(_DWORD *)v10 != 1)
  {
    --*(_DWORD *)v10;
    goto LABEL_24;
  }
  WebCore::StorageSyncManager::~StorageSyncManager(v10, v9);
  WTF::fastFree(v12, v13);
  v11 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v11)
    goto LABEL_29;
LABEL_27:
  if (v11[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    v14 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    if (!v14)
      goto LABEL_46;
    goto LABEL_32;
  }
  --v11[2];
LABEL_29:
  v14 = (WTF::StringImpl **)*((_QWORD *)this + 8);
  if (v14)
  {
LABEL_32:
    v15 = *((unsigned int *)v14 - 1);
    if (!(_DWORD)v15)
    {
LABEL_45:
      WTF::fastFree((WTF *)(v14 - 2), v9);
      goto LABEL_46;
    }
    v16 = v14;
    while (1)
    {
      v17 = *v16;
      if (*v16 == (WTF::StringImpl *)-1)
        goto LABEL_35;
      v18 = v16[1];
      v16[1] = 0;
      if (!v18)
        goto LABEL_40;
      if (*(_DWORD *)v18 != 2)
        break;
      WTF::StringImpl::destroy(v18, v9);
      v17 = *v16;
      *v16 = 0;
      if (v17)
      {
LABEL_43:
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v9);
        else
          *(_DWORD *)v17 -= 2;
      }
LABEL_35:
      v16 += 2;
      if (!--v15)
        goto LABEL_45;
    }
    *(_DWORD *)v18 -= 2;
LABEL_40:
    *v16 = 0;
    if (v17)
      goto LABEL_43;
    goto LABEL_35;
  }
LABEL_46:
  *((_QWORD *)this + 1) = &unk_1E9D6A108;
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  WebCore::TimerBase::~TimerBase((WebKit::StorageAreaSync *)((char *)this + 8));
}

uint64_t WebKit::StorageAreaSync::scheduleFinalSync(WebKit::StorageAreaSync *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t (**v15)();
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;

  if (!*((_QWORD *)this + 10))
  {
    *((_QWORD *)this + 10) = 0;
    v6 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL;
    if (!v6)
      goto LABEL_25;
    goto LABEL_23;
  }
  v4 = (unsigned __int8 *)this + 189;
  if (__ldaxr((unsigned __int8 *)this + 189))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x1D82A3914]((char *)this + 189);
LABEL_8:
  while (!*((_BYTE *)this + 191))
  {
    v20 = 0x7FF0000000000000;
    v21 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)this + 190, (unsigned __int8 *)this + 189, (WTF::TimeWithDynamicClockType *)&v20);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v7)
  {
LABEL_13:
    v8 = __ldxr(v4);
    if (v8 == 1)
      goto LABEL_14;
    goto LABEL_17;
  }
  if (v7[2] != 1)
  {
    --v7[2];
    goto LABEL_13;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  v9 = __ldxr(v4);
  if (v9 == 1)
  {
LABEL_14:
    if (!__stlxr(0, v4))
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_17:
  __clrex();
LABEL_18:
  WTF::Lock::unlockSlow((WebKit::StorageAreaSync *)((char *)this + 189));
LABEL_19:
  v10 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v10)
    goto LABEL_22;
  if (v10[2] != 1)
  {
    --v10[2];
LABEL_22:
    v6 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL;
    if (!v6)
      goto LABEL_25;
    goto LABEL_23;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  v6 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL;
  if (!v6)
    goto LABEL_25;
LABEL_23:
  if (*(double *)(v6 + 8) != 0.0)
    WebCore::TimerBase::stopSlowCase((WebKit::StorageAreaSync *)((char *)this + 8));
LABEL_25:
  *((_BYTE *)this + 73) = 1;
  WebKit::StorageAreaSync::syncTimerFired((uint64_t)this, a2, a3);
  do
    v11 = __ldaxr((unsigned int *)this);
  while (__stlxr(v11 + 1, (unsigned int *)this));
  v12 = *((_QWORD *)this + 11);
  do
    v13 = __ldaxr((unsigned int *)this);
  while (__stlxr(v13 + 1, (unsigned int *)this));
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v15 = &off_1E9D6A1B8;
  *v14 = &off_1E9D6A1B8;
  v14[1] = this;
  v20 = (uint64_t)v14;
  if (*(_QWORD *)(v12 + 8))
  {
    WebCore::StorageThread::dispatch(*(_QWORD *)(v12 + 8), &v20);
    result = v20;
    if (!v20)
      goto LABEL_33;
    v15 = *(uint64_t (***)())v20;
  }
  result = v15[1]();
  do
  {
LABEL_33:
    v17 = __ldaxr((unsigned int *)this);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)this));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)this);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E9D6A130;
    v19[1] = this;
    v20 = (uint64_t)v19;
    WTF::ensureOnMainThread();
    result = v20;
    v20 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::StorageAreaSync::syncTimerFired(uint64_t this, StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl **v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t (**v49)();
  unsigned int v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF::StringImpl **j;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  uint64_t v58[3];
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 168);
  if (__ldaxr((unsigned __int8 *)(this + 168)))
  {
    __clrex();
LABEL_4:
    this = MEMORY[0x1D82A3914](this + 168);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  if (*(_BYTE *)(v3 + 186) && !*(_BYTE *)(v3 + 73))
  {
    this = WebCore::TimerBase::start();
    v18 = 0;
    v19 = 0;
    goto LABEL_125;
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v6 = *(WTF::StringImpl ***)(v3 + 176);
    if (v6)
    {
      *(_QWORD *)(v3 + 176) = 0;
      v7 = *((unsigned int *)v6 - 1);
      if ((_DWORD)v7)
      {
        v8 = v6;
        while (1)
        {
          v9 = *v8;
          if (*v8 == (WTF::StringImpl *)-1)
            goto LABEL_12;
          v10 = v8[1];
          v8[1] = 0;
          if (!v10)
            goto LABEL_17;
          if (*(_DWORD *)v10 != 2)
            break;
          WTF::StringImpl::destroy(v10, a2);
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
LABEL_20:
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
LABEL_12:
          v8 += 2;
          if (!--v7)
            goto LABEL_22;
        }
        *(_DWORD *)v10 -= 2;
LABEL_17:
        *v8 = 0;
        if (v9)
          goto LABEL_20;
        goto LABEL_12;
      }
LABEL_22:
      this = WTF::fastFree((WTF *)(v6 - 2), a2);
    }
    *(_BYTE *)(v3 + 184) = 1;
    *(_BYTE *)(v3 + 72) = 0;
  }
  v12 = (uint64_t *)(v3 + 64);
  v11 = *(_QWORD *)(v3 + 64);
  if (v11)
  {
    v13 = *(unsigned int *)(v11 - 4);
    v14 = (_QWORD *)(v11 + 16 * v13);
    if (!*(_DWORD *)(v11 - 12))
    {
      v15 = (_QWORD *)(v11 + 16 * v13);
      v14 = v15;
      goto LABEL_33;
    }
    v15 = *(_QWORD **)(v3 + 64);
    if ((_DWORD)v13)
    {
      v16 = 16 * v13;
      v15 = *(_QWORD **)(v3 + 64);
      do
      {
        if ((unint64_t)(*v15 + 1) > 1)
          goto LABEL_32;
        v15 += 2;
        v16 -= 16;
      }
      while (v16);
      v15 = v14;
LABEL_33:
      v17 = (_QWORD *)(v11 + 16 * *(unsigned int *)(v11 - 4));
      if (v17 == v15)
      {
LABEL_57:
        v19 = 0;
        v18 = 1;
        if (!*(_BYTE *)(v3 + 185))
          goto LABEL_115;
        goto LABEL_125;
      }
      goto LABEL_38;
    }
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
LABEL_32:
  if (v11)
    goto LABEL_33;
  v17 = 0;
  if (!v15)
    goto LABEL_57;
LABEL_38:
  v20 = 0;
  v21 = (WTF::StringImpl ***)(v3 + 176);
  while (v20 < 0x64 || *(_BYTE *)(v3 + 73))
  {
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::String>((uint64_t)v58, (uint64_t *)(v3 + 176), &v60, &v59);
    v22 = v59;
    v59 = 0;
    if (!v22)
      goto LABEL_45;
    if (*(_DWORD *)v22 != 2)
    {
      *(_DWORD *)v22 -= 2;
LABEL_45:
      this = (uint64_t)v60;
      v60 = 0;
      if (!this)
        goto LABEL_50;
      goto LABEL_48;
    }
    WTF::StringImpl::destroy(v22, a2);
    this = (uint64_t)v60;
    v60 = 0;
    if (!this)
      goto LABEL_50;
LABEL_48:
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
LABEL_50:
      v23 = v15 + 2;
      v15 = v14;
      if (v23 != v14)
        goto LABEL_53;
      goto LABEL_39;
    }
    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    v23 = v15 + 2;
    v15 = v14;
    if (v23 != v14)
    {
LABEL_53:
      v15 = v23;
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        v15 += 2;
        if (v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
LABEL_39:
    ++v20;
    if (v15 == v17)
      goto LABEL_57;
  }
  v24 = *v21;
  if (!*v21)
  {
    v27 = 0;
    v26 = 0;
    goto LABEL_68;
  }
  v25 = *((unsigned int *)v24 - 1);
  v26 = &v24[2 * v25];
  if (!*((_DWORD *)v24 - 3))
  {
    v27 = &v24[2 * v25];
    v26 = v27;
    if (!v24)
      goto LABEL_72;
LABEL_69:
    v29 = &v24[2 * *((unsigned int *)v24 - 1)];
    if (v29 != v27)
      goto LABEL_73;
    goto LABEL_114;
  }
  v27 = *v21;
  if (!(_DWORD)v25)
  {
LABEL_68:
    if (!v24)
      goto LABEL_72;
    goto LABEL_69;
  }
  v28 = 16 * v25;
  v27 = v24;
  do
  {
    if ((unint64_t)*v27 + 1 > 1)
      goto LABEL_68;
    v27 += 2;
    v28 -= 16;
  }
  while (v28);
  v27 = v26;
  if (v24)
    goto LABEL_69;
LABEL_72:
  v29 = 0;
  if (v27)
  {
LABEL_73:
    v30 = *v12;
    if (*v12)
    {
LABEL_74:
      v31 = *(_DWORD *)(v30 - 8);
      v32 = *((_DWORD *)*v27 + 4);
      if (v32 < 0x100)
        v33 = WTF::StringImpl::hashSlowCase(*v27);
      else
        v33 = v32 >> 8;
      for (i = 0; ; v33 = i + v35)
      {
        v35 = v33 & v31;
        this = *(_QWORD *)(v30 + 16 * v35);
        if (this != -1)
        {
          if (!this)
            goto LABEL_106;
          this = WTF::equal((WTF *)this, *v27, a3);
          if ((this & 1) != 0)
            break;
        }
        ++i;
      }
      v36 = v30 + 16 * v35;
      v37 = *v12;
      if (!*v12 || (v37 += 16 * *(unsigned int *)(v37 - 4), v37 != v36))
      {
        if (v37 != v36)
        {
          v38 = *(WTF::StringImpl **)v36;
          *(_QWORD *)v36 = -1;
          if (!v38)
            goto LABEL_90;
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::destroy(v38, a2);
            this = *(_QWORD *)(v36 + 8);
            *(_QWORD *)(v36 + 8) = 0;
            if (!this)
              goto LABEL_95;
          }
          else
          {
            *(_DWORD *)v38 -= 2;
LABEL_90:
            this = *(_QWORD *)(v36 + 8);
            *(_QWORD *)(v36 + 8) = 0;
            if (!this)
            {
LABEL_95:
              ++*(_DWORD *)(*v12 - 16);
              v39 = *v12;
              if (*v12)
                goto LABEL_96;
LABEL_99:
              *(_DWORD *)(v39 - 12) = -1;
              v40 = *v12;
              if (!*v12)
                goto LABEL_106;
              goto LABEL_100;
            }
          }
          if (*(_DWORD *)this != 2)
          {
            *(_DWORD *)this -= 2;
            goto LABEL_95;
          }
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          ++*(_DWORD *)(*v12 - 16);
          v39 = *v12;
          if (!*v12)
            goto LABEL_99;
LABEL_96:
          --*(_DWORD *)(v39 - 12);
          v40 = *v12;
          if (!*v12)
            goto LABEL_106;
LABEL_100:
          v41 = 6 * *(_DWORD *)(v40 - 12);
          v42 = *(_DWORD *)(v40 - 4);
          if (v41 < v42 && v42 >= 9)
            this = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(v3 + 64), v42 >> 1, 0);
          goto LABEL_106;
        }
      }
      while (1)
      {
LABEL_106:
        v44 = v27 + 2;
        v27 = v26;
        if (v44 != v26)
        {
          v27 = v44;
          while ((unint64_t)*v27 + 1 <= 1)
          {
            v27 += 2;
            if (v27 == v26)
            {
              v27 = v26;
              break;
            }
          }
        }
        if (v27 == v29)
          break;
        v30 = *v12;
        if (*v12)
          goto LABEL_74;
      }
    }
  }
LABEL_114:
  v19 = 1;
  v18 = 1;
  if (!*(_BYTE *)(v3 + 185))
  {
LABEL_115:
    *(_BYTE *)(v3 + 185) = 1;
    do
      v45 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v45 + 1, (unsigned int *)v3));
    v46 = *(_QWORD *)(v3 + 88);
    do
      v47 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v47 + 1, (unsigned int *)v3));
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v49 = &off_1E9D6A1E0;
    *v48 = &off_1E9D6A1E0;
    v48[1] = v3;
    v58[0] = (uint64_t)v48;
    if (*(_QWORD *)(v46 + 8))
    {
      WebCore::StorageThread::dispatch(*(_QWORD *)(v46 + 8), v58);
      this = v58[0];
      if (v58[0])
      {
        v49 = *(uint64_t (***)())v58[0];
        goto LABEL_122;
      }
    }
    else
    {
LABEL_122:
      this = v49[1]();
    }
    do
      v50 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v50 - 1, (unsigned int *)v3));
    v18 = 1;
    if (v50 == 1)
    {
      atomic_store(1u, (unsigned int *)v3);
      v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v57 = off_1E9D6A130;
      v57[1] = v3;
      v58[0] = (uint64_t)v57;
      WTF::ensureOnMainThread();
      this = v58[0];
      v58[0] = 0;
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
LABEL_125:
  v51 = __ldxr(v4);
  if (v51 != 1)
  {
    __clrex();
LABEL_130:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v18)
      goto LABEL_131;
    return this;
  }
  if (__stlxr(0, v4))
    goto LABEL_130;
  if (!v18)
    return this;
LABEL_131:
  if (v19)
    return WebCore::TimerBase::start();
  v52 = *(WTF::StringImpl ***)(v3 + 64);
  if (v52)
  {
    *(_QWORD *)(v3 + 64) = 0;
    v53 = *((unsigned int *)v52 - 1);
    if ((_DWORD)v53)
    {
      for (j = v52; ; j += 2)
      {
        v55 = *j;
        if (*j == (WTF::StringImpl *)-1)
          goto LABEL_137;
        v56 = j[1];
        j[1] = 0;
        if (!v56)
          goto LABEL_142;
        if (*(_DWORD *)v56 != 2)
          break;
        WTF::StringImpl::destroy(v56, a2);
        v55 = *j;
        *j = 0;
        if (v55)
        {
LABEL_145:
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, a2);
          else
            *(_DWORD *)v55 -= 2;
        }
LABEL_137:
        if (!--v53)
          return WTF::fastFree((WTF *)(v52 - 2), a2);
      }
      *(_DWORD *)v56 -= 2;
LABEL_142:
      *j = 0;
      if (v55)
        goto LABEL_145;
      goto LABEL_137;
    }
    return WTF::fastFree((WTF *)(v52 - 2), a2);
  }
  return this;
}

uint64_t WebKit::StorageAreaSync::scheduleClear(uint64_t this, StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = this;
  v3 = *(WTF::StringImpl ***)(this + 64);
  if (v3)
  {
    *(_QWORD *)(this + 64) = 0;
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = v3;
      while (1)
      {
        v6 = *v5;
        if (*v5 == (WTF::StringImpl *)-1)
          goto LABEL_5;
        v7 = v5[1];
        v5[1] = 0;
        if (!v7)
          goto LABEL_10;
        if (*(_DWORD *)v7 != 2)
          break;
        WTF::StringImpl::destroy(v7, a2);
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
LABEL_13:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
LABEL_5:
        v5 += 2;
        if (!--v4)
          goto LABEL_15;
      }
      *(_DWORD *)v7 -= 2;
LABEL_10:
      *v5 = 0;
      if (v6)
        goto LABEL_13;
      goto LABEL_5;
    }
LABEL_15:
    this = WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  *(_BYTE *)(v2 + 72) = 1;
  if ((*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    return WebCore::TimerBase::start();
  }
  return this;
}

uint64_t WebKit::StorageAreaSync::openDatabase(uint64_t a1, int a2)
{
  const WTF::String *v4;
  WebKit::StorageTracker *v5;
  StringImpl *v6;
  unsigned __int8 *v7;
  const WTF::StringImpl *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v22;
  int v23;
  WTF::StringImpl *v24;
  WebCore::SQLiteDatabaseTracker *v26;
  WTF::StringImpl *v27;
  _QWORD v28[2];
  char v29;
  _QWORD v30[2];
  _QWORD *v31;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)a1);
  WebCore::StorageSyncManager::fullDatabaseFilename(*(WebCore::StorageSyncManager **)(a1 + 88), (const WTF::String *)(a1 + 160), &v27);
  v5 = (WebKit::StorageTracker *)WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v27, v4);
  if (a2 != 1 || (_DWORD)v5)
  {
    if (!v27 || !*((_DWORD *)v27 + 1))
      goto LABEL_44;
    v7 = (unsigned __int8 *)WebKit::StorageTracker::tracker(v5);
    if (!v7[128])
    {
LABEL_26:
      if ((WebCore::SQLiteDatabase::open() & 1) != 0)
      {
        if (WebCore::SQLiteDatabase::tableExists())
        {
          WebCore::SQLiteDatabase::prepareStatement();
          if ((_DWORD)v31
            || (v17 = 0, (WebCore::SQLiteStatement::isColumnDeclaredAsBlob((WebCore::SQLiteStatement *)v30) & 1) == 0))
          {
            v17 = 1;
          }
          if ((_DWORD)v31 != -1)
            (*(&off_1E9D6A198 + v31))((int)v28, (WebCore::SQLiteStatement *)v30);
          if (v17)
          {
            WebCore::SQLiteTransaction::SQLiteTransaction((WebCore::SQLiteTransaction *)v30, (WebCore::SQLiteDatabase *)(a1 + 96));
            WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)v30);
            if (WebCore::SQLiteDatabase::executeCommand()
              && WebCore::SQLiteDatabase::executeCommand()
              && WebCore::SQLiteDatabase::executeCommand()
              && WebCore::SQLiteDatabase::executeCommand()
              && WebCore::SQLiteDatabase::executeCommand())
            {
              WebCore::SQLiteTransaction::commit((WebCore::SQLiteTransaction *)v30);
            }
            else
            {
              WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v30);
              WebCore::SQLiteDatabase::executeCommand();
            }
            MEMORY[0x1D82A56D8](v30);
          }
        }
        v18 = WebCore::SQLiteDatabase::executeCommand();
        if ((v18 & 1) != 0)
        {
          v19 = WebKit::StorageTracker::tracker((WebKit::StorageTracker *)v18);
          WebKit::StorageTracker::setOriginDetails(v19, (WTF::StringImpl **)(a1 + 160), (const WTF::String *)&v27);
          goto LABEL_56;
        }
      }
LABEL_44:
      v20 = (unsigned __int8 *)(a1 + 189);
      if (__ldaxr((unsigned __int8 *)(a1 + 189)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v20))
      {
        goto LABEL_48;
      }
      MEMORY[0x1D82A3914](a1 + 189);
LABEL_48:
      *(_BYTE *)(a1 + 191) = 1;
      v22 = atomic_load((unsigned __int8 *)(a1 + 190));
      if ((v22 & 1) != 0)
      {
        v29 = 0;
        v28[0] = a1 + 190;
        v28[1] = &v29;
        v30[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
        v30[1] = v30;
        v31 = v28;
        WTF::ParkingLot::unparkOneImpl();
      }
      v23 = __ldxr(v20);
      if (v23 == 1)
      {
        if (!__stlxr(0, v20))
          goto LABEL_55;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 189));
LABEL_55:
      *(_BYTE *)(a1 + 187) = 1;
      goto LABEL_56;
    }
    v9 = v7;
    if (__ldaxr(v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_10;
    }
    MEMORY[0x1D82A3914](v7);
LABEL_10:
    v11 = v9 + 96;
    if (__ldaxr(v9 + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
LABEL_14:
      v13 = *((_QWORD *)v9 + 14);
      if (v13 && *(_DWORD *)(v13 - 12))
        WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)v9 + 14, (WTF::StringImpl **)(a1 + 160), v8);
      v14 = __ldxr(v11);
      if (v14 == 1)
      {
        if (!__stlxr(0, v11))
        {
          v15 = __ldxr(v9);
          if (v15 == 1)
            goto LABEL_20;
          goto LABEL_24;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 96));
      v16 = __ldxr(v9);
      if (v16 == 1)
      {
LABEL_20:
        if (!__stlxr(0, v9))
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_24:
      __clrex();
LABEL_25:
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_26;
    }
    MEMORY[0x1D82A3914](v9 + 96);
    goto LABEL_14;
  }
LABEL_56:
  v24 = v27;
  v27 = 0;
  if (!v24)
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v24);
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v24);
  }
  v26 = (WebCore::SQLiteDatabaseTracker *)WTF::StringImpl::destroy(v24, v6);
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v26);
}

uint64_t WebKit::StorageAreaSync::StorageAreaSync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t (***v12)();
  uint64_t (**v13)();
  unsigned int v14;
  unsigned int v15;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t (***v19)();

  *(_DWORD *)a1 = 1;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E9D6A108;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E9D6A158;
  v6[1] = WebKit::StorageAreaSync::syncTimerFired;
  v6[2] = 0;
  v6[3] = a1;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 0;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 88) = v8;
  WebCore::SQLiteDatabase::SQLiteDatabase((WebCore::SQLiteDatabase *)(a1 + 96));
  WTF::String::isolatedCopy();
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  do
    v9 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v9 + 1, (unsigned int *)a1));
  v10 = *(_QWORD *)(a1 + 88);
  do
    v11 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v11 + 1, (unsigned int *)a1));
  v12 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v13 = &off_1E9D6A180;
  *v12 = &off_1E9D6A180;
  v12[1] = (uint64_t (**)())a1;
  v19 = v12;
  if (*(_QWORD *)(v10 + 8))
  {
    WebCore::StorageThread::dispatch(*(_QWORD *)(v10 + 8), (uint64_t *)&v19);
    if (!v19)
      goto LABEL_9;
    v13 = *v19;
  }
  v13[1]();
  do
  {
LABEL_9:
    v14 = __ldaxr((unsigned int *)a1);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)a1));
  if (v15)
    return a1;
  atomic_store(1u, (unsigned int *)a1);
  v17 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  *v17 = off_1E9D6A130;
  v17[1] = (uint64_t (**)())a1;
  v19 = v17;
  WTF::ensureOnMainThread();
  v18 = (uint64_t)v19;
  v19 = 0;
  if (!v18)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::StorageAreaSync::*&)(void),WebKit::StorageAreaSync*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::StorageAreaSync(WTF::RefPtr<WebCore::StorageSyncManager,WTF::RawPtrTraits<WebCore::StorageSyncManager>,WTF::DefaultRefDerefTraits<WebCore::StorageSyncManager>> &&,WTF::Ref<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E9D6A180;
  a1[1] = 0;
  if (!v2)
    return a1;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (v4)
    return a1;
  atomic_store(1u, v2);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E9D6A130;
  v6[1] = v2;
  v7 = v6;
  WTF::ensureOnMainThread();
  if (!v7)
    return a1;
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::StorageAreaSync(WTF::RefPtr<WebCore::StorageSyncManager,WTF::RawPtrTraits<WebCore::StorageSyncManager>,WTF::DefaultRefDerefTraits<WebCore::StorageSyncManager>> &&,WTF::Ref<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6A180;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return WTF::fastFree(this, a2);
  atomic_store(1u, v3);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E9D6A130;
  v7[1] = v3;
  v9 = v7;
  WTF::ensureOnMainThread();
  if (!v9)
    return WTF::fastFree(this, a2);
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  return WTF::fastFree(this, v8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::StorageAreaSync(WTF::RefPtr<WebCore::StorageSyncManager,WTF::RawPtrTraits<WebCore::StorageSyncManager>,WTF::DefaultRefDerefTraits<WebCore::StorageSyncManager>> &&,WTF::Ref<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WTF::String const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  int v6;
  StringImpl *v7;
  StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned __int8 *v11;
  uint64_t result;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WebCore::SQLiteStatement *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _QWORD v29[2];
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  uint64_t (*v33)(uint64_t, __int16);
  uint64_t (**v34)(uint64_t, __int16);
  WTF::StringImpl **v35;

  v1 = *(_QWORD *)(a1 + 8);
  WebKit::StorageAreaSync::openDatabase(v1, 1);
  if (!*(_QWORD *)(v1 + 104))
  {
    v4 = (unsigned __int8 *)(v1 + 189);
    if (__ldaxr((unsigned __int8 *)(v1 + 189)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_36;
    }
    MEMORY[0x1D82A3914](v1 + 189);
LABEL_36:
    *(_BYTE *)(v1 + 191) = 1;
    result = v1 + 190;
    v16 = atomic_load((unsigned __int8 *)(v1 + 190));
    if ((v16 & 1) != 0)
    {
      LOBYTE(v31) = 0;
      v29[0] = v1 + 190;
      v29[1] = &v31;
      v33 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
      v34 = &v33;
      v35 = (WTF::StringImpl **)v29;
      result = WTF::ParkingLot::unparkOneImpl();
    }
    v17 = __ldxr(v4);
    if (v17 == 1)
    {
      if (!__stlxr(0, v4))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 189));
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (!v30)
  {
    v28 = 0;
    while (1)
    {
      v6 = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v29);
      if (v6 != 100)
      {
        if (v6 == 101)
          WebCore::StorageMap::importItems();
        v11 = (unsigned __int8 *)(v1 + 189);
        if (__ldaxr((unsigned __int8 *)(v1 + 189)))
        {
          __clrex();
          goto LABEL_44;
        }
        if (__stxr(1u, v11))
LABEL_44:
          MEMORY[0x1D82A3914](v1 + 189);
        *(_BYTE *)(v1 + 191) = 1;
        result = v1 + 190;
        v18 = atomic_load((unsigned __int8 *)(v1 + 190));
        if ((v18 & 1) != 0)
        {
          LOBYTE(v27) = 0;
          v31 = (WTF::StringImpl *)(v1 + 190);
          v32 = &v27;
          v33 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
          v34 = &v33;
          v35 = &v31;
          result = WTF::ParkingLot::unparkOneImpl();
        }
        v19 = __ldxr(v11);
        if (v19 == 1)
        {
          if (!__stlxr(0, v11))
          {
LABEL_52:
            v20 = v28;
            if (!v28)
              goto LABEL_67;
            v21 = *(unsigned int *)(v28 - 4);
            if (!(_DWORD)v21)
            {
LABEL_66:
              result = WTF::fastFree((WTF *)(v20 - 16), v7);
              goto LABEL_67;
            }
            v22 = v28;
            while (2)
            {
              v23 = *(WTF::StringImpl **)v22;
              if (*(_QWORD *)v22 == -1)
                goto LABEL_56;
              v24 = *(WTF::StringImpl **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = 0;
              if (!v24)
                goto LABEL_61;
              if (*(_DWORD *)v24 == 2)
              {
                WTF::StringImpl::destroy(v24, v7);
                v23 = *(WTF::StringImpl **)v22;
                *(_QWORD *)v22 = 0;
                if (!v23)
                  goto LABEL_56;
              }
              else
              {
                *(_DWORD *)v24 -= 2;
LABEL_61:
                *(_QWORD *)v22 = 0;
                if (!v23)
                {
LABEL_56:
                  v22 += 16;
                  if (!--v21)
                    goto LABEL_66;
                  continue;
                }
              }
              break;
            }
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v7);
            else
              *(_DWORD *)v23 -= 2;
            goto LABEL_56;
          }
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 189));
        goto LABEL_52;
      }
      if (v30 || (WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v29), v30))
      {
LABEL_69:
        v25 = std::__throw_bad_variant_access[abi:sn180100]();
        return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_iEEEEEEDcSD_DpT0_(v25, v26);
      }
      WebCore::SQLiteStatement::columnBlobAsString((WebCore::SQLiteStatement *)v29);
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::String>((uint64_t)&v33, &v28, &v31, &v27);
      v9 = v27;
      v27 = 0;
      if (!v9)
        goto LABEL_16;
      if (*(_DWORD *)v9 != 2)
        break;
      WTF::StringImpl::destroy(v9, v8);
      v10 = v31;
      v31 = 0;
      if (v10)
      {
LABEL_19:
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
LABEL_9:
      if (v30)
        goto LABEL_69;
    }
    *(_DWORD *)v9 -= 2;
LABEL_16:
    v10 = v31;
    v31 = 0;
    if (v10)
      goto LABEL_19;
    goto LABEL_9;
  }
  v2 = (unsigned __int8 *)(v1 + 189);
  if (__ldaxr((unsigned __int8 *)(v1 + 189)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_27;
  }
  MEMORY[0x1D82A3914](v1 + 189);
LABEL_27:
  *(_BYTE *)(v1 + 191) = 1;
  result = v1 + 190;
  v14 = atomic_load((unsigned __int8 *)(v1 + 190));
  if ((v14 & 1) != 0)
  {
    LOBYTE(v28) = 0;
    v31 = (WTF::StringImpl *)(v1 + 190);
    v32 = (WTF::StringImpl **)&v28;
    v33 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v34 = &v33;
    v35 = &v31;
    result = WTF::ParkingLot::unparkOneImpl();
  }
  v15 = __ldxr(v2);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v2))
LABEL_33:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 189));
LABEL_67:
  if (v30 != -1)
    return (*(&off_1E9D6A198 + v30))((int)&v33, (WebCore::SQLiteStatement *)v29);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_iEEEEEEDcSD_DpT0_(int a1, WebCore::SQLiteStatement *this)
{
  WebCore::SQLiteStatement::~SQLiteStatement(this);
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, __int16 a2)
{
  unsigned __int8 **v2;

  v2 = *(unsigned __int8 ***)(a1 + 16);
  if ((a2 & 0x100) == 0)
    atomic_store(0, *v2);
  *v2[1] = a2 & 1;
  return 0;
}

uint64_t WTF::Condition::waitUntilUnchecked<WTF::Lock>(uint64_t a1, unsigned __int8 *a2, WTF::TimeWithDynamicClockType *this)
{
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;

  v15 = WTF::TimeWithDynamicClockType::nowWithSameClock(this);
  v16 = v5;
  if (!WTF::TimeWithDynamicClockType::operator<())
  {
    v12 = a2;
    v13 = a1;
    v15 = (uint64_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
    v16 = &v15;
    v17 = &v13;
    v14[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
    v14[1] = v14;
    v14[2] = &v12;
    v7 = WTF::ParkingLot::parkConditionallyImpl() & 1;
    if (!__ldaxr(a2))
      goto LABEL_10;
    goto LABEL_7;
  }
  v6 = __ldxr(a2);
  if (v6 != 1)
  {
    __clrex();
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)a2);
    v7 = 0;
    if (!__ldaxr(a2))
      goto LABEL_10;
LABEL_7:
    __clrex();
LABEL_11:
    MEMORY[0x1D82A3914](a2);
    return v7;
  }
  if (__stlxr(0, a2))
    goto LABEL_9;
  v7 = 0;
  if (__ldaxr(a2))
    goto LABEL_7;
LABEL_10:
  if (__stxr(1u, a2))
    goto LABEL_11;
  return v7;
}

uint64_t WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  atomic_store(1u, **(unsigned __int8 ***)(a1 + 16));
  return 1;
}

unsigned __int8 *WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction(uint64_t a1)
{
  unsigned __int8 *result;
  int v2;

  result = **(unsigned __int8 ***)(a1 + 16);
  v2 = __ldxr(result);
  if (v2 == 1)
  {
    if (!__stlxr(0, result))
      return result;
  }
  else
  {
    __clrex();
  }
  return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::scheduleFinalSync(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E9D6A1B8;
  a1[1] = 0;
  if (!v2)
    return a1;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (v4)
    return a1;
  atomic_store(1u, v2);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E9D6A130;
  v6[1] = v2;
  v7 = v6;
  WTF::ensureOnMainThread();
  if (!v7)
    return a1;
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::scheduleFinalSync(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6A1B8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return WTF::fastFree(this, a2);
  atomic_store(1u, v3);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E9D6A130;
  v7[1] = v3;
  v9 = v7;
  WTF::ensureOnMainThread();
  if (!v9)
    return WTF::fastFree(this, a2);
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  return WTF::fastFree(this, v8);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::scheduleFinalSync(void)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  WebKit::StorageTracker *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  const WTF::String *v10;
  uint64_t *v11;
  StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[2];
  unsigned int v17;

  v1 = *((_QWORD *)result + 1);
  if (!*(_QWORD *)(v1 + 104))
    return result;
  result = (WTF::StringImpl *)WebCore::SQLiteDatabase::prepareStatement();
  v2 = v17;
  if (v17)
  {
    v3 = -1;
    if (v17 == -1)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = (WTF::StringImpl *)WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v16);
  if ((_DWORD)result != 100)
  {
    v3 = -1;
    v2 = v17;
    if (v17 == -1)
      goto LABEL_5;
LABEL_4:
    result = (WTF::StringImpl *)(*(&off_1E9D6A198 + v2))((int)&v15, (WebCore::SQLiteStatement *)v16);
    goto LABEL_5;
  }
  if (v17)
  {
    v11 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>(v11, v12, v13, v14);
  }
  result = (WTF::StringImpl *)WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v16);
  v3 = (int)result;
  v2 = v17;
  if (v17 != -1)
    goto LABEL_4;
LABEL_5:
  if (v3)
    return result;
  v4 = (WebKit::StorageTracker *)WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(v1 + 96));
  if (*(_BYTE *)(WebKit::StorageTracker::tracker(v4) + 128))
  {
    WTF::String::isolatedCopy();
    v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = &off_1E9D6A208;
    v6 = v15;
    v15 = 0;
    v16[0] = v5;
    *((_QWORD *)v5 + 1) = v6;
    WTF::callOnMainThread();
    v8 = v16[0];
    v16[0] = 0;
    if (v8)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
    result = v15;
    v15 = 0;
    if (result)
    {
      v9 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
      {
LABEL_16:
        *(_DWORD *)result = v9;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
  }
  else
  {
    WebCore::StorageSyncManager::fullDatabaseFilename(*(WebCore::StorageSyncManager **)(v1 + 88), (const WTF::String *)(v1 + 160), v16);
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v16, v10);
    result = v16[0];
    v16[0] = 0;
    if (result)
    {
      v9 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
        goto LABEL_16;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::String const&>@<X0>(uint64_t *a1@<X0>, StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF **v13;
  int i;
  uint64_t v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF::StringImpl *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;

  v8 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    v8 = *a1;
    if (!*a1)
    {
      v9 = 0;
      v10 = *(WTF::StringImpl **)a2;
      v11 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      if (v11 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *(WTF::StringImpl **)a2;
  v11 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v11 < 0x100)
    goto LABEL_6;
LABEL_4:
  v12 = v11 >> 8;
LABEL_7:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF **)(v8 + 16 * v15);
    v17 = *v16;
    if (*v16 == (WTF *)-1)
    {
      v13 = (WTF **)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!v17)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v16 = v13;
      }
      v20 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v20 += 2;
      *v16 = v20;
      v21 = *(WTF **)a3;
      if (*(_QWORD *)a3)
        *(_DWORD *)v21 += 2;
      result = v16[1];
      v16[1] = v21;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          v23 = *a1;
          if (*a1)
          {
LABEL_25:
            ++*(_DWORD *)(v23 - 12);
            v24 = *a1;
            if (*a1)
              goto LABEL_26;
            goto LABEL_39;
          }
LABEL_38:
          *(_DWORD *)(v23 - 12) = 1;
          v24 = *a1;
          if (*a1)
          {
LABEL_26:
            v25 = (*(_DWORD *)(v24 - 16) + *(_DWORD *)(v24 - 12));
            v26 = *(unsigned int *)(v24 - 4);
            if (v26 <= 0x400)
              goto LABEL_27;
            goto LABEL_40;
          }
LABEL_39:
          v25 = *(unsigned int *)(v24 - 16);
          v26 = *(unsigned int *)(v24 - 4);
          if (v26 <= 0x400)
          {
LABEL_27:
            if (3 * v26 > 4 * v25)
            {
LABEL_43:
              *(_QWORD *)a4 = v16;
              *(_QWORD *)(a4 + 8) = v24 + 16 * v26;
              *(_BYTE *)(a4 + 16) = 1;
              return result;
            }
            if (!(_DWORD)v26)
            {
              result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, v16);
              v16 = (WTF **)result;
              v24 = *a1;
              if (!*a1)
              {
LABEL_30:
                v26 = 0;
                goto LABEL_43;
              }
LABEL_42:
              v26 = *(unsigned int *)(v24 - 4);
              goto LABEL_43;
            }
LABEL_41:
            result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, (_DWORD)v26 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v26)), v16);
            v16 = (WTF **)result;
            v24 = *a1;
            if (!*a1)
              goto LABEL_30;
            goto LABEL_42;
          }
LABEL_40:
          if (v26 > 2 * v25)
            goto LABEL_43;
          goto LABEL_41;
        }
        *(_DWORD *)result -= 2;
      }
      v23 = *a1;
      if (*a1)
        goto LABEL_25;
      goto LABEL_38;
    }
    if (WTF::equal(v17, *(const WTF::StringImpl **)a2, a3))
      break;
LABEL_9:
    v12 = i + v15;
  }
  v18 = *a1;
  if (*a1)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v18 + 16 * v19;
  *(_BYTE *)(a4 + 16) = 0;
  v27 = (WTF::StringImpl **)(v8 + 16 * v15 + 8);
  v28 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v28 += 2;
  result = *v27;
  *v27 = v28;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
          {
            v18 = *(_DWORD *)(v17 - 8);
            v19 = *((_DWORD *)v14 + 4);
            if (v19 >= 0x100)
              goto LABEL_18;
LABEL_23:
            v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            v18 = 0;
            v19 = *((_DWORD *)v14 + 4);
            if (v19 < 0x100)
              goto LABEL_23;
LABEL_18:
            v20 = v19 >> 8;
          }
          v22 = 0;
          do
          {
            v23 = v20 & v18;
            v20 = ++v22 + v23;
          }
          while (*(_QWORD *)(v17 + 16 * v23));
          v24 = (WTF::StringImpl **)(v17 + 16 * v23);
          v25 = v24[1];
          v24[1] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 != 2)
            {
              *(_DWORD *)v25 -= 2;
              goto LABEL_29;
            }
            WTF::StringImpl::destroy(v25, v10);
            v26 = *v24;
            *v24 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v10);
              else
                *(_DWORD *)v26 -= 2;
            }
          }
          else
          {
LABEL_29:
            *v24 = 0;
          }
          v27 = *v13;
          *v13 = 0;
          *v24 = v27;
          v28 = v6 + 16 * v11;
          v29 = *(WTF::StringImpl **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v24[1] = v29;
          v30 = *(WTF::StringImpl **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 != 2)
            {
              *(_DWORD *)v30 -= 2;
              goto LABEL_38;
            }
            WTF::StringImpl::destroy(v30, v10);
            v31 = *v13;
            *v13 = 0;
            if (v31)
            {
LABEL_41:
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v10);
              else
                *(_DWORD *)v31 -= 2;
            }
          }
          else
          {
LABEL_38:
            v31 = *v13;
            *v13 = 0;
            if (v31)
              goto LABEL_41;
          }
          if (v13 == a3)
            v12 = v24;
          goto LABEL_9;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WTF::StringImpl **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v10);
            v21 = *v13;
            *v13 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v10);
              else
                *(_DWORD *)v21 -= 2;
            }
            goto LABEL_9;
          }
          *(_DWORD *)v16 -= 2;
        }
        *v13 = 0;
      }
LABEL_9:
      if (++v11 == v7)
        goto LABEL_44;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::String>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, WTF **a4)
{
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF **v13;
  int i;
  uint64_t v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *result;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v8 = *a2;
    if (!*a2)
    {
      v9 = 0;
      v10 = *a3;
      v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *a3;
  v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100)
    goto LABEL_6;
LABEL_4:
  v12 = v11 >> 8;
LABEL_7:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF **)(v8 + 16 * v15);
    v17 = *v16;
    if (*v16 == (WTF *)-1)
    {
      v13 = (WTF **)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!v17)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v16 = v13;
      }
      v20 = *a3;
      *a3 = 0;
      v21 = *v16;
      *v16 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, (StringImpl *)a2);
          v26 = *a4;
          *a4 = 0;
          result = v16[1];
          v16[1] = v26;
          if (!result)
            goto LABEL_29;
LABEL_27:
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
            v27 = *a2;
            if (*a2)
            {
LABEL_30:
              ++*(_DWORD *)(v27 - 12);
              v28 = *a2;
              if (*a2)
                goto LABEL_31;
              goto LABEL_38;
            }
LABEL_37:
            *(_DWORD *)(v27 - 12) = 1;
            v28 = *a2;
            if (*a2)
            {
LABEL_31:
              v29 = (*(_DWORD *)(v28 - 16) + *(_DWORD *)(v28 - 12));
              v30 = *(unsigned int *)(v28 - 4);
              if (v30 <= 0x400)
                goto LABEL_32;
              goto LABEL_39;
            }
LABEL_38:
            v29 = *(unsigned int *)(v28 - 16);
            v30 = *(unsigned int *)(v28 - 4);
            if (v30 <= 0x400)
            {
LABEL_32:
              if (3 * v30 > 4 * v29)
              {
LABEL_42:
                *(_QWORD *)a1 = v16;
                *(_QWORD *)(a1 + 8) = v28 + 16 * v30;
                *(_BYTE *)(a1 + 16) = 1;
                return result;
              }
              if (!(_DWORD)v30)
              {
                result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v16);
                v16 = (WTF **)result;
                v28 = *a2;
                if (!*a2)
                {
LABEL_35:
                  v30 = 0;
                  goto LABEL_42;
                }
LABEL_41:
                v30 = *(unsigned int *)(v28 - 4);
                goto LABEL_42;
              }
LABEL_40:
              result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v30 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v30)), v16);
              v16 = (WTF **)result;
              v28 = *a2;
              if (!*a2)
                goto LABEL_35;
              goto LABEL_41;
            }
LABEL_39:
            if (v30 > 2 * v29)
              goto LABEL_42;
            goto LABEL_40;
          }
          *(_DWORD *)result -= 2;
LABEL_29:
          v27 = *a2;
          if (*a2)
            goto LABEL_30;
          goto LABEL_37;
        }
        *(_DWORD *)v21 -= 2;
      }
      v22 = *a4;
      *a4 = 0;
      result = v16[1];
      v16[1] = v22;
      if (!result)
        goto LABEL_29;
      goto LABEL_27;
    }
    if (WTF::equal(v17, *a3, (const WTF::StringImpl *)a3))
      break;
LABEL_9:
    v12 = i + v15;
  }
  v18 = *a2;
  if (*a2)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v18 + 16 * v19;
  *(_BYTE *)(a1 + 16) = 0;
  v24 = v8 + 16 * v15;
  v25 = *a4;
  *a4 = 0;
  result = *(WTF::StringImpl **)(v24 + 8);
  *(_QWORD *)(v24 + 8) = v25;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::syncTimerFired(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E9D6A1E0;
  a1[1] = 0;
  if (!v2)
    return a1;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (v4)
    return a1;
  atomic_store(1u, v2);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E9D6A130;
  v6[1] = v2;
  v7 = v6;
  WTF::ensureOnMainThread();
  if (!v7)
    return a1;
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::syncTimerFired(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6A1E0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return WTF::fastFree(this, a2);
  atomic_store(1u, v3);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E9D6A130;
  v7[1] = v3;
  v9 = v7;
  WTF::ensureOnMainThread();
  if (!v9)
    return WTF::fastFree(this, a2);
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  return WTF::fastFree(this, v8);
}

WebCore::SQLiteDatabaseTracker *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::syncTimerFired(void)::$_0,void>::call(WebCore::SQLiteDatabaseTracker *result, StringImpl *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  _QWORD *v6;
  int v7;
  BOOL v8;
  WebCore::SQLiteDatabaseTracker *v9;
  unsigned int v10;
  _BOOL4 v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD *v21;
  int v23;
  uint64_t v24;
  WTF::StringImpl **i;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _BYTE v28[16];
  _BYTE v29[16];
  unsigned int v30;
  _BYTE v31[16];
  unsigned int v32;

  v2 = *((_QWORD *)result + 1);
  v3 = (unsigned __int8 *)(v2 + 168);
  if (__ldaxr((unsigned __int8 *)(v2 + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  result = (WebCore::SQLiteDatabaseTracker *)MEMORY[0x1D82A3914](v2 + 168);
LABEL_5:
  v5 = *(unsigned __int8 *)(v2 + 184);
  v6 = *(_QWORD **)(v2 + 176);
  *(_QWORD *)(v2 + 176) = 0;
  *(_BYTE *)(v2 + 184) = 0;
  *(_WORD *)(v2 + 185) = 256;
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (v6)
        goto LABEL_8;
LABEL_16:
      if (!v5)
        goto LABEL_17;
      goto LABEL_18;
    }
  }
  else
  {
    __clrex();
  }
  result = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 168));
  if (!v6)
    goto LABEL_16;
LABEL_8:
  if (v5)
    v8 = 1;
  else
    v8 = *((_DWORD *)v6 - 3) != 0;
  if (!v8)
  {
LABEL_17:
    if (!*(_BYTE *)(v2 + 188))
      goto LABEL_75;
  }
LABEL_18:
  if (*(_BYTE *)(v2 + 187))
    goto LABEL_75;
  if (*(_QWORD *)(v2 + 104))
    goto LABEL_103;
  if (*(_BYTE *)(v2 + 188))
  {
    *(_BYTE *)(v2 + 188) = 0;
    goto LABEL_75;
  }
  result = (WebCore::SQLiteDatabaseTracker *)WebKit::StorageAreaSync::openDatabase(v2, 0);
  if (*(_QWORD *)(v2 + 104))
  {
LABEL_103:
    if (*(_BYTE *)(v2 + 188))
    {
      *(_BYTE *)(v2 + 188) = 0;
      result = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(v2 + 96));
      goto LABEL_75;
    }
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(result);
    if (!v5)
      goto LABEL_33;
    v9 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
    v10 = v32;
    if (v32)
    {
      v11 = 1;
    }
    else
    {
      v9 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v31);
      v11 = (_DWORD)v9 != 101;
      v10 = v32;
    }
    if (v10 != -1)
      v9 = (WebCore::SQLiteDatabaseTracker *)(*(&off_1E9D6A198 + v10))((int)v29, (WebCore::SQLiteStatement *)v31);
    if (!v11)
    {
LABEL_33:
      v9 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
      v12 = v32;
      if (!v32)
      {
        v9 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
        v13 = v30;
        if (!v30)
        {
          if (v6)
            v14 = &v6[2 * *((unsigned int *)v6 - 1)];
          else
            v14 = 0;
          WebCore::SQLiteTransaction::SQLiteTransaction((WebCore::SQLiteTransaction *)v28, (WebCore::SQLiteDatabase *)(v2 + 96));
          WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)v28);
          if (v6)
          {
            v15 = *((unsigned int *)v6 - 1);
            v16 = &v6[2 * v15];
            if (*((_DWORD *)v6 - 3))
            {
              v17 = v6;
              if ((_DWORD)v15)
              {
                v18 = 16 * v15;
                v17 = v6;
                while ((unint64_t)(*v17 + 1) <= 1)
                {
                  v17 += 2;
                  v18 -= 16;
                  if (!v18)
                  {
                    v17 = v16;
                    break;
                  }
                }
              }
            }
            else
            {
              v17 = &v6[2 * v15];
              v16 = v17;
            }
          }
          else
          {
            v17 = 0;
            v16 = 0;
          }
          if (v14 != v17)
          {
            while (1)
            {
              v19 = v17 + 1;
              if (v17[1])
                v20 = v31;
              else
                v20 = v29;
              if (*((_DWORD *)v20 + 4))
              {
LABEL_100:
                std::__throw_bad_variant_access[abi:sn180100]();
                return (WebCore::SQLiteDatabaseTracker *)std::__throw_bad_variant_access[abi:sn180100]();
              }
              if (*v17)
              {
                WebCore::SQLiteStatement::bindText();
                if (!*v19)
                  goto LABEL_60;
              }
              else
              {
                WebCore::SQLiteStatement::bindText();
                if (!*v19)
                  goto LABEL_60;
              }
              if (*((_DWORD *)v20 + 4))
                goto LABEL_100;
              WebCore::SQLiteStatement::bindBlob((WebCore::SQLiteStatement *)v20, 2, (const WTF::String *)(v17 + 1));
LABEL_60:
              if (*((_DWORD *)v20 + 4))
                goto LABEL_100;
              if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v20) == 101)
              {
                if (*((_DWORD *)v20 + 4))
                  goto LABEL_100;
                WebCore::SQLiteStatement::reset((WebCore::SQLiteStatement *)v20);
                v21 = v17 + 2;
                v17 = v16;
                if (v21 != v16)
                {
                  v17 = v21;
                  while ((unint64_t)(*v17 + 1) <= 1)
                  {
                    v17 += 2;
                    if (v17 == v16)
                    {
                      v17 = v16;
                      break;
                    }
                  }
                }
                if (v17 != v14)
                  continue;
              }
              break;
            }
          }
          WebCore::SQLiteTransaction::commit((WebCore::SQLiteTransaction *)v28);
          v9 = (WebCore::SQLiteDatabaseTracker *)MEMORY[0x1D82A56D8](v28);
          v13 = v30;
        }
        if (v13 != -1)
          v9 = (WebCore::SQLiteDatabaseTracker *)(*(&off_1E9D6A198 + v13))((int)v28, (WebCore::SQLiteStatement *)v29);
        v12 = v32;
      }
      if (v12 != -1)
        v9 = (WebCore::SQLiteDatabaseTracker *)(*(&off_1E9D6A198 + v12))((int)v29, (WebCore::SQLiteStatement *)v31);
    }
    result = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v9);
  }
LABEL_75:
  if (__ldaxr(v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_79;
  }
  result = (WebCore::SQLiteDatabaseTracker *)MEMORY[0x1D82A3914](v2 + 168);
LABEL_79:
  *(_BYTE *)(v2 + 186) = 0;
  v23 = __ldxr(v3);
  if (v23 != 1)
  {
    __clrex();
LABEL_84:
    result = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 168));
    if (!v6)
      return result;
    goto LABEL_85;
  }
  if (__stlxr(0, v3))
    goto LABEL_84;
  if (!v6)
    return result;
LABEL_85:
  v24 = *((unsigned int *)v6 - 1);
  if ((_DWORD)v24)
  {
    for (i = (WTF::StringImpl **)v6; ; i += 2)
    {
      v26 = *i;
      if (*i == (WTF::StringImpl *)-1)
        goto LABEL_88;
      v27 = i[1];
      i[1] = 0;
      if (!v27)
        goto LABEL_93;
      if (*(_DWORD *)v27 != 2)
        break;
      WTF::StringImpl::destroy(v27, a2);
      v26 = *i;
      *i = 0;
      if (v26)
      {
LABEL_96:
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
LABEL_88:
      if (!--v24)
        return (WebCore::SQLiteDatabaseTracker *)WTF::fastFree((WTF *)(v6 - 2), a2);
    }
    *(_DWORD *)v27 -= 2;
LABEL_93:
    *i = 0;
    if (v26)
      goto LABEL_96;
    goto LABEL_88;
  }
  return (WebCore::SQLiteDatabaseTracker *)WTF::fastFree((WTF *)(v6 - 2), a2);
}

uint64_t std::__throw_bad_variant_access[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::deleteEmptyDatabase(void)::$_1,void>::~CallableWrapper();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::deleteEmptyDatabase(void)::$_1,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E9D6A208;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::deleteEmptyDatabase(void)::$_1,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6A208;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAreaSync::deleteEmptyDatabase(void)::$_1,void>::call(WebKit::StorageTracker *a1)
{
  WTF::StringImpl *v2;
  uint64_t result;
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (WTF::StringImpl *)WebKit::StorageTracker::tracker(a1);
  if (*((_QWORD *)a1 + 1))
  {
    result = WebCore::SecurityOriginData::fromDatabaseIdentifier();
    if (!v7)
      return result;
  }
  else
  {
    result = WebCore::SecurityOriginData::fromDatabaseIdentifier();
    if (!v7)
      return result;
  }
  result = (uint64_t)WebKit::StorageTracker::deleteOrigin(v2, (const WebCore::SecurityOriginData *)v5);
  if (v7)
  {
    if (v6 != -1)
      return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v6])(&v4, v5);
  }
  return result;
}

unsigned int *WebKit::StorageNamespaceImpl::getOrCreateLocalStorageNamespace@<X0>(const WTF::StringImpl **this@<X0>, const WTF::String *a2@<X1>, SessionID a3@<0:X3>, const WTF::StringImpl *a4@<X2>, uint64_t *a5@<X8>)
{
  int v5;
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF **v13;
  int i;
  uint64_t v15;
  WTF **v16;
  WTF *v17;
  unsigned int *result;
  uint64_t v19;
  const WTF::StringImpl *v20;
  void *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;

  v5 = (int)a2;
  if ((_MergedGlobals_6 & 1) == 0)
  {
    qword_1ECEC9768 = 0;
    _MergedGlobals_6 = 1;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u);
    v8 = qword_1ECEC9768;
    if (qword_1ECEC9768)
      goto LABEL_4;
LABEL_7:
    v9 = 0;
    v10 = *this;
    v11 = *((_DWORD *)*this + 4);
    if (v11 >= 0x100)
      goto LABEL_5;
LABEL_8:
    v12 = WTF::StringImpl::hashSlowCase(v10);
    goto LABEL_9;
  }
  v8 = qword_1ECEC9768;
  if (!qword_1ECEC9768)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u);
    v8 = qword_1ECEC9768;
    if (!qword_1ECEC9768)
      goto LABEL_7;
  }
LABEL_4:
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *this;
  v11 = *((_DWORD *)*this + 4);
  if (v11 < 0x100)
    goto LABEL_8;
LABEL_5:
  v12 = v11 >> 8;
LABEL_9:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF **)(v8 + 16 * v15);
    v17 = *v16;
    if (*v16 == (WTF *)-1)
    {
      v13 = (WTF **)(v8 + 16 * v15);
      goto LABEL_11;
    }
    if (!v17)
      break;
    result = (unsigned int *)WTF::equal(v17, *this, a4);
    if ((_DWORD)result)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v8 + 16 * v15 + 8) + 8);
      ++*(_DWORD *)(v19 + 8);
      goto LABEL_42;
    }
LABEL_11:
    v12 = i + v15;
  }
  if (v13)
  {
    *v13 = 0;
    v13[1] = 0;
    --*(_DWORD *)(qword_1ECEC9768 - 16);
    v16 = v13;
  }
  v20 = *this;
  if (*this)
    *(_DWORD *)v20 += 2;
  *v16 = v20;
  v19 = WTF::fastMalloc((WTF *)0x48);
  if (!*(_QWORD *)(WebKit::StorageNamespaceImpl::StorageNamespaceImpl(v19, 1, (uint64_t)this, v5, (uint64_t)a4) + 16))
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = v19;
    v23 = *(unsigned int **)(v19 + 16);
    *(_QWORD *)(v19 + 16) = v22;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v21);
      }
    }
  }
  v26 = *(unsigned int **)(v19 + 16);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  result = (unsigned int *)v16[1];
  v16[1] = (WTF *)v26;
  if (!result)
    goto LABEL_30;
  do
  {
    v28 = __ldaxr(result);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, result));
  if (!v29)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
    v30 = qword_1ECEC9768;
    if (!qword_1ECEC9768)
      goto LABEL_37;
LABEL_31:
    ++*(_DWORD *)(v30 - 12);
    v31 = qword_1ECEC9768;
    if (qword_1ECEC9768)
      goto LABEL_32;
LABEL_38:
    v32 = *(unsigned int *)(v31 - 16);
    v33 = *(unsigned int *)(v31 - 4);
    if (v33 > 0x400)
      goto LABEL_39;
LABEL_33:
    if (3 * v33 <= 4 * v32)
    {
      if ((_DWORD)v33)
        goto LABEL_40;
      v34 = 8;
LABEL_41:
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v34);
    }
  }
  else
  {
LABEL_30:
    v30 = qword_1ECEC9768;
    if (qword_1ECEC9768)
      goto LABEL_31;
LABEL_37:
    *(_DWORD *)(v30 - 12) = 1;
    v31 = qword_1ECEC9768;
    if (!qword_1ECEC9768)
      goto LABEL_38;
LABEL_32:
    v32 = (*(_DWORD *)(v31 - 16) + *(_DWORD *)(v31 - 12));
    v33 = *(unsigned int *)(v31 - 4);
    if (v33 <= 0x400)
      goto LABEL_33;
LABEL_39:
    if (v33 <= 2 * v32)
    {
LABEL_40:
      v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v33));
      goto LABEL_41;
    }
  }
LABEL_42:
  *a5 = v19;
  return result;
}

uint64_t WebKit::StorageNamespaceImpl::StorageNamespaceImpl(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  StringImpl *v11;
  WebCore::StorageSyncManager *v12;
  WTF *v14;
  void *v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E9D6A230;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = a2;
  v8 = a1 + 40;
  WTF::String::isolatedCopy();
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 64) = a5;
  if (*(unsigned __int8 *)(a1 + 32) - 1 > 1)
    return a1;
  if (!*(_QWORD *)v8)
    return a1;
  if (!*(_DWORD *)(*(_QWORD *)v8 + 4))
    return a1;
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_BYTE *)(v10 + 64) = 0;
  *(_QWORD *)(v9 + 8) = v10;
  WTF::String::isolatedCopy();
  WebCore::StorageThread::start(*(_QWORD *)(v9 + 8));
  v12 = *(WebCore::StorageSyncManager **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (!v12)
    return a1;
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
    return a1;
  }
  WebCore::StorageSyncManager::~StorageSyncManager(v12, v11);
  WTF::fastFree(v14, v15);
  return a1;
}

void WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(WebKit::StorageNamespaceImpl *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  WebCore::StorageSyncManager *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  char v37;
  char *v38;
  char v39;

  if (*((unsigned __int8 *)this + 32) - 1 > 1)
    goto LABEL_36;
  if ((_MergedGlobals_6 & 1) == 0)
    goto LABEL_70;
  v4 = qword_1ECEC9768;
  if (!qword_1ECEC9768)
    goto LABEL_36;
  v5 = *(_DWORD *)(qword_1ECEC9768 - 8);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  v7 = *((_DWORD *)v6 + 4);
  v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(v6) : v7 >> 8;
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v5;
    v11 = *(WTF **)(v4 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        goto LABEL_36;
      if ((WTF::equal(v11, *((const WTF::StringImpl **)this + 5), a3) & 1) != 0)
        break;
    }
  }
  v12 = v4 + 16 * v10;
  v13 = qword_1ECEC9768;
  if (qword_1ECEC9768)
  {
    v13 = qword_1ECEC9768 + 16 * *(unsigned int *)(qword_1ECEC9768 - 4);
    if (v13 == v12)
      goto LABEL_36;
  }
  if (v13 == v12)
    goto LABEL_36;
  v14 = *(WTF::StringImpl **)v12;
  *(_QWORD *)v12 = -1;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, a2);
      v15 = *(unsigned int **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (!v15)
        goto LABEL_25;
      goto LABEL_23;
    }
    *(_DWORD *)v14 -= 2;
  }
  v15 = *(unsigned int **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (!v15)
    goto LABEL_25;
  do
  {
LABEL_23:
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (v17)
  {
LABEL_25:
    v18 = qword_1ECEC9768;
    ++*(_DWORD *)(qword_1ECEC9768 - 16);
    if (v18)
      goto LABEL_26;
    goto LABEL_29;
  }
  atomic_store(1u, v15);
  WTF::fastFree((WTF *)v15, a2);
  v18 = qword_1ECEC9768;
  ++*(_DWORD *)(qword_1ECEC9768 - 16);
  if (v18)
  {
LABEL_26:
    --*(_DWORD *)(v18 - 12);
    v19 = qword_1ECEC9768;
    if (!qword_1ECEC9768)
      goto LABEL_36;
    goto LABEL_30;
  }
LABEL_29:
  *(_DWORD *)(v18 - 12) = -1;
  v19 = qword_1ECEC9768;
  if (!qword_1ECEC9768)
    goto LABEL_36;
LABEL_30:
  v20 = 6 * *(_DWORD *)(v19 - 12);
  v21 = *(_DWORD *)(v19 - 4);
  if (v20 < v21 && v21 >= 9)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v21 >> 1);
LABEL_36:
  if (!*((_BYTE *)this + 60))
    goto LABEL_37;
  while (1)
  {
    v23 = (WebCore::StorageSyncManager *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (!v23)
      goto LABEL_41;
    if (*(_DWORD *)v23 != 1)
    {
      --*(_DWORD *)v23;
LABEL_41:
      v24 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = 0;
      if (!v24)
        goto LABEL_46;
      goto LABEL_44;
    }
    WebCore::StorageSyncManager::~StorageSyncManager(v23, a2);
    WTF::fastFree(v25, v26);
    v24 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v24)
      goto LABEL_46;
LABEL_44:
    if (*(_DWORD *)v24 != 2)
    {
      *(_DWORD *)v24 -= 2;
LABEL_46:
      v27 = *((_QWORD *)this + 3);
      if (!v27)
        break;
      goto LABEL_53;
    }
    WTF::StringImpl::destroy(v24, a2);
    v27 = *((_QWORD *)this + 3);
    if (!v27)
      break;
LABEL_53:
    v32 = *(unsigned int *)(v27 - 4);
    if (!(_DWORD)v32)
    {
LABEL_66:
      WTF::fastFree((WTF *)(v27 - 16), a2);
      v28 = *((_QWORD *)this + 2);
      if (!v28)
        goto LABEL_67;
      goto LABEL_48;
    }
    v33 = v27;
    while (1)
    {
      v34 = *(unsigned int *)(v33 + 24);
      if ((_DWORD)v34 == -1)
        break;
      v38 = &v37;
      if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v34])(&v38, v33) & 1) != 0)goto LABEL_56;
      v35 = *(_DWORD **)(v33 + 32);
      *(_QWORD *)(v33 + 32) = 0;
      if (!v35)
        goto LABEL_62;
      if (v35[2] != 1)
      {
        --v35[2];
LABEL_62:
        v36 = *(unsigned int *)(v33 + 24);
        if ((_DWORD)v36 == -1)
          goto LABEL_55;
LABEL_65:
        ((void (*)(char *, uint64_t))off_1E9D6A280[v36])(&v39, v33);
        goto LABEL_55;
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
      v36 = *(unsigned int *)(v33 + 24);
      if ((_DWORD)v36 != -1)
        goto LABEL_65;
LABEL_55:
      *(_DWORD *)(v33 + 24) = -1;
LABEL_56:
      v33 += 40;
      if (!--v32)
        goto LABEL_66;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_70:
    qword_1ECEC9768 = 0;
    _MergedGlobals_6 = 1;
    if (!*((_BYTE *)this + 60))
LABEL_37:
      WebKit::StorageNamespaceImpl::close(this, a2, a3);
  }
  v28 = *((_QWORD *)this + 2);
  if (!v28)
  {
LABEL_67:
    *((_QWORD *)this + 2) = 0;
    return;
  }
LABEL_48:
  *(_QWORD *)(v28 + 8) = 0;
  v29 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, a2);
    }
  }
}

{
  WTF *v3;
  void *v4;

  WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(this, a2, a3);
  WTF::fastFree(v3, v4);
}

void WebKit::StorageNamespaceImpl::close(WebKit::StorageNamespaceImpl *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::StorageAreaSync *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::StorageSyncManager *v14;
  WebKit::StorageNamespaceImpl *v15;
  char v16;
  char *v17;

  if (!*((_BYTE *)this + 60) && *((_BYTE *)this + 32))
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
    {
      v5 = *(unsigned int *)(v4 - 4);
      v6 = v4 + 40 * v5;
      if (*(_DWORD *)(v4 - 12))
      {
        if ((_DWORD)v5)
        {
          v7 = 40 * v5;
          while (1)
          {
            v8 = *(unsigned int *)(v4 + 24);
            if ((_DWORD)v8 == -1)
              goto LABEL_34;
            v17 = &v16;
            if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v17, v4) & 1) == 0)
            {
              v9 = *(unsigned int *)(v4 + 24);
              if ((_DWORD)v9 == -1)
                goto LABEL_34;
              v17 = &v16;
              if (!((unsigned int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v17, v4))break;
            }
            v4 += 40;
            v7 -= 40;
            if (!v7)
            {
              v4 = v6;
              break;
            }
          }
        }
        if (v6 != v4)
        {
          while (1)
          {
            v10 = *(WebKit::StorageAreaSync **)(*(_QWORD *)(v4 + 32) + 40);
            if (v10)
              WebKit::StorageAreaSync::scheduleFinalSync(v10, a2, a3);
            v11 = v4 + 40;
            v4 = v6;
            if (v11 != v6)
              break;
LABEL_19:
            if (v4 == v6)
              goto LABEL_30;
          }
          v4 = v11;
          while (1)
          {
            v12 = *(unsigned int *)(v4 + 24);
            if ((_DWORD)v12 == -1)
              break;
            v17 = &v16;
            if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v17, v4) & 1) == 0)
            {
              v13 = *(unsigned int *)(v4 + 24);
              if ((_DWORD)v13 == -1)
                break;
              v17 = &v16;
              if (!((unsigned int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v13])(&v17, v4))goto LABEL_19;
            }
            v4 += 40;
            if (v4 == v6)
            {
              v4 = v6;
              goto LABEL_19;
            }
          }
LABEL_34:
          v15 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
          WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(v15);
          return;
        }
      }
    }
LABEL_30:
    v14 = (WebCore::StorageSyncManager *)*((_QWORD *)this + 6);
    if (v14)
      WebCore::StorageSyncManager::close(v14);
    *((_BYTE *)this + 60) = 1;
  }
}

uint64_t WebKit::StorageNamespaceImpl::copy@<X0>(WebKit::StorageNamespaceImpl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _DWORD *v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  WebKit::StorageNamespaceImpl *v44;
  const WebCore::SecurityOrigin *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  char *v52;

  v47 = WTF::fastMalloc((WTF *)0x48);
  result = WebKit::StorageNamespaceImpl::StorageNamespaceImpl(v47, *((_BYTE *)this + 32), (uint64_t)this + 40, *((_DWORD *)this + 14), *((_QWORD *)this + 8));
  v6 = *((_QWORD *)this + 3);
  if (!v6)
  {
    v12 = 0;
    LODWORD(v7) = 0;
    goto LABEL_13;
  }
  v7 = *(unsigned int *)(v6 - 4);
  v8 = v6 + 40 * v7;
  if (!*(_DWORD *)(v6 - 12))
  {
    v12 = v6 + 40 * v7;
LABEL_13:
    v8 = v6 + 40 * v7;
    v46 = a2;
    if (v6)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (!(_DWORD)v7)
  {
    v12 = *((_QWORD *)this + 3);
    v46 = a2;
    goto LABEL_17;
  }
  v9 = 40 * v7;
  while (1)
  {
    v10 = *(unsigned int *)(v6 + 24);
    if ((_DWORD)v10 == -1)
      break;
    v52 = &v51;
    result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v52, v6);
    if ((result & 1) == 0)
    {
      v11 = *(unsigned int *)(v6 + 24);
      if ((_DWORD)v11 == -1)
        break;
      v52 = &v51;
      result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v11])(&v52, v6);
      if (!(_DWORD)result)
        goto LABEL_16;
    }
    v6 += 40;
    v9 -= 40;
    if (!v9)
    {
      v6 = v8;
LABEL_16:
      v12 = v6;
      v6 = *((_QWORD *)this + 3);
      v46 = a2;
      if (v6)
      {
LABEL_17:
        v13 = v6 + 40 * *(unsigned int *)(v6 - 4);
        if (v13 == v12)
        {
LABEL_76:
          *v46 = v47;
          return result;
        }
LABEL_21:
        v14 = (uint64_t *)(v47 + 24);
        v50 = v8;
        v48 = v13;
        v49 = (uint64_t *)(v47 + 24);
LABEL_24:
        v15 = *(_QWORD *)(v12 + 32);
        v16 = WTF::fastMalloc((WTF *)0x78);
        v17 = v16;
        *(_DWORD *)(v16 + 8) = 1;
        *(_QWORD *)v16 = off_1E9D6A020;
        *(_BYTE *)(v16 + 12) = *(_BYTE *)(v15 + 12);
        v18 = *(unsigned int **)(v15 + 16);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        *(_QWORD *)(v16 + 16) = v18;
        v20 = *(_DWORD **)(v15 + 24);
        ++*v20;
        *(_QWORD *)(v16 + 24) = v20;
        *(_DWORD *)(v16 + 32) = *(_DWORD *)(v15 + 32);
        *(_QWORD *)(v16 + 40) = 0;
        v21 = *(_DWORD **)(v15 + 48);
        if (v21)
          ++*v21;
        *(_QWORD *)(v16 + 48) = v21;
        *(_DWORD *)(v16 + 56) = 0;
        WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v16 + 64));
        *(_QWORD *)(v17 + 64) = &unk_1E9D6A108;
        v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v22 = off_1E9D6A0B8;
        v22[1] = WebKit::StorageAreaImpl::closeDatabaseTimerFired;
        v22[2] = 0;
        v22[3] = v17;
        *(_QWORD *)(v17 + 112) = v22;
        v23 = *v14;
        if (*v14
          || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v14, 8u, 0), (v23 = *v14) != 0))
        {
          v24 = *(_DWORD *)(v23 - 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = WTF::computeHash<WebCore::SecurityOriginData>(v12) & v24;
        v26 = v23 + 40 * v25;
        v28 = (unsigned int *)(v26 + 24);
        v27 = *(unsigned int *)(v26 + 24);
        if (*(_DWORD *)(v26 + 24) == -1)
          break;
        v29 = 0;
        v30 = 1;
        while (1)
        {
          v52 = &v51;
          if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v27])(&v52, v26) & 1) != 0)
          {
            v14 = (uint64_t *)(v47 + 24);
            if (v29)
            {
              *(_QWORD *)(v29 + 32) = 0;
              *(_OWORD *)v29 = 0u;
              *(_OWORD *)(v29 + 16) = 0u;
              --*(_DWORD *)(*v49 - 16);
              v26 = v29;
            }
            v35 = *(unsigned int *)(v26 + 24);
            v36 = *(unsigned int *)(v12 + 24);
            v32 = v50;
            if ((_DWORD)v35 == -1)
            {
              v33 = v48;
              if ((_DWORD)v36 != -1)
                goto LABEL_49;
            }
            else
            {
              v33 = v48;
              if ((_DWORD)v36 == -1)
              {
                ((void (*)(char **, uint64_t))off_1E9D6A280[v35])(&v52, v26);
                *(_DWORD *)(v26 + 24) = -1;
                goto LABEL_50;
              }
LABEL_49:
              v52 = (char *)v26;
              ((void (*)(char **, uint64_t, uint64_t))off_1E9D6A2C0[v36])(&v52, v26, v12);
            }
LABEL_50:
            result = *(_QWORD *)(v26 + 32);
            *(_QWORD *)(v26 + 32) = v17;
            if (result)
            {
              if (*(_DWORD *)(result + 8) != 1)
              {
                --*(_DWORD *)(result + 8);
                goto LABEL_53;
              }
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              v37 = *v49;
              if (!*v49)
              {
LABEL_60:
                *(_DWORD *)(v37 - 12) = 1;
                v38 = *v49;
                if (!*v49)
                {
LABEL_61:
                  v39 = *(unsigned int *)(v38 - 16);
                  v40 = *(unsigned int *)(v38 - 4);
                  if (v40 > 0x400)
                    goto LABEL_62;
LABEL_56:
                  if (3 * v40 > 4 * v39)
                    goto LABEL_65;
                  if (!(_DWORD)v40)
                  {
                    v41 = 8;
LABEL_64:
                    result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v49, v41, v26);
                    goto LABEL_65;
                  }
LABEL_63:
                  v41 = (_DWORD)v40 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v40));
                  goto LABEL_64;
                }
LABEL_55:
                v39 = (*(_DWORD *)(v38 - 16) + *(_DWORD *)(v38 - 12));
                v40 = *(unsigned int *)(v38 - 4);
                if (v40 <= 0x400)
                  goto LABEL_56;
LABEL_62:
                if (v40 > 2 * v39)
                  goto LABEL_65;
                goto LABEL_63;
              }
            }
            else
            {
LABEL_53:
              v37 = *v49;
              if (!*v49)
                goto LABEL_60;
            }
            ++*(_DWORD *)(v37 - 12);
            v38 = *v49;
            if (!*v49)
              goto LABEL_61;
            goto LABEL_55;
          }
          v31 = *v28;
          if ((_DWORD)v31 == -1)
            goto LABEL_77;
          v52 = &v51;
          if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v31])(&v52, v26) & 1) != 0)
          {
            v29 = v26;
          }
          else if (WebCore::operator==())
          {
            result = *(_QWORD *)(v26 + 32);
            *(_QWORD *)(v26 + 32) = v17;
            v14 = (uint64_t *)(v47 + 24);
            v32 = v50;
            v33 = v48;
            if (result)
            {
              if (*(_DWORD *)(result + 8) == 1)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                v34 = v12 + 40;
                v12 = v50;
                if (v34 == v50)
                  goto LABEL_23;
              }
              else
              {
                --*(_DWORD *)(result + 8);
                v34 = v12 + 40;
                v12 = v50;
                if (v34 == v50)
                  goto LABEL_23;
              }
LABEL_66:
              v12 = v34;
              while (1)
              {
                v42 = *(unsigned int *)(v12 + 24);
                if ((_DWORD)v42 == -1)
                  goto LABEL_77;
                v52 = &v51;
                result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v42])(&v52, v12);
                if ((result & 1) == 0)
                {
                  v43 = *(unsigned int *)(v12 + 24);
                  if ((_DWORD)v43 == -1)
                    goto LABEL_77;
                  v52 = &v51;
                  result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v43])(&v52, v12);
                  if (!(_DWORD)result)
                    goto LABEL_23;
                }
                v12 += 40;
                if (v12 == v32)
                {
                  v12 = v32;
                  goto LABEL_23;
                }
              }
            }
LABEL_65:
            v34 = v12 + 40;
            v12 = v32;
            if (v34 != v32)
              goto LABEL_66;
LABEL_23:
            if (v12 == v33)
              goto LABEL_76;
            goto LABEL_24;
          }
          v25 = (v25 + v30) & v24;
          v26 = v23 + 40 * v25;
          v28 = (unsigned int *)(v26 + 24);
          v27 = *(unsigned int *)(v26 + 24);
          ++v30;
          if (*(_DWORD *)(v26 + 24) == -1)
            goto LABEL_77;
        }
      }
LABEL_20:
      v13 = 0;
      if (!v12)
        goto LABEL_76;
      goto LABEL_21;
    }
  }
LABEL_77:
  v44 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::StorageNamespaceImpl::storageArea(v44, v45);
}

uint64_t WebKit::StorageNamespaceImpl::storageArea@<X0>(WebKit::StorageNamespaceImpl *this@<X0>, const WebCore::SecurityOrigin *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  WebKit::StorageNamespaceImpl *v16;
  char v17;
  WebCore::StorageSyncManager *v18;
  StringImpl *v19;
  WebCore::StorageSyncManager *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  WebKit::StorageNamespaceImpl *v31;
  uint64_t *v34;
  char *v36;
  uint64_t v37;
  WebCore::StorageSyncManager *v38;

  v3 = (uint64_t *)((char *)this + 24);
  v4 = *((_QWORD *)this + 3);
  v36 = (char *)a2 + 8;
  v34 = (uint64_t *)((char *)this + 24);
  if (v4
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)this + 3, 8u, 0), (v4 = *v3) != 0))
  {
    v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = WTF::computeHash<WebCore::SecurityOriginData>((uint64_t)v36) & v5;
  v7 = v4 + 40 * v6;
  v9 = (unsigned int *)(v7 + 24);
  v8 = *(unsigned int *)(v7 + 24);
  if (*(_DWORD *)(v7 + 24) != -1)
  {
    v10 = 0;
    v11 = 1;
    while (1)
    {
      v38 = (WebCore::StorageSyncManager *)&v37;
      if ((((uint64_t (*)(WebCore::StorageSyncManager **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v38, v7) & 1) != 0)break;
      v12 = *v9;
      if ((_DWORD)v12 == -1)
        goto LABEL_46;
      v38 = (WebCore::StorageSyncManager *)&v37;
      if ((((uint64_t (*)(WebCore::StorageSyncManager **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v38, v7) & 1) != 0)
      {
        v10 = v7;
      }
      else
      {
        result = WebCore::operator==();
        if ((result & 1) != 0)
          goto LABEL_41;
      }
      v6 = (v6 + v11) & v5;
      v7 = v4 + 40 * v6;
      v9 = (unsigned int *)(v7 + 24);
      v8 = *(unsigned int *)(v7 + 24);
      ++v11;
      if (*(_DWORD *)(v7 + 24) == -1)
        goto LABEL_46;
    }
    if (v10)
    {
      *(_QWORD *)(v10 + 32) = 0;
      *(_OWORD *)v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      --*(_DWORD *)(*v34 - 16);
      v7 = v10;
    }
    v14 = *(unsigned int *)(v7 + 24);
    v15 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v14 == -1)
    {
      v16 = this;
      if ((_DWORD)v15 == -1)
        goto LABEL_20;
    }
    else
    {
      v16 = this;
      if ((_DWORD)v15 == -1)
      {
        ((void (*)(WebCore::StorageSyncManager **, uint64_t))off_1E9D6A280[v14])(&v38, v7);
        *(_DWORD *)(v7 + 24) = -1;
        goto LABEL_20;
      }
    }
    v38 = (WebCore::StorageSyncManager *)v7;
    ((void (*)(WebCore::StorageSyncManager **, uint64_t, char *))off_1E9D6A2C0[v15])(&v38, v7, v36);
LABEL_20:
    v17 = *((_BYTE *)v16 + 32);
    v18 = (WebCore::StorageSyncManager *)*((_QWORD *)v16 + 6);
    if (v18)
      ++*(_DWORD *)v18;
    v38 = v18;
    WebKit::StorageAreaImpl::create(v17, (unsigned int *)a2, (uint64_t *)&v38, &v37);
    v20 = v38;
    v38 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WebCore::StorageSyncManager::~StorageSyncManager(v20, v19);
        WTF::fastFree(v22, v23);
        v24 = v37;
        v37 = 0;
        result = *(_QWORD *)(v7 + 32);
        *(_QWORD *)(v7 + 32) = v24;
        if (!result)
          goto LABEL_30;
LABEL_28:
        v25 = *(_DWORD *)(result + 8) - 1;
        if (*(_DWORD *)(result + 8) != 1)
          goto LABEL_29;
        (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        result = v37;
        v37 = 0;
        if (!result)
          goto LABEL_30;
        v25 = *(_DWORD *)(result + 8) - 1;
        if (*(_DWORD *)(result + 8) != 1)
        {
LABEL_29:
          *(_DWORD *)(result + 8) = v25;
          goto LABEL_30;
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_30:
        if (*v34)
        {
          ++*(_DWORD *)(*v34 - 12);
          v26 = *v34;
          if (*v34)
            goto LABEL_32;
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          v26 = *v34;
          if (*v34)
          {
LABEL_32:
            v27 = (*(_DWORD *)(v26 - 16) + *(_DWORD *)(v26 - 12));
            v28 = *(unsigned int *)(v26 - 4);
            if (v28 <= 0x400)
              goto LABEL_33;
            goto LABEL_38;
          }
        }
        v27 = *(unsigned int *)(v26 - 16);
        v28 = *(unsigned int *)(v26 - 4);
        if (v28 <= 0x400)
        {
LABEL_33:
          if (3 * v28 <= 4 * v27)
          {
            if (!(_DWORD)v28)
            {
              v29 = 8;
LABEL_40:
              result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v34, v29, v7);
              v7 = result;
              goto LABEL_41;
            }
LABEL_39:
            v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v28));
            goto LABEL_40;
          }
LABEL_41:
          v30 = *(_QWORD *)(v7 + 32);
          ++*(_DWORD *)(v30 + 8);
          *a3 = v30;
          return result;
        }
LABEL_38:
        if (v28 <= 2 * v27)
          goto LABEL_39;
        goto LABEL_41;
      }
      --*(_DWORD *)v20;
    }
    v21 = v37;
    v37 = 0;
    result = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 32) = v21;
    if (!result)
      goto LABEL_30;
    goto LABEL_28;
  }
LABEL_46:
  v31 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::StorageNamespaceImpl::clearAllOriginsForDeletion(v31);
}

uint64_t WebKit::StorageNamespaceImpl::clearAllOriginsForDeletion(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::StorageNamespaceImpl *v10;
  char v11;
  char *v12;

  v1 = *(_QWORD *)(this + 24);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 - 4);
  v3 = v1 + 40 * v2;
  if (!*(_DWORD *)(v1 - 12))
    return v1 + 40 * v2;
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    while (1)
    {
      v5 = *(unsigned int *)(v1 + 24);
      if ((_DWORD)v5 == -1)
        goto LABEL_27;
      v12 = &v11;
      this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v5])(&v12, v1);
      if ((this & 1) == 0)
      {
        v6 = *(unsigned int *)(v1 + 24);
        if ((_DWORD)v6 == -1)
          goto LABEL_27;
        v12 = &v11;
        this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v12, v1);
        if (!(_DWORD)this)
          break;
      }
      v1 += 40;
      v4 -= 40;
      if (!v4)
      {
        v1 = v3;
        break;
      }
    }
  }
  if (v3 != v1)
  {
    while (1)
    {
      this = WebKit::StorageAreaImpl::clearForOriginDeletion(*(WebKit::StorageAreaImpl **)(v1 + 32));
      v7 = v1 + 40;
      v1 = v3;
      if (v7 != v3)
        break;
LABEL_17:
      if (v1 == v3)
        return this;
    }
    v1 = v7;
    while (1)
    {
      v8 = *(unsigned int *)(v1 + 24);
      if ((_DWORD)v8 == -1)
        break;
      v12 = &v11;
      this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v12, v1);
      if ((this & 1) == 0)
      {
        v9 = *(unsigned int *)(v1 + 24);
        if ((_DWORD)v9 == -1)
          break;
        v12 = &v11;
        this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v12, v1);
        if (!(_DWORD)this)
          goto LABEL_17;
      }
      v1 += 40;
      if (v1 == v3)
      {
        v1 = v3;
        goto LABEL_17;
      }
    }
LABEL_27:
    v10 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::StorageNamespaceImpl::sync(v10);
  }
  return this;
}

uint64_t WebKit::StorageNamespaceImpl::sync(uint64_t this, StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;

  v3 = *(_QWORD *)(this + 24);
  if (!v3)
    return 0;
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 40 * v4;
  if (!*(_DWORD *)(v3 - 12))
    return v3 + 40 * v4;
  if ((_DWORD)v4)
  {
    v6 = 40 * v4;
    while (1)
    {
      v7 = *(unsigned int *)(v3 + 24);
      if ((_DWORD)v7 == -1)
        goto LABEL_27;
      v14 = &v13;
      this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v7])(&v14, v3);
      if ((this & 1) == 0)
      {
        v8 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v8 == -1)
          goto LABEL_27;
        v14 = &v13;
        this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v14, v3);
        if (!(_DWORD)this)
          break;
      }
      v3 += 40;
      v6 -= 40;
      if (!v6)
      {
        v3 = v5;
        break;
      }
    }
  }
  if (v5 != v3)
  {
    while (1)
    {
      this = WebKit::StorageAreaImpl::sync(*(_QWORD *)(v3 + 32), a2, a3);
      v9 = v3 + 40;
      v3 = v5;
      if (v9 != v5)
        break;
LABEL_17:
      if (v3 == v5)
        return this;
    }
    v3 = v9;
    while (1)
    {
      v10 = *(unsigned int *)(v3 + 24);
      if ((_DWORD)v10 == -1)
        break;
      v14 = &v13;
      this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v14, v3);
      if ((this & 1) == 0)
      {
        v11 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v11 == -1)
          break;
        v14 = &v13;
        this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v11])(&v14, v3);
        if (!(_DWORD)this)
          goto LABEL_17;
      }
      v3 += 40;
      if (v3 == v5)
      {
        v3 = v5;
        goto LABEL_17;
      }
    }
LABEL_27:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::StorageNamespaceImpl::closeIdleLocalStorageDatabases(v12);
  }
  return this;
}

uint64_t WebKit::StorageNamespaceImpl::closeIdleLocalStorageDatabases(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  SessionID v13;

  v1 = *(_QWORD *)(this + 24);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 - 4);
  v3 = v1 + 40 * v2;
  if (!*(_DWORD *)(v1 - 12))
    return v1 + 40 * v2;
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    while (1)
    {
      v5 = *(unsigned int *)(v1 + 24);
      if ((_DWORD)v5 == -1)
        goto LABEL_27;
      v12 = &v11;
      this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v5])(&v12, v1);
      if ((this & 1) == 0)
      {
        v6 = *(unsigned int *)(v1 + 24);
        if ((_DWORD)v6 == -1)
          goto LABEL_27;
        v12 = &v11;
        this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v12, v1);
        if (!(_DWORD)this)
          break;
      }
      v1 += 40;
      v4 -= 40;
      if (!v4)
      {
        v1 = v3;
        break;
      }
    }
  }
  if (v3 != v1)
  {
    while (1)
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 104))(*(_QWORD *)(v1 + 32));
      v7 = v1 + 40;
      v1 = v3;
      if (v7 != v3)
        break;
LABEL_17:
      if (v1 == v3)
        return this;
    }
    v1 = v7;
    while (1)
    {
      v8 = *(unsigned int *)(v1 + 24);
      if ((_DWORD)v8 == -1)
        break;
      v12 = &v11;
      this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v12, v1);
      if ((this & 1) == 0)
      {
        v9 = *(unsigned int *)(v1 + 24);
        if ((_DWORD)v9 == -1)
          break;
        v12 = &v11;
        this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v12, v1);
        if (!(_DWORD)this)
          goto LABEL_17;
      }
      v1 += 40;
      if (v1 == v3)
      {
        v1 = v3;
        goto LABEL_17;
      }
    }
LABEL_27:
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::StorageNamespaceImpl::setSessionIDForTesting(v10, v13);
  }
  return this;
}

uint64_t WebKit::StorageNamespaceImpl::setSessionIDForTesting(uint64_t this, SessionID a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::StorageAreaImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::StorageNamespaceImpl *v16;
  char v17;
  char *v18;

  *(SessionID *)(this + 64) = a2;
  v3 = *(_QWORD *)(this + 24);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 40 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      if (!(_DWORD)v4)
      {
        v10 = *(_QWORD *)(this + 24);
        goto LABEL_17;
      }
      v6 = this;
      v7 = 40 * v4;
      while (1)
      {
        v8 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v8 == -1)
          goto LABEL_39;
        v18 = &v17;
        this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v18, v3);
        if ((this & 1) == 0)
        {
          v9 = *(unsigned int *)(v3 + 24);
          if ((_DWORD)v9 == -1)
            goto LABEL_39;
          v18 = &v17;
          this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v18, v3);
          if (!(_DWORD)this)
            break;
        }
        v3 += 40;
        v7 -= 40;
        if (!v7)
        {
          v3 = v5;
          break;
        }
      }
      v10 = v3;
      v3 = *(_QWORD *)(v6 + 24);
      if (v3)
      {
LABEL_17:
        v11 = v3 + 40 * *(unsigned int *)(v3 - 4);
        if (v11 != v10)
          goto LABEL_24;
        return this;
      }
      goto LABEL_20;
    }
    v10 = v3 + 40 * v4;
  }
  else
  {
    v10 = 0;
    LODWORD(v4) = 0;
  }
  v5 = v3 + 40 * v4;
  if (v3)
    goto LABEL_17;
LABEL_20:
  v11 = 0;
  if (!v10)
    return this;
LABEL_24:
  while (1)
  {
    v12 = *(WebKit::StorageAreaImpl **)(v10 + 32);
    if (!v12)
      break;
    ++*((_DWORD *)v12 + 2);
    this = (uint64_t)WebKit::StorageAreaImpl::sessionChanged(v12, (uint64_t)a2.m_identifier > -2);
    if (*((_DWORD *)v12 + 2) == 1)
    {
      this = (*(uint64_t (**)(WebKit::StorageAreaImpl *))(*(_QWORD *)v12 + 8))(v12);
      v13 = v10 + 40;
      v10 = v5;
      if (v13 != v5)
        goto LABEL_29;
    }
    else
    {
      --*((_DWORD *)v12 + 2);
      v13 = v10 + 40;
      v10 = v5;
      if (v13 != v5)
        goto LABEL_29;
    }
LABEL_23:
    if (v10 == v11)
      return this;
  }
  this = (uint64_t)WebKit::StorageAreaImpl::sessionChanged(0, (uint64_t)a2.m_identifier > -2);
  v13 = v10 + 40;
  v10 = v5;
  if (v13 == v5)
    goto LABEL_23;
LABEL_29:
  v10 = v13;
  while (1)
  {
    v14 = *(unsigned int *)(v10 + 24);
    if ((_DWORD)v14 == -1)
      break;
    v18 = &v17;
    this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v14])(&v18, v10);
    if ((this & 1) == 0)
    {
      v15 = *(unsigned int *)(v10 + 24);
      if ((_DWORD)v15 == -1)
        break;
      v18 = &v17;
      this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v18, v10);
      if (!(_DWORD)this)
        goto LABEL_23;
    }
    v10 += 40;
    if (v10 == v5)
    {
      v10 = v5;
      goto LABEL_23;
    }
  }
LABEL_39:
  v16 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::StorageNamespaceImpl::topLevelOrigin(v16);
}

uint64_t WebKit::StorageNamespaceImpl::topLevelOrigin(WebKit::StorageNamespaceImpl *this)
{
  return 0;
}

uint64_t WebKit::StorageNamespaceImpl::sessionID(WebKit::StorageNamespaceImpl *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t WebCore::StorageNamespace::storageAreaMapCountForTesting(WebCore::StorageNamespace *this)
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, _QWORD *a2)
{
  return *a2 == -1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<WebKit::StorageNamespaceImpl,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  v2 = qword_1ECEC9768;
  if (qword_1ECEC9768)
  {
    v3 = *(_DWORD *)(qword_1ECEC9768 - 4);
    v4 = *(_DWORD *)(qword_1ECEC9768 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECEC9768 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECEC9768 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (WTF::StringImpl **)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 == (WTF::StringImpl *)-1)
        goto LABEL_7;
      if (v9)
        break;
      v10 = v2 + 16 * v7;
      v11 = *(unsigned int **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (!v11)
        goto LABEL_13;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v6);
        v14 = *v8;
        *v8 = 0;
        if (!v14)
          goto LABEL_7;
      }
      else
      {
LABEL_13:
        v14 = *v8;
        *v8 = 0;
        if (!v14)
          goto LABEL_7;
      }
      if (*(_DWORD *)v14 == 2)
        goto LABEL_36;
      *(_DWORD *)v14 -= 2;
LABEL_7:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
    v15 = qword_1ECEC9768;
    if (qword_1ECEC9768)
    {
      v16 = *(_DWORD *)(qword_1ECEC9768 - 8);
      v17 = *((_DWORD *)v9 + 4);
      if (v17 >= 0x100)
      {
LABEL_18:
        v18 = v17 >> 8;
        goto LABEL_21;
      }
    }
    else
    {
      v16 = 0;
      v17 = *((_DWORD *)v9 + 4);
      if (v17 >= 0x100)
        goto LABEL_18;
    }
    v18 = WTF::StringImpl::hashSlowCase(v9);
LABEL_21:
    v19 = 0;
    do
    {
      v20 = v18 & v16;
      v18 = ++v19 + v20;
    }
    while (*(_QWORD *)(v15 + 16 * v20));
    v21 = v15 + 16 * v20;
    v22 = *(unsigned int **)(v21 + 8);
    *(_QWORD *)(v21 + 8) = 0;
    if (!v22)
      goto LABEL_26;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v6);
      v25 = *(WTF::StringImpl **)v21;
      *(_QWORD *)v21 = 0;
      if (!v25)
        goto LABEL_31;
    }
    else
    {
LABEL_26:
      v25 = *(WTF::StringImpl **)v21;
      *(_QWORD *)v21 = 0;
      if (!v25)
        goto LABEL_31;
    }
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v6);
    else
      *(_DWORD *)v25 -= 2;
LABEL_31:
    v26 = *v8;
    *v8 = 0;
    *(_QWORD *)v21 = v26;
    v27 = v2 + 16 * v7;
    v28 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)(v27 + 8) = 0;
    *(_QWORD *)(v21 + 8) = v28;
    v29 = *(unsigned int **)(v27 + 8);
    *(_QWORD *)(v27 + 8) = 0;
    if (!v29)
      goto LABEL_34;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v6);
      v14 = *v8;
      *v8 = 0;
      if (!v14)
        goto LABEL_7;
    }
    else
    {
LABEL_34:
      v14 = *v8;
      *v8 = 0;
      if (!v14)
        goto LABEL_7;
    }
    if (*(_DWORD *)v14 == 2)
    {
LABEL_36:
      WTF::StringImpl::destroy(v14, v6);
      goto LABEL_7;
    }
    *(_DWORD *)v14 -= 2;
    goto LABEL_7;
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_OWORD *)a2 == 0 && *(_BYTE *)(a2 + 18) == 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v42;
  char v43;
  char *v44;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v39 = v4;
    while (1)
    {
      v14 = v4 + 40 * v11;
      v15 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v15 == -1)
      {
LABEL_49:
        v38 = std::__throw_bad_variant_access[abi:sn180100]();
        return WTF::computeHash<WebCore::SecurityOriginData>(v38);
      }
      v44 = &v43;
      if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v44, v4 + 40 * v11) & 1) == 0)break;
LABEL_9:
      if (++v11 == v13)
        goto LABEL_47;
    }
    v16 = *(unsigned int *)(v14 + 24);
    if ((_DWORD)v16 == -1)
      goto LABEL_49;
    v44 = &v43;
    if (!((unsigned int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v44, v4 + 40 * v11))
    {
      v20 = *a1;
      v42 = v12;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 8);
      else
        v21 = 0;
      v22 = WTF::computeHash<WebCore::SecurityOriginData>(v4 + 40 * v11);
      v23 = 0;
      do
      {
        v24 = v22 & v21;
        v12 = v20 + 40 * (v22 & v21);
        v25 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v25 == -1)
          goto LABEL_49;
        v44 = &v43;
        v26 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v25])(&v44, v20 + 40 * v24);
        v22 = ++v23 + v24;
      }
      while (!v26);
      v27 = v20 + 40 * v24;
      v30 = *(_DWORD **)(v27 + 32);
      v29 = (_QWORD *)(v27 + 32);
      v28 = v30;
      *v29 = 0;
      v4 = v39;
      if (v30)
      {
        if (v28[2] != 1)
        {
          --v28[2];
          goto LABEL_28;
        }
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
        v31 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v31 == -1)
        {
LABEL_30:
          *(_BYTE *)v12 = 0;
          *(_DWORD *)(v12 + 24) = -1;
          v32 = *(unsigned int *)(v14 + 24);
          if ((_DWORD)v32 != -1)
          {
            ((void (*)(char **, uint64_t, uint64_t))off_1E9D6A2B0[v32])(&v44, v12, v14);
            *(_DWORD *)(v12 + 24) = v32;
          }
          v33 = v39 + 40 * v11;
          v34 = *(_QWORD *)(v33 + 32);
          *(_QWORD *)(v33 + 32) = 0;
          *v29 = v34;
          v35 = *(_DWORD **)(v33 + 32);
          *(_QWORD *)(v33 + 32) = 0;
          v13 = v5;
          if (v35)
          {
            if (v35[2] != 1)
            {
              --v35[2];
              goto LABEL_35;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
            v36 = *(unsigned int *)(v14 + 24);
            if ((_DWORD)v36 == -1)
            {
LABEL_37:
              *(_DWORD *)(v14 + 24) = -1;
              if (v14 != a3)
                v12 = v42;
              goto LABEL_9;
            }
          }
          else
          {
LABEL_35:
            v36 = *(unsigned int *)(v14 + 24);
            if ((_DWORD)v36 == -1)
              goto LABEL_37;
          }
          ((void (*)(char **, uint64_t))off_1E9D6A280[v36])(&v44, v14);
          goto LABEL_37;
        }
      }
      else
      {
LABEL_28:
        v31 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v31 == -1)
          goto LABEL_30;
      }
      ((void (*)(char **, uint64_t))off_1E9D6A280[v31])(&v44, v12);
      goto LABEL_30;
    }
    v17 = v4 + 40 * v11;
    v18 = *(_DWORD **)(v17 + 32);
    *(_QWORD *)(v17 + 32) = 0;
    if (v18)
    {
      if (v18[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        v19 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v19 == -1)
        {
LABEL_8:
          *(_DWORD *)(v14 + 24) = -1;
          goto LABEL_9;
        }
LABEL_41:
        ((void (*)(char **, uint64_t))off_1E9D6A280[v19])(&v44, v4 + 40 * v11);
        goto LABEL_8;
      }
      --v18[2];
    }
    v19 = *(unsigned int *)(v14 + 24);
    if ((_DWORD)v19 == -1)
      goto LABEL_8;
    goto LABEL_41;
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_47:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

uint64_t WTF::computeHash<WebCore::SecurityOriginData>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 v13;
  char v14;
  unsigned int *v15;
  unsigned int **v16;

  v13 = 0;
  v14 = 0;
  v1 = *(unsigned int *)(a1 + 24);
  v15 = &v12;
  if ((_DWORD)v1 == -1)
    v2 = -1;
  else
    v2 = v1;
  v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  v12 = v4 + (v4 >> 11);
  if ((_DWORD)v1 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SJ_EEEEEEDcSS_DpT0_(v11);
  }
  else
  {
    v16 = &v15;
    ((void (*)(unsigned int ***, uint64_t))off_1E9D6A2A0[v1])(&v16, a1);
    v5 = v12;
    if (v14)
    {
      v6 = (v12 + v13) ^ ((v12 + v13) << 11);
      v5 = v6 + (v6 >> 17);
    }
    v7 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
    v9 = v8 ^ (v8 << 10);
    if (v9)
      return v9;
    else
      return 0x800000;
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SJ_EEEEEEDcSS_DpT0_(unsigned int ***a1, uint64_t a2)
{
  return WTF::add<WTF::String,WTF::String,std::optional<unsigned short>>(**a1, (uint64_t *)a2, (uint64_t *)(a2 + 8), (unsigned __int16 *)(a2 + 16));
}

unsigned int ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SJ_EEEEEEDcSS_DpT0_(unsigned int ***result, _QWORD *a2)
{
  unsigned int *v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;

  v2 = **result;
  v3 = *v2 + (unsigned __int16)*a2;
  v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  v5 = v4 + (unsigned __int16)WORD2(*a2) + (v4 >> 11);
  v6 = (*a2 >> 37) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  v7 = v6 + (v6 >> 11);
  *v2 = v7;
  v8 = a2[1];
  v9 = (v8 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v8) << 16) ^ (v7 + (unsigned __int16)v8);
  v10 = v9 + WORD2(v8) + (v9 >> 11);
  LODWORD(v8) = (v8 >> 37) & 0x7FFF800 ^ (v10 << 16);
  *v2 = (v8 ^ v10) + ((v8 ^ v10) >> 11);
  return result;
}

unsigned int *WTF::add<WTF::String,WTF::String,std::optional<unsigned short>>(unsigned int *result, uint64_t *a2, uint64_t *a3, unsigned __int16 *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;

  v4 = *a2;
  if (*a2)
  {
    v5 = *(_DWORD *)(v4 + 4);
    v6 = v5 & 0xFFFFFFFE;
    if ((v5 & 0xFFFFFFFE) != 0)
    {
      v7 = 0;
      v8 = *result;
      do
      {
        v11 = *(unsigned int *)(v4 + 4);
        if (v7 >= v11)
        {
          v13 = 0;
          v14 = v7 + 1;
          if (v7 + 1 < v11)
            goto LABEL_13;
        }
        else
        {
          v12 = *(_QWORD *)(v4 + 8);
          if ((*(_BYTE *)(v4 + 16) & 4) != 0)
          {
            v13 = *(unsigned __int8 *)(v12 + v7);
            v14 = v7 + 1;
            if (v7 + 1 < v11)
            {
LABEL_13:
              v15 = *(_QWORD *)(v4 + 8);
              if ((*(_BYTE *)(v4 + 16) & 4) != 0)
                v9 = *(unsigned __int8 *)(v15 + v7 + 1);
              else
                v9 = *(unsigned __int16 *)(v15 + 2 * v7 + 2);
              goto LABEL_5;
            }
          }
          else
          {
            v13 = *(unsigned __int16 *)(v12 + 2 * v7);
            v14 = v7 + 1;
            if (v7 + 1 < v11)
              goto LABEL_13;
          }
        }
        v9 = 0;
LABEL_5:
        v10 = (v13 << 11) ^ ((v8 + v9) << 16) ^ (v8 + v9);
        v8 = v10 + (v10 >> 11);
        *result = v8;
        v7 = v14 + 1;
      }
      while (v14 + 1 < v6);
    }
    if ((v5 & 1) != 0)
    {
      if (*(_DWORD *)(v4 + 4) <= v6)
      {
        v17 = 0;
      }
      else
      {
        v16 = *(_QWORD *)(v4 + 8);
        if ((*(_BYTE *)(v4 + 16) & 4) != 0)
          v17 = *(unsigned __int8 *)(v16 + v6);
        else
          v17 = *(unsigned __int16 *)(v16 + 2 * v6);
      }
      *result = ((*result + v17) ^ ((*result + v17) << 16)) + (((*result + v17) ^ ((*result + v17) << 16)) >> 11);
    }
  }
  v18 = *a3;
  if (*a3)
  {
    v19 = *(_DWORD *)(v18 + 4);
    v20 = v19 & 0xFFFFFFFE;
    if ((v19 & 0xFFFFFFFE) != 0)
    {
      v21 = 0;
      v22 = *result;
      do
      {
        v25 = *(unsigned int *)(v18 + 4);
        if (v21 >= v25)
        {
          v27 = 0;
          v28 = v21 + 1;
          if (v21 + 1 < v25)
            goto LABEL_35;
        }
        else
        {
          v26 = *(_QWORD *)(v18 + 8);
          if ((*(_BYTE *)(v18 + 16) & 4) != 0)
          {
            v27 = *(unsigned __int8 *)(v26 + v21);
            v28 = v21 + 1;
            if (v21 + 1 < v25)
            {
LABEL_35:
              v29 = *(_QWORD *)(v18 + 8);
              if ((*(_BYTE *)(v18 + 16) & 4) != 0)
                v23 = *(unsigned __int8 *)(v29 + v21 + 1);
              else
                v23 = *(unsigned __int16 *)(v29 + 2 * v21 + 2);
              goto LABEL_27;
            }
          }
          else
          {
            v27 = *(unsigned __int16 *)(v26 + 2 * v21);
            v28 = v21 + 1;
            if (v21 + 1 < v25)
              goto LABEL_35;
          }
        }
        v23 = 0;
LABEL_27:
        v24 = (v27 << 11) ^ ((v22 + v23) << 16) ^ (v22 + v23);
        v22 = v24 + (v24 >> 11);
        *result = v22;
        v21 = v28 + 1;
      }
      while (v28 + 1 < v20);
    }
    if ((v19 & 1) != 0)
    {
      if (*(_DWORD *)(v18 + 4) <= v20)
      {
        v31 = 0;
      }
      else
      {
        v30 = *(_QWORD *)(v18 + 8);
        if ((*(_BYTE *)(v18 + 16) & 4) != 0)
          v31 = *(unsigned __int8 *)(v30 + v20);
        else
          v31 = *(unsigned __int16 *)(v30 + 2 * v20);
      }
      *result = ((*result + v31) ^ ((*result + v31) << 16)) + (((*result + v31) ^ ((*result + v31) << 16)) >> 11);
    }
  }
  v32 = *((unsigned __int8 *)a4 + 2);
  v33 = (*result + v32) ^ ((*result + v32) << 16);
  v34 = v33 + (v33 >> 11);
  *result = v34;
  if (v32)
    *result = ((v34 + *a4) ^ ((v34 + *a4) << 16)) + (((v34 + *a4) ^ ((v34 + *a4) << 16)) >> 11);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKSZ_EEEDcSR_DpT0_(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKSZ_EEEDcSR_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E9D6A280[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[2] = 1;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  __int16 v12;
  char v13;

  v4 = result;
  v5 = result[6];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v7 += 2;
      v8 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, (StringImpl *)a2);
          v9 = *(_DWORD **)(a3 + 8);
          if (!v9)
            goto LABEL_10;
          goto LABEL_9;
        }
        *(_DWORD *)v8 -= 2;
      }
      v9 = *(_DWORD **)(a3 + 8);
      if (!v9)
      {
LABEL_10:
        result = *(unsigned int **)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v9;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
          else
            *result -= 2;
        }
        v12 = *(_WORD *)(a3 + 16);
        *(_BYTE *)(a2 + 18) = *(_BYTE *)(a3 + 18);
        *(_WORD *)(a2 + 16) = v12;
        return result;
      }
LABEL_9:
      *v9 += 2;
      goto LABEL_10;
    }
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E9D6A280[v5])(&v13, result);
  }
  v4[6] = -1;
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  *(_QWORD *)v4 = v10;
  v11 = *(_DWORD **)(a3 + 8);
  if (v11)
    *v11 += 2;
  *((_QWORD *)v4 + 1) = v11;
  v4[4] = *(_DWORD *)(a3 + 16);
  v4[6] = 0;
  return result;
}

void WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  WebCore::StorageSyncManager *v10;
  StringImpl *v11;
  char v12;
  char *v13;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = WTF::computeHash<WebCore::SecurityOriginData>(a2) & v3;
    v5 = v2 + 40 * v4;
    v7 = (unsigned int *)(v5 + 24);
    v6 = *(unsigned int *)(v5 + 24);
    if (*(_DWORD *)(v5 + 24) == -1)
    {
LABEL_11:
      v10 = (WebCore::StorageSyncManager *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::StorageSyncManager::~StorageSyncManager(v10, v11);
    }
    else
    {
      v8 = 1;
      while (1)
      {
        v13 = &v12;
        if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v13, v5) & 1) != 0)break;
        v9 = *v7;
        if ((_DWORD)v9 == -1)
          goto LABEL_11;
        v13 = &v12;
        if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v13, v5) & 1) == 0&& (WebCore::operator==() & 1) != 0)
        {
          break;
        }
        v4 = (v4 + v8) & v3;
        v5 = v2 + 40 * v4;
        v7 = (unsigned int *)(v5 + 24);
        v6 = *(unsigned int *)(v5 + 24);
        ++v8;
        if (*(_DWORD *)(v5 + 24) == -1)
          goto LABEL_11;
      }
    }
  }
}

void WebCore::StorageSyncManager::~StorageSyncManager(WebCore::StorageSyncManager *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v4)
      return;
LABEL_7:
    WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll((uint64_t *)(v4 + 32), a2);
    v6 = *(WTF **)(v4 + 48);
    if (v6)
    {
      *(_QWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 56) = 0;
      WTF::fastFree(v6, v5);
    }
    v7 = *(unsigned int **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (!v7)
      goto LABEL_18;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::Thread::~Thread((WTF::Thread *)v7);
      WTF::fastFree(v10, v11);
      if (!*(_DWORD *)v4)
        goto LABEL_13;
    }
    else
    {
LABEL_18:
      if (!*(_DWORD *)v4)
      {
LABEL_13:
        WTF::fastFree((WTF *)v4, v5);
        return;
      }
    }
    *(_QWORD *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    return;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    goto LABEL_7;
}

uint64_t WebCore::StorageSyncManager::fullDatabaseFilename@<X0>(WebCore::StorageSyncManager *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  _WORD *v11;
  int8x16_t *v12;
  uint64_t v13;
  _BYTE *v14;
  int8x16_t *v15;
  size_t v16;
  _BYTE *v17;
  unint64_t v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  _WORD *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  _WORD *v36;
  int8x16_t *v37;
  __int16 v38;
  _WORD *v39;
  size_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  _BYTE *v44;
  int8x16_t *v45;
  char v46;
  StringImpl *v47;
  uint8x8_t *v48;
  uint16x8_t *v49;
  unint64_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x8_t *v54;
  uint16x8_t *v55;
  unint64_t v56;
  uint8x8_t v57;
  int8x16_t *v58;
  int8x16_t *v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int16x8_t *v65;
  int8x8_t *v66;
  unint64_t v67;
  int16x8_t v68;
  uint64_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;

  v5 = (_QWORD *)((char *)this + 16);
  result = WTF::FileSystemImpl::makeAllDirectories((WebCore::StorageSyncManager *)((char *)this + 16), a2);
  if ((result & 1) == 0)
  {
    *a3 = 0;
    return result;
  }
  if (!*v5)
  {
    v7 = *(_QWORD *)a2;
    if (v7)
      goto LABEL_4;
LABEL_15:
    v9 = 13;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)a2;
  if (!v7)
    goto LABEL_15;
LABEL_4:
  v8 = *(_DWORD *)(v7 + 4);
  *(_DWORD *)v7 += 2;
  if (v8 < 0)
    goto LABEL_88;
  v9 = v8 + 13;
  if (__OFADD__(v8, 13))
    goto LABEL_88;
  if ((*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    if (v9 <= 0x7FFFFFEF)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(2 * (v8 + 13) + 20));
      v10 = (WTF::StringImpl *)v69;
      if (v69)
      {
        v11 = (_WORD *)(v69 + 20);
        *(_DWORD *)v69 = 2;
        *(_DWORD *)(v69 + 4) = v9;
        *(_QWORD *)(v69 + 8) = v69 + 20;
        *(_DWORD *)(v69 + 16) = 0;
        v12 = *(int8x16_t **)(v7 + 8);
        v13 = *(unsigned int *)(v7 + 4);
        if ((*(_BYTE *)(v7 + 16) & 4) == 0)
        {
          if ((_DWORD)v13)
          {
            if ((_DWORD)v13 == 1)
              *v11 = v12->i16[0];
            else
              memcpy((void *)(v69 + 20), v12, 2 * v13);
          }
          goto LABEL_45;
        }
        v21 = &v11[v13];
        if (v13 < 0x40)
        {
          v22 = v69 + 20;
          if (v11 == v21)
          {
LABEL_45:
            v39 = &v11[*(unsigned int *)(v7 + 4)];
            *(_OWORD *)v39 = xmmword_1D80FBA60;
            *((_QWORD *)v39 + 2) = 0x6700610072006FLL;
            v39[12] = 101;
            goto LABEL_62;
          }
        }
        else
        {
          v22 = (unint64_t)&v11[v13 & 0xFFFFFFC0];
          v23 = 0uLL;
          v24 = (char *)(v69 + 20);
          do
          {
            v70.val[0] = *v12;
            v25 = v12[1];
            v71.val[0] = v12[2];
            v26 = v12[3];
            v12 += 4;
            v27 = v26;
            v71.val[1] = 0uLL;
            v72.val[0] = v25;
            v70.val[1] = 0uLL;
            v28 = v24;
            vst2q_s8(v28, v70);
            v28 += 32;
            v72.val[1] = 0uLL;
            vst2q_s8(v28, v72);
            v29 = v24 + 64;
            vst2q_s8(v29, v71);
            v30 = v24 + 96;
            vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
            v24 += 128;
          }
          while (v24 != (char *)v22);
          if ((_WORD *)v22 == v21)
            goto LABEL_45;
        }
        v32 = v69 + 2 * v13 - v22 + 18;
        if (v32 < 0xE
          || (v22 < (unint64_t)v12->u64 + (v32 >> 1) + 1
            ? (v33 = (unint64_t)v12 >= (v32 & 0xFFFFFFFFFFFFFFFELL) + v22 + 2)
            : (v33 = 1),
              !v33))
        {
          v36 = (_WORD *)v22;
          v37 = v12;
          goto LABEL_42;
        }
        v34 = (v32 >> 1) + 1;
        if (v32 >= 0x3E)
        {
          v35 = v34 & 0xFFFFFFFFFFFFFFE0;
          v48 = (uint8x8_t *)&v12[1];
          v49 = (uint16x8_t *)(v22 + 32);
          v50 = v34 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v51 = *(uint8x16_t *)v48[-2].i8;
            v52 = vmovl_u8(*v48);
            v53 = vmovl_high_u8(*(uint8x16_t *)v48->i8);
            v49[-2] = vmovl_u8(*(uint8x8_t *)v51.i8);
            v49[-1] = vmovl_high_u8(v51);
            *v49 = v52;
            v49[1] = v53;
            v49 += 4;
            v48 += 4;
            v50 -= 32;
          }
          while (v50);
          if (v34 == v35)
            goto LABEL_45;
          if ((v34 & 0x18) == 0)
          {
            v37 = (int8x16_t *)((char *)v12 + v35);
            v36 = (_WORD *)(v22 + 2 * v35);
            do
            {
LABEL_42:
              v38 = v37->u8[0];
              v37 = (int8x16_t *)((char *)v37 + 1);
              *v36++ = v38;
            }
            while (v36 != v21);
            goto LABEL_45;
          }
        }
        else
        {
          v35 = 0;
        }
        v36 = (_WORD *)(v22 + 2 * (v34 & 0xFFFFFFFFFFFFFFF8));
        v37 = (int8x16_t *)((char *)v12 + (v34 & 0xFFFFFFFFFFFFFFF8));
        v54 = (uint8x8_t *)&v12->i8[v35];
        v55 = (uint16x8_t *)(v22 + 2 * v35);
        v56 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v57 = *v54++;
          *v55++ = vmovl_u8(v57);
          v56 += 8;
        }
        while (v56);
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_45;
        goto LABEL_42;
      }
    }
LABEL_88:
    __break(0xC471u);
    return result;
  }
LABEL_16:
  result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
  v10 = (WTF::StringImpl *)v69;
  if (!v69)
    goto LABEL_88;
  v14 = (_BYTE *)(v69 + 20);
  *(_DWORD *)v69 = 2;
  *(_DWORD *)(v69 + 4) = v9;
  *(_QWORD *)(v69 + 8) = v69 + 20;
  *(_DWORD *)(v69 + 16) = 4;
  if (v7)
  {
    v15 = *(int8x16_t **)(v7 + 8);
    v16 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((_DWORD)v16)
      {
        if ((_DWORD)v16 == 1)
          *v14 = v15->i8[0];
        else
          memcpy((void *)(v69 + 20), v15, v16);
      }
      goto LABEL_60;
    }
    v17 = &v14[v16];
    if (v16 < 0x10)
    {
      v18 = v69 + 20;
    }
    else
    {
      v18 = (unint64_t)&v14[v16 & 0xFFFFFFF0];
      v19 = (unsigned __int128 *)(v69 + 20);
      do
      {
        v20 = (unsigned __int128)vld2q_s8(v15->i8);
        v15 += 2;
        *v19++ = v20;
      }
      while (v19 != (unsigned __int128 *)v18);
    }
    if ((_BYTE *)v18 == v17)
    {
LABEL_60:
      v31 = *(unsigned int *)(v7 + 4);
      goto LABEL_61;
    }
    v40 = v69 + v16;
    v41 = v69 + v16 - v18 + 20;
    if (v41 < 8
      || (v18 < (unint64_t)&v15[2].u64[1] + 2 * v40 + -2 * v18
        ? (v42 = (unint64_t)v15 >= v40 + 20)
        : (v42 = 1),
          !v42))
    {
      v44 = (_BYTE *)v18;
      v45 = v15;
      goto LABEL_57;
    }
    if (v41 >= 0x20)
    {
      v43 = v41 & 0xFFFFFFFFFFFFFFE0;
      v58 = v15 + 2;
      v59 = (int8x16_t *)(v18 + 16);
      v60 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v62 = v58[-2];
        v61 = v58[-1];
        v64 = *v58;
        v63 = v58[1];
        v58 += 4;
        v59[-1] = vuzp1q_s8(v62, v61);
        *v59 = vuzp1q_s8(v64, v63);
        v59 += 2;
        v60 -= 32;
      }
      while (v60);
      if (v41 == v43)
        goto LABEL_60;
      if ((v41 & 0x18) == 0)
      {
        v45 = (int8x16_t *)((char *)v15 + 2 * v43);
        v44 = (_BYTE *)(v18 + v43);
        do
        {
LABEL_57:
          v46 = v45->i8[0];
          v45 = (int8x16_t *)((char *)v45 + 2);
          *v44++ = v46;
        }
        while (v44 != v17);
        goto LABEL_60;
      }
    }
    else
    {
      v43 = 0;
    }
    v44 = (_BYTE *)(v18 + (v41 & 0xFFFFFFFFFFFFFFF8));
    v45 = (int8x16_t *)((char *)v15 + 2 * (v41 & 0xFFFFFFFFFFFFFFF8));
    v65 = (int16x8_t *)((char *)v15 + 2 * v43);
    v66 = (int8x8_t *)(v18 + v43);
    v67 = v43 - (v41 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v68 = *v65++;
      *v66++ = vmovn_s16(v68);
      v67 += 8;
    }
    while (v67);
    if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_60;
    goto LABEL_57;
  }
  v31 = 0;
LABEL_61:
  qmemcpy(&v14[v31], ".localstorage", 13);
LABEL_62:
  result = WTF::FileSystemImpl::pathByAppendingComponent();
  if (*(_DWORD *)v10 == 2)
  {
    result = WTF::StringImpl::destroy(v10, v47);
    if (!v7)
      return result;
  }
  else
  {
    *(_DWORD *)v10 -= 2;
    if (!v7)
      return result;
  }
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v7, v47);
  *(_DWORD *)v7 -= 2;
  return result;
}

double WebCore::StorageSyncManager::close(WebCore::StorageSyncManager *this)
{
  uint64_t v2;
  void *v3;
  double result;
  uint64_t v5;
  void *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    WebCore::StorageThread::terminate(v2);
    v5 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll((uint64_t *)(v5 + 32), v3);
      v7 = *(WTF **)(v5 + 48);
      if (v7)
      {
        *(_QWORD *)(v5 + 48) = 0;
        *(_DWORD *)(v5 + 56) = 0;
        WTF::fastFree(v7, v6);
      }
      v8 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (!v8)
        goto LABEL_14;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::Thread::~Thread((WTF::Thread *)v8);
        WTF::fastFree(v11, v12);
        if (!*(_DWORD *)v5)
          goto LABEL_9;
      }
      else
      {
LABEL_14:
        if (!*(_DWORD *)v5)
        {
LABEL_9:
          WTF::fastFree((WTF *)v5, v6);
          return result;
        }
      }
      *(_QWORD *)(v5 + 64) = 0;
      result = 0.0;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
    }
  }
  return result;
}

uint64_t WebCore::StorageThread::start(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  WTF::Thread *v27;

  v1 = this;
  if (!*(_QWORD *)(this + 8))
  {
    if (*(_DWORD *)(this + 16))
    {
      v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v2 = off_1E9D6A330;
      v2[1] = v1;
      v26 = (uint64_t)v2;
      WTF::Thread::create();
      v3 = *(unsigned int **)(v1 + 8);
      *(_QWORD *)(v1 + 8) = v27;
      if (v3)
      {
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 - 1, v3));
      }
    }
    else
    {
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v5 = off_1E9D6A308;
      v5[1] = v1;
      v26 = (uint64_t)v5;
      WTF::Thread::create();
      v6 = *(unsigned int **)(v1 + 8);
      *(_QWORD *)(v1 + 8) = v27;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::Thread::~Thread((WTF::Thread *)v6);
          WTF::fastFree(v24, v25);
        }
      }
    }
    this = v26;
    if (v26)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  if ((_MergedGlobals_7 & 1) != 0)
  {
    ++*(_DWORD *)v1;
    v9 = qword_1ECEC9778;
    if (qword_1ECEC9778)
      goto LABEL_15;
  }
  else
  {
    qword_1ECEC9778 = 0;
    _MergedGlobals_7 = 1;
    ++*(_DWORD *)v1;
    v9 = qword_1ECEC9778;
    if (qword_1ECEC9778)
      goto LABEL_15;
  }
  this = WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(8u);
  v9 = qword_1ECEC9778;
  if (!qword_1ECEC9778)
  {
    v10 = 0;
    goto LABEL_16;
  }
LABEL_15:
  v10 = *(_DWORD *)(v9 - 8);
LABEL_16:
  v11 = 0;
  v12 = (~(v1 << 32) + v1) ^ ((unint64_t)(~(v1 << 32) + v1) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v10;
    v18 = (uint64_t *)(v9 + 8 * (v15 & v10));
    v19 = *v18;
    if (*v18 == -1)
    {
      v11 = (uint64_t *)(v9 + 8 * v17);
      goto LABEL_18;
    }
    if (!v19)
    {
      if (v11)
      {
        *v11 = 0;
        --*(_DWORD *)(qword_1ECEC9778 - 16);
        *v11 = v1;
        v20 = qword_1ECEC9778;
        if (qword_1ECEC9778)
          goto LABEL_26;
      }
      else
      {
        *v18 = v1;
        v20 = qword_1ECEC9778;
        if (qword_1ECEC9778)
        {
LABEL_26:
          ++*(_DWORD *)(v20 - 12);
          v21 = qword_1ECEC9778;
          if (qword_1ECEC9778)
            goto LABEL_27;
          goto LABEL_33;
        }
      }
      *(_DWORD *)(v20 - 12) = 1;
      v21 = qword_1ECEC9778;
      if (qword_1ECEC9778)
      {
LABEL_27:
        v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
        v23 = *(unsigned int *)(v21 - 4);
        if (v23 <= 0x400)
          goto LABEL_28;
        goto LABEL_34;
      }
LABEL_33:
      v22 = *(unsigned int *)(v21 - 16);
      v23 = *(unsigned int *)(v21 - 4);
      if (v23 <= 0x400)
      {
LABEL_28:
        if (3 * v23 > 4 * v22)
          return this;
        if (!(_DWORD)v23)
          return WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(8u);
        return WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash((_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)));
      }
LABEL_34:
      if (v23 > 2 * v22)
        return this;
      return WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash((_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)));
    }
    if (v19 == v1)
      break;
LABEL_18:
    v15 = i + v17;
  }
  if (!*(_DWORD *)v1)
  {
    __break(0xC471u);
    JUMPOUT(0x1D7FD1784);
  }
  --*(_DWORD *)v1;
  return this;
}

uint64_t WebCore::StorageThread::threadEntryPoint(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  WTF *v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  char v14;
  char v16;
  char v18;
  uint64_t v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;

  v2 = this;
  v3 = (unsigned __int8 *)(this + 24);
  v4 = this + 25;
  while (1)
  {
    if (__ldaxr(v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_7;
    }
    this = MEMORY[0x1D82A3914](v3);
LABEL_7:
    if (*(_BYTE *)(v2 + 64))
    {
LABEL_8:
      v6 = 0;
      goto LABEL_9;
    }
    v11 = *(_QWORD *)(v2 + 32);
    v10 = *(_QWORD *)(v2 + 40);
    if (v11 == v10)
    {
      while (1)
      {
        v27 = 0x7FF0000000000000;
        v28 = 1;
        v32 = WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v27);
        v33 = v12;
        this = WTF::TimeWithDynamicClockType::operator<();
        if ((_DWORD)this)
        {
          v13 = __ldxr(v3);
          if (v13 == 1)
          {
            if (__stlxr(0, v3))
            {
              this = WTF::Lock::unlockSlow((WTF::Lock *)v3);
              v14 = 0;
              if (__ldaxr(v3))
                goto LABEL_29;
            }
            else
            {
              v14 = 0;
              if (__ldaxr(v3))
              {
LABEL_29:
                __clrex();
LABEL_30:
                this = MEMORY[0x1D82A3914](v3);
                if (*(_BYTE *)(v2 + 64))
                  v18 = 0;
                else
                  v18 = v14;
                if ((v18 & 1) == 0)
                  goto LABEL_8;
                goto LABEL_34;
              }
            }
          }
          else
          {
            __clrex();
            this = WTF::Lock::unlockSlow((WTF::Lock *)v3);
            v14 = 0;
            if (__ldaxr(v3))
              goto LABEL_29;
          }
        }
        else
        {
          v29 = v3;
          v30 = v4;
          v32 = (uint64_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
          v33 = &v32;
          v34 = &v30;
          v31[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
          v31[1] = v31;
          v31[2] = &v29;
          this = WTF::ParkingLot::parkConditionallyImpl();
          v14 = this & 1;
          if (__ldaxr(v3))
            goto LABEL_29;
        }
        if (__stxr(1u, v3))
          goto LABEL_30;
        if (*(_BYTE *)(v2 + 64))
          v16 = 0;
        else
          v16 = v14;
        if ((v16 & 1) == 0)
          goto LABEL_8;
LABEL_34:
        v11 = *(_QWORD *)(v2 + 32);
        if (v11 != *(_QWORD *)(v2 + 40))
        {
          v10 = *(_QWORD *)(v2 + 40);
          break;
        }
      }
    }
    v21 = *(_QWORD *)(v2 + 48);
    v6 = *(WTF **)(v21 + 8 * v11);
    *(_QWORD *)(v21 + 8 * v11) = 0;
    if (v10 != v11)
    {
      v22 = *(_QWORD *)(v2 + 48);
      v23 = (WTF **)(v22 + 8 * v11);
      v24 = *v23;
      *v23 = 0;
      if (v24)
      {
        v25 = *(_QWORD *)v24;
        *(_QWORD *)v24 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        WTF::fastFree(v24, a2);
      }
      v26 = *(_QWORD *)(v2 + 32);
      if (v26 <= v11)
      {
        this = (uint64_t)memmove((void *)(v22 + 8 * v26 + 8), (const void *)(v22 + 8 * v26), 8 * v11 - 8 * v26);
        *(_QWORD *)(v2 + 32) = (*(_QWORD *)(v2 + 32) + 1) % (unint64_t)*(unsigned int *)(v2 + 56);
      }
      else
      {
        this = (uint64_t)memmove((void *)(v22 + 8 * v11), (const void *)(v22 + 8 * v11 + 8), 8 * *(_QWORD *)(v2 + 40) - (8 * v11 + 8));
        *(_QWORD *)(v2 + 40) = (*(_QWORD *)(v2 + 40) + (unint64_t)*(unsigned int *)(v2 + 56) - 1)
                             % *(unsigned int *)(v2 + 56);
      }
    }
LABEL_9:
    v7 = __ldxr(v3);
    if (v7 != 1)
      break;
    if (__stlxr(0, v3))
      goto LABEL_14;
    if (!v6)
      return this;
LABEL_15:
    WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)&v32);
    (*(void (**)(_QWORD))(**(_QWORD **)v6 + 16))(*(_QWORD *)v6);
    WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)&v32);
    v9 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    this = WTF::fastFree(v6, v8);
  }
  __clrex();
LABEL_14:
  this = WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
    goto LABEL_15;
  return this;
}

uint64_t WebCore::StorageThread::dispatch(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  WTF *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  unsigned __int8 v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  _QWORD v14[2];
  char v15;
  _QWORD v16[3];

  v4 = (unsigned __int8 *)(a1 + 24);
  v5 = (WTF *)WTF::fastMalloc((WTF *)8);
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)v5 = v6;
  v13 = v5;
  LODWORD(v6) = __ldaxr(v4);
  if ((_DWORD)v6)
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v4);
LABEL_5:
  WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>(a1 + 32, (uint64_t *)&v13);
  result = a1 + 25;
  v9 = atomic_load((unsigned __int8 *)(a1 + 25));
  if ((v9 & 1) != 0)
  {
    v15 = 0;
    v14[0] = a1 + 25;
    v14[1] = &v15;
    v16[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v16[1] = v16;
    v16[2] = v14;
    result = WTF::ParkingLot::unparkOneImpl();
  }
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v4))
LABEL_11:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    v12 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return WTF::fastFree(v11, v7);
  }
  return result;
}

uint64_t WebCore::StorageThread::terminate(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v18;
  WTF *v19;
  _QWORD *v20;
  void *v22;
  unsigned __int8 v23;
  int v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  void *v30;
  WTF *v31;
  _QWORD v32[2];
  char v33;
  _QWORD v34[3];

  v1 = this;
  if ((_MergedGlobals_7 & 1) != 0)
  {
    v2 = *(_DWORD *)this;
    v3 = *(_DWORD *)this + 1;
    *(_DWORD *)this = v3;
    v4 = qword_1ECEC9778;
    if (!qword_1ECEC9778)
      goto LABEL_21;
LABEL_3:
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    for (i = 1; ; ++i)
    {
      v11 = v9;
      v12 = *(_QWORD *)(v4 + 8 * v9);
      if (v12 != -1)
      {
        if (!v12)
          goto LABEL_20;
        if (v12 == this)
          break;
      }
      v9 = (v11 + i) & v5;
    }
    if ((_DWORD)v11 == *(_DWORD *)(v4 - 4))
      goto LABEL_20;
    *(_QWORD *)(v4 + 8 * v11) = 0;
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x1D7FD1EE4);
    }
    *(_DWORD *)this = v2;
    *(_QWORD *)(v4 + 8 * v11) = -1;
    v13 = qword_1ECEC9778;
    ++*(_DWORD *)(qword_1ECEC9778 - 16);
    if (v13)
    {
      --*(_DWORD *)(v13 - 12);
      v14 = qword_1ECEC9778;
      if (!qword_1ECEC9778)
        goto LABEL_20;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      v14 = qword_1ECEC9778;
      if (!qword_1ECEC9778)
      {
LABEL_20:
        v3 = *(_DWORD *)v1;
        goto LABEL_21;
      }
    }
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      this = WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(v16 >> 1);
    goto LABEL_20;
  }
  qword_1ECEC9778 = 0;
  _MergedGlobals_7 = 1;
  v2 = *(_DWORD *)this;
  v3 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v3;
  v4 = qword_1ECEC9778;
  if (qword_1ECEC9778)
    goto LABEL_3;
LABEL_21:
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1D7FD1EA0);
  }
  *(_DWORD *)v1 = v3 - 1;
  if (*(_QWORD *)(v1 + 8))
  {
    v18 = (unsigned __int8 *)(v1 + 24);
    v19 = (WTF *)WTF::fastMalloc((WTF *)8);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E9D6A2E0;
    v20[1] = v1;
    *(_QWORD *)v19 = v20;
    v31 = v19;
    if (__ldaxr((unsigned __int8 *)(v1 + 24)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_27;
    }
    MEMORY[0x1D82A3914](v1 + 24);
LABEL_27:
    WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>(v1 + 32, (uint64_t *)&v31);
    v23 = atomic_load((unsigned __int8 *)(v1 + 25));
    if ((v23 & 1) != 0)
    {
      v33 = 0;
      v32[0] = v1 + 25;
      v32[1] = &v33;
      v34[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
      v34[1] = v34;
      v34[2] = v32;
      WTF::ParkingLot::unparkOneImpl();
    }
    v24 = __ldxr(v18);
    if (v24 == 1)
    {
      if (!__stlxr(0, v18))
      {
        v25 = v31;
        v31 = 0;
        if (!v25)
        {
LABEL_38:
          WTF::Thread::waitForCompletion(*(WTF::Thread **)(v1 + 8));
          this = *(_QWORD *)(v1 + 8);
          *(_QWORD *)(v1 + 8) = 0;
          if (this)
          {
            do
            {
              v27 = __ldaxr((unsigned int *)this);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, (unsigned int *)this));
            if (!v28)
            {
              atomic_store(1u, (unsigned int *)this);
              WTF::Thread::~Thread((WTF::Thread *)this);
              return WTF::fastFree(v29, v30);
            }
          }
          return this;
        }
LABEL_35:
        v26 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        WTF::fastFree(v25, v22);
        goto LABEL_38;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 24));
    v25 = v31;
    v31 = 0;
    if (!v25)
      goto LABEL_38;
    goto LABEL_35;
  }
  return this;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::StorageThread::terminate(void)::$_0,void>::call(uint64_t a1, const void *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *result;
  unsigned __int8 v6;
  int v7;
  int v8;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = v2 + 24;
  if (__ldaxr(v2 + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v2 + 24);
LABEL_5:
  v2[64] = 1;
  result = v2 + 25;
  v6 = atomic_load(v2 + 25);
  if ((v6 & 1) == 0)
  {
    v7 = __ldxr(v3);
    if (v7 == 1)
      goto LABEL_7;
LABEL_10:
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
  }
  atomic_store(0, result);
  result = (unsigned __int8 *)WTF::ParkingLot::unparkAll((WTF::ParkingLot *)result, a2);
  v8 = __ldxr(v3);
  if (v8 != 1)
    goto LABEL_10;
LABEL_7:
  if (__stlxr(0, v3))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
  return result;
}

uint64_t *WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll(uint64_t *result, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  WTF **v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;

  v2 = *result;
  v3 = result[1];
  v4 = (WTF **)result[2];
  if (*result <= v3)
  {
    if (*result != v3)
    {
      v9 = v2;
      v10 = &v4[v9];
      v11 = 8 * v3 - v9 * 8;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          v13 = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          result = (uint64_t *)WTF::fastFree(v12, a2);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  else
  {
    v5 = result;
    if (v3)
    {
      v6 = 8 * v3;
      do
      {
        v7 = *v4;
        *v4 = 0;
        if (v7)
        {
          v8 = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          result = (uint64_t *)WTF::fastFree(v7, a2);
        }
        ++v4;
        v6 -= 8;
      }
      while (v6);
      v4 = (WTF **)v5[2];
      v2 = *v5;
    }
    v14 = *((unsigned int *)v5 + 6);
    if (v2 != v14)
    {
      v15 = v2;
      v16 = &v4[v15];
      v17 = 8 * v14 - v15 * 8;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
        {
          v19 = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          result = (uint64_t *)WTF::fastFree(v18, a2);
        }
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageThread::start(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebCore::StorageThread::threadEntryPoint(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageThread::start(void)::$_1,void>::call(uint64_t a1, void *a2)
{
  return WebCore::StorageThread::threadEntryPoint(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WTF::HashTable<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::StorageThread,WTF::RawPtrTraits<WebCore::StorageThread>>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  v2 = qword_1ECEC9778;
  if (qword_1ECEC9778)
  {
    v3 = *(_DWORD *)(qword_1ECEC9778 - 4);
    v4 = *(_DWORD *)(qword_1ECEC9778 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  qword_1ECEC9778 = result + 16;
  *(_DWORD *)(result + 8) = a1 - 1;
  *(_DWORD *)(result + 12) = a1;
  *(_DWORD *)result = 0;
  *(_DWORD *)(qword_1ECEC9778 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = qword_1ECEC9778;
    while (1)
    {
      v9 = (_QWORD *)(v2 + 8 * v7);
      v10 = (_DWORD *)*v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          if (v8)
            v11 = *(_DWORD *)(v8 - 8);
          else
            v11 = 0;
          v12 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
          v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
          v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
          v15 = v11 & ((v14 >> 31) ^ v14);
          v16 = 1;
          do
          {
            v17 = v15;
            v18 = *(_QWORD *)(v8 + 8 * v15);
            v15 = (v15 + v16++) & v11;
          }
          while (v18);
          v19 = (_QWORD *)(v8 + 8 * v17);
          *v19 = 0;
          v20 = (_DWORD *)*v9;
          *v9 = 0;
          *v19 = v20;
          v21 = (_DWORD *)*v9;
          *v9 = 0;
          if (v21)
          {
            if (!*v21)
            {
              result = 286;
              __break(0xC471u);
              return result;
            }
            --*v21;
          }
        }
        else
        {
          *v9 = 0;
        }
      }
      if (++v7 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_18;
    LODWORD(v5) = *(_DWORD *)(result + 24);
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_18;
    }
    else if ((_DWORD)v5)
    {
      goto LABEL_18;
    }
  }
  v6 = v5;
  v7 = v5 + ((unint64_t)v5 >> 2);
  if (v7 <= 0xF)
    v7 = 15;
  if (v7 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v8 = *(char **)(result + 16);
  v9 = v7 + 1;
  v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
  *(_DWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 16) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 > v11)
  {
    memcpy(v10, v8, 8 * v11);
    v12 = *(_QWORD *)v3 - v6 + *(unsigned int *)(v3 + 24);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v12), &v8[8 * *(_QWORD *)v3], 8 * v6 - 8 * *(_QWORD *)v3);
    *(_QWORD *)v3 = v12;
    if (!v8)
      goto LABEL_18;
LABEL_15:
    if (*(char **)(v3 + 16) == v8)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v8, v13);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy(&v10[8 * *(_QWORD *)v3], &v8[8 * *(_QWORD *)v3], 8 * v11 - 8 * *(_QWORD *)v3);
  if (v8)
    goto LABEL_15;
LABEL_18:
  v15 = *(_QWORD *)(v3 + 8);
  v14 = *(_QWORD *)(v3 + 16);
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)(v14 + 8 * v15) = v16;
  if (v15 == *(unsigned int *)(v3 + 24) - 1)
    v17 = 0;
  else
    v17 = v15 + 1;
  *(_QWORD *)(v3 + 8) = v17;
  return result;
}

_QWORD *WebKit::StorageTracker::internalInitialize(WebKit::StorageTracker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  _QWORD *v9;

  *((_BYTE *)this + 129) = 0;
  PAL::UTF8Encoding(this);
  v2 = WebKit::storageTracker;
  *(_BYTE *)(WebKit::storageTracker + 128) = 1;
  WebCore::StorageThread::start(*(_QWORD *)(v2 + 120));
  v3 = WebKit::storageTracker;
  if (*(_BYTE *)(WebKit::storageTracker + 128))
  {
    v4 = *(_QWORD *)(WebKit::storageTracker + 120);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E9D6A3A0;
    v5[1] = v3;
    v9 = v5;
    WebCore::StorageThread::dispatch(v4, (uint64_t *)&v9);
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v6 = *((_QWORD *)this + 15);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E9D6A378;
  v7[1] = this;
  v9 = v7;
  WebCore::StorageThread::dispatch(v6, (uint64_t *)&v9);
  result = v9;
  if (v9)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::StorageTracker::tracker(WebKit::StorageTracker *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = WebKit::storageTracker;
  if (WebKit::storageTracker)
  {
    if (*(_BYTE *)(WebKit::storageTracker + 129))
    {
      WebKit::StorageTracker::internalInitialize((WebKit::StorageTracker *)WebKit::storageTracker);
      return WebKit::storageTracker;
    }
    return v1;
  }
  else
  {
    v3 = WTF::fastMalloc((WTF *)0x90);
    *(_BYTE *)v3 = 0;
    WebCore::SQLiteDatabase::SQLiteDatabase((WebCore::SQLiteDatabase *)(v3 + 8));
    WTF::String::isolatedCopy();
    *(_BYTE *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *(_BYTE *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 112) = 0;
    v4 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_BYTE *)(v4 + 64) = 0;
    *(_QWORD *)(v3 + 120) = v4;
    *(_WORD *)(v3 + 128) = 0;
    *(_QWORD *)(v3 + 136) = 0x4072C00000000000;
    WebKit::storageTracker = v3;
    return v3;
  }
}

uint64_t WebKit::StorageTracker::openTrackerDatabase(WebKit::StorageTracker *this, int a2)
{
  WebCore::SQLiteDatabaseTracker *v4;
  const WTF::String *v6;
  const WTF::String *v7;
  StringImpl *v8;
  char AllDirectories;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  if (*((_QWORD *)this + 2))
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (a2)
  {
    WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v11, v6);
    AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v12, v7);
    v10 = v12;
    v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        if ((AllDirectories & 1) == 0)
          goto LABEL_15;
        goto LABEL_12;
      }
      *(_DWORD *)v10 -= 2;
    }
    if ((AllDirectories & 1) == 0)
      goto LABEL_15;
LABEL_12:
    if (WebCore::SQLiteDatabase::open() && (WebCore::SQLiteDatabase::tableExists() & 1) == 0)
      WebCore::SQLiteDatabase::executeCommand();
    goto LABEL_15;
  }
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v11, v6))
    goto LABEL_12;
LABEL_15:
  v4 = v11;
  v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      v4 = (WebCore::SQLiteDatabaseTracker *)WTF::StringImpl::destroy(v4, v8);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
}

uint64_t WebKit::StorageTracker::syncFileSystemAndTrackerDatabase(WebKit::StorageTracker *this)
{
  const WTF::String *v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  StringImpl *v21;
  const WTF::StringImpl *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int i;
  int v35;
  WTF *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int j;
  int v49;
  WTF *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t *v64;
  WTF::StringImpl *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](this);
LABEL_5:
  WTF::FileSystemImpl::listDirectory((WebKit::StorageTracker *)((char *)this + 72), v2);
  v4 = v70;
  v5 = HIDWORD(v71);
  v6 = __ldxr((unsigned __int8 *)this);
  if (v6 != 1)
  {
    __clrex();
LABEL_10:
    WTF::Lock::unlockSlow(this);
    v73 = 0;
    v7 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
      goto LABEL_8;
LABEL_11:
    if (!__stxr(1u, v7))
      goto LABEL_13;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
    goto LABEL_10;
  v73 = 0;
  v7 = (unsigned __int8 *)this + 96;
  if (!__ldaxr((unsigned __int8 *)this + 96))
    goto LABEL_11;
LABEL_8:
  __clrex();
LABEL_12:
  MEMORY[0x1D82A3914](v7);
LABEL_13:
  v10 = *((_QWORD *)this + 13);
  v66 = v70;
  v67 = HIDWORD(v71);
  if (!v10)
  {
    v13 = 0;
    v12 = 0;
LABEL_21:
    if (v10)
      goto LABEL_22;
    v15 = 0;
    if (!v13)
      goto LABEL_26;
    while (1)
    {
LABEL_30:
      WTF::String::isolatedCopy();
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)&v70, &v73, &v72);
      v18 = v72;
      v72 = 0;
      if (!v18)
        goto LABEL_33;
      if (*(_DWORD *)v18 != 2)
        break;
      WTF::StringImpl::destroy(v18, v17);
      v19 = v13 + 1;
      v13 = v12;
      if (v19 != v12)
      {
LABEL_36:
        v13 = v19;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          if (++v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
LABEL_29:
      if (v13 == v15)
        goto LABEL_26;
    }
    *(_DWORD *)v18 -= 2;
LABEL_33:
    v19 = v13 + 1;
    v13 = v12;
    if (v19 != v12)
      goto LABEL_36;
    goto LABEL_29;
  }
  v11 = *(unsigned int *)(v10 - 4);
  v12 = (_QWORD *)(v10 + 8 * v11);
  if (*(_DWORD *)(v10 - 12))
  {
    v13 = (_QWORD *)*((_QWORD *)this + 13);
    if ((_DWORD)v11)
    {
      v14 = 8 * v11;
      v13 = (_QWORD *)*((_QWORD *)this + 13);
      do
      {
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_21;
        ++v13;
        v14 -= 8;
      }
      while (v14);
      v13 = v12;
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  v13 = (_QWORD *)(v10 + 8 * v11);
  v12 = v13;
LABEL_22:
  v15 = (_QWORD *)(v10 + 8 * *(unsigned int *)(v10 - 4));
  if (v15 != v13)
    goto LABEL_30;
LABEL_26:
  v16 = __ldxr(v7);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, v7))
LABEL_41:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v72 = 0;
  v20 = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = (unsigned int *)v70;
  v24 = v73;
  if ((_DWORD)v5)
  {
    v25 = (uint64_t *)v4;
    v26 = (uint64_t *)((char *)v4 + 8 * v5);
    do
    {
      v20 = *v25;
      if (!*v25)
        goto LABEL_45;
      if (v23)
      {
        if (*(unsigned int *)(v20 + 4) <= (unint64_t)v23[1])
          goto LABEL_45;
        v20 = WTF::StringImpl::endsWith();
        if (!(_DWORD)v20)
          goto LABEL_45;
      }
      else
      {
        if (!*(_DWORD *)(v20 + 4))
          goto LABEL_45;
        v20 = WTF::StringImpl::endsWith();
        if (!(_DWORD)v20)
          goto LABEL_45;
      }
      if (*((_QWORD *)this + 9))
      {
        if (*v25)
          goto LABEL_55;
      }
      else if (*v25)
      {
LABEL_55:
        WTF::FileSystemImpl::pathByAppendingComponent();
        v28 = (WTF::StringImpl *)*v25;
        if (*v25)
          goto LABEL_56;
        goto LABEL_63;
      }
      WTF::FileSystemImpl::pathByAppendingComponent();
      v28 = (WTF::StringImpl *)*v25;
      if (*v25)
      {
LABEL_56:
        v29 = *((_DWORD *)v28 + 1);
        if (v23)
          goto LABEL_57;
        goto LABEL_64;
      }
LABEL_63:
      v29 = 0;
      if (v23)
      {
LABEL_57:
        v30 = v23[1];
        if (!v28)
          goto LABEL_65;
        goto LABEL_58;
      }
LABEL_64:
      v30 = 0;
      if (!v28)
      {
LABEL_65:
        v68 = 0;
        if (!v24)
          goto LABEL_77;
        goto LABEL_68;
      }
LABEL_58:
      v27 = (const WTF::StringImpl *)(v29 - v30);
      if (*((_DWORD *)v28 + 1) <= v27)
      {
        *(_DWORD *)v28 += 2;
        v68 = v28;
        if (!v24)
        {
LABEL_77:
          WebKit::StorageTracker::syncSetOriginDetails(this, &v68, (const WTF::String *)&v69);
          goto LABEL_78;
        }
      }
      else
      {
        WTF::StringImpl::substring(v28);
        if (!v24)
          goto LABEL_77;
      }
LABEL_68:
      v31 = *(_DWORD *)(v24 - 8);
      v32 = *((_DWORD *)v68 + 4);
      if (v32 < 0x100)
        v33 = WTF::StringImpl::hashSlowCase(v68);
      else
        v33 = v32 >> 8;
      for (i = 0; ; v33 = i + v35)
      {
        v35 = v33 & v31;
        v36 = *(WTF **)(v24 + 8 * (v33 & v31));
        if (v36 != (WTF *)-1)
        {
          if (!v36)
            goto LABEL_77;
          if ((WTF::equal(v36, v68, v27) & 1) != 0)
            break;
        }
        ++i;
      }
LABEL_78:
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v72, &v68, v27, (uint64_t)&v70);
      v37 = v68;
      v68 = 0;
      if (!v37)
        goto LABEL_81;
      if (*(_DWORD *)v37 != 2)
      {
        *(_DWORD *)v37 -= 2;
LABEL_81:
        v20 = (uint64_t)v69;
        v69 = 0;
        if (v20)
          goto LABEL_84;
        goto LABEL_45;
      }
      WTF::StringImpl::destroy(v37, v21);
      v20 = (uint64_t)v69;
      v69 = 0;
      if (v20)
      {
LABEL_84:
        if (*(_DWORD *)v20 == 2)
          v20 = WTF::StringImpl::destroy((WTF::StringImpl *)v20, v21);
        else
          *(_DWORD *)v20 -= 2;
      }
LABEL_45:
      ++v25;
    }
    while (v25 != v26);
  }
  if (!v24)
  {
    v40 = 0;
    v39 = 0;
LABEL_94:
    v42 = this;
    if (v24)
      goto LABEL_95;
    v43 = 0;
    if (!v40)
      goto LABEL_123;
LABEL_101:
    while (1)
    {
      v44 = v72;
      if (v72)
        break;
LABEL_111:
      v70 = v42;
      WTF::String::isolatedCopy();
      v51 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v51 = &off_1E9D6A3F0;
      *((_QWORD *)v51 + 1) = v70;
      v52 = v71;
      v71 = 0;
      *((_QWORD *)v51 + 2) = v52;
      v69 = v51;
      WTF::callOnMainThread();
      v53 = v69;
      v69 = 0;
      if (v53)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v53 + 8))(v53);
      v20 = v71;
      v71 = 0;
      if (!v20)
        goto LABEL_116;
      if (*(_DWORD *)v20 != 2)
      {
        *(_DWORD *)v20 -= 2;
        goto LABEL_116;
      }
      v20 = WTF::StringImpl::destroy((WTF::StringImpl *)v20, v21);
      v54 = v40 + 1;
      v40 = v39;
      if (v54 != v39)
      {
LABEL_119:
        v40 = v54;
        while ((unint64_t)*v40 + 1 <= 1)
        {
          if (++v40 == v39)
          {
            v40 = v39;
            break;
          }
        }
      }
LABEL_100:
      if (v40 == v43)
        goto LABEL_123;
    }
    v45 = *((_DWORD *)v72 - 2);
    v46 = *((_DWORD *)*v40 + 4);
    if (v46 < 0x100)
      v47 = WTF::StringImpl::hashSlowCase(*v40);
    else
      v47 = v46 >> 8;
    for (j = 0; ; v47 = j + v49)
    {
      v49 = v47 & v45;
      v50 = (WTF *)*((_QWORD *)v44 + (v47 & v45));
      if (v50 != (WTF *)-1)
      {
        if (!v50)
          goto LABEL_111;
        v20 = WTF::equal(v50, *v40, v22);
        if ((v20 & 1) != 0)
          break;
      }
      ++j;
    }
LABEL_116:
    v54 = v40 + 1;
    v40 = v39;
    if (v54 != v39)
      goto LABEL_119;
    goto LABEL_100;
  }
  v38 = *(unsigned int *)(v24 - 4);
  v39 = (WTF::StringImpl **)(v24 + 8 * v38);
  if (*(_DWORD *)(v24 - 12))
  {
    v40 = (WTF::StringImpl **)v24;
    if ((_DWORD)v38)
    {
      v41 = 8 * v38;
      v40 = (WTF::StringImpl **)v24;
      do
      {
        if ((unint64_t)*v40 + 1 > 1)
          goto LABEL_94;
        ++v40;
        v41 -= 8;
      }
      while (v41);
      v40 = v39;
      v42 = this;
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  v40 = (WTF::StringImpl **)(v24 + 8 * v38);
  v39 = v40;
  v42 = this;
LABEL_95:
  v43 = (WTF::StringImpl **)(v24 + 8 * *(unsigned int *)(v24 - 4));
  if (v43 != v40)
    goto LABEL_101;
LABEL_123:
  if (!v23)
    goto LABEL_126;
  if (*v23 != 2)
  {
    *v23 -= 2;
LABEL_126:
    v55 = v72;
    if (!v72)
      goto LABEL_127;
    goto LABEL_131;
  }
  v20 = WTF::StringImpl::destroy((WTF::StringImpl *)v23, v21);
  v55 = v72;
  if (!v72)
  {
LABEL_127:
    v56 = v73;
    if (!v73)
      goto LABEL_128;
    goto LABEL_140;
  }
LABEL_131:
  v57 = *((unsigned int *)v55 - 1);
  if ((_DWORD)v57)
  {
    v58 = (WTF::StringImpl **)v55;
    do
    {
      v59 = *v58;
      if (*v58 != (WTF::StringImpl *)-1)
      {
        *v58 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v21);
          else
            *(_DWORD *)v59 -= 2;
        }
      }
      ++v58;
      --v57;
    }
    while (v57);
  }
  v20 = WTF::fastFree((WTF::StringImpl *)((char *)v55 - 16), v21);
  v56 = v73;
  if (!v73)
  {
LABEL_128:
    if (!(_DWORD)v67)
      goto LABEL_155;
    goto LABEL_149;
  }
LABEL_140:
  v60 = *(unsigned int *)(v56 - 4);
  if ((_DWORD)v60)
  {
    v61 = (WTF::StringImpl **)v56;
    do
    {
      v62 = *v61;
      if (*v61 != (WTF::StringImpl *)-1)
      {
        *v61 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v21);
          else
            *(_DWORD *)v62 -= 2;
        }
      }
      ++v61;
      --v60;
    }
    while (v60);
  }
  v20 = WTF::fastFree((WTF *)(v56 - 16), v21);
  if ((_DWORD)v67)
  {
LABEL_149:
    v63 = 8 * v67;
    v64 = (uint64_t *)v66;
    do
    {
      v20 = *v64;
      *v64 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          v20 = WTF::StringImpl::destroy((WTF::StringImpl *)v20, v21);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v64;
      v63 -= 8;
    }
    while (v63);
  }
LABEL_155:
  if (v66)
    v20 = WTF::fastFree(v66, v21);
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v20);
}

uint64_t WebKit::StorageTracker::syncSetOriginDetails(WebKit::StorageTracker *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WebCore::SQLiteDatabaseTracker *v6;
  unsigned int v7;
  const WTF::StringImpl *v8;
  unsigned __int8 *v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  int v16;
  WTF *v17;
  int v18;
  unsigned __int8 *v19;
  int v21;
  int v23;
  int v24;
  _BYTE v26[24];
  _BYTE v27[16];
  unsigned int v28;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](this);
LABEL_5:
  v6 = (WebCore::SQLiteDatabaseTracker *)WebKit::StorageTracker::openTrackerDatabase(this, 1);
  if (!*((_QWORD *)this + 2))
    goto LABEL_39;
  v6 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
  v7 = v28;
  if (!v28)
  {
    WebCore::SQLiteStatement::bindText();
    WebCore::SQLiteStatement::bindText();
    WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v27);
    v9 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](v9);
LABEL_11:
    v11 = *((_QWORD *)this + 13);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = *((_DWORD *)*a2 + 4);
      if (v13 < 0x100)
        v14 = WTF::StringImpl::hashSlowCase(*a2);
      else
        v14 = v13 >> 8;
      for (i = 0; ; v14 = i + v16)
      {
        v16 = v14 & v12;
        v17 = *(WTF **)(v11 + 8 * (v14 & v12));
        if (v17 != (WTF *)-1)
        {
          if (!v17)
            goto LABEL_24;
          if ((WTF::equal(v17, *a2, v8) & 1) != 0)
            break;
        }
        ++i;
      }
      v18 = __ldxr(v9);
      if (v18 == 1)
      {
LABEL_21:
        if (!__stlxr(0, v9))
        {
          v19 = (unsigned __int8 *)this + 80;
          if (__ldaxr((unsigned __int8 *)this + 80))
          {
LABEL_23:
            __clrex();
LABEL_28:
            MEMORY[0x1D82A3914](v19);
LABEL_29:
            v6 = (WebCore::SQLiteDatabaseTracker *)*((_QWORD *)this + 11);
            if (v6)
              v6 = (WebCore::SQLiteDatabaseTracker *)(*(uint64_t (**)(WebCore::SQLiteDatabaseTracker *, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, a2);
            v23 = __ldxr(v19);
            if (v23 == 1)
            {
              if (!__stlxr(0, v19))
                goto LABEL_36;
            }
            else
            {
              __clrex();
            }
            v6 = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_36:
            v7 = v28;
            goto LABEL_37;
          }
LABEL_27:
          if (!__stxr(1u, v19))
            goto LABEL_29;
          goto LABEL_28;
        }
LABEL_26:
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
        v19 = (unsigned __int8 *)this + 80;
        if (__ldaxr((unsigned __int8 *)this + 80))
          goto LABEL_23;
        goto LABEL_27;
      }
    }
    else
    {
LABEL_24:
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 13, a2, v8, (uint64_t)v26);
      v21 = __ldxr(v9);
      if (v21 == 1)
        goto LABEL_21;
    }
    __clrex();
    goto LABEL_26;
  }
LABEL_37:
  if (v7 != -1)
    v6 = (WebCore::SQLiteDatabaseTracker *)(*(&off_1E9D6A348 + v7))((int)v26, (WebCore::SQLiteStatement *)v27);
LABEL_39:
  v24 = __ldxr((unsigned __int8 *)this);
  if (v24 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v6);
  }
  else
  {
    __clrex();
  }
  v6 = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow(this);
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v6);
}

uint64_t WebKit::StorageTracker::setOriginDetails(uint64_t this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  WTF *v13;
  int v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23[2];
  WTF::StringImpl *v24;

  if (*(_BYTE *)(this + 128))
  {
    v4 = (uint64_t *)this;
    v5 = (unsigned __int8 *)(this + 96);
    if (__ldaxr((unsigned __int8 *)(this + 96)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x1D82A3914](this + 96, a2, a3);
LABEL_6:
    v7 = v4[13];
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = *((_DWORD *)*a2 + 4);
      if (v9 < 0x100)
        v10 = WTF::StringImpl::hashSlowCase(*a2);
      else
        v10 = v9 >> 8;
      for (i = 0; ; v10 = i + v12)
      {
        v12 = v10 & v8;
        v13 = *(WTF **)(v7 + 8 * (v10 & v8));
        if (v13 != (WTF *)-1)
        {
          if (!v13)
            goto LABEL_17;
          this = WTF::equal(v13, *a2, a3);
          if ((this & 1) != 0)
            break;
        }
        ++i;
      }
      v14 = 0;
      v15 = __ldxr(v5);
      if (v15 != 1)
        goto LABEL_16;
    }
    else
    {
LABEL_17:
      this = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v4 + 13, a2, a3, (uint64_t)v23);
      v14 = 1;
      v16 = __ldxr(v5);
      if (v16 != 1)
      {
LABEL_16:
        __clrex();
LABEL_19:
        this = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_20:
        if (!v14)
          return this;
        v23[0] = (WTF::StringImpl *)v4;
        WTF::String::isolatedCopy();
        WTF::String::isolatedCopy();
        v17 = v24;
        v21 = *(_OWORD *)v23;
        v23[1] = 0;
        v24 = 0;
        v18 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v18 = &off_1E9D6A418;
        *(_QWORD *)(v18 + 8) = v4;
        *(_OWORD *)(v18 + 16) = v21;
        *(_QWORD *)(v18 + 32) = v17;
        v22 = v18;
        WTF::ensureOnMainThread();
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v20 = v24;
        v24 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::destroy(v20, v19);
            this = (uint64_t)v23[1];
            v23[1] = 0;
            if (!this)
              return this;
LABEL_29:
            if (*(_DWORD *)this == 2)
              return WTF::StringImpl::destroy((WTF::StringImpl *)this, v19);
            *(_DWORD *)this -= 2;
            return this;
          }
          *(_DWORD *)v20 -= 2;
        }
        this = (uint64_t)v23[1];
        v23[1] = 0;
        if (!this)
          return this;
        goto LABEL_29;
      }
    }
    if (!__stlxr(0, v5))
      goto LABEL_20;
    goto LABEL_19;
  }
  return this;
}

uint64_t WebKit::StorageTracker::origins@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  _BYTE v20[24];
  int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 128))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return this;
  }
  v3 = this;
  v4 = (unsigned __int8 *)(this + 96);
  if (__ldaxr((unsigned __int8 *)(this + 96)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_7;
  }
  this = MEMORY[0x1D82A3914](this + 96);
LABEL_7:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *(_QWORD *)(v3 + 104);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 12);
    if ((_DWORD)v7)
    {
      if (v7 >> 27)
      {
        __break(0xC471u);
        return this;
      }
      this = WTF::fastMalloc((WTF *)(32 * v7));
      *(_DWORD *)(a2 + 8) = v7;
      *(_QWORD *)a2 = this;
      v8 = *(_QWORD *)(v3 + 104);
      if (v8)
      {
        if (*(_DWORD *)(v8 - 12))
        {
          v9 = this;
          v10 = *(unsigned int *)(v8 - 4);
          if ((_DWORD)v10)
          {
            v11 = 8 * v10;
            v12 = *(uint64_t **)(v3 + 104);
            while ((unint64_t)(*v12 + 1) <= 1)
            {
              ++v12;
              v11 -= 8;
              if (!v11)
                goto LABEL_36;
            }
          }
          else
          {
            v12 = *(uint64_t **)(v3 + 104);
          }
          v13 = (uint64_t *)(v8 + 8 * v10);
          if (v12 != v13)
          {
            v14 = 0;
            v15 = *v12;
LABEL_20:
            if (v15)
            {
              this = WebCore::SecurityOriginData::fromDatabaseIdentifier();
              if (!v22)
                goto LABEL_33;
            }
            else
            {
              this = WebCore::SecurityOriginData::fromDatabaseIdentifier();
              if (!v22)
                goto LABEL_33;
            }
            if (v14 == *(_DWORD *)(a2 + 8))
            {
              this = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v14 + 1, (unint64_t)v20);
              v9 = *(_QWORD *)a2;
              v16 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12);
              *(_BYTE *)v16 = 0;
              *(_DWORD *)(v16 + 24) = -1;
              v17 = *(unsigned int *)(this + 24);
              if ((_DWORD)v17 != -1)
              {
                this = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E9D6A458[v17])(&v19, v16, this);
LABEL_29:
                *(_DWORD *)(v16 + 24) = v17;
              }
            }
            else
            {
              v16 = v9 + 32 * v14;
              *(_BYTE *)v16 = 0;
              *(_DWORD *)(v16 + 24) = -1;
              LODWORD(v17) = v21;
              if (v21 != -1)
              {
                this = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E9D6A458[v21])(&v19, v16, v20);
                goto LABEL_29;
              }
            }
            v14 = *(_DWORD *)(a2 + 12) + 1;
            *(_DWORD *)(a2 + 12) = v14;
            if (v22)
            {
              if (v21 != -1)
                this = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v21])(&v19, v20);
            }
LABEL_33:
            while (++v12 != v13)
            {
              v15 = *v12;
              if ((unint64_t)(*v12 + 1) > 1)
              {
                if (v12 != v13)
                  goto LABEL_20;
                break;
              }
            }
          }
        }
      }
    }
  }
LABEL_36:
  v18 = __ldxr(v4);
  if (v18 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

_QWORD *WebKit::StorageTracker::deleteAllOrigins(_QWORD *this)
{
  uint64_t *v1;
  unsigned __int8 *v2;
  WebKit::WebStorageNamespaceProvider *v4;
  StringImpl *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (*((_BYTE *)this + 128))
  {
    v1 = this;
    v2 = (unsigned __int8 *)(this + 12);
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v2))
    {
      goto LABEL_6;
    }
    MEMORY[0x1D82A3914](this + 12);
LABEL_6:
    v4 = (WebKit::WebStorageNamespaceProvider *)WebKit::StorageTracker::willDeleteAllOrigins(v1);
    v6 = (WTF::StringImpl **)v1[13];
    if (v6)
    {
      v1[13] = 0;
      v7 = *((unsigned int *)v6 - 1);
      if ((_DWORD)v7)
      {
        v8 = v6;
        do
        {
          v9 = *v8;
          if (*v8 != (WTF::StringImpl *)-1)
          {
            *v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, v5);
              else
                *(_DWORD *)v9 -= 2;
            }
          }
          ++v8;
          --v7;
        }
        while (v7);
      }
      v4 = (WebKit::WebStorageNamespaceProvider *)WTF::fastFree((WTF *)(v6 - 2), v5);
    }
    v10 = __ldxr(v2);
    if (v10 == 1)
    {
      if (!__stlxr(0, v2))
      {
LABEL_21:
        WebKit::WebStorageNamespaceProvider::clearLocalStorageForAllOrigins(v4);
        v11 = v1[15];
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E9D6A488;
        v12[1] = v1;
        v13 = v12;
        WebCore::StorageThread::dispatch(v11, (uint64_t *)&v13);
        this = v13;
        if (v13)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
        return this;
      }
    }
    else
    {
      __clrex();
    }
    v4 = (WebKit::WebStorageNamespaceProvider *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    goto LABEL_21;
  }
  return this;
}

uint64_t *WebKit::StorageTracker::willDeleteAllOrigins(uint64_t *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  StringImpl *v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v1 = (_QWORD *)this[13];
  if (v1)
  {
    v2 = *((unsigned int *)v1 - 1);
    v3 = &v1[v2];
    if (*((_DWORD *)v1 - 3))
    {
      if ((_DWORD)v2)
      {
        v4 = 8 * v2;
        while ((unint64_t)(*v1 + 1) <= 1)
        {
          ++v1;
          v4 -= 8;
          if (!v4)
          {
            v1 = v3;
            break;
          }
        }
      }
      if (v3 != v1)
      {
        v5 = this + 14;
        while (1)
        {
          WTF::String::isolatedCopy();
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)&v8, v5, &v9);
          this = (uint64_t *)v9;
          v9 = 0;
          if (!this)
            goto LABEL_17;
          if (*(_DWORD *)this != 2)
            break;
          this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
          v7 = v1 + 1;
          v1 = v3;
          if (v7 != v3)
          {
LABEL_20:
            v1 = v7;
            while ((unint64_t)(*v1 + 1) <= 1)
            {
              if (++v1 == v3)
              {
                v1 = v3;
                break;
              }
            }
          }
LABEL_13:
          if (v1 == v3)
            return this;
        }
        *(_DWORD *)this -= 2;
LABEL_17:
        v7 = v1 + 1;
        v1 = v3;
        if (v7 != v3)
          goto LABEL_20;
        goto LABEL_13;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::StorageTracker::deleteOrigin(WTF::StringImpl *this, const WebCore::SecurityOriginData *a2)
{
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  unsigned __int8 *v5;
  const WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (*((_BYTE *)this + 128))
  {
    v3 = this;
    WebKit::WebStorageNamespaceProvider::clearLocalStorageForOrigin(a2, a2);
    WebCore::SecurityOriginData::databaseIdentifier(a2);
    v5 = (unsigned __int8 *)v3 + 96;
    if (__ldaxr((unsigned __int8 *)v3 + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x1D82A3914]((char *)v3 + 96);
LABEL_6:
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v3 + 14, &v15, v4, (uint64_t)&v16);
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)v3 + 13, &v15, v7);
    v8 = __ldxr(v5);
    if (v8 == 1)
    {
      if (!__stlxr(0, v5))
      {
LABEL_11:
        v9 = *((_QWORD *)v3 + 15);
        v16 = v3;
        WTF::String::isolatedCopy();
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v10 = &off_1E9D6A4B0;
        v10[1] = v16;
        v11 = v17;
        v17 = 0;
        v10[2] = v11;
        v14 = v10;
        WebCore::StorageThread::dispatch(v9, (uint64_t *)&v14);
        if (v14)
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
        v13 = v17;
        v17 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::destroy(v13, v12);
            this = v15;
            v15 = 0;
            if (!this)
              return this;
            goto LABEL_19;
          }
          *(_DWORD *)v13 -= 2;
        }
        this = v15;
        v15 = 0;
        if (!this)
          return this;
LABEL_19:
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v12);
        *(_DWORD *)this -= 2;
        return this;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::StringImpl *)((char *)v3 + 96));
    goto LABEL_11;
  }
  return this;
}

uint64_t WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 8 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        return 0;
      if ((WTF::equal(v11, *a2, a3) & 1) != 0)
        break;
    }
  }
  v13 = (WTF::StringImpl **)(v3 + 8 * v10);
  v14 = (WTF::StringImpl **)*a1;
  if (*a1)
  {
    v14 += *((unsigned int *)v14 - 1);
    if (v14 == v13)
      return 0;
  }
  if (v14 == v13)
    return 1;
  v15 = *v13;
  *v13 = (WTF::StringImpl *)-1;
  if (!v15)
  {
LABEL_18:
    ++*(_DWORD *)(*a1 - 16);
    v16 = *a1;
    if (*a1)
      goto LABEL_19;
    goto LABEL_23;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v15, v12);
  ++*(_DWORD *)(*a1 - 16);
  v16 = *a1;
  if (*a1)
  {
LABEL_19:
    --*(_DWORD *)(v16 - 12);
    v17 = *a1;
    if (!*a1)
      return 1;
    goto LABEL_24;
  }
LABEL_23:
  *(_DWORD *)(v16 - 12) = -1;
  v17 = *a1;
  if (!*a1)
    return 1;
LABEL_24:
  v19 = 6 * *(_DWORD *)(v17 - 12);
  v20 = *(_DWORD *)(v17 - 4);
  if (v19 >= v20 || v20 < 9)
    return 1;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v20 >> 1, 0);
  return 1;
}

WebCore::SQLiteDatabaseTracker *WebKit::StorageTracker::databasePathForOrigin@<X0>(WebCore::SQLiteDatabaseTracker *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::SQLiteDatabaseTracker *v4;
  unsigned int v5;
  WebKit::StorageTracker *v6;
  WebCore::SecurityOrigin *v7;
  _BYTE v8[16];
  unsigned int v9;
  char v10;

  if (*((_QWORD *)this + 2))
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
    v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
    v5 = v9;
    if (v9)
    {
      *a2 = 0;
      if (v5 == -1)
        return (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
LABEL_4:
      v4 = (WebCore::SQLiteDatabaseTracker *)(*(&off_1E9D6A348 + v5))((int)&v10, (WebCore::SQLiteStatement *)v8);
      return (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
    }
    WebCore::SQLiteStatement::bindText();
    v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v8);
    if ((_DWORD)v4 != 100)
    {
      *a2 = 0;
      v5 = v9;
      if (v9 == -1)
        return (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
      goto LABEL_4;
    }
    if (!v9)
    {
      v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v8);
      v5 = v9;
      if (v9 == -1)
        return (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
      goto LABEL_4;
    }
    v6 = (WebKit::StorageTracker *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::SQLiteDatabaseTracker *)WebKit::StorageTracker::diskUsageForOrigin(v6, v7);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::StorageTracker::diskUsageForOrigin(WebKit::StorageTracker *this, WebCore::SecurityOrigin *a2)
{
  uint64_t v5;
  StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (!*((_BYTE *)this + 128))
    return 0;
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_8;
  }
  MEMORY[0x1D82A3914](this);
LABEL_8:
  WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOrigin *)((char *)a2 + 8));
  WebKit::StorageTracker::databasePathForOrigin(this, &v15);
  if (!v14)
    goto LABEL_11;
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_11:
    v8 = v15;
    if (v15)
      goto LABEL_12;
LABEL_21:
    v5 = 0;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v14, v7);
  v8 = v15;
  if (!v15)
    goto LABEL_21;
LABEL_12:
  if (*((_DWORD *)v8 + 1))
  {
    v9 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v15, (const WTF::String *)v7);
    if ((_BYTE)v7)
      v5 = v9;
    else
      v5 = 0;
    v8 = v15;
    v15 = 0;
    if (v8)
    {
      v10 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_22:
    v12 = __ldxr((unsigned __int8 *)this);
    if (v12 == 1)
      goto LABEL_23;
    goto LABEL_27;
  }
  v5 = 0;
  v15 = 0;
  v10 = *(_DWORD *)v8 - 2;
  if (*(_DWORD *)v8 == 2)
  {
LABEL_26:
    WTF::StringImpl::destroy(v8, v7);
    v13 = __ldxr((unsigned __int8 *)this);
    if (v13 == 1)
      goto LABEL_23;
LABEL_27:
    __clrex();
    goto LABEL_28;
  }
LABEL_18:
  *(_DWORD *)v8 = v10;
  v11 = __ldxr((unsigned __int8 *)this);
  if (v11 != 1)
    goto LABEL_27;
LABEL_23:
  if (!__stlxr(0, (unsigned __int8 *)this))
    return v5;
LABEL_28:
  WTF::Lock::unlockSlow(this);
  return v5;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::StorageTracker::internalInitialize(void)::$_0,void>::call()
{
  const WTF::String *v0;
  StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v3, v0);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::StorageTracker::importOriginIdentifiers(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WebCore::SQLiteDatabaseTracker *v4;
  unsigned int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  unsigned __int8 *v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  const WTF::StringImpl **v32;
  _BYTE v33[24];
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _QWORD v36[2];
  unsigned int v37;

  v1 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_4:
    MEMORY[0x1D82A3914](v1);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_4;
LABEL_5:
  result = (WTF::StringImpl *)WebKit::StorageTracker::openTrackerDatabase((WebKit::StorageTracker *)v1, 0);
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_12;
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(result);
  v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
  v5 = v37;
  if (v37)
  {
    v6 = 1;
    if (v37 != -1)
LABEL_8:
      v4 = (WebCore::SQLiteDatabaseTracker *)(*(&off_1E9D6A348 + v5))((int)v33, (WebCore::SQLiteStatement *)v36);
    goto LABEL_9;
  }
  v12 = (unsigned __int8 *)(v1 + 96);
  if (__ldaxr((unsigned __int8 *)(v1 + 96)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_42;
  }
  MEMORY[0x1D82A3914](v1 + 96);
LABEL_42:
  while (1)
  {
    v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v36);
    if ((_DWORD)v4 != 100)
      break;
    if (v37)
    {
LABEL_77:
      v30 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v30, v31, v32);
    }
    WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v36);
    WTF::String::isolatedCopy();
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)v33, (uint64_t *)(v1 + 104), &v35);
    v21 = v35;
    v35 = 0;
    if (!v21)
      goto LABEL_47;
    if (*(_DWORD *)v21 != 2)
    {
      *(_DWORD *)v21 -= 2;
LABEL_47:
      v22 = v34;
      v34 = 0;
      if (v22)
        goto LABEL_50;
      goto LABEL_41;
    }
    WTF::StringImpl::destroy(v21, v20);
    v22 = v34;
    v34 = 0;
    if (v22)
    {
LABEL_50:
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
LABEL_41:
    if (v37)
      goto LABEL_77;
  }
  v23 = (int)v4;
  v24 = __ldxr(v12);
  if (v24 == 1)
  {
    if (!__stlxr(0, v12))
    {
      v6 = (_DWORD)v4 != 101;
      v5 = v37;
      if (v37 != -1)
        goto LABEL_8;
      goto LABEL_9;
    }
  }
  else
  {
    __clrex();
  }
  v4 = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 96));
  v6 = v23 != 101;
  v5 = v37;
  if (v37 != -1)
    goto LABEL_8;
LABEL_9:
  result = (WTF::StringImpl *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  if (v6)
  {
    v7 = 0;
    v8 = __ldxr((unsigned __int8 *)v1);
    if (v8 != 1)
      goto LABEL_11;
LABEL_13:
    if (__stlxr(0, (unsigned __int8 *)v1))
      goto LABEL_14;
    goto LABEL_15;
  }
LABEL_12:
  v7 = 1;
  v9 = __ldxr((unsigned __int8 *)v1);
  if (v9 == 1)
    goto LABEL_13;
LABEL_11:
  __clrex();
LABEL_14:
  result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
LABEL_15:
  if (!v7)
    return result;
  WebKit::StorageTracker::syncFileSystemAndTrackerDatabase((WebKit::StorageTracker *)v1);
  v10 = (unsigned __int8 *)(v1 + 80);
  if (__ldaxr((unsigned __int8 *)(v1 + 80)))
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stxr(1u, v10))
LABEL_21:
    MEMORY[0x1D82A3914](v1 + 80);
  if (!*(_QWORD *)(v1 + 88))
  {
LABEL_61:
    v26 = __ldxr(v10);
    if (v26 != 1)
      goto LABEL_72;
LABEL_62:
    if (__stlxr(0, v10))
      goto LABEL_73;
    goto LABEL_74;
  }
  v14 = (unsigned __int8 *)(v1 + 96);
  if (__ldaxr((unsigned __int8 *)(v1 + 96)))
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stxr(1u, v14))
LABEL_26:
    MEMORY[0x1D82A3914](v1 + 96);
  v16 = *(_QWORD **)(v1 + 104);
  if (v16)
  {
    v17 = *((unsigned int *)v16 - 1);
    v18 = &v16[v17];
    if (*((_DWORD *)v16 - 3))
    {
      if ((_DWORD)v17)
      {
        v19 = 8 * v17;
        while ((unint64_t)(*v16 + 1) <= 1)
        {
          ++v16;
          v19 -= 8;
          if (!v19)
          {
            v16 = v18;
            break;
          }
        }
      }
      while (v16 != v18)
      {
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v1 + 88) + 16))(*(_QWORD *)(v1 + 88), v16);
        v27 = v16 + 1;
        v16 = v18;
        if (v27 != v18)
        {
          v16 = v27;
          while ((unint64_t)(*v16 + 1) <= 1)
          {
            if (++v16 == v18)
            {
              v16 = v18;
              break;
            }
          }
        }
      }
    }
  }
  v25 = __ldxr(v14);
  if (v25 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_61;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 96));
  v28 = __ldxr(v10);
  if (v28 == 1)
    goto LABEL_62;
LABEL_72:
  __clrex();
LABEL_73:
  WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 80));
LABEL_74:
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v29 = off_1E9D6A3C8;
  v29[1] = v1;
  v36[0] = v29;
  WTF::callOnMainThread();
  result = (WTF::StringImpl *)v36[0];
  v36[0] = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v6 = *a2;
    if (!*a2)
    {
      v7 = 0;
      v8 = *a3;
      v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = *a3;
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    goto LABEL_6;
LABEL_4:
  v10 = v9 >> 8;
LABEL_7:
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v7;
    v14 = (WTF::StringImpl **)(v6 + 8 * (v10 & v7));
    v15 = *v14;
    if (*v14 == (WTF::StringImpl *)-1)
    {
      v11 = (WTF::StringImpl **)(v6 + 8 * v13);
      goto LABEL_9;
    }
    if (!v15)
    {
      if (v11)
      {
        *v11 = 0;
        --*(_DWORD *)(*a2 - 16);
        v14 = v11;
      }
      v19 = *a3;
      *a3 = 0;
      result = *v14;
      *v14 = v19;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
          v20 = *a2;
          if (*a2)
          {
LABEL_21:
            ++*(_DWORD *)(v20 - 12);
            v21 = *a2;
            if (*a2)
              goto LABEL_22;
            goto LABEL_31;
          }
LABEL_30:
          *(_DWORD *)(v20 - 12) = 1;
          v21 = *a2;
          if (*a2)
          {
LABEL_22:
            v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
            v23 = *(unsigned int *)(v21 - 4);
            if (v23 <= 0x400)
              goto LABEL_23;
            goto LABEL_32;
          }
LABEL_31:
          v22 = *(unsigned int *)(v21 - 16);
          v23 = *(unsigned int *)(v21 - 4);
          if (v23 <= 0x400)
          {
LABEL_23:
            if (3 * v23 > 4 * v22)
            {
LABEL_35:
              v25 = v21 + 8 * v23;
              v24 = 1;
              goto LABEL_36;
            }
            if (!(_DWORD)v23)
            {
              result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
              v14 = (WTF::StringImpl **)result;
              v21 = *a2;
              if (!*a2)
              {
LABEL_26:
                v23 = 0;
                goto LABEL_35;
              }
LABEL_34:
              v23 = *(unsigned int *)(v21 - 4);
              goto LABEL_35;
            }
LABEL_33:
            result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), v14);
            v14 = (WTF::StringImpl **)result;
            v21 = *a2;
            if (!*a2)
              goto LABEL_26;
            goto LABEL_34;
          }
LABEL_32:
          if (v23 > 2 * v22)
            goto LABEL_35;
          goto LABEL_33;
        }
        *(_DWORD *)result -= 2;
      }
      v20 = *a2;
      if (*a2)
        goto LABEL_21;
      goto LABEL_30;
    }
    result = (WTF::StringImpl *)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v10 = i + v13;
  }
  v17 = *a2;
  if (*a2)
    v18 = *(unsigned int *)(v17 - 4);
  else
    v18 = 0;
  v24 = 0;
  v25 = v17 + 8 * v18;
LABEL_36:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
          {
            v16 = *(_DWORD *)(v15 - 8);
            v17 = *((_DWORD *)v14 + 4);
            if (v17 >= 0x100)
              goto LABEL_12;
LABEL_14:
            v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            v16 = 0;
            v17 = *((_DWORD *)v14 + 4);
            if (v17 < 0x100)
              goto LABEL_14;
LABEL_12:
            v18 = v17 >> 8;
          }
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 8 * v20));
          v21 = (WTF::StringImpl **)(v15 + 8 * v20);
          *v21 = 0;
          v22 = *v13;
          *v13 = 0;
          *v21 = v22;
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
          goto LABEL_7;
        }
        *v13 = 0;
      }
LABEL_7:
      if (++v11 == v7)
        goto LABEL_25;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_25:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::syncImportOriginIdentifiers(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1);
LABEL_5:
  result = *(_QWORD *)(v1 + 88);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (__stlxr(0, (unsigned __int8 *)v1))
      return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF *result;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v7 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    v7 = *a1;
    if (!*a1)
    {
      v8 = 0;
      v9 = *a2;
      v10 = *((_DWORD *)*a2 + 4);
      if (v10 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v11 = WTF::StringImpl::hashSlowCase(v9);
      goto LABEL_7;
    }
  }
  v8 = *(_DWORD *)(v7 - 8);
  v9 = *a2;
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    goto LABEL_6;
LABEL_4:
  v11 = v10 >> 8;
LABEL_7:
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v8;
    v15 = (WTF::StringImpl **)(v7 + 8 * (v11 & v8));
    result = *v15;
    if (*v15 == (WTF::StringImpl *)-1)
    {
      v12 = (WTF::StringImpl **)(v7 + 8 * v14);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v12)
      {
        result = 0;
        *v12 = 0;
        --*(_DWORD *)(*a1 - 16);
        v15 = v12;
      }
      v19 = *a2;
      if (*a2)
        *(_DWORD *)v19 += 2;
      *v15 = v19;
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        v20 = *a1;
        if (*a1)
          goto LABEL_21;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v20 = *a1;
        if (*a1)
        {
LABEL_21:
          v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
          v22 = *(unsigned int *)(v20 - 4);
          if (v22 <= 0x400)
            goto LABEL_22;
          goto LABEL_30;
        }
      }
      v21 = *(unsigned int *)(v20 - 16);
      v22 = *(unsigned int *)(v20 - 4);
      if (v22 <= 0x400)
      {
LABEL_22:
        if (3 * v22 > 4 * v21)
        {
LABEL_33:
          v24 = v20 + 8 * v22;
          v23 = 1;
          goto LABEL_34;
        }
        if (!(_DWORD)v22)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, v15);
          v15 = (WTF::StringImpl **)result;
          v20 = *a1;
          if (!*a1)
          {
LABEL_25:
            v22 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v22 = *(unsigned int *)(v20 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v15);
        v15 = (WTF::StringImpl **)result;
        v20 = *a1;
        if (!*a1)
          goto LABEL_25;
        goto LABEL_32;
      }
LABEL_30:
      if (v22 > 2 * v21)
        goto LABEL_33;
      goto LABEL_31;
    }
    result = (WTF *)WTF::equal(result, *a2, a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v11 = i + v14;
  }
  v17 = *a1;
  if (*a1)
    v18 = *(unsigned int *)(v17 - 4);
  else
    v18 = 0;
  v23 = 0;
  v24 = v17 + 8 * v18;
LABEL_34:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v23;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::StorageTracker::syncFileSystemAndTrackerDatabase(void)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E9D6A3F0;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::syncFileSystemAndTrackerDatabase(void)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E9D6A3F0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::syncFileSystemAndTrackerDatabase(void)::$_0,void>::call(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t result;
  char v3;
  _BYTE v4[24];
  int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 16))
  {
    v1 = *(WTF::StringImpl **)(a1 + 8);
    result = WebCore::SecurityOriginData::fromDatabaseIdentifier();
    if (!v6)
      return result;
  }
  else
  {
    v1 = *(WTF::StringImpl **)(a1 + 8);
    result = WebCore::SecurityOriginData::fromDatabaseIdentifier();
    if (!v6)
      return result;
  }
  result = (uint64_t)WebKit::StorageTracker::deleteOrigin(v1, (const WebCore::SecurityOriginData *)v4);
  if (v6)
  {
    if (v5 != -1)
      return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v3, v4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_1,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E9D6A418;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (WTF::StringImpl *)a1[3];
    a1[3] = 0;
    if (!v4)
      return a1;
    goto LABEL_7;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (!v4)
    return a1;
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_1,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E9D6A418;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (!v4)
        goto LABEL_9;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v4)
    goto LABEL_9;
LABEL_7:
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, a2);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
  *(_DWORD *)v4 -= 2;
LABEL_9:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_1,void>::call(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1[1] + 120);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v4 = a1[2];
  *v3 = &off_1E9D6A440;
  v3[1] = v4;
  v5 = a1[3];
  a1[3] = 0;
  v3[2] = v5;
  v6 = a1[4];
  a1[4] = 0;
  v3[3] = v6;
  v8 = v3;
  WebCore::StorageThread::dispatch(v2, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E9D6A440;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (WTF::StringImpl *)a1[2];
    a1[2] = 0;
    if (!v4)
      return a1;
    goto LABEL_7;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E9D6A440;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v4)
        goto LABEL_9;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    goto LABEL_9;
LABEL_7:
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, a2);
    v5 = this;
    return WTF::fastFree(v5, a2);
  }
  *(_DWORD *)v4 -= 2;
LABEL_9:
  v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::setOriginDetails(WTF::String const&,WTF::String const&)::$_0,void>::call(WebKit::StorageTracker **a1)
{
  return WebKit::StorageTracker::syncSetOriginDetails(a1[1], a1 + 2, (const WTF::String *)(a1 + 3));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

unint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 32 * v5;
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 24) = -1;
          v10 = *((unsigned int *)v9 + 6);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E9D6A468[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 24) = v10;
            v11 = *((unsigned int *)v9 + 6);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 6) = -1;
          v7 += 32;
          v9 = (WTF *)((char *)v9 + 32);
          v8 -= 32;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteAllOrigins(void)::$_0,void>::call(WebCore::SQLiteDatabaseTracker *a1)
{
  uint64_t v1;
  WebCore::SQLiteDatabaseTracker *v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  int v15;
  WTF *v16;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  const WTF::String *v20;
  StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v25;
  StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v32;
  WTF::StringImpl *v33;
  _BYTE v34[16];
  unsigned int v35;

  v1 = *((_QWORD *)a1 + 1);
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(a1);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](v1);
LABEL_5:
  v3 = (WebCore::SQLiteDatabaseTracker *)WebKit::StorageTracker::openTrackerDatabase((WebKit::StorageTracker *)v1, 0);
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_63;
  v3 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::prepareStatement();
  v4 = v35;
  if (v35)
  {
LABEL_61:
    if (v4 != -1)
      v3 = (WebCore::SQLiteDatabaseTracker *)(*(&off_1E9D6A348 + v4))((int)&v33, (WebCore::SQLiteStatement *)v34);
LABEL_63:
    v30 = __ldxr((unsigned __int8 *)v1);
    if (v30 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v1))
        return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v3);
    }
    else
    {
      __clrex();
    }
    v3 = (WebCore::SQLiteDatabaseTracker *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v3);
  }
  v5 = (unsigned __int8 *)(v1 + 96);
  v6 = (unsigned __int8 *)(v1 + 80);
  while (1)
  {
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v34) != 100)
    {
      v3 = *(WebCore::SQLiteDatabaseTracker **)(v1 + 16);
      if (v3)
      {
        sqlite3_file_control(v3, 0, 101, 0);
        v3 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(v1 + 8));
      }
      v4 = v35;
      goto LABEL_61;
    }
    if (v35)
      goto LABEL_69;
    WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v34);
    if (__ldaxr(v5))
    {
      __clrex();
LABEL_16:
      MEMORY[0x1D82A3914](v1 + 96);
      goto LABEL_17;
    }
    if (__stxr(1u, v5))
      goto LABEL_16;
LABEL_17:
    v10 = *(_QWORD *)(v1 + 112);
    if (!v10)
    {
LABEL_27:
      v17 = __ldxr(v5);
      if (v17 != 1)
        goto LABEL_31;
LABEL_28:
      if (__stlxr(0, v5))
        goto LABEL_32;
      goto LABEL_33;
    }
    v11 = *(_DWORD *)(v10 - 8);
    v12 = *((_DWORD *)v33 + 4);
    if (v12 < 0x100)
      v13 = WTF::StringImpl::hashSlowCase(v33);
    else
      v13 = v12 >> 8;
    for (i = 0; ; v13 = i + v15)
    {
      v15 = v13 & v11;
      v16 = *(WTF **)(v10 + 8 * (v13 & v11));
      if (v16 == (WTF *)-1)
        goto LABEL_22;
      if (!v16)
        break;
      if ((WTF::equal(v16, v33, v8) & 1) != 0)
      {
        LODWORD(v10) = 1;
        goto LABEL_27;
      }
LABEL_22:
      ++i;
    }
    LODWORD(v10) = 0;
    v18 = __ldxr(v5);
    if (v18 == 1)
      goto LABEL_28;
LABEL_31:
    __clrex();
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 96));
LABEL_33:
    v19 = v33;
    v33 = 0;
    if (!v19)
    {
LABEL_36:
      if ((_DWORD)v10)
        break;
      goto LABEL_10;
    }
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
      goto LABEL_36;
    }
    WTF::StringImpl::destroy(v19, v7);
    if ((_DWORD)v10)
      break;
LABEL_10:
    if (v35)
      goto LABEL_69;
  }
  if (!v35)
  {
    WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v34);
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v33, v20);
    v22 = v33;
    v33 = 0;
    if (!v22)
      goto LABEL_43;
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v21);
      if (__ldaxr(v6))
        goto LABEL_44;
    }
    else
    {
      *(_DWORD *)v22 -= 2;
LABEL_43:
      if (__ldaxr(v6))
      {
LABEL_44:
        __clrex();
        goto LABEL_47;
      }
    }
    if (__stxr(1u, v6))
LABEL_47:
      MEMORY[0x1D82A3914](v1 + 80);
    v25 = *(_QWORD *)(v1 + 88);
    if (!v25)
    {
LABEL_53:
      v28 = __ldxr(v6);
      if (v28 == 1)
        goto LABEL_54;
      goto LABEL_8;
    }
    if (!v35)
    {
      WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v34);
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v25 + 16))(v25, &v33);
      v27 = v33;
      v33 = 0;
      if (!v27)
        goto LABEL_53;
      if (*(_DWORD *)v27 != 2)
      {
        *(_DWORD *)v27 -= 2;
        goto LABEL_53;
      }
      WTF::StringImpl::destroy(v27, v26);
      v29 = __ldxr(v6);
      if (v29 == 1)
      {
LABEL_54:
        if (!__stlxr(0, v6))
          goto LABEL_10;
LABEL_9:
        WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 80));
        goto LABEL_10;
      }
LABEL_8:
      __clrex();
      goto LABEL_9;
    }
  }
LABEL_69:
  v32 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteOrigin(WebCore::SecurityOriginData const&)::$_0,void>::~CallableWrapper(v32);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteOrigin(WebCore::SecurityOriginData const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E9D6A4B0;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteOrigin(WebCore::SecurityOriginData const&)::$_0,void>::~CallableWrapper(WTF *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E9D6A4B0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageTracker::deleteOrigin(WebCore::SecurityOriginData const&)::$_0,void>::call(WTF::StringImpl **a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  const WTF::StringImpl *v4;
  unsigned __int8 *v6;
  WTF::StringImpl **v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  int v14;
  int v15;
  int v16;
  StringImpl *v17;
  int v18;
  const WTF::StringImpl *v19;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  _BYTE v31[16];
  unsigned int v32;
  WTF::StringImpl *v33;
  char v34;

  v2 = a1[1];
  v3 = WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)a1);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  v3 = MEMORY[0x1D82A3914](v2);
LABEL_5:
  v6 = (unsigned __int8 *)v2 + 96;
  if (__ldaxr((unsigned __int8 *)v2 + 96))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_9;
  }
  v3 = MEMORY[0x1D82A3914]((char *)v2 + 96);
LABEL_9:
  v8 = a1 + 2;
  v9 = *((_QWORD *)v2 + 14);
  if (!v9)
  {
LABEL_19:
    v15 = __ldxr(v6);
    if (v15 != 1)
      goto LABEL_24;
LABEL_20:
    if (__stlxr(0, v6))
      goto LABEL_25;
    if (!(_DWORD)v9)
      goto LABEL_63;
LABEL_26:
    v3 = WebKit::StorageTracker::openTrackerDatabase(v2, 0);
    if (!*((_QWORD *)v2 + 2))
      goto LABEL_63;
    v3 = (uint64_t)WebKit::StorageTracker::databasePathForOrigin(v2, &v33);
    if (!v33)
      goto LABEL_63;
    if (!*((_DWORD *)v33 + 1))
      goto LABEL_60;
    WebCore::SQLiteDatabase::prepareStatement();
    if (v32 == -1)
      goto LABEL_60;
    if (v32)
    {
      (*(&off_1E9D6A348 + v32))((int)&v34, (WebCore::SQLiteStatement *)v31);
      goto LABEL_60;
    }
    WebCore::SQLiteStatement::bindText();
    v18 = WebCore::SQLiteStatement::executeCommand((WebCore::SQLiteStatement *)v31);
    if (v32 != -1)
      (*(&off_1E9D6A348 + v32))((int)&v34, (WebCore::SQLiteStatement *)v31);
    if (!v18)
    {
LABEL_60:
      v3 = (uint64_t)v33;
      v33 = 0;
      if (!v3)
        goto LABEL_63;
      if (*(_DWORD *)v3 != 2)
      {
        *(_DWORD *)v3 -= 2;
        goto LABEL_63;
      }
      v3 = WTF::StringImpl::destroy((WTF::StringImpl *)v3, v17);
      v29 = __ldxr((unsigned __int8 *)v2);
      if (v29 == 1)
        goto LABEL_64;
      goto LABEL_67;
    }
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v33, (const WTF::String *)v17);
    if (__ldaxr(v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_39;
    }
    MEMORY[0x1D82A3914]((char *)v2 + 96);
LABEL_39:
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)v2 + 13, v8, v19);
    v21 = *((_QWORD *)v2 + 13);
    if (v21)
      v22 = *(_DWORD *)(v21 - 12) == 0;
    else
      v22 = 1;
    v23 = __ldxr(v6);
    if (v23 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_47:
        if (v22)
        {
          sqlite3_file_control(*((sqlite3 **)v2 + 2), 0, 101, 0);
          WebCore::SQLiteDatabase::close((WTF::StringImpl *)((char *)v2 + 8));
        }
        v24 = (unsigned __int8 *)v2 + 80;
        if (__ldaxr((unsigned __int8 *)v2 + 80))
        {
          __clrex();
        }
        else if (!__stxr(1u, v24))
        {
          goto LABEL_53;
        }
        MEMORY[0x1D82A3914]((char *)v2 + 80);
LABEL_53:
        v26 = *((_QWORD *)v2 + 11);
        if (v26)
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v26 + 16))(v26, v8);
        v27 = __ldxr(v24);
        if (v27 == 1)
        {
          if (!__stlxr(0, v24))
            goto LABEL_60;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::StringImpl *)((char *)v2 + 80));
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::StringImpl *)((char *)v2 + 96));
    goto LABEL_47;
  }
  v10 = *(_DWORD *)(v9 - 8);
  v11 = *((_DWORD *)*v8 + 4);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(*v8);
  else
    v12 = v11 >> 8;
  for (i = 0; ; v12 = i + v14)
  {
    v14 = v12 & v10;
    v3 = *(_QWORD *)(v9 + 8 * (v12 & v10));
    if (v3 == -1)
      goto LABEL_14;
    if (!v3)
      break;
    v3 = WTF::equal((WTF *)v3, *v8, v4);
    if ((v3 & 1) != 0)
    {
      LODWORD(v9) = 1;
      goto LABEL_19;
    }
LABEL_14:
    ++i;
  }
  LODWORD(v9) = 0;
  v16 = __ldxr(v6);
  if (v16 == 1)
    goto LABEL_20;
LABEL_24:
  __clrex();
LABEL_25:
  v3 = WTF::Lock::unlockSlow((WTF::StringImpl *)((char *)v2 + 96));
  if ((_DWORD)v9)
    goto LABEL_26;
LABEL_63:
  v28 = __ldxr((unsigned __int8 *)v2);
  if (v28 == 1)
  {
LABEL_64:
    if (!__stlxr(0, (unsigned __int8 *)v2))
      return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
    goto LABEL_68;
  }
LABEL_67:
  __clrex();
LABEL_68:
  v3 = WTF::Lock::unlockSlow(v2);
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
}

uint64_t kitClass(WebCore::Node *a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  WTF *v93;
  void *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;

  result = 0;
  v3 = *((unsigned __int16 *)a1 + 14);
  switch(v3 >> 12)
  {
    case 1u:
      if ((v3 & 0x10) == 0)
        return objc_opt_class();
      v4 = objc_opt_class();
      v5 = (uint64_t *)elementClassMap;
      if (!elementClassMap)
      {
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v6 = 0;
        elementClassMap = (uint64_t)v6;
        v7 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5EE8];
        v97 = v7;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v8 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6178];
        v97 = v8;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v9 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FE0];
        v97 = v9;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v10 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FE8];
        v97 = v10;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v11 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5CE8];
        v97 = v11;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v12 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FF0];
        v97 = v12;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v13 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F08];
        v97 = v13;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v14 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6180];
        v97 = v14;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v15 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6188];
        v97 = v15;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v16 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5C48];
        v97 = v16;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v17 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F88];
        v97 = v17;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v18 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5D18];
        v97 = v18;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v19 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F90];
        v97 = v19;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v20 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F98];
        v97 = v20;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v21 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FA0];
        v97 = v21;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v22 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F10];
        v97 = v22;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v23 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6098];
        v97 = v23;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v24 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5D48];
        v97 = v24;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v25 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FF8];
        v97 = v25;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v26 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6008];
        v97 = v26;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v27 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD60A8];
        v97 = v27;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v28 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5D50];
        v97 = v28;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v29 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F18];
        v97 = v29;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v30 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F20];
        v97 = v30;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v31 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F28];
        v97 = v31;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v32 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F30];
        v97 = v32;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v33 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F38];
        v97 = v33;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v34 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F40];
        v97 = v34;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v35 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6010];
        v97 = v35;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v36 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F48];
        v97 = v36;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v37 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6018];
        v97 = v37;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v38 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD61C0];
        v97 = v38;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v39 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FB0];
        v97 = v39;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v40 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD60B8];
        v97 = v40;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v41 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FB8];
        v97 = v41;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v42 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD60C0];
        v97 = v42;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v43 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD61D8];
        v97 = v43;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v44 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F50];
        v97 = v44;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v45 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6020];
        v97 = v45;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v46 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5C70];
        v97 = v46;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v47 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FC0];
        v97 = v47;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v48 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5C80];
        v97 = v48;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v49 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6030];
        v97 = v49;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v50 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6038];
        v97 = v50;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v51 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD61F8];
        v97 = v51;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v52 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F58];
        v97 = v52;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v53 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5D68];
        v97 = v53;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v54 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6200];
        v97 = v54;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v55 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5EF8];
        v97 = v55;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v56 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD60E8];
        v97 = v56;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v57 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FC8];
        v97 = v57;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v58 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F00];
        v97 = v58;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v59 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6210];
        v97 = v59;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v60 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6218];
        v97 = v60;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v61 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6118];
        v97 = v61;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v62 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6120];
        v97 = v62;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v63 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6128];
        v97 = v63;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v64 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F60];
        v97 = v64;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v65 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5D90];
        v97 = v65;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v66 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6138];
        v97 = v66;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v67 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F68];
        v97 = v67;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v68 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6140];
        v97 = v68;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v69 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6148];
        v97 = v69;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v70 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F70];
        v97 = v70;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v71 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5F78];
        v97 = v71;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v72 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD6158];
        v97 = v72;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v73 = objc_opt_class();
        v96 = *MEMORY[0x1E0DD5FD0];
        v97 = v73;
        WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(&v95, (uint64_t *)elementClassMap, &v96, &v97);
        v5 = (uint64_t *)elementClassMap;
      }
      v74 = *((_QWORD *)a1 + 12);
      if (*(_QWORD *)(v74 + 16))
      {
        MEMORY[0x1D82A44D8](&v95, MEMORY[0x1E0CBF2F8], v74 + 24, v74 + 32);
        v75 = (_DWORD *)v95;
        v76 = *v5;
        if (*v5)
        {
          v77 = *(_DWORD *)(v76 - 8);
          v78 = (~((_QWORD)v95 << 32) + v95) ^ ((~((_QWORD)v95 << 32) + (_QWORD)v95) >> 22);
          v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((unint64_t)(v78 + ~(v78 << 13)) >> 8));
          v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
          v81 = v77 & ((v80 >> 31) ^ v80);
          v82 = *(_QWORD *)(v76 + 16 * v81);
          if (v82 == (_QWORD)v95)
          {
LABEL_12:
            v84 = *(_QWORD *)(v76 + 16 * v81 + 8);
            goto LABEL_20;
          }
          v83 = 1;
          while (v82)
          {
            v81 = ((_DWORD)v81 + v83) & v77;
            v82 = *(_QWORD *)(v76 + 16 * v81);
            ++v83;
            if (v82 == (_QWORD)v95)
              goto LABEL_12;
          }
        }
        v84 = 0;
LABEL_20:
        *(_QWORD *)&v95 = 0;
        if (v75)
        {
          if (*v75 == 1)
          {
            v93 = (WTF *)MEMORY[0x1D82A44CC]();
            WTF::fastFree(v93, v94);
          }
          else
          {
            --*v75;
          }
        }
        goto LABEL_25;
      }
      v85 = *v5;
      if (*v5)
      {
        v86 = *(_DWORD *)(v85 - 8);
        v87 = (~(v74 << 32) + v74) ^ ((unint64_t)(~(v74 << 32) + v74) >> 22);
        v88 = 9 * ((v87 + ~(v87 << 13)) ^ ((v87 + ~(v87 << 13)) >> 8));
        v89 = (v88 ^ (v88 >> 15)) + ~((v88 ^ (v88 >> 15)) << 27);
        v90 = v86 & ((v89 >> 31) ^ v89);
        v91 = *(_QWORD *)(v85 + 16 * v90);
        if (v91 == v74)
        {
LABEL_18:
          v84 = *(_QWORD *)(v85 + 16 * v90 + 8);
          goto LABEL_25;
        }
        v92 = 1;
        while (v91)
        {
          v90 = ((_DWORD)v90 + v92) & v86;
          v91 = *(_QWORD *)(v85 + 16 * v90);
          ++v92;
          if (v91 == v74)
            goto LABEL_18;
        }
      }
      v84 = 0;
LABEL_25:
      if (v84)
        return v84;
      else
        return v4;
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
      return objc_opt_class();
    default:
      return result;
  }
}

void sub_1D7FD6A2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15)
    WTF::fastFree(a15, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D7FD6C28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (!a9)
    _Unwind_Resume(exception_object);
  WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D7FD6D68(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D7FD6F10(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D7FD7040(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D7FD7670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1D7FD7684(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  WTF *v15;

  v15 = a13;
  if (!a13)
  {
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
    _Unwind_Resume(a1);
  }
  a13 = 0;
  a14 = 0;
  WTF::fastFree(v15, a2);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void WebCore::SimpleRange::~SimpleRange(WebCore::SimpleRange *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

void sub_1D7FD7BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a16)
  {
    WTF::RefCounted<WebCore::TextIndicator>::deref(a16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D7FD7D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1D7FD7D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1D7FD7D84(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a9)
    WTF::fastFree(a9, a2);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a13);
  _Unwind_Resume(a1);
}

void sub_1D7FD7F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = *(_QWORD *)(v10 - 24);
  *(_QWORD *)(v10 - 24) = 0;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D7FD80AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1D7FD80C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1D7FD80D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12)
{
  if (!a9)
  {
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
    _Unwind_Resume(a1);
  }
  WTF::fastFree(a9, a2);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
  _Unwind_Resume(a1);
}

void sub_1D7FD852C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11, WTF *a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a10)
  {
    if (*a10 != 1)
    {
      --*a10;
      _Unwind_Resume(exception_object);
    }
    v13 = (WTF *)MEMORY[0x1D82A4FD0]();
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D7FD8690(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

DOMObjectInternal *kit(DOMObjectInternal *result)
{
  uint64_t v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  uint64_t v8;
  _QWORD *v9;

  if (result)
  {
    v1 = (uint64_t)result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMNodeFilter alloc], "_init");
    v3[2] = v1;
    ++*(_DWORD *)(v1 + 16);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMBlob alloc], "_init");
    v3[2] = v1;
    ++*((_DWORD *)v1 + 4);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  uint64_t v8;
  _QWORD *v9;

  if (result)
  {
    v1 = (uint64_t)result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMCSSRuleList alloc], "_init");
    v3[2] = v1;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  uint64_t v8;
  _QWORD *v9;

  if (result)
  {
    v1 = (uint64_t)result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMCSSStyleDeclaration alloc], "_init");
    v3[2] = v1;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  NSObject *DOMWrapper;
  NSObject *v3;

  if (result)
  {
    v1 = result;
    DOMWrapper = getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
    }
    else
    {
      v3 = -[WebScriptObject _init]([DOMCounter alloc], "_init");
      v3[2].isa = v1;
      ++*(_DWORD *)v1;
      addDOMWrapper(v3, v1);
    }
    return (DOMObjectInternal *)(id)CFMakeCollectable(v3);
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMFileList alloc], "_init");
    v3[2] = v1;
    ++*((_DWORD *)v1 + 2);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMHTMLOptionsCollection alloc], "_init");
    v3[2] = v1;
    ++*((_DWORD *)v1 + 4);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMImplementation alloc], "_init");
    v3[2] = v1;
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 1) + 8) + 24) += 2;
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  const void *DOMWrapper;
  const void *v3;
  _QWORD *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      return (DOMObjectInternal *)(id)CFMakeCollectable(v3);
    }
    v4 = -[WebScriptObject _init]([DOMMediaError alloc], "_init");
    v4[2] = v1;
    ++*(_DWORD *)v1;
    v9 = v4;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_8;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_8:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        return (DOMObjectInternal *)(id)CFMakeCollectable(v4);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    return (DOMObjectInternal *)(id)CFMakeCollectable(v4);
  }
  return result;
}

{
  DOMObjectInternal *v1;
  const void *DOMWrapper;
  const void *v3;
  _QWORD *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      return (DOMObjectInternal *)(id)CFMakeCollectable(v3);
    }
    v4 = -[WebScriptObject _init]([DOMMediaList alloc], "_init");
    v4[2] = v1;
    ++*(_DWORD *)v1;
    v9 = v4;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_8;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_8:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        return (DOMObjectInternal *)(id)CFMakeCollectable(v4);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    return (DOMObjectInternal *)(id)CFMakeCollectable(v4);
  }
  return result;
}

{
  WebCore::NamedNodeMap *v1;
  const void *DOMWrapper;
  const void *v3;
  _QWORD *v4;
  int v6;
  _BYTE v7[24];
  WebCore::NamedNodeMap *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      return (DOMObjectInternal *)(id)CFMakeCollectable(v3);
    }
    v4 = -[WebScriptObject _init]([DOMNamedNodeMap alloc], "_init");
    v4[2] = v1;
    WebCore::NamedNodeMap::ref(v1);
    v9 = v4;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_8;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_8:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        return (DOMObjectInternal *)(id)CFMakeCollectable(v4);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    return (DOMObjectInternal *)(id)CFMakeCollectable(v4);
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMNodeIterator alloc], "_init");
    v3[2] = v1;
    ++*((_DWORD *)v1 + 2);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  uint64_t v8;
  _QWORD *v9;

  if (result)
  {
    v1 = (uint64_t)result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMNodeList alloc], "_init");
    v3[2] = v1;
    ++*(_DWORD *)(v1 + 16);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMRGBColor alloc], "_init");
    v3[2] = v1;
    ++*(_DWORD *)v1;
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMRange alloc], "_init");
    v3[2] = v1;
    ++*((_DWORD *)v1 + 2);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMRect alloc], "_init");
    v3[2] = v1;
    ++*(_DWORD *)v1;
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMStyleSheetList alloc], "_init");
    v3[2] = v1;
    ++*(_DWORD *)v1;
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMTimeRanges alloc], "_init");
    v3[2] = v1;
    ++*(_DWORD *)v1;
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMTokenList alloc], "_init");
    v3[2] = v1;
    *(_DWORD *)(*(_QWORD *)v1 + 24) += 2;
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMTreeWalker alloc], "_init");
    v3[2] = v1;
    ++*((_DWORD *)v1 + 2);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMNativeXPathNSResolver alloc], "_init");
    v3[2] = v1;
    ++*((_DWORD *)v1 + 2);
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMXPathResult alloc], "_init");
    v3[2] = v1;
    ++*(_DWORD *)v1;
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

{
  DOMObjectInternal *v1;
  _QWORD *DOMWrapper;
  _QWORD *v3;
  void *v4;
  int v6;
  _BYTE v7[24];
  DOMObjectInternal *v8;
  _QWORD *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (_QWORD *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return (DOMObjectInternal *)v4;
    }
    v3 = -[WebScriptObject _init]([DOMXPathExpression alloc], "_init");
    v3[2] = v1;
    ++*(_DWORD *)v1;
    v9 = v3;
    v8 = v1;
    if (__ldaxr(wrapperCacheLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, wrapperCacheLock))
    {
      goto LABEL_11;
    }
    MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_11:
    {
      wrapperCache(void)::map = 0;
    }
    WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
    v6 = __ldxr(wrapperCacheLock);
    if (v6 == 1)
    {
      if (!__stlxr(0, wrapperCacheLock))
        goto LABEL_4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    v4 = (void *)CFMakeCollectable(v3);
    return (DOMObjectInternal *)v4;
  }
  return result;
}

void sub_1D7FD8A70(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FD8A84(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

id kit(WebCore::LocalDOMWindow *a1)
{
  DOMObjectInternal *v1;
  uint64_t v2;
  _QWORD *DOMWrapper;
  _QWORD *v4;
  void *v5;
  int v7;
  _BYTE v9[24];
  uint64_t v10;
  _QWORD *v11;

  if (a1)
  {
    v1 = (DOMObjectInternal *)WebCore::LocalDOMWindow::frame(a1);
    if (v1)
    {
      v2 = (uint64_t)v1;
      DOMWrapper = (_QWORD *)getDOMWrapper(v1);
      if (DOMWrapper)
      {
        v4 = DOMWrapper;
        CFRetain(DOMWrapper);
LABEL_5:
        v5 = (void *)CFMakeCollectable(v4);
        return v5;
      }
      v4 = -[WebScriptObject _init]([DOMAbstractView alloc], "_init");
      v4[2] = v2;
      v11 = v4;
      v10 = v2;
      if (__ldaxr(wrapperCacheLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, wrapperCacheLock))
      {
        goto LABEL_12;
      }
      MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_12:
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, &v10, (uint64_t *)&v11, (uint64_t)v9);
      v7 = __ldxr(wrapperCacheLock);
      if (v7 == 1)
      {
        if (!__stlxr(0, wrapperCacheLock))
          goto LABEL_5;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      v5 = (void *)CFMakeCollectable(v4);
      return v5;
    }
  }
  return 0;
}

void sub_1D7FD8D60(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FD8D74(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

id kit(WebCore::WindowProxy *a1)
{
  WebCore::LocalDOMWindow *v1;

  if (a1 && (v1 = (WebCore::LocalDOMWindow *)WebCore::WindowProxy::window(a1)) != 0 && !*((_BYTE *)v1 + 56))
    return kit(v1);
  else
    return 0;
}

void sub_1D7FD95C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  void *v13;

  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v13);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v10 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FD9620(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  WTF::StringImpl *v10;
  void *v12;

  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v12);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v10 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FD9714(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FD9844(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v15;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FD98FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FD99EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FD9AD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FD9B48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FD9C88(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FD9C9C(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

uint64_t kitClass(uint64_t a1)
{
  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return objc_opt_class();
}

uint64_t kitClass(WebCore::CSSRule *a1)
{
  (*(void (**)(WebCore::CSSRule *))(*(_QWORD *)a1 + 16))(a1);
  return objc_opt_class();
}

uint64_t kitClass(WebCore::DeprecatedCSSOMValue *a1)
{
  WebCore::DeprecatedCSSOMValue::cssValueType(a1);
  return objc_opt_class();
}

void sub_1D7FDAF6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

_OWORD *WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *&>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v16[1] = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v20 = *a2;
      if (*a2)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v20 = *a2;
      if (*a2)
      {
LABEL_14:
        v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v21 = *(unsigned int *)(v20 - 16);
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(_QWORD *)v7 = v16;
        *((_QWORD *)v7 + 1) = v20 + 16 * v22;
        *((_BYTE *)v7 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v22)
      {
        result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(a2, 8u, v16);
        v16 = result;
        v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(a2, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      v16 = result;
      v20 = *a2;
      if (!*a2)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21)
      goto LABEL_26;
    goto LABEL_24;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (_QWORD *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v8 + 16 * v23;
  *((_BYTE *)v7 + 16) = 0;
  v16[1] = *a4;
  return result;
}

_OWORD *WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::JSMainThreadNullState *WebCore::JSMainThreadNullState::JSMainThreadNullState(WebCore::JSMainThreadNullState *this)
{
  WebCore::JSMainThreadNullState *v1;
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3 || (this = *(WebCore::JSMainThreadNullState **)(v3 + 96)) == 0)
    this = (WebCore::JSMainThreadNullState *)WebCore::threadGlobalDataSlow(this);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)v1 + 1) = (char *)v1 + 24;
  *(_QWORD *)v1 = v4;
  *((_QWORD *)v1 + 2) = 4;
  v5 = (_QWORD *)MEMORY[0x1E0DD3A68];
  *((_BYTE *)v1 + 56) = 0;
  *((_QWORD *)v1 + 8) = *v5;
  *((_QWORD *)v1 + 9) = v4;
  *v5 = (char *)v1 + 8;
  v6 = *(_QWORD *)(StatusReg + 736);
  if (!v6 || (this = *(WebCore::JSMainThreadNullState **)(v6 + 96)) == 0)
    this = (WebCore::JSMainThreadNullState *)WebCore::threadGlobalDataSlow(this);
  *((_QWORD *)this + 8) = 0;
  return v1;
}

void sub_1D7FDB374(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF **v3;
  _QWORD *v4;

  if (*(_DWORD *)(v2 + 20))
    WebCore::CustomElementQueue::processQueue();
  *v4 = *(_QWORD *)(v2 + 64);
  WebCore::CustomElementQueue::~CustomElementQueue(v3, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FDB3A8(_Unwind_Exception *a1, void *a2)
{
  WTF **v2;

  WebCore::CustomElementQueue::~CustomElementQueue(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::CustomElementQueue::~CustomElementQueue(WTF **this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 3);
  if ((_DWORD)v3)
  {
    v4 = *this;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *this;
  if (this + 2 != (WTF **)*this && v7 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v7, a2);
  }
}

void WebCore::JSMainThreadNullState::~JSMainThreadNullState(WebCore::JSMainThreadNullState *this, void *a2)
{
  WebCore::JSMainThreadNullState *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = this;
  v3 = *(_QWORD *)this;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (this = *(WebCore::JSMainThreadNullState **)(v4 + 96)) == 0)
    this = (WebCore::JSMainThreadNullState *)WebCore::threadGlobalDataSlow(this);
  *((_QWORD *)this + 8) = v3;
  if (*((_DWORD *)v2 + 5))
  {
    WebCore::CustomElementQueue::processQueue();
    v7 = *((unsigned int *)v2 + 5);
    *MEMORY[0x1E0DD3A68] = *((_QWORD *)v2 + 8);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)*((_QWORD *)v2 + 1);
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        *v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else
  {
    *MEMORY[0x1E0DD3A68] = *((_QWORD *)v2 + 8);
  }
  v5 = (WTF *)*((_QWORD *)v2 + 1);
  if ((WebCore::JSMainThreadNullState *)((char *)v2 + 24) != v5 && v5 != 0)
  {
    *((_QWORD *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
    WTF::fastFree(v5, a2);
  }
}

void sub_1D7FDB53C(_Unwind_Exception *a1, void *a2)
{
  WTF **v2;

  WebCore::CustomElementQueue::~CustomElementQueue(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FDB550(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(v2 + 20))
    WebCore::CustomElementQueue::processQueue();
  *MEMORY[0x1E0DD3A68] = *(_QWORD *)(v2 + 64);
  WebCore::CustomElementQueue::~CustomElementQueue((WTF **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

unsigned __int8 **WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(unsigned __int8 **result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 **)MEMORY[0x1D82A3914](v2);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 != 1)
  {
    v6 = 0;
    v7 = 1;
    v8 = __ldxr(v2);
    if (v8 == 1)
      goto LABEL_7;
LABEL_11:
    __clrex();
LABEL_12:
    result = (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return result;
    goto LABEL_13;
  }
  v9 = *((_QWORD *)v2 + 2);
  v6 = *((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  v7 = v9 != 0;
  LODWORD(v9) = __ldxr(v2);
  if ((_DWORD)v9 != 1)
    goto LABEL_11;
LABEL_7:
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return result;
LABEL_13:
  if (v6)
    result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (!v7)
    return (unsigned __int8 **)WTF::fastFree((WTF *)v2, a2);
  return result;
}

_DWORD *WTF::RefCounted<WebCore::TextIndicator>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x1D82A4514]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E9D6A4D8;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_1D7FDB71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

uint64_t LegacySocketProvider::createWebSocketChannel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t result;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;

  v8 = WTF::fastMalloc((WTF *)0x168);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E9D6A9F0;
  WebCore::ThreadableWebSocketChannel::ThreadableWebSocketChannel((WebCore::ThreadableWebSocketChannel *)(v8 + 16));
  *(_QWORD *)v8 = off_1E9D6A6A0;
  *(_QWORD *)(v8 + 16) = &unk_1E9D6A7A8;
  *(_QWORD *)(v8 + 32) = &unk_1E9D6A868;
  *(_QWORD *)(v8 + 40) = 0;
  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL) != 0)
    goto LABEL_5;
  v9 = WTF::fastCompactMalloc((WTF *)0x28);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = a2;
  WebCore::EventListenerMap::EventListenerMap((WebCore::EventListenerMap *)(v9 + 16));
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v11 & 0xFFFF000000000000 | v9;
  v12 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  do
  {
    v13 = __ldaxr((unsigned int *)v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v12));
  if (v14)
  {
LABEL_5:
    v15 = (unsigned int *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
    if (!v15)
      goto LABEL_7;
    goto LABEL_6;
  }
  atomic_store(1u, (unsigned int *)v12);
  v28 = *(unsigned int *)(v12 + 28);
  if ((_DWORD)v28)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v28));
  v29 = *(WTF **)(v12 + 16);
  if (v29)
  {
    *(_QWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    WTF::fastFree(v29, v10);
  }
  WTF::fastFree((WTF *)v12, v10);
  v15 = (unsigned int *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
  if (v15)
  {
    do
LABEL_6:
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
LABEL_7:
  *(_QWORD *)(v8 + 48) = v15;
  v17 = *(_QWORD *)(a3 + 8);
  if (!v17)
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = a3;
    v19 = *(unsigned int **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v17;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
      {
        v17 = *(_QWORD *)(a3 + 8);
        if (!v17)
          goto LABEL_13;
      }
      else
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v18);
        v17 = *(_QWORD *)(a3 + 8);
        if (!v17)
          goto LABEL_13;
      }
    }
  }
  do
    v22 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v22 + 1, (unsigned int *)v17));
LABEL_13:
  *(_QWORD *)(v8 + 56) = v17;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v8 + 96));
  *(_QWORD *)(v8 + 96) = &unk_1E9D6A108;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v23 = off_1E9D6AB90;
  v23[1] = WebCore::WebSocketChannel::resumeTimerFired;
  v23[2] = 0;
  v23[3] = v8;
  *(_QWORD *)(v8 + 144) = v23;
  *(_DWORD *)(v8 + 152) = 0x1000000;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v8 + 160));
  *(_QWORD *)(v8 + 160) = &unk_1E9D6A108;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v24 = off_1E9D6AB90;
  v24[1] = WebCore::WebSocketChannel::closingTimerFired;
  v24[2] = 0;
  v24[3] = v8;
  *(_QWORD *)(v8 + 208) = v24;
  *(_WORD *)(v8 + 216) = 0;
  *(_DWORD *)(v8 + 220) = 0;
  result = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(v8 + 224) = result;
  *(_BYTE *)(v8 + 232) = 0;
  *(_QWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 248) = 0;
  *(_WORD *)(v8 + 256) = 1006;
  *(_QWORD *)(v8 + 312) = 0;
  *(_DWORD *)(v8 + 320) = 0;
  *(_BYTE *)(v8 + 328) = 0;
  *(_QWORD *)(v8 + 336) = 0;
  *(_QWORD *)(v8 + 344) = 0;
  v26 = (unsigned int *)(a1 + 8);
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 292) = 0u;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  *(_QWORD *)(v8 + 352) = a1;
  *a4 = v8 + 16;
  return result;
}

uint64_t LegacySocketProvider::initializeWebTransportSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t NetworkStorageSessionMap::storageSession(NetworkStorageSessionMap *this, SessionID a2)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NetworkStorageSessionMap *v8;
  int v9;
  WebCore::NetworkStorageSession *v10;
  SessionID v11;
  uint64_t v12;
  void *v13;

  if (this == (NetworkStorageSessionMap *)1)
  {
    {
      result = defaultNetworkStorageSession(void)::session;
      if (defaultNetworkStorageSession(void)::session)
        return result;
    }
    else
    {
      defaultNetworkStorageSession(void)::session = 0;
    }
    v10 = (WebCore::NetworkStorageSession *)WTF::fastMalloc((WTF *)0x128);
    v11.m_identifier = 1;
    result = WebCore::NetworkStorageSession::NetworkStorageSession(v10, v11);
    {
      defaultNetworkStorageSession(void)::session = result;
      return result;
    }
    v12 = defaultNetworkStorageSession(void)::session;
    defaultNetworkStorageSession(void)::session = result;
    if (v12)
    {
      MEMORY[0x1D82A5C18](v12);
      if (*(_DWORD *)(v12 + 8))
      {
        *(_QWORD *)(v12 + 288) = 0;
        *(_OWORD *)(v12 + 256) = 0u;
        *(_OWORD *)(v12 + 272) = 0u;
        *(_OWORD *)(v12 + 224) = 0u;
        *(_OWORD *)(v12 + 240) = 0u;
        *(_OWORD *)(v12 + 192) = 0u;
        *(_OWORD *)(v12 + 208) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_OWORD *)(v12 + 176) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
          return defaultNetworkStorageSession(void)::session;
      }
      else
      {
        WTF::fastFree((WTF *)v12, v13);
          return defaultNetworkStorageSession(void)::session;
      }
      result = 0;
      defaultNetworkStorageSession(void)::session = 0;
    }
  }
  {
    if (globalSessionMap(void)::map)
    {
      v3 = *(_DWORD *)(globalSessionMap(void)::map - 8);
      v4 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
      v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
      v7 = v3 & ((v6 >> 31) ^ v6);
      v8 = *(NetworkStorageSessionMap **)(globalSessionMap(void)::map + 16 * v7);
      if (v8 == this)
        return *(_QWORD *)(globalSessionMap(void)::map + 16 * v7 + 8);
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(NetworkStorageSessionMap **)(globalSessionMap(void)::map + 16 * v7);
        ++v9;
        if (v8 == this)
          return *(_QWORD *)(globalSessionMap(void)::map + 16 * v7 + 8);
      }
    }
    return 0;
  }
  else
  {
    result = 0;
    globalSessionMap(void)::map = 0;
  }
  return result;
}

void NetworkStorageSessionMap::switchToNewTestingSession(NetworkStorageSessionMap *this)
{
  pid_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  unsigned int v13;
  uint64_t v14;
  StringImpl *v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  WebCore::NetworkStorageSession *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  WTF::StringImpl *v25;
  CFTypeRef cf;
  CFTypeRef v27[3];

  v27[2] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v1 = getpid();
  v2 = v1;
  if (v1 < 0)
  {
    v6 = -v1;
    v3 = 1;
    do
    {
      ++v3;
      v7 = v6 >= 0xA;
      v6 /= 0xAu;
    }
    while (v7);
  }
  else
  {
    v3 = 0;
    v4 = v1;
    do
    {
      ++v3;
      v5 = v4 > 9;
      v4 /= 0xAu;
    }
    while (v5);
  }
  if (v3 < 0
    || (v8 = (v3 + 12), __OFADD__(v3, 12))
    || (WTF::tryFastCompactMalloc((WTF *)(v8 + 20)), (v9 = (char *)v27[0]) == 0))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)v27[0] = 2;
  *((_DWORD *)v9 + 1) = v8;
  *(_QWORD *)(v9 + 20) = *(_QWORD *)"WebKit Test-";
  *((_QWORD *)v9 + 1) = v9 + 20;
  *((_DWORD *)v9 + 4) = 4;
  *((_DWORD *)v9 + 7) = 762606437;
  v10 = 0;
  if ((v2 & 0x80000000) != 0)
  {
    v13 = -v2;
    do
    {
      *((_BYTE *)&v27[1] + v10-- + 4) = (v13 % 0xA) | 0x30;
      v5 = v13 > 9;
      v13 /= 0xAu;
    }
    while (v5);
    v14 = v10 + 12;
    v11 = (char *)&v27[1] + v10 + 4;
    *v11 = 45;
    if (v10 + 14 <= 14)
    {
      if (v14 <= 12)
        v14 = 12;
      v12 = v14 - v10 - 11;
      goto LABEL_20;
    }
  }
  else
  {
    do
    {
      *((_BYTE *)&v27[1] + v10-- + 4) = (v2 % 0xA) | 0x30;
      v5 = v2 > 9;
      v2 /= 0xAu;
    }
    while (v5);
    if (v10 + 14 <= 13)
    {
      v11 = (char *)&v27[1] + v10 + 5;
      v12 = -v10;
LABEL_20:
      memcpy(v9 + 32, v11, v12);
    }
  }
  v25 = (WTF::StringImpl *)v9;
  WTF::String::createCFString((WTF::String *)&v25);
  WebCore::createPrivateStorageSession();
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  v17 = v25;
  v25 = 0;
  if (!v17)
  {
LABEL_26:
    cf = 0;
    if (!WebCore::NetworkStorageSession::processMayUseCookieAPI(v17))
      goto LABEL_31;
LABEL_29:
    if (v27[0])
      cf = (CFTypeRef)_CFURLStorageSessionCopyCookieStorage();
    goto LABEL_31;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_26;
  }
  v18 = (WebCore::NetworkStorageSession *)WTF::StringImpl::destroy(v17, v15);
  cf = 0;
  if (WebCore::NetworkStorageSession::processMayUseCookieAPI(v18))
    goto LABEL_29;
LABEL_31:
  v19 = WTF::fastMalloc((WTF *)0x128);
  MEMORY[0x1D82A5C0C](v19, 1, v27, &cf, 0);
  {
    v20 = defaultNetworkStorageSession(void)::session;
    defaultNetworkStorageSession(void)::session = v19;
    if (v20)
    {
      v21 = MEMORY[0x1D82A5C18]();
      if (*(_DWORD *)(v21 + 8))
      {
        *(_QWORD *)(v21 + 288) = 0;
        *(_OWORD *)(v21 + 256) = 0u;
        *(_OWORD *)(v21 + 272) = 0u;
        *(_OWORD *)(v21 + 224) = 0u;
        *(_OWORD *)(v21 + 240) = 0u;
        *(_OWORD *)(v21 + 192) = 0u;
        *(_OWORD *)(v21 + 208) = 0u;
        *(_OWORD *)(v21 + 160) = 0u;
        *(_OWORD *)(v21 + 176) = 0u;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 112) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 80) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)v21 = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v21, v22);
      }
    }
  }
  else
  {
    defaultNetworkStorageSession(void)::session = v19;
  }
  v23 = cf;
  cf = 0;
  if (v23)
    CFRelease(v23);
  v24 = v27[0];
  v27[0] = 0;
  if (v24)
    CFRelease(v24);
}

void NetworkStorageSessionMap::ensureSession(uint64_t this, SessionID a2, const WTF::String *a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  NetworkStorageSessionMap *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  _DWORD *v45;
  _WORD *v46;
  int8x16_t *v47;
  uint64_t v48;
  _BYTE *v49;
  int8x16_t *v50;
  size_t v51;
  _BYTE *v52;
  unint64_t v53;
  unsigned __int128 *v54;
  unsigned __int128 v55;
  uint64_t v56;
  _WORD *v57;
  unint64_t v58;
  __int128 v59;
  char *v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  _BYTE *v71;
  int8x16_t *v72;
  char v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t v77;
  _WORD *v78;
  int8x16_t *v79;
  __int16 v80;
  _BYTE *v81;
  _BYTE *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  size_t v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  size_t v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  _BYTE *v102;
  size_t v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  _WORD *v109;
  unint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  char *v117;
  _WORD *v118;
  unint64_t v119;
  __int128 v120;
  char *v121;
  int8x16_t v122;
  __int128 v123;
  __int128 v124;
  char *v125;
  char *v126;
  char *v127;
  unint64_t v128;
  _WORD *v129;
  char *v130;
  __int16 v131;
  uint64_t v132;
  _WORD *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  unint64_t v138;
  __int128 v139;
  char *v140;
  int8x16_t v141;
  __int128 v142;
  __int128 v143;
  char *v144;
  char *v145;
  char *v146;
  unint64_t v147;
  BOOL v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  __int16 v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  __int128 v161;
  char *v162;
  int8x16_t v163;
  __int128 v164;
  __int128 v165;
  char *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  BOOL v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  __int16 v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  unint64_t v182;
  __int128 v183;
  char *v184;
  int8x16_t v185;
  __int128 v186;
  __int128 v187;
  char *v188;
  char *v189;
  char *v190;
  unint64_t v191;
  BOOL v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  __int16 v197;
  uint64_t v198;
  char *v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  _WORD *v203;
  unint64_t v204;
  __int128 v205;
  int8x16_t v206;
  __int128 v207;
  __int128 v208;
  char *v209;
  char *v210;
  char *v211;
  unint64_t v212;
  BOOL v213;
  uint64_t v214;
  unint64_t v215;
  _WORD *v216;
  char *v217;
  __int16 v218;
  StringImpl *v219;
  WTF::StringImpl *v220;
  WebCore::NetworkStorageSession *PrivateStorageSession;
  CFTypeRef v222;
  WebCore::NetworkStorageSession *CFStorageSessionForIdentifier;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  const void *v228;
  CFTypeRef v229;
  CFTypeRef v230;
  uint64_t v231;
  unint64_t v232;
  uint8x8_t *v233;
  uint16x8_t *v234;
  unint64_t v235;
  uint8x16_t v236;
  uint16x8_t v237;
  uint16x8_t v238;
  uint8x8_t *v239;
  uint16x8_t *v240;
  unint64_t v241;
  uint8x8_t v242;
  uint8x8_t *v243;
  uint16x8_t *v244;
  unint64_t v245;
  uint8x16_t v246;
  uint16x8_t v247;
  uint16x8_t v248;
  uint8x8_t *v249;
  uint16x8_t *v250;
  unint64_t v251;
  uint8x8_t v252;
  uint8x8_t *v253;
  uint16x8_t *v254;
  unint64_t v255;
  uint8x16_t v256;
  uint16x8_t v257;
  uint16x8_t v258;
  uint8x8_t *v259;
  uint16x8_t *v260;
  unint64_t v261;
  uint8x8_t v262;
  uint8x8_t *v263;
  uint16x8_t *v264;
  unint64_t v265;
  uint8x16_t v266;
  uint16x8_t v267;
  uint16x8_t v268;
  uint8x8_t *v269;
  uint16x8_t *v270;
  unint64_t v271;
  uint8x8_t v272;
  uint8x8_t *v273;
  uint16x8_t *v274;
  unint64_t v275;
  uint8x16_t v276;
  uint16x8_t v277;
  uint16x8_t v278;
  uint8x8_t *v279;
  uint16x8_t *v280;
  unint64_t v281;
  uint8x8_t v282;
  int8x16_t *v283;
  int8x16_t *v284;
  unint64_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int16x8_t *v290;
  int8x8_t *v291;
  unint64_t v292;
  int16x8_t v293;
  uint8x8_t *v294;
  uint16x8_t *v295;
  unint64_t v296;
  uint8x16_t v297;
  uint16x8_t v298;
  uint16x8_t v299;
  uint8x8_t *v300;
  uint16x8_t *v301;
  unint64_t v302;
  uint8x8_t v303;
  unsigned int v304;
  _DWORD v305[5];
  size_t v306;
  CFTypeRef cf[2];
  size_t v308;
  CFTypeRef v309;
  size_t __n[2];
  int8x16x2_t v311;
  int8x16x2_t v312;
  int8x16x2_t v313;
  int8x16x2_t v314;
  int8x16x2_t v315;
  int8x16x2_t v316;
  int8x16x2_t v317;
  int8x16x2_t v318;
  int8x16x2_t v319;
  int8x16x2_t v320;
  int8x16x2_t v321;
  int8x16x2_t v322;
  int8x16x2_t v323;
  int8x16x2_t v324;
  int8x16x2_t v325;
  int8x16x2_t v326;
  int8x16x2_t v327;
  int8x16x2_t v328;

  __n[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = globalSessionMap(void)::map;
    if (globalSessionMap(void)::map)
    {
LABEL_4:
      v6 = *(_DWORD *)(v5 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    globalSessionMap(void)::map = 0;
  }
  WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(&globalSessionMap(void)::map, 8u, 0);
  v5 = globalSessionMap(void)::map;
  if (globalSessionMap(void)::map)
    goto LABEL_4;
  v6 = 0;
LABEL_5:
  v7 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (uint64_t *)(v5 + 16 * v10);
  v12 = (NetworkStorageSessionMap *)*v11;
  if (!*v11)
  {
LABEL_13:
    v15 = v11[1];
    *v11 = this;
    v11[1] = 0;
    if (v15)
    {
      v16 = MEMORY[0x1D82A5C18](v15, a2.m_identifier, a3);
      if (*(_DWORD *)(v16 + 8))
      {
        *(_QWORD *)(v16 + 288) = 0;
        *(_OWORD *)(v16 + 256) = 0u;
        *(_OWORD *)(v16 + 272) = 0u;
        *(_OWORD *)(v16 + 224) = 0u;
        *(_OWORD *)(v16 + 240) = 0u;
        *(_OWORD *)(v16 + 192) = 0u;
        *(_OWORD *)(v16 + 208) = 0u;
        *(_OWORD *)(v16 + 160) = 0u;
        *(_OWORD *)(v16 + 176) = 0u;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 144) = 0u;
        *(_OWORD *)(v16 + 96) = 0u;
        *(_OWORD *)(v16 + 112) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_OWORD *)v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        v18 = globalSessionMap(void)::map;
        if (globalSessionMap(void)::map)
        {
LABEL_17:
          ++*(_DWORD *)(v18 - 12);
          v19 = globalSessionMap(void)::map;
          if (globalSessionMap(void)::map)
            goto LABEL_18;
          goto LABEL_25;
        }
LABEL_24:
        *(_DWORD *)(v18 - 12) = 1;
        v19 = globalSessionMap(void)::map;
        if (globalSessionMap(void)::map)
        {
LABEL_18:
          v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
          v21 = *(unsigned int *)(v19 - 4);
          if (v21 <= 0x400)
            goto LABEL_19;
          goto LABEL_26;
        }
LABEL_25:
        v20 = *(unsigned int *)(v19 - 16);
        v21 = *(unsigned int *)(v19 - 4);
        if (v21 <= 0x400)
        {
LABEL_19:
          if (3 * v21 > 4 * v20)
            goto LABEL_29;
          if (!(_DWORD)v21)
          {
            v22 = 8;
LABEL_28:
            v11 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(&globalSessionMap(void)::map, v22, v11);
LABEL_29:
            v23 = *(_QWORD *)a2.m_identifier;
            if (v23)
            {
              *(_DWORD *)v23 += 2;
              WTF::UUID::UUID((WTF::UUID *)&v309);
              v24 = *(_DWORD *)(v23 + 4);
            }
            else
            {
              WTF::UUID::UUID((WTF::UUID *)&v309);
              v24 = 0;
            }
            WTF::Internal::appendHex();
            LODWORD(__n[0]) = v25;
            WTF::Internal::appendHex();
            LODWORD(v308) = v26;
            WTF::Internal::appendHex();
            LODWORD(v306) = v27;
            WTF::Internal::appendHex();
            v305[0] = v28;
            WTF::Internal::appendHex();
            if (v29 < 0)
              goto LABEL_305;
            v30 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_305;
            if ((v305[0] & 0x80000000) != 0)
              goto LABEL_305;
            v31 = v305[0] + v30;
            if (__OFADD__(v305[0], v30))
              goto LABEL_305;
            v32 = __OFADD__(v31, 1);
            v33 = v31 + 1;
            v34 = v32;
            if ((v306 & 0x80000000) != 0)
              goto LABEL_305;
            if (v34)
              goto LABEL_305;
            v32 = __OFADD__((_DWORD)v306, v33);
            v35 = v306 + v33;
            if (v32)
              goto LABEL_305;
            v32 = __OFADD__(v35, 1);
            v36 = v35 + 1;
            v37 = v32;
            if ((v308 & 0x80000000) != 0)
              goto LABEL_305;
            if (v37)
              goto LABEL_305;
            v32 = __OFADD__((_DWORD)v308, v36);
            v38 = v308 + v36;
            if (v32)
              goto LABEL_305;
            v32 = __OFADD__(v38, 1);
            v39 = v38 + 1;
            v40 = v32;
            if ((__n[0] & 0x80000000) != 0)
              goto LABEL_305;
            if (v40)
              goto LABEL_305;
            v41 = LODWORD(__n[0]) + v39;
            if (__OFADD__(__n[0], v39) || v41 < 0)
              goto LABEL_305;
            v32 = __OFADD__(v41, 17);
            v42 = v41 + 17;
            v43 = v32;
            if (v24 < 0)
              goto LABEL_305;
            if (v43)
              goto LABEL_305;
            v44 = (v24 + v42);
            if (__OFADD__(v24, v42))
              goto LABEL_305;
            if (v23 && (*(_BYTE *)(v23 + 16) & 4) == 0)
            {
              if (v44 <= 0x7FFFFFEF)
              {
                WTF::tryFastCompactMalloc((WTF *)(2 * (v24 + v42) + 20));
                v45 = v309;
                if (v309)
                {
                  v46 = (char *)v309 + 20;
                  *(_DWORD *)v309 = 2;
                  v45[1] = v44;
                  *((_QWORD *)v45 + 1) = v45 + 5;
                  v45[4] = 0;
                  v47 = *(int8x16_t **)(v23 + 8);
                  v48 = *(unsigned int *)(v23 + 4);
                  if ((*(_BYTE *)(v23 + 16) & 4) == 0)
                  {
                    if ((_DWORD)v48)
                    {
                      if ((_DWORD)v48 == 1)
                        *v46 = v47->i16[0];
                      else
                        memcpy(v45 + 5, v47, 2 * v48);
                    }
LABEL_137:
                    v108 = *(unsigned int *)(v23 + 4);
                    v109 = &v46[v108];
                    *(_OWORD *)v109 = xmmword_1D80FBAA0;
                    *((_OWORD *)v109 + 1) = xmmword_1D80FBAB0;
                    v109[16] = 46;
                    v110 = (unint64_t)(v109 + 17);
                    WTF::Internal::appendHex();
                    LODWORD(__n[0]) = v111;
                    WTF::Internal::appendHex();
                    LODWORD(v308) = v112;
                    WTF::Internal::appendHex();
                    LODWORD(v306) = v113;
                    WTF::Internal::appendHex();
                    v305[0] = v114;
                    WTF::Internal::appendHex();
                    v304 = v115;
                    v116 = LODWORD(__n[0]);
                    v117 = (char *)__n - LODWORD(__n[0]);
                    v118 = (_WORD *)(v110 + 2 * LODWORD(__n[0]));
                    if (LODWORD(__n[0]) < 0x40)
                    {
                      v119 = v110;
                      if ((_WORD *)v110 == v118)
                        goto LABEL_148;
                    }
                    else
                    {
                      v119 = v110 + 2 * (__n[0] & 0xFFFFFFC0);
                      v120 = 0uLL;
                      v121 = (char *)v110;
                      do
                      {
                        v312.val[0] = *(int8x16_t *)v117;
                        v122 = *((int8x16_t *)v117 + 1);
                        v318.val[0] = (int8x16_t)*((_OWORD *)v117 + 2);
                        v123 = *((_OWORD *)v117 + 3);
                        v117 += 64;
                        v124 = v123;
                        v318.val[1] = 0uLL;
                        v324.val[0] = v122;
                        v312.val[1] = 0uLL;
                        v125 = v121;
                        vst2q_s8(v125, v312);
                        v125 += 32;
                        v324.val[1] = 0uLL;
                        vst2q_s8(v125, v324);
                        v126 = v121 + 64;
                        vst2q_s8(v126, v318);
                        v127 = v121 + 96;
                        vst2q_s8(v127, *(int8x16x2_t *)(&v120 - 1));
                        v121 += 128;
                      }
                      while (v121 != (char *)v119);
                      if ((_WORD *)v119 == v118)
                      {
LABEL_148:
                        v132 = LODWORD(__n[0]);
                        v133 = (_WORD *)(v110 + 2 * LODWORD(__n[0]));
                        *v133 = 45;
                        v134 = (char *)(v133 + 1);
                        v135 = v308;
                        v136 = (char *)&v308 - v308;
                        v137 = &v134[2 * v308];
                        if (v308 < 0x40)
                        {
                          v138 = (unint64_t)v134;
                          if (v134 == v137)
                            goto LABEL_164;
                        }
                        else
                        {
                          v138 = (unint64_t)&v134[2 * (v308 & 0xFFFFFFC0)];
                          v139 = 0uLL;
                          v140 = v134;
                          do
                          {
                            v313.val[0] = *(int8x16_t *)v136;
                            v141 = *((int8x16_t *)v136 + 1);
                            v319.val[0] = (int8x16_t)*((_OWORD *)v136 + 2);
                            v142 = *((_OWORD *)v136 + 3);
                            v136 += 64;
                            v143 = v142;
                            v319.val[1] = 0uLL;
                            v325.val[0] = v141;
                            v313.val[1] = 0uLL;
                            v144 = v140;
                            vst2q_s8(v144, v313);
                            v144 += 32;
                            v325.val[1] = 0uLL;
                            vst2q_s8(v144, v325);
                            v145 = v140 + 64;
                            vst2q_s8(v145, v319);
                            v146 = v140 + 96;
                            vst2q_s8(v146, *(int8x16x2_t *)(&v139 - 1));
                            v140 += 128;
                          }
                          while (v140 != (char *)v138);
                          if ((char *)v138 == v137)
                          {
LABEL_164:
                            v154 = v308;
                            v155 = &v134[2 * v308];
                            *(_WORD *)v155 = 45;
                            v156 = v155 + 2;
                            v157 = v306;
                            v158 = (char *)&cf[-1] - v306;
                            v159 = &v156[2 * v306];
                            if (v306 < 0x40)
                            {
                              v160 = (unint64_t)v156;
                              if (v156 == v159)
                                goto LABEL_180;
                            }
                            else
                            {
                              v160 = (unint64_t)&v156[2 * (v306 & 0xFFFFFFC0)];
                              v161 = 0uLL;
                              v162 = v156;
                              do
                              {
                                v314.val[0] = *(int8x16_t *)v158;
                                v163 = *((int8x16_t *)v158 + 1);
                                v320.val[0] = (int8x16_t)*((_OWORD *)v158 + 2);
                                v164 = *((_OWORD *)v158 + 3);
                                v158 += 64;
                                v165 = v164;
                                v320.val[1] = 0uLL;
                                v326.val[0] = v163;
                                v314.val[1] = 0uLL;
                                v166 = v162;
                                vst2q_s8(v166, v314);
                                v166 += 32;
                                v326.val[1] = 0uLL;
                                vst2q_s8(v166, v326);
                                v167 = v162 + 64;
                                vst2q_s8(v167, v320);
                                v168 = v162 + 96;
                                vst2q_s8(v168, *(int8x16x2_t *)(&v161 - 1));
                                v162 += 128;
                              }
                              while (v162 != (char *)v160);
                              if ((char *)v160 == v159)
                              {
LABEL_180:
                                v176 = v306;
                                v177 = &v156[2 * v306];
                                *(_WORD *)v177 = 45;
                                v178 = v177 + 2;
                                v179 = v305[0];
                                v180 = (char *)v305 - v305[0];
                                v181 = &v178[2 * v305[0]];
                                if (v305[0] < 0x40u)
                                {
                                  v182 = (unint64_t)v178;
                                  if (v178 == v181)
                                    goto LABEL_196;
                                }
                                else
                                {
                                  v182 = (unint64_t)&v178[2 * (v305[0] & 0xFFFFFFC0)];
                                  v183 = 0uLL;
                                  v184 = v178;
                                  do
                                  {
                                    v315.val[0] = *(int8x16_t *)v180;
                                    v185 = *((int8x16_t *)v180 + 1);
                                    v321.val[0] = (int8x16_t)*((_OWORD *)v180 + 2);
                                    v186 = *((_OWORD *)v180 + 3);
                                    v180 += 64;
                                    v187 = v186;
                                    v321.val[1] = 0uLL;
                                    v327.val[0] = v185;
                                    v315.val[1] = 0uLL;
                                    v188 = v184;
                                    vst2q_s8(v188, v315);
                                    v188 += 32;
                                    v327.val[1] = 0uLL;
                                    vst2q_s8(v188, v327);
                                    v189 = v184 + 64;
                                    vst2q_s8(v189, v321);
                                    v190 = v184 + 96;
                                    vst2q_s8(v190, *(int8x16x2_t *)(&v183 - 1));
                                    v184 += 128;
                                  }
                                  while (v184 != (char *)v182);
                                  if ((char *)v182 == v181)
                                  {
LABEL_196:
                                    v198 = v305[0];
                                    v199 = &v178[2 * v305[0]];
                                    *(_WORD *)v199 = 45;
                                    v200 = (unint64_t)(v199 + 2);
                                    v201 = v304;
                                    v202 = (char *)v305 - v304 + 12;
                                    v203 = (_WORD *)(v200 + 2 * v304);
                                    if (v304 >= 0x40)
                                    {
                                      v204 = v200 + 2 * (v304 & 0xFFFFFFC0);
                                      v205 = 0uLL;
                                      do
                                      {
                                        v316.val[0] = *(int8x16_t *)v202;
                                        v206 = *((int8x16_t *)v202 + 1);
                                        v322.val[0] = (int8x16_t)*((_OWORD *)v202 + 2);
                                        v207 = *((_OWORD *)v202 + 3);
                                        v202 += 64;
                                        v208 = v207;
                                        v322.val[1] = 0uLL;
                                        v328.val[0] = v206;
                                        v316.val[1] = 0uLL;
                                        v209 = (char *)v200;
                                        vst2q_s8(v209, v316);
                                        v209 += 32;
                                        v328.val[1] = 0uLL;
                                        vst2q_s8(v209, v328);
                                        v210 = (char *)(v200 + 64);
                                        vst2q_s8(v210, v322);
                                        v211 = (char *)(v200 + 96);
                                        vst2q_s8(v211, *(int8x16x2_t *)(&v205 - 1));
                                        v200 += 128;
                                      }
                                      while (v200 != v204);
                                      v200 = v204;
                                    }
                                    if ((_WORD *)v200 != v203)
                                    {
                                      v212 = (unint64_t)v45
                                           + 2 * v108
                                           + 2 * v132
                                           + 2 * v154
                                           + 2 * v176
                                           + 2 * v198
                                           + 2 * v201
                                           - v200
                                           + 60;
                                      if (v212 < 0xE
                                        || (v200 < (unint64_t)&v202[(v212 >> 1) + 1]
                                          ? (v213 = (unint64_t)v202 >= (v212 & 0xFFFFFFFFFFFFFFFELL) + v200 + 2)
                                          : (v213 = 1),
                                            !v213))
                                      {
                                        v216 = (_WORD *)v200;
                                        v217 = v202;
                                        goto LABEL_210;
                                      }
                                      v214 = (v212 >> 1) + 1;
                                      if (v212 >= 0x3E)
                                      {
                                        v215 = v214 & 0xFFFFFFFFFFFFFFE0;
                                        v263 = (uint8x8_t *)(v202 + 16);
                                        v264 = (uint16x8_t *)(v200 + 32);
                                        v265 = v214 & 0xFFFFFFFFFFFFFFE0;
                                        do
                                        {
                                          v266 = *(uint8x16_t *)v263[-2].i8;
                                          v267 = vmovl_u8(*v263);
                                          v268 = vmovl_high_u8(*(uint8x16_t *)v263->i8);
                                          v264[-2] = vmovl_u8(*(uint8x8_t *)v266.i8);
                                          v264[-1] = vmovl_high_u8(v266);
                                          *v264 = v267;
                                          v264[1] = v268;
                                          v264 += 4;
                                          v263 += 4;
                                          v265 -= 32;
                                        }
                                        while (v265);
                                        if (v214 == v215)
                                          goto LABEL_211;
                                        if ((v214 & 0x18) == 0)
                                        {
                                          v217 = &v202[v215];
                                          v216 = (_WORD *)(v200 + 2 * v215);
                                          do
                                          {
LABEL_210:
                                            v218 = *v217++;
                                            *v216++ = v218;
                                          }
                                          while (v216 != v203);
                                          goto LABEL_211;
                                        }
                                      }
                                      else
                                      {
                                        v215 = 0;
                                      }
                                      v216 = (_WORD *)(v200 + 2 * (v214 & 0xFFFFFFFFFFFFFFF8));
                                      v217 = &v202[v214 & 0xFFFFFFFFFFFFFFF8];
                                      v269 = (uint8x8_t *)&v202[v215];
                                      v270 = (uint16x8_t *)(v200 + 2 * v215);
                                      v271 = v215 - (v214 & 0xFFFFFFFFFFFFFFF8);
                                      do
                                      {
                                        v272 = *v269++;
                                        *v270++ = vmovl_u8(v272);
                                        v271 += 8;
                                      }
                                      while (v271);
                                      if (v214 != (v214 & 0xFFFFFFFFFFFFFFF8))
                                        goto LABEL_210;
                                    }
LABEL_211:
                                    cf[0] = v45;
                                    WTF::String::createCFString((WTF::String *)cf);
                                    v220 = (WTF::StringImpl *)cf[0];
                                    cf[0] = 0;
                                    if (v220)
                                    {
                                      if (*(_DWORD *)v220 == 2)
                                      {
                                        WTF::StringImpl::destroy(v220, v219);
                                        if (!v23)
                                          goto LABEL_219;
LABEL_217:
                                        if (*(_DWORD *)v23 == 2)
                                        {
                                          WTF::StringImpl::destroy((WTF::StringImpl *)v23, v219);
                                          if (this <= -2)
                                          {
LABEL_220:
                                            PrivateStorageSession = (WebCore::NetworkStorageSession *)WebCore::createPrivateStorageSession();
                                            v222 = cf[0];
                                            *(_QWORD *)&v305[1] = 0;
                                            if (!WebCore::NetworkStorageSession::processMayUseCookieAPI(PrivateStorageSession))
                                              goto LABEL_226;
                                            goto LABEL_224;
                                          }
LABEL_223:
                                          CFStorageSessionForIdentifier = (WebCore::NetworkStorageSession *)WebCore::NetworkStorageSession::createCFStorageSessionForIdentifier();
                                          v222 = cf[0];
                                          *(_QWORD *)&v305[1] = 0;
                                          if (!WebCore::NetworkStorageSession::processMayUseCookieAPI(CFStorageSessionForIdentifier))
                                            goto LABEL_226;
LABEL_224:
                                          if (v222)
                                            *(_QWORD *)&v305[1] = _CFURLStorageSessionCopyCookieStorage();
LABEL_226:
                                          v224 = WTF::fastMalloc((WTF *)0x128);
                                          MEMORY[0x1D82A5C0C](v224, this, cf, &v305[1], 0);
                                          v225 = v11[1];
                                          v11[1] = v224;
                                          if (v225)
                                          {
                                            v226 = MEMORY[0x1D82A5C18]();
                                            if (*(_DWORD *)(v226 + 8))
                                            {
                                              *(_QWORD *)(v226 + 288) = 0;
                                              *(_OWORD *)(v226 + 256) = 0u;
                                              *(_OWORD *)(v226 + 272) = 0u;
                                              *(_OWORD *)(v226 + 224) = 0u;
                                              *(_OWORD *)(v226 + 240) = 0u;
                                              *(_OWORD *)(v226 + 192) = 0u;
                                              *(_OWORD *)(v226 + 208) = 0u;
                                              *(_OWORD *)(v226 + 160) = 0u;
                                              *(_OWORD *)(v226 + 176) = 0u;
                                              *(_OWORD *)(v226 + 128) = 0u;
                                              *(_OWORD *)(v226 + 144) = 0u;
                                              *(_OWORD *)(v226 + 96) = 0u;
                                              *(_OWORD *)(v226 + 112) = 0u;
                                              *(_OWORD *)(v226 + 64) = 0u;
                                              *(_OWORD *)(v226 + 80) = 0u;
                                              *(_OWORD *)(v226 + 32) = 0u;
                                              *(_OWORD *)(v226 + 48) = 0u;
                                              *(_OWORD *)v226 = 0u;
                                              *(_OWORD *)(v226 + 16) = 0u;
                                              v228 = *(const void **)&v305[1];
                                              *(_QWORD *)&v305[1] = 0;
                                              if (!v228)
                                                goto LABEL_231;
                                              goto LABEL_230;
                                            }
                                            WTF::fastFree((WTF *)v226, v227);
                                          }
                                          v228 = *(const void **)&v305[1];
                                          *(_QWORD *)&v305[1] = 0;
                                          if (!v228)
                                          {
LABEL_231:
                                            v229 = cf[0];
                                            cf[0] = 0;
                                            if (v229)
                                              CFRelease(v229);
                                            v230 = v309;
                                            v309 = 0;
                                            if (v230)
                                              CFRelease(v230);
                                            return;
                                          }
LABEL_230:
                                          CFRelease(v228);
                                          goto LABEL_231;
                                        }
                                        *(_DWORD *)v23 -= 2;
LABEL_219:
                                        if (this <= -2)
                                          goto LABEL_220;
                                        goto LABEL_223;
                                      }
                                      *(_DWORD *)v220 -= 2;
                                    }
                                    if (!v23)
                                      goto LABEL_219;
                                    goto LABEL_217;
                                  }
                                }
                                v191 = (unint64_t)v45
                                     + 2 * v108
                                     + 2 * v132
                                     + 2 * v154
                                     + 2 * v176
                                     + 2 * v179
                                     - v182
                                     + 58;
                                if (v191 < 0xE
                                  || (v182 < (unint64_t)&v180[(v191 >> 1) + 1]
                                    ? (v192 = (unint64_t)v180 >= (v191 & 0xFFFFFFFFFFFFFFFELL) + v182 + 2)
                                    : (v192 = 1),
                                      !v192))
                                {
                                  v195 = (char *)v182;
                                  v196 = v180;
                                  goto LABEL_195;
                                }
                                v193 = (v191 >> 1) + 1;
                                if (v191 >= 0x3E)
                                {
                                  v194 = v193 & 0xFFFFFFFFFFFFFFE0;
                                  v253 = (uint8x8_t *)(v180 + 16);
                                  v254 = (uint16x8_t *)(v182 + 32);
                                  v255 = v193 & 0xFFFFFFFFFFFFFFE0;
                                  do
                                  {
                                    v256 = *(uint8x16_t *)v253[-2].i8;
                                    v257 = vmovl_u8(*v253);
                                    v258 = vmovl_high_u8(*(uint8x16_t *)v253->i8);
                                    v254[-2] = vmovl_u8(*(uint8x8_t *)v256.i8);
                                    v254[-1] = vmovl_high_u8(v256);
                                    *v254 = v257;
                                    v254[1] = v258;
                                    v254 += 4;
                                    v253 += 4;
                                    v255 -= 32;
                                  }
                                  while (v255);
                                  if (v193 == v194)
                                    goto LABEL_196;
                                  if ((v193 & 0x18) == 0)
                                  {
                                    v196 = &v180[v194];
                                    v195 = (char *)(v182 + 2 * v194);
                                    goto LABEL_195;
                                  }
                                }
                                else
                                {
                                  v194 = 0;
                                }
                                v195 = (char *)(v182 + 2 * (v193 & 0xFFFFFFFFFFFFFFF8));
                                v196 = &v180[v193 & 0xFFFFFFFFFFFFFFF8];
                                v259 = (uint8x8_t *)&v180[v194];
                                v260 = (uint16x8_t *)(v182 + 2 * v194);
                                v261 = v194 - (v193 & 0xFFFFFFFFFFFFFFF8);
                                do
                                {
                                  v262 = *v259++;
                                  *v260++ = vmovl_u8(v262);
                                  v261 += 8;
                                }
                                while (v261);
                                if (v193 == (v193 & 0xFFFFFFFFFFFFFFF8))
                                  goto LABEL_196;
                                do
                                {
LABEL_195:
                                  v197 = *v196++;
                                  *(_WORD *)v195 = v197;
                                  v195 += 2;
                                }
                                while (v195 != v181);
                                goto LABEL_196;
                              }
                            }
                            v169 = (unint64_t)v45 + 2 * v108 + 2 * v132 + 2 * v154 + 2 * v157 - v160 + 56;
                            if (v169 < 0xE
                              || (v160 < (unint64_t)&v158[(v169 >> 1) + 1]
                                ? (v170 = (unint64_t)v158 >= (v169 & 0xFFFFFFFFFFFFFFFELL) + v160 + 2)
                                : (v170 = 1),
                                  !v170))
                            {
                              v173 = (char *)v160;
                              v174 = v158;
                              goto LABEL_179;
                            }
                            v171 = (v169 >> 1) + 1;
                            if (v169 >= 0x3E)
                            {
                              v172 = v171 & 0xFFFFFFFFFFFFFFE0;
                              v243 = (uint8x8_t *)(v158 + 16);
                              v244 = (uint16x8_t *)(v160 + 32);
                              v245 = v171 & 0xFFFFFFFFFFFFFFE0;
                              do
                              {
                                v246 = *(uint8x16_t *)v243[-2].i8;
                                v247 = vmovl_u8(*v243);
                                v248 = vmovl_high_u8(*(uint8x16_t *)v243->i8);
                                v244[-2] = vmovl_u8(*(uint8x8_t *)v246.i8);
                                v244[-1] = vmovl_high_u8(v246);
                                *v244 = v247;
                                v244[1] = v248;
                                v244 += 4;
                                v243 += 4;
                                v245 -= 32;
                              }
                              while (v245);
                              if (v171 == v172)
                                goto LABEL_180;
                              if ((v171 & 0x18) == 0)
                              {
                                v174 = &v158[v172];
                                v173 = (char *)(v160 + 2 * v172);
                                goto LABEL_179;
                              }
                            }
                            else
                            {
                              v172 = 0;
                            }
                            v173 = (char *)(v160 + 2 * (v171 & 0xFFFFFFFFFFFFFFF8));
                            v174 = &v158[v171 & 0xFFFFFFFFFFFFFFF8];
                            v249 = (uint8x8_t *)&v158[v172];
                            v250 = (uint16x8_t *)(v160 + 2 * v172);
                            v251 = v172 - (v171 & 0xFFFFFFFFFFFFFFF8);
                            do
                            {
                              v252 = *v249++;
                              *v250++ = vmovl_u8(v252);
                              v251 += 8;
                            }
                            while (v251);
                            if (v171 == (v171 & 0xFFFFFFFFFFFFFFF8))
                              goto LABEL_180;
                            do
                            {
LABEL_179:
                              v175 = *v174++;
                              *(_WORD *)v173 = v175;
                              v173 += 2;
                            }
                            while (v173 != v159);
                            goto LABEL_180;
                          }
                        }
                        v147 = (unint64_t)v45 + 2 * v108 + 2 * v132 + 2 * v135 - v138 + 54;
                        if (v147 < 0xE
                          || (v138 < (unint64_t)&v136[(v147 >> 1) + 1]
                            ? (v148 = (unint64_t)v136 >= (v147 & 0xFFFFFFFFFFFFFFFELL) + v138 + 2)
                            : (v148 = 1),
                              !v148))
                        {
                          v151 = (char *)v138;
                          v152 = v136;
                          goto LABEL_163;
                        }
                        v149 = (v147 >> 1) + 1;
                        if (v147 >= 0x3E)
                        {
                          v150 = v149 & 0xFFFFFFFFFFFFFFE0;
                          v233 = (uint8x8_t *)(v136 + 16);
                          v234 = (uint16x8_t *)(v138 + 32);
                          v235 = v149 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v236 = *(uint8x16_t *)v233[-2].i8;
                            v237 = vmovl_u8(*v233);
                            v238 = vmovl_high_u8(*(uint8x16_t *)v233->i8);
                            v234[-2] = vmovl_u8(*(uint8x8_t *)v236.i8);
                            v234[-1] = vmovl_high_u8(v236);
                            *v234 = v237;
                            v234[1] = v238;
                            v234 += 4;
                            v233 += 4;
                            v235 -= 32;
                          }
                          while (v235);
                          if (v149 == v150)
                            goto LABEL_164;
                          if ((v149 & 0x18) == 0)
                          {
                            v152 = &v136[v150];
                            v151 = (char *)(v138 + 2 * v150);
                            goto LABEL_163;
                          }
                        }
                        else
                        {
                          v150 = 0;
                        }
                        v151 = (char *)(v138 + 2 * (v149 & 0xFFFFFFFFFFFFFFF8));
                        v152 = &v136[v149 & 0xFFFFFFFFFFFFFFF8];
                        v239 = (uint8x8_t *)&v136[v150];
                        v240 = (uint16x8_t *)(v138 + 2 * v150);
                        v241 = v150 - (v149 & 0xFFFFFFFFFFFFFFF8);
                        do
                        {
                          v242 = *v239++;
                          *v240++ = vmovl_u8(v242);
                          v241 += 8;
                        }
                        while (v241);
                        if (v149 == (v149 & 0xFFFFFFFFFFFFFFF8))
                          goto LABEL_164;
                        do
                        {
LABEL_163:
                          v153 = *v152++;
                          *(_WORD *)v151 = v153;
                          v151 += 2;
                        }
                        while (v151 != v137);
                        goto LABEL_164;
                      }
                    }
                    v128 = (unint64_t)v45 + 2 * v108 + 2 * v116 - v119 + 52;
                    if (v128 < 0xE
                      || v119 < (unint64_t)&v117[(v128 >> 1) + 1]
                      && (unint64_t)v117 < (v128 & 0xFFFFFFFFFFFFFFFELL) + v119 + 2)
                    {
                      v129 = (_WORD *)v119;
                      v130 = v117;
                      goto LABEL_147;
                    }
                    v231 = (v128 >> 1) + 1;
                    if (v128 >= 0x3E)
                    {
                      v232 = v231 & 0xFFFFFFFFFFFFFFE0;
                      v273 = (uint8x8_t *)(v117 + 16);
                      v274 = (uint16x8_t *)(v119 + 32);
                      v275 = v231 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v276 = *(uint8x16_t *)v273[-2].i8;
                        v277 = vmovl_u8(*v273);
                        v278 = vmovl_high_u8(*(uint8x16_t *)v273->i8);
                        v274[-2] = vmovl_u8(*(uint8x8_t *)v276.i8);
                        v274[-1] = vmovl_high_u8(v276);
                        *v274 = v277;
                        v274[1] = v278;
                        v274 += 4;
                        v273 += 4;
                        v275 -= 32;
                      }
                      while (v275);
                      if (v231 == v232)
                        goto LABEL_148;
                      if ((v231 & 0x18) == 0)
                      {
                        v130 = &v117[v232];
                        v129 = (_WORD *)(v119 + 2 * v232);
                        goto LABEL_147;
                      }
                    }
                    else
                    {
                      v232 = 0;
                    }
                    v129 = (_WORD *)(v119 + 2 * (v231 & 0xFFFFFFFFFFFFFFF8));
                    v130 = &v117[v231 & 0xFFFFFFFFFFFFFFF8];
                    v279 = (uint8x8_t *)&v117[v232];
                    v280 = (uint16x8_t *)(v119 + 2 * v232);
                    v281 = v232 - (v231 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v282 = *v279++;
                      *v280++ = vmovl_u8(v282);
                      v281 += 8;
                    }
                    while (v281);
                    if (v231 == (v231 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_148;
                    do
                    {
LABEL_147:
                      v131 = *v130++;
                      *v129++ = v131;
                    }
                    while (v129 != v118);
                    goto LABEL_148;
                  }
                  v57 = &v46[v48];
                  if (v48 < 0x40)
                  {
                    v58 = (unint64_t)(v45 + 5);
                  }
                  else
                  {
                    v58 = (unint64_t)&v46[v48 & 0xFFFFFFC0];
                    v59 = 0uLL;
                    v60 = (char *)(v45 + 5);
                    do
                    {
                      v311.val[0] = *v47;
                      v61 = v47[1];
                      v317.val[0] = v47[2];
                      v62 = v47[3];
                      v47 += 4;
                      v63 = v62;
                      v317.val[1] = 0uLL;
                      v323.val[0] = v61;
                      v311.val[1] = 0uLL;
                      v64 = v60;
                      vst2q_s8(v64, v311);
                      v64 += 32;
                      v323.val[1] = 0uLL;
                      vst2q_s8(v64, v323);
                      v65 = v60 + 64;
                      vst2q_s8(v65, v317);
                      v66 = v60 + 96;
                      vst2q_s8(v66, *(int8x16x2_t *)(&v59 - 1));
                      v60 += 128;
                    }
                    while (v60 != (char *)v58);
                  }
                  if ((_WORD *)v58 == v57)
                    goto LABEL_137;
                  v74 = (unint64_t)v45 + 2 * v48 - v58 + 18;
                  if (v74 < 0xE
                    || (v58 < (unint64_t)v47->u64 + (v74 >> 1) + 1
                      ? (v75 = (unint64_t)v47 >= (v74 & 0xFFFFFFFFFFFFFFFELL) + v58 + 2)
                      : (v75 = 1),
                        !v75))
                  {
                    v78 = (_WORD *)v58;
                    v79 = v47;
                    goto LABEL_108;
                  }
                  v76 = (v74 >> 1) + 1;
                  if (v74 >= 0x3E)
                  {
                    v77 = v76 & 0xFFFFFFFFFFFFFFE0;
                    v294 = (uint8x8_t *)&v47[1];
                    v295 = (uint16x8_t *)(v58 + 32);
                    v296 = v76 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v297 = *(uint8x16_t *)v294[-2].i8;
                      v298 = vmovl_u8(*v294);
                      v299 = vmovl_high_u8(*(uint8x16_t *)v294->i8);
                      v295[-2] = vmovl_u8(*(uint8x8_t *)v297.i8);
                      v295[-1] = vmovl_high_u8(v297);
                      *v295 = v298;
                      v295[1] = v299;
                      v295 += 4;
                      v294 += 4;
                      v296 -= 32;
                    }
                    while (v296);
                    if (v76 == v77)
                      goto LABEL_137;
                    if ((v76 & 0x18) == 0)
                    {
                      v79 = (int8x16_t *)((char *)v47 + v77);
                      v78 = (_WORD *)(v58 + 2 * v77);
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    v77 = 0;
                  }
                  v78 = (_WORD *)(v58 + 2 * (v76 & 0xFFFFFFFFFFFFFFF8));
                  v79 = (int8x16_t *)((char *)v47 + (v76 & 0xFFFFFFFFFFFFFFF8));
                  v300 = (uint8x8_t *)&v47->i8[v77];
                  v301 = (uint16x8_t *)(v58 + 2 * v77);
                  v302 = v77 - (v76 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v303 = *v300++;
                    *v301++ = vmovl_u8(v303);
                    v302 += 8;
                  }
                  while (v302);
                  if (v76 == (v76 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_137;
                  do
                  {
LABEL_108:
                    v80 = v79->u8[0];
                    v79 = (int8x16_t *)((char *)v79 + 1);
                    *v78++ = v80;
                  }
                  while (v78 != v57);
                  goto LABEL_137;
                }
              }
LABEL_305:
              __break(0xC471u);
              return;
            }
            if ((v44 & 0x80000000) != 0)
              goto LABEL_305;
            WTF::tryFastCompactMalloc((WTF *)(v44 + 20));
            v45 = v309;
            if (!v309)
              goto LABEL_305;
            v49 = (char *)v309 + 20;
            *(_DWORD *)v309 = 2;
            v45[1] = v44;
            *((_QWORD *)v45 + 1) = v45 + 5;
            v45[4] = 4;
            if (!v23)
            {
              v56 = 0;
              goto LABEL_112;
            }
            v50 = *(int8x16_t **)(v23 + 8);
            v51 = *(unsigned int *)(v23 + 4);
            if ((*(_BYTE *)(v23 + 16) & 4) != 0)
            {
              if ((_DWORD)v51)
              {
                if ((_DWORD)v51 == 1)
                  *v49 = v50->i8[0];
                else
                  memcpy(v45 + 5, v50, v51);
              }
              goto LABEL_111;
            }
            v52 = &v49[v51];
            if (v51 < 0x10)
            {
              v53 = (unint64_t)(v45 + 5);
              if (v49 == v52)
              {
LABEL_111:
                v56 = *(unsigned int *)(v23 + 4);
LABEL_112:
                v81 = &v49[v56];
                *(_OWORD *)v81 = *(_OWORD *)".PrivateBrowsing.";
                v81[16] = 46;
                v82 = v81 + 17;
                WTF::Internal::appendHex();
                LODWORD(__n[0]) = v83;
                WTF::Internal::appendHex();
                LODWORD(v308) = v84;
                WTF::Internal::appendHex();
                LODWORD(v306) = v85;
                WTF::Internal::appendHex();
                v305[0] = v86;
                WTF::Internal::appendHex();
                v88 = v87;
                v304 = v87;
                v89 = LODWORD(__n[0]);
                if (LODWORD(__n[0]))
                {
                  v90 = (char *)__n - LODWORD(__n[0]);
                  if (LODWORD(__n[0]) != 1)
                  {
                    memcpy(v82, v90, LODWORD(__n[0]));
                    v94 = &v82[v89];
                    *v94 = 45;
                    v92 = v94 + 1;
                    v93 = v308;
                    if (!(_DWORD)v308)
                      goto LABEL_120;
LABEL_118:
                    v95 = (char *)&v308 - v93;
                    if ((_DWORD)v93 != 1)
                    {
                      memcpy(v92, v95, v93);
                      v99 = &v92[v93];
                      *v99 = 45;
                      v97 = v99 + 1;
                      v98 = v306;
                      if (!(_DWORD)v306)
                        goto LABEL_125;
LABEL_123:
                      v100 = (char *)&cf[-1] - v98;
                      if ((_DWORD)v98 != 1)
                      {
                        memcpy(v97, v100, v98);
                        v104 = &v97[v98];
                        *v104 = 45;
                        v102 = v104 + 1;
                        v103 = v305[0];
                        if (!v305[0])
                          goto LABEL_130;
LABEL_128:
                        v105 = (char *)v305 - v103;
                        if ((_DWORD)v103 != 1)
                        {
                          memcpy(v102, v105, v103);
                          v102[v103] = 45;
                          v106 = &v102[v103 + 1];
                          if (!v88)
                            goto LABEL_211;
LABEL_133:
                          v107 = (char *)v305 - v88 + 12;
                          if (v88 == 1)
                            *v106 = *v107;
                          else
                            memcpy(v106, v107, v88);
                          goto LABEL_211;
                        }
                        *v102 = *v105;
LABEL_130:
                        v102[v103] = 45;
                        v106 = &v102[v103 + 1];
                        if (!v88)
                          goto LABEL_211;
                        goto LABEL_133;
                      }
                      *v97 = *v100;
LABEL_125:
                      v101 = &v97[v98];
                      *v101 = 45;
                      v102 = v101 + 1;
                      v103 = v305[0];
                      if (!v305[0])
                        goto LABEL_130;
                      goto LABEL_128;
                    }
                    *v92 = *v95;
LABEL_120:
                    v96 = &v92[v93];
                    *v96 = 45;
                    v97 = v96 + 1;
                    v98 = v306;
                    if (!(_DWORD)v306)
                      goto LABEL_125;
                    goto LABEL_123;
                  }
                  *v82 = *v90;
                }
                v91 = &v82[v89];
                *v91 = 45;
                v92 = v91 + 1;
                v93 = v308;
                if (!(_DWORD)v308)
                  goto LABEL_120;
                goto LABEL_118;
              }
            }
            else
            {
              v53 = (unint64_t)&v49[v51 & 0xFFFFFFF0];
              v54 = (unsigned __int128 *)(v45 + 5);
              do
              {
                v55 = (unsigned __int128)vld2q_s8(v50->i8);
                v50 += 2;
                *v54++ = v55;
              }
              while (v54 != (unsigned __int128 *)v53);
              if ((_BYTE *)v53 == v52)
                goto LABEL_111;
            }
            v67 = (char *)v45 + v51;
            v68 = (unint64_t)v45 + v51 - v53 + 20;
            if (v68 < 8
              || (v53 < (unint64_t)&v50[2].u64[1] + 2 * (_QWORD)v67 + -2 * v53
                ? (v69 = v50 >= (int8x16_t *)(v67 + 20))
                : (v69 = 1),
                  !v69))
            {
              v71 = (_BYTE *)v53;
              v72 = v50;
              goto LABEL_95;
            }
            if (v68 >= 0x20)
            {
              v70 = v68 & 0xFFFFFFFFFFFFFFE0;
              v283 = v50 + 2;
              v284 = (int8x16_t *)(v53 + 16);
              v285 = v68 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v287 = v283[-2];
                v286 = v283[-1];
                v289 = *v283;
                v288 = v283[1];
                v283 += 4;
                v284[-1] = vuzp1q_s8(v287, v286);
                *v284 = vuzp1q_s8(v289, v288);
                v284 += 2;
                v285 -= 32;
              }
              while (v285);
              if (v68 == v70)
                goto LABEL_111;
              if ((v68 & 0x18) == 0)
              {
                v72 = (int8x16_t *)((char *)v50 + 2 * v70);
                v71 = (_BYTE *)(v53 + v70);
                do
                {
LABEL_95:
                  v73 = v72->i8[0];
                  v72 = (int8x16_t *)((char *)v72 + 2);
                  *v71++ = v73;
                }
                while (v71 != v52);
                goto LABEL_111;
              }
            }
            else
            {
              v70 = 0;
            }
            v71 = (_BYTE *)(v53 + (v68 & 0xFFFFFFFFFFFFFFF8));
            v72 = (int8x16_t *)((char *)v50 + 2 * (v68 & 0xFFFFFFFFFFFFFFF8));
            v290 = (int16x8_t *)((char *)v50 + 2 * v70);
            v291 = (int8x8_t *)(v53 + v70);
            v292 = v70 - (v68 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v293 = *v290++;
              *v291++ = vmovn_s16(v293);
              v292 += 8;
            }
            while (v292);
            if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_111;
            goto LABEL_95;
          }
LABEL_27:
          v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
          goto LABEL_28;
        }
LABEL_26:
        if (v21 > 2 * v20)
          goto LABEL_29;
        goto LABEL_27;
      }
      WTF::fastFree((WTF *)v16, v17);
    }
    v18 = globalSessionMap(void)::map;
    if (globalSessionMap(void)::map)
      goto LABEL_17;
    goto LABEL_24;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != (NetworkStorageSessionMap *)this)
  {
    if (v12 == (NetworkStorageSessionMap *)-1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (uint64_t *)(v5 + 16 * v10);
    v12 = (NetworkStorageSessionMap *)*v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(v5 - 16);
        v11 = v13;
      }
      goto LABEL_13;
    }
  }
}

uint64_t WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = *a2 + ~(*a2 << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v10;
      if (v9 == *a2)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (_QWORD *)(v2 + 16 * v8);
  v13 = v12[1];
  *v12 = -1;
  v12[1] = 0;
  if (!v13)
  {
LABEL_12:
    ++*(_DWORD *)(*a1 - 16);
    v16 = *a1;
    if (*a1)
      goto LABEL_13;
    goto LABEL_16;
  }
  v14 = MEMORY[0x1D82A5C18]();
  if (!*(_DWORD *)(v14 + 8))
  {
    WTF::fastFree((WTF *)v14, v15);
    goto LABEL_12;
  }
  *(_QWORD *)(v14 + 288) = 0;
  *(_OWORD *)(v14 + 256) = 0u;
  *(_OWORD *)(v14 + 272) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_OWORD *)(v14 + 240) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  ++*(_DWORD *)(*a1 - 16);
  v16 = *a1;
  if (*a1)
  {
LABEL_13:
    --*(_DWORD *)(v16 - 12);
    v17 = *a1;
    if (!*a1)
      return 1;
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(v16 - 12) = -1;
  v17 = *a1;
  if (!*a1)
    return 1;
LABEL_17:
  v18 = 6 * *(_DWORD *)(v17 - 12);
  v19 = *(_DWORD *)(v17 - 4);
  if (v18 >= v19 || v19 < 9)
    return 1;
  WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v19 >> 1, 0);
  return 1;
}

uint64_t WebCore::SocketStreamHandleImpl::platformSend(uint64_t a1, char *a2, unint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  const UInt8 *v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  __CFWriteStream *v11;
  CFIndex v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5 = a3;
  v6 = (const UInt8 *)a2;
  v9 = (_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 168);
  if (v8)
  {
    if (v8 + a3 < 0x6400001)
    {
      v10 = (_QWORD *)(a1 + 168);
LABEL_15:
      WTF::StreamBuffer<unsigned char,1048576ul>::append(v10, a2, a3);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56), a1, *(_QWORD *)(a1 + 168));
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, 1);
    }
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0);
  }
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    v11 = *(__CFWriteStream **)(a1 + 128);
    if (v11 && CFWriteStreamCanAcceptBytes(v11))
    {
      v12 = CFWriteStreamWrite(*(CFWriteStreamRef *)(a1 + 128), v6, v5);
      if (v12 == -1)
        return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0);
      v13 = v12 & 0xFFFFFFFFFFFFFF00;
      v14 = v12;
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v15 = v13 | v14;
    a3 = v5 - v15;
    if (v5 - v15 + *v9 >= 0x6400001)
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0);
  }
  else
  {
    v15 = 0;
    if (a3 >= 0x6400001)
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0);
  }
  if (v5 > v15)
  {
    a2 = (char *)&v6[v15];
    v10 = v9;
    goto LABEL_15;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, 1);
}

_QWORD *WTF::StreamBuffer<unsigned char,1048576ul>::append(_QWORD *result, char *__src, unint64_t a3)
{
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    *result += a3;
    do
    {
      v7 = v5[2];
      v6 = v5[3];
      v8 = v6;
      if (v7 > v6)
        v8 = v6 + *((unsigned int *)v5 + 10);
      if (v8 != v7)
      {
        if (v7 == v6)
        {
          __break(0xC471u);
          JUMPOUT(0x1D7FDD898);
        }
        if (v6)
        {
          v9 = v5[4];
          if (*(_DWORD *)(*(_QWORD *)(v9 + 8 * v6 - 8) + 12) != 0x100000)
            goto LABEL_33;
        }
        else
        {
          v9 = v5[4];
          if (*(_DWORD *)(*(_QWORD *)(v9 + 8 * *((unsigned int *)v5 + 10) - 8) + 12) != 0x100000)
            goto LABEL_33;
        }
      }
      result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v10 = result;
      *result = 0;
      result[1] = 0;
      v12 = v5[2];
      v11 = v5[3];
      if (v12)
      {
        if (v11 + 1 != v12)
          goto LABEL_29;
        v13 = *((unsigned int *)v5 + 10);
      }
      else
      {
        v13 = *((unsigned int *)v5 + 10);
        if (v11)
        {
          if (v11 != v13 - 1)
            goto LABEL_29;
        }
        else if (*((_DWORD *)v5 + 10))
        {
          goto LABEL_29;
        }
      }
      v14 = v13 + (v13 >> 2);
      if (v14 <= 0xF)
        v14 = 15;
      if (v14 >= 0x1FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x1D7FDD8A8);
      }
      v15 = (WTF *)v5[4];
      v16 = v14 + 1;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * (v14 + 1)));
      *((_DWORD *)v5 + 10) = v16;
      v5[4] = v17;
      v19 = v5[2];
      v18 = v5[3];
      if (v19 <= v18)
      {
        result = memcpy(&v17[8 * v19], (char *)v15 + 8 * v19, 8 * v18 - 8 * v19);
        if (v15)
        {
LABEL_26:
          if ((WTF *)v5[4] == v15)
          {
            v5[4] = 0;
            *((_DWORD *)v5 + 10) = 0;
          }
          result = (_QWORD *)WTF::fastFree(v15, v22);
        }
      }
      else
      {
        memcpy(v17, v15, 8 * v18);
        v20 = v5[2];
        v21 = v20 - v13 + *((unsigned int *)v5 + 10);
        result = memcpy((void *)(v5[4] + 8 * v21), (char *)v15 + 8 * v20, 8 * v13 - 8 * v20);
        v5[2] = v21;
        if (v15)
          goto LABEL_26;
      }
LABEL_29:
      v23 = v5[3];
      v9 = v5[4];
      v7 = v5[2];
      *(_QWORD *)(v9 + 8 * v23) = v10;
      if (v23 == *((unsigned int *)v5 + 10) - 1)
        v6 = 0;
      else
        v6 = v23 + 1;
      v5[3] = v6;
LABEL_33:
      if (v7 == v6)
        goto LABEL_59;
      if (!v6)
        v6 = *((unsigned int *)v5 + 10);
      v24 = *(_QWORD *)(v9 + 8 * v6 - 8);
      if (v3 >= 0x100000 - (unint64_t)*(unsigned int *)(v24 + 12))
        v25 = 0x100000 - *(unsigned int *)(v24 + 12);
      else
        v25 = v3;
      if (v25)
      {
        v26 = *(unsigned int *)(v24 + 8);
        v27 = *(unsigned int *)(v24 + 12);
        v28 = v25 + v27;
        if (v25 + v27 > v26)
        {
          v29 = v26 + (v26 >> 2);
          if (v29 >= 0x10)
            v30 = v29 + 1;
          else
            v30 = 16;
          if (v30 <= v28)
            v31 = v25 + v27;
          else
            v31 = v30;
          if (HIDWORD(v31))
          {
LABEL_59:
            __break(0xC471u);
            JUMPOUT(0x1D7FDD878);
          }
          v32 = *(void **)v24;
          v33 = (void *)WTF::fastMalloc((WTF *)v31);
          *(_DWORD *)(v24 + 8) = v31;
          *(_QWORD *)v24 = v33;
          memcpy(v33, v32, v27);
          if (v32)
          {
            if (*(void **)v24 == v32)
            {
              *(_QWORD *)v24 = 0;
              *(_DWORD *)(v24 + 8) = 0;
            }
            WTF::fastFree((WTF *)v32, v34);
          }
        }
        v35 = *(unsigned int *)(v24 + 12);
        if (v28 < v35)
        {
          __break(0xC471u);
          JUMPOUT(0x1D7FDD8A0);
        }
        result = memcpy((void *)(*(_QWORD *)v24 + v35), __src, v25);
        *(_DWORD *)(v24 + 12) = v28;
      }
      __src += v25;
      v3 -= v25;
    }
    while (v3);
  }
  return result;
}

uint64_t WebCore::SocketStreamHandleImpl::bufferedAmount(WebCore::SocketStreamHandleImpl *this)
{
  return *((_QWORD *)this + 21);
}

unint64_t WebCore::SocketStreamHandleImpl::platformSendHandshake(uint64_t a1, StringImpl *__src, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  char *v7;
  uint64_t (***v9)(_QWORD);
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  unsigned int v22;
  int v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t result;
  void *v28;
  int v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  unint64_t v37;
  WTF *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  unint64_t v45;
  uint64_t (*v46)(void);
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  int v55;
  unint64_t v56;
  _QWORD *v57;
  char *__srca;
  char *__srcb;
  size_t __n;
  int v61;
  WTF *v62;
  WTF::StringImpl *v63;
  unsigned __int8 v64;

  v7 = (char *)__src;
  if (!*(_BYTE *)(a4 + 136))
  {
    LODWORD(v25) = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_54;
  }
  v9 = *(uint64_t (****)(_QWORD))(a1 + 160);
  if (!v9)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a5 + 16))(*a5, 0, 0);
  v11 = (**v9)(v9);
  if (!*(_BYTE *)(a4 + 136))
    goto LABEL_122;
  if (!v11)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a5 + 16))(*a5, 0, 0);
  WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue();
  v12 = v63;
  if (v63 && *((_DWORD *)v63 + 1))
  {
    v13 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v13 = 0x203A65696B6F6F43;
    WTF::String::utf8();
    v15 = v62;
    if (!v62)
    {
      v24 = 8;
      v25 = 12;
      v26 = 8;
      goto LABEL_28;
    }
    v16 = *((_QWORD *)v62 + 1);
    if (v16)
    {
      v17 = v16 + 8;
      if (v16 + 8 < 9)
      {
        __break(0xC471u);
        JUMPOUT(0x1D7FDDF14);
      }
      __srca = v7;
      if (v17 <= 0x10)
        v18 = 16;
      else
        v18 = v16 + 8;
      if (HIDWORD(v18))
      {
        __break(0xC471u);
        JUMPOUT(0x1D7FDDF1CLL);
      }
      v19 = (WTF *)WTF::fastMalloc((WTF *)v18);
      *(_QWORD *)v19 = *(_QWORD *)v13;
      if (v19 == v13)
        v21 = 0;
      else
        v21 = v19;
      if (v19 == v13)
        v22 = 0;
      else
        v22 = v18;
      WTF::fastFree(v13, v20);
      memcpy((char *)v21 + 8, (char *)v62 + 16, v16);
      v15 = v62;
      v13 = v21;
      v7 = __srca;
      v23 = *(_DWORD *)v62 - 1;
      if (*(_DWORD *)v62 != 1)
      {
LABEL_21:
        *(_DWORD *)v15 = v23;
        v24 = v17;
        v25 = v17 + 4;
        v26 = v22;
        if (v25 <= v22)
        {
LABEL_44:
          *(_DWORD *)((char *)v13 + v24) = 168626701;
          if ((_DWORD)v25)
          {
            v30 = (void *)WTF::fastMalloc((WTF *)v25);
            memcpy(v30, v13, v25);
          }
          else
          {
            v30 = 0;
          }
          v29 = v64;
          WTF::fastFree(v13, v14);
          v12 = v63;
          goto LABEL_48;
        }
LABEL_28:
        v31 = v26 + (v26 >> 2);
        if (v31 >= 0x10)
          v32 = v31 + 1;
        else
          v32 = 16;
        if (v32 <= v25)
          v33 = v25;
        else
          v33 = v32;
        if (HIDWORD(v33))
        {
          __break(0xC471u);
          JUMPOUT(0x1D7FDDF0CLL);
        }
        v34 = (WTF *)WTF::fastMalloc((WTF *)v33);
        memcpy(v34, v13, v24);
        if (v13)
        {
          if (v34 == v13)
            v35 = 0;
          else
            v35 = v34;
          WTF::fastFree(v13, v14);
          v13 = v35;
        }
        else
        {
          v13 = v34;
        }
        goto LABEL_44;
      }
    }
    else
    {
      LODWORD(v17) = 8;
      v22 = 8;
      v23 = *(_DWORD *)v62 - 1;
      if (*(_DWORD *)v62 != 1)
        goto LABEL_21;
    }
    WTF::fastFree(v15, v14);
    v24 = v17;
    v25 = v17 + 4;
    v26 = v22;
    if (v25 <= v22)
      goto LABEL_44;
    goto LABEL_28;
  }
  v30 = 0;
  LODWORD(v25) = 0;
  v29 = v64;
  if (!v63)
  {
LABEL_50:
    if ((_DWORD)v25)
      goto LABEL_51;
    goto LABEL_80;
  }
LABEL_48:
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_50;
  }
  WTF::StringImpl::destroy(v12, __src);
  if ((_DWORD)v25)
  {
LABEL_51:
    v28 = (void *)WTF::fastMalloc((WTF *)v25);
    memcpy(v28, v30, v25);
    if (a3 > 1)
    {
      a3 -= 2;
      if (!v30)
        goto LABEL_54;
      goto LABEL_53;
    }
LABEL_122:
    __break(1u);
    goto LABEL_128;
  }
LABEL_80:
  v28 = 0;
  if (v30)
LABEL_53:
    WTF::fastFree((WTF *)v30, __src);
LABEL_54:
  v36 = *(_QWORD *)(a1 + 168);
  if (v36)
  {
    if (a3 + v25 + v36 >= 0x6400001)
      goto LABEL_78;
    WTF::StreamBuffer<unsigned char,1048576ul>::append((_QWORD *)(a1 + 168), v7, a3);
    WTF::StreamBuffer<unsigned char,1048576ul>::append((_QWORD *)(a1 + 168), (char *)v28, v25);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56), a1, *(_QWORD *)(a1 + 168));
LABEL_115:
    v46 = *(uint64_t (**)(void))(*(_QWORD *)*a5 + 16);
    goto LABEL_116;
  }
  __n = v25;
  v37 = a3 + v25;
  v61 = v29;
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    v57 = a5;
    __srcb = v7;
    if (v37)
    {
      if (HIDWORD(v37))
        goto LABEL_128;
      v38 = (WTF *)WTF::fastMalloc((WTF *)(a3 + v25));
      LODWORD(v39) = a3 + v25;
      if (a3)
      {
LABEL_61:
        if (a3 > v39)
        {
          v40 = v39 + ((unint64_t)v39 >> 2);
          if (v40 >= 0x10)
            v41 = v40 + 1;
          else
            v41 = 16;
          if (v41 <= a3)
            v39 = a3;
          else
            v39 = v41;
          if (HIDWORD(v39))
          {
            __break(0xC471u);
            JUMPOUT(0x1D7FDDF24);
          }
          v42 = WTF::fastMalloc((WTF *)v39);
          if (v38)
          {
            if ((WTF *)v42 == v38)
              v44 = 0;
            else
              v44 = (WTF *)v42;
            if ((WTF *)v42 == v38)
              LODWORD(v39) = 0;
            WTF::fastFree(v38, v43);
            v38 = v44;
          }
          else
          {
            v38 = (WTF *)v42;
          }
        }
        memcpy(v38, __srcb, a3);
        LODWORD(v47) = a3;
        if ((_DWORD)v25)
          goto LABEL_88;
        goto LABEL_84;
      }
    }
    else
    {
      v38 = 0;
      LODWORD(v39) = 0;
      if (a3)
        goto LABEL_61;
    }
    LODWORD(v47) = 0;
    if ((_DWORD)v25)
    {
LABEL_88:
      v48 = v47;
      v47 = v47 + (unint64_t)v25;
      if (v47 <= v39)
        goto LABEL_102;
      v49 = v39 + ((unint64_t)v39 >> 2);
      if (v49 >= 0x10)
        v50 = v49 + 1;
      else
        v50 = 16;
      if (v50 <= v47)
        v51 = v47;
      else
        v51 = v50;
      if (!HIDWORD(v51))
      {
        v52 = (WTF *)WTF::fastMalloc((WTF *)v51);
        memcpy(v52, v38, v48);
        if (v38)
        {
          if (v52 == v38)
            v54 = 0;
          else
            v54 = v52;
          WTF::fastFree(v38, v53);
          v38 = v54;
        }
        else
        {
          v38 = v52;
        }
LABEL_102:
        a5 = v57;
        memcpy((char *)v38 + v48, v28, __n);
        result = *(_QWORD *)(a1 + 128);
        if (!result)
          goto LABEL_107;
LABEL_103:
        result = CFWriteStreamCanAcceptBytes((CFWriteStreamRef)result);
        if ((_DWORD)result)
        {
          result = CFWriteStreamWrite(*(CFWriteStreamRef *)(a1 + 128), (const UInt8 *)v38, v47);
          if (result == -1)
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD, BOOL))(*(_QWORD *)*a5 + 16))(*a5, 0, v61 != 0);
            v55 = 0;
            v45 = 0;
            if (!v38)
            {
LABEL_109:
              if (!v55)
                goto LABEL_117;
              v7 = __srcb;
              if (*(_QWORD *)(a1 + 168) + v37 - v45 >= 0x6400001)
                goto LABEL_78;
              goto LABEL_111;
            }
          }
          else
          {
            v45 = result;
            v55 = 1;
            if (!v38)
              goto LABEL_109;
          }
LABEL_108:
          result = WTF::fastFree(v38, __src);
          goto LABEL_109;
        }
LABEL_107:
        v45 = 0;
        v55 = 1;
        if (!v38)
          goto LABEL_109;
        goto LABEL_108;
      }
LABEL_128:
      __break(0xC471u);
      JUMPOUT(0x1D7FDDF04);
    }
LABEL_84:
    a5 = v57;
    result = *(_QWORD *)(a1 + 128);
    if (!result)
      goto LABEL_107;
    goto LABEL_103;
  }
  v45 = 0;
  if (v37 < 0x6400001)
  {
LABEL_111:
    if (v45 < v37)
    {
      v56 = v45 - a3;
      if (v45 < a3)
      {
        WTF::StreamBuffer<unsigned char,1048576ul>::append((_QWORD *)(a1 + 168), &v7[v45], a3 - v45);
        v56 = 0;
      }
      WTF::StreamBuffer<unsigned char,1048576ul>::append((_QWORD *)(a1 + 168), (char *)v28 + v56, __n - v56);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56), a1, *(_QWORD *)(a1 + 168));
    }
    goto LABEL_115;
  }
LABEL_78:
  v46 = *(uint64_t (**)(void))(*(_QWORD *)*a5 + 16);
LABEL_116:
  result = v46();
LABEL_117:
  if (v28)
    return WTF::fastFree((WTF *)v28, __src);
  return result;
}

void WebCore::SocketStreamHandleImpl::createStreams(WebCore::SocketStreamHandleImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  const void *v5;
  const __CFString *v6;
  const void *v7;
  const void *v8;
  int v9;
  uint64_t v10;
  CFDictionaryRef v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFArray *v14;
  __CFReadStream *v15;
  uint64_t v16;
  WebCore::DeprecatedGlobalSettings *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  CFDictionaryRef v22;
  const __CFString *v23;
  CFTypeRef v24;
  CFWriteStreamRef writeStream;
  CFReadStreamRef readStream;
  CFTypeRef cf;
  void *values[2];
  uint64_t v29;
  void *keys;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 21))
    goto LABEL_2;
  v12 = CFNetworkCopySystemProxySettings();
  if (!v12)
  {
    *((_DWORD *)this + 21) = 1;
    goto LABEL_2;
  }
  v13 = v12;
  v14 = CFNetworkCopyProxiesForURL(*((CFURLRef *)this + 17), v12);
  WebCore::SocketStreamHandleImpl::chooseProxyFromArray((CFRunLoopSourceRef *)this, v14);
  if (v14)
    CFRelease(v14);
  CFRelease(v13);
  if (*((_DWORD *)this + 21))
  {
LABEL_2:
    keys = (void *)WTF::URL::host((WebCore::SocketStreamHandleImpl *)((char *)this + 16));
    v31 = v2;
    WTF::StringView::createCFString((WTF::StringView *)&keys);
    writeStream = 0;
    readStream = 0;
    v3 = WTF::URL::port((WebCore::SocketStreamHandleImpl *)((char *)this + 16));
    if ((v3 & 0xFF0000) == 0)
    {
      if (WTF::URL::protocolIs())
        LOWORD(v3) = 443;
      else
        LOWORD(v3) = 80;
    }
    CFStreamCreatePairWithSocketToHost(0, (CFStringRef)cf, (unsigned __int16)v3, &readStream, &writeStream);
    v4 = (uint64_t *)MEMORY[0x1E0C9AE50];
    CFWriteStreamSetProperty(writeStream, (CFStreamPropertyKey)*MEMORY[0x1E0C93068], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    v5 = (const void *)*((_QWORD *)this + 19);
    if (v5)
    {
      v6 = (const __CFString *)*MEMORY[0x1E0C93278];
      CFReadStreamSetProperty(readStream, (CFStreamPropertyKey)*MEMORY[0x1E0C93278], v5);
      CFWriteStreamSetProperty(writeStream, v6, *((CFTypeRef *)this + 19));
    }
    v7 = (const void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = readStream;
    if (v7)
      CFRelease(v7);
    v8 = (const void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = writeStream;
    if (v8)
      CFRelease(v8);
    v9 = *((_DWORD *)this + 21);
    if (v9 == 3)
    {
      v15 = (__CFReadStream *)*((_QWORD *)this + 15);
      v16 = *MEMORY[0x1E0C931F0];
      keys = (void *)*MEMORY[0x1E0C931E8];
      v31 = v16;
      *(_OWORD *)values = *(_OWORD *)((char *)this + 88);
      v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFReadStreamSetProperty(v15, (CFStreamPropertyKey)*MEMORY[0x1E0C931E0], v11);
      if (!v11)
      {
LABEL_23:
        v17 = (WebCore::DeprecatedGlobalSettings *)WTF::URL::protocolIs();
        if ((_DWORD)v17)
        {
          v18 = (uint64_t *)MEMORY[0x1E0C9AE40];
          if ((WebCore::DeprecatedGlobalSettings::allowsAnySSLCertificate(v17) & 1) == 0 && !*((_BYTE *)this + 113))
            v18 = v4;
          v19 = *v18;
          v20 = *MEMORY[0x1E0C93290];
          keys = (void *)*MEMORY[0x1E0C93298];
          v31 = v20;
          v32 = *MEMORY[0x1E0C932A0];
          v21 = (void *)*MEMORY[0x1E0C932B0];
          values[0] = (void *)cf;
          values[1] = v21;
          v29 = v19;
          v22 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v23 = (const __CFString *)*MEMORY[0x1E0C93270];
          CFReadStreamSetProperty(*((CFReadStreamRef *)this + 15), (CFStreamPropertyKey)*MEMORY[0x1E0C93270], v22);
          CFWriteStreamSetProperty(*((CFWriteStreamRef *)this + 16), v23, v22);
          if (v22)
            CFRelease(v22);
        }
        v24 = cf;
        cf = 0;
        if (v24)
          CFRelease(v24);
        return;
      }
    }
    else
    {
      if (v9 != 2)
        goto LABEL_23;
      v10 = *MEMORY[0x1E0C9B2D0];
      keys = (void *)*MEMORY[0x1E0C9B2C8];
      v31 = v10;
      *(_OWORD *)values = *(_OWORD *)((char *)this + 88);
      v11 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFReadStreamSetProperty(*((CFReadStreamRef *)this + 15), (CFStreamPropertyKey)*MEMORY[0x1E0C9B2C0], v11);
      if (!v11)
        goto LABEL_23;
    }
    CFRelease(v11);
    goto LABEL_23;
  }
}

void WebCore::SocketStreamHandleImpl::scheduleStreams(CFRunLoopSourceRef *this)
{
  __CFReadStream *v2;
  __CFRunLoop *v3;
  const __CFString *v4;
  __CFWriteStream *v5;
  __CFRunLoop *v6;
  __CFRunLoopSource *v7;
  __CFRunLoop *v8;
  CFRunLoopSourceRef v9;
  NSObject *v10;
  uint8_t v11[8];
  CFStreamClientContext clientContext;

  clientContext.version = 0;
  clientContext.info = this;
  clientContext.retain = (void *(__cdecl *)(void *))WebCore::SocketStreamHandleImpl::retainSocketStreamHandle;
  clientContext.release = (void (__cdecl *)(void *))WebCore::SocketStreamHandleImpl::releaseSocketStreamHandle;
  clientContext.copyDescription = (CFStringRef (__cdecl *)(void *))WebCore::SocketStreamHandleImpl::copyCFStreamDescription;
  CFReadStreamSetClient(this[15], 0xFFFFFFFFFFFFFFFFLL, (CFReadStreamClientCallBack)WebCore::SocketStreamHandleImpl::readStreamCallback, &clientContext);
  CFWriteStreamSetClient(this[16], 0xFFFFFFFFFFFFFFFFLL, (CFWriteStreamClientCallBack)WebCore::SocketStreamHandleImpl::writeStreamCallback, &clientContext);
  v2 = this[15];
  v3 = (__CFRunLoop *)WebThreadRunLoop();
  v4 = (const __CFString *)*MEMORY[0x1E0C9B270];
  CFReadStreamScheduleWithRunLoop(v2, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  v5 = this[16];
  v6 = (__CFRunLoop *)WebThreadRunLoop();
  CFWriteStreamScheduleWithRunLoop(v5, v6, v4);
  CFReadStreamOpen(this[15]);
  CFWriteStreamOpen(this[16]);
  v7 = this[9];
  if (v7)
  {
    CFRunLoopSourceInvalidate(v7);
    v8 = (__CFRunLoop *)WebThreadRunLoop();
    CFRunLoopRemoveSource(v8, this[9], v4);
    v9 = this[9];
    this[9] = 0;
    if (v9)
      CFRelease(v9);
  }
  *((_DWORD *)this + 20) = 3;
  v10 = *(NSObject **)(MEMORY[0x1E0DCE780] + 32);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1D7FB9000, v10, OS_LOG_TYPE_DEFAULT, "SocketStreamHandleImpl::scheduleStreams - m_connectionSubState is WaitingForConnect", v11, 2u);
  }
}

uint64_t WebCore::SocketStreamHandleImpl::retainSocketStreamHandle(uint64_t this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = (unsigned int *)(this + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  return this;
}

uint64_t WebCore::SocketStreamHandleImpl::releaseSocketStreamHandle(uint64_t this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (unsigned int *)(this + 8);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    atomic_store(1u, v2);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E9D6AA68;
    v5[1] = v2;
    v6 = (uint64_t)v5;
    WTF::ensureOnMainThread();
    this = v6;
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

unint64_t WebCore::SocketStreamHandleImpl::copyCFStreamDescription(unint64_t this, void *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 4);
    *(_DWORD *)v2 += 2;
    if (v3 < 0)
      goto LABEL_17;
    v4 = v3 + 22;
    if (__OFADD__(v3, 22))
      goto LABEL_17;
    v5 = (*(unsigned __int8 *)(v2 + 16) >> 2) & 1;
  }
  else
  {
    v5 = 1;
    v4 = 22;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((unint64_t)&v9, v4, v5, (int8x16_t *)"WebKit socket stream, ", 0x16u, v2);
  if (!v9)
  {
LABEL_17:
    __break(0xC471u);
    return this;
  }
  WTF::String::createCFString((WTF::String *)&v9);
  v7 = v9;
  v8 = v10;
  v9 = 0;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v6);
      if (!v2)
        return v8;
      goto LABEL_12;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (!v2)
    return v8;
LABEL_12:
  if (*(_DWORD *)v2 != 2)
  {
    *(_DWORD *)v2 -= 2;
    return v8;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v2, v6);
  return v8;
}

void WebCore::SocketStreamHandleImpl::readStreamCallback(WebCore::SocketStreamHandleImpl *this, __CFReadStream *a2, uint64_t a3, void *a4)
{
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __CFReadStream *v13;
  _QWORD *v14;

  v12 = a3;
  v13 = a2;
  if (*(_QWORD *)(a3 + 120))
  {
    v4 = (unsigned int *)(a3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E9D6AAB8;
    v6[1] = &v12;
    v6[2] = &v13;
    v14 = v6;
    WTF::callOnMainThreadAndWait();
    v7 = v14;
    v14 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    do
    {
      v8 = __ldaxr(v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v4));
    if (!v9)
    {
      atomic_store(1u, v4);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E9D6AA68;
      v10[1] = v4;
      v14 = v10;
      WTF::ensureOnMainThread();
      v11 = v14;
      v14 = 0;
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
}

void WebCore::SocketStreamHandleImpl::writeStreamCallback(WebCore::SocketStreamHandleImpl *this, __CFWriteStream *a2, uint64_t a3, void *a4)
{
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __CFWriteStream *v13;
  _QWORD *v14;

  v12 = a3;
  v13 = a2;
  if (*(_QWORD *)(a3 + 128))
  {
    v4 = (unsigned int *)(a3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E9D6AAE0;
    v6[1] = &v12;
    v6[2] = &v13;
    v14 = v6;
    WTF::callOnMainThreadAndWait();
    v7 = v14;
    v14 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    do
    {
      v8 = __ldaxr(v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v4));
    if (!v9)
    {
      atomic_store(1u, v4);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E9D6AA68;
      v10[1] = v4;
      v14 = v10;
      WTF::ensureOnMainThread();
      v11 = v14;
      v14 = 0;
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
}

const __CFString *WebCore::SocketStreamHandleImpl::copyPACExecutionDescription(WebCore::SocketStreamHandleImpl *this, void *a2)
{
  return CFSTR("WebSocket proxy PAC file execution");
}

uint64_t WebCore::SocketStreamHandleImpl::pacExecutionCallback(WebCore::SocketStreamHandleImpl *this, void *a2, const __CFArray *a3, __CFError *a4)
{
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  WebCore::SocketStreamHandleImpl *v13;
  void *v14;
  uint64_t v15;

  v13 = this;
  v14 = a2;
  if (this)
  {
    v5 = (unsigned int *)((char *)this + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = off_1E9D6AA90;
  v7[1] = &v13;
  v7[2] = &v14;
  v15 = (uint64_t)v7;
  WTF::callOnMainThreadAndWait();
  result = v15;
  v15 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (this)
  {
    v9 = (unsigned int *)((char *)this + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E9D6AA68;
      v12[1] = v9;
      v15 = (uint64_t)v12;
      WTF::ensureOnMainThread();
      result = v15;
      v15 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebCore::SocketStreamHandleImpl::chooseProxyFromArray(CFRunLoopSourceRef *this, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v5;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  CFTypeID v8;
  const void *Value;
  const void *v10;
  CFTypeID v11;
  const __CFURL *v12;
  const __CFURL *v13;
  CFTypeID v14;
  CFRunLoopSourceRef v15;
  CFRunLoopSourceRef v16;
  __CFRunLoop *v17;
  CFIndex v18;
  const __CFDictionary *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  CFTypeID v25;
  const void *v26;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  const void *v30;
  CFTypeID v31;
  const void *v32;
  const void *v33;
  CFTypeID v34;
  CFRunLoopSourceRef v35;
  CFRunLoopSourceRef v36;
  CFRunLoopSourceRef *v37;
  CFStreamClientContext clientContext;

  if (!theArray)
    goto LABEL_36;
  Count = CFArrayGetCount(theArray);
  if (!Count)
    goto LABEL_36;
  v5 = Count;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex)
  {
    v7 = ValueAtIndex;
    v8 = CFGetTypeID(ValueAtIndex);
    if (v8 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0C93158]);
      if (Value)
      {
        v10 = Value;
        v11 = CFGetTypeID(Value);
        if (v11 == CFStringGetTypeID())
        {
          if (CFEqual(v10, (CFTypeRef)*MEMORY[0x1E0C93148]))
          {
            v12 = (const __CFURL *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0C93130]);
            if (v12)
            {
              v13 = v12;
              v14 = CFGetTypeID(v12);
              if (v14 == CFURLGetTypeID())
              {
                clientContext.version = 0;
                clientContext.info = this;
                clientContext.retain = (void *(__cdecl *)(void *))WebCore::SocketStreamHandleImpl::retainSocketStreamHandle;
                clientContext.release = (void (__cdecl *)(void *))WebCore::SocketStreamHandleImpl::releaseSocketStreamHandle;
                clientContext.copyDescription = (CFStringRef (__cdecl *)(void *))WebCore::SocketStreamHandleImpl::copyPACExecutionDescription;
                v15 = CFNetworkExecuteProxyAutoConfigurationURL(v13, this[17], (CFProxyAutoConfigurationResultCallback)WebCore::SocketStreamHandleImpl::pacExecutionCallback, &clientContext);
                v16 = this[9];
                this[9] = v15;
                if (v16)
                  CFRelease(v16);
                v17 = (__CFRunLoop *)WebThreadRunLoop();
                CFRunLoopAddSource(v17, this[9], (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
                *((_DWORD *)this + 20) = 1;
                return;
              }
            }
          }
        }
      }
    }
  }
  if (v5 < 1)
    goto LABEL_36;
  v37 = this;
  v18 = 0;
  v19 = 0;
  v20 = (const void *)*MEMORY[0x1E0C93158];
  v21 = (const void *)*MEMORY[0x1E0C93168];
  v22 = (const void *)*MEMORY[0x1E0C93150];
  do
  {
    v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v18);
    if (v23)
    {
      v24 = v23;
      v25 = CFGetTypeID(v23);
      if (v25 == CFDictionaryGetTypeID())
      {
        v26 = CFDictionaryGetValue(v24, v20);
        if (v26)
        {
          v27 = v26;
          v28 = CFGetTypeID(v26);
          if (v28 == CFStringGetTypeID())
          {
            if (CFEqual(v27, v21))
            {
              this = v37;
              *((_DWORD *)v37 + 21) = 2;
              v19 = v24;
              goto LABEL_24;
            }
            if (CFEqual(v27, v22))
            {
              *((_DWORD *)v37 + 21) = 3;
              v19 = v24;
            }
          }
        }
      }
    }
    ++v18;
  }
  while (v5 != v18);
  this = v37;
  if (!v19)
    goto LABEL_36;
LABEL_24:
  v29 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0C93138]);
  v30 = v29;
  if (v29)
  {
    v31 = CFGetTypeID(v29);
    if (v31 != CFStringGetTypeID())
      v30 = 0;
  }
  v32 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0C93140]);
  if (!v32)
    goto LABEL_36;
  v33 = v32;
  v34 = CFGetTypeID(v32);
  if (v34 != CFNumberGetTypeID())
    v33 = 0;
  if (!v30 || !v33)
  {
LABEL_36:
    *((_DWORD *)this + 21) = 1;
    return;
  }
  CFRetain(v30);
  v35 = this[11];
  this[11] = (CFRunLoopSourceRef)v30;
  if (v35)
    CFRelease(v35);
  CFRetain(v33);
  v36 = this[12];
  this[12] = (CFRunLoopSourceRef)v33;
  if (v36)
    CFRelease(v36);
}

WTF::StringImpl **WTF::String::operator=(WTF::StringImpl **a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v3 += 2;
  v4 = *a1;
  *a1 = v3;
  if (!v4)
    return a1;
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v4, a2);
  return a1;
}

void WebCore::SocketStreamHandleImpl::platformClose(WebCore::SocketStreamHandleImpl *this)
{
  __CFRunLoopSource *v2;
  CFRunLoopMode *v3;
  __CFRunLoop *v4;
  const void *v5;
  __CFReadStream *v6;
  __CFRunLoop *v7;
  const __CFString *v8;
  __CFWriteStream *v9;
  __CFRunLoop *v10;
  const void *v11;
  const void *v12;

  v2 = (__CFRunLoopSource *)*((_QWORD *)this + 9);
  v3 = (CFRunLoopMode *)MEMORY[0x1E0C9B270];
  if (v2)
  {
    CFRunLoopSourceInvalidate(v2);
    v4 = (__CFRunLoop *)WebThreadRunLoop();
    CFRunLoopRemoveSource(v4, *((CFRunLoopSourceRef *)this + 9), *v3);
    v5 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v5)
      CFRelease(v5);
  }
  v6 = (__CFReadStream *)*((_QWORD *)this + 15);
  if (v6)
  {
    v7 = (__CFRunLoop *)WebThreadRunLoop();
    v8 = *v3;
    CFReadStreamUnscheduleFromRunLoop(v6, v7, v8);
    v9 = (__CFWriteStream *)*((_QWORD *)this + 16);
    v10 = (__CFRunLoop *)WebThreadRunLoop();
    CFWriteStreamUnscheduleFromRunLoop(v9, v10, v8);
    CFReadStreamClose(*((CFReadStreamRef *)this + 15));
    CFWriteStreamClose(*((CFWriteStreamRef *)this + 16));
    v11 = (const void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v11)
      CFRelease(v11);
    v12 = (const void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v12)
      CFRelease(v12);
  }
  else if (*((_DWORD *)this + 20) >= 2u)
  {
    return;
  }
  (*(void (**)(_QWORD, WebCore::SocketStreamHandleImpl *))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7), this);
}

WTF::StringImpl *WebCore::SocketStreamHandleImpl::reportErrorToClient(WebCore::SocketStreamHandleImpl *this, CFErrorRef err)
{
  int Code;
  CFStringRef v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;

  Code = CFErrorGetCode(err);
  v5 = CFErrorCopyDescription(err);
  MEMORY[0x1D82A3998](&v12, v5);
  v6 = v12;
  if (v5)
    CFRelease(v5);
  v7 = *((_QWORD *)this + 7);
  LODWORD(v12) = Code;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  if (v8)
    *(_DWORD *)v8 += 2;
  v13 = v8;
  if (v6)
    *(_DWORD *)v6 += 2;
  v14 = v6;
  v15 = 0;
  (*(void (**)(uint64_t, WebCore::SocketStreamHandleImpl *, WTF::StringImpl **))(*(_QWORD *)v7 + 56))(v7, this, &v12);
  v10 = v14;
  v14 = 0;
  if (!v10)
  {
LABEL_10:
    result = v13;
    v13 = 0;
    if (!result)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v10, v9);
  result = v13;
  v13 = 0;
  if (!result)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)result == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    if (!v6)
      return result;
    goto LABEL_18;
  }
  *(_DWORD *)result -= 2;
LABEL_15:
  if (!v6)
    return result;
LABEL_18:
  if (*(_DWORD *)v6 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v9);
  *(_DWORD *)v6 -= 2;
  return result;
}

void WebCore::SocketStreamHandleImpl::~SocketStreamHandleImpl(WebCore::SocketStreamHandleImpl *this, StringImpl *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  const void *v19;
  WTF::StringImpl *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;

  *(_QWORD *)this = off_1E9D6A578;
  v3 = *((_QWORD *)this + 23);
  v4 = *((_QWORD *)this + 24);
  v5 = (WTF *)*((_QWORD *)this + 25);
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_19;
    v9 = 8 * v3;
    v10 = (WTF **)((char *)v5 + v9);
    v11 = 8 * v4 - v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        v13 = *(WTF **)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)v12 = 0;
          *((_DWORD *)v12 + 2) = 0;
          WTF::fastFree(v13, a2);
        }
        WTF::fastFree(v12, a2);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  else
  {
    if (v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *(WTF **)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
        {
          v8 = *(WTF **)v7;
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v8, a2);
          }
          WTF::fastFree(v7, a2);
        }
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      v5 = (WTF *)*((_QWORD *)this + 25);
      v3 = *((_QWORD *)this + 23);
    }
    v14 = *((unsigned int *)this + 52);
    if (v3 != v14)
    {
      v29 = 8 * v3;
      v30 = (WTF **)((char *)v5 + v29);
      v31 = 8 * v14 - v29;
      do
      {
        v32 = *v30;
        *v30 = 0;
        if (v32)
        {
          v33 = *(WTF **)v32;
          if (*(_QWORD *)v32)
          {
            *(_QWORD *)v32 = 0;
            *((_DWORD *)v32 + 2) = 0;
            WTF::fastFree(v33, a2);
          }
          WTF::fastFree(v32, a2);
        }
        ++v30;
        v31 -= 8;
      }
      while (v31);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 25);
LABEL_19:
  if (v5)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v5, a2);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (!v15)
    goto LABEL_25;
  v16 = v15 + 2;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (v18)
  {
LABEL_25:
    v19 = (const void *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (!v19)
      goto LABEL_27;
    goto LABEL_26;
  }
  atomic_store(1u, v15 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  v19 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v19)
LABEL_26:
    CFRelease(v19);
LABEL_27:
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (!v20)
    goto LABEL_30;
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
LABEL_30:
    v21 = (const void *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (!v21)
      goto LABEL_32;
    goto LABEL_31;
  }
  WTF::StringImpl::destroy(v20, a2);
  v21 = (const void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v21)
LABEL_31:
    CFRelease(v21);
LABEL_32:
  v22 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v22)
    CFRelease(v22);
  v23 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v23)
    CFRelease(v23);
  v24 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v24)
    CFRelease(v24);
  v25 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v25)
    CFRelease(v25);
  v26 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v26)
    CFRelease(v26);
  v27 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v27)
    CFRelease(v27);
  *(_QWORD *)this = off_1E9D6A538;
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, a2);
    else
      *(_DWORD *)v28 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::SocketStreamHandleImpl::~SocketStreamHandleImpl(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebBroadcastChannelRegistry::getOrCreate@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  {
      goto LABEL_3;
  }
  else
  {
    WebBroadcastChannelRegistry::getOrCreate(BOOL)::defaultSessionRegistry = 0;
      goto LABEL_3;
  }
  WebBroadcastChannelRegistry::getOrCreate(BOOL)::privateSessionRegistry = 0;
LABEL_3:
  if ((_DWORD)this)
    v3 = &WebBroadcastChannelRegistry::getOrCreate(BOOL)::privateSessionRegistry;
  else
    v3 = &WebBroadcastChannelRegistry::getOrCreate(BOOL)::defaultSessionRegistry;
  if (*v3)
  {
    v4 = *(_QWORD *)(*v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      *a2 = v4;
      return this;
    }
  }
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E9D6A8E0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *a2 = v5;
  this = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = v5;
  v7 = *(unsigned int **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = this;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (v9)
    {
      this = *(_QWORD *)(v5 + 16);
      if (!this)
        goto LABEL_14;
    }
    else
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
      this = *(_QWORD *)(v5 + 16);
      if (!this)
        goto LABEL_14;
    }
  }
  do
    v10 = __ldaxr((unsigned int *)this);
  while (__stlxr(v10 + 1, (unsigned int *)this));
LABEL_14:
  v11 = (unsigned int *)*v3;
  *v3 = this;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      return WTF::fastFree((WTF *)v11, v6);
    }
  }
  return this;
}

char *WebBroadcastChannelRegistry::registerChannel(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  StringImpl *v9;
  const WTF::StringImpl *v10;
  int v11;
  unsigned int v12;
  StringImpl **v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int i;
  unsigned int v18;
  StringImpl **v19;
  WebCore::SecurityOrigin *v20;
  unsigned int *v21;
  unsigned int v22;
  StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  StringImpl *v28;
  unsigned int v29;
  unsigned int v30;
  StringImpl *v31;
  uint64_t v32;
  StringImpl *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  WTF *v51;
  const WTF::StringImpl *v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  char *result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned __int16 v70;
  char v71;

  v68 = a4;
  v6 = (uint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7
    || (WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash((uint64_t *)(a1 + 24), 8u, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v69 = -1640531527;
  v70 = 0;
  v71 = 0;
  WTF::add<WebCore::SecurityOrigin,WebCore::SecurityOrigin>(&v69, *a2, a2[1]);
  v11 = v69;
  if (v71)
  {
    v12 = (v69 + v70) ^ ((v69 + v70) << 11);
    v11 = v12 + (v12 >> 17);
  }
  v13 = 0;
  v14 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
  v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  v16 = v15 ^ (v15 << 10);
  if (!v16)
    v16 = 0x800000;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v8;
    v19 = (StringImpl **)(v7 + 24 * (v16 & v8));
    v20 = (WebCore::SecurityOrigin *)*v19;
    if (*v19 == (StringImpl *)-1)
    {
      v13 = (StringImpl **)(v7 + 24 * v18);
      goto LABEL_10;
    }
    if (!v20)
      break;
    if (WebCore::SecurityOrigin::isSameOriginAs(v20, (const WebCore::SecurityOrigin *)*a2)
      && (WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v19[1], (const WebCore::SecurityOrigin *)a2[1]) & 1) != 0)
    {
      goto LABEL_51;
    }
LABEL_10:
    v16 = i + v18;
  }
  if (v13)
  {
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    --*(_DWORD *)(*v6 - 16);
    v19 = v13;
  }
  v21 = (unsigned int *)*a2;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v23 = *v19;
  *v19 = (StringImpl *)v21;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      v62 = (WTF::StringImpl *)*((_QWORD *)v23 + 6);
      *((_QWORD *)v23 + 6) = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, v9);
        else
          *(_DWORD *)v62 -= 2;
      }
      v64 = (WTF::StringImpl *)*((_QWORD *)v23 + 5);
      *((_QWORD *)v23 + 5) = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v9);
        else
          *(_DWORD *)v64 -= 2;
      }
      v66 = *((unsigned int *)v23 + 8);
      if ((_DWORD)v66 != -1)
        ((void (*)(int *, char *))off_1E9D6A9D0[v66])(&v69, (char *)v23 + 8);
      *((_DWORD *)v23 + 8) = -1;
      WTF::fastFree((WTF *)v23, v9);
    }
  }
  v26 = (unsigned int *)a2[1];
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  v28 = v19[1];
  v19[1] = (StringImpl *)v26;
  if (!v28)
    goto LABEL_28;
  do
  {
    v29 = __ldaxr((unsigned int *)v28);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, (unsigned int *)v28));
  if (!v30)
  {
    atomic_store(1u, (unsigned int *)v28);
    v63 = (WTF::StringImpl *)*((_QWORD *)v28 + 6);
    *((_QWORD *)v28 + 6) = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v9);
      else
        *(_DWORD *)v63 -= 2;
    }
    v65 = (WTF::StringImpl *)*((_QWORD *)v28 + 5);
    *((_QWORD *)v28 + 5) = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v9);
      else
        *(_DWORD *)v65 -= 2;
    }
    v67 = *((unsigned int *)v28 + 8);
    if ((_DWORD)v67 != -1)
      ((void (*)(int *, char *))off_1E9D6A9D0[v67])(&v69, (char *)v28 + 8);
    *((_DWORD *)v28 + 8) = -1;
    WTF::fastFree((WTF *)v28, v9);
    v31 = v19[2];
    v19[2] = 0;
    if (v31)
    {
LABEL_29:
      v32 = *((unsigned int *)v31 - 1);
      if ((_DWORD)v32)
      {
        v33 = v31;
        do
        {
          v34 = *(WTF::StringImpl **)v33;
          if (*(_QWORD *)v33 != -1)
          {
            v35 = (WTF *)*((_QWORD *)v33 + 1);
            if (v35)
            {
              *((_QWORD *)v33 + 1) = 0;
              *((_DWORD *)v33 + 4) = 0;
              WTF::fastFree(v35, v9);
              v34 = *(WTF::StringImpl **)v33;
            }
            *(_QWORD *)v33 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v9);
              else
                *(_DWORD *)v34 -= 2;
            }
          }
          v33 = (StringImpl *)((char *)v33 + 24);
          --v32;
        }
        while (v32);
      }
      WTF::fastFree((WTF *)((char *)v31 - 16), v9);
    }
  }
  else
  {
LABEL_28:
    v31 = v19[2];
    v19[2] = 0;
    if (v31)
      goto LABEL_29;
  }
  if (*v6)
  {
    ++*(_DWORD *)(*v6 - 12);
    v36 = *v6;
    if (*v6)
      goto LABEL_42;
LABEL_47:
    v37 = *(unsigned int *)(v36 - 16);
    v38 = *(unsigned int *)(v36 - 4);
    if (v38 > 0x400)
      goto LABEL_48;
LABEL_43:
    if (3 * v38 <= 4 * v37)
    {
      if (!(_DWORD)v38)
      {
        v39 = 8;
        goto LABEL_50;
      }
LABEL_49:
      v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v38));
LABEL_50:
      v19 = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(v6, v39, (uint64_t)v19);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v36 = *v6;
    if (!*v6)
      goto LABEL_47;
LABEL_42:
    v37 = (*(_DWORD *)(v36 - 16) + *(_DWORD *)(v36 - 12));
    v38 = *(unsigned int *)(v36 - 4);
    if (v38 <= 0x400)
      goto LABEL_43;
LABEL_48:
    if (v38 <= 2 * v37)
      goto LABEL_49;
  }
LABEL_51:
  v42 = v19[2];
  v40 = (uint64_t *)(v19 + 2);
  v41 = (uint64_t)v42;
  if (v42
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v40, 8u, 0), (v41 = *v40) != 0))
  {
    v43 = *(_DWORD *)(v41 - 8);
    v44 = *a3;
    v45 = *((_DWORD *)*a3 + 4);
    if (v45 >= 0x100)
      goto LABEL_54;
LABEL_57:
    v46 = WTF::StringImpl::hashSlowCase(v44);
  }
  else
  {
    v43 = 0;
    v44 = *a3;
    v45 = *((_DWORD *)*a3 + 4);
    if (v45 < 0x100)
      goto LABEL_57;
LABEL_54:
    v46 = v45 >> 8;
  }
  v47 = 0;
  v48 = 1;
  while (2)
  {
    v49 = v46 & v43;
    v50 = v41 + 24 * (v46 & v43);
    v51 = *(WTF **)v50;
    if (*(_QWORD *)v50 == -1)
    {
      v47 = (_QWORD *)(v41 + 24 * v49);
LABEL_60:
      v46 = v48 + v49;
      ++v48;
      continue;
    }
    break;
  }
  if (v51)
  {
    if ((WTF::equal(v51, *a3, v10) & 1) != 0)
      goto LABEL_82;
    goto LABEL_60;
  }
  if (v47)
  {
    *v47 = 0;
    v47[1] = 0;
    v47[2] = 0;
    --*(_DWORD *)(*v40 - 16);
    v50 = (uint64_t)v47;
  }
  v52 = *a3;
  if (*a3)
    *(_DWORD *)v52 += 2;
  *(_QWORD *)v50 = v52;
  v53 = *(WTF **)(v50 + 8);
  if (v53)
  {
    *(_QWORD *)(v50 + 8) = 0;
    *(_DWORD *)(v50 + 16) = 0;
    WTF::fastFree(v53, v9);
  }
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  if (*v40)
  {
    ++*(_DWORD *)(*v40 - 12);
    v54 = *v40;
    if (*v40)
      goto LABEL_73;
LABEL_78:
    v55 = *(unsigned int *)(v54 - 16);
    v56 = *(unsigned int *)(v54 - 4);
    if (v56 > 0x400)
      goto LABEL_79;
LABEL_74:
    if (3 * v56 <= 4 * v55)
    {
      if (!(_DWORD)v56)
      {
        v57 = 8;
        goto LABEL_81;
      }
LABEL_80:
      v57 = (_DWORD)v56 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v56));
LABEL_81:
      v50 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v40, v57, (WTF::StringImpl **)v50);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v54 = *v40;
    if (!*v40)
      goto LABEL_78;
LABEL_73:
    v55 = (*(_DWORD *)(v54 - 16) + *(_DWORD *)(v54 - 12));
    v56 = *(unsigned int *)(v54 - 4);
    if (v56 <= 0x400)
      goto LABEL_74;
LABEL_79:
    if (v56 <= 2 * v55)
      goto LABEL_80;
  }
LABEL_82:
  result = (char *)(v50 + 8);
  v59 = *(unsigned int *)(v50 + 20);
  if ((_DWORD)v59 == *(_DWORD *)(v50 + 16))
  {
    result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v59 + 1, (unint64_t)&v68);
    v59 = *(unsigned int *)(v50 + 20);
    v60 = *(_QWORD *)(v50 + 8);
    v61 = *(_QWORD *)result;
  }
  else
  {
    v60 = *(_QWORD *)result;
    v61 = v68;
  }
  *(_QWORD *)(v60 + 8 * v59) = v61;
  ++*(_DWORD *)(v50 + 20);
  return result;
}

uint64_t WebBroadcastChannelRegistry::unregisterChannel(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t result;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  result = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>((uint64_t *)(a1 + 24), a2);
  v9 = result;
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
    v10 += 24 * *(unsigned int *)(v10 - 4);
  if (v10 == result)
    return result;
  v11 = *(_QWORD *)(result + 16);
  if (!v11)
  {
LABEL_18:
    v17 = 0;
    v18 = MEMORY[0x14];
    if (!MEMORY[0x14])
      return result;
    goto LABEL_19;
  }
  v12 = *(_DWORD *)(v11 - 8);
  v13 = *((_DWORD *)*a3 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v14 = v13 >> 8;
  for (i = 0; ; v14 = i + v16)
  {
    v16 = v14 & v12;
    v17 = v11 + 24 * (v14 & v12);
    result = *(_QWORD *)v17;
    if (*(_QWORD *)v17 == -1)
      goto LABEL_9;
    if (!result)
      break;
    result = WTF::equal((WTF *)result, *a3, v8);
    if ((result & 1) != 0)
    {
      v18 = *(unsigned int *)(v17 + 20);
      if ((_DWORD)v18)
        goto LABEL_19;
      return result;
    }
LABEL_9:
    ++i;
  }
  v19 = *(_QWORD *)(v9 + 16);
  if (!v19)
    goto LABEL_18;
  v17 = v19 + 24 * *(unsigned int *)(v19 - 4);
  v18 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v18)
  {
LABEL_19:
    v20 = *(_QWORD **)(v17 + 8);
    if (*v20 == a4)
    {
      v21 = 0;
LABEL_24:
      result = (uint64_t)&v20[v21];
      if ((_QWORD *)(result + 8) != &v20[v18])
      {
        result = (uint64_t)memmove((void *)result, (const void *)(result + 8), 8 * (v18 - v21) - 8);
        LODWORD(v18) = *(_DWORD *)(v17 + 20);
      }
      *(_DWORD *)(v17 + 20) = v18 - 1;
    }
    else
    {
      v21 = 0;
      while (v18 - 1 != v21)
      {
        v22 = v20[++v21];
        if (v22 == a4)
          goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t WebBroadcastChannelRegistry::postMessage(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, unsigned int **a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int i;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int *v42;

  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  v13 = *a6;
  *a6 = 0;
  *(_QWORD *)(v12 + 8) = v13;
  result = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>((uint64_t *)(a1 + 24), a2);
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
    v17 += 24 * *(unsigned int *)(v17 - 4);
  if (v17 == result)
    goto LABEL_28;
  v40 = result;
  v18 = *(_QWORD *)(result + 16);
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v21 = v20 >> 8;
  for (i = 0; ; v21 = i + v23)
  {
    v23 = v21 & v19;
    v24 = v18 + 24 * (v21 & v19);
    result = *(_QWORD *)v24;
    if (*(_QWORD *)v24 == -1)
      goto LABEL_8;
    if (!result)
      break;
    result = WTF::equal((WTF *)result, *a3, v16);
    if ((result & 1) != 0)
    {
      v25 = *(unsigned int *)(v24 + 20);
      if (!(_DWORD)v25)
        goto LABEL_28;
      goto LABEL_15;
    }
LABEL_8:
    ++i;
  }
  v24 = *(_QWORD *)(v40 + 16) + 24 * *(unsigned int *)(*(_QWORD *)(v40 + 16) - 4);
  v25 = *(unsigned int *)(v24 + 20);
  if (!(_DWORD)v25)
    goto LABEL_28;
LABEL_15:
  v26 = *(_QWORD **)(v24 + 8);
  v27 = &v26[v25];
  do
  {
    if (*v26 != a4)
    {
      v28 = *a5;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
      v42 = v28;
      do
        v30 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v30 + 1, (unsigned int *)v12));
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = &off_1E9D6AB18;
      v31[1] = v12;
      v41 = v31;
      WebCore::BroadcastChannel::dispatchMessageTo();
      if (v41)
        (*(void (**)(_QWORD *))(*v41 + 8))(v41);
      result = (uint64_t)v42;
      if (v42)
      {
        do
        {
          v32 = __ldaxr(v42);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v42));
        if (!v33)
        {
          atomic_store(1u, v42);
          WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)v42);
          result = WTF::fastFree(v34, v35);
        }
      }
    }
    ++v26;
  }
  while (v26 != v27);
  do
  {
LABEL_28:
    v36 = __ldaxr((unsigned int *)v12);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, (unsigned int *)v12));
  if (!v37)
  {
    atomic_store(1u, (unsigned int *)v12);
    v38 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = 0;
    if (v38)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v39 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
    return WTF::fastFree((WTF *)v12, v15);
  }
  return result;
}

WTF::StringImpl *WebResourceLoadScheduler::hostForURL(WTF::StringImpl *result, uint64_t a2, WTF::URL *this, int a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  WTF **v28;
  int j;
  unsigned int v30;
  WTF **v31;
  WTF *v32;
  WebResourceLoadScheduler::HostInformation *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  WTF::StringImpl *v40;

  v4 = (uint64_t *)result;
  if ((*((_BYTE *)this + 8) & 2) == 0)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)result = v5;
    if (v5)
      ++*(_DWORD *)(v5 + 8);
    return result;
  }
  v7 = (uint64_t *)(a2 + 8);
  WTF::URL::host(this);
  if ((v8 & 0xFF00000000) != 0)
  {
    WTF::String::String();
    v11 = *v7;
    if (!*v7)
      goto LABEL_18;
  }
  else
  {
    WTF::String::String();
    v11 = *v7;
    if (!*v7)
    {
LABEL_18:
      *v4 = 0;
      goto LABEL_19;
    }
  }
  v12 = *(_DWORD *)(v11 - 8);
  v13 = *((_DWORD *)v40 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(v40);
  else
    v14 = v13 >> 8;
  for (i = 0; ; v14 = i + v16)
  {
    v16 = v14 & v12;
    v17 = *(WTF **)(v11 + 16 * v16);
    if (v17 != (WTF *)-1)
    {
      if (!v17)
        goto LABEL_18;
      if ((WTF::equal(v17, v40, v10) & 1) != 0)
        break;
    }
    ++i;
  }
  v18 = *(_QWORD *)(v11 + 16 * v16 + 8);
  *v4 = v18;
  if (v18)
  {
    ++*(_DWORD *)(v18 + 8);
    goto LABEL_56;
  }
LABEL_19:
  if (!a4)
  {
    v19 = WTF::fastMalloc((WTF *)0xC8);
    v21 = v19;
    v22 = maxRequestsInFlightPerHost;
    *(_QWORD *)v19 = 0;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_OWORD *)(v19 + 96) = 0u;
    *(_OWORD *)(v19 + 112) = 0u;
    *(_OWORD *)(v19 + 128) = 0u;
    *(_OWORD *)(v19 + 144) = 0u;
    *(_OWORD *)(v19 + 160) = 0u;
    *(_QWORD *)(v19 + 176) = 0;
    if (v40)
      *(_DWORD *)v40 += 2;
    *(_QWORD *)(v19 + 184) = v40;
    *(_DWORD *)(v19 + 192) = v22;
    *(_DWORD *)(v19 + 8) = 1;
    *v4 = v19;
    v23 = *v7;
    if (*v7
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v7, 8u), (v23 = *v7) != 0))
    {
      v24 = *(_DWORD *)(v23 - 8);
      v25 = v40;
      v26 = *((_DWORD *)v40 + 4);
      if (v26 >= 0x100)
      {
LABEL_25:
        v27 = v26 >> 8;
LABEL_28:
        v28 = 0;
        for (j = 1; ; ++j)
        {
          v30 = v27 & v24;
          v31 = (WTF **)(v23 + 16 * (v27 & v24));
          v32 = *v31;
          if (*v31 == (WTF *)-1)
          {
            v28 = (WTF **)(v23 + 16 * v30);
          }
          else
          {
            if (!v32)
            {
              if (v28)
              {
                *v28 = 0;
                v28[1] = 0;
                --*(_DWORD *)(*v7 - 16);
                v31 = v28;
              }
              if (v40)
                *(_DWORD *)v40 += 2;
              *v31 = v40;
              v33 = v31[1];
              v31[1] = (WTF *)v21;
              if (v33)
              {
                WebResourceLoadScheduler::HostInformation::~HostInformation(v33, v9);
                if (!*(_DWORD *)(v34 + 8))
                {
                  WTF::fastFree((WTF *)v34, v9);
                  goto LABEL_43;
                }
                *(_QWORD *)(v34 + 192) = 0;
                *(_OWORD *)(v34 + 160) = 0u;
                *(_OWORD *)(v34 + 176) = 0u;
                *(_OWORD *)(v34 + 128) = 0u;
                *(_OWORD *)(v34 + 144) = 0u;
                *(_OWORD *)(v34 + 96) = 0u;
                *(_OWORD *)(v34 + 112) = 0u;
                *(_OWORD *)(v34 + 64) = 0u;
                *(_OWORD *)(v34 + 80) = 0u;
                *(_OWORD *)(v34 + 32) = 0u;
                *(_OWORD *)(v34 + 48) = 0u;
                *(_OWORD *)v34 = 0u;
                *(_OWORD *)(v34 + 16) = 0u;
                v35 = *v7;
                if (!*v7)
                {
LABEL_51:
                  *(_DWORD *)(v35 - 12) = 1;
                  v36 = *v7;
                  if (!*v7)
                  {
LABEL_52:
                    v37 = *(unsigned int *)(v36 - 16);
                    v38 = *(unsigned int *)(v36 - 4);
                    if (v38 > 0x400)
                      goto LABEL_53;
LABEL_46:
                    if (3 * v38 > 4 * v37)
                      goto LABEL_56;
                    if (!(_DWORD)v38)
                    {
                      v39 = 8;
LABEL_55:
                      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v7, v39);
                      goto LABEL_56;
                    }
LABEL_54:
                    v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v38));
                    goto LABEL_55;
                  }
LABEL_45:
                  v37 = (*(_DWORD *)(v36 - 16) + *(_DWORD *)(v36 - 12));
                  v38 = *(unsigned int *)(v36 - 4);
                  if (v38 <= 0x400)
                    goto LABEL_46;
LABEL_53:
                  if (v38 > 2 * v37)
                    goto LABEL_56;
                  goto LABEL_54;
                }
              }
              else
              {
LABEL_43:
                v35 = *v7;
                if (!*v7)
                  goto LABEL_51;
              }
              ++*(_DWORD *)(v35 - 12);
              v36 = *v7;
              if (!*v7)
                goto LABEL_52;
              goto LABEL_45;
            }
            if (WTF::equal(v32, v40, v20))
            {
              WebResourceLoadScheduler::HostInformation::~HostInformation((WebResourceLoadScheduler::HostInformation *)v21, v9);
              if (*(_DWORD *)(v21 + 8))
              {
                *(_QWORD *)(v21 + 192) = 0;
                *(_OWORD *)(v21 + 160) = 0u;
                *(_OWORD *)(v21 + 176) = 0u;
                *(_OWORD *)(v21 + 128) = 0u;
                *(_OWORD *)(v21 + 144) = 0u;
                *(_OWORD *)(v21 + 96) = 0u;
                *(_OWORD *)(v21 + 112) = 0u;
                *(_OWORD *)(v21 + 64) = 0u;
                *(_OWORD *)(v21 + 80) = 0u;
                *(_OWORD *)(v21 + 32) = 0u;
                *(_OWORD *)(v21 + 48) = 0u;
                *(_OWORD *)v21 = 0u;
                *(_OWORD *)(v21 + 16) = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v21, v9);
              }
              goto LABEL_56;
            }
          }
          v27 = j + v30;
        }
      }
    }
    else
    {
      v24 = 0;
      v25 = v40;
      v26 = *((_DWORD *)v40 + 4);
      if (v26 >= 0x100)
        goto LABEL_25;
    }
    v27 = WTF::StringImpl::hashSlowCase(v25);
    goto LABEL_28;
  }
LABEL_56:
  result = v40;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v40, v9);
    else
      *(_DWORD *)v40 -= 2;
  }
  return result;
}

uint64_t WebResourceLoadScheduler::requestTimerFired(WebResourceLoadScheduler *this)
{
  return WebResourceLoadScheduler::servePendingRequests((uint64_t)this, 0);
}

void WebResourceLoadScheduler::~WebResourceLoadScheduler(WebResourceLoadScheduler *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  StringImpl *v4;
  WebResourceLoadScheduler::HostInformation *v5;
  uint64_t v6;
  StringImpl *v7;

  *((_QWORD *)this + 3) = &unk_1E9D6A108;
  v2 = (WebResourceLoadScheduler *)((char *)this + 24);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (WebResourceLoadScheduler::HostInformation *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    WebResourceLoadScheduler::HostInformation::~HostInformation(v5, v4);
    if (*(_DWORD *)(v6 + 8))
    {
      *(_QWORD *)(v6 + 192) = 0;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      *(_OWORD *)(v6 + 80) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((WTF::StringImpl ***)this + 1, v7);
      WebCore::LoaderStrategy::~LoaderStrategy(this);
      return;
    }
    WTF::fastFree((WTF *)v6, v7);
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((WTF::StringImpl ***)this + 1, v4);
  WebCore::LoaderStrategy::~LoaderStrategy(this);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  StringImpl *v4;
  WebResourceLoadScheduler::HostInformation *v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this + 3) = &unk_1E9D6A108;
  v2 = (WebResourceLoadScheduler *)((char *)this + 24);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (WebResourceLoadScheduler::HostInformation *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    WebResourceLoadScheduler::HostInformation::~HostInformation(v5, v4);
    if (*(_DWORD *)(v6 + 8))
    {
      *(_QWORD *)(v6 + 192) = 0;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      *(_OWORD *)(v6 + 80) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v6, v4);
    }
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((WTF::StringImpl ***)this + 1, v4);
  WebCore::LoaderStrategy::~LoaderStrategy(this);
  WTF::fastFree(v7, v8);
}

uint64_t WebResourceLoadScheduler::loadResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v7 = *a6;
  *a6 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E9D6AB68;
  v8[1] = a1;
  v8[2] = v7;
  v10 = v8;
  WebCore::SubresourceLoader::create();
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

uint64_t WebResourceLoadScheduler::loadResourceSynchronously(int a1, WebCore::FrameLoader *this, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = *(_QWORD *)(WebCore::FrameLoader::frame(this) + 296);
  if (v11)
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192));
  WebCore::FrameLoader::networkingContext(this);
  return WebCore::ResourceHandle::loadResourceSynchronously();
}

uint64_t WebResourceLoadScheduler::scheduleLoad(WebResourceLoadScheduler *this, WebCore::ResourceLoader *a2)
{
  WebResourceLoadScheduler *v3;
  WebCore::ResourceRequestBase *v4;
  WTF::URL *v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  WebCore::DocumentLoader *v17;
  WebCore::ResourceRequestBase *v18;
  const WTF::URL *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::ResourceRequestBase *v34;
  char v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  WebResourceLoadScheduler *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;

  v3 = this;
  if (!*((_DWORD *)this + 20))
  {
    v17 = (WebCore::DocumentLoader *)*((_QWORD *)a2 + 5);
    v18 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 160))(a2);
    v19 = (const WTF::URL *)WebCore::ResourceRequestBase::url(v18);
    if (WebCore::DocumentLoader::archiveResourceForURL(v17, v19))
      return (*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 152))(a2);
  }
  v4 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 160))(a2);
  v5 = (WTF::URL *)WebCore::ResourceRequestBase::url(v4);
  WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v41, (uint64_t)v3, v5, 0);
  v6 = v41;
  v42 = v41;
  result = WebCore::ResourceRequestBase::priority((WebCore::ResourceLoader *)((char *)a2 + 336));
  v8 = result;
  v9 = *(_QWORD *)(v6 + 176);
  v10 = v9 && *(_DWORD *)(v9 - 12)
     || *(_QWORD *)(v6 + 16) != *(_QWORD *)(v6 + 24)
     || *(_QWORD *)(v6 + 48) != *(_QWORD *)(v6 + 56)
     || *(_QWORD *)(v6 + 80) != *(_QWORD *)(v6 + 88)
     || *(_QWORD *)(v6 + 112) != *(_QWORD *)(v6 + 120)
     || *(_QWORD *)(v6 + 144) != *(_QWORD *)(v6 + 152);
  v40 = v10;
  if ((((_BYTE)result - 1) & 0xFC) != 0)
    v11 = 0;
  else
    v11 = (result - 1) + 1;
  v12 = v6 + 16;
  v13 = v6 + 16 + 32 * v11;
  v15 = (uint64_t *)(v13 + 8);
  v14 = *(_QWORD *)(v13 + 8);
  if (*(_QWORD *)v13)
  {
    if (v14 + 1 != *(_QWORD *)v13)
      goto LABEL_33;
    LODWORD(v16) = *(_DWORD *)(v12 + 32 * v11 + 24);
  }
  else
  {
    v16 = *(unsigned int *)(v13 + 24);
    if (v14)
    {
      if (v14 != v16 - 1)
        goto LABEL_33;
    }
    else if ((_DWORD)v16)
    {
      goto LABEL_33;
    }
  }
  v38 = result;
  v39 = v3;
  v37 = v16;
  v20 = v16 + ((unint64_t)v16 >> 2);
  if (v20 <= 0xF)
    v20 = 15;
  if (v20 >= 0x1FFFFFFF)
    goto LABEL_51;
  v21 = v12 + 32 * v11;
  v24 = *(char **)(v21 + 16);
  v23 = v21 + 16;
  v22 = v24;
  v25 = v20 + 1;
  v26 = (char *)WTF::fastMalloc((WTF *)(8 * (v20 + 1)));
  *(_DWORD *)(v23 + 8) = v25;
  *(_QWORD *)v23 = v26;
  v27 = *v15;
  if (*(_QWORD *)v13 > (unint64_t)*v15)
  {
    memcpy(v26, v22, 8 * v27);
    v28 = *(_QWORD *)v13 - v37 + *(unsigned int *)(v23 + 8);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v23 + 8 * v28), &v22[8 * *(_QWORD *)v13], 8 * v37 - 8 * *(_QWORD *)v13);
    *(_QWORD *)v13 = v28;
    v3 = v39;
    v8 = v38;
    if (!v22)
      goto LABEL_33;
  }
  else
  {
    result = (uint64_t)memcpy(&v26[8 * *(_QWORD *)v13], &v22[8 * *(_QWORD *)v13], 8 * v27 - 8 * *(_QWORD *)v13);
    v3 = v39;
    v8 = v38;
    if (!v22)
      goto LABEL_33;
  }
  if (*(char **)v23 == v22)
  {
    *(_QWORD *)v23 = 0;
    *(_DWORD *)(v23 + 8) = 0;
  }
  result = WTF::fastFree((WTF *)v22, v29);
LABEL_33:
  v30 = v12 + 32 * v11;
  v31 = *(_QWORD *)(v30 + 16);
  v32 = *v15;
  ++*((_DWORD *)a2 + 4);
  *(_QWORD *)(v31 + 8 * v32) = a2;
  if (v32 == *(unsigned int *)(v30 + 24) - 1)
    v33 = 0;
  else
    v33 = v32 + 1;
  *v15 = v33;
  if (!*((_DWORD *)v3 + 20))
  {
    result = WebResourceLoadScheduler::servePendingRequests((uint64_t)&v42, 0);
    goto LABEL_48;
  }
  if (v8 <= 1)
  {
    v34 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 160))(a2);
    result = WebCore::ResourceRequestBase::url(v34);
    v35 = v40;
    if (v8 != 1)
      v35 = 1;
    if (((*(_BYTE *)(result + 8) & 2) == 0 || (v35 & 1) == 0) && !*((_DWORD *)v3 + 20))
    {
      result = WebResourceLoadScheduler::servePendingRequests((uint64_t)&v42, v8);
      v36 = *(_DWORD *)(v6 + 8);
      if (v36)
        goto LABEL_49;
      goto LABEL_51;
    }
  }
  if ((*((_QWORD *)v3 + 7) & 0xFFFFFFFFFFFFLL) != 0 && *(double *)((*((_QWORD *)v3 + 7) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
LABEL_48:
    v36 = *(_DWORD *)(v6 + 8);
    if (v36)
      goto LABEL_49;
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x1D7FE0580);
  }
  result = WebCore::TimerBase::start();
  v36 = *(_DWORD *)(v6 + 8);
  if (!v36)
    goto LABEL_51;
LABEL_49:
  *(_DWORD *)(v6 + 8) = v36 - 1;
  return result;
}

uint64_t WebResourceLoadScheduler::servePendingRequests(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  WebCore::ResourceLoader *v10;
  WebCore::FrameLoader *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::IOSApplication *v20;
  WebCore::IOSApplication *v21;
  _DWORD v23[6];
  WebCore::IOSApplication *v24;

  v2 = result;
  v3 = 4;
  while (1)
  {
    v5 = ((v3 - 1) & 0xFC) != 0 ? 0 : (v3 - 1) + 1;
    v6 = *(_QWORD *)v2 + 16 + 32 * v5;
    v7 = (_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)v6;
    if (*(_QWORD *)v6 != *(_QWORD *)(v6 + 8))
      break;
LABEL_2:
    if (a2 == v3--)
      return result;
  }
  v9 = (_QWORD *)(v6 + 16);
  while (1)
  {
    v10 = *(WebCore::ResourceLoader **)(*v9 + 8 * v8);
    if (v10)
      ++*((_DWORD *)v10 + 4);
    result = WebCore::ResourceLoader::frameLoader(v10);
    if (result)
    {
      v11 = (WebCore::FrameLoader *)WebCore::ResourceLoader::frameLoader(v10);
      result = WebCore::FrameLoader::frame(v11);
      v12 = *(_QWORD *)v2;
      if (!*(_QWORD *)(*(_QWORD *)v2 + 184))
      {
        result = *(_QWORD *)(result + 296);
        if (!result)
          goto LABEL_31;
        if (!*(_BYTE *)(result + 3389))
        {
          result = WebCore::Document::haveStylesheetsLoaded((WebCore::Document *)result);
          if ((result & 1) != 0)
            goto LABEL_31;
          v12 = *(_QWORD *)v2;
        }
      }
    }
    else
    {
      v12 = *(_QWORD *)v2;
      if (!*(_QWORD *)(*(_QWORD *)v2 + 184))
        goto LABEL_31;
    }
    v13 = *(_QWORD *)(v12 + 176);
    if (!(_BYTE)v3)
      break;
    if (v13)
    {
      v14 = *(_DWORD *)(v13 - 12);
      v15 = (_QWORD *)WebCore::platformStrategies((WebCore *)result);
      result = v15[1];
      if (result)
        goto LABEL_26;
      goto LABEL_29;
    }
LABEL_25:
    v14 = 0;
    v15 = (_QWORD *)WebCore::platformStrategies((WebCore *)result);
    result = v15[1];
    if (result)
    {
LABEL_26:
      if (*(_BYTE *)(result + 84))
        goto LABEL_27;
      goto LABEL_30;
    }
LABEL_29:
    result = (*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    v15[1] = result;
    if (*(_BYTE *)(result + 84))
    {
LABEL_27:
      if (v14)
        goto LABEL_51;
      goto LABEL_31;
    }
LABEL_30:
    if (v14 >= *(_DWORD *)(v12 + 192))
      goto LABEL_51;
LABEL_31:
    v16 = *(_QWORD *)v6;
    if (*(_QWORD *)v6 == *v7)
    {
      result = 512;
      __break(0xC471u);
      return result;
    }
    v17 = *(_DWORD **)(*v9 + 8 * v16);
    *(_QWORD *)(*v9 + 8 * v16) = 0;
    if (v17)
    {
      if (v17[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        v16 = *(_QWORD *)v6;
      }
      else
      {
        --v17[4];
      }
    }
    if (v16 == *(unsigned int *)(v6 + 24) - 1)
      v18 = 0;
    else
      v18 = v16 + 1;
    *(_QWORD *)v6 = v18;
    v19 = *(_QWORD *)v2;
    if (v10)
      ++*((_DWORD *)v10 + 4);
    v24 = v10;
    WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::add(v23, (uint64_t *)(v19 + 176), &v24);
    v20 = v24;
    if (!v24)
      goto LABEL_44;
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
LABEL_44:
      if ((WebCore::IOSApplication::isWebProcess(v20) & 1) == 0)
        goto LABEL_50;
      goto LABEL_47;
    }
    v21 = (WebCore::IOSApplication *)(*(uint64_t (**)(void))(*(_QWORD *)v24 + 8))();
    if ((WebCore::IOSApplication::isWebProcess(v21) & 1) == 0)
    {
LABEL_50:
      result = (*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)v10 + 152))(v10);
      goto LABEL_52;
    }
LABEL_47:
    result = WebCore::ResourceLoader::start(v10);
    if (v10)
    {
      if (*((_DWORD *)v10 + 4) == 1)
        result = (*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)v10 + 8))(v10);
      else
        --*((_DWORD *)v10 + 4);
    }
    v8 = *(_QWORD *)v6;
    if (*(_QWORD *)v6 == *v7)
      goto LABEL_2;
  }
  if (!v13 || !*(_DWORD *)(v13 - 12))
    goto LABEL_25;
LABEL_51:
  if (!v10)
    return result;
LABEL_52:
  if (*((_DWORD *)v10 + 4) == 1)
    return (*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)v10 + 8))(v10);
  --*((_DWORD *)v10 + 4);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  StringImpl *v5;
  const WTF::StringImpl *v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  int v33;
  int v34;
  int i;
  uint64_t v36;
  WTF *v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WebResourceLoadScheduler::HostInformation *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;

  if (!*(_DWORD *)(result + 80))
  {
    v3 = result;
    if ((*(_QWORD *)(result + 56) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(result + 24));
    v4 = *(_QWORD *)(v3 + 16);
    v54 = v4;
    ++*(_DWORD *)(v4 + 8);
    result = WebResourceLoadScheduler::servePendingRequests((uint64_t)&v54, a2);
    v7 = *(_DWORD *)(v4 + 8);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1D7FE1644);
    }
    *(_DWORD *)(v4 + 8) = v7 - 1;
    v10 = *(_QWORD **)(v3 + 8);
    v9 = (uint64_t *)(v3 + 8);
    v8 = v10;
    if (v10)
    {
      v11 = *((unsigned int *)v8 - 1);
      v12 = &v8[2 * v11];
      if (!*((_DWORD *)v8 - 3))
      {
        v13 = &v8[2 * v11];
        v12 = v13;
        if (v8)
          goto LABEL_16;
LABEL_21:
        v15 = 0;
        goto LABEL_22;
      }
      v13 = v8;
      if ((_DWORD)v11)
      {
        v14 = 16 * v11;
        v13 = v8;
        do
        {
          if ((unint64_t)(*v13 + 1) > 1)
            goto LABEL_15;
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
        v13 = v12;
        if (!v8)
          goto LABEL_21;
LABEL_16:
        v15 = &v8[2 * *((unsigned int *)v8 - 1)];
        v16 = *((unsigned int *)v8 - 3);
        if ((_DWORD)v16)
        {
          if (v16 >> 29)
          {
LABEL_103:
            __break(0xC471u);
            JUMPOUT(0x1D7FE1624);
          }
          result = WTF::fastMalloc((WTF *)(8 * v16));
          v17 = (WTF *)result;
          if (v15 == v13)
          {
LABEL_99:
            if (v17)
              return WTF::fastFree(v17, v5);
            return result;
          }
          goto LABEL_23;
        }
LABEL_22:
        v17 = 0;
        if (v15 == v13)
          goto LABEL_99;
LABEL_23:
        v18 = 0;
        while (1)
        {
          v19 = (uint64_t *)v13[1];
          if (v19)
            break;
          result = 0;
          *((_QWORD *)v17 + v18) = 0;
          v24 = v13 + 2;
          v13 = v12;
          if (v24 != v12)
          {
LABEL_35:
            v13 = v24;
            do
            {
              if ((unint64_t)(*v13 + 1) > 1)
                goto LABEL_24;
              v13 += 2;
            }
            while (v13 != v12);
            v13 = v12;
          }
LABEL_24:
          ++v18;
          if (v13 == v15)
          {
            if (!v18)
              goto LABEL_99;
            v25 = (uint64_t *)((char *)v17 + 8 * v18);
            v26 = v17;
            while (2)
            {
              if (!*(_QWORD *)v26)
                goto LABEL_44;
              v27 = *(_QWORD *)(*(_QWORD *)v26 + 8);
              if (!v27)
                goto LABEL_44;
              v28 = *(_QWORD *)(v27 + 176);
              if (v28 && *(_DWORD *)(v28 - 12)
                || *(_QWORD *)(v27 + 16) != *(_QWORD *)(v27 + 24)
                || *(_QWORD *)(v27 + 48) != *(_QWORD *)(v27 + 56)
                || *(_QWORD *)(v27 + 80) != *(_QWORD *)(v27 + 88)
                || *(_QWORD *)(v27 + 112) != *(_QWORD *)(v27 + 120)
                || *(_QWORD *)(v27 + 144) != *(_QWORD *)(v27 + 152))
              {
                v54 = *(_QWORD *)(*(_QWORD *)v26 + 8);
                ++*(_DWORD *)(v27 + 8);
                WebResourceLoadScheduler::servePendingRequests((uint64_t)&v54, a2);
                v34 = *(_DWORD *)(v27 + 8);
                if (!v34)
                  goto LABEL_103;
                *(_DWORD *)(v27 + 8) = v34 - 1;
                goto LABEL_44;
              }
              v29 = *v9;
              if (!*v9)
                goto LABEL_44;
              v30 = *(_DWORD *)(v29 - 8);
              v31 = *(WTF::StringImpl **)(v27 + 184);
              v32 = *((_DWORD *)v31 + 4);
              v33 = v32 < 0x100 ? WTF::StringImpl::hashSlowCase(v31) : v32 >> 8;
              for (i = 0; ; v33 = ++i + v36)
              {
                v36 = v33 & v30;
                v37 = *(WTF **)(v29 + 16 * v36);
                if (v37 != (WTF *)-1)
                {
                  if (!v37)
                  {
                    v39 = *v9;
                    if (!*v9)
                      goto LABEL_44;
                    v40 = *(unsigned int *)(v39 - 4);
                    v38 = (WTF::StringImpl **)(v39 + 16 * v40);
                    goto LABEL_69;
                  }
                  if ((WTF::equal(v37, *(const WTF::StringImpl **)(v27 + 184), v6) & 1) != 0)
                    break;
                }
              }
              v38 = (WTF::StringImpl **)(v29 + 16 * v36);
              v39 = *v9;
              if (!*v9)
                goto LABEL_70;
              v40 = *(unsigned int *)(v39 - 4);
LABEL_69:
              v39 += 16 * v40;
LABEL_70:
              if ((WTF::StringImpl **)v39 == v38)
                goto LABEL_44;
              v41 = v38[1];
              v38[1] = 0;
              v42 = *v9;
              if (*v9)
              {
                v42 += 16 * *(unsigned int *)(v42 - 4);
                if ((WTF::StringImpl **)v42 == v38)
                  goto LABEL_89;
              }
              if ((WTF::StringImpl **)v42 == v38)
                goto LABEL_89;
              v43 = *v38;
              *v38 = (WTF::StringImpl *)-1;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, v5);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = v38[1];
              v38[1] = 0;
              if (v44)
              {
                WebResourceLoadScheduler::HostInformation::~HostInformation(v44, v5);
                if (!*(_DWORD *)(v45 + 8))
                {
                  WTF::fastFree((WTF *)v45, v5);
                  goto LABEL_81;
                }
                *(_QWORD *)(v45 + 192) = 0;
                *(_OWORD *)(v45 + 160) = 0u;
                *(_OWORD *)(v45 + 176) = 0u;
                *(_OWORD *)(v45 + 128) = 0u;
                *(_OWORD *)(v45 + 144) = 0u;
                *(_OWORD *)(v45 + 96) = 0u;
                *(_OWORD *)(v45 + 112) = 0u;
                *(_OWORD *)(v45 + 64) = 0u;
                *(_OWORD *)(v45 + 80) = 0u;
                *(_OWORD *)(v45 + 32) = 0u;
                *(_OWORD *)(v45 + 48) = 0u;
                *(_OWORD *)v45 = 0u;
                *(_OWORD *)(v45 + 16) = 0u;
                ++*(_DWORD *)(*v9 - 16);
                v46 = *v9;
                if (!*v9)
                {
LABEL_84:
                  v47 = -1;
LABEL_85:
                  *(_DWORD *)(v46 - 12) = v47;
                  v48 = *v9;
                  if (*v9)
                  {
                    v49 = 6 * *(_DWORD *)(v48 - 12);
                    v50 = *(_DWORD *)(v48 - 4);
                    if (v49 < v50 && v50 >= 9)
                      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v9, v50 >> 1);
                  }
LABEL_89:
                  if (v41)
                  {
                    WebResourceLoadScheduler::HostInformation::~HostInformation(v41, v5);
                    if (*((_DWORD *)v41 + 2))
                    {
                      *((_QWORD *)v41 + 24) = 0;
                      *((_OWORD *)v41 + 10) = 0u;
                      *((_OWORD *)v41 + 11) = 0u;
                      *((_OWORD *)v41 + 8) = 0u;
                      *((_OWORD *)v41 + 9) = 0u;
                      *((_OWORD *)v41 + 6) = 0u;
                      *((_OWORD *)v41 + 7) = 0u;
                      *((_OWORD *)v41 + 4) = 0u;
                      *((_OWORD *)v41 + 5) = 0u;
                      *((_OWORD *)v41 + 2) = 0u;
                      *((_OWORD *)v41 + 3) = 0u;
                      *(_OWORD *)v41 = 0u;
                      *((_OWORD *)v41 + 1) = 0u;
                    }
                    else
                    {
                      WTF::fastFree(v41, v5);
                    }
                  }
LABEL_44:
                  v26 = (WTF *)((char *)v26 + 8);
                  if (v26 == (WTF *)v25)
                  {
                    v51 = (uint64_t *)v17;
                    do
                    {
                      while (1)
                      {
                        result = *v51;
                        *v51 = 0;
                        if (result)
                        {
                          do
                          {
                            v52 = __ldaxr((unsigned int *)result);
                            v53 = v52 - 1;
                          }
                          while (__stlxr(v53, (unsigned int *)result));
                          if (!v53)
                            break;
                        }
                        if (++v51 == v25)
                          goto LABEL_99;
                      }
                      atomic_store(1u, (unsigned int *)result);
                      result = WTF::fastFree((WTF *)result, v5);
                      ++v51;
                    }
                    while (v51 != v25);
                    goto LABEL_99;
                  }
                  continue;
                }
              }
              else
              {
LABEL_81:
                ++*(_DWORD *)(*v9 - 16);
                v46 = *v9;
                if (!*v9)
                  goto LABEL_84;
              }
              break;
            }
            v47 = *(_DWORD *)(v46 - 12) - 1;
            goto LABEL_85;
          }
        }
        result = *v19;
        if (!*v19)
        {
          result = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)result = 1;
          *(_QWORD *)(result + 8) = v19;
          v20 = (unsigned int *)*v19;
          *v19 = result;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (v22)
            {
              result = *v19;
              if (!*v19)
                goto LABEL_32;
            }
            else
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v5);
              result = *v19;
              if (!*v19)
                goto LABEL_32;
            }
          }
        }
        do
          v23 = __ldaxr((unsigned int *)result);
        while (__stlxr(v23 + 1, (unsigned int *)result));
LABEL_32:
        *((_QWORD *)v17 + v18) = result;
        v24 = v13 + 2;
        v13 = v12;
        if (v24 != v12)
          goto LABEL_35;
        goto LABEL_24;
      }
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
LABEL_15:
    if (v8)
      goto LABEL_16;
    goto LABEL_21;
  }
  return result;
}

uint64_t WebResourceLoadScheduler::remove(WebResourceLoadScheduler *this, WebCore::ResourceLoader *a2)
{
  WTF::URL *v4;
  WebResourceLoadScheduler::HostInformation *v5;
  WebCore::ResourceRequestBase *v6;
  uint64_t result;
  WebCore::ResourceRequestBase *v8;
  WTF::URL *v9;
  WebResourceLoadScheduler::HostInformation *v10;
  int v11;
  int v12;
  WebResourceLoadScheduler::HostInformation *v13;
  WebResourceLoadScheduler::HostInformation *v14;

  v4 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceLoader *)((char *)a2 + 336));
  WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v14, (uint64_t)this, v4, 1);
  v5 = v14;
  if (v14)
    WebResourceLoadScheduler::HostInformation::remove((uint64_t *)v14, a2);
  v6 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 160))(a2);
  result = WebCore::ResourceRequestBase::isNull(v6);
  if ((result & 1) == 0)
  {
    v8 = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 160))(a2);
    v9 = (WTF::URL *)WebCore::ResourceRequestBase::url(v8);
    result = (uint64_t)WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v13, (uint64_t)this, v9, 1);
    v10 = v13;
    if (v13)
    {
      if (v13 != v5)
        result = (uint64_t)WebResourceLoadScheduler::HostInformation::remove((uint64_t *)v13, a2);
      v11 = *((_DWORD *)v10 + 2);
      if (!v11)
        goto LABEL_16;
      *((_DWORD *)v10 + 2) = v11 - 1;
    }
  }
  if ((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    result = WebCore::TimerBase::start();
  }
  if (v5)
  {
    v12 = *((_DWORD *)v5 + 2);
    if (v12)
    {
      *((_DWORD *)v5 + 2) = v12 - 1;
      return result;
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1D7FE09B4);
  }
  return result;
}

uint64_t *WebResourceLoadScheduler::HostInformation::remove(uint64_t *this, WebCore::ResourceLoader *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::ResourceLoader *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;

  v3 = this + 22;
  v2 = this[22];
  if (v2)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::ResourceLoader **)(v2 + 8 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::ResourceLoader **)(v2 + 8 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_6;
      }
      goto LABEL_7;
    }
LABEL_6:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      v25 = 8 * v8;
      this = *(uint64_t **)(v2 + v25);
      *(_QWORD *)(v2 + v25) = -1;
      if (this)
      {
        if (*((_DWORD *)this + 4) == 1)
        {
          this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
          ++*(_DWORD *)(*v3 - 16);
          v26 = *v3;
          if (*v3)
          {
LABEL_48:
            --*(_DWORD *)(v26 - 12);
            v27 = *v3;
            if (!*v3)
              return this;
            goto LABEL_54;
          }
LABEL_53:
          *(_DWORD *)(v26 - 12) = -1;
          v27 = *v3;
          if (!*v3)
            return this;
LABEL_54:
          v28 = 6 * *(_DWORD *)(v27 - 12);
          v29 = *(_DWORD *)(v27 - 4);
          if (v28 < v29 && v29 >= 9)
            return WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(v3, v29 >> 1, 0);
          return this;
        }
        --*((_DWORD *)this + 4);
      }
      ++*(_DWORD *)(*v3 - 16);
      v26 = *v3;
      if (*v3)
        goto LABEL_48;
      goto LABEL_53;
    }
  }
LABEL_7:
  v11 = this[2];
  v12 = this[3];
  v13 = (unint64_t *)(this + 2);
  if (v11 != v12)
  {
    v14 = this[4];
    v15 = this[2];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      v16 = *((unsigned int *)this + 10);
      v15 += v16 + 1;
      do
        v15 -= v16;
      while (v15 >= v16);
      if (v12 == v15)
        goto LABEL_13;
    }
LABEL_38:
    *(_QWORD *)(v14 + 8 * v15) = 0;
    if (a2)
    {
      if (*((_DWORD *)a2 + 4) == 1)
      {
        (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 8))(a2);
        v11 = *v13;
        if (*v13 > v15)
          goto LABEL_42;
LABEL_51:
        this = (uint64_t *)memmove((void *)(v14 + 8 * v11 + 8), (const void *)(v14 + 8 * v11), 8 * v15 - 8 * v11);
        *v13 = (*v13 + 1) % *((unsigned int *)v13 + 6);
        return this;
      }
      --*((_DWORD *)a2 + 4);
    }
    if (v11 > v15)
    {
LABEL_42:
      this = (uint64_t *)memmove((void *)(v14 + 8 * v15), (const void *)(v14 + 8 * v15 + 8), 8 * v13[1] - (8 * v15 + 8));
      v13[1] = (v13[1] + *((unsigned int *)v13 + 6) - 1) % *((unsigned int *)v13 + 6);
      return this;
    }
    goto LABEL_51;
  }
LABEL_13:
  v11 = this[6];
  v17 = this[7];
  v13 = (unint64_t *)(this + 6);
  if (v11 != v17)
  {
    v14 = this[8];
    v15 = this[6];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      v18 = *((unsigned int *)this + 18);
      v15 += v18 + 1;
      do
        v15 -= v18;
      while (v15 >= v18);
      if (v17 == v15)
        goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_19:
  v11 = this[10];
  v19 = this[11];
  v13 = (unint64_t *)(this + 10);
  if (v11 != v19)
  {
    v14 = this[12];
    v15 = this[10];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      v20 = *((unsigned int *)this + 26);
      v15 += v20 + 1;
      do
        v15 -= v20;
      while (v15 >= v20);
      if (v19 == v15)
        goto LABEL_25;
    }
    goto LABEL_38;
  }
LABEL_25:
  v11 = this[14];
  v21 = this[15];
  v13 = (unint64_t *)(this + 14);
  if (v11 != v21)
  {
    v14 = this[16];
    v15 = this[14];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      v22 = *((unsigned int *)this + 34);
      v15 += v22 + 1;
      do
        v15 -= v22;
      while (v15 >= v22);
      if (v21 == v15)
        goto LABEL_31;
    }
    goto LABEL_38;
  }
LABEL_31:
  v11 = this[18];
  v23 = this[19];
  v13 = (unint64_t *)(this + 18);
  if (v11 != v23)
  {
    v14 = this[20];
    v15 = this[18];
    while (*(WebCore::ResourceLoader **)(v14 + 8 * v15) != a2)
    {
      v24 = *((unsigned int *)this + 42);
      v15 += v24 + 1;
      do
        v15 -= v24;
      while (v15 >= v24);
      if (v23 == v15)
        return this;
    }
    goto LABEL_38;
  }
  return this;
}

uint64_t WebResourceLoadScheduler::isResourceLoadFinished(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::URL *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 384);
  if (!v4)
  {
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v6 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v4 + 336));
  WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v11, a1, v6, 1);
  v7 = v11;
  if (!v11)
  {
LABEL_5:
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v9 + 16))(v9, v7 == 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v8 = *(_DWORD *)(v11 + 8);
  if (v8)
  {
    *(_DWORD *)(v11 + 8) = v8 - 1;
    goto LABEL_5;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

void WebResourceLoadScheduler::setDefersLoading(WebResourceLoadScheduler *this, WebCore::ResourceLoader *a2, char a3)
{
  char *v4;
  StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  StringImpl *v18;
  StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _BYTE v40[192];
  uint64_t v41;

  if ((a3 & 1) == 0)
  {
    v4 = (char *)a2 + 768;
    if ((WebCore::ResourceRequestBase::isNull((WebCore::ResourceLoader *)((char *)a2 + 768)) & 1) == 0)
    {
      v20 = 0;
      WTF::URL::invalidate((WTF::URL *)&v20);
      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v40, (uint64_t)&v20);
      v6 = v20;
      v20 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v5);
        else
          *(_DWORD *)v6 -= 2;
      }
      v41 = 0;
      v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 96);
      *((_QWORD *)a2 + 96) = 0;
      v20 = v7;
      v8 = *(_OWORD *)((char *)a2 + 792);
      v21 = *(_OWORD *)((char *)a2 + 776);
      v22 = v8;
      *((_DWORD *)a2 + 194) = v21 & 0xFFFFFFFE;
      v9 = *((_QWORD *)a2 + 101);
      *((_QWORD *)a2 + 101) = 0;
      v23 = v9;
      v10 = *((_OWORD *)a2 + 52);
      v24 = *((_OWORD *)a2 + 51);
      v25 = v10;
      *((_DWORD *)a2 + 204) = v24 & 0xFFFFFFFE;
      v26 = *((_QWORD *)a2 + 106);
      v11 = *(_OWORD *)((char *)a2 + 856);
      *(_OWORD *)((char *)a2 + 856) = 0u;
      v27 = v11;
      *(_QWORD *)&v11 = *((_QWORD *)a2 + 109);
      *((_QWORD *)a2 + 109) = 0;
      v28 = v11;
      v12 = *((_QWORD *)a2 + 110);
      *((_QWORD *)a2 + 110) = 0;
      v29 = v12;
      *(_QWORD *)&v11 = *((_QWORD *)a2 + 111);
      *((_QWORD *)a2 + 111) = 0;
      v30 = v11;
      v13 = *((_QWORD *)a2 + 112);
      *((_QWORD *)a2 + 112) = 0;
      v31 = v13;
      *(_QWORD *)&v11 = *((_QWORD *)a2 + 113);
      *((_QWORD *)a2 + 113) = 0;
      v32 = v11;
      LODWORD(v13) = *((_DWORD *)a2 + 228);
      v34 = *((_BYTE *)a2 + 916);
      v33 = v13;
      v14 = *(_OWORD *)((char *)a2 + 920);
      *(_OWORD *)((char *)a2 + 920) = 0u;
      v35 = v14;
      v15 = *((_QWORD *)a2 + 117);
      *((_QWORD *)a2 + 117) = 0;
      v16 = *((_QWORD *)a2 + 118);
      v38 = *((_BYTE *)a2 + 952);
      v36 = v15;
      v37 = v16;
      v17 = *((_QWORD *)a2 + 120);
      *((_QWORD *)a2 + 120) = 0;
      v39 = v17;
      WebCore::ResourceRequest::operator=((uint64_t)v4, (uint64_t)v40);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v40, v18);
      WebCore::ResourceRequest::operator=((uint64_t)a2 + 336, (uint64_t)&v20);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v20, v19);
      WebCore::ResourceLoader::start(a2);
    }
  }
}

uint64_t WebResourceLoadScheduler::crossOriginRedirectReceived(WebResourceLoadScheduler *this, WebCore::ResourceLoader *a2, const WTF::URL *a3)
{
  WTF::URL *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[6];
  WebCore::ResourceLoader *v16;

  v6 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceLoader *)((char *)a2 + 336));
  result = (uint64_t)WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v14, (uint64_t)this, v6, 1);
  v8 = v14;
  if (v14)
  {
    WebResourceLoadScheduler::hostForURL((WTF::StringImpl *)&v13, (uint64_t)this, a3, 0);
    v9 = v13;
    result = WTF::equal(*(WTF **)(v8 + 184), *(const WTF::StringImpl **)(v13 + 184), v10);
    if ((result & 1) == 0)
    {
      if (a2)
        ++*((_DWORD *)a2 + 4);
      v16 = a2;
      WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::add(v15, (uint64_t *)(v9 + 176), &v16);
      if (v16)
      {
        if (*((_DWORD *)v16 + 4) == 1)
          (*(void (**)(void))(*(_QWORD *)v16 + 8))();
        else
          --*((_DWORD *)v16 + 4);
      }
      result = (uint64_t)WebResourceLoadScheduler::HostInformation::remove((uint64_t *)v8, a2);
    }
    v11 = *(_DWORD *)(v9 + 8);
    if (!v11 || (*(_DWORD *)(v9 + 8) = v11 - 1, (v12 = *(_DWORD *)(v8 + 8)) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1D7FE10C8);
    }
    *(_DWORD *)(v8 + 8) = v12 - 1;
  }
  return result;
}

uint64_t WebResourceLoadScheduler::suspendPendingRequests(uint64_t this)
{
  ++*(_DWORD *)(this + 80);
  return this;
}

uint64_t WebResourceLoadScheduler::resumePendingRequests(uint64_t this)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_DWORD *)(this + 80) - 1;
  *(_DWORD *)(this + 80) = v1;
  if (!v1)
  {
    if ((v2 = *(_QWORD *)(this + 8)) != 0 && *(_DWORD *)(v2 - 12)
      || (v3 = *(_QWORD **)(this + 16), (v4 = v3[22]) != 0) && *(_DWORD *)(v4 - 12)
      || v3[2] != v3[3]
      || v3[6] != v3[7]
      || v3[10] != v3[11]
      || v3[14] != v3[15]
      || v3[18] != v3[19])
    {
      if ((*(_QWORD *)(this + 56) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(this + 56) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        return WebCore::TimerBase::start();
      }
    }
  }
  return this;
}

void WebResourceLoadScheduler::HostInformation::~HostInformation(WebResourceLoadScheduler::HostInformation *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD **v4;
  char *v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD **v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (!v3)
  {
LABEL_4:
    v5 = (char *)this + 176;
    v4 = (_DWORD **)*((_QWORD *)this + 22);
    if (!v4)
      goto LABEL_16;
LABEL_7:
    v6 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v6)
    {
      v7 = v4;
      do
      {
        v8 = *v7;
        if (*v7 != (_DWORD *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (v8[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
            else
              --v8[4];
          }
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v4 - 2), a2);
    goto LABEL_16;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v5 = (char *)this + 176;
  v4 = (_DWORD **)*((_QWORD *)this + 22);
  if (v4)
    goto LABEL_7;
LABEL_16:
  v9 = v5;
  do
  {
    v10 = *((_QWORD *)v9 - 4);
    v11 = *((_QWORD *)v9 - 3);
    v9 -= 32;
    v12 = (WTF *)*((_QWORD *)v9 + 2);
    if (v10 <= v11)
    {
      if (v10 == v11)
        goto LABEL_36;
      v15 = 8 * v10;
      v16 = (_DWORD **)((char *)v12 + v15);
      v17 = 8 * v11 - v15;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
        {
          if (v18[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          else
            --v18[4];
        }
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    else
    {
      if (v11)
      {
        v13 = 8 * v11;
        do
        {
          v14 = *(_DWORD **)v12;
          *(_QWORD *)v12 = 0;
          if (v14)
          {
            if (v14[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
            else
              --v14[4];
          }
          v12 = (WTF *)((char *)v12 + 8);
          v13 -= 8;
        }
        while (v13);
        v12 = (WTF *)*((_QWORD *)v5 - 2);
        v10 = *((_QWORD *)v5 - 4);
      }
      v19 = *((unsigned int *)v5 - 2);
      if (v10 != v19)
      {
        v20 = 8 * v10;
        v21 = (_DWORD **)((char *)v12 + v20);
        v22 = 8 * v19 - v20;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (v23[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            else
              --v23[4];
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
    }
    v12 = (WTF *)*((_QWORD *)v5 - 2);
LABEL_36:
    if (v12)
    {
      *((_QWORD *)v5 - 2) = 0;
      *((_DWORD *)v5 - 2) = 0;
      WTF::fastFree(v12, a2);
    }
    v5 = v9;
  }
  while (v9 != (char *)this + 16);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v24 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WebResourceLoadScheduler::startPingLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  const void *v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v23;

  v11 = WTF::fastMalloc((WTF *)0x120);
  WebCore::FrameLoader::networkingContext(*(WebCore::FrameLoader **)(a2 + 280));
  v12 = *(_BYTE *)(a5 + 2) != 0;
  v13 = *(_BYTE *)(a5 + 4) == 0;
  v14 = *a7;
  *a7 = 0;
  WebCore::ResourceHandleClient::ResourceHandleClient((WebCore::ResourceHandleClient *)v11);
  *(_QWORD *)v11 = off_1E9D6A918;
  *(_QWORD *)(v11 + 8) = 0;
  WebCore::ResourceRequestBase::RequestData::RequestData(v11 + 16, a3);
  v15 = *(_DWORD **)(a3 + 152);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(v11 + 168) = v15;
  v16 = *(_DWORD **)(a3 + 160);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(v11 + 176) = v16;
  v17 = *(_DWORD **)(a3 + 168);
  if (v17)
    ++*v17;
  *(_QWORD *)(v11 + 184) = v17;
  v18 = *(_QWORD *)(a3 + 176);
  *(_BYTE *)(v11 + 200) = *(_BYTE *)(a3 + 184);
  *(_QWORD *)(v11 + 192) = v18;
  v19 = *(const void **)(a3 + 192);
  *(_QWORD *)(v11 + 208) = v19;
  if (v19)
    CFRetain(v19);
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v11 + 216));
  *(_QWORD *)(v11 + 216) = &unk_1E9D6A108;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v20 = off_1E9D6A9B8;
  v20[1] = PingHandle::timeoutTimerFired;
  v20[2] = 0;
  v20[3] = v11;
  *(_QWORD *)(v11 + 264) = v20;
  *(_BYTE *)(v11 + 272) = v12;
  *(_BYTE *)(v11 + 273) = v13;
  *(_QWORD *)(v11 + 280) = v14;
  WebCore::ResourceHandle::create();
  v21 = *(_DWORD **)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v23;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 48))(v21);
    else
      --v21[2];
  }
  return WebCore::TimerBase::start();
}

uint64_t WebResourceLoadScheduler::isOnLine(WebResourceLoadScheduler *this)
{
  WebCore::NetworkStateNotifier *v1;

  v1 = (WebCore::NetworkStateNotifier *)WebCore::NetworkStateNotifier::singleton(this);
  return WebCore::NetworkStateNotifier::onLine(v1);
}

uint64_t WebResourceLoadScheduler::addOnlineStateChangeListener(WebCore::NetworkStateNotifier *a1)
{
  WebCore::NetworkStateNotifier::singleton(a1);
  return WebCore::NetworkStateNotifier::addListener();
}

uint64_t WebCore::WebSocketChannel::resumeTimerFired(uint64_t this, WebCore::SocketStreamHandle *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  void *v5;

  v2 = this;
  ++*(_DWORD *)(this + 8);
  while (!*(_BYTE *)(v2 + 152))
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (!v3)
      break;
    if (!*(_QWORD *)(v3 + 8) || !*(_DWORD *)(v2 + 92))
      goto LABEL_9;
    this = WebCore::WebSocketChannel::processBuffer((WebCore::WebSocketChannel *)v2);
    if ((this & 1) == 0)
    {
      if (*(_BYTE *)(v2 + 152))
        break;
      v3 = *(_QWORD *)(v2 + 56);
      if (!v3)
        break;
LABEL_9:
      if (*(_QWORD *)(v3 + 8) && *(_BYTE *)(v2 + 216) && *(_QWORD *)(v2 + 72))
        this = WebCore::WebSocketChannel::didCloseSocketStream((WebCore::WebSocketChannel *)v2, a2);
      break;
    }
  }
  if (*(_DWORD *)(v2 + 8) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v2, a2);
    return WTF::fastFree(v4, v5);
  }
  else
  {
    --*(_DWORD *)(v2 + 8);
  }
  return this;
}

uint64_t WebCore::WebSocketChannel::closingTimerFired(uint64_t this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(unsigned int **)(this + 72);
  if (v1)
  {
    v2 = v1 + 2;
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 40))(v1);
    v1[16] = 3;
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E9D6AA68;
      v6[1] = v2;
      v7 = (uint64_t)v6;
      WTF::ensureOnMainThread();
      this = v7;
      if (v7)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return this;
}

void WebCore::WebSocketChannel::~WebSocketChannel(WebCore::WebSocketChannel *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::WebSocketInflater *v7;
  WTF *v8;
  void *v9;
  WebCore::WebSocketDeflater *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  WTF *v41;
  _QWORD *v42;

  v3 = (unsigned int *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
  {
LABEL_5:
    v7 = (WebCore::WebSocketInflater *)*((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = 0;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  atomic_store(1u, v3 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
  v7 = (WebCore::WebSocketInflater *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v7)
  {
LABEL_6:
    WebCore::WebSocketInflater::~WebSocketInflater(v7);
    WTF::fastFree(v8, v9);
  }
LABEL_7:
  v10 = (WebCore::WebSocketDeflater *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v10)
  {
    WebCore::WebSocketDeflater::~WebSocketDeflater(v10);
    WTF::fastFree(v11, v12);
  }
  v13 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13);
  WTF::Deque<std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>,0ul>::destroyAll((uint64_t *)this + 34, a2);
  v15 = (WTF *)*((_QWORD *)this + 36);
  if (v15)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v15, v14);
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (!v16)
  {
LABEL_16:
    v17 = (WTF *)*((_QWORD *)this + 30);
    if (!v17)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v16, v14);
  v17 = (WTF *)*((_QWORD *)this + 30);
  if (v17)
  {
LABEL_17:
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v17, v14);
  }
LABEL_18:
  *((_QWORD *)this + 20) = &unk_1E9D6A108;
  v18 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  WebCore::TimerBase::~TimerBase((WebCore::WebSocketChannel *)((char *)this + 160));
  *((_QWORD *)this + 12) = &unk_1E9D6A108;
  v19 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  WebCore::TimerBase::~TimerBase((WebCore::WebSocketChannel *)((char *)this + 96));
  v21 = (WTF *)*((_QWORD *)this + 10);
  if (v21)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v21, v20);
  }
  v22 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v22)
  {
    v23 = (unsigned int *)(v22 + 8);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = off_1E9D6AA68;
      v39[1] = v23;
      v42 = v39;
      WTF::ensureOnMainThread();
      if (v42)
        (*(void (**)(_QWORD *))(*v42 + 8))(v42);
    }
  }
  v26 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v26)
  {
    v27 = (WTF *)MEMORY[0x1D82A58C4]();
    WTF::fastFree(v27, v28);
  }
  v29 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v29)
    goto LABEL_33;
  do
  {
    v30 = __ldaxr(v29);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v29));
  if (!v31)
  {
    atomic_store(1u, v29);
    WTF::fastFree((WTF *)v29, v20);
    v32 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (!v32)
      goto LABEL_36;
  }
  else
  {
LABEL_33:
    v32 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (!v32)
      goto LABEL_36;
  }
  do
  {
    v33 = __ldaxr((unsigned int *)v32);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, (unsigned int *)v32));
  if (!v34)
  {
    atomic_store(1u, (unsigned int *)v32);
    v40 = *(unsigned int *)(v32 + 28);
    if ((_DWORD)v40)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v40));
    v41 = *(WTF **)(v32 + 16);
    if (v41)
    {
      *(_QWORD *)(v32 + 16) = 0;
      *(_DWORD *)(v32 + 24) = 0;
      WTF::fastFree(v41, v20);
    }
    WTF::fastFree((WTF *)v32, v20);
  }
LABEL_36:
  v35 = *((_QWORD *)this + 5);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 0;
    v36 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v36)
    {
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v20);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebSocketChannel::~WebSocketChannel(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::WebSocketChannel::~WebSocketChannel(WebCore::WebSocketChannel *this, void *a2)
{
  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)((char *)this - 16), a2);
}

{
  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

_BYTE *WebCore::WebSocketChannel::connect(WebCore::WebSocketChannel *this, Document *a2, const WTF::String *a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::SecurityOrigin *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  StringImpl *v14;
  int v15;
  uint64_t v16;
  WebCore::WebSocketHandshake *v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Page *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  _DWORD *v33;
  WTF::URL *v34;
  __int128 v35;
  unsigned int *v36;
  unsigned int v37;
  _BYTE *result;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  WTF::StringImpl *v43;
  _BYTE *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  size_t v47;
  StringImpl *v48;
  WTF::StringImpl *v49;
  CFTypeRef v50;
  const void *v51;
  CFTypeRef v52;
  unsigned int v53;
  _QWORD *v54;
  CFTypeRef v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  char v68;
  char v69;
  CFTypeRef cf;
  WTF::StringImpl *v71[5];

  v5 = (uint64_t)this;
  WebCore::ThreadableWebSocketChannel::validateURL(*(WebCore::ThreadableWebSocketChannel **)(*((_QWORD *)this + 6) + 8), a2, a3);
  if (!v69)
    return 0;
  if ((WTF::equal(v67, *(const WTF::StringImpl **)a2, v6) & 1) == 0)
  {
    v7 = *(_QWORD *)(v5 + 56);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    }
  }
  *(_BYTE *)(v5 + 155) = v68;
  v9 = *(_QWORD *)(v5 + 48);
  if (v9)
  {
    WebCore::Document::userAgent(*(WebCore::Document **)(v9 + 8), (const WTF::URL *)(*(_QWORD *)(v9 + 8) + 736));
    v10 = *(_QWORD *)(v5 + 48);
    if (!v10)
      goto LABEL_9;
    goto LABEL_8;
  }
  WebCore::Document::userAgent(0, (const WTF::URL *)0x2E0);
  v10 = *(_QWORD *)(v5 + 48);
  if (v10)
LABEL_8:
    v10 = *(_QWORD *)(v10 + 8);
LABEL_9:
  v11 = (WebCore::SecurityOrigin *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v10 + 192));
  WebCore::SecurityOrigin::toString(v11);
  v12 = *(_QWORD *)(v5 + 48);
  if (v12)
  {
    v13 = (unsigned __int8 *)WebCore::Document::loader(*(WebCore::Document **)(v12 + 8));
    if (v13)
      goto LABEL_11;
  }
  else
  {
    v13 = (unsigned __int8 *)WebCore::Document::loader(0);
    if (v13)
    {
LABEL_11:
      v15 = v13[3533];
      if (!v69)
        goto LABEL_59;
      goto LABEL_18;
    }
  }
  v15 = 1;
  if (!v69)
    goto LABEL_59;
LABEL_18:
  v16 = WTF::fastMalloc((WTF *)0x198);
  v17 = (WebCore::WebSocketHandshake *)MEMORY[0x1D82A58B8](v16, &v67, a3, &v66, &v65, *(unsigned __int8 *)(v5 + 155), v15 != 0);
  v18 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = v17;
  if (v18)
  {
    v19 = (WTF *)MEMORY[0x1D82A58C4](v18);
    WTF::fastFree(v19, v20);
    v17 = *(WebCore::WebSocketHandshake **)(v5 + 64);
  }
  WebCore::WebSocketHandshake::reset(v17);
  WebCore::WebSocketDeflateFramer::createExtensionProcessor((WebCore::WebSocketDeflateFramer *)(v5 + 328));
  WebCore::WebSocketHandshake::addExtensionProcessor();
  if (v64)
    (*(void (**)())(*(_QWORD *)v64 + 8))();
  v14 = *(StringImpl **)(v5 + 224);
  if (v14)
  {
    v21 = *(_QWORD *)(v5 + 48);
    if (v21)
    {
      v13 = *(unsigned __int8 **)(v21 + 8);
      if (v69)
      {
LABEL_25:
        WebCore::LegacyWebSocketInspectorInstrumentation::didCreateWebSocket();
        goto LABEL_26;
      }
    }
    else
    {
      v13 = 0;
      if (v69)
        goto LABEL_25;
    }
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_26:
  v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
  v23 = *(_QWORD *)(v22 + 528);
  if (!v23
    || (v24 = *(_QWORD *)(v23 + 8)) == 0
    || (v25 = *(_QWORD *)(v24 + 24)) == 0
    || (v26 = *(WebCore::Page **)(v25 + 8)) == 0)
  {
    v5 = 0;
    v45 = v65;
    v65 = 0;
    if (!v45)
      goto LABEL_47;
    goto LABEL_45;
  }
  ++*(_DWORD *)(v5 + 8);
  WebCore::ScriptExecutionContext::domainForCachePartition((WebCore::ScriptExecutionContext *)(v22 + 192));
  v27 = WebCore::WebSocketHandshake::url(*(WebCore::WebSocketHandshake **)(v5 + 64));
  v28 = WebCore::Page::sessionID(v26);
  v29 = WebCore::FrameLoader::networkingContext(*(WebCore::FrameLoader **)(v24 + 280));
  v30 = WTF::fastMalloc((WTF *)0xD8);
  v31 = v30;
  *(_DWORD *)(v30 + 8) = 1;
  v32 = (unsigned int *)(v30 + 8);
  *(_QWORD *)v30 = off_1E9D6A538;
  v33 = *(_DWORD **)v27;
  if (*(_QWORD *)v27)
    *v33 += 2;
  *(_QWORD *)(v30 + 16) = v33;
  v34 = (WTF::URL *)(v30 + 16);
  v35 = *(_OWORD *)(v27 + 8);
  *(_OWORD *)(v31 + 40) = *(_OWORD *)(v27 + 24);
  *(_OWORD *)(v31 + 24) = v35;
  *(_QWORD *)(v31 + 56) = v5;
  *(_DWORD *)(v31 + 64) = 0;
  *(_QWORD *)v31 = off_1E9D6A578;
  *(_QWORD *)(v31 + 128) = 0;
  *(_QWORD *)(v31 + 136) = 0;
  *(_QWORD *)(v31 + 120) = 0;
  *(_OWORD *)(v31 + 72) = 0u;
  *(_OWORD *)(v31 + 88) = 0u;
  *(_OWORD *)(v31 + 98) = 0u;
  if (v63)
    *(_DWORD *)v63 += 2;
  *(_QWORD *)(v31 + 144) = v63;
  *(_QWORD *)(v31 + 152) = 0;
  if (v29)
  {
    v36 = (unsigned int *)(v29 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  *(_QWORD *)(v31 + 160) = v29;
  *(_OWORD *)(v31 + 168) = 0u;
  *(_OWORD *)(v31 + 184) = 0u;
  *(_OWORD *)(v31 + 200) = 0u;
  result = (_BYTE *)WTF::URL::host(v34);
  v40 = v39;
  if ((v39 & 0x80000000) == 0)
  {
    v41 = (v39 + 8);
    if (!__OFADD__((_DWORD)v39, 8))
    {
      v42 = result;
      if ((v39 & 0xFF00000000) != 0)
      {
        result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v41 + 20));
        v43 = v71[0];
        if (v71[0])
        {
          *(_DWORD *)v71[0] = 2;
          *((_DWORD *)v43 + 1) = v41;
          *(_QWORD *)((char *)v43 + 20) = 0x2F2F3A7370747468;
          *((_QWORD *)v43 + 1) = (char *)v43 + 20;
          *((_DWORD *)v43 + 4) = 4;
          if (!v40)
            goto LABEL_70;
          v44 = (char *)v43 + 28;
          if (v40 == 1)
          {
            *v44 = *v42;
            goto LABEL_70;
          }
          v47 = v40;
          goto LABEL_69;
        }
      }
      else if (v41 <= 0x7FFFFFEF)
      {
        result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * v41 + 20));
        v43 = v71[0];
        if (v71[0])
        {
          *(_DWORD *)v71[0] = 2;
          *((_DWORD *)v43 + 1) = v41;
          *(_OWORD *)((char *)v43 + 20) = xmmword_1D80FBAC0;
          *((_QWORD *)v43 + 1) = (char *)v43 + 20;
          *((_DWORD *)v43 + 4) = 0;
          if (!v40)
            goto LABEL_70;
          v44 = (char *)v43 + 36;
          if (v40 == 1)
          {
            *(_WORD *)v44 = *(_WORD *)v42;
            goto LABEL_70;
          }
          v47 = 2 * v40;
LABEL_69:
          memcpy(v44, v42, v47);
LABEL_70:
          cf = v43;
          MEMORY[0x1D82A38E4](v71, &cf, 0);
          v49 = (WTF::StringImpl *)cf;
          cf = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v48);
            else
              *(_DWORD *)v49 -= 2;
          }
          WTF::URL::createCFURL((WTF::URL *)v71);
          v50 = cf;
          cf = 0;
          v51 = *(const void **)(v31 + 136);
          *(_QWORD *)(v31 + 136) = v50;
          if (v51)
          {
            CFRelease(v51);
            v52 = cf;
            cf = 0;
            if (v52)
              CFRelease(v52);
          }
          if (WTF::URL::protocolIs() && v28 >= -1 && _CFNetworkIsKnownHSTSHostWithSession())
          {
            do
              v53 = __ldaxr(v32);
            while (__stlxr(v53 + 1, v32));
            v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v54 = &off_1E9D6AA40;
            v54[1] = v31;
            v54[2] = v31;
            cf = v54;
            WTF::callOnMainThread();
            v55 = cf;
            cf = 0;
            if (v55)
              (*(void (**)(CFTypeRef))(*(_QWORD *)v55 + 8))(v55);
          }
          else
          {
            WebCore::SocketStreamHandleImpl::createStreams((WebCore::SocketStreamHandleImpl *)v31);
            if (*(_QWORD *)(v31 + 120))
              WebCore::SocketStreamHandleImpl::scheduleStreams((CFRunLoopSourceRef *)v31);
          }
          v56 = v71[0];
          v71[0] = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
            {
              WTF::StringImpl::destroy(v56, v14);
              v57 = *(_QWORD *)(v5 + 72);
              *(_QWORD *)(v5 + 72) = v31;
              if (!v57)
              {
LABEL_94:
                if (v63)
                {
                  if (*(_DWORD *)v63 == 2)
                  {
                    WTF::StringImpl::destroy(v63, v14);
                    v5 = 1;
                    v45 = v65;
                    v65 = 0;
                    if (!v45)
                      goto LABEL_47;
                    goto LABEL_45;
                  }
                  *(_DWORD *)v63 -= 2;
                }
                v5 = 1;
                v45 = v65;
                v65 = 0;
                if (!v45)
                  goto LABEL_47;
LABEL_45:
                if (*(_DWORD *)v45 == 2)
                {
                  WTF::StringImpl::destroy(v45, v14);
                  v46 = v66;
                  v66 = 0;
                  if (!v46)
                    goto LABEL_52;
LABEL_50:
                  if (*(_DWORD *)v46 == 2)
                  {
                    WTF::StringImpl::destroy(v46, v14);
                    if (!v69)
                      return (_BYTE *)v5;
                    goto LABEL_55;
                  }
                  *(_DWORD *)v46 -= 2;
LABEL_52:
                  if (!v69)
                    return (_BYTE *)v5;
LABEL_55:
                  v13 = (unsigned __int8 *)v67;
                  v67 = 0;
                  if (v13)
                  {
                    if (*(_DWORD *)v13 == 2)
                    {
LABEL_60:
                      WTF::StringImpl::destroy((WTF::StringImpl *)v13, v14);
                      return (_BYTE *)v5;
                    }
                    *(_DWORD *)v13 -= 2;
                  }
                  return (_BYTE *)v5;
                }
                *(_DWORD *)v45 -= 2;
LABEL_47:
                v46 = v66;
                v66 = 0;
                if (!v46)
                  goto LABEL_52;
                goto LABEL_50;
              }
LABEL_91:
              v58 = (unsigned int *)(v57 + 8);
              do
              {
                v59 = __ldaxr(v58);
                v60 = v59 - 1;
              }
              while (__stlxr(v60, v58));
              if (!v60)
              {
                atomic_store(1u, v58);
                v61 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v61 = off_1E9D6AA68;
                *((_QWORD *)v61 + 1) = v58;
                v71[0] = v61;
                WTF::ensureOnMainThread();
                v62 = v71[0];
                v71[0] = 0;
                if (v62)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v62 + 8))(v62);
              }
              goto LABEL_94;
            }
            *(_DWORD *)v56 -= 2;
          }
          v57 = *(_QWORD *)(v5 + 72);
          *(_QWORD *)(v5 + 72) = v31;
          if (!v57)
            goto LABEL_94;
          goto LABEL_91;
        }
      }
    }
  }
  __break(0xC471u);
  return result;
}

_BYTE *`non-virtual thunk to'WebCore::WebSocketChannel::connect(WebCore::WebSocketChannel *this, Document *a2, const WTF::String *a3)
{
  return WebCore::WebSocketChannel::connect((WebCore::WebSocketChannel *)((char *)this - 16), a2, a3);
}

WebCore::WebSocketHandshake *WebCore::WebSocketChannel::subprotocol@<X0>(WebCore::WebSocketChannel *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::WebSocketHandshake *result;
  _DWORD *v5;
  _DWORD *v6;

  result = (WebCore::WebSocketHandshake *)*((_QWORD *)this + 8);
  if (result
    && (result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::mode(result), (_DWORD)result == 3)
    && (result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::serverWebSocketProtocol(*((WebCore::WebSocketHandshake **)this + 8)),
        (v5 = v6) != 0)
    || (v5 = (_DWORD *)*MEMORY[0x1E0CBF738]) == 0)
  {
    *a2 = v5;
  }
  else
  {
    *v5 += 2;
    *a2 = v5;
  }
  return result;
}

WebCore::WebSocketHandshake *`non-virtual thunk to'WebCore::WebSocketChannel::subprotocol@<X0>(WebCore::WebSocketChannel *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::WebSocketHandshake *result;
  _DWORD *v5;
  _DWORD *v6;

  result = (WebCore::WebSocketHandshake *)*((_QWORD *)this + 6);
  if (result
    && (result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::mode(result), (_DWORD)result == 3)
    && (result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::serverWebSocketProtocol(*((WebCore::WebSocketHandshake **)this + 6)),
        (v5 = v6) != 0)
    || (v5 = (_DWORD *)*MEMORY[0x1E0CBF738]) == 0)
  {
    *a2 = v5;
  }
  else
  {
    *v5 += 2;
    *a2 = v5;
  }
  return result;
}

WebCore::WebSocketHandshake *WebCore::WebSocketChannel::extensions@<X0>(WebCore::WebSocketChannel *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::WebSocketHandshake *result;
  _DWORD *v5;
  _DWORD *v6;

  result = (WebCore::WebSocketHandshake *)*((_QWORD *)this + 8);
  if (result
    && (result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::mode(result), (_DWORD)result == 3)
    && (result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::acceptedExtensions(*((WebCore::WebSocketHandshake **)this
                                                                                                + 8)),
        (v5 = v6) != 0)
    || (v5 = (_DWORD *)*MEMORY[0x1E0CBF738]) == 0)
  {
    *a2 = v5;
  }
  else
  {
    *v5 += 2;
    *a2 = v5;
  }
  return result;
}

WebCore::WebSocketHandshake *`non-virtual thunk to'WebCore::WebSocketChannel::extensions@<X0>(WebCore::WebSocketChannel *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::WebSocketHandshake *result;
  _DWORD *v5;
  _DWORD *v6;

  result = (WebCore::WebSocketHandshake *)*((_QWORD *)this + 6);
  if (result
    && (result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::mode(result), (_DWORD)result == 3)
    && (result = (WebCore::WebSocketHandshake *)WebCore::WebSocketHandshake::acceptedExtensions(*((WebCore::WebSocketHandshake **)this
                                                                                                + 6)),
        (v5 = v6) != 0)
    || (v5 = (_DWORD *)*MEMORY[0x1E0CBF738]) == 0)
  {
    *a2 = v5;
  }
  else
  {
    *v5 += 2;
    *a2 = v5;
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::send(uint64_t a1, uint64_t *a2)
{
  void *v4;

  if (!*(_DWORD *)(a1 + 304))
  {
    WebCore::WebSocketChannel::enqueueTextFrame(a1, a2);
    WebCore::WebSocketChannel::processOutgoingFrameQueue(a1, v4);
  }
  return 0;
}

uint64_t WebCore::WebSocketChannel::enqueueTextFrame(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t result;
  void *v9;
  WTF *v10;
  _DWORD *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;

  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 8) = 0u;
  v15 = (WTF *)v5;
  *(_QWORD *)v5 = 1;
  v6 = *a2;
  *a2 = 0;
  v7 = *(WTF **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v6;
  if (!v7)
  {
LABEL_4:
    result = WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>(a1 + 272, (uint64_t *)&v15);
    v10 = v15;
    if (v15)
      goto LABEL_5;
    return result;
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_4;
  }
  WTF::fastFree(v7, v4);
  result = WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>(a1 + 272, (uint64_t *)&v15);
  v10 = v15;
  if (v15)
  {
LABEL_5:
    v11 = (_DWORD *)*((_QWORD *)v10 + 4);
    *((_QWORD *)v10 + 4) = 0;
    if (v11)
    {
      if (v11[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        v12 = (WTF *)*((_QWORD *)v10 + 2);
        if (!v12)
        {
LABEL_10:
          v13 = (WTF *)*((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              WTF::fastFree(v13, v9);
              v14 = v10;
              return WTF::fastFree(v14, v9);
            }
            --*(_DWORD *)v13;
          }
          v14 = v10;
          return WTF::fastFree(v14, v9);
        }
LABEL_9:
        *((_QWORD *)v10 + 2) = 0;
        *((_DWORD *)v10 + 6) = 0;
        WTF::fastFree(v12, v9);
        goto LABEL_10;
      }
      --v11[4];
    }
    v12 = (WTF *)*((_QWORD *)v10 + 2);
    if (!v12)
      goto LABEL_10;
    goto LABEL_9;
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::processOutgoingFrameQueue(uint64_t this, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _DWORD *v34;
  WTF *v35;
  WTF *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  WTF *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  void *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  int v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  WTF *v98;

  v2 = *(_DWORD *)(this + 304);
  if (v2 != 2)
  {
    v3 = this;
    ++*(_DWORD *)(this + 8);
    v4 = *(_QWORD *)(this + 272);
    v5 = *(_QWORD *)(this + 280);
    if (v4 != v5)
    {
      v6 = MEMORY[0x1E0CC10F8];
      while (1)
      {
        if (v4 == v5)
        {
          __break(0xC471u);
          JUMPOUT(0x1D7FE3368);
        }
        v7 = *(_QWORD *)(v3 + 288);
        v8 = 8 * v4;
        v9 = *(unsigned int **)(v7 + 8 * v4);
        *(_QWORD *)(v7 + v8) = 0;
        v10 = *(_QWORD *)(v3 + 288);
        v11 = *(_QWORD *)(v10 + 8 * v4);
        *(_QWORD *)(v10 + v8) = 0;
        if (v11)
          break;
LABEL_20:
        v15 = *(unsigned int *)(v3 + 296);
        if (v4 == v15 - 1)
          v16 = 0;
        else
          v16 = v4 + 1;
        *(_QWORD *)(v3 + 272) = v16;
        v17 = v9[1];
        switch(v17)
        {
          case 2u:
            switch(*(_DWORD *)(v3 + 320))
            {
              case 0:
                ++*(_DWORD *)(v3 + 8);
                WTF::fastMalloc((WTF *)0xD0);
                v69 = WebCore::FileReaderLoader::FileReaderLoader();
                v70 = *(_QWORD *)(v3 + 312);
                *(_QWORD *)(v3 + 312) = v69;
                if (v70)
                  (*(void (**)(uint64_t))(*(_QWORD *)v70 + 64))(v70);
                *(_DWORD *)(v3 + 320) = 1;
                this = WebCore::FileReaderLoader::start();
                v71 = *(_QWORD *)(v3 + 272);
                v72 = *(_QWORD *)(v3 + 280);
                if (v71)
                {
                  if (v72 + 1 != v71)
                    goto LABEL_137;
                  LODWORD(v73) = *(_DWORD *)(v3 + 296);
                }
                else
                {
                  v73 = *(unsigned int *)(v3 + 296);
                  if (v72)
                  {
                    if (v72 != v73 - 1)
                      goto LABEL_137;
                  }
                  else if ((_DWORD)v73)
                  {
                    goto LABEL_137;
                  }
                }
                v83 = v73;
                v84 = v73 + ((unint64_t)v73 >> 2);
                if (v84 <= 0xF)
                  v84 = 15;
                if (v84 >= 0x1FFFFFFF)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1D7FE3378);
                }
                v76 = *(char **)(v3 + 288);
                v85 = v84 + 1;
                v86 = (char *)WTF::fastMalloc((WTF *)(8 * (v84 + 1)));
                *(_DWORD *)(v3 + 296) = v85;
                *(_QWORD *)(v3 + 288) = v86;
                v88 = *(_QWORD *)(v3 + 272);
                v87 = *(_QWORD *)(v3 + 280);
                if (v88 <= v87)
                {
                  this = (uint64_t)memcpy(&v86[8 * v88], &v76[8 * v88], 8 * v87 - 8 * v88);
                }
                else
                {
                  memcpy(v86, v76, 8 * v87);
                  v89 = *(_QWORD *)(v3 + 272);
                  v90 = v89 - v83 + *(unsigned int *)(v3 + 296);
                  this = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 288) + 8 * v90), &v76[8 * v89], 8 * v83 - 8 * v89);
                  *(_QWORD *)(v3 + 272) = v90;
                }
                if (v76)
                  goto LABEL_134;
                goto LABEL_137;
              case 1:
              case 3:
                v68 = *(_QWORD *)(v3 + 280);
                if (v16)
                {
                  if (v68 + 1 != v16)
                    goto LABEL_137;
                }
                else if (v68)
                {
                  if (v68 != v15 - 1)
                    goto LABEL_137;
                }
                else if ((_DWORD)v15)
                {
                  goto LABEL_137;
                }
                v74 = v15;
                v75 = v15 + ((unint64_t)v15 >> 2);
                if (v75 <= 0xF)
                  v75 = 15;
                if (v75 >= 0x1FFFFFFF)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1D7FE3370);
                }
                v76 = *(char **)(v3 + 288);
                v77 = v75 + 1;
                v78 = (char *)WTF::fastMalloc((WTF *)(8 * (v75 + 1)));
                *(_DWORD *)(v3 + 296) = v77;
                *(_QWORD *)(v3 + 288) = v78;
                v80 = *(_QWORD *)(v3 + 272);
                v79 = *(_QWORD *)(v3 + 280);
                if (v80 <= v79)
                {
                  this = (uint64_t)memcpy(&v78[8 * v80], &v76[8 * v80], 8 * v79 - 8 * v80);
                  if (!v76)
                    goto LABEL_137;
                }
                else
                {
                  memcpy(v78, v76, 8 * v79);
                  v81 = *(_QWORD *)(v3 + 272);
                  v82 = v81 - v74 + *(unsigned int *)(v3 + 296);
                  this = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 288) + 8 * v82), &v76[8 * v81], 8 * v74 - 8 * v81);
                  *(_QWORD *)(v3 + 272) = v82;
                  if (!v76)
                    goto LABEL_137;
                }
LABEL_134:
                if (*(char **)(v3 + 288) == v76)
                {
                  *(_QWORD *)(v3 + 288) = 0;
                  *(_DWORD *)(v3 + 296) = 0;
                }
                this = WTF::fastFree((WTF *)v76, a2);
LABEL_137:
                v91 = *(_QWORD *)(v3 + 272);
                if (!v91)
                  v91 = *(unsigned int *)(v3 + 296);
                v92 = v91 - 1;
                *(_QWORD *)(v3 + 272) = v92;
                *(_QWORD *)(*(_QWORD *)(v3 + 288) + 8 * v92) = v9;
                goto LABEL_140;
              case 2:
                WebCore::FileReaderLoader::arrayBufferResult(*(WebCore::FileReaderLoader **)(v3 + 312));
                v26 = *(_QWORD *)(v3 + 312);
                *(_QWORD *)(v3 + 312) = 0;
                if (v26)
                  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 64))(v26);
                *(_DWORD *)(v3 + 320) = 0;
                v27 = *v9;
                v28 = *((_QWORD *)v98 + 2);
                if (v28 && (v29 = *(_QWORD *)(v6 + 56)) != 0 && (*(_BYTE *)(v6 + 34) || !*MEMORY[0x1E0CC10F0]))
                {
                  v28 = (v28 & 0x3FFFFFFFFLL) + v29;
                  if (!*((_BYTE *)v98 + 64))
                    goto LABEL_54;
                }
                else if (!*((_BYTE *)v98 + 64))
                {
                  goto LABEL_54;
                }
                v30 = *((_QWORD *)v98 + 4);
                if (v30)
                {
                  v31 = *(_QWORD *)(v30 + 32);
                  goto LABEL_55;
                }
LABEL_54:
                v31 = *((_QWORD *)v98 + 6);
LABEL_55:
                ++*(_DWORD *)(v3 + 8);
                v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v37 = &off_1E9D6AC58;
                v37[1] = v3;
                v37[2] = v3;
                v95 = v37;
                WebCore::WebSocketChannel::sendFrame(v3, v27, v28, v31, &v95);
                v39 = v95;
                v95 = 0;
                if (v39)
                  (*(void (**)(_QWORD *))(*v39 + 8))(v39);
                v40 = v98;
                v98 = 0;
                if (!v40)
                  goto LABEL_43;
                v41 = *(_DWORD *)v40 == 2;
                *(_DWORD *)v40 -= 2;
                if (!v41)
                  goto LABEL_43;
                v42 = *((_QWORD *)v40 + 10);
                if (v42)
                {
                  *(_QWORD *)(v42 + 8) = 3;
                  *((_QWORD *)v40 + 10) = 0;
                }
                if ((*((_BYTE *)v40 + 72) & 1) == 0)
                  JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v40 + 72));
                v43 = *((_QWORD *)v40 + 3);
                if (v43)
                {
                  v44 = *((_QWORD *)v40 + 2);
                  if (v44)
                  {
                    v45 = *(_QWORD *)(v6 + 56);
                    if (v45)
                    {
                      if (*(_BYTE *)(v6 + 34) || !*MEMORY[0x1E0CC10F0])
                        v44 = (v44 & 0x3FFFFFFFFLL) + v45;
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v44);
                }
                v46 = (unsigned int *)*((_QWORD *)v40 + 5);
                *((_QWORD *)v40 + 5) = 0;
                if (!v46)
                  goto LABEL_74;
                do
                {
                  v47 = __ldaxr(v46);
                  v48 = v47 - 1;
                }
                while (__stlxr(v48, v46));
                if (!v48)
                {
                  atomic_store(1u, v46);
                  v58 = (WTF *)MEMORY[0x1D82A33E0](v46, a2, v38);
                  WTF::fastFree(v58, v59);
                  v49 = (unsigned int *)*((_QWORD *)v40 + 4);
                  *((_QWORD *)v40 + 4) = 0;
                  if (!v49)
                    goto LABEL_78;
                }
                else
                {
LABEL_74:
                  v49 = (unsigned int *)*((_QWORD *)v40 + 4);
                  *((_QWORD *)v40 + 4) = 0;
                  if (!v49)
                    goto LABEL_78;
                }
                do
                {
                  v50 = __ldaxr(v49);
                  v51 = v50 - 1;
                }
                while (__stlxr(v51, v49));
                if (!v51)
                {
                  atomic_store(1u, v49);
                  v60 = (WTF *)MEMORY[0x1D82A3404](v49, a2, v38);
                  WTF::fastFree(v60, v61);
                }
LABEL_78:
                v52 = (unsigned int *)*((_QWORD *)v40 + 3);
                *((_QWORD *)v40 + 3) = 0;
                if (!v52)
                  goto LABEL_82;
                v53 = v52 + 2;
                do
                {
                  v54 = __ldaxr(v53);
                  v55 = v54 - 1;
                }
                while (__stlxr(v55, v53));
                if (!v55)
                {
                  atomic_store(1u, v52 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
                  v56 = (WTF *)*((_QWORD *)v40 + 1);
                  if ((v56 & 1) != 0)
                    goto LABEL_87;
                }
                else
                {
LABEL_82:
                  v56 = (WTF *)*((_QWORD *)v40 + 1);
                  if ((v56 & 1) != 0)
                    goto LABEL_87;
                }
                if (v56)
                {
                  v57 = *(WTF **)v56;
                  if (*(_QWORD *)v56)
                  {
                    *(_QWORD *)v56 = 0;
                    *((_DWORD *)v56 + 2) = 0;
                    WTF::fastFree(v57, a2);
                  }
                  WTF::fastFree(v56, a2);
                }
LABEL_87:
                WTF::fastFree(v40, a2);
                break;
              default:
                goto LABEL_43;
            }
            break;
          case 1u:
            v21 = *v9;
            v22 = *((_QWORD *)v9 + 2);
            v23 = v9[7];
            ++*(_DWORD *)(v3 + 8);
            v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v24 = &off_1E9D6AC30;
            v24[1] = v3;
            v24[2] = v3;
            v96 = v24;
            WebCore::WebSocketChannel::sendFrame(v3, v21, v22, v23, &v96);
            v25 = v96;
            v96 = 0;
            if (v25)
              goto LABEL_42;
            break;
          case 0u:
            v18 = *((_QWORD *)v9 + 1);
            if (v18)
            {
              v19 = v18 + 16;
              v20 = *(_QWORD *)(v18 + 8);
            }
            else
            {
              v20 = 0;
              v19 = 0;
            }
            v32 = *v9;
            ++*(_DWORD *)(v3 + 8);
            v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v33 = &off_1E9D6AC08;
            v33[1] = v3;
            v33[2] = v3;
            v97 = v33;
            WebCore::WebSocketChannel::sendFrame(v3, v32, v19, v20, &v97);
            v25 = v97;
            v97 = 0;
            if (v25)
LABEL_42:
              (*(void (**)(_QWORD *))(*v25 + 8))(v25);
            break;
        }
LABEL_43:
        v34 = (_DWORD *)*((_QWORD *)v9 + 4);
        *((_QWORD *)v9 + 4) = 0;
        if (v34)
        {
          if (v34[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
            v35 = (WTF *)*((_QWORD *)v9 + 2);
            if (!v35)
              goto LABEL_48;
LABEL_47:
            *((_QWORD *)v9 + 2) = 0;
            v9[6] = 0;
            WTF::fastFree(v35, a2);
            goto LABEL_48;
          }
          --v34[4];
        }
        v35 = (WTF *)*((_QWORD *)v9 + 2);
        if (v35)
          goto LABEL_47;
LABEL_48:
        v36 = (WTF *)*((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1)
            WTF::fastFree(v36, a2);
          else
            --*(_DWORD *)v36;
        }
        this = WTF::fastFree((WTF *)v9, a2);
        v4 = *(_QWORD *)(v3 + 272);
        v5 = *(_QWORD *)(v3 + 280);
        if (v4 == v5)
        {
          v2 = *(_DWORD *)(v3 + 304);
          goto LABEL_93;
        }
      }
      v12 = *(_DWORD **)(v11 + 32);
      *(_QWORD *)(v11 + 32) = 0;
      if (v12)
      {
        if (v12[4] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
          v13 = *(WTF **)(v11 + 16);
          if (!v13)
            goto LABEL_13;
          goto LABEL_12;
        }
        --v12[4];
      }
      v13 = *(WTF **)(v11 + 16);
      if (!v13)
      {
LABEL_13:
        v14 = *(WTF **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, a2);
          else
            --*(_DWORD *)v14;
        }
        this = WTF::fastFree((WTF *)v11, a2);
        v4 = *(_QWORD *)(v3 + 272);
        goto LABEL_20;
      }
LABEL_12:
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      WTF::fastFree(v13, a2);
      goto LABEL_13;
    }
LABEL_93:
    if (v2 == 1)
    {
      *(_DWORD *)(v3 + 304) = 2;
      v62 = *(unsigned int **)(v3 + 72);
      if (v62[16] != 3)
      {
        v62[16] = 2;
        this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v62 + 16))(v62);
        if (!this)
        {
          v63 = v62 + 2;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 + 1, v63));
          this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v62 + 40))(v62);
          v62[16] = 3;
          do
          {
            v65 = __ldaxr(v63);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v63));
          if (!v66)
          {
            atomic_store(1u, v63);
            v67 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v67 = off_1E9D6AA68;
            *((_QWORD *)v67 + 1) = v63;
            v98 = v67;
            WTF::ensureOnMainThread();
            this = (uint64_t)v98;
            v98 = 0;
            if (this)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          }
        }
      }
    }
LABEL_140:
    if (*(_DWORD *)(v3 + 8) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v3, a2);
      return WTF::fastFree(v93, v94);
    }
    else
    {
      --*(_DWORD *)(v3 + 8);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::send(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;

  if (!*(_DWORD *)(a1 + 288))
  {
    v3 = a1 - 16;
    WebCore::WebSocketChannel::enqueueTextFrame(a1 - 16, a2);
    WebCore::WebSocketChannel::processOutgoingFrameQueue(v3, v4);
  }
  return 0;
}

uint64_t WebCore::WebSocketChannel::send(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v13;

  if (*(_DWORD *)(result + 304))
    return 0;
  v4 = result;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v6)
    {
      v7 = *(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || *MEMORY[0x1E0CC10F0] == 0;
      v8 = (v5 & 0x3FFFFFFFFLL) + v6;
      if (v7)
        v5 = v8;
    }
  }
  if (*(_BYTE *)(a2 + 64) && (v9 = *(_QWORD *)(a2 + 32)) != 0)
    v10 = *(_QWORD *)(v9 + 32);
  else
    v10 = *(_QWORD *)(a2 + 48);
  v11 = v10 >= a3;
  v12 = v10 - a3;
  if (v11 && v12 >= a4)
  {
    WebCore::WebSocketChannel::enqueueRawFrame(result, 2, v5 + a3, a4);
    WebCore::WebSocketChannel::processOutgoingFrameQueue(v4, v13);
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::enqueueRawFrame(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  _DWORD *v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;

  result = WTF::fastMalloc((WTF *)0x28);
  v9 = result;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  v31 = (WTF *)result;
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = 1;
  if (!a4)
  {
    v13 = 0;
    goto LABEL_21;
  }
  if (HIDWORD(a4))
  {
    __break(0xC471u);
    return result;
  }
  v10 = (char *)a3;
  v11 = WTF::fastMalloc((WTF *)a4);
  v13 = v11;
  if (a4 < 8)
  {
    v14 = (_BYTE *)v11;
    goto LABEL_18;
  }
  v14 = (_BYTE *)v11;
  if ((unint64_t)(v11 - a3) < 0x20)
    goto LABEL_18;
  if (a4 < 0x20)
  {
    v15 = 0;
    goto LABEL_13;
  }
  v15 = a4 & 0xFFFFFFFFFFFFFFE0;
  v16 = (__int128 *)(a3 + 16);
  v17 = (_OWORD *)(v11 + 16);
  v18 = a4 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v19 = *v16;
    *(v17 - 1) = *(v16 - 1);
    *v17 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 32;
  }
  while (v18);
  if (a4 != v15)
  {
    if ((a4 & 0x18) == 0)
    {
      v10 = (char *)(a3 + v15);
      v14 = (_BYTE *)(v11 + v15);
      goto LABEL_18;
    }
LABEL_13:
    v14 = (_BYTE *)(v11 + (a4 & 0xFFFFFFFFFFFFFFF8));
    v10 = (char *)(a3 + (a4 & 0xFFFFFFFFFFFFFFF8));
    v20 = (uint64_t *)(a3 + v15);
    v21 = (_QWORD *)(v11 + v15);
    v22 = v15 - (a4 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v20++;
      *v21++ = v23;
      v22 += 8;
    }
    while (v22);
    if (a4 == (a4 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_19;
    do
    {
LABEL_18:
      v24 = *v10++;
      *v14++ = v24;
    }
    while (v10 != (char *)(a3 + a4));
  }
LABEL_19:
  v25 = *(WTF **)(v9 + 16);
  if (v25)
  {
    *(_QWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 24) = 0;
    WTF::fastFree(v25, v12);
  }
LABEL_21:
  *(_QWORD *)(v9 + 16) = v13;
  *(_DWORD *)(v9 + 24) = a4;
  *(_DWORD *)(v9 + 28) = a4;
  result = WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>(a1 + 272, (uint64_t *)&v31);
  v27 = v31;
  if (!v31)
    return result;
  v28 = (_DWORD *)*((_QWORD *)v31 + 4);
  *((_QWORD *)v31 + 4) = 0;
  if (v28)
  {
    if (v28[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
      v29 = (WTF *)*((_QWORD *)v27 + 2);
      if (!v29)
        goto LABEL_27;
      goto LABEL_26;
    }
    --v28[4];
  }
  v29 = (WTF *)*((_QWORD *)v27 + 2);
  if (v29)
  {
LABEL_26:
    *((_QWORD *)v27 + 2) = 0;
    *((_DWORD *)v27 + 6) = 0;
    WTF::fastFree(v29, v26);
  }
LABEL_27:
  v30 = (WTF *)*((_QWORD *)v27 + 1);
  *((_QWORD *)v27 + 1) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree(v30, v26);
    else
      --*(_DWORD *)v30;
  }
  return WTF::fastFree(v27, v26);
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::send(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  if (*(_DWORD *)(result + 288))
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v5)
    {
      v6 = *(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || *MEMORY[0x1E0CC10F0] == 0;
      v7 = (v4 & 0x3FFFFFFFFLL) + v5;
      if (v6)
        v4 = v7;
    }
  }
  if (*(_BYTE *)(a2 + 64) && (v8 = *(_QWORD *)(a2 + 32)) != 0)
    v9 = *(_QWORD *)(v8 + 32);
  else
    v9 = *(_QWORD *)(a2 + 48);
  v10 = v9 >= a3;
  v11 = v9 - a3;
  if (v10 && v11 >= a4)
  {
    v12 = result - 16;
    WebCore::WebSocketChannel::enqueueRawFrame(result - 16, 2, v4 + a3, a4);
    WebCore::WebSocketChannel::processOutgoingFrameQueue(v12, v13);
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::send(WebCore::WebSocketChannel *this, WebCore::Blob *a2)
{
  void *v4;

  if (!*((_DWORD *)this + 76))
  {
    WebCore::WebSocketChannel::enqueueBlobFrame((uint64_t)this, (uint64_t)a2);
    WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)this, v4);
  }
  return 0;
}

uint64_t WebCore::WebSocketChannel::enqueueBlobFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  WTF *v7;
  _DWORD *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  v12 = (WTF *)v4;
  *(_QWORD *)v4 = 0x200000002;
  ++*(_DWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 32) = a2;
  result = WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::append<std::unique_ptr<WTF::Function<void ()(void)>>>(a1 + 272, (uint64_t *)&v12);
  v7 = v12;
  if (v12)
  {
    v8 = (_DWORD *)*((_QWORD *)v12 + 4);
    *((_QWORD *)v12 + 4) = 0;
    if (v8)
    {
      if (v8[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v9 = (WTF *)*((_QWORD *)v7 + 2);
        if (!v9)
        {
LABEL_7:
          v10 = (WTF *)*((_QWORD *)v7 + 1);
          *((_QWORD *)v7 + 1) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 1)
            {
              WTF::fastFree(v10, v6);
              v11 = v7;
              return WTF::fastFree(v11, v6);
            }
            --*(_DWORD *)v10;
          }
          v11 = v7;
          return WTF::fastFree(v11, v6);
        }
LABEL_6:
        *((_QWORD *)v7 + 2) = 0;
        *((_DWORD *)v7 + 6) = 0;
        WTF::fastFree(v9, v6);
        goto LABEL_7;
      }
      --v8[4];
    }
    v9 = (WTF *)*((_QWORD *)v7 + 2);
    if (!v9)
      goto LABEL_7;
    goto LABEL_6;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::send(WebCore::WebSocketChannel *this, WebCore::Blob *a2)
{
  char *v3;
  void *v4;

  if (!*((_DWORD *)this + 72))
  {
    v3 = (char *)this - 16;
    WebCore::WebSocketChannel::enqueueBlobFrame((uint64_t)this - 16, (uint64_t)a2);
    WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)v3, v4);
  }
  return 0;
}

uint64_t WebCore::WebSocketChannel::bufferedAmount(WebCore::WebSocketChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9));
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::bufferedAmount(WebCore::WebSocketChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
}

uint64_t WebCore::WebSocketChannel::close(uint64_t this, int a2, const WTF::String *a3)
{
  uint64_t v3;
  void *v4;
  WTF *v5;
  void *v6;

  if (*(_QWORD *)(this + 72))
  {
    v3 = this;
    ++*(_DWORD *)(this + 8);
    this = (uint64_t)WebCore::WebSocketChannel::startClosingHandshake((_BYTE *)this, a2, a3);
    if (*(_BYTE *)(v3 + 153)
      && ((*(_QWORD *)(v3 + 192) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(_QWORD *)(v3 + 192) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      this = WebCore::TimerBase::start();
    }
    if (*(_DWORD *)(v3 + 8) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v3, v4);
      return WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)(v3 + 8);
    }
  }
  return this;
}

_BYTE *WebCore::WebSocketChannel::startClosingHandshake(_BYTE *this, int a2, const WTF::String *a3)
{
  char v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  void *v14;
  WTF *v15;
  size_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  int v23;
  unsigned int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  if (this[153])
    return this;
  v3 = a2;
  v4 = (uint64_t)this;
  v5 = 0;
  v32 = 0;
  v33 = 0;
  if (a2 == -1)
  {
    v6 = 0;
    goto LABEL_27;
  }
  v6 = 0;
  if (this[154])
    goto LABEL_27;
  v31 = a2;
  v7 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v32, (WTF *)1, (unint64_t)&v31 + 1);
  v8 = v32;
  v10 = v33;
  v9 = HIDWORD(v33);
  v32[HIDWORD(v33)] = *v7;
  v11 = (v9 + 1);
  HIDWORD(v33) = v11;
  if ((_DWORD)v11 == v10)
  {
    v12 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v32, (WTF *)(v11 + 1), (unint64_t)&v31);
    LODWORD(v11) = HIDWORD(v33);
    v8 = v32;
    v32[HIDWORD(v33)] = *v12;
  }
  else
  {
    v8[v11] = v3;
  }
  v13 = (v11 + 1);
  WTF::String::utf8();
  v15 = v30;
  if (v30)
  {
    v16 = *((_QWORD *)v30 + 1);
    if (!v16)
    {
      v23 = *(_DWORD *)v30 - 1;
      if (*(_DWORD *)v30 != 1)
        goto LABEL_23;
      goto LABEL_25;
    }
    v17 = v16 + v13;
    if (v16 + v13 > v33)
    {
      v18 = v33 + ((unint64_t)v33 >> 2);
      if (v18 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 16;
      if (v19 <= v17)
        v20 = v16 + v13;
      else
        v20 = v19;
      if (HIDWORD(v20))
        goto LABEL_37;
      v21 = (char *)WTF::fastMalloc((WTF *)v20);
      v32 = v21;
      memcpy(v21, v8, v13);
      if (v21 == v8)
      {
        v21 = 0;
        v32 = 0;
      }
      WTF::fastFree((WTF *)v8, v22);
      v8 = v21;
    }
    if (v17 >= v13)
    {
      memcpy(&v8[v13], (char *)v30 + 16, v16);
      v15 = v30;
      LODWORD(v13) = v16 + v13;
      v23 = *(_DWORD *)v30 - 1;
      if (*(_DWORD *)v30 != 1)
      {
LABEL_23:
        *(_DWORD *)v15 = v23;
        goto LABEL_26;
      }
LABEL_25:
      WTF::fastFree(v15, v14);
      goto LABEL_26;
    }
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1D7FE3BF4);
  }
LABEL_26:
  v24 = v13;
  v5 = (WTF *)v32;
  v6 = v24;
LABEL_27:
  WebCore::WebSocketChannel::enqueueRawFrame(v4, 8, (uint64_t)v5, v6);
  ++*(_DWORD *)(v4 + 8);
  this = (_BYTE *)WebCore::WebSocketChannel::processOutgoingFrameQueue(v4, v25);
  if (!*(_BYTE *)(v4 + 216))
  {
    *(_BYTE *)(v4 + 153) = 1;
    v27 = *(_QWORD *)(v4 + 56);
    if (v27)
    {
      this = *(_BYTE **)(v27 + 8);
      if (this)
        this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 56))(this);
    }
  }
  if (*(_DWORD *)(v4 + 8) != 1)
  {
    --*(_DWORD *)(v4 + 8);
    if (!v5)
      return this;
    return (_BYTE *)WTF::fastFree(v5, v26);
  }
  WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v4, v26);
  this = (_BYTE *)WTF::fastFree(v28, v29);
  if (v5)
    return (_BYTE *)WTF::fastFree(v5, v26);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::close(uint64_t this, int a2, const WTF::String *a3)
{
  uint64_t v3;
  WebCore::WebSocketChannel *v4;
  void *v5;
  WTF *v6;
  void *v7;

  if (*(_QWORD *)(this + 56))
  {
    v3 = this;
    v4 = (WebCore::WebSocketChannel *)(this - 16);
    ++*(_DWORD *)(this - 8);
    this = (uint64_t)WebCore::WebSocketChannel::startClosingHandshake((_BYTE *)(this - 16), a2, a3);
    if (*(_BYTE *)(v3 + 137)
      && ((*(_QWORD *)(v3 + 176) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(_QWORD *)(v3 + 176) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      this = WebCore::TimerBase::start();
    }
    if (*(_DWORD *)(v3 - 8) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel(v4, v5);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)(v3 - 8);
    }
  }
  return this;
}

WTF *WebCore::WebSocketChannel::fail(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  char *v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  WebCore::WebSocketHandshake *v9;
  WTF::URL *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  StringImpl *v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  StringImpl *v35;
  WTF::StringImpl *v36;
  WTF *result;
  void *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  void *v46;
  _BYTE *v47;
  size_t v48;
  _BYTE *v49;
  unint64_t v50;
  unsigned __int128 *v51;
  unsigned __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  unint64_t v56;
  __int128 v57;
  char *v58;
  int8x16_t v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  char *v63;
  char *v64;
  size_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  char v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  size_t v78;
  _BYTE *v79;
  unint64_t v80;
  unsigned __int128 v81;
  size_t v82;
  unint64_t v83;
  BOOL v84;
  unint64_t v85;
  _BYTE *v86;
  char *v87;
  char v88;
  _WORD *v89;
  unsigned __int8 *v90;
  __int16 v91;
  _WORD *v92;
  uint64_t v93;
  _WORD *v94;
  unint64_t v95;
  __int128 v96;
  int8x16_t v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  _WORD *v104;
  unsigned __int8 *v105;
  __int16 v106;
  uint64_t v107;
  unint64_t v108;
  int8x16_t *v109;
  int8x16_t *v110;
  unint64_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int16x8_t *v116;
  int8x8_t *v117;
  unint64_t v118;
  int16x8_t v119;
  int8x16_t *v120;
  int8x16_t *v121;
  unint64_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int16x8_t *v127;
  int8x8_t *v128;
  unint64_t v129;
  int16x8_t v130;
  uint8x8_t *v131;
  uint16x8_t *v132;
  unint64_t v133;
  uint8x16_t v134;
  uint16x8_t v135;
  uint16x8_t v136;
  uint8x8_t *v137;
  uint16x8_t *v138;
  unint64_t v139;
  uint8x8_t v140;
  uint8x8_t *v141;
  uint16x8_t *v142;
  unint64_t v143;
  uint8x16_t v144;
  uint16x8_t v145;
  uint16x8_t v146;
  uint8x8_t *v147;
  uint16x8_t *v148;
  unint64_t v149;
  uint8x8_t v150;
  _QWORD *v151;
  WTF::StringImpl *v152;
  WTF *v153;
  _BYTE buf[12];
  __int16 v155;
  char *v156;
  uint64_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;
  int8x16x2_t v162;
  int8x16x2_t v163;

  v157 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(MEMORY[0x1E0DCE780] + 32);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    goto LABEL_8;
  WTF::String::utf8();
  v5 = v153 ? (char *)v153 + 16 : 0;
  *(_DWORD *)buf = 134218242;
  *(_QWORD *)&buf[4] = a1;
  v155 = 2080;
  v156 = v5;
  _os_log_impl(&dword_1D7FB9000, v4, OS_LOG_TYPE_DEFAULT, "WebSocketChannel %p fail() reason='%s'", buf, 0x16u);
  v7 = v153;
  v153 = 0;
  if (!v7)
  {
LABEL_8:
    v8 = *(_QWORD *)(a1 + 48);
    if (!v8)
      goto LABEL_71;
    goto LABEL_9;
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_8;
  }
  WTF::fastFree(v7, v6);
  v8 = *(_QWORD *)(a1 + 48);
  if (!v8)
    goto LABEL_71;
LABEL_9:
  if (!*(_QWORD *)(v8 + 8))
    goto LABEL_71;
  WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrameError();
  v9 = *(WebCore::WebSocketHandshake **)(a1 + 64);
  if (!v9)
  {
    v18 = *a2;
    if (*a2)
    {
      v19 = *(_DWORD *)(v18 + 4);
      *(_DWORD *)v18 += 2;
      if (v19 < 0)
        goto LABEL_222;
      v20 = v19 + 29;
      if (__OFADD__(v19, 29))
        goto LABEL_222;
      v21 = (*(unsigned __int8 *)(v18 + 16) >> 2) & 1;
    }
    else
    {
      v21 = 1;
      v20 = 29;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((unint64_t)&v153, v20, v21, (int8x16_t *)"WebSocket connection failed: ", 0x1Du, v18);
    if (v153)
    {
      *(_QWORD *)buf = v153;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v18, v22);
        else
          *(_DWORD *)v18 -= 2;
      }
      goto LABEL_67;
    }
LABEL_222:
    __break(0xC471u);
LABEL_223:
    JUMPOUT(0x1D7FE4804);
  }
  v10 = (WTF::URL *)WebCore::WebSocketHandshake::url(v9);
  WTF::URL::stringCenterEllipsizedToLength(v10);
  v13 = *a2;
  if (*a2)
    *(_DWORD *)v13 += 2;
  if (!v152)
  {
    v14 = 0;
    if (v13)
      goto LABEL_15;
LABEL_32:
    v16 = 10;
    v17 = v11;
    if (v14 < 0)
      goto LABEL_221;
    goto LABEL_36;
  }
  v14 = *((_DWORD *)v152 + 1);
  if (!v13)
    goto LABEL_32;
LABEL_15:
  v15 = *(_DWORD *)(v13 + 4);
  if (v15 < 0)
    goto LABEL_221;
  v11 = __OFADD__(v15, 10);
  v16 = v15 + 10;
  v17 = v11;
  if (v14 < 0)
    goto LABEL_221;
LABEL_36:
  if ((v17 & 1) != 0)
    goto LABEL_221;
  v11 = __OFADD__(v14, v16);
  v23 = v14 + v16;
  if (v11)
    goto LABEL_221;
  v24 = v23 + 25;
  if (__OFADD__(v23, 25))
    goto LABEL_221;
  if (!v152)
  {
    if (!v13)
    {
      if (v23 == -25)
        goto LABEL_55;
      v32 = 0;
      v33 = 0;
      v26 = v24;
      goto LABEL_93;
    }
    goto LABEL_45;
  }
  v25 = *((_DWORD *)v152 + 4);
  if (v13 && (v25 & 4) != 0)
  {
LABEL_45:
    v26 = v24;
    v27 = v24 == 0;
    v28 = (uint64_t)v152;
    if ((*(_BYTE *)(v13 + 16) & 4) == 0)
    {
LABEL_46:
      if (!v27)
      {
        if (v24 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v26 + 20));
          v29 = *(_QWORD *)buf;
          if (*(_QWORD *)buf)
          {
            *(_OWORD *)(*(_QWORD *)buf + 20) = xmmword_1D80FBAD0;
            *(_DWORD *)v29 = 2;
            *(_DWORD *)(v29 + 4) = v24;
            *(_QWORD *)(v29 + 8) = v29 + 20;
            *(_DWORD *)(v29 + 16) = 0;
            v30 = (_WORD *)(v29 + 70);
            *(_OWORD *)(v29 + 36) = xmmword_1D80FBAE0;
            *(_OWORD *)(v29 + 52) = xmmword_1D80FBAF0;
            *(_WORD *)(v29 + 68) = 39;
            if (!v28)
            {
              v54 = 0;
LABEL_161:
              v92 = &v30[v54];
              *(_OWORD *)v92 = xmmword_1D80FBB00;
              *((_DWORD *)v92 + 4) = 2097210;
              if (v13)
              {
                v77 = (unint64_t)(v92 + 10);
                v12 = *(_QWORD *)(v13 + 8);
                v93 = *(unsigned int *)(v13 + 4);
                if ((*(_BYTE *)(v13 + 16) & 4) == 0)
                {
                  if ((_DWORD)v93)
                  {
                    if ((_DWORD)v93 == 1)
                    {
                      *(_WORD *)v77 = *(_WORD *)v12;
                      *(_QWORD *)buf = v29;
                      goto LABEL_57;
                    }
                    v78 = 2 * v93;
                    goto LABEL_178;
                  }
LABEL_179:
                  *(_QWORD *)buf = v29;
                  goto LABEL_57;
                }
                v94 = (_WORD *)(v77 + 2 * v93);
                if (v93 >= 0x40)
                {
                  v95 = v77 + 2 * (v93 & 0xFFFFFFC0);
                  v96 = 0uLL;
                  do
                  {
                    v159.val[0] = *(int8x16_t *)v12;
                    v97 = *(int8x16_t *)(v12 + 16);
                    v161.val[0] = *(int8x16_t *)(v12 + 32);
                    v98 = *(_OWORD *)(v12 + 48);
                    v12 += 64;
                    v99 = v98;
                    v161.val[1] = 0uLL;
                    v163.val[0] = v97;
                    v159.val[1] = 0uLL;
                    v100 = (char *)v77;
                    vst2q_s8(v100, v159);
                    v100 += 32;
                    v163.val[1] = 0uLL;
                    vst2q_s8(v100, v163);
                    v101 = (char *)(v77 + 64);
                    vst2q_s8(v101, v161);
                    v102 = (char *)(v77 + 96);
                    vst2q_s8(v102, *(int8x16x2_t *)(&v96 - 1));
                    v77 += 128;
                  }
                  while (v77 != v95);
                  v77 = v95;
                }
                if ((_WORD *)v77 != v94)
                {
                  v103 = v29 + 2 * (v54 + v93) - v77 + 88;
                  if (v103 < 0xE || v77 < v12 + (v103 >> 1) + 1 && v12 < (v103 & 0xFFFFFFFFFFFFFFFELL) + v77 + 2)
                  {
                    v104 = (_WORD *)v77;
                    v105 = (unsigned __int8 *)v12;
                    goto LABEL_175;
                  }
                  v107 = (v103 >> 1) + 1;
                  if (v103 >= 0x3E)
                  {
                    v108 = v107 & 0xFFFFFFFFFFFFFFE0;
                    v141 = (uint8x8_t *)(v12 + 16);
                    v142 = (uint16x8_t *)(v77 + 32);
                    v143 = v107 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v144 = *(uint8x16_t *)v141[-2].i8;
                      v145 = vmovl_u8(*v141);
                      v146 = vmovl_high_u8(*(uint8x16_t *)v141->i8);
                      v142[-2] = vmovl_u8(*(uint8x8_t *)v144.i8);
                      v142[-1] = vmovl_high_u8(v144);
                      *v142 = v145;
                      v142[1] = v146;
                      v142 += 4;
                      v141 += 4;
                      v143 -= 32;
                    }
                    while (v143);
                    if (v107 == v108)
                      goto LABEL_56;
                    if ((v107 & 0x18) == 0)
                    {
                      v105 = (unsigned __int8 *)(v12 + v108);
                      v104 = (_WORD *)(v77 + 2 * v108);
                      do
                      {
LABEL_175:
                        v106 = *v105++;
                        *v104++ = v106;
                      }
                      while (v104 != v94);
                      goto LABEL_56;
                    }
                  }
                  else
                  {
                    v108 = 0;
                  }
                  v104 = (_WORD *)(v77 + 2 * (v107 & 0xFFFFFFFFFFFFFFF8));
                  v105 = (unsigned __int8 *)(v12 + (v107 & 0xFFFFFFFFFFFFFFF8));
                  v147 = (uint8x8_t *)(v12 + v108);
                  v148 = (uint16x8_t *)(v77 + 2 * v108);
                  v149 = v108 - (v107 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v150 = *v147++;
                    *v148++ = vmovl_u8(v150);
                    v149 += 8;
                  }
                  while (v149);
                  if (v107 != (v107 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_175;
                }
              }
LABEL_56:
              *(_QWORD *)buf = v29;
              if (!v13)
                goto LABEL_59;
              goto LABEL_57;
            }
            v12 = *((_QWORD *)v152 + 1);
            v31 = *((unsigned int *)v152 + 1);
            if ((*((_BYTE *)v152 + 16) & 4) == 0)
            {
              if ((_DWORD)v31)
              {
                if ((_DWORD)v31 == 1)
                  *v30 = *(_WORD *)v12;
                else
                  memcpy((void *)(v29 + 70), (const void *)v12, 2 * v31);
              }
              goto LABEL_160;
            }
            v55 = &v30[v31];
            if (v31 < 0x40)
            {
              v56 = v29 + 70;
            }
            else
            {
              v56 = (unint64_t)&v30[v31 & 0xFFFFFFC0];
              v57 = 0uLL;
              v58 = (char *)(v29 + 70);
              do
              {
                v158.val[0] = *(int8x16_t *)v12;
                v59 = *(int8x16_t *)(v12 + 16);
                v160.val[0] = *(int8x16_t *)(v12 + 32);
                v60 = *(_OWORD *)(v12 + 48);
                v12 += 64;
                v61 = v60;
                v160.val[1] = 0uLL;
                v162.val[0] = v59;
                v158.val[1] = 0uLL;
                v62 = v58;
                vst2q_s8(v62, v158);
                v62 += 32;
                v162.val[1] = 0uLL;
                vst2q_s8(v62, v162);
                v63 = v58 + 64;
                vst2q_s8(v63, v160);
                v64 = v58 + 96;
                vst2q_s8(v64, *(int8x16x2_t *)(&v57 - 1));
                v58 += 128;
              }
              while (v58 != (char *)v56);
            }
            if ((_WORD *)v56 == v55)
            {
LABEL_160:
              v54 = *((unsigned int *)v152 + 1);
              goto LABEL_161;
            }
            v72 = v29 + 2 * v31 - v56 + 68;
            if (v72 < 0xE
              || (v56 < v12 + (v72 >> 1) + 1 ? (v73 = v12 >= (v72 & 0xFFFFFFFFFFFFFFFELL) + v56 + 2) : (v73 = 1), !v73))
            {
              v89 = (_WORD *)v56;
              v90 = (unsigned __int8 *)v12;
              goto LABEL_157;
            }
            v74 = (v72 >> 1) + 1;
            if (v72 >= 0x3E)
            {
              v75 = v74 & 0xFFFFFFFFFFFFFFE0;
              v131 = (uint8x8_t *)(v12 + 16);
              v132 = (uint16x8_t *)(v56 + 32);
              v133 = v74 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v134 = *(uint8x16_t *)v131[-2].i8;
                v135 = vmovl_u8(*v131);
                v136 = vmovl_high_u8(*(uint8x16_t *)v131->i8);
                v132[-2] = vmovl_u8(*(uint8x8_t *)v134.i8);
                v132[-1] = vmovl_high_u8(v134);
                *v132 = v135;
                v132[1] = v136;
                v132 += 4;
                v131 += 4;
                v133 -= 32;
              }
              while (v133);
              if (v74 == v75)
                goto LABEL_160;
              if ((v74 & 0x18) == 0)
              {
                v90 = (unsigned __int8 *)(v12 + v75);
                v89 = (_WORD *)(v56 + 2 * v75);
                do
                {
LABEL_157:
                  v91 = *v90++;
                  *v89++ = v91;
                }
                while (v89 != v55);
                goto LABEL_160;
              }
            }
            else
            {
              v75 = 0;
            }
            v89 = (_WORD *)(v56 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
            v90 = (unsigned __int8 *)(v12 + (v74 & 0xFFFFFFFFFFFFFFF8));
            v137 = (uint8x8_t *)(v12 + v75);
            v138 = (uint16x8_t *)(v56 + 2 * v75);
            v139 = v75 - (v74 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v140 = *v137++;
              *v138++ = vmovl_u8(v140);
              v139 += 8;
            }
            while (v139);
            if (v74 == (v74 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_160;
            goto LABEL_157;
          }
        }
LABEL_221:
        __break(0xC471u);
        goto LABEL_223;
      }
LABEL_55:
      v29 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_56;
    }
    goto LABEL_54;
  }
  v26 = v24;
  v27 = v24 == 0;
  if ((v25 & 4) == 0)
  {
    v28 = 1;
    goto LABEL_46;
  }
LABEL_54:
  v32 = v152;
  v33 = v13;
  if (v27)
    goto LABEL_55;
LABEL_93:
  if ((v24 & 0x80000000) != 0)
    goto LABEL_221;
  WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
  v29 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_221;
  **(_DWORD **)buf = 2;
  *(_DWORD *)(v29 + 4) = v24;
  *(_QWORD *)(v29 + 8) = v29 + 20;
  *(_DWORD *)(v29 + 16) = 4;
  qmemcpy((void *)(v29 + 20), "WebSocket connection to '", 25);
  v47 = (_BYTE *)(v29 + 45);
  if (!v32)
  {
    v53 = 0;
    goto LABEL_135;
  }
  v12 = *((_QWORD *)v152 + 1);
  v48 = *((unsigned int *)v152 + 1);
  if ((*((_BYTE *)v152 + 16) & 4) != 0)
  {
    if ((_DWORD)v48)
    {
      if ((_DWORD)v48 == 1)
        *v47 = *(_BYTE *)v12;
      else
        memcpy((void *)(v29 + 45), (const void *)v12, v48);
    }
    goto LABEL_134;
  }
  v49 = &v47[v48];
  if (v48 < 0x10)
  {
    v50 = v29 + 45;
  }
  else
  {
    v50 = (unint64_t)&v47[v48 & 0xFFFFFFF0];
    v51 = (unsigned __int128 *)(v29 + 45);
    do
    {
      v52 = (unsigned __int128)vld2q_s8((const char *)v12);
      v12 += 32;
      *v51++ = v52;
    }
    while (v51 != (unsigned __int128 *)v50);
  }
  if ((_BYTE *)v50 != v49)
  {
    v65 = v29 + v48;
    v66 = v29 + v48 - v50 + 45;
    if (v66 < 8 || (v50 < v12 - 2 * v50 + 2 * v65 + 90 ? (v67 = v12 >= v65 + 45) : (v67 = 1), !v67))
    {
      v69 = (_BYTE *)v50;
      v70 = (char *)v12;
      goto LABEL_121;
    }
    if (v66 >= 0x20)
    {
      v68 = v66 & 0xFFFFFFFFFFFFFFE0;
      v109 = (int8x16_t *)(v12 + 32);
      v110 = (int8x16_t *)(v50 + 16);
      v111 = v66 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v113 = v109[-2];
        v112 = v109[-1];
        v115 = *v109;
        v114 = v109[1];
        v109 += 4;
        v110[-1] = vuzp1q_s8(v113, v112);
        *v110 = vuzp1q_s8(v115, v114);
        v110 += 2;
        v111 -= 32;
      }
      while (v111);
      if (v66 == v68)
        goto LABEL_134;
      if ((v66 & 0x18) == 0)
      {
        v70 = (char *)(v12 + 2 * v68);
        v69 = (_BYTE *)(v50 + v68);
        do
        {
LABEL_121:
          v71 = *v70;
          v70 += 2;
          *v69++ = v71;
        }
        while (v69 != v49);
        goto LABEL_134;
      }
    }
    else
    {
      v68 = 0;
    }
    v69 = (_BYTE *)(v50 + (v66 & 0xFFFFFFFFFFFFFFF8));
    v70 = (char *)(v12 + 2 * (v66 & 0xFFFFFFFFFFFFFFF8));
    v116 = (int16x8_t *)(v12 + 2 * v68);
    v117 = (int8x8_t *)(v50 + v68);
    v118 = v68 - (v66 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v119 = *v116++;
      *v117++ = vmovn_s16(v119);
      v118 += 8;
    }
    while (v118);
    if (v66 == (v66 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_134;
    goto LABEL_121;
  }
LABEL_134:
  v53 = *((unsigned int *)v152 + 1);
LABEL_135:
  v76 = &v47[v53];
  *(_QWORD *)v76 = *(_QWORD *)"' failed: ";
  *((_WORD *)v76 + 4) = 8250;
  if (!v33)
    goto LABEL_56;
  v77 = (unint64_t)(v76 + 10);
  v12 = *(_QWORD *)(v13 + 8);
  v78 = *(unsigned int *)(v13 + 4);
  if ((*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    v79 = (_BYTE *)(v77 + v78);
    if (v78 >= 0x10)
    {
      v80 = v77 + (v78 & 0xFFFFFFF0);
      do
      {
        v81 = (unsigned __int128)vld2q_s8((const char *)v12);
        v12 += 32;
        *(_OWORD *)v77 = v81;
        v77 += 16;
      }
      while (v77 != v80);
      v77 = v80;
    }
    if ((_BYTE *)v77 == v79)
      goto LABEL_56;
    v82 = v53 + v29 + v78;
    v83 = v82 - v77 + 55;
    if (v83 < 8 || (v77 < v12 - 2 * v77 + 2 * v82 + 110 ? (v84 = v12 >= v82 + 55) : (v84 = 1), !v84))
    {
      v86 = (_BYTE *)v77;
      v87 = (char *)v12;
      goto LABEL_154;
    }
    if (v83 >= 0x20)
    {
      v85 = v83 & 0xFFFFFFFFFFFFFFE0;
      v120 = (int8x16_t *)(v12 + 32);
      v121 = (int8x16_t *)(v77 + 16);
      v122 = v83 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v124 = v120[-2];
        v123 = v120[-1];
        v126 = *v120;
        v125 = v120[1];
        v120 += 4;
        v121[-1] = vuzp1q_s8(v124, v123);
        *v121 = vuzp1q_s8(v126, v125);
        v121 += 2;
        v122 -= 32;
      }
      while (v122);
      if (v83 == v85)
        goto LABEL_56;
      if ((v83 & 0x18) == 0)
      {
        v87 = (char *)(v12 + 2 * v85);
        v86 = (_BYTE *)(v77 + v85);
        goto LABEL_154;
      }
    }
    else
    {
      v85 = 0;
    }
    v86 = (_BYTE *)(v77 + (v83 & 0xFFFFFFFFFFFFFFF8));
    v87 = (char *)(v12 + 2 * (v83 & 0xFFFFFFFFFFFFFFF8));
    v127 = (int16x8_t *)(v12 + 2 * v85);
    v128 = (int8x8_t *)(v77 + v85);
    v129 = v85 - (v83 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v130 = *v127++;
      *v128++ = vmovn_s16(v130);
      v129 += 8;
    }
    while (v129);
    if (v83 == (v83 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_56;
    do
    {
LABEL_154:
      v88 = *v87;
      v87 += 2;
      *v86++ = v88;
    }
    while (v86 != v79);
    goto LABEL_56;
  }
  if (!(_DWORD)v78)
    goto LABEL_179;
  if ((_DWORD)v78 != 1)
  {
LABEL_178:
    memcpy((void *)v77, (const void *)v12, v78);
    goto LABEL_179;
  }
  *(_BYTE *)v77 = *(_BYTE *)v12;
  *(_QWORD *)buf = v29;
LABEL_57:
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v13, (StringImpl *)v12);
    v34 = v152;
    if (!v152)
      goto LABEL_67;
    goto LABEL_62;
  }
  *(_DWORD *)v13 -= 2;
LABEL_59:
  v34 = v152;
  if (!v152)
    goto LABEL_67;
LABEL_62:
  if (*(_DWORD *)v34 == 2)
    WTF::StringImpl::destroy(v34, (StringImpl *)v12);
  else
    *(_DWORD *)v34 -= 2;
LABEL_67:
  WebCore::Document::addConsoleMessage();
  v36 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
LABEL_71:
  ++*(_DWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 217) = 1;
  if (*(_DWORD *)(a1 + 92))
    *(_DWORD *)(a1 + 92) = 0;
  result = (WTF *)WebCore::WebSocketDeflateFramer::didFail((WebCore::WebSocketDeflateFramer *)(a1 + 328));
  *(_BYTE *)(a1 + 232) = 0;
  if (*(_DWORD *)(a1 + 248))
  {
    if (*(_DWORD *)(a1 + 252))
      *(_DWORD *)(a1 + 252) = 0;
    result = *(WTF **)(a1 + 240);
    if (result)
    {
      *(_QWORD *)(a1 + 240) = 0;
      *(_DWORD *)(a1 + 248) = 0;
      result = (WTF *)WTF::fastFree(result, v38);
    }
  }
  v39 = *(_QWORD *)(a1 + 56);
  if (v39)
  {
    result = *(WTF **)(v39 + 8);
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t *))(*(_QWORD *)result + 40))(result, a2);
  }
  v40 = *(unsigned int **)(a1 + 72);
  if (v40)
  {
    if (!*(_BYTE *)(a1 + 216))
    {
      v41 = v40 + 2;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
      result = (WTF *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v40 + 40))(v40);
      v40[16] = 3;
      do
      {
        v43 = __ldaxr(v41);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v41));
      if (!v44)
      {
        atomic_store(1u, v41);
        v151 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v151 = off_1E9D6AA68;
        v151[1] = v41;
        *(_QWORD *)buf = v151;
        WTF::ensureOnMainThread();
        result = *(WTF **)buf;
        *(_QWORD *)buf = 0;
        if (result)
          result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)a1, v38);
    return (WTF *)WTF::fastFree(v45, v46);
  }
  else
  {
    --*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    v2 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::WebSocketChannel::fail(uint64_t a1, uint64_t *a2)
{
  return WebCore::WebSocketChannel::fail(a1 - 16, a2);
}

unsigned int *WebCore::WebSocketChannel::disconnect(WebCore::WebSocketChannel *this)
{
  void *v2;
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int *v18;

  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8))
        WebCore::LegacyWebSocketInspectorInstrumentation::didCloseWebSocket();
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!result)
    goto LABEL_8;
  do
  {
    v5 = __ldaxr(result);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, result));
  if (!v6)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v2);
    v7 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (!v7)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v7 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (!v7)
      goto LABEL_11;
  }
  do
  {
    v8 = __ldaxr((unsigned int *)v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)v7));
  if (!v9)
  {
    atomic_store(1u, (unsigned int *)v7);
    v15 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v15)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v15));
    v16 = *(WTF **)(v7 + 16);
    if (v16)
    {
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 0;
      WTF::fastFree(v16, v2);
    }
    result = (unsigned int *)WTF::fastFree((WTF *)v7, v2);
  }
LABEL_11:
  v10 = (unsigned int *)*((_QWORD *)this + 9);
  if (v10)
  {
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 40))(v10);
    v10[16] = 3;
    do
    {
      v13 = __ldaxr(v11);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v11));
    if (!v14)
    {
      atomic_store(1u, v11);
      v17 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v17 = off_1E9D6AA68;
      *((_QWORD *)v17 + 1) = v11;
      v18 = v17;
      WTF::ensureOnMainThread();
      result = v18;
      if (v18)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::WebSocketChannel::disconnect(WebCore::WebSocketChannel *this)
{
  return WebCore::WebSocketChannel::disconnect((WebCore::WebSocketChannel *)((char *)this - 16));
}

uint64_t WebCore::WebSocketChannel::suspend(uint64_t this)
{
  *(_BYTE *)(this + 152) = 1;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::suspend(uint64_t this)
{
  *(_BYTE *)(this + 136) = 1;
  return this;
}

uint64_t WebCore::WebSocketChannel::resume(uint64_t this)
{
  uint64_t v1;

  *(_BYTE *)(this + 152) = 0;
  if (*(_DWORD *)(this + 92) || *(_BYTE *)(this + 216))
  {
    v1 = *(_QWORD *)(this + 56);
    if (v1
      && *(_QWORD *)(v1 + 8)
      && ((*(_QWORD *)(this + 128) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(_QWORD *)(this + 128) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      return WebCore::TimerBase::start();
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::resume(uint64_t this)
{
  uint64_t v1;

  *(_BYTE *)(this + 136) = 0;
  if (*(_DWORD *)(this + 76) || *(_BYTE *)(this + 200))
  {
    v1 = *(_QWORD *)(this + 40);
    if (v1
      && *(_QWORD *)(v1 + 8)
      && ((*(_QWORD *)(this + 112) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(_QWORD *)(this + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      return WebCore::TimerBase::start();
    }
  }
  return this;
}

WTF *WebCore::WebSocketChannel::didOpenSocketStream(WTF *this, WebCore::SocketStreamHandle *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::CookieJar *v6;
  const WTF::URL *v7;
  StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  _QWORD *v11;
  StringImpl *v12;
  WTF::StringImpl *v13;
  char *v14;
  uint64_t v15;
  StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  StringImpl *v22;
  void *v23;
  WTF::StringImpl *v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  __int16 v30;
  char v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  WTF *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  __int16 v41;
  char v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];
  char v48;

  v2 = *((_QWORD *)this + 6);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = (uint64_t)this;
    if (*((_QWORD *)this + 28) && WebCore::LegacyWebSocketInspectorInstrumentation::hasFrontends(this))
    {
      v19 = *(unsigned int **)(v4 + 48);
      if (v19)
      {
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
      }
      v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v21 = &off_1E9D6ABB8;
      *((_QWORD *)v21 + 1) = v19;
      v27 = 0;
      v26 = v21;
      WebCore::WebSocketHandshake::clientHandshakeRequest();
      WebCore::LegacyWebSocketInspectorInstrumentation::willSendWebSocketHandshakeRequest();
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v38, v22);
      v24 = v26;
      v26 = 0;
      if (v24)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
      WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0::~$_0(&v27, v23);
    }
    WebCore::WebSocketHandshake::clientHandshakeMessage(*(WebCore::WebSocketHandshake **)(v4 + 64));
    LOBYTE(v38) = 0;
    v48 = 0;
    if (*(_BYTE *)(v4 + 155))
    {
      v5 = *(_QWORD *)(v4 + 48);
      v6 = v5 ? *(WebCore::CookieJar **)(v5 + 8) : 0;
      WebCore::WebSocketHandshake::httpURLForAuthenticationAndCookies(*(WebCore::WebSocketHandshake **)(v4 + 64));
      WebCore::CookieJar::cookieRequestHeaderFieldProxy(v6, (const WebCore::Document *)&v26, v7);
      v38 = v27;
      v39 = v28;
      v40 = v29;
      LODWORD(v28) = v28 & 0xFFFFFFFE;
      v41 = v30;
      v42 = v31;
      v43 = v32;
      v44 = v33;
      v45 = v34;
      LODWORD(v33) = v33 & 0xFFFFFFFE;
      *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)((char *)v36 + 9);
      v47[0] = v36[0];
      v46 = v35;
      v48 = 1;
      v32 = 0;
      v27 = 0;
      v9 = v26;
      v26 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    ++*(_DWORD *)(v4 + 8);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E9D6ABE0;
    v10[1] = v4;
    v10[2] = v4;
    v25 = v10;
    if ((*((_DWORD *)a2 + 16) | 2) == 2)
    {
      v11 = v10;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::WebSocketChannel::fail(v4, (uint64_t *)&v27);
      v13 = v27;
      v27 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v12);
          v25 = 0;
          goto LABEL_23;
        }
        *(_DWORD *)v13 -= 2;
      }
      v25 = 0;
    }
    else
    {
      if (v37)
      {
        v14 = (char *)v37 + 16;
        v15 = *((_QWORD *)v37 + 1);
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      (*(void (**)(WebCore::SocketStreamHandle *, char *, uint64_t, WTF::StringImpl **, _QWORD **))(*(_QWORD *)a2 + 32))(a2, v14, v15, &v38, &v25);
      v11 = v25;
      v25 = 0;
      if (!v11)
      {
LABEL_24:
        if (!v48)
          goto LABEL_33;
        v17 = v43;
        v43 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, v16);
            v18 = v38;
            v38 = 0;
            if (!v18)
              goto LABEL_33;
LABEL_31:
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::destroy(v18, v16);
              this = v37;
              v37 = 0;
              if (!this)
                return this;
              goto LABEL_34;
            }
            *(_DWORD *)v18 -= 2;
LABEL_33:
            this = v37;
            v37 = 0;
            if (!this)
              return this;
LABEL_34:
            if (*(_DWORD *)this == 1)
              return (WTF *)WTF::fastFree(this, v16);
            --*(_DWORD *)this;
            return this;
          }
          *(_DWORD *)v17 -= 2;
        }
        v18 = v38;
        v38 = 0;
        if (!v18)
          goto LABEL_33;
        goto LABEL_31;
      }
    }
LABEL_23:
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    goto LABEL_24;
  }
  return this;
}

_QWORD *WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0::~$_0(_QWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;

  v2 = result;
  v3 = *result;
  *result = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v7, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::didCloseSocketStream(WebCore::WebSocketChannel *this, WebCore::SocketStreamHandle *a2)
{
  void *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  unsigned int *v21;
  _QWORD *v22;
  WTF *v23;
  uint64_t v24;

  v3 = (void *)*((_QWORD *)this + 28);
  if (v3)
  {
    v4 = *((_QWORD *)this + 6);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
        WebCore::LegacyWebSocketInspectorInstrumentation::didCloseWebSocket();
    }
  }
  *((_BYTE *)this + 216) = 1;
  if ((*((_QWORD *)this + 24) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 24) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::WebSocketChannel *)((char *)this + 160));
  }
  if (*((_DWORD *)this + 76) != 2)
  {
    WTF::Deque<std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>,0ul>::destroyAll((uint64_t *)this + 34, v3);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 35) = 0;
    v5 = (WTF *)*((_QWORD *)this + 36);
    if (v5)
    {
      *((_QWORD *)this + 36) = 0;
      *((_DWORD *)this + 74) = 0;
      WTF::fastFree(v5, v3);
    }
    *((_DWORD *)this + 76) = 2;
    if (*((_DWORD *)this + 80) == 1)
    {
      WebCore::FileReaderLoader::cancel(*((WebCore::FileReaderLoader **)this + 39));
      WebCore::WebSocketChannel::didFail((uint64_t)this, 0x10u);
    }
  }
  result = *((_QWORD *)this + 9);
  if (!result)
    goto LABEL_30;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *((_DWORD *)this + 55) = result;
  if (*((_BYTE *)this + 152))
    return result;
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    *((_QWORD *)this + 7) = 0;
    do
    {
      v9 = __ldaxr((unsigned int *)v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v7));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v7);
      WTF::fastFree((WTF *)v7, v3);
    }
  }
  else
  {
    v8 = 0;
    *((_QWORD *)this + 7) = 0;
  }
  result = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)result);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)result));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)result);
      v19 = *(unsigned int *)(result + 28);
      v23 = (WTF *)result;
      if ((_DWORD)v19)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (StringImpl *)(*(_QWORD *)(result + 16) + 32 * v19));
        result = (uint64_t)v23;
      }
      v20 = *(WTF **)(result + 16);
      if (v20)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        WTF::fastFree(v20, v3);
        result = (uint64_t)v23;
      }
      result = WTF::fastFree((WTF *)result, v3);
      v13 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = 0;
      if (!v13)
        goto LABEL_28;
      goto LABEL_25;
    }
  }
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
LABEL_25:
    v14 = (unsigned int *)(v13 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      v21 = v14;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = off_1E9D6AA68;
      v22[1] = v21;
      v24 = (uint64_t)v22;
      WTF::ensureOnMainThread();
      result = v24;
      if (v24)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
  }
LABEL_28:
  if (v8)
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, char *))(*(_QWORD *)v8 + 64))(v8, *((unsigned int *)this + 55), *((unsigned __int8 *)this + 154), *((unsigned __int16 *)this + 128), (char *)this + 264);
LABEL_30:
  if (*((_DWORD *)this + 2) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel(this, v3);
    return WTF::fastFree(v17, v18);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::didReceiveSocketStreamData(uint64_t this, StringImpl *a2, void *__src, size_t __n)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v4 = this;
  ++*(_DWORD *)(this + 8);
  v5 = *(_QWORD *)(this + 48);
  if (!v5 || !*(_QWORD *)(v5 + 8))
    goto LABEL_22;
  if (!__n)
  {
    v11 = (unsigned int *)((char *)a2 + 8);
    do
      v15 = __ldaxr(v11);
    while (__stlxr(v15 + 1, v11));
    this = (*(uint64_t (**)(StringImpl *))(*(_QWORD *)a2 + 40))(a2);
    *((_DWORD *)a2 + 16) = 3;
    do
    {
      v16 = __ldaxr(v11);
      v14 = --v16 == 0;
    }
    while (__stlxr(v16, v11));
LABEL_21:
    if (v14)
    {
      atomic_store(1u, v11);
      v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = off_1E9D6AA68;
      *((_QWORD *)v29 + 1) = v11;
      v30 = v29;
      WTF::ensureOnMainThread();
      this = (uint64_t)v30;
      v30 = 0;
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
    goto LABEL_22;
  }
  v8 = *(_QWORD *)(this + 56);
  if (!v8 || !*(_QWORD *)(v8 + 8))
  {
    *(_BYTE *)(this + 217) = 1;
    v11 = (unsigned int *)((char *)a2 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    this = (*(uint64_t (**)(StringImpl *))(*(_QWORD *)a2 + 40))(a2);
    *((_DWORD *)a2 + 16) = 3;
    do
    {
      v13 = __ldaxr(v11);
      v14 = --v13 == 0;
    }
    while (__stlxr(v13, v11));
    goto LABEL_21;
  }
  if (*(_BYTE *)(this + 217))
    goto LABEL_22;
  v9 = *(unsigned int *)(this + 92);
  v10 = __n + v9;
  if (!__CFADD__(__n, v9))
  {
    v20 = *(unsigned int *)(this + 88);
    if (v10 > v20)
    {
      v21 = v20 + (v20 >> 2);
      if (v21 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      if (v22 <= v10)
        v23 = __n + v9;
      else
        v23 = v22;
      if (HIDWORD(v23))
        goto LABEL_48;
      v24 = *(void **)(this + 80);
      v25 = (void *)WTF::fastMalloc((WTF *)v23);
      *(_DWORD *)(v4 + 88) = v23;
      *(_QWORD *)(v4 + 80) = v25;
      memcpy(v25, v24, v9);
      if (v24)
      {
        if (*(void **)(v4 + 80) == v24)
        {
          *(_QWORD *)(v4 + 80) = 0;
          *(_DWORD *)(v4 + 88) = 0;
        }
        WTF::fastFree((WTF *)v24, v26);
      }
    }
    v27 = *(unsigned int *)(v4 + 92);
    if (v10 >= v27)
    {
      this = (uint64_t)memcpy((void *)(*(_QWORD *)(v4 + 80) + v27), __src, __n);
      *(_DWORD *)(v4 + 92) = v10;
      do
      {
        if (*(_BYTE *)(v4 + 152))
          break;
        v28 = *(_QWORD *)(v4 + 56);
        if (!v28)
          break;
        if (!*(_QWORD *)(v28 + 8))
          break;
        if (!*(_DWORD *)(v4 + 92))
          break;
        this = WebCore::WebSocketChannel::processBuffer((WebCore::WebSocketChannel *)v4);
      }
      while ((this & 1) != 0);
      goto LABEL_22;
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x1D7FE534CLL);
  }
  *(_BYTE *)(this + 217) = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::WebSocketChannel::fail(v4, (uint64_t *)&v30);
  this = (uint64_t)v30;
  v30 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_22:
  if (*(_DWORD *)(v4 + 8) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)v4, a2);
    return WTF::fastFree(v17, v18);
  }
  else
  {
    --*(_DWORD *)(v4 + 8);
  }
  return this;
}

BOOL WebCore::WebSocketChannel::processBuffer(WebCore::WebSocketChannel *this)
{
  _BOOL8 v1;
  StringImpl *v3;
  int v4;
  int ServerHandshake;
  unsigned int v6;
  WTF::StringImpl *v7;
  int v8;
  WTF *v9;
  void *v10;
  int v11;
  char v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::InflateResultHolder *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  StringImpl *v30;
  WTF::StringImpl *v31;
  BOOL v32;
  unsigned int v33;
  StringImpl *v34;
  size_t v35;
  void *v36;
  size_t v37;
  size_t v38;
  void *v39;
  int v40;
  int v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  StringImpl *v56;
  void *v57;
  int v58;
  void *v59;
  int v60;
  WTF::StringImpl *v61;
  size_t v62;
  void *v63;
  int v64;
  size_t v65;
  void *v66;
  size_t v67;
  size_t v68;
  void *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  void *v73;
  int v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  StringImpl *v81;
  WTF::StringImpl *v82;
  char v83;
  void *__src;
  size_t __n;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  int v90;
  WebCore::InflateResultHolder *v91;
  WTF::StringImpl *v92;
  const void *v93;

  if (!*((_BYTE *)this + 217))
  {
    if (*((_BYTE *)this + 154))
    {
      v1 = 0;
      *((_DWORD *)this + 23) = 0;
      return v1;
    }
    ++*((_DWORD *)this + 2);
    if (WebCore::WebSocketHandshake::mode(*((WebCore::WebSocketHandshake **)this + 8)))
    {
      if (WebCore::WebSocketHandshake::mode(*((WebCore::WebSocketHandshake **)this + 8)) == 3)
      {
        WebCore::WebSocketFrame::WebSocketFrame();
        v92 = 0;
        v93 = 0;
        v4 = WebCore::WebSocketFrame::parseFrame();
        if (v4 == 1)
        {
          v1 = 0;
          goto LABEL_40;
        }
        if (v4 == 2)
        {
          WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v92);
          v1 = 0;
          goto LABEL_40;
        }
        WebCore::WebSocketDeflateFramer::inflate((WebCore::WebSocketChannel *)((char *)this + 328), (WebCore::WebSocketFrame *)&v82);
        if (*((_BYTE *)v91 + 8))
        {
          v11 = (int)v82;
          if (v82 > 0xA || ((1 << (char)v82) & 0x707) == 0)
          {
            WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v88, "Unrecognized frame opcode: ", 28, v82);
            if (!v88)
            {
              __break(0xC471u);
              JUMPOUT(0x1D7FE5F60);
            }
LABEL_67:
            WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v88);
            v14 = v88;
            v88 = 0;
            if (!v14)
              goto LABEL_38;
            goto LABEL_34;
          }
          v12 = BYTE6(v82);
          v13 = HIBYTE(v82);
          if (!(BYTE6(v82) | HIBYTE(v82)))
          {
            if (v83)
              goto LABEL_25;
            v32 = (v82 & 0xFFFFFFFE) == 8 || (_DWORD)v82 == 10;
            if (v32 && !BYTE4(v82))
            {
              WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v88, "Received fragmented control frame: opcode = ", 45, v82);
              if (!v88)
              {
                __break(0xC471u);
                JUMPOUT(0x1D7FE57D4);
              }
              goto LABEL_67;
            }
            v33 = (_DWORD)v82 - 8;
            if (((_DWORD)v82 - 8) <= 2)
            {
              if ((WebCore::WebSocketFrame::needsExtendedLengthField((WebCore::WebSocketFrame *)__n) & 1) != 0)
              {
                WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)&v88, __n);
                WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v88);
                v14 = v88;
                v88 = 0;
                if (!v14)
                {
LABEL_38:
                  v1 = 0;
                  v16 = v91;
                  v91 = 0;
                  if (!v16)
                    goto LABEL_40;
                  goto LABEL_39;
                }
LABEL_34:
                if (*(_DWORD *)v14 == 2)
                {
                  WTF::StringImpl::destroy(v14, v3);
                  goto LABEL_38;
                }
                *(_DWORD *)v14 -= 2;
                v1 = 0;
                v16 = v91;
                v91 = 0;
                if (v16)
                {
LABEL_39:
                  WebCore::InflateResultHolder::~InflateResultHolder(v16);
                  WTF::fastFree(v17, v18);
                }
LABEL_40:
                v19 = v92;
                v92 = 0;
                if (!v19)
                  goto LABEL_43;
                v20 = *(_DWORD *)v19 - 2;
                if (*(_DWORD *)v19 != 2)
                  goto LABEL_42;
                goto LABEL_100;
              }
              v11 = (int)v82;
              v33 = (_DWORD)v82 - 8;
            }
            if (*((_BYTE *)this + 232) && v11 && v33 >= 3)
            {
LABEL_25:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v88);
              v14 = v88;
              v88 = 0;
              if (!v14)
                goto LABEL_38;
              goto LABEL_34;
            }
            WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrame();
            switch((int)v82)
            {
              case 0:
                if (!*((_BYTE *)this + 232))
                  goto LABEL_25;
                v35 = __n;
                if (__n)
                {
                  v36 = __src;
                  v37 = *((unsigned int *)this + 63);
                  v38 = __n + v37;
                  if (__n + v37 > *((unsigned int *)this + 62))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 30, (WTF *)(__n + v37));
                    v37 = *((unsigned int *)this + 63);
                  }
                  if (v38 < v37)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1D7FE5F68);
                  }
                  memcpy((void *)(*((_QWORD *)this + 30) + v37), v36, v35);
                  *((_DWORD *)this + 63) = v38;
                }
                v39 = (void *)*((_QWORD *)this + 10);
                v40 = (_DWORD)v93 - (_DWORD)v39;
                memmove(v39, v93, *((unsigned int *)this + 23) - ((_BYTE *)v93 - (_BYTE *)v39));
                v41 = *((_DWORD *)this + 23) - v40;
                *((_DWORD *)this + 23) = v41;
                if (!BYTE4(v82))
                  goto LABEL_134;
                v42 = (WTF::StringImpl *)*((_QWORD *)this + 30);
                v88 = v42;
                v43 = *((_DWORD *)this + 62);
                v3 = (StringImpl *)*((unsigned int *)this + 63);
                *((_QWORD *)this + 30) = 0;
                *((_QWORD *)this + 31) = 0;
                v89 = v43;
                v90 = (int)v3;
                *((_BYTE *)this + 232) = 0;
                v44 = *((_DWORD *)this + 59);
                if (v44 == 2)
                {
                  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 7) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 7) + 8), &v88);
                  v42 = v88;
                  goto LABEL_170;
                }
                if (v44 != 1)
                  goto LABEL_170;
                v87 = 0;
                if ((_DWORD)v3)
                {
                  WTF::String::fromUTF8();
                  v47 = v86;
                  v46 = v87;
                  v86 = 0;
                  v87 = v47;
                  if (v46)
                  {
                    v48 = *(_DWORD *)v46 - 2;
                    if (*(_DWORD *)v46 != 2)
                      goto LABEL_92;
                    WTF::StringImpl::destroy(v46, v45);
                    v46 = v86;
                    v86 = 0;
                    if (v46)
                    {
                      v48 = *(_DWORD *)v46 - 2;
                      if (*(_DWORD *)v46 != 2)
                      {
LABEL_92:
                        *(_DWORD *)v46 = v48;
                        if (!v87)
                          goto LABEL_93;
LABEL_165:
                        (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 7) + 8)
                                                                           + 24))(*(_QWORD *)(*((_QWORD *)this + 7) + 8), &v87);
LABEL_166:
                        v51 = v87;
                        v87 = 0;
                        if (v51)
                          goto LABEL_167;
LABEL_170:
                        if (!v42)
                          goto LABEL_111;
                        v88 = 0;
                        v89 = 0;
                        WTF::fastFree(v42, v3);
                        v41 = *((_DWORD *)this + 23);
                        goto LABEL_134;
                      }
                      WTF::StringImpl::destroy(v46, v49);
                      if (v87)
                        goto LABEL_165;
LABEL_93:
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v86);
                      v50 = v86;
                      v86 = 0;
                      if (v50)
                      {
                        if (*(_DWORD *)v50 == 2)
                        {
                          WTF::StringImpl::destroy(v50, v3);
                          v51 = v87;
                          v87 = 0;
                          if (!v51)
                            goto LABEL_170;
                        }
                        else
                        {
                          *(_DWORD *)v50 -= 2;
                          v51 = v87;
                          v87 = 0;
                          if (!v51)
                            goto LABEL_170;
                        }
LABEL_167:
                        if (*(_DWORD *)v51 == 2)
                          WTF::StringImpl::destroy(v51, v3);
                        else
                          *(_DWORD *)v51 -= 2;
                        goto LABEL_170;
                      }
                      goto LABEL_166;
                    }
                  }
                }
                else
                {
                  WTF::String::operator=(&v87, v3);
                }
                if (v87)
                  goto LABEL_165;
                goto LABEL_93;
              case 1:
                if (!BYTE4(v82))
                {
                  *((_BYTE *)this + 232) = 1;
                  *((_DWORD *)this + 59) = 1;
                  v65 = __n;
                  if (!__n)
                    goto LABEL_133;
                  v66 = __src;
                  v67 = *((unsigned int *)this + 63);
                  v68 = __n + v67;
                  if (__n + v67 > *((unsigned int *)this + 62))
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 30, (WTF *)(__n + v67));
                    v67 = *((unsigned int *)this + 63);
                  }
                  if (v68 < v67)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1D7FE5C4CLL);
                  }
                  goto LABEL_132;
                }
                v88 = 0;
                if (__n)
                {
                  WTF::String::fromUTF8();
                  v54 = v87;
                  v53 = v88;
                  v87 = 0;
                  v88 = v54;
                  if (!v53)
                    goto LABEL_144;
                  v55 = *(_DWORD *)v53 - 2;
                  if (*(_DWORD *)v53 != 2)
                    goto LABEL_108;
                  WTF::StringImpl::destroy(v53, v52);
                  v53 = v87;
                  v87 = 0;
                  if (!v53)
                    goto LABEL_144;
                  v55 = *(_DWORD *)v53 - 2;
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, v56);
                  else
LABEL_108:
                    *(_DWORD *)v53 = v55;
                }
                else
                {
                  WTF::String::operator=(&v88, 0);
                }
LABEL_144:
                v73 = (void *)*((_QWORD *)this + 10);
                v74 = (_DWORD)v93 - (_DWORD)v73;
                memmove(v73, v93, *((unsigned int *)this + 23) - ((_BYTE *)v93 - (_BYTE *)v73));
                *((_DWORD *)this + 23) -= v74;
                if (v88)
                {
                  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 7) + 8) + 24))(*(_QWORD *)(*((_QWORD *)this + 7) + 8), &v88);
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v87);
                  v75 = v87;
                  v87 = 0;
                  if (v75)
                  {
                    if (*(_DWORD *)v75 == 2)
                      WTF::StringImpl::destroy(v75, v3);
                    else
                      *(_DWORD *)v75 -= 2;
                  }
                }
                v76 = v88;
                v88 = 0;
                if (v76)
                {
                  if (*(_DWORD *)v76 == 2)
                    WTF::StringImpl::destroy(v76, v3);
                  else
                    *(_DWORD *)v76 -= 2;
                  v41 = *((_DWORD *)this + 23);
                  goto LABEL_134;
                }
                goto LABEL_111;
              case 2:
                if (BYTE4(v82))
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)&v88, (__int128 *)__src, (WTF *)__n);
                  v59 = (void *)*((_QWORD *)this + 10);
                  v60 = (_DWORD)v93 - (_DWORD)v59;
                  memmove(v59, v93, *((unsigned int *)this + 23) - ((_BYTE *)v93 - (_BYTE *)v59));
                  *((_DWORD *)this + 23) -= v60;
                  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 7) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 7) + 8), &v88);
                  v61 = v88;
                  if (!v88)
                    goto LABEL_111;
                  v88 = 0;
                  v89 = 0;
                  WTF::fastFree(v61, v3);
                  v41 = *((_DWORD *)this + 23);
                }
                else
                {
                  *((_BYTE *)this + 232) = 1;
                  *((_DWORD *)this + 59) = 2;
                  v65 = __n;
                  if (__n)
                  {
                    v66 = __src;
                    v67 = *((unsigned int *)this + 63);
                    v68 = __n + v67;
                    if (__n + v67 > *((unsigned int *)this + 62))
                    {
                      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 30, (WTF *)(__n + v67));
                      v67 = *((unsigned int *)this + 63);
                    }
                    if (v68 < v67)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1D7FE5F70);
                    }
LABEL_132:
                    memcpy((void *)(*((_QWORD *)this + 30) + v67), v66, v65);
                    *((_DWORD *)this + 63) = v68;
                  }
LABEL_133:
                  v69 = (void *)*((_QWORD *)this + 10);
                  v70 = (_DWORD)v93 - (_DWORD)v69;
                  memmove(v69, v93, *((unsigned int *)this + 23) - ((_BYTE *)v93 - (_BYTE *)v69));
                  v41 = *((_DWORD *)this + 23) - v70;
                  *((_DWORD *)this + 23) = v41;
                }
                goto LABEL_134;
              case 8:
                v62 = __n;
                if (__n == 1)
                {
                  *((_WORD *)this + 128) = 1006;
                  goto LABEL_25;
                }
                if (!__n)
                {
                  *((_WORD *)this + 128) = 1005;
LABEL_118:
                  WTF::String::operator=((WTF::StringImpl **)this + 33, v34);
                  goto LABEL_119;
                }
                v71 = __rev16(*(unsigned __int16 *)__src);
                *((_WORD *)this + 128) = v71;
                v72 = v71 - 1005;
                if (v72 <= 0xA && ((1 << v72) & 0x403) != 0)
                {
                  *((_WORD *)this + 128) = 1006;
                  goto LABEL_25;
                }
                if (v62 < 3)
                  goto LABEL_118;
                WTF::String::fromUTF8();
                v78 = v88;
                v88 = 0;
                v79 = (WTF::StringImpl *)*((_QWORD *)this + 33);
                *((_QWORD *)this + 33) = v78;
                if (!v79)
                  goto LABEL_119;
                v80 = *(_DWORD *)v79 - 2;
                if (*(_DWORD *)v79 != 2)
                  goto LABEL_161;
                WTF::StringImpl::destroy(v79, v77);
                v79 = v88;
                v88 = 0;
                if (v79)
                {
                  v80 = *(_DWORD *)v79 - 2;
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, v81);
                  else
LABEL_161:
                    *(_DWORD *)v79 = v80;
                }
LABEL_119:
                v63 = (void *)*((_QWORD *)this + 10);
                v64 = (_DWORD)v93 - (_DWORD)v63;
                memmove(v63, v93, *((unsigned int *)this + 23) - ((_BYTE *)v93 - (_BYTE *)v63));
                *((_DWORD *)this + 23) -= v64;
                *((_BYTE *)this + 154) = 1;
                WebCore::WebSocketChannel::startClosingHandshake(this, *((unsigned __int16 *)this + 128), (WebCore::WebSocketChannel *)((char *)this + 264));
                if (*((_BYTE *)this + 153))
                {
                  if (!*((_DWORD *)this + 76))
                    *((_DWORD *)this + 76) = 1;
LABEL_110:
                  WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)this, v3);
                }
LABEL_111:
                v41 = *((_DWORD *)this + 23);
LABEL_134:
                if (v41)
                {
                  v1 = 1;
                  v16 = v91;
                  v91 = 0;
                  if (v16)
                    goto LABEL_39;
                }
                else
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)this + 80, v3);
                  v1 = 0;
                  v16 = v91;
                  v91 = 0;
                  if (v16)
                    goto LABEL_39;
                }
                goto LABEL_40;
              case 9:
                WebCore::WebSocketChannel::enqueueRawFrame((uint64_t)this, 10, (uint64_t)__src, __n);
                v57 = (void *)*((_QWORD *)this + 10);
                v58 = (_DWORD)v93 - (_DWORD)v57;
                memmove(v57, v93, *((unsigned int *)this + 23) - ((_BYTE *)v93 - (_BYTE *)v57));
                *((_DWORD *)this + 23) -= v58;
                goto LABEL_110;
              default:
                goto LABEL_133;
            }
          }
          WTF::tryFastCompactMalloc((WTF *)0x52);
          v15 = v88;
          if (!v88)
          {
            __break(0xC471u);
            JUMPOUT(0x1D7FE5F58);
          }
          *(_QWORD *)v88 = 0x3E00000002;
          qmemcpy((char *)v15 + 20, "One or more reserved bits are on: reserved2 = ", 46);
          *((_QWORD *)v15 + 1) = (char *)v15 + 20;
          *((_DWORD *)v15 + 4) = 4;
          *((_BYTE *)v15 + 66) = v12 | 0x30;
          qmemcpy((char *)v15 + 67, ", reserved3 = ", 14);
          *((_BYTE *)v15 + 81) = v13 | 0x30;
        }
        else
        {
          v15 = (WTF::StringImpl *)*((_QWORD *)v91 + 2);
          if (v15)
            *(_DWORD *)v15 += 2;
        }
        v88 = v15;
        WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v88);
        v14 = v88;
        v88 = 0;
        if (!v14)
          goto LABEL_38;
        goto LABEL_34;
      }
    }
    else
    {
      ServerHandshake = WebCore::WebSocketHandshake::readServerHandshake();
      if (ServerHandshake >= 1)
      {
        v6 = ServerHandshake;
        if (WebCore::WebSocketHandshake::mode(*((WebCore::WebSocketHandshake **)this + 8)) == 3)
        {
          if (*((_QWORD *)this + 28))
          {
            WebCore::WebSocketHandshake::serverHandshakeResponse(*((WebCore::WebSocketHandshake **)this + 8));
            WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketHandshakeResponse();
          }
          WebCore::WebSocketHandshake::serverSetCookie(*((WebCore::WebSocketHandshake **)this + 8));
          if (v88)
          {
            if (*((_DWORD *)v88 + 1))
            {
              v22 = *((_QWORD *)this + 6);
              if (v22)
              {
                v23 = *(_QWORD *)(v22 + 8);
                if (v23)
                {
                  v24 = *(_QWORD *)(v23 + 528);
                  if (v24)
                  {
                    v25 = *(_QWORD *)(v24 + 8);
                    if (v25)
                    {
                      v26 = *(_QWORD *)(v25 + 24);
                      if (v26)
                      {
                        v27 = *(_QWORD *)(v26 + 8);
                        if (v27)
                        {
                          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v27 + 888) + 16))(*(_QWORD *)(v27 + 888)))
                          {
                            v28 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
                            v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 528) + 8) + 24)
                                                        + 8)
                                            + 888);
                            WebCore::WebSocketHandshake::httpURLForAuthenticationAndCookies(*((WebCore::WebSocketHandshake **)this
                                                                                            + 8));
                            (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v29 + 8))(v29, v28, &v82, &v88);
                            v31 = v82;
                            v82 = 0;
                            if (v31)
                            {
                              if (*(_DWORD *)v31 == 2)
                                WTF::StringImpl::destroy(v31, v30);
                              else
                                *(_DWORD *)v31 -= 2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          memmove(*((void **)this + 10), (const void *)(*((_QWORD *)this + 10) + v6), *((unsigned int *)this + 23) - (unint64_t)v6);
          *((_DWORD *)this + 23) -= v6;
          (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 7) + 8));
          v1 = *((_DWORD *)this + 23) != 0;
          v19 = v88;
          v88 = 0;
          if (!v19)
          {
LABEL_43:
            v8 = *((_DWORD *)this + 2) - 1;
            if (*((_DWORD *)this + 2) != 1)
              goto LABEL_44;
LABEL_18:
            WebCore::WebSocketChannel::~WebSocketChannel(this, v3);
            WTF::fastFree(v9, v10);
            return v1;
          }
          v20 = *(_DWORD *)v19 - 2;
          if (*(_DWORD *)v19 != 2)
          {
LABEL_42:
            *(_DWORD *)v19 = v20;
            goto LABEL_43;
          }
LABEL_100:
          WTF::StringImpl::destroy(v19, v3);
          v8 = *((_DWORD *)this + 2) - 1;
          if (*((_DWORD *)this + 2) != 1)
            goto LABEL_44;
          goto LABEL_18;
        }
        memmove(*((void **)this + 10), (const void *)(*((_QWORD *)this + 10) + v6), *((unsigned int *)this + 23) - (unint64_t)v6);
        *((_DWORD *)this + 23) -= v6;
        *((_BYTE *)this + 217) = 1;
        WebCore::WebSocketHandshake::failureReason(*((WebCore::WebSocketHandshake **)this + 8));
        WebCore::WebSocketChannel::fail((uint64_t)this, (uint64_t *)&v82);
        v7 = v82;
        v82 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
          {
            WTF::StringImpl::destroy(v7, v3);
            v1 = 0;
            v8 = *((_DWORD *)this + 2) - 1;
            if (*((_DWORD *)this + 2) == 1)
              goto LABEL_18;
            goto LABEL_44;
          }
          *(_DWORD *)v7 -= 2;
        }
      }
    }
    v1 = 0;
    v8 = *((_DWORD *)this + 2) - 1;
    if (*((_DWORD *)this + 2) == 1)
      goto LABEL_18;
LABEL_44:
    *((_DWORD *)this + 2) = v8;
    return v1;
  }
  return 0;
}

uint64_t WebCore::WebSocketChannel::didFailToReceiveSocketStreamData(WebCore::WebSocketChannel *this, WebCore::SocketStreamHandle *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = (unsigned int *)((char *)a2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  result = (*(uint64_t (**)(WebCore::SocketStreamHandle *))(*(_QWORD *)a2 + 40))(a2);
  *((_DWORD *)a2 + 16) = 3;
  do
  {
    v6 = __ldaxr(v3);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v3));
  if (!v7)
  {
    atomic_store(1u, v3);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E9D6AA68;
    v8[1] = v3;
    v9 = (uint64_t)v8;
    WTF::ensureOnMainThread();
    result = v9;
    if (v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

_QWORD *WebCore::WebSocketChannel::didUpdateBufferedAmount(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = result[7];
  if (v3)
  {
    result = *(_QWORD **)(v3 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 48))(result, a3);
  }
  return result;
}

WTF::StringImpl *WebCore::WebSocketChannel::didFailSocketStream(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *result;
  unsigned int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  size_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v32 = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_3;
  }
  v6 = *(WTF::StringImpl **)(a3 + 16);
  if (!v6)
  {
    v17 = *(_DWORD *)a3;
    if ((*(_DWORD *)a3 & 0x80000000) != 0)
    {
      v21 = -v17;
      v18 = 1;
      do
      {
        ++v18;
        v22 = v21 >= 0xA;
        v21 /= 0xAu;
      }
      while (v22);
    }
    else
    {
      v18 = 0;
      v19 = *(_DWORD *)a3;
      do
      {
        ++v18;
        v20 = v19 > 9;
        v19 /= 0xAu;
      }
      while (v20);
    }
    if (v18 < 0
      || (v23 = (v18 + 36), __OFADD__(v18, 36))
      || (WTF::tryFastCompactMalloc((WTF *)(v23 + 20)), (v24 = v33[0]) == 0))
    {
      __break(0xC471u);
LABEL_51:
      JUMPOUT(0x1D7FE6428);
    }
    *(_OWORD *)(v33[0] + 20) = *(_OWORD *)"WebSocket network error: error code ";
    *(_DWORD *)v24 = 2;
    *(_DWORD *)(v24 + 4) = v23;
    *(_QWORD *)(v24 + 8) = v24 + 20;
    *(_DWORD *)(v24 + 16) = 4;
    *(_DWORD *)(v24 + 52) = 543515759;
    *(_OWORD *)(v24 + 36) = *(_OWORD *)"k error: error code ";
    v25 = 0;
    if ((v17 & 0x80000000) != 0)
    {
      v28 = -v17;
      do
      {
        *((_BYTE *)&v33[1] + v25-- + 4) = (v28 % 0xA) | 0x30;
        v20 = v28 > 9;
        v28 /= 0xAu;
      }
      while (v20);
      v29 = v25 + 12;
      v26 = (char *)&v33[1] + v25 + 4;
      *v26 = 45;
      if (v25 + 14 > 14)
        goto LABEL_46;
      if (v29 <= 12)
        v29 = 12;
      v27 = v29 - v25 - 11;
    }
    else
    {
      do
      {
        *((_BYTE *)&v33[1] + v25-- + 4) = (v17 % 0xA) | 0x30;
        v20 = v17 > 9;
        v17 /= 0xAu;
      }
      while (v20);
      if (v25 + 14 > 13)
        goto LABEL_46;
      v26 = (char *)&v33[1] + v25 + 5;
      v27 = -v25;
    }
    memcpy((void *)(v24 + 56), v26, v27);
LABEL_46:
    v32 = (WTF::StringImpl *)v24;
    goto LABEL_3;
  }
  v7 = *((_DWORD *)v6 + 1);
  *(_DWORD *)v6 += 2;
  if (v7 < 0
    || __OFADD__(v7, 25)
    || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((unint64_t)v33, v7 + 25, (*((_DWORD *)v6 + 4) >> 2) & 1, (int8x16_t *)"WebSocket network error: ", 0x19u, (uint64_t)v6), !v33[0]))
  {
    __break(0xC471u);
    goto LABEL_51;
  }
  v32 = (WTF::StringImpl *)v33[0];
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v8);
  else
    *(_DWORD *)v6 -= 2;
LABEL_3:
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrameError();
    WebCore::Document::addConsoleMessage();
  }
  *(_BYTE *)(a1 + 217) = 1;
  v9 = *(_QWORD *)(a1 + 56);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 40))(v10, &v32);
  }
  v11 = a2 + 2;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 40))(a2);
  a2[16] = 3;
  do
  {
    v14 = __ldaxr(v11);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v11));
  if (!v15)
  {
    atomic_store(1u, v11);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v30 = off_1E9D6AA68;
    v30[1] = v11;
    v33[0] = v30;
    WTF::ensureOnMainThread();
    v31 = v33[0];
    v33[0] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::didFinishLoading(WebCore::WebSocketChannel *this, void *a2)
{
  uint64_t result;
  void *v4;
  WTF *v5;
  void *v6;

  *((_DWORD *)this + 80) = 2;
  result = WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)this, a2);
  if (*((_DWORD *)this + 2) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel(this, v4);
    return WTF::fastFree(v5, v6);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::didFinishLoading(WebCore::WebSocketChannel *this, void *a2)
{
  WebCore::WebSocketChannel *v3;
  uint64_t result;
  void *v5;
  WTF *v6;
  void *v7;

  v3 = (WebCore::WebSocketChannel *)((char *)this - 32);
  *((_DWORD *)this + 72) = 2;
  result = WebCore::WebSocketChannel::processOutgoingFrameQueue((uint64_t)this - 32, a2);
  if (*((_DWORD *)this - 6) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel(v3, v5);
    return WTF::fastFree(v6, v7);
  }
  else
  {
    --*((_DWORD *)this - 6);
  }
  return result;
}

WTF::StringImpl *WebCore::WebSocketChannel::didFail(uint64_t a1, unsigned int a2)
{
  WTF::StringImpl *result;
  int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  StringImpl *v11;
  int v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15[3];

  v15[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  result = *(WTF::StringImpl **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 64))(result);
  v5 = 0;
  *(_DWORD *)(a1 + 320) = 3;
  v6 = a2;
  do
  {
    ++v5;
    v7 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v7);
  if ((v5 & 0x80000000) == 0)
  {
    v8 = (v5 + 34);
    if (!__OFADD__(v5, 34))
    {
      result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v8 + 20));
      v9 = v15[0];
      if (v15[0])
      {
        v10 = 0;
        *(_OWORD *)((char *)v15[0] + 20) = *(_OWORD *)"Failed to load Blob: error code = ";
        *(_DWORD *)v9 = 2;
        *((_DWORD *)v9 + 1) = v8;
        *((_QWORD *)v9 + 1) = (char *)v9 + 20;
        *((_DWORD *)v9 + 4) = 4;
        *((_WORD *)v9 + 26) = 8253;
        *(_OWORD *)((char *)v9 + 36) = *(_OWORD *)"lob: error code = ";
        do
        {
          *((_BYTE *)&v15[1] + v10-- + 4) = (a2 % 0xA) | 0x30;
          v7 = a2 > 9;
          a2 /= 0xAu;
        }
        while (v7);
        if (v10 + 14 <= 13)
          memcpy((char *)v9 + 54, (char *)&v15[1] + v10 + 5, -v10);
        v15[0] = v9;
        WebCore::WebSocketChannel::fail(a1, (uint64_t *)v15);
        result = v15[0];
        v15[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            v12 = *(_DWORD *)(a1 + 8) - 1;
            if (*(_DWORD *)(a1 + 8) != 1)
              goto LABEL_16;
LABEL_18:
            WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)a1, v11);
            return (WTF::StringImpl *)WTF::fastFree(v13, v14);
          }
          *(_DWORD *)result -= 2;
        }
        v12 = *(_DWORD *)(a1 + 8) - 1;
        if (*(_DWORD *)(a1 + 8) != 1)
        {
LABEL_16:
          *(_DWORD *)(a1 + 8) = v12;
          return result;
        }
        goto LABEL_18;
      }
    }
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::WebSocketChannel::didFail(uint64_t a1, unsigned int a2)
{
  return WebCore::WebSocketChannel::didFail(a1 - 32, a2);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v15[5];

  v2 = a2;
  v3 = (_QWORD *)result;
  v4 = 0;
  v15[4] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  do
  {
    ++v4;
    v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (v4 < 0
    || (v7 = __OFADD__(v4, 6), v8 = v4 + 6, v7)
    || (v9 = (v8 + 48), __OFADD__(v8, 48))
    || (result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20)), (v10 = v15[0]) == 0))
  {
    *v3 = 0;
    __break(0xC471u);
  }
  else
  {
    v11 = 0;
    *(_OWORD *)(v15[0] + 20) = *(_OWORD *)"Received control frame having too long payload: ";
    *(_DWORD *)v10 = 2;
    *(_DWORD *)(v10 + 4) = v9;
    *(_QWORD *)(v10 + 8) = v10 + 20;
    *(_DWORD *)(v10 + 16) = 4;
    qmemcpy((void *)(v10 + 36), " frame having too long payload: ", 32);
    v12 = v2;
    do
    {
      *((_BYTE *)&v15[3] + v11--) = (v12 % 0xA) | 0x30;
      v6 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v6);
    if (v11 + 26 <= 25)
      result = (uint64_t)memcpy((void *)(v10 + 68), (char *)&v15[3] + v11 + 1, -v11);
    v13 = 0;
    do
    {
      ++v13;
      v6 = v2 > 9;
      v2 /= 0xAuLL;
    }
    while (v6);
    v14 = v10 + 68 + v13;
    *(_WORD *)(v14 + 4) = 29541;
    *(_DWORD *)v14 = 1954112032;
    *v3 = v10;
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(uint64_t result, __int128 *a2, WTF *this)
{
  uint64_t v4;
  WTF *v6;
  _BYTE *v7;
  unint64_t v8;
  __int128 *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;

  v4 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = (_DWORD)this;
  if (!this)
    return v4;
  if (!((unint64_t)this >> 32))
  {
    v6 = (WTF *)a2;
    v7 = (_BYTE *)WTF::fastMalloc(this);
    *(_DWORD *)(v4 + 8) = (_DWORD)this;
    *(_QWORD *)v4 = v7;
    if ((unint64_t)this >= 8 && (unint64_t)(v7 - (_BYTE *)a2) >= 0x20)
    {
      if ((unint64_t)this < 0x20)
      {
        v8 = 0;
        goto LABEL_11;
      }
      v8 = (unint64_t)this & 0xFFFFFFFFFFFFFFE0;
      v9 = a2 + 1;
      v10 = v7 + 16;
      v11 = (unint64_t)this & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = *v9;
        *(v10 - 1) = *(v9 - 1);
        *v10 = v12;
        v9 += 2;
        v10 += 2;
        v11 -= 32;
      }
      while (v11);
      if (this == (WTF *)v8)
        return v4;
      if ((this & 0x18) != 0)
      {
LABEL_11:
        v6 = (WTF *)((char *)a2 + ((unint64_t)this & 0xFFFFFFFFFFFFFFF8));
        v13 = (uint64_t *)((char *)a2 + v8);
        v14 = &v7[v8];
        v15 = v8 - ((unint64_t)this & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v16 = *v13++;
          *v14++ = v16;
          v15 += 8;
        }
        while (v15);
        v7 += (unint64_t)this & 0xFFFFFFFFFFFFFFF8;
        if (this == (WTF *)((unint64_t)this & 0xFFFFFFFFFFFFFFF8))
          return v4;
        goto LABEL_16;
      }
      v6 = (WTF *)((char *)a2 + v8);
      v7 += v8;
    }
    do
    {
LABEL_16:
      v17 = *(_BYTE *)v6;
      v6 = (WTF *)((char *)v6 + 1);
      *v7++ = v17;
    }
    while (v6 != (WTF *)((char *)this + (_QWORD)a2));
    return v4;
  }
  __break(0xC471u);
  return result;
}

WebCore::DeflateResultHolder *WebCore::WebSocketChannel::sendFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF::StringImpl *v13;
  WebCore::DeflateResultHolder *result;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WebCore::DeflateResultHolder *v20;
  _BYTE v21[32];

  WebCore::WebSocketFrame::WebSocketFrame();
  WebCore::LegacyWebSocketInspectorInstrumentation::didSendWebSocketFrame();
  WebCore::WebSocketDeflateFramer::deflate((WebCore::WebSocketDeflateFramer *)(a1 + 328), (WebCore::WebSocketFrame *)v21);
  if (!*((_BYTE *)v20 + 8))
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)v20 + 2);
    if (v9)
      *(_DWORD *)v9 += 2;
    v18 = v9;
    WebCore::WebSocketChannel::fail(a1, (uint64_t *)&v18);
    v11 = v18;
    v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a5 + 16))(*a5, 0);
    result = v20;
    v20 = 0;
    if (result)
      goto LABEL_14;
    return result;
  }
  v18 = 0;
  v19 = 0;
  WebCore::WebSocketFrame::makeFrameData();
  v7 = *(_DWORD **)(a1 + 72);
  v8 = *a5;
  *a5 = 0;
  v17 = v8;
  if ((v7[16] | 2) == 2)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0, 0);
    v17 = 0;
  }
  else
  {
    (*(void (**)(_DWORD *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v7 + 24))(v7, 0, 0, &v17);
    v8 = v17;
    v17 = 0;
    if (!v8)
      goto LABEL_11;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_11:
  v13 = v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    WTF::fastFree(v13, v12);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
LABEL_14:
    WebCore::DeflateResultHolder::~DeflateResultHolder(result);
    return (WebCore::DeflateResultHolder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebCore::WebSocketChannel::clientHandshakeRequest()
{
  return WebCore::WebSocketHandshake::clientHandshakeRequest();
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::clientHandshakeRequest()
{
  return WebCore::WebSocketHandshake::clientHandshakeRequest();
}

uint64_t WebCore::WebSocketChannel::serverHandshakeResponse(WebCore::WebSocketHandshake **this)
{
  return WebCore::WebSocketHandshake::serverHandshakeResponse(this[8]);
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::serverHandshakeResponse(WebCore::WebSocketHandshake **this)
{
  return WebCore::WebSocketHandshake::serverHandshakeResponse(this[6]);
}

void WebBroadcastChannelRegistry::~WebBroadcastChannelRegistry(WebBroadcastChannelRegistry *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E9D6A8E0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;

  *(_QWORD *)this = off_1E9D6A8E0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v5)
      goto LABEL_7;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      v8 = this;
    }
    else
    {
LABEL_7:
      v8 = this;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
    v8 = this;
  }
  WTF::fastFree(v8, a2);
}

uint64_t WebCore::LoaderStrategy::usePingLoad(WebCore::LoaderStrategy *this)
{
  return 1;
}

uint64_t WebCore::LoaderStrategy::shouldPerformSecurityChecks(WebCore::LoaderStrategy *this)
{
  return 0;
}

uint64_t WebCore::LoaderStrategy::havePerformedSecurityChecks()
{
  return 0;
}

void WebCore::LoaderStrategy::ongoingLoads(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::WebSocketChannel::progressIdentifier(WebCore::WebSocketChannel *this)
{
  return *((_QWORD *)this + 28);
}

BOOL WebCore::WebSocketChannel::hasCreatedHandshake(WebCore::WebSocketChannel *this)
{
  return *((_QWORD *)this + 8) != 0;
}

BOOL WebCore::WebSocketChannel::isConnected(WebCore::WebSocketHandshake **this)
{
  return WebCore::WebSocketHandshake::mode(this[8]) == 3;
}

uint64_t WebCore::WebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

WebCore::WebSocketChannel *WebCore::WebSocketChannel::derefThreadableWebSocketChannel(WebCore::WebSocketChannel *this, void *a2)
{
  WTF *v2;
  void *v3;

  if (*((_DWORD *)this + 2) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel(this, a2);
    return (WebCore::WebSocketChannel *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
  return this;
}

uint64_t WebCore::ThreadableWebSocketChannel::channelInspector(WebCore::ThreadableWebSocketChannel *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::progressIdentifier(WebCore::WebSocketChannel *this)
{
  return *((_QWORD *)this + 26);
}

BOOL `non-virtual thunk to'WebCore::WebSocketChannel::hasCreatedHandshake(WebCore::WebSocketChannel *this)
{
  return *((_QWORD *)this + 6) != 0;
}

BOOL `non-virtual thunk to'WebCore::WebSocketChannel::isConnected(WebCore::WebSocketHandshake **this)
{
  return WebCore::WebSocketHandshake::mode(this[6]) == 3;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebSocketChannel::derefThreadableWebSocketChannel(uint64_t this, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::WebSocketChannel::~WebSocketChannel((WebCore::WebSocketChannel *)(this - 16), a2);
    return WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(WTF::StringImpl ***a1, StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WebResourceLoadScheduler::HostInformation *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      while (1)
      {
        if (*v5 == (WTF::StringImpl *)-1)
          goto LABEL_5;
        v6 = v5[1];
        v5[1] = 0;
        if (!v6)
          goto LABEL_10;
        WebResourceLoadScheduler::HostInformation::~HostInformation(v6, a2);
        if (!*(_DWORD *)(v7 + 8))
          break;
        *(_QWORD *)(v7 + 192) = 0;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        v8 = *v5;
        *v5 = 0;
        if (v8)
        {
LABEL_11:
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
LABEL_5:
        v5 += 2;
        if (!--v4)
          goto LABEL_15;
      }
      WTF::fastFree((WTF *)v7, a2);
LABEL_10:
      v8 = *v5;
      *v5 = 0;
      if (v8)
        goto LABEL_11;
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

uint64_t WebCore::ResourceRequest::operator=(uint64_t a1, uint64_t a2)
{
  StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;

  WTF::URL::operator=(a1, (uint64_t *)a2);
  WTF::URL::operator=(a1 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v6 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  if (!v6)
  {
LABEL_4:
    v7 = *(unsigned int *)(a1 + 108);
    if (!(_DWORD)v7)
      goto LABEL_13;
    goto LABEL_7;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v6, v4);
  v7 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v7)
    goto LABEL_13;
LABEL_7:
  v8 = 16 * v7;
  v9 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 96) + 8);
  do
  {
    v10 = *v9;
    *v9 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v4);
      else
        *(_DWORD *)v10 -= 2;
    }
    v9 += 2;
    v8 -= 16;
  }
  while (v8);
LABEL_13:
  v11 = *(WTF **)(a1 + 96);
  if (v11)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v11, v4);
  }
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v12;
  v13 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v13)
  {
    v14 = 16 * v13;
    v15 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 112) + 8);
    while (1)
    {
      v16 = *v15;
      *v15 = 0;
      if (!v16)
        goto LABEL_22;
      if (*(_DWORD *)v16 != 2)
        break;
      WTF::StringImpl::destroy(v16, v4);
      v17 = *(v15 - 1);
      *(v15 - 1) = 0;
      if (v17)
      {
LABEL_25:
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v4);
        else
          *(_DWORD *)v17 -= 2;
      }
LABEL_18:
      v15 += 2;
      v14 -= 16;
      if (!v14)
        goto LABEL_27;
    }
    *(_DWORD *)v16 -= 2;
LABEL_22:
    v17 = *(v15 - 1);
    *(v15 - 1) = 0;
    if (v17)
      goto LABEL_25;
    goto LABEL_18;
  }
LABEL_27:
  v18 = *(WTF **)(a1 + 112);
  if (v18)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v18, v4);
  }
  v19 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v19;
  v20 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v20)
  {
    v21 = *(WTF::StringImpl ***)(a1 + 128);
    v22 = 8 * v20;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v4);
        else
          *(_DWORD *)v23 -= 2;
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  v24 = *(WTF **)(a1 + 128);
  if (v24)
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    WTF::fastFree(v24, v4);
  }
  v25 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v25;
  v26 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v27 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, v4);
      v30 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a2 + 160) = 0;
      v29 = *(WTF::StringImpl **)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v30;
      if (!v29)
        goto LABEL_46;
      goto LABEL_44;
    }
    *(_DWORD *)v27 -= 2;
  }
  v28 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v29 = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v28;
  if (!v29)
  {
LABEL_46:
    v31 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    v32 = *(_DWORD **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v31;
    if (!v32)
      goto LABEL_52;
    goto LABEL_49;
  }
LABEL_44:
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
    goto LABEL_46;
  }
  WTF::StringImpl::destroy(v29, v4);
  v33 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v32 = *(_DWORD **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v33;
  if (!v32)
    goto LABEL_52;
LABEL_49:
  if (*v32 == 1)
  {
    v34 = MEMORY[0x1D82A6E54]();
    MEMORY[0x1D82A6E60](v34);
  }
  else
  {
    --*v32;
  }
LABEL_52:
  v35 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v35;
  v36 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v37 = *(const void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v36;
  if (v37)
    CFRelease(v37);
  return a1;
}

uint64_t WTF::URL::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
  v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  return a1;
}

uint64_t WebCore::ResourceRequestBase::ResourceRequestBase(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  __int128 v4;
  __int128 v5;
  char v6;
  _DWORD *v7;
  uint64_t v9;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)a1 = v3;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 24) = v5;
  WTF::URL::invalidate((WTF::URL *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = *MEMORY[0x1E0DD1D20];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 88) = v9;
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(a1 + 96));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0x10000;
  v6 = *(_BYTE *)(a1 + 148) & 0x80 | 4;
  *(_BYTE *)(a1 + 148) = v6;
  *(_QWORD *)(a1 + 152) = 0;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v7 += 2;
    v6 = *(_BYTE *)(a1 + 148);
  }
  *(_QWORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 184) & 0xE0 | 5;
  *(_BYTE *)(a1 + 148) = v6 | 2;
  return a1;
}

void WebCore::ResourceRequest::~ResourceRequest(WebCore::ResourceRequest *this, StringImpl *a2)
{
  const void *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::ResourceRequestBase::RequestData *v8;

  v3 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (!v4)
  {
LABEL_6:
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (!v5)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*v4 != 1)
  {
    --*v4;
    goto LABEL_6;
  }
  v6 = MEMORY[0x1D82A6E54]();
  MEMORY[0x1D82A6E60](v6);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (!v5)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (!v7)
      goto LABEL_16;
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (!v7)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, a2);
    v8 = this;
    goto LABEL_17;
  }
  *(_DWORD *)v7 -= 2;
LABEL_16:
  v8 = this;
LABEL_17:
  WebCore::ResourceRequestBase::RequestData::~RequestData(v8, a2);
}

void WebCore::ResourceRequestBase::RequestData::~RequestData(WebCore::ResourceRequestBase::RequestData *this, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = *((unsigned int *)this + 35);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 16);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 16);
  if (v7)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceRequestBase::RequestData *)((char *)this + 96), a2);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (!v9)
  {
LABEL_13:
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v10)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v9, v8);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v10)
    goto LABEL_18;
LABEL_16:
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v8);
    v11 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = 0;
    if (!v11)
      return;
    goto LABEL_21;
  }
  *(_DWORD *)v10 -= 2;
LABEL_18:
  v11 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (!v11)
    return;
LABEL_21:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v8);
  else
    *(_DWORD *)v11 -= 2;
}

void WebCore::HTTPHeaderMap::~HTTPHeaderMap(WebCore::HTTPHeaderMap *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF *v13;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*((_QWORD *)this + 2) + 8);
    while (1)
    {
      v6 = *v5;
      *v5 = 0;
      if (!v6)
        goto LABEL_8;
      if (*(_DWORD *)v6 != 2)
        break;
      WTF::StringImpl::destroy(v6, a2);
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
LABEL_11:
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
LABEL_4:
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_13;
    }
    *(_DWORD *)v6 -= 2;
LABEL_8:
    v7 = *(v5 - 1);
    *(v5 - 1) = 0;
    if (v7)
      goto LABEL_11;
    goto LABEL_4;
  }
LABEL_13:
  v8 = (WTF *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 3);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = (WTF::StringImpl **)(*(_QWORD *)this + 8);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v13 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v13, a2);
  }
}

WTF::StringImpl *PingHandle::timeoutTimerFired(PingHandle *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  __int128 v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  StringImpl *v9;
  CFTypeRef v10;
  StringImpl *v11;
  const void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _QWORD v16[17];
  char v17;
  CFTypeRef cf;
  char v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  WTF::StringImpl *v24;
  int v25;
  __int16 v26;
  const void *v27;
  char v28;

  v2 = WebCore::ResourceRequestBase::url((PingHandle *)((char *)this + 16));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)v16[0];
  v20 = 0;
  v4 = *(WTF::StringImpl **)v2;
  if (*(_QWORD *)v2)
    *(_DWORD *)v4 += 2;
  v21 = v4;
  v5 = *(_OWORD *)(v2 + 24);
  v22 = *(_OWORD *)(v2 + 8);
  v23 = v5;
  if (v3)
    *(_DWORD *)v3 += 2;
  v24 = v3;
  v25 = 0;
  v26 = 4;
  v27 = 0;
  v28 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v16);
  cf = 0;
  v19 = 0;
  v17 = v17 & 0xF1 | 4;
  v6 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v6)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)v6 + 16))(v6, &v20, v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  PingHandle::~PingHandle(this);
  WTF::fastFree(v7, v8);
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v16, v9);
  v12 = v27;
  v27 = 0;
  if (v12)
    CFRelease(v12);
  v13 = v24;
  v24 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      v14 = v21;
      v21 = 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_17;
    }
    *(_DWORD *)v13 -= 2;
  }
  v14 = v21;
  v21 = 0;
  if (!v14)
  {
LABEL_19:
    result = v20;
    v20 = 0;
    if (!result)
      goto LABEL_24;
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v14, v11);
  result = v20;
  v20 = 0;
  if (!result)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)result == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    if (!v3)
      return result;
    goto LABEL_27;
  }
  *(_DWORD *)result -= 2;
LABEL_24:
  if (!v3)
    return result;
LABEL_27:
  if (*(_DWORD *)v3 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v11);
  *(_DWORD *)v3 -= 2;
  return result;
}

void PingHandle::~PingHandle(PingHandle *this)
{
  WTF *v1;
  void *v2;

  PingHandle::~PingHandle(this);
  WTF::fastFree(v1, v2);
}

{
  WebCore::ResourceHandle *v2;
  uint64_t v3;
  uint64_t v4;
  StringImpl *v5;
  _DWORD *v6;

  v2 = (WebCore::ResourceHandle *)*((_QWORD *)this + 1);
  if (v2)
  {
    WebCore::ResourceHandle::clearClient(v2);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  }
  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 27) = &unk_1E9D6A108;
  v4 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((PingHandle *)((char *)this + 216));
  WebCore::ResourceRequest::~ResourceRequest((PingHandle *)((char *)this + 16), v5);
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 48))(v6);
      WebCore::ResourceHandleClient::~ResourceHandleClient(this);
      return;
    }
    --v6[2];
  }
  WebCore::ResourceHandleClient::~ResourceHandleClient(this);
}

WTF::StringImpl *PingHandle::didReceiveData(PingHandle *this, WebCore::ResourceHandle *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v4;
  WTF *v5;
  void *v6;
  StringImpl *v7;
  CFTypeRef v8;
  StringImpl *v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  _BYTE v14[138];
  char v15;
  CFTypeRef cf;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD v20[2];
  const void *v21;
  char v22;

  v18 = 0;
  v19 = 0;
  WTF::URL::invalidate((WTF::URL *)&v19);
  v21 = 0;
  v20[0] = 0;
  *(_QWORD *)((char *)v20 + 6) = 0;
  v22 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v14);
  cf = 0;
  v17 = 0;
  v15 = v15 & 0xF1 | 4;
  v4 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, _BYTE *))(*(_QWORD *)v4 + 16))(v4, &v18, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  PingHandle::~PingHandle(this);
  WTF::fastFree(v5, v6);
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v14, v7);
  v10 = v21;
  v21 = 0;
  if (v10)
    CFRelease(v10);
  v11 = (WTF::StringImpl *)v20[0];
  v20[0] = 0;
  if (!v11)
  {
LABEL_10:
    v12 = v19;
    v19 = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  v12 = v19;
  v19 = 0;
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    result = v18;
    v18 = 0;
    if (!result)
      return result;
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  result = v18;
  v18 = 0;
  if (!result)
    return result;
LABEL_18:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  *(_DWORD *)result -= 2;
  return result;
}

WTF::StringImpl *PingHandle::didFinishLoading(PingHandle *a1)
{
  uint64_t v2;
  WTF *v3;
  void *v4;
  StringImpl *v5;
  CFTypeRef v6;
  StringImpl *v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  _BYTE v12[138];
  char v13;
  CFTypeRef cf;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD v18[2];
  const void *v19;
  char v20;

  v16 = 0;
  v17 = 0;
  WTF::URL::invalidate((WTF::URL *)&v17);
  v19 = 0;
  v18[0] = 0;
  *(_QWORD *)((char *)v18 + 6) = 0;
  v20 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v12);
  cf = 0;
  v15 = 0;
  v13 = v13 & 0xF1 | 4;
  v2 = *((_QWORD *)a1 + 35);
  *((_QWORD *)a1 + 35) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, _BYTE *))(*(_QWORD *)v2 + 16))(v2, &v16, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  PingHandle::~PingHandle(a1);
  WTF::fastFree(v3, v4);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v12, v5);
  v8 = v19;
  v19 = 0;
  if (v8)
    CFRelease(v8);
  v9 = (WTF::StringImpl *)v18[0];
  v18[0] = 0;
  if (!v9)
  {
LABEL_10:
    v10 = v17;
    v17 = 0;
    if (!v10)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v9, v7);
  v10 = v17;
  v17 = 0;
  if (!v10)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v7);
    result = v16;
    v16 = 0;
    if (!result)
      return result;
    goto LABEL_18;
  }
  *(_DWORD *)v10 -= 2;
LABEL_15:
  result = v16;
  v16 = 0;
  if (!result)
    return result;
LABEL_18:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  *(_DWORD *)result -= 2;
  return result;
}

void PingHandle::didFail(PingHandle *this, WebCore::ResourceHandle *a2, const WebCore::ResourceError *a3)
{
  uint64_t v5;
  WTF *v6;
  void *v7;
  StringImpl *v8;
  CFTypeRef v9;
  _BYTE v10[138];
  char v11;
  CFTypeRef cf;
  char v13;

  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v10);
  cf = 0;
  v13 = 0;
  v11 = v11 & 0xF1 | 4;
  v5 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t, const WebCore::ResourceError *, _BYTE *))(*(_QWORD *)v5 + 16))(v5, a3, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  PingHandle::~PingHandle(this);
  WTF::fastFree(v6, v7);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v10, v8);
}

uint64_t WebCore::ResourceHandleClient::loadingSynchronousXHR(WebCore::ResourceHandleClient *this)
{
  return 0;
}

void PingHandle::willSendRequestAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebCore::ResourceRequestBase *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  StringImpl *v14;
  StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  StringImpl *v26;
  CFTypeRef v27;
  StringImpl *v28;
  const void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _QWORD v33[17];
  char v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  char v39;
  const void *v40;
  CFTypeRef cf;
  char v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  WTF::StringImpl *v47;
  int v48;
  __int16 v49;
  const void *v50;
  char v51;

  v7 = (WebCore::ResourceRequestBase *)(a1 + 16);
  WebCore::ResourceRequest::operator=(a1 + 16, a3);
  if (!*(_BYTE *)(a1 + 273))
  {
    v43 = 0;
    WTF::URL::invalidate((WTF::URL *)&v43);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v33, (uint64_t)&v43);
    v16 = v43;
    v43 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v40 = 0;
    v17 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 16))(v17, v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v33, v18);
    v19 = WebCore::ResourceRequestBase::url(v7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = (WTF::StringImpl *)v33[0];
    v43 = 0;
    v21 = *(WTF::StringImpl **)v19;
    if (*(_QWORD *)v19)
      *(_DWORD *)v21 += 2;
    v44 = v21;
    v22 = *(_OWORD *)(v19 + 24);
    v45 = *(_OWORD *)(v19 + 8);
    v46 = v22;
    if (v20)
      *(_DWORD *)v20 += 2;
    v47 = v20;
    v48 = 0;
    v49 = 2;
    v50 = 0;
    v51 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v33);
    cf = 0;
    v42 = 0;
    v34 = v34 & 0xF1 | 4;
    v23 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 280) = 0;
    if (v23)
    {
      (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)v23 + 16))(v23, &v43, v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
    PingHandle::~PingHandle((PingHandle *)a1);
    WTF::fastFree(v24, v25);
    v27 = cf;
    cf = 0;
    if (v27)
      CFRelease(v27);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v33, v26);
    v29 = v50;
    v50 = 0;
    if (v29)
      CFRelease(v29);
    v30 = v47;
    v47 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::destroy(v30, v28);
        v31 = v44;
        v44 = 0;
        if (!v31)
          goto LABEL_34;
LABEL_32:
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::destroy(v31, v28);
          v32 = v43;
          v43 = 0;
          if (!v32)
            goto LABEL_39;
LABEL_37:
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::destroy(v32, v28);
            if (!v20)
              return;
LABEL_42:
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v28);
            else
              *(_DWORD *)v20 -= 2;
            return;
          }
          *(_DWORD *)v32 -= 2;
LABEL_39:
          if (!v20)
            return;
          goto LABEL_42;
        }
        *(_DWORD *)v31 -= 2;
LABEL_34:
        v32 = v43;
        v43 = 0;
        if (!v32)
          goto LABEL_39;
        goto LABEL_37;
      }
      *(_DWORD *)v30 -= 2;
    }
    v31 = v44;
    v44 = 0;
    if (!v31)
      goto LABEL_34;
    goto LABEL_32;
  }
  WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v33, (uint64_t)v7);
  v8 = *(_DWORD **)(a1 + 168);
  if (v8)
    *v8 += 2;
  v35 = v8;
  v9 = *(_DWORD **)(a1 + 176);
  if (v9)
    *v9 += 2;
  v36 = v9;
  v10 = *(_DWORD **)(a1 + 184);
  if (v10)
    ++*v10;
  v11 = *(_QWORD *)(a1 + 192);
  v37 = v10;
  v38 = v11;
  v39 = *(_BYTE *)(a1 + 200);
  v12 = *(const void **)(a1 + 208);
  v40 = v12;
  if (v12)
    CFRetain(v12);
  v13 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 16))(v13, v33);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v33, v14);
}

WTF::StringImpl *PingHandle::didReceiveResponseAsync(PingHandle *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD v17[2];
  CFTypeRef cf;
  char v19;

  v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v15 = 0;
  v16 = 0;
  WTF::URL::invalidate((WTF::URL *)&v16);
  cf = 0;
  v17[0] = 0;
  *(_QWORD *)((char *)v17 + 6) = 0;
  v19 = 1;
  v7 = *((_QWORD *)a1 + 35);
  *((_QWORD *)a1 + 35) = 0;
  if (v7)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v7 + 16))(v7, &v15, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  PingHandle::~PingHandle(a1);
  WTF::fastFree(v8, v9);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = (WTF::StringImpl *)v17[0];
  v17[0] = 0;
  if (!v12)
  {
LABEL_8:
    v13 = v16;
    v16 = 0;
    if (!v13)
      goto LABEL_13;
    goto LABEL_11;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v12, v10);
  v13 = v16;
  v16 = 0;
  if (!v13)
    goto LABEL_13;
LABEL_11:
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::destroy(v13, v10);
    result = v15;
    v15 = 0;
    if (!result)
      return result;
    goto LABEL_16;
  }
  *(_DWORD *)v13 -= 2;
LABEL_13:
  result = v15;
  v15 = 0;
  if (!result)
    return result;
LABEL_16:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  *(_DWORD *)result -= 2;
  return result;
}

WTF::StringImpl *PingHandle::canAuthenticateAgainstProtectionSpaceAsync(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  StringImpl *v13;
  CFTypeRef v14;
  StringImpl *v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  _QWORD v20[17];
  char v21;
  CFTypeRef cf;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  int v29;
  __int16 v30;
  const void *v31;
  char v32;

  v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 2));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)v20[0];
  v24 = 0;
  v8 = *(WTF::StringImpl **)v6;
  if (*(_QWORD *)v6)
    *(_DWORD *)v8 += 2;
  v25 = v8;
  v9 = *(_OWORD *)(v6 + 24);
  v26 = *(_OWORD *)(v6 + 8);
  v27 = v9;
  if (v7)
    *(_DWORD *)v7 += 2;
  v28 = v7;
  v29 = 0;
  v30 = 2;
  v31 = 0;
  v32 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v20);
  cf = 0;
  v23 = 0;
  v21 = v21 & 0xF1 | 4;
  v10 = a1[35];
  a1[35] = 0;
  if (v10)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)v10 + 16))(v10, &v24, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  PingHandle::~PingHandle((PingHandle *)a1);
  WTF::fastFree(v11, v12);
  v14 = cf;
  cf = 0;
  if (v14)
    CFRelease(v14);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v20, v13);
  v16 = v31;
  v31 = 0;
  if (v16)
    CFRelease(v16);
  v17 = v28;
  v28 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v15);
      v18 = v25;
      v25 = 0;
      if (!v18)
        goto LABEL_19;
      goto LABEL_17;
    }
    *(_DWORD *)v17 -= 2;
  }
  v18 = v25;
  v25 = 0;
  if (!v18)
  {
LABEL_19:
    result = v24;
    v24 = 0;
    if (!result)
      goto LABEL_24;
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v18, v15);
  result = v24;
  v24 = 0;
  if (!result)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)result == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    if (!v7)
      return result;
    goto LABEL_27;
  }
  *(_DWORD *)result -= 2;
LABEL_24:
  if (!v7)
    return result;
LABEL_27:
  if (*(_DWORD *)v7 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v15);
  *(_DWORD *)v7 -= 2;
  return result;
}

uint64_t WebCore::ResourceHandleClient::willCacheResponseAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t PingHandle::shouldUseCredentialStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 272);
}

void WebCore::ResourceHandleClient::connectionProperties(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ResourceRequestBase::RequestData::RequestData(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  __int128 v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  v6 = *(_DWORD **)(a2 + 40);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = *(_DWORD **)(a2 + 88);
  if (v8)
    *v8 += 2;
  v9 = *(unsigned int *)(a2 + 108);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v8;
  *(_DWORD *)(a1 + 108) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >> 28)
      goto LABEL_33;
    v10 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(a1 + 104) = v9;
    *(_QWORD *)(a1 + 96) = v10;
    v11 = *(unsigned int *)(a2 + 108);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(a2 + 96);
      v13 = v12 + 16 * v11;
      do
      {
        *(_WORD *)v10 = *(_WORD *)v12;
        v14 = *(_DWORD **)(v12 + 8);
        if (v14)
          *v14 += 2;
        *(_QWORD *)(v10 + 8) = v14;
        v12 += 16;
        v10 += 16;
      }
      while (v12 != v13);
    }
  }
  v15 = *(unsigned int *)(a2 + 124);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1D7FE847CLL);
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v15));
    *(_DWORD *)(a1 + 120) = v15;
    *(_QWORD *)(a1 + 112) = v16;
    v17 = *(unsigned int *)(a2 + 124);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a2 + 112);
      v19 = v18 + 16 * v17;
      do
      {
        v20 = *(_DWORD **)v18;
        if (*(_QWORD *)v18)
          *v20 += 2;
        *v16 = v20;
        v21 = *(_DWORD **)(v18 + 8);
        if (v21)
          *v21 += 2;
        v16[1] = v21;
        v18 += 16;
        v16 += 2;
      }
      while (v18 != v19);
    }
  }
  v22 = *(unsigned int *)(a2 + 140);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = v22;
  if ((_DWORD)v22)
  {
    if (!(v22 >> 29))
    {
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v22));
      *(_DWORD *)(a1 + 136) = v22;
      *(_QWORD *)(a1 + 128) = v23;
      v24 = *(unsigned int *)(a2 + 140);
      if ((_DWORD)v24)
      {
        v25 = *(_DWORD ***)(a2 + 128);
        v26 = 8 * v24;
        do
        {
          v27 = *v25;
          if (*v25)
            *v27 += 2;
          *v23++ = v27;
          ++v25;
          v26 -= 8;
        }
        while (v26);
      }
      goto LABEL_30;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1D7FE8474);
  }
LABEL_30:
  v28 = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v28;
  return a1;
}

void WebCore::ResourceResponseBase::~ResourceResponseBase(WebCore::ResourceResponseBase *this, StringImpl *a2)
{
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  StringImpl *v15;

  if (*((_BYTE *)this + 128))
  {
    v3 = (const void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v3)
      CFRelease(v3);
  }
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (!v4)
    goto LABEL_7;
  do
  {
    v5 = __ldaxr((unsigned int *)v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v4));
  if (v6)
  {
LABEL_7:
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceResponseBase *)((char *)this + 80), a2);
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (!v8)
      goto LABEL_11;
    goto LABEL_8;
  }
  atomic_store(1u, (unsigned int *)v4);
  v13 = *(_DWORD **)(v4 + 128);
  *(_QWORD *)(v4 + 128) = 0;
  if (v13)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13, a2);
  v14 = *(WTF::StringImpl **)(v4 + 96);
  *(_QWORD *)(v4 + 96) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::fastFree((WTF *)v4, a2);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceResponseBase *)((char *)this + 80), v15);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
LABEL_8:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_11:
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      v10 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = 0;
      if (!v10)
        goto LABEL_19;
      goto LABEL_17;
    }
    *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v10)
  {
LABEL_19:
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v11)
      goto LABEL_24;
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v10, v7);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v11)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy(v11, v7);
    v12 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = 0;
    if (!v12)
      return;
    goto LABEL_27;
  }
  *(_DWORD *)v11 -= 2;
LABEL_24:
  v12 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (!v12)
    return;
LABEL_27:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v7);
  else
    *(_DWORD *)v12 -= 2;
}

_DWORD *WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(_DWORD *result, StringImpl *a2)
{
  WTF *v2;
  StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v2 = (WTF *)result;
  if (*result != 1)
  {
    --*result;
    return result;
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(result + 10), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 4);
  *((_QWORD *)v2 + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v3);
      v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      if (!v5)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  if (!v5)
  {
LABEL_11:
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (!v6)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_9:
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v5, v3);
  v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (!v6)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v3);
    v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (!v7)
      goto LABEL_21;
    goto LABEL_19;
  }
  *(_DWORD *)v6 -= 2;
LABEL_16:
  v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  if (!v7)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v3);
    v8 = v2;
    return (_DWORD *)WTF::fastFree(v8, v3);
  }
  *(_DWORD *)v7 -= 2;
LABEL_21:
  v8 = v2;
  return (_DWORD *)WTF::fastFree(v8, v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (PingHandle::*&)(void),PingHandle*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(WTF::StringImpl *result, StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF **v5;
  uint64_t v6;
  WTF *v7;
  _DWORD *v8;
  WTF *v9;

  if (result != (WTF::StringImpl *)a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v4)
      {
        v5 = (WTF **)*((_QWORD *)v3 + 1);
        v6 = 8 * v4;
        do
        {
          v7 = *v5;
          *v5 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              v8 = (_DWORD *)*((_QWORD *)v7 + 1);
              *((_QWORD *)v7 + 1) = 0;
              if (v8)
              {
                if (v8[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
                else
                  --v8[4];
              }
              WTF::fastFree(v7, a2);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          ++v5;
          v6 -= 8;
        }
        while (v6);
      }
      v9 = (WTF *)*((_QWORD *)v3 + 1);
      if ((WTF::StringImpl *)((char *)v3 + 24) != v9 && v9 != 0)
      {
        *((_QWORD *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v9, a2);
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 32);
    }
    while (v3 != (WTF::StringImpl *)a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  StringImpl *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v6 = (_QWORD *)(a1 + 24 * i);
      if (*v6 != -1)
      {
        v7 = a1 + 24 * i;
        v8 = *(_QWORD *)(v7 + 16);
        if (v8)
        {
          v9 = *(unsigned int *)(v8 - 4);
          if ((_DWORD)v9)
          {
            v10 = *(_QWORD *)(v7 + 16);
            do
            {
              v11 = *(WTF::StringImpl **)v10;
              if (*(_QWORD *)v10 != -1)
              {
                v12 = *(WTF **)(v10 + 8);
                if (v12)
                {
                  *(_QWORD *)(v10 + 8) = 0;
                  *(_DWORD *)(v10 + 16) = 0;
                  WTF::fastFree(v12, a2);
                  v11 = *(WTF::StringImpl **)v10;
                }
                *(_QWORD *)v10 = 0;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy(v11, a2);
                  else
                    *(_DWORD *)v11 -= 2;
                }
              }
              v10 += 24;
              --v9;
            }
            while (v9);
          }
          WTF::fastFree((WTF *)(v8 - 16), a2);
        }
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v6 + 1, a2);
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((_QWORD *)(a1 + 24 * i), v5);
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_QWORD *WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(_QWORD *result, StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;

  v2 = result;
  v3 = *result;
  *result = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))off_1E9D6A9D0[v8])(&v9, v3 + 8);
      *(_DWORD *)(v3 + 32) = -1;
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = 16 * a2;
    v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    v12 = (void *)(v11 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = 0;
  v9 = 16 * a2;
  v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  v12 = (void *)(v11 + 16);
  if (a2)
LABEL_3:
    bzero(v12, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v17 = (uint64_t *)(v6 + 16 * v13);
      v18 = *v17;
      if (*v17 != -1)
      {
        if (v18)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v23 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = *(_QWORD *)(v22 + 16 * v27);
            v27 = (v27 + v28++) & v23;
          }
          while (v30);
          v31 = (uint64_t *)(v22 + 16 * v29);
          v32 = v31[1];
          v31[1] = 0;
          if (v32)
          {
            v33 = MEMORY[0x1D82A5C18]();
            if (*(_DWORD *)(v33 + 8))
            {
              *(_QWORD *)(v33 + 288) = 0;
              *(_OWORD *)(v33 + 256) = 0u;
              *(_OWORD *)(v33 + 272) = 0u;
              *(_OWORD *)(v33 + 224) = 0u;
              *(_OWORD *)(v33 + 240) = 0u;
              *(_OWORD *)(v33 + 192) = 0u;
              *(_OWORD *)(v33 + 208) = 0u;
              *(_OWORD *)(v33 + 160) = 0u;
              *(_OWORD *)(v33 + 176) = 0u;
              *(_OWORD *)(v33 + 128) = 0u;
              *(_OWORD *)(v33 + 144) = 0u;
              *(_OWORD *)(v33 + 96) = 0u;
              *(_OWORD *)(v33 + 112) = 0u;
              *(_OWORD *)(v33 + 64) = 0u;
              *(_OWORD *)(v33 + 80) = 0u;
              *(_OWORD *)(v33 + 32) = 0u;
              *(_OWORD *)(v33 + 48) = 0u;
              *(_OWORD *)v33 = 0u;
              *(_OWORD *)(v33 + 16) = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v33, v10);
            }
          }
          *v31 = *v17;
          v34 = v6 + 16 * v13;
          v35 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          v31[1] = v35;
          v36 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            v37 = MEMORY[0x1D82A5C18]();
            if (*(_DWORD *)(v37 + 8))
            {
              *(_QWORD *)(v37 + 288) = 0;
              *(_OWORD *)(v37 + 256) = 0u;
              *(_OWORD *)(v37 + 272) = 0u;
              *(_OWORD *)(v37 + 224) = 0u;
              *(_OWORD *)(v37 + 240) = 0u;
              *(_OWORD *)(v37 + 192) = 0u;
              *(_OWORD *)(v37 + 208) = 0u;
              *(_OWORD *)(v37 + 160) = 0u;
              *(_OWORD *)(v37 + 176) = 0u;
              *(_OWORD *)(v37 + 128) = 0u;
              *(_OWORD *)(v37 + 144) = 0u;
              *(_OWORD *)(v37 + 96) = 0u;
              *(_OWORD *)(v37 + 112) = 0u;
              *(_OWORD *)(v37 + 64) = 0u;
              *(_OWORD *)(v37 + 80) = 0u;
              *(_OWORD *)(v37 + 32) = 0u;
              *(_OWORD *)(v37 + 48) = 0u;
              *(_OWORD *)v37 = 0u;
              *(_OWORD *)(v37 + 16) = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v37, v10);
            }
          }
          if (v17 == a3)
            v14 = v31;
        }
        else
        {
          v19 = v6 + 16 * v13;
          v20 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v20)
          {
            v21 = MEMORY[0x1D82A5C18]();
            if (*(_DWORD *)(v21 + 8))
            {
              *(_QWORD *)(v21 + 288) = 0;
              *(_OWORD *)(v21 + 256) = 0u;
              *(_OWORD *)(v21 + 272) = 0u;
              *(_OWORD *)(v21 + 224) = 0u;
              *(_OWORD *)(v21 + 240) = 0u;
              *(_OWORD *)(v21 + 192) = 0u;
              *(_OWORD *)(v21 + 208) = 0u;
              *(_OWORD *)(v21 + 160) = 0u;
              *(_OWORD *)(v21 + 176) = 0u;
              *(_OWORD *)(v21 + 128) = 0u;
              *(_OWORD *)(v21 + 144) = 0u;
              *(_OWORD *)(v21 + 96) = 0u;
              *(_OWORD *)(v21 + 112) = 0u;
              *(_OWORD *)(v21 + 64) = 0u;
              *(_OWORD *)(v21 + 80) = 0u;
              *(_OWORD *)(v21 + 32) = 0u;
              *(_OWORD *)(v21 + 48) = 0u;
              *(_OWORD *)v21 = 0u;
              *(_OWORD *)(v21 + 16) = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v21, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void **WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(void **result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  size_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (HIDWORD(v5))
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *result;
      v8 = *((unsigned int *)result + 3);
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
      result = (void **)memcpy(v9, v7, v8);
      if (v7)
      {
        if (*v6 == v7)
        {
          *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v7, v10);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::SocketStreamHandleImpl(WTF::URL const&,WebCore::SocketStreamHandleClient &,PAL::SessionID,WTF::String const&,WebCore::SourceApplicationAuditToken &&,WebCore::StorageSessionProvider const*,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E9D6AA40;
  v2 = a1[2];
  a1[2] = 0;
  if (!v2)
    return a1;
  v3 = (unsigned int *)(v2 + 8);
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v3);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E9D6AA68;
  v7[1] = v3;
  v8 = v7;
  WTF::ensureOnMainThread();
  if (!v8)
    return a1;
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::SocketStreamHandleImpl(WTF::URL const&,WebCore::SocketStreamHandleClient &,PAL::SessionID,WTF::String const&,WebCore::SourceApplicationAuditToken &&,WebCore::StorageSessionProvider const*,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E9D6AA40;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = (unsigned int *)(v3 + 8);
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    return WTF::fastFree(this, a2);
  atomic_store(1u, v4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E9D6AA68;
  v8[1] = v4;
  v10 = v8;
  WTF::ensureOnMainThread();
  if (!v10)
    return WTF::fastFree(this, a2);
  (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  return WTF::fastFree(this, v9);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::SocketStreamHandleImpl(WTF::URL const&,WebCore::SocketStreamHandleClient &,PAL::SessionID,WTF::String const&,WebCore::SourceApplicationAuditToken &&,WebCore::StorageSessionProvider const*,BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 56);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v8;
  LODWORD(v8) = 0;
  v4 = *(WTF::StringImpl **)(v1 + 16);
  if (v4)
    *(_DWORD *)v4 += 2;
  v9 = v4;
  if (v3)
    *(_DWORD *)v3 += 2;
  v10 = v3;
  v11 = 0;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 56))(v2, v1, &v8);
  v6 = v10;
  v10 = 0;
  if (!v6)
  {
LABEL_8:
    result = v9;
    v9 = 0;
    if (!result)
      goto LABEL_13;
    goto LABEL_11;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v6, v5);
  result = v9;
  v9 = 0;
  if (!result)
    goto LABEL_13;
LABEL_11:
  if (*(_DWORD *)result == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    if (!v3)
      return result;
    goto LABEL_16;
  }
  *(_DWORD *)result -= 2;
LABEL_13:
  if (!v3)
    return result;
LABEL_16:
  if (*(_DWORD *)v3 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v5);
  *(_DWORD *)v3 -= 2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::SocketStreamHandle,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

void WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::pacExecutionCallback(void *,__CFArray const*,__CFError *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a1 + 8);
  if (!*(_DWORD *)(v2 + 64))
  {
    WebCore::SocketStreamHandleImpl::chooseProxyFromArray((CFRunLoopSourceRef *)v2, **(CFArrayRef **)(a1 + 16));
    WebCore::SocketStreamHandleImpl::createStreams(**(WebCore::SocketStreamHandleImpl ***)(a1 + 8));
    WebCore::SocketStreamHandleImpl::scheduleStreams(**(CFRunLoopSourceRef ***)(a1 + 8));
  }
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(unint64_t result, unsigned int a2, int a3, int8x16_t *a4, unsigned int a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  int8x16_t *v27;
  __int16 v28;
  int8x16_t *v29;
  uint64_t v30;
  size_t v31;
  _BYTE *v32;
  unint64_t v33;
  unsigned __int128 v34;
  size_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  _WORD *v39;
  unint64_t v40;
  __int128 v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  _WORD *v49;
  int8x16_t *v50;
  __int16 v51;
  _BYTE *v52;
  int8x16_t *v53;
  char v54;
  uint8x8_t *v55;
  uint16x8_t *v56;
  unint64_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint8x8_t *v61;
  uint16x8_t *v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  unint64_t v66;
  int8x16_t *v67;
  int8x16_t *v68;
  unint64_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int16x8_t *v74;
  int8x8_t *v75;
  unint64_t v76;
  int16x8_t v77;
  uint8x8_t *v78;
  uint16x8_t *v79;
  unint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint8x8_t *v84;
  uint16x8_t *v85;
  unint64_t v86;
  uint8x8_t v87;
  uint64_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;

  v10 = (_QWORD *)result;
  if (!a3)
  {
    if (a2 > 0x7FFFFFEF)
      goto LABEL_10;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    v11 = v88;
    if (!v88)
      goto LABEL_11;
    v13 = v88 + 20;
    *(_DWORD *)v88 = 2;
    *(_DWORD *)(v88 + 4) = a2;
    *(_QWORD *)(v88 + 8) = v88 + 20;
    *(_DWORD *)(v88 + 16) = 0;
    result = v88 + 20 + 2 * a5;
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      v14 = v13 + 2 * (a5 & 0xFFFFFFC0);
      v15 = 0uLL;
      do
      {
        v89.val[0] = *a4;
        v16 = a4[1];
        v91.val[0] = a4[2];
        v17 = a4[3];
        a4 += 4;
        v18 = v17;
        v91.val[1] = 0uLL;
        v93.val[0] = v16;
        v89.val[1] = 0uLL;
        v19 = (char *)v13;
        vst2q_s8(v19, v89);
        v19 += 32;
        v93.val[1] = 0uLL;
        vst2q_s8(v19, v93);
        v20 = (char *)(v13 + 64);
        vst2q_s8(v20, v91);
        v21 = (char *)(v13 + 96);
        vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
        v13 += 128;
      }
      while (v13 != v14);
      v13 = v14;
    }
    if (v13 != result)
    {
      v22 = v88 + 2 * a5 - v13 + 18;
      if (v22 < 0xE
        || (v13 < (unint64_t)a4->u64 + (v22 >> 1) + 1
          ? (v23 = (unint64_t)a4 >= (v22 & 0xFFFFFFFFFFFFFFFELL) + v13 + 2)
          : (v23 = 1),
            !v23))
      {
        v26 = (_WORD *)v13;
        v27 = a4;
        goto LABEL_27;
      }
      v24 = (v22 >> 1) + 1;
      if (v22 >= 0x3E)
      {
        v25 = v24 & 0xFFFFFFFFFFFFFFE0;
        v55 = (uint8x8_t *)&a4[1];
        v56 = (uint16x8_t *)(v13 + 32);
        v57 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v58 = *(uint8x16_t *)v55[-2].i8;
          v59 = vmovl_u8(*v55);
          v60 = vmovl_high_u8(*(uint8x16_t *)v55->i8);
          v56[-2] = vmovl_u8(*(uint8x8_t *)v58.i8);
          v56[-1] = vmovl_high_u8(v58);
          *v56 = v59;
          v56[1] = v60;
          v56 += 4;
          v55 += 4;
          v57 -= 32;
        }
        while (v57);
        if (v24 == v25)
          goto LABEL_28;
        if ((v24 & 0x18) == 0)
        {
          v27 = (int8x16_t *)((char *)a4 + v25);
          v26 = (_WORD *)(v13 + 2 * v25);
          do
          {
LABEL_27:
            v28 = v27->u8[0];
            v27 = (int8x16_t *)((char *)v27 + 1);
            *v26++ = v28;
          }
          while (v26 != (_WORD *)result);
          goto LABEL_28;
        }
      }
      else
      {
        v25 = 0;
      }
      v26 = (_WORD *)(v13 + 2 * (v24 & 0xFFFFFFFFFFFFFFF8));
      v27 = (int8x16_t *)((char *)a4 + (v24 & 0xFFFFFFFFFFFFFFF8));
      v61 = (uint8x8_t *)&a4->i8[v25];
      v62 = (uint16x8_t *)(v13 + 2 * v25);
      v63 = v25 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v64 = *v61++;
        *v62++ = vmovl_u8(v64);
        v63 += 8;
      }
      while (v63);
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_27;
    }
LABEL_28:
    if (!a6)
      goto LABEL_11;
    v29 = *(int8x16_t **)(a6 + 8);
    v30 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) == 0)
    {
      if (!(_DWORD)v30)
        goto LABEL_11;
      if ((_DWORD)v30 == 1)
      {
        *(_WORD *)result = v29->i16[0];
        goto LABEL_11;
      }
      v31 = 2 * v30;
LABEL_66:
      result = (unint64_t)memcpy((void *)result, v29, v31);
      goto LABEL_11;
    }
    v39 = (_WORD *)(result + 2 * v30);
    if (v30 >= 0x40)
    {
      v40 = result + 2 * (v30 & 0xFFFFFFC0);
      v41 = 0uLL;
      do
      {
        v90.val[0] = *v29;
        v42 = v29[1];
        v92.val[0] = v29[2];
        v43 = v29[3];
        v29 += 4;
        v44 = v43;
        v92.val[1] = 0uLL;
        v94.val[0] = v42;
        v90.val[1] = 0uLL;
        v45 = (char *)result;
        vst2q_s8(v45, v90);
        v45 += 32;
        v94.val[1] = 0uLL;
        vst2q_s8(v45, v94);
        v46 = (char *)(result + 64);
        vst2q_s8(v46, v92);
        v47 = (char *)(result + 96);
        vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
        result += 128;
      }
      while (result != v40);
      result = v40;
    }
    if ((_WORD *)result == v39)
      goto LABEL_11;
    v48 = v88 + 2 * (a5 + v30) - result + 18;
    if (v48 < 0xE
      || result < (unint64_t)v29->u64 + (v48 >> 1) + 1
      && (unint64_t)v29 < (v48 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
    {
      v49 = (_WORD *)result;
      v50 = v29;
      goto LABEL_60;
    }
    v65 = (v48 >> 1) + 1;
    if (v48 >= 0x3E)
    {
      v66 = v65 & 0xFFFFFFFFFFFFFFE0;
      v78 = (uint8x8_t *)&v29[1];
      v79 = (uint16x8_t *)(result + 32);
      v80 = v65 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v81 = *(uint8x16_t *)v78[-2].i8;
        v82 = vmovl_u8(*v78);
        v83 = vmovl_high_u8(*(uint8x16_t *)v78->i8);
        v79[-2] = vmovl_u8(*(uint8x8_t *)v81.i8);
        v79[-1] = vmovl_high_u8(v81);
        *v79 = v82;
        v79[1] = v83;
        v79 += 4;
        v78 += 4;
        v80 -= 32;
      }
      while (v80);
      if (v65 == v66)
        goto LABEL_11;
      if ((v65 & 0x18) == 0)
      {
        v50 = (int8x16_t *)((char *)v29 + v66);
        v49 = (_WORD *)(result + 2 * v66);
        goto LABEL_60;
      }
    }
    else
    {
      v66 = 0;
    }
    v49 = (_WORD *)(result + 2 * (v65 & 0xFFFFFFFFFFFFFFF8));
    v50 = (int8x16_t *)((char *)v29 + (v65 & 0xFFFFFFFFFFFFFFF8));
    v84 = (uint8x8_t *)&v29->i8[v66];
    v85 = (uint16x8_t *)(result + 2 * v66);
    v86 = v66 - (v65 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v87 = *v84++;
      *v85++ = vmovl_u8(v87);
      v86 += 8;
    }
    while (v86);
    if (v65 == (v65 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    do
    {
LABEL_60:
      v51 = v50->u8[0];
      v50 = (int8x16_t *)((char *)v50 + 1);
      *v49++ = v51;
    }
    while (v49 != v39);
    goto LABEL_11;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_10:
    v11 = 0;
    goto LABEL_11;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  v11 = v88;
  if (!v88)
    goto LABEL_11;
  v12 = (_BYTE *)(v88 + 20);
  *(_DWORD *)v88 = 2;
  *(_DWORD *)(v88 + 4) = a2;
  *(_QWORD *)(v88 + 8) = v88 + 20;
  *(_DWORD *)(v88 + 16) = 4;
  if (!a5)
    goto LABEL_7;
  if (a5 == 1)
  {
    *v12 = a4->i8[0];
LABEL_7:
    if (!a6)
      goto LABEL_11;
    goto LABEL_34;
  }
  result = (unint64_t)memcpy((void *)(v88 + 20), a4, a5);
  if (!a6)
    goto LABEL_11;
LABEL_34:
  result = (unint64_t)&v12[a5];
  v29 = *(int8x16_t **)(a6 + 8);
  v31 = *(unsigned int *)(a6 + 4);
  if ((*(_BYTE *)(a6 + 16) & 4) != 0)
  {
    if (!(_DWORD)v31)
      goto LABEL_11;
    if ((_DWORD)v31 == 1)
    {
      *(_BYTE *)result = v29->i8[0];
      goto LABEL_11;
    }
    goto LABEL_66;
  }
  v32 = (_BYTE *)(result + v31);
  if (v31 >= 0x10)
  {
    v33 = result + (v31 & 0xFFFFFFF0);
    do
    {
      v34 = (unsigned __int128)vld2q_s8(v29->i8);
      v29 += 2;
      *(_OWORD *)result = v34;
      result += 16;
    }
    while (result != v33);
    result = v33;
  }
  if ((_BYTE *)result != v32)
  {
    v35 = v88 + v31 + a5;
    v36 = v35 - result + 20;
    if (v36 < 8
      || (result < (unint64_t)&v29[2].u64[1] + 2 * v35 + -2 * result
        ? (v37 = (unint64_t)v29 >= v35 + 20)
        : (v37 = 1),
          !v37))
    {
      v52 = (_BYTE *)result;
      v53 = v29;
      goto LABEL_63;
    }
    if (v36 >= 0x20)
    {
      v38 = v36 & 0xFFFFFFFFFFFFFFE0;
      v67 = v29 + 2;
      v68 = (int8x16_t *)(result + 16);
      v69 = v36 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v71 = v67[-2];
        v70 = v67[-1];
        v73 = *v67;
        v72 = v67[1];
        v67 += 4;
        v68[-1] = vuzp1q_s8(v71, v70);
        *v68 = vuzp1q_s8(v73, v72);
        v68 += 2;
        v69 -= 32;
      }
      while (v69);
      if (v36 == v38)
        goto LABEL_11;
      if ((v36 & 0x18) == 0)
      {
        v53 = (int8x16_t *)((char *)v29 + 2 * v38);
        v52 = (_BYTE *)(result + v38);
        do
        {
LABEL_63:
          v54 = v53->i8[0];
          v53 = (int8x16_t *)((char *)v53 + 2);
          *v52++ = v54;
        }
        while (v52 != v32);
        goto LABEL_11;
      }
    }
    else
    {
      v38 = 0;
    }
    v52 = (_BYTE *)(result + (v36 & 0xFFFFFFFFFFFFFFF8));
    v53 = (int8x16_t *)((char *)v29 + 2 * (v36 & 0xFFFFFFFFFFFFFFF8));
    v74 = (int16x8_t *)((char *)v29 + 2 * v38);
    v75 = (int8x8_t *)(result + v38);
    v76 = v38 - (v36 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v77 = *v74++;
      *v75++ = vmovn_s16(v77);
      v76 += 8;
    }
    while (v76);
    if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_63;
  }
LABEL_11:
  *v10 = v11;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::readStreamCallback(__CFReadStream *,unsigned long,void *)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  __CFReadStream *v4;
  uint64_t v5;
  int v6;
  __CFHTTPMessage *v7;
  __CFHTTPMessage *v8;
  CFTypeID v9;
  CFIndex ResponseStatusCode;
  int v11;
  _CFHTTPAuthentication *v12;
  CFStringRef v13;
  CFStringRef v14;
  CFStringRef v15;
  uint64_t v16;
  uint64_t v17;
  __CFError *v18;
  NSObject *v19;
  const UInt8 *Buffer;
  uint8_t *v21;
  CFIndex v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  StringImpl *v42;
  CFTypeRef v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t (***v46)(_QWORD);
  StringImpl *v47;
  CFIndex v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  const void *v52;
  CFTypeRef v53;
  const void *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  StringImpl *v57;
  CFIndex v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  const void *v62;
  CFTypeRef v63;
  const void *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  StringImpl *v67;
  char isEmpty;
  StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  CFTypeRef v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  __CFHTTPMessage *Request;
  const __CFString *v84;
  const void *v85;
  WTF::StringImpl *v86;
  CFStringRef v87;
  CFStringRef v88;
  __CFReadStream *v89;
  const __CFString *v90;
  const __CFDictionary *v91;
  const __CFAllocator *v92;
  __CFDictionary *MutableCopy;
  CFDictionaryRef v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  CFTypeRef v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  const __CFDictionary *v106;
  __CFHTTPMessage *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  CFTypeRef cf;
  char v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  CFTypeRef v114;
  unsigned int valuePtr;
  uint8_t buf[8];
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  CFTypeRef v119;
  CFIndex numBytesRead;
  WTF::StringImpl *v121;
  char v122;
  const void *v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  v4 = *(__CFReadStream **)(*v2 + 120);
  if (v4)
  {
    v5 = **(_QWORD **)(a1 + 16);
    switch(v5)
    {
      case 16:
        WebCore::SocketStreamHandleImpl::platformClose((WebCore::SocketStreamHandleImpl *)v3);
        return;
      case 8:
        v18 = CFReadStreamCopyError(v4);
        WebCore::SocketStreamHandleImpl::reportErrorToClient((WebCore::SocketStreamHandleImpl *)v3, v18);
        if (v18)
          CFRelease(v18);
        break;
      case 2:
        v6 = *(_DWORD *)(v3 + 80);
        if (v6 != 2)
        {
          if (v6 == 3)
          {
            if (*(_DWORD *)(v3 + 84) == 3)
            {
              v7 = (__CFHTTPMessage *)CFReadStreamCopyProperty(v4, (CFStreamPropertyKey)*MEMORY[0x1E0C931F8]);
              if (!v7)
              {
                _CFHTTPMessageSetResponseURL();
                return;
              }
              v8 = v7;
              v9 = CFGetTypeID(v7);
              if (v9 != CFHTTPMessageGetTypeID())
              {
                __break(0xC471u);
                JUMPOUT(0x1D7FEA424);
              }
              _CFHTTPMessageSetResponseURL();
              ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(v8);
              if (ResponseStatusCode != 200)
              {
                v11 = ResponseStatusCode;
                if (ResponseStatusCode == 407)
                {
                  v12 = CFHTTPAuthenticationCreateFromResponse(0, v8);
                  if (!CFHTTPAuthenticationRequiresUserNameAndPassword(v12))
                  {
                    v28 = *(_QWORD *)(v3 + 56);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v29 = *(WTF::StringImpl **)buf;
                    *(_DWORD *)buf = 0;
                    v30 = *(WTF::StringImpl **)(v3 + 16);
                    if (v30)
                      *(_DWORD *)v30 += 2;
                    v117 = v30;
                    if (v29)
                      *(_DWORD *)v29 += 2;
                    v118 = v29;
                    LOBYTE(v119) = 0;
                    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v28 + 56))(v28, v3, buf);
                    v32 = v118;
                    v118 = 0;
                    if (v32)
                    {
                      if (*(_DWORD *)v32 == 2)
                        WTF::StringImpl::destroy(v32, v31);
                      else
                        *(_DWORD *)v32 -= 2;
                    }
                    v40 = v117;
                    v117 = 0;
                    if (v40)
                    {
                      if (*(_DWORD *)v40 == 2)
                        WTF::StringImpl::destroy(v40, v31);
                      else
                        *(_DWORD *)v40 -= 2;
                    }
                    if (v29)
                    {
                      if (*(_DWORD *)v29 == 2)
                        WTF::StringImpl::destroy(v29, v31);
                      else
                        *(_DWORD *)v29 -= 2;
                    }
                    goto LABEL_234;
                  }
                  valuePtr = 0;
                  CFNumberGetValue(*(CFNumberRef *)(v3 + 96), kCFNumberIntType, &valuePtr);
                  v13 = CFHTTPAuthenticationCopyMethod(v12);
                  v14 = CFHTTPAuthenticationCopyRealm(v12);
                  v15 = v14;
                  if (v13 && v14)
                  {
                    MEMORY[0x1D82A3998](buf, *(_QWORD *)(v3 + 88));
                    v16 = valuePtr;
                    MEMORY[0x1D82A3998](&numBytesRead, v15);
                    if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E0C930B8]))
                    {
                      v17 = 2;
                    }
                    else if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E0C930C0]))
                    {
                      v17 = 3;
                    }
                    else if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E0C930C8]))
                    {
                      v17 = 5;
                    }
                    else if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E0C930D0]))
                    {
                      v17 = 6;
                    }
                    else
                    {
                      v17 = 100;
                    }
                    LOBYTE(cf) = 0;
                    v111 = 0;
                    MEMORY[0x1D82A4D0C](&v112, buf, v16, 6, &numBytesRead, v17, &cf);
                    if (v111)
                    {
                      v43 = cf;
                      cf = 0;
                      if (v43)
                        CFRelease(v43);
                    }
                    v44 = (WTF::StringImpl *)numBytesRead;
                    numBytesRead = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, v42);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v45 = *(WTF::StringImpl **)buf;
                    *(_QWORD *)buf = 0;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 2)
                        WTF::StringImpl::destroy(v45, v42);
                      else
                        *(_DWORD *)v45 -= 2;
                    }
                    v108 = 0;
                    v109 = 0;
                    if (*(_BYTE *)(v3 + 112))
                      goto LABEL_167;
                    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)buf);
                    v119 = 0;
                    v46 = *(uint64_t (****)(_QWORD))(v3 + 160);
                    if (v46 && (**v46)(v46))
                    {
                      WebCore::CredentialStorage::getFromPersistentStorage();
                      v48 = numBytesRead;
                      numBytesRead = 0;
                      v49 = *(WTF::StringImpl **)buf;
                      *(_QWORD *)buf = v48;
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2)
                          WTF::StringImpl::destroy(v49, v47);
                        else
                          *(_DWORD *)v49 -= 2;
                      }
                      v50 = v121;
                      v121 = 0;
                      v51 = v117;
                      v117 = v50;
                      if (v51)
                      {
                        if (*(_DWORD *)v51 == 2)
                          WTF::StringImpl::destroy(v51, v47);
                        else
                          *(_DWORD *)v51 -= 2;
                      }
                      LOBYTE(v118) = v122;
                      v52 = v123;
                      v123 = 0;
                      v53 = v119;
                      v119 = v52;
                      if (v53)
                      {
                        CFRelease(v53);
                        v54 = v123;
                        v123 = 0;
                        if (v54)
                          CFRelease(v54);
                      }
                      v55 = v121;
                      v121 = 0;
                      if (v55)
                      {
                        if (*(_DWORD *)v55 == 2)
                          WTF::StringImpl::destroy(v55, v47);
                        else
                          *(_DWORD *)v55 -= 2;
                      }
                      v56 = (WTF::StringImpl *)numBytesRead;
                      numBytesRead = 0;
                      if (v56)
                      {
                        if (*(_DWORD *)v56 == 2)
                          WTF::StringImpl::destroy(v56, v47);
                        else
                          *(_DWORD *)v56 -= 2;
                      }
                      if (WebCore::Credential::isEmpty((WebCore::Credential *)buf))
                      {
                        WebCore::CredentialStorage::get();
                        v58 = numBytesRead;
                        numBytesRead = 0;
                        v59 = *(WTF::StringImpl **)buf;
                        *(_QWORD *)buf = v58;
                        if (v59)
                        {
                          if (*(_DWORD *)v59 == 2)
                            WTF::StringImpl::destroy(v59, v57);
                          else
                            *(_DWORD *)v59 -= 2;
                        }
                        v60 = v121;
                        v121 = 0;
                        v61 = v117;
                        v117 = v60;
                        if (v61)
                        {
                          if (*(_DWORD *)v61 == 2)
                            WTF::StringImpl::destroy(v61, v57);
                          else
                            *(_DWORD *)v61 -= 2;
                        }
                        LOBYTE(v118) = v122;
                        v62 = v123;
                        v123 = 0;
                        v63 = v119;
                        v119 = v62;
                        if (v63)
                        {
                          CFRelease(v63);
                          v64 = v123;
                          v123 = 0;
                          if (v64)
                            CFRelease(v64);
                        }
                        v65 = v121;
                        v121 = 0;
                        if (v65)
                        {
                          if (*(_DWORD *)v65 == 2)
                            WTF::StringImpl::destroy(v65, v57);
                          else
                            *(_DWORD *)v65 -= 2;
                        }
                        v66 = (WTF::StringImpl *)numBytesRead;
                        numBytesRead = 0;
                        if (v66)
                        {
                          if (*(_DWORD *)v66 == 2)
                            WTF::StringImpl::destroy(v66, v57);
                          else
                            *(_DWORD *)v66 -= 2;
                        }
                      }
                    }
                    isEmpty = WebCore::Credential::isEmpty((WebCore::Credential *)buf);
                    if ((isEmpty & 1) == 0)
                    {
                      v70 = *(WTF::StringImpl **)WebCore::CredentialBase::user((WebCore::CredentialBase *)buf);
                      if (v70)
                        *(_DWORD *)v70 += 2;
                      v71 = v109;
                      v109 = v70;
                      if (v71)
                      {
                        if (*(_DWORD *)v71 == 2)
                          WTF::StringImpl::destroy(v71, v69);
                        else
                          *(_DWORD *)v71 -= 2;
                      }
                      v72 = *(WTF::StringImpl **)WebCore::CredentialBase::password((WebCore::CredentialBase *)buf);
                      if (v72)
                        *(_DWORD *)v72 += 2;
                      v73 = v108;
                      v108 = v72;
                      if (v73)
                      {
                        if (*(_DWORD *)v73 == 2)
                          WTF::StringImpl::destroy(v73, v67);
                        else
                          *(_DWORD *)v73 -= 2;
                      }
                    }
                    v74 = v119;
                    v119 = 0;
                    if (v74)
                      CFRelease(v74);
                    v75 = v117;
                    v117 = 0;
                    if (v75)
                    {
                      if (*(_DWORD *)v75 == 2)
                        WTF::StringImpl::destroy(v75, v67);
                      else
                        *(_DWORD *)v75 -= 2;
                    }
                    v76 = *(WTF::StringImpl **)buf;
                    *(_QWORD *)buf = 0;
                    if (v76)
                    {
                      if (*(_DWORD *)v76 == 2)
                        WTF::StringImpl::destroy(v76, v67);
                      else
                        *(_DWORD *)v76 -= 2;
                    }
                    if ((isEmpty & 1) != 0)
                    {
LABEL_167:
                      v77 = *(_QWORD *)(v3 + 56);
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v78 = *(WTF::StringImpl **)buf;
                      *(_DWORD *)buf = 0;
                      v79 = *(WTF::StringImpl **)(v3 + 16);
                      if (v79)
                        *(_DWORD *)v79 += 2;
                      v117 = v79;
                      if (v78)
                        *(_DWORD *)v78 += 2;
                      v118 = v78;
                      LOBYTE(v119) = 0;
                      (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v77 + 56))(v77, v3, buf);
                      v81 = v118;
                      v118 = 0;
                      if (v81)
                      {
                        if (*(_DWORD *)v81 == 2)
                          WTF::StringImpl::destroy(v81, v80);
                        else
                          *(_DWORD *)v81 -= 2;
                      }
                      v82 = v117;
                      v117 = 0;
                      if (v82)
                      {
                        if (*(_DWORD *)v82 == 2)
                          WTF::StringImpl::destroy(v82, v80);
                        else
                          *(_DWORD *)v82 -= 2;
                      }
                      if (v78)
                      {
                        if (*(_DWORD *)v78 == 2)
                          WTF::StringImpl::destroy(v78, v80);
                        else
                          *(_DWORD *)v78 -= 2;
                      }
                    }
                    else
                    {
                      Request = CFHTTPMessageCreateRequest(0, CFSTR("GET"), *(CFURLRef *)(v3 + 136), (CFStringRef)*MEMORY[0x1E0C930E8]);
                      WTF::String::createCFString((WTF::String *)&v109);
                      v84 = *(const __CFString **)buf;
                      WTF::String::createCFString((WTF::String *)&v108);
                      CFHTTPMessageApplyCredentials(Request, v12, v84, (CFStringRef)numBytesRead, 0);
                      v85 = (const void *)numBytesRead;
                      numBytesRead = 0;
                      if (v85)
                        CFRelease(v85);
                      v86 = *(WTF::StringImpl **)buf;
                      *(_QWORD *)buf = 0;
                      if (v86)
                        CFRelease(v86);
                      v107 = Request;
                      v87 = CFHTTPMessageCopyHeaderFieldValue(Request, CFSTR("Proxy-Authorization"));
                      if (v87)
                      {
                        v88 = v87;
                        v89 = *(__CFReadStream **)(v3 + 120);
                        v90 = (const __CFString *)*MEMORY[0x1E0C931E0];
                        v91 = (const __CFDictionary *)CFReadStreamCopyProperty(v89, (CFStreamPropertyKey)*MEMORY[0x1E0C931E0]);
                        v92 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                        v106 = v91;
                        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v91);
                        *(_QWORD *)buf = CFSTR("Proxy-Authorization");
                        numBytesRead = (CFIndex)v88;
                        v94 = CFDictionaryCreate(v92, (const void **)buf, (const void **)&numBytesRead, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0C931D8], v94);
                        CFReadStreamSetProperty(v89, v90, MutableCopy);
                        if (v94)
                          CFRelease(v94);
                        if (MutableCopy)
                          CFRelease(MutableCopy);
                        Request = v107;
                        if (v106)
                          CFRelease(v106);
                        *(_BYTE *)(v3 + 112) = 1;
                        CFRelease(v88);
                      }
                      else
                      {
                        v95 = *(_QWORD *)(v3 + 56);
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v96 = *(WTF::StringImpl **)buf;
                        *(_DWORD *)buf = 0;
                        v97 = *(WTF::StringImpl **)(v3 + 16);
                        if (v97)
                          *(_DWORD *)v97 += 2;
                        v117 = v97;
                        if (v96)
                          *(_DWORD *)v96 += 2;
                        v118 = v96;
                        LOBYTE(v119) = 0;
                        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v95 + 56))(v95, v3, buf);
                        v98 = v118;
                        v118 = 0;
                        if (v98)
                        {
                          if (*(_DWORD *)v98 == 2)
                            WTF::StringImpl::destroy(v98, v80);
                          else
                            *(_DWORD *)v98 -= 2;
                        }
                        v99 = v117;
                        v117 = 0;
                        if (v99)
                        {
                          if (*(_DWORD *)v99 == 2)
                            WTF::StringImpl::destroy(v99, v80);
                          else
                            *(_DWORD *)v99 -= 2;
                        }
                        if (v96)
                        {
                          if (*(_DWORD *)v96 == 2)
                            WTF::StringImpl::destroy(v96, v80);
                          else
                            *(_DWORD *)v96 -= 2;
                        }
                      }
                      if (Request)
                        CFRelease(Request);
                    }
                    v100 = v108;
                    v108 = 0;
                    if (v100)
                    {
                      if (*(_DWORD *)v100 == 2)
                        WTF::StringImpl::destroy(v100, v80);
                      else
                        *(_DWORD *)v100 -= 2;
                    }
                    v101 = v109;
                    v109 = 0;
                    if (v101)
                    {
                      if (*(_DWORD *)v101 == 2)
                        WTF::StringImpl::destroy(v101, v80);
                      else
                        *(_DWORD *)v101 -= 2;
                    }
                    v102 = v114;
                    v114 = 0;
                    if (v102)
                      CFRelease(v102);
                    v103 = v113;
                    v113 = 0;
                    if (v103)
                    {
                      if (*(_DWORD *)v103 == 2)
                        WTF::StringImpl::destroy(v103, v80);
                      else
                        *(_DWORD *)v103 -= 2;
                    }
                    v104 = v112;
                    v112 = 0;
                    if (v104)
                    {
                      if (*(_DWORD *)v104 == 2)
                        WTF::StringImpl::destroy(v104, v80);
                      else
                        *(_DWORD *)v104 -= 2;
                    }
                  }
                  else
                  {
                    v35 = *(_QWORD *)(v3 + 56);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v36 = *(WTF::StringImpl **)buf;
                    *(_DWORD *)buf = 0;
                    v37 = *(WTF::StringImpl **)(v3 + 16);
                    if (v37)
                      *(_DWORD *)v37 += 2;
                    v117 = v37;
                    if (v36)
                      *(_DWORD *)v36 += 2;
                    v118 = v36;
                    LOBYTE(v119) = 0;
                    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v35 + 56))(v35, v3, buf);
                    v39 = v118;
                    v118 = 0;
                    if (v39)
                    {
                      if (*(_DWORD *)v39 == 2)
                        WTF::StringImpl::destroy(v39, v38);
                      else
                        *(_DWORD *)v39 -= 2;
                    }
                    v41 = v117;
                    v117 = 0;
                    if (v41)
                    {
                      if (*(_DWORD *)v41 == 2)
                        WTF::StringImpl::destroy(v41, v38);
                      else
                        *(_DWORD *)v41 -= 2;
                    }
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, v38);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    if (!v15)
                      goto LABEL_232;
                  }
                  CFRelease(v15);
LABEL_232:
                  if (v13)
                    CFRelease(v13);
LABEL_234:
                  if (v12)
                    CFRelease(v12);
                  goto LABEL_236;
                }
                v23 = *(_QWORD *)(v3 + 56);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v24 = *(WTF::StringImpl **)buf;
                *(_DWORD *)buf = v11;
                v25 = *(WTF::StringImpl **)(v3 + 16);
                if (v25)
                  *(_DWORD *)v25 += 2;
                v117 = v25;
                if (v24)
                {
                  *(_DWORD *)v24 += 2;
                  v118 = v24;
                  LOBYTE(v119) = 0;
                  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v23 + 56))(v23, v3, buf);
                  v27 = v118;
                  v118 = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2)
                      WTF::StringImpl::destroy(v27, v26);
                    else
                      *(_DWORD *)v27 -= 2;
                  }
                  v33 = v117;
                  v117 = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, v26);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  if (*(_DWORD *)v24 != 2)
                  {
                    *(_DWORD *)v24 -= 2;
LABEL_55:
                    WebCore::SocketStreamHandleImpl::platformClose((WebCore::SocketStreamHandleImpl *)v3);
LABEL_236:
                    CFRelease(v8);
                    return;
                  }
                  v34 = v24;
                }
                else
                {
                  v118 = 0;
                  LOBYTE(v119) = 0;
                  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v23 + 56))(v23, v3, buf);
                  v105 = v118;
                  v118 = 0;
                  if (v105)
                  {
                    if (*(_DWORD *)v105 == 2)
                      WTF::StringImpl::destroy(v105, v26);
                    else
                      *(_DWORD *)v105 -= 2;
                  }
                  v34 = v117;
                  v117 = 0;
                  if (!v34)
                    goto LABEL_55;
                  if (*(_DWORD *)v34 != 2)
                  {
                    *(_DWORD *)v34 -= 2;
                    goto LABEL_55;
                  }
                }
                WTF::StringImpl::destroy(v34, v26);
                goto LABEL_55;
              }
              CFRelease(v8);
            }
            v19 = *(NSObject **)(MEMORY[0x1E0DCE780] + 32);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D7FB9000, v19, OS_LOG_TYPE_DEFAULT, "SocketStreamHandleImpl::readStreamCallback - m_connectionSubState is Connected", buf, 2u);
            }
            *(_DWORD *)(v3 + 80) = 4;
            *(_DWORD *)(v3 + 64) = 1;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 56) + 16))(*(_QWORD *)(v3 + 56), v3);
          }
          if (*(_DWORD *)(v3 + 64) != 3)
          {
            numBytesRead = 0;
            Buffer = CFReadStreamGetBuffer(*(CFReadStreamRef *)(v3 + 120), 0, &numBytesRead);
            if (Buffer)
            {
              v21 = (uint8_t *)Buffer;
              v22 = numBytesRead;
            }
            else
            {
              v21 = buf;
              v22 = CFReadStreamRead(*(CFReadStreamRef *)(v3 + 120), buf, 1024);
              numBytesRead = v22;
            }
            if (v22)
            {
              if (v22 == -1)
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 56) + 40))(*(_QWORD *)(v3 + 56), v3);
              else
                (*(void (**)(_QWORD, uint64_t, uint8_t *))(**(_QWORD **)(v3 + 56) + 32))(*(_QWORD *)(v3 + 56), v3, v21);
            }
          }
        }
        break;
    }
  }
}

void WTF::Detail::CallableWrapper<WebCore::SocketStreamHandleImpl::writeStreamCallback(__CFWriteStream *,unsigned long,void *)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  __CFWriteStream *v4;
  uint64_t v5;
  void *v6;
  int v7;
  __CFHTTPMessage *v8;
  __CFHTTPMessage *v9;
  CFTypeID v10;
  CFIndex ResponseStatusCode;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const UInt8 *v17;
  CFIndex v18;
  __CFWriteStream *v19;
  CFIndex v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  __CFError *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  v4 = *(__CFWriteStream **)(*v2 + 128);
  if (!v4)
    return;
  v5 = **(_QWORD **)(a1 + 16);
  if (v5 == 8)
  {
    v35 = CFWriteStreamCopyError(v4);
    WebCore::SocketStreamHandleImpl::reportErrorToClient((WebCore::SocketStreamHandleImpl *)v3, v35);
    if (v35)
      CFRelease(v35);
    return;
  }
  if (v5 != 4)
    return;
  if (!CFWriteStreamCanAcceptBytes(v4))
    return;
  v7 = *(_DWORD *)(v3 + 80);
  if (v7 == 2)
    return;
  if (v7 != 3)
    goto LABEL_12;
  if (*(_DWORD *)(v3 + 84) != 3)
    goto LABEL_11;
  v8 = (__CFHTTPMessage *)CFReadStreamCopyProperty(*(CFReadStreamRef *)(v3 + 120), (CFStreamPropertyKey)*MEMORY[0x1E0C931F8]);
  if (!v8)
  {
    _CFHTTPMessageSetResponseURL();
    return;
  }
  v9 = v8;
  v10 = CFGetTypeID(v8);
  if (v10 != CFHTTPMessageGetTypeID())
  {
    __break(0xC471u);
    JUMPOUT(0x1D7FEA7D8);
  }
  _CFHTTPMessageSetResponseURL();
  ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(v9);
  CFRelease(v9);
  if (ResponseStatusCode == 200)
  {
LABEL_11:
    *(_DWORD *)(v3 + 80) = 4;
    *(_DWORD *)(v3 + 64) = 1;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 56) + 16))(*(_QWORD *)(v3 + 56), v3);
LABEL_12:
    v12 = *(_DWORD *)(v3 + 64);
    if ((v12 - 1) > 1)
      return;
    v13 = *(_QWORD *)(v3 + 168);
    if (v13)
      goto LABEL_14;
    if (v12 == 1)
      return;
    if (v12 == 2)
    {
      v36 = (unsigned int *)(v3 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      *(_DWORD *)(v3 + 64) = 3;
      do
      {
        v38 = __ldaxr(v36);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v36));
      if (!v39)
      {
        atomic_store(1u, v36);
        v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v40 = off_1E9D6AA68;
        v40[1] = v36;
        v41 = v40;
        WTF::ensureOnMainThread();
        if (v41)
          (*(void (**)(_QWORD *))(*v41 + 8))(v41);
      }
      return;
    }
    while (1)
    {
LABEL_14:
      if (v13)
      {
        v14 = *(_QWORD *)(v3 + 184);
        if (v14 == *(_QWORD *)(v3 + 192))
        {
          __break(0xC471u);
          JUMPOUT(0x1D7FEA7B8);
        }
        v15 = *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v14);
        v16 = *(_QWORD *)(v3 + 176);
        v17 = (const UInt8 *)(*(_QWORD *)v15 + v16);
        v18 = *(unsigned int *)(v15 + 12) - v16;
        v19 = *(__CFWriteStream **)(v3 + 128);
        if (!v19)
        {
LABEL_22:
          v22 = 0;
          v21 = 0;
          goto LABEL_23;
        }
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = *(__CFWriteStream **)(v3 + 128);
        if (!v19)
          goto LABEL_22;
      }
      if (!CFWriteStreamCanAcceptBytes(v19))
        goto LABEL_22;
      v20 = CFWriteStreamWrite(*(CFWriteStreamRef *)(v3 + 128), v17, v18);
      if (v20 == -1)
        return;
      v21 = v20 & 0xFFFFFFFFFFFFFF00;
      v22 = v20;
LABEL_23:
      v23 = v21 | v22;
      if (!(v21 | v22))
        return;
      v24 = *(_QWORD *)(v3 + 168);
      if (!v24)
      {
        v13 = 0;
LABEL_48:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 56) + 48))(*(_QWORD *)(v3 + 56), v3, v13);
        return;
      }
      v25 = *(_QWORD *)(v3 + 184);
      if (v25 == *(_QWORD *)(v3 + 192))
      {
        __break(0xC471u);
        JUMPOUT(0x1D7FEA798);
      }
      v26 = *(_QWORD *)(v3 + 200);
      v27 = *(WTF **)(v26 + 8 * v25);
      v28 = *((unsigned int *)v27 + 3);
      v29 = *(_QWORD *)(v3 + 176);
      v30 = v28 - v29;
      v31 = v29 + v23;
      v13 = v24 - v23;
      *(_QWORD *)(v3 + 168) = v24 - v23;
      *(_QWORD *)(v3 + 176) = v31;
      if (v31 >= v28)
      {
        *(_QWORD *)(v3 + 176) = 0;
        *(_QWORD *)(v26 + 8 * v25) = 0;
        v32 = *(WTF **)v27;
        if (*(_QWORD *)v27)
        {
          *(_QWORD *)v27 = 0;
          *((_DWORD *)v27 + 2) = 0;
          WTF::fastFree(v32, v6);
        }
        WTF::fastFree(v27, v6);
        v33 = *(_QWORD *)(v3 + 184);
        if (v33 == *(unsigned int *)(v3 + 208) - 1)
          v34 = 0;
        else
          v34 = v33 + 1;
        *(_QWORD *)(v3 + 184) = v34;
        v13 = *(_QWORD *)(v3 + 168);
      }
      if (v23 != v30 || !v13)
        goto LABEL_48;
    }
  }
}

StringImpl **WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  StringImpl **v12;
  uint64_t v13;
  StringImpl *v14;
  StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  unsigned int v24;
  StringImpl *v25;
  StringImpl *v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  StringImpl **v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF *v43;
  StringImpl *v44;
  StringImpl *v45;
  StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  uint64_t v55;
  int v58;
  unsigned __int16 v59;
  char v60;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v55 = v5;
    do
    {
      v16 = v4 + 24 * v11;
      v8 = *(StringImpl **)v16;
      if (*(_QWORD *)v16 != -1)
      {
        if (v8)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v58 = -1640531527;
          v59 = 0;
          v60 = 0;
          WTF::add<WebCore::SecurityOrigin,WebCore::SecurityOrigin>(&v58, (uint64_t)v8, *(_QWORD *)(v16 + 8));
          v27 = v58;
          if (v60)
          {
            v28 = (v58 + v59) ^ ((v58 + v59) << 11);
            v27 = v28 + (v28 >> 17);
          }
          v29 = 0;
          v30 = (v27 ^ (8 * v27)) + ((v27 ^ (8 * v27)) >> 5);
          v31 = (v30 ^ (4 * v30)) + ((v30 ^ (4 * v30)) >> 15);
          v32 = v31 ^ (v31 << 10);
          if (v32)
            v33 = v32;
          else
            v33 = 0x800000;
          do
          {
            v34 = v33 & v24;
            v35 = (StringImpl **)(v23 + 24 * (v33 & v24));
            v33 = ++v29 + (v33 & v24);
          }
          while (*v35);
          v36 = v23 + 24 * v34;
          v39 = *(_QWORD *)(v36 + 16);
          v37 = (_QWORD *)(v36 + 16);
          v38 = v39;
          if (v39)
          {
            v40 = *(unsigned int *)(v38 - 4);
            if ((_DWORD)v40)
            {
              v41 = v38;
              do
              {
                v42 = *(WTF::StringImpl **)v41;
                if (*(_QWORD *)v41 != -1)
                {
                  v43 = *(WTF **)(v41 + 8);
                  if (v43)
                  {
                    *(_QWORD *)(v41 + 8) = 0;
                    *(_DWORD *)(v41 + 16) = 0;
                    WTF::fastFree(v43, v26);
                    v42 = *(WTF::StringImpl **)v41;
                  }
                  *(_QWORD *)v41 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, v26);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                }
                v41 += 24;
                --v40;
              }
              while (v40);
            }
            WTF::fastFree((WTF *)(v38 - 16), v26);
          }
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v35 + 1, v26);
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v35, v44);
          v45 = *(StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          *v35 = v45;
          v46 = *(StringImpl **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          v35[1] = v46;
          v47 = v4 + 24 * v11;
          *v37 = 0;
          v48 = *(_QWORD *)(v47 + 16);
          *(_QWORD *)(v47 + 16) = 0;
          *v37 = v48;
          v49 = *(_QWORD *)(v47 + 16);
          if (v49)
          {
            v50 = *(unsigned int *)(v49 - 4);
            if ((_DWORD)v50)
            {
              v51 = *(_QWORD *)(v47 + 16);
              do
              {
                v52 = *(WTF::StringImpl **)v51;
                if (*(_QWORD *)v51 != -1)
                {
                  v53 = *(WTF **)(v51 + 8);
                  if (v53)
                  {
                    *(_QWORD *)(v51 + 8) = 0;
                    *(_DWORD *)(v51 + 16) = 0;
                    WTF::fastFree(v53, v14);
                    v52 = *(WTF::StringImpl **)v51;
                  }
                  *(_QWORD *)v51 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, v14);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                }
                v51 += 24;
                --v50;
              }
              while (v50);
            }
            WTF::fastFree((WTF *)(v49 - 16), v14);
          }
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((_QWORD *)(v16 + 8), v14);
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((_QWORD *)(v4 + 24 * v11), v15);
          if (v16 == a3)
            v12 = v35;
          v13 = v55;
        }
        else
        {
          v17 = v4 + 24 * v11;
          v18 = *(_QWORD *)(v17 + 16);
          if (v18)
          {
            v19 = *(unsigned int *)(v18 - 4);
            if ((_DWORD)v19)
            {
              v20 = *(_QWORD *)(v17 + 16);
              do
              {
                v21 = *(WTF::StringImpl **)v20;
                if (*(_QWORD *)v20 != -1)
                {
                  v22 = *(WTF **)(v20 + 8);
                  if (v22)
                  {
                    *(_QWORD *)(v20 + 8) = 0;
                    *(_DWORD *)(v20 + 16) = 0;
                    WTF::fastFree(v22, v8);
                    v21 = *(WTF::StringImpl **)v20;
                  }
                  *(_QWORD *)v20 = 0;
                  if (v21)
                  {
                    if (*(_DWORD *)v21 == 2)
                      WTF::StringImpl::destroy(v21, v8);
                    else
                      *(_DWORD *)v21 -= 2;
                  }
                }
                v20 += 24;
                --v19;
              }
              while (v19);
            }
            WTF::fastFree((WTF *)(v18 - 16), v8);
          }
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((_QWORD *)(v16 + 8), v8);
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((_QWORD *)(v4 + 24 * v11), v25);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
  }
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::add<WebCore::SecurityOrigin,WebCore::SecurityOrigin>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
    v3 = -1;
  v4 = (v3 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)v3) << 16) ^ (*a1 + (unsigned __int16)v3);
  v5 = (v3 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(v3) + (v4 >> 11)) << 16) ^ (v4 + WORD2(v3) + (v4 >> 11));
  *a1 = v5 + (v5 >> 11);
  v15 = a1;
  v6 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v16 = &v15;
  ((void (*)(_QWORD **, uint64_t))off_1E9D6AAF8[v6])(&v16, a2 + 8);
  v9 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v9 == -1)
    v9 = -1;
  v10 = (v9 >> 5) & 0x7FFF800 ^ ((*a1 + (unsigned __int16)v9) << 16) ^ (*a1 + (unsigned __int16)v9);
  v11 = (v9 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v9) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v9) + (v10 >> 11));
  *a1 = v11 + (v11 >> 11);
  v15 = a1;
  v12 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v12 == -1)
  {
LABEL_8:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v14);
  }
  else
  {
    v16 = &v15;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E9D6AAF8[v12])(&v16, a3 + 8);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  WTF::StringImpl *v38;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    while (1)
    {
      v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
          {
            v19 = *(_DWORD *)(v18 - 8);
            v20 = *((_DWORD *)v13 + 4);
            if (v20 >= 0x100)
              goto LABEL_19;
LABEL_22:
            v21 = WTF::StringImpl::hashSlowCase(v13);
          }
          else
          {
            v19 = 0;
            v20 = *((_DWORD *)v13 + 4);
            if (v20 < 0x100)
              goto LABEL_22;
LABEL_19:
            v21 = v20 >> 8;
          }
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v24 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          v25 = v18 + 24 * v23;
          v28 = *(WTF **)(v25 + 8);
          v27 = (_QWORD *)(v25 + 8);
          v26 = v28;
          if (v28)
          {
            *v27 = 0;
            *(_DWORD *)(v18 + 24 * v23 + 16) = 0;
            WTF::fastFree(v26, v8);
            v29 = *v24;
            *v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v8);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
          else
          {
            *v24 = 0;
          }
          v30 = *v12;
          *v12 = 0;
          *v24 = v30;
          v31 = v4 + 24 * v9;
          *v27 = 0;
          v27[1] = 0;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = v31 + 8;
          *(_QWORD *)v32 = 0;
          *v27 = v33;
          v34 = *(_DWORD *)(v32 + 8);
          *(_DWORD *)(v32 + 8) = 0;
          v35 = v18 + 24 * v23;
          *(_DWORD *)(v35 + 16) = v34;
          v36 = *(_DWORD *)(v32 + 12);
          *(_DWORD *)(v32 + 12) = 0;
          *(_DWORD *)(v35 + 20) = v36;
          v37 = *(WTF **)v32;
          if (*(_QWORD *)v32)
          {
            *(_QWORD *)v32 = 0;
            *(_DWORD *)(v32 + 8) = 0;
            WTF::fastFree(v37, v8);
          }
          v38 = *v12;
          *v12 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v8);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (v12 == a3)
            v10 = v18 + 24 * v23;
          goto LABEL_9;
        }
        v14 = v4 + 24 * v9;
        v17 = *(WTF **)(v14 + 8);
        v16 = (_QWORD *)(v14 + 8);
        v15 = v17;
        if (v17)
        {
          *v16 = 0;
          *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
          WTF::fastFree(v15, v8);
          v13 = *v12;
        }
        *v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v8);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
LABEL_9:
      if (++v9 == v11)
        goto LABEL_37;
    }
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_37:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

char *WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  WTF *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  unint64_t v30;
  WTF *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v42;

  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = *(unsigned int *)(a1 + 12), v7 = (WTF *)((char *)v5 + 8 * v6), (unint64_t)v7 <= a3))
  {
    v23 = *(unsigned int *)(a1 + 8);
    v24 = v23 + (v23 >> 2);
    if (v24 >= 0x10)
      v25 = v24 + 1;
    else
      v25 = 16;
    if (v25 <= a2)
      v26 = a2;
    else
      v26 = v25;
    if (v26 <= v23)
      return (char *)a3;
    if (v26 >> 29)
      goto LABEL_47;
    v27 = *(unsigned int *)(a1 + 12);
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v26));
    *(_DWORD *)(a1 + 8) = v26;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v27)
    {
      v30 = (v27 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v30 < 3)
      {
        v31 = v5;
      }
      else
      {
        v31 = v5;
        if ((unint64_t)((char *)v28 - (char *)v5) >= 0x20)
        {
          v32 = v30 + 1;
          v33 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          v34 = &v28[v33];
          v31 = (WTF *)((char *)v5 + v33 * 8);
          v35 = (__int128 *)((char *)v5 + 16);
          v36 = v28 + 2;
          v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v38 = *v35;
            *(v36 - 1) = *(v35 - 1);
            *v36 = v38;
            v35 += 2;
            v36 += 2;
            v37 -= 4;
          }
          while (v37);
          v28 = v34;
          if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_35;
        }
      }
      do
      {
        v40 = *(_QWORD *)v31;
        v31 = (WTF *)((char *)v31 + 8);
        *v28++ = v40;
      }
      while (v31 != (WTF *)((char *)v5 + 8 * v27));
    }
LABEL_35:
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29);
    }
    return (char *)a3;
  }
  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= a2)
    v11 = a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    if (!(v11 >> 29))
    {
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v12;
      v14 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v14 < 3)
      {
        v15 = v5;
      }
      else
      {
        v15 = v5;
        if ((unint64_t)((char *)v12 - (char *)v5) >= 0x20)
        {
          v16 = v14 + 1;
          v17 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          v18 = &v12[v17];
          v15 = (WTF *)((char *)v5 + v17 * 8);
          v19 = (__int128 *)((char *)v5 + 16);
          v20 = v12 + 2;
          v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v22 = *v19;
            *(v20 - 1) = *(v19 - 1);
            *v20 = v22;
            v19 += 2;
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          v12 = v18;
          if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_42:
            v39 = *(WTF **)a1;
            if (v5)
            {
              if (v39 == v5)
              {
                *(_QWORD *)a1 = 0;
                *(_DWORD *)(a1 + 8) = 0;
              }
              WTF::fastFree(v5, v13);
              v39 = *(WTF **)a1;
            }
            return (char *)v39 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
          }
        }
      }
      do
      {
        v42 = *(_QWORD *)v15;
        v15 = (WTF *)((char *)v15 + 8);
        *v12++ = v42;
      }
      while (v15 != v7);
      goto LABEL_42;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1D7FEB150);
  }
  v39 = *(WTF **)a1;
  return (char *)v39 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
}

uint64_t WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  WebCore::SecurityOrigin **v13;
  WebCore::SecurityOrigin *v14;
  int v16;
  unsigned __int16 v17;
  char v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v16 = -1640531527;
  v17 = 0;
  v18 = 0;
  WTF::add<WebCore::SecurityOrigin,WebCore::SecurityOrigin>(&v16, *a2, a2[1]);
  v6 = v16;
  if (v18)
  {
    v7 = (v16 + v17) ^ ((v16 + v17) << 11);
    v6 = v7 + (v7 >> 17);
  }
  v8 = 0;
  v9 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = v10 ^ (v10 << 10);
  if (!v11)
    v11 = 0x800000;
  while (1)
  {
    v12 = v11 & v5;
    v13 = (WebCore::SecurityOrigin **)(v2 + 24 * (v11 & v5));
    v14 = *v13;
    if (*v13 == (WebCore::SecurityOrigin *)-1)
      goto LABEL_7;
    if (!v14)
      break;
    if (WebCore::SecurityOrigin::isSameOriginAs(v14, (const WebCore::SecurityOrigin *)*a2)
      && (WebCore::SecurityOrigin::isSameOriginAs(v13[1], (const WebCore::SecurityOrigin *)a2[1]) & 1) != 0)
    {
      return (uint64_t)v13;
    }
LABEL_7:
    v11 = ++v8 + v12;
  }
  if (!*a1)
    return 0;
  return *a1 + 24 * *(unsigned int *)(*a1 - 4);
}

_QWORD *WTF::Detail::CallableWrapper<WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = result[1];
  *result = &off_1E9D6AB18;
  result[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v7 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = this;
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6AB18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v7 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      WTF::fastFree((WTF *)v3, a2);
      this = v2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>>>,WTF::StringHash,WTF::HashMap<WTF::String,std::unique_ptr<WebResourceLoadScheduler::HostInformation>,WTF::StringHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebResourceLoadScheduler::HostInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebResourceLoadScheduler::HostInformation *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WebResourceLoadScheduler::HostInformation *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebResourceLoadScheduler::HostInformation *v29;
  uint64_t v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 == (WTF::StringImpl *)-1)
        goto LABEL_7;
      if (!v11)
      {
        v12 = v4 + 16 * v9;
        v13 = *(WebResourceLoadScheduler::HostInformation **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
        {
          WebResourceLoadScheduler::HostInformation::~HostInformation(v13, v8);
          if (!*(_DWORD *)(v14 + 8))
          {
            WTF::fastFree((WTF *)v14, v8);
            goto LABEL_13;
          }
          *(_QWORD *)(v14 + 192) = 0;
          *(_OWORD *)(v14 + 160) = 0u;
          *(_OWORD *)(v14 + 176) = 0u;
          *(_OWORD *)(v14 + 128) = 0u;
          *(_OWORD *)(v14 + 144) = 0u;
          *(_OWORD *)(v14 + 96) = 0u;
          *(_OWORD *)(v14 + 112) = 0u;
          *(_OWORD *)(v14 + 64) = 0u;
          *(_OWORD *)(v14 + 80) = 0u;
          *(_OWORD *)(v14 + 32) = 0u;
          *(_OWORD *)(v14 + 48) = 0u;
          *(_OWORD *)v14 = 0u;
          *(_OWORD *)(v14 + 16) = 0u;
          v15 = *v10;
          *v10 = 0;
          if (!v15)
            goto LABEL_7;
        }
        else
        {
LABEL_13:
          v15 = *v10;
          *v10 = 0;
          if (!v15)
            goto LABEL_7;
        }
        if (*(_DWORD *)v15 == 2)
          goto LABEL_36;
        *(_DWORD *)v15 -= 2;
        goto LABEL_7;
      }
      v16 = *a1;
      if (*a1)
      {
        v17 = *(_DWORD *)(v16 - 8);
        v18 = *((_DWORD *)v11 + 4);
        if (v18 < 0x100)
          goto LABEL_20;
      }
      else
      {
        v17 = 0;
        v18 = *((_DWORD *)v11 + 4);
        if (v18 < 0x100)
        {
LABEL_20:
          v19 = WTF::StringImpl::hashSlowCase(v11);
          goto LABEL_21;
        }
      }
      v19 = v18 >> 8;
LABEL_21:
      v20 = 0;
      do
      {
        v21 = v19 & v17;
        v19 = ++v20 + v21;
      }
      while (*(_QWORD *)(v16 + 16 * v21));
      v22 = (WTF::StringImpl **)(v16 + 16 * v21);
      v23 = v22[1];
      v22[1] = 0;
      if (v23)
      {
        WebResourceLoadScheduler::HostInformation::~HostInformation(v23, v8);
        if (*(_DWORD *)(v24 + 8))
        {
          *(_QWORD *)(v24 + 192) = 0;
          *(_OWORD *)(v24 + 160) = 0u;
          *(_OWORD *)(v24 + 176) = 0u;
          *(_OWORD *)(v24 + 128) = 0u;
          *(_OWORD *)(v24 + 144) = 0u;
          *(_OWORD *)(v24 + 96) = 0u;
          *(_OWORD *)(v24 + 112) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          *(_OWORD *)(v24 + 80) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_OWORD *)(v24 + 48) = 0u;
          *(_OWORD *)v24 = 0u;
          *(_OWORD *)(v24 + 16) = 0u;
          v25 = *v22;
          *v22 = 0;
          if (!v25)
            goto LABEL_31;
          goto LABEL_27;
        }
        WTF::fastFree((WTF *)v24, v8);
      }
      v25 = *v22;
      *v22 = 0;
      if (!v25)
        goto LABEL_31;
LABEL_27:
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v8);
      else
        *(_DWORD *)v25 -= 2;
LABEL_31:
      v26 = *v10;
      *v10 = 0;
      *v22 = v26;
      v27 = v4 + 16 * v9;
      v28 = *(WTF::StringImpl **)(v27 + 8);
      *(_QWORD *)(v27 + 8) = 0;
      v22[1] = v28;
      v29 = *(WebResourceLoadScheduler::HostInformation **)(v27 + 8);
      *(_QWORD *)(v27 + 8) = 0;
      if (!v29)
        goto LABEL_34;
      WebResourceLoadScheduler::HostInformation::~HostInformation(v29, v8);
      if (!*(_DWORD *)(v30 + 8))
      {
        WTF::fastFree((WTF *)v30, v8);
LABEL_34:
        v15 = *v10;
        *v10 = 0;
        if (!v15)
          goto LABEL_7;
        goto LABEL_35;
      }
      *(_QWORD *)(v30 + 192) = 0;
      *(_OWORD *)(v30 + 160) = 0u;
      *(_OWORD *)(v30 + 176) = 0u;
      *(_OWORD *)(v30 + 128) = 0u;
      *(_OWORD *)(v30 + 144) = 0u;
      *(_OWORD *)(v30 + 96) = 0u;
      *(_OWORD *)(v30 + 112) = 0u;
      *(_OWORD *)(v30 + 64) = 0u;
      *(_OWORD *)(v30 + 80) = 0u;
      *(_OWORD *)(v30 + 32) = 0u;
      *(_OWORD *)(v30 + 48) = 0u;
      *(_OWORD *)v30 = 0u;
      *(_OWORD *)(v30 + 16) = 0u;
      v15 = *v10;
      *v10 = 0;
      if (!v15)
        goto LABEL_7;
LABEL_35:
      if (*(_DWORD *)v15 == 2)
      {
LABEL_36:
        WTF::StringImpl::destroy(v15, v8);
        goto LABEL_7;
      }
      *(_DWORD *)v15 -= 2;
LABEL_7:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebResourceLoadScheduler::*&)(void),WebResourceLoadScheduler*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebResourceLoadScheduler::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9D6AB68;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebResourceLoadScheduler::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E9D6AB68;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebResourceLoadScheduler::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, WebCore::ResourceLoader **a2)
{
  WebCore::ResourceLoader *v4;
  uint64_t v5;
  _DWORD *result;
  uint64_t v7;
  _DWORD *v8;

  v4 = *a2;
  if (v4
    && (WebResourceLoadScheduler::scheduleLoad(*(WebResourceLoadScheduler **)(a1 + 8), v4), *a2)
    && !*((_BYTE *)*a2 + 752))
  {
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, WebCore::ResourceLoader **))(*(_QWORD *)v7 + 16))(v7, a2);
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    v8 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v5 + 16))(v5, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (result[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[4];
    }
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::add(_DWORD *result, uint64_t *a2, _QWORD *a3)
{
  _DWORD *v5;
  uint64_t v6;
  char v7;
  int v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (_DWORD *)*a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (_QWORD *)(v6 + 8 * v13);
  v15 = (_DWORD *)*v14;
  if (!*v14)
  {
LABEL_12:
    *a3 = 0;
    result = (_DWORD *)*v14;
    *v14 = v9;
    if (result)
    {
      if (result[4] == 1)
      {
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        v18 = *a2;
        if (*a2)
        {
LABEL_16:
          ++*(_DWORD *)(v18 - 12);
          v19 = *a2;
          if (*a2)
            goto LABEL_17;
          goto LABEL_26;
        }
LABEL_25:
        *(_DWORD *)(v18 - 12) = 1;
        v19 = *a2;
        if (*a2)
        {
LABEL_17:
          v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
          v21 = *(unsigned int *)(v19 - 4);
          if (v21 <= 0x400)
            goto LABEL_18;
          goto LABEL_27;
        }
LABEL_26:
        v20 = *(unsigned int *)(v19 - 16);
        v21 = *(unsigned int *)(v19 - 4);
        if (v21 <= 0x400)
        {
LABEL_18:
          if (3 * v21 > 4 * v20)
          {
LABEL_30:
            *(_QWORD *)v5 = v14;
            *((_QWORD *)v5 + 1) = v19 + 8 * v21;
            *((_BYTE *)v5 + 16) = 1;
            return result;
          }
          if (!(_DWORD)v21)
          {
            result = WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a2, 8u, v14);
            v14 = result;
            v19 = *a2;
            if (!*a2)
            {
LABEL_21:
              v21 = 0;
              goto LABEL_30;
            }
LABEL_29:
            v21 = *(unsigned int *)(v19 - 4);
            goto LABEL_30;
          }
LABEL_28:
          result = WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a2, (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21)), v14);
          v14 = result;
          v19 = *a2;
          if (!*a2)
            goto LABEL_21;
          goto LABEL_29;
        }
LABEL_27:
        if (v21 > 2 * v20)
          goto LABEL_30;
        goto LABEL_28;
      }
      --result[4];
    }
    v18 = *a2;
    if (*a2)
      goto LABEL_16;
    goto LABEL_25;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != v9)
  {
    if (v15 == (_DWORD *)-1)
      v16 = v14;
    v13 = (v13 + v17) & v8;
    v14 = (_QWORD *)(v6 + 8 * v13);
    v15 = (_DWORD *)*v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        --*(_DWORD *)(*a2 - 16);
        v9 = (_DWORD *)*a3;
        v14 = v16;
      }
      goto LABEL_12;
    }
  }
  if ((v7 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)v5 = v14;
  *((_QWORD *)v5 + 1) = v6 + 8 * v22;
  *((_BYTE *)v5 + 16) = 0;
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 8 * v11);
      v14 = (_DWORD *)*v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = (_DWORD *)*v13;
          *v13 = 0;
          *v24 = v25;
          v26 = (_DWORD *)*v13;
          *v13 = 0;
          if (v26)
          {
            if (v26[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[4];
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::WebSocketChannel::*&)(void),WebCore::WebSocketChannel*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WTF::Deque<std::unique_ptr<WebCore::WebSocketChannel::QueuedFrame>,0ul>::destroyAll(uint64_t *result, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF *v24;
  WTF *v25;

  v2 = *result;
  v3 = result[1];
  v4 = (uint64_t *)result[2];
  if (*result <= v3)
  {
    if (*result == v3)
      return result;
    v11 = v2;
    v12 = &v4[v11];
    v13 = 8 * v3 - v11 * 8;
    while (1)
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        break;
LABEL_22:
      ++v12;
      v13 -= 8;
      if (!v13)
        return result;
    }
    v15 = *(_DWORD **)(v14 + 32);
    *(_QWORD *)(v14 + 32) = 0;
    if (v15)
    {
      if (v15[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        v16 = *(WTF **)(v14 + 16);
        if (!v16)
          goto LABEL_29;
        goto LABEL_28;
      }
      --v15[4];
    }
    v16 = *(WTF **)(v14 + 16);
    if (!v16)
    {
LABEL_29:
      v17 = *(WTF **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          WTF::fastFree(v17, a2);
        else
          --*(_DWORD *)v17;
      }
      result = (uint64_t *)WTF::fastFree((WTF *)v14, a2);
      goto LABEL_22;
    }
LABEL_28:
    *(_QWORD *)(v14 + 16) = 0;
    *(_DWORD *)(v14 + 24) = 0;
    WTF::fastFree(v16, a2);
    goto LABEL_29;
  }
  v5 = result;
  if (!v3)
    goto LABEL_35;
  v6 = 8 * v3;
  do
  {
    v7 = *v4;
    *v4 = 0;
    if (!v7)
      goto LABEL_6;
    v8 = *(_DWORD **)(v7 + 32);
    *(_QWORD *)(v7 + 32) = 0;
    if (v8)
    {
      if (v8[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v9 = *(WTF **)(v7 + 16);
        if (!v9)
          goto LABEL_13;
LABEL_12:
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        WTF::fastFree(v9, a2);
        goto LABEL_13;
      }
      --v8[4];
    }
    v9 = *(WTF **)(v7 + 16);
    if (v9)
      goto LABEL_12;
LABEL_13:
    v10 = *(WTF **)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, a2);
      else
        --*(_DWORD *)v10;
    }
    result = (uint64_t *)WTF::fastFree((WTF *)v7, a2);
LABEL_6:
    ++v4;
    v6 -= 8;
  }
  while (v6);
  v4 = (uint64_t *)v5[2];
  v2 = *v5;
LABEL_35:
  v18 = *((unsigned int *)v5 + 6);
  if (v2 != v18)
  {
    v19 = v2;
    v20 = &v4[v19];
    v21 = 8 * v18 - v19 * 8;
    while (1)
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
        break;
LABEL_40:
      ++v20;
      v21 -= 8;
      if (!v21)
        return result;
    }
    v23 = *(_DWORD **)(v22 + 32);
    *(_QWORD *)(v22 + 32) = 0;
    if (v23)
    {
      if (v23[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
        v24 = *(WTF **)(v22 + 16);
        if (!v24)
          goto LABEL_47;
        goto LABEL_46;
      }
      --v23[4];
    }
    v24 = *(WTF **)(v22 + 16);
    if (!v24)
    {
LABEL_47:
      v25 = *(WTF **)(v22 + 8);
      *(_QWORD *)(v22 + 8) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::fastFree(v25, a2);
        else
          --*(_DWORD *)v25;
      }
      result = (uint64_t *)WTF::fastFree((WTF *)v22, a2);
      goto LABEL_40;
    }
LABEL_46:
    *(_QWORD *)(v22 + 16) = 0;
    *(_DWORD *)(v22 + 24) = 0;
    WTF::fastFree(v24, a2);
    goto LABEL_47;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0,WTF::String,WTF::URL const&>::~CallableWrapper(_QWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;

  v2 = result;
  v3 = result[1];
  *result = &off_1E9D6ABB8;
  result[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v7, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0,WTF::String,WTF::URL const&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;

  v2 = this;
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6ABB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v7, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
      this = v2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_0,WTF::String,WTF::URL const&>::call@<X0>(WTF::URL *a1@<X1>, uint64_t result@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  WebCore::Document *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v5 = *(WebCore::Document **)(v3 + 8);
    if (v5)
    {
      v6 = *((_QWORD *)v5 + 66);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 24);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
              return WebCore::CookieJar::cookieRequestHeaderFieldValue(*(WebCore::CookieJar **)(v9 + 888), v5, a1);
          }
        }
      }
    }
  }
  *a3 = 0;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_1,void,BOOL,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::WebSocketChannel *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E9D6ABE0;
  v3 = (WebCore::WebSocketChannel *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (*((_DWORD *)v3 + 2) != 1)
  {
    --*((_DWORD *)v3 + 2);
    return a1;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_1,void,BOOL,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::WebSocketChannel *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E9D6ABE0;
  v3 = (WebCore::WebSocketChannel *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel(v3, a2);
      WTF::fastFree(v5, v6);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    --*((_DWORD *)v3 + 2);
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::didOpenSocketStream(WebCore::SocketStreamHandle &)::$_1,void,BOOL,BOOL>::call(WTF::StringImpl *result, char a2, int a3)
{
  uint64_t v4;
  StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v4 = *((_QWORD *)result + 1);
  if ((a2 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::WebSocketChannel::fail(v4, (uint64_t *)&v8);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!a3)
          return result;
        goto LABEL_6;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!a3)
    return result;
LABEL_6:
  v6 = *(_QWORD *)(v4 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      *(_BYTE *)(v7 + 276) = 1;
  }
  return result;
}

char *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  void *v20;

  v5 = *a1;
  if ((unint64_t)*a1 > a3 || (v6 = *((unsigned int *)a1 + 3), (unint64_t)&v5[v6] <= a3))
  {
    v14 = *((unsigned int *)a1 + 2);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= (unint64_t)a2)
      v17 = (unint64_t)a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (HIDWORD(v17))
        goto LABEL_30;
      v18 = *((unsigned int *)a1 + 3);
      v19 = (char *)WTF::fastMalloc((WTF *)v17);
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
      memcpy(v19, v5, v18);
      if (v5)
      {
        if (*a1 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return (char *)a3;
  }
  v7 = *((unsigned int *)a1 + 2);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!HIDWORD(v10))
    {
      v11 = (char *)WTF::fastMalloc((WTF *)v10);
      *((_DWORD *)a1 + 2) = v10;
      *a1 = v11;
      memcpy(v11, v5, v6);
      v13 = *a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *a1;
      }
      return &v13[a3 - (_QWORD)v5];
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1D7FEC278);
  }
  v13 = *a1;
  return &v13[a3 - (_QWORD)v5];
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(uint64_t result, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (a3)
    v4 = a3 - 1;
  else
    v4 = 0;
  v5 = v4 >> 31;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1D7FEC434);
  }
  v6 = a4;
  v8 = (_QWORD *)result;
  v9 = a4;
  do
  {
    LODWORD(v5) = v5 + 1;
    v10 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v10);
  if (((v5 | v4) & 0x80000000) != 0)
    goto LABEL_10;
  v11 = (v4 + v5);
  if (__OFADD__((_DWORD)v4, (_DWORD)v5))
    goto LABEL_10;
  if (!(_DWORD)v11)
  {
    v12 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_23;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_10:
    v12 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    v12 = v15[0];
    if (v15[0])
    {
      v13 = (_BYTE *)(v15[0] + 20);
      *(_DWORD *)v15[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *v13 = *a2;
        else
          result = (uint64_t)memcpy((void *)(v12 + 20), a2, v4);
      }
      v14 = 0;
      do
      {
        *((_BYTE *)&v15[1] + v14-- + 4) = (v6 % 0xA) | 0x30;
        v10 = v6 > 9;
        v6 /= 0xAu;
      }
      while (v10);
      if (v14 + 14 <= 13)
        result = (uint64_t)memcpy(&v13[v4], (char *)&v15[1] + v14 + 5, -v14);
    }
  }
LABEL_23:
  *v8 = v12;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::WebSocketChannel *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E9D6AC08;
  v3 = (WebCore::WebSocketChannel *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (*((_DWORD *)v3 + 2) != 1)
  {
    --*((_DWORD *)v3 + 2);
    return a1;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::WebSocketChannel *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E9D6AC08;
  v3 = (WebCore::WebSocketChannel *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel(v3, a2);
      WTF::fastFree(v5, v6);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    --*((_DWORD *)v3 + 2);
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_0,void,BOOL>::call(WTF::StringImpl *result, char a2)
{
  uint64_t v2;
  StringImpl *v3;
  WTF::StringImpl *v4;

  if ((a2 & 1) == 0)
  {
    v2 = *((_QWORD *)result + 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::WebSocketChannel::fail(v2, (uint64_t *)&v4);
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::WebSocketChannel *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E9D6AC30;
  v3 = (WebCore::WebSocketChannel *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (*((_DWORD *)v3 + 2) != 1)
  {
    --*((_DWORD *)v3 + 2);
    return a1;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::WebSocketChannel *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E9D6AC30;
  v3 = (WebCore::WebSocketChannel *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel(v3, a2);
      WTF::fastFree(v5, v6);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    --*((_DWORD *)v3 + 2);
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_1,void,BOOL>::call(WTF::StringImpl *result, char a2)
{
  uint64_t v2;
  StringImpl *v3;
  WTF::StringImpl *v4;

  if ((a2 & 1) == 0)
  {
    v2 = *((_QWORD *)result + 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::WebSocketChannel::fail(v2, (uint64_t *)&v4);
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_2,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::WebSocketChannel *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E9D6AC58;
  v3 = (WebCore::WebSocketChannel *)a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (*((_DWORD *)v3 + 2) != 1)
  {
    --*((_DWORD *)v3 + 2);
    return a1;
  }
  WebCore::WebSocketChannel::~WebSocketChannel(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_2,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::WebSocketChannel *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E9D6AC58;
  v3 = (WebCore::WebSocketChannel *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::WebSocketChannel::~WebSocketChannel(v3, a2);
      WTF::fastFree(v5, v6);
      v4 = this;
      return WTF::fastFree(v4, a2);
    }
    --*((_DWORD *)v3 + 2);
  }
  v4 = this;
  return WTF::fastFree(v4, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocketChannel::processOutgoingFrameQueue(void)::$_2,void,BOOL>::call(WTF::StringImpl *result, char a2)
{
  uint64_t v2;
  StringImpl *v3;
  WTF::StringImpl *v4;

  if ((a2 & 1) == 0)
  {
    v2 = *((_QWORD *)result + 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::WebSocketChannel::fail(v2, (uint64_t *)&v4);
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1D7FEC84C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEC8F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEC958(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEC9BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FECA20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FECB64(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FECC98(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AC70[a12])(v14 - 48, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FECDC4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FECE00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ExceptionOr<void>::~ExceptionOr(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (!*(_BYTE *)(a1 + 16))
    return a1;
  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

void sub_1D7FECEFC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FECFE8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED090(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED1D4(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FED278(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED2BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED368(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AC80[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED41C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 2)
    {
      *(_DWORD *)a10 -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    WTF::StringImpl::destroy(a10, a2);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED460(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED574(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AC90[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED6B8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6ACA0[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED808(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6ACB0[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FED958(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6ACC0[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEDABC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEDB64(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEDC7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FEDD60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEDDD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

id kit(WebCore::CSSRule *a1)
{
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  uint64_t v5;
  int v7;
  _BYTE v9[24];
  WebCore::CSSRule *v10;
  uint64_t v11;

  if (a1)
  {
    DOMWrapper = (const void *)getDOMWrapper(a1);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
    v5 = objc_msgSend(objc_alloc((Class)kitClass(a1)), "_init");
    if (v5)
    {
      v3 = (const void *)v5;
      *(_QWORD *)(v5 + 16) = a1;
      ++*((_DWORD *)a1 + 2);
      v11 = v5;
      v10 = a1;
      if (__ldaxr(wrapperCacheLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, wrapperCacheLock))
      {
        goto LABEL_12;
      }
      MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_12:
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v10, &v11, (uint64_t)v9);
      v7 = __ldxr(wrapperCacheLock);
      if (v7 == 1)
      {
        if (!__stlxr(0, wrapperCacheLock))
          goto LABEL_4;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
  }
  return 0;
}

void sub_1D7FEDF1C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FEDF30(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D7FEE03C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEE0B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEE1CC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEE2EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FEE3C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEE434(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEE534(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEE684(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, _DWORD *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*a10 == 1)
      WebCore::DeprecatedCSSOMValue::operator delete();
    else
      --*a10;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEE854(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AC90[a12])(v14 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEE9FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEEBC4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF::StringImpl *v15;
  StringImpl *v17;
  void *v18;

  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v17);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1D7FEED40(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEEE84(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEEF98(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEF080(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEF16C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEF214(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJjN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJjS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJfS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22DeprecatedCSSOMCounterENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl **result;

  result = *(WTF::StringImpl ***)a2;
  *(_QWORD *)a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::DeprecatedCSSOMCounter>::deref(result, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22DeprecatedCSSOMCounterENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19DeprecatedCSSOMRectENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::DeprecatedCSSOMRGBColor>::deref(result, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19DeprecatedCSSOMRectENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore23DeprecatedCSSOMRGBColorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::DeprecatedCSSOMRGBColor>::deref(result, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore23DeprecatedCSSOMRGBColorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WTF::RefCounted<WebCore::DeprecatedCSSOMCounter>::deref(WTF::StringImpl **this, StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;

  v2 = (WTF *)this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  v3 = this[3];
  *((_QWORD *)v2 + 3) = 0;
  if (!v3)
  {
LABEL_6:
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (!v4)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (!v4)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, a2);
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (!v5)
      goto LABEL_16;
    goto LABEL_14;
  }
  *(_DWORD *)v4 -= 2;
LABEL_11:
  v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  if (!v5)
    goto LABEL_16;
LABEL_14:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    v6 = v2;
    return (WTF::StringImpl **)WTF::fastFree(v6, a2);
  }
  *(_DWORD *)v5 -= 2;
LABEL_16:
  v6 = v2;
  return (WTF::StringImpl **)WTF::fastFree(v6, a2);
}

WTF *WTF::RefCounted<WebCore::DeprecatedCSSOMRGBColor>::deref(WTF *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF *v7;

  v2 = this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)v2 + 4) = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      WebCore::DeprecatedCSSOMValue::operator delete();
      v4 = (_DWORD *)*((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      if (!v4)
        goto LABEL_12;
      goto LABEL_7;
    }
    --*v3;
  }
  v4 = (_DWORD *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  if (!v4)
    goto LABEL_12;
LABEL_7:
  if (*v4 == 1)
    WebCore::DeprecatedCSSOMValue::operator delete();
  else
    --*v4;
LABEL_12:
  v5 = (_DWORD *)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (!v5)
    goto LABEL_15;
  if (*v5 != 1)
  {
    --*v5;
LABEL_15:
    v6 = (_DWORD *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (!v6)
      goto LABEL_18;
    goto LABEL_16;
  }
  WebCore::DeprecatedCSSOMValue::operator delete();
  v6 = (_DWORD *)*((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  if (!v6)
    goto LABEL_18;
LABEL_16:
  if (*v6 == 1)
  {
    WebCore::DeprecatedCSSOMValue::operator delete();
    v7 = v2;
    return (WTF *)WTF::fastFree(v7, a2);
  }
  --*v6;
LABEL_18:
  v7 = v2;
  return (WTF *)WTF::fastFree(v7, a2);
}

void sub_1D7FEF574(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEF5F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEF6A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEF7C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ACF8[a12])(v14 - 48, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEF8F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FEF92C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEFA64(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, int a14, int a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a14 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD08[a14])(v16 - 48, &a12);
  a14 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEFBBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FEFBF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEFD1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEFDEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FEFE4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

id kit(WebCore::DeprecatedCSSOMValue *a1)
{
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;

  if (a1)
  {
    DOMWrapper = (const void *)getDOMWrapper(a1);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
    v5 = objc_msgSend(objc_alloc((Class)kitClass(a1)), "_init");
    if (v5)
    {
      v6 = v5;
      v5[2].isa = a1;
      ++*(_DWORD *)a1;
      addDOMWrapper(v5, a1);
      v4 = (void *)CFMakeCollectable(v6);
      return v4;
    }
  }
  return 0;
}

void sub_1D7FEFEF4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FEFFBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0030(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF00D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF01D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF023C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0368(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AD18[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0478(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF058C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FF069C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FF06D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF07B0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FF08A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FF08E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0A00(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0AC8(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0B90(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0C58(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void DOMCustomXPathNSResolver::~DOMCustomXPathNSResolver(DOMCustomXPathNSResolver *this)
{
  WTF *v1;
  void *v2;

  WebCore::XPathNSResolver::~XPathNSResolver(this);
  WTF::fastFree(v1, v2);
}

uint64_t DOMCustomXPathNSResolver::lookupNamespaceURI@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  const __CFString *v5;
  WTF::AtomStringImpl *v6;
  const __CFString *v7;
  uint64_t result;
  uint64_t v9;

  v4 = *(void **)(a1 + 16);
  if (*a2)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E9D6EC48;
  v6 = (WTF::AtomStringImpl *)objc_msgSend(v4, "lookupNamespaceURI:", v5);
  result = WTF::AtomStringImpl::add(v6, v7);
  *a3 = v9;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJiN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJiS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D7FF0D8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0DF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0E54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0EF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF0FD8(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF10A0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF119C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FF12C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1360(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF144C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1510(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1574(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1614(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF16CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1774(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1830(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF18E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF19C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1AA8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1B64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1C78(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AD28[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1DB4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FF1E8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF1F7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FF2048(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF20E0(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF21C4(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF22A8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF238C(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2470(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF255C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2660(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  WTF::StringImpl *v10;
  void *v12;

  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v12);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v10 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF269C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2744(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2834(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D7FF295C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2A18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2AB8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2B70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2BF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2C74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2CE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2D64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2DD8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2E38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2EE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF2F88(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF3030(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF30C8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF3178(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF31DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF323C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF3384(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD38[a13])(v19 - 32, &a11);
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)(v2 + 24) != 2)
  {
    *(_DWORD *)(v2 + 24) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v2 + 30) & 0x400) != 0)
    return a1;
  WebCore::Node::removedLastRef((WebCore::Node *)v2);
  return a1;
}

void sub_1D7FF3524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1D7FF3540(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF3614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  StringImpl *v14;
  void *v15;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v14);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
  _Unwind_Resume(a1);
}

void sub_1D7FF373C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  StringImpl *v14;
  void *v15;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v14);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
  _Unwind_Resume(a1);
}

void sub_1D7FF38D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD48[a13])(v19 - 32, &a11);
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF3B0C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD58[a13])(v19 - 48, &a11);
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF3D30(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD68[a13])(v19 - 32, &a11);
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF3EF0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (a11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[4];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF4088(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AD78[a11])(v13 - 48, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF42A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD38[a13])(v19 - 48, &a11);
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF4524(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD68[a13])(v19 - 48, &a11);
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF4750(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (a11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[4];
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF4904(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AD78[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF4AD0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD88[a12])(v14 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

id kit(DOMObjectInternal *a1)
{
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  uint64_t v5;
  int v7;
  _BYTE v9[24];
  DOMObjectInternal *v10;
  uint64_t v11;

  if (a1)
  {
    DOMWrapper = (const void *)getDOMWrapper(a1);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
    switch((*((_DWORD *)a1 + 5) >> 15) & 0x7F)
    {
      case 'I':
      case 'L':
      case 'M':
      case 'P':
      case 'T':
      case ']':
      case 'a':
        break;
      default:
        (*(uint64_t (**)(DOMObjectInternal *))(*(_QWORD *)a1 + 128))(a1);
        break;
    }
    v5 = objc_msgSend(objc_alloc((Class)objc_opt_class()), "_init");
    if (v5)
    {
      v3 = (const void *)v5;
      *(_QWORD *)(v5 + 16) = a1;
      ++*((_DWORD *)a1 + 4);
      v11 = v5;
      v10 = a1;
      if (__ldaxr(wrapperCacheLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, wrapperCacheLock))
      {
        goto LABEL_14;
      }
      MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_14:
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v10, &v11, (uint64_t)v9);
      v7 = __ldxr(wrapperCacheLock);
      if (v7 == 1)
      {
        if (!__stlxr(0, wrapperCacheLock))
          goto LABEL_4;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
  }
  return 0;
}

{
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  uint64_t v5;
  int v7;
  _BYTE v9[24];
  DOMObjectInternal *v10;
  uint64_t v11;

  if (a1)
  {
    DOMWrapper = (const void *)getDOMWrapper(a1);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
    v5 = objc_msgSend(objc_alloc((Class)kitClass()), "_init");
    if (v5)
    {
      v3 = (const void *)v5;
      *(_QWORD *)(v5 + 16) = a1;
      ++*((_DWORD *)a1 + 4);
      v11 = v5;
      v10 = a1;
      if (__ldaxr(wrapperCacheLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, wrapperCacheLock))
      {
        goto LABEL_12;
      }
      MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_12:
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v10, &v11, (uint64_t)v9);
      v7 = __ldxr(wrapperCacheLock);
      if (v7 == 1)
      {
        if (!__stlxr(0, wrapperCacheLock))
          goto LABEL_4;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
  }
  return 0;
}

{
  const void *DOMWrapper;
  const void *v3;
  void *v4;
  uint64_t v5;
  int v7;
  _BYTE v9[24];
  DOMObjectInternal *v10;
  uint64_t v11;

  if (a1)
  {
    DOMWrapper = (const void *)getDOMWrapper(a1);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
LABEL_4:
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
    v5 = objc_msgSend(objc_alloc((Class)kitClass((uint64_t)a1)), "_init");
    if (v5)
    {
      v3 = (const void *)v5;
      *(_QWORD *)(v5 + 16) = a1;
      ++*((_DWORD *)a1 + 2);
      v11 = v5;
      v10 = a1;
      if (__ldaxr(wrapperCacheLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, wrapperCacheLock))
      {
        goto LABEL_12;
      }
      MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_12:
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v10, &v11, (uint64_t)v9);
      v7 = __ldxr(wrapperCacheLock);
      if (v7 == 1)
      {
        if (!__stlxr(0, wrapperCacheLock))
          goto LABEL_4;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      v4 = (void *)CFMakeCollectable(v3);
      return v4;
    }
  }
  return 0;
}

void sub_1D7FF4D8C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FF4DA0(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D7FF4E68(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF5098(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, char a11)
{
  WTF *v11;
  void *v13;
  void *v14;

  WTF::fastFree(v11, a2);
  if (a10)
  {
    if (a10[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
      _Unwind_Resume(a1);
    }
    --a10[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>::~Ref(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)(v2 + 8) != 1)
  {
    --*(_DWORD *)(v2 + 8);
    return a1;
  }
  v4 = MEMORY[0x1D82A41CC]();
  MEMORY[0x1D82A41D8](v4);
  return a1;
}

void sub_1D7FF53B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, char a11)
{
  WTF *v11;
  void *v13;
  void *v14;

  WTF::fastFree(v11, a2);
  if (a10)
  {
    if (a10[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
      _Unwind_Resume(a1);
    }
    --a10[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
  _Unwind_Resume(a1);
}

void sub_1D7FF56C0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AD98[a13])(v19 - 48, &a11);
  a13 = -1;
  if (a9)
  {
    if (a9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a9 + 8))(a9);
    else
      --a9[2];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

WebCore::XPathExpression **WTF::Ref<WebCore::XPathExpression,WTF::RawPtrTraits<WebCore::XPathExpression>,WTF::DefaultRefDerefTraits<WebCore::XPathExpression>>::~Ref(WebCore::XPathExpression **a1)
{
  WebCore::XPathExpression *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebCore::XPathExpression::~XPathExpression(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1D7FF58A4(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF5B38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADA8[a13])(v19 - 80, &a11);
  a13 = -1;
  if (a9)
  {
    if (a9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a9 + 8))(a9);
    else
      --a9[2];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

_DWORD **WTF::Ref<WebCore::XPathResult,WTF::RawPtrTraits<WebCore::XPathResult>,WTF::DefaultRefDerefTraits<WebCore::XPathResult>>::~Ref(_DWORD **a1)
{
  _DWORD *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*v2 != 1)
  {
    --*v2;
    return a1;
  }
  v4 = (WTF *)MEMORY[0x1D82A3FE0]();
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1D7FF5DA0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  WTF::StringImpl *v19;
  void *v20;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADB8[a12])(v17 - 33, &a10);
  v19 = a13;
  a13 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v19 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF5F08(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF6030(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF6158(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF6280(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF63FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  void *v16;

  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, a2);
  else
    *(_DWORD *)v14 -= 2;
  if (a12 != -1)
  {
    ((void (*)(WTF::StringImpl **, char *))off_1E9D6AD28[a12])(&a9, &a10);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF657C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (a11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[4];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF66AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF67AC(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF687C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF69B8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11)
{
  void *v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

uint64_t core(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if ((*(_WORD *)(result + 28) & 8) == 0)
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

{
  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if ((*(_WORD *)(result + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD5D90] + 24))
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_1D7FF6B7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11)
{
  void *v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF6CC8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (a11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[4];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF6DA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF6E08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF6E60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF6F3C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF70C0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v17;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADD8[a12])(v15 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF72A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADE8[a12])(v14 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7440(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF74F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7554(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF75B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF765C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7670(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF77AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v17;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADD8[a12])(v15 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7994(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADE8[a12])(v14 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7AD8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7B5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7BD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7C60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FF7C9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7D6C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7E4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7ED4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7F5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF7FE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF806C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF80F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF817C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF8204(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF828C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF831C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF83AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF843C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF84CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF855C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF85EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF86AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF87C0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF88F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  WTF::StringImpl *v17;
  uint64_t v18;
  void *v20;
  void *v21;

  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a14, a2);
  if (a12 != -1)
  {
    ((void (*)(uint64_t, char *))off_1E9D6ADF8[a12])(v18 - 32, &a10);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v20);
  _Unwind_Resume(a1);
}

void sub_1D7FF8A24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF8B58(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  WTF::StringImpl *v17;
  uint64_t v18;
  void *v20;
  void *v21;

  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a14, a2);
  if (a12 != -1)
  {
    ((void (*)(uint64_t, char *))off_1E9D6ADF8[a12])(v18 - 32, &a10);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v20);
  _Unwind_Resume(a1);
}

void sub_1D7FF8C68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF8D48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF8E18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF8EE0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF8FCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF90AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF917C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF9208(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF92C8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF93A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF942C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF94B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF956C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF965C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF9670(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF97E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF::StringImpl *v15;
  StringImpl *v17;
  void *v18;

  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1D7FF995C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF9AA4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF9C50(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AE08[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF9E2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AD68[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FF9FB4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12)
{
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v15;
  int v16;
  void *v17;

  v13 = v12;
  if (v13)
  {
    v15 = v13;
    v16 = v13[4] - 1;
    if (!v16)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v17);
      _Unwind_Resume(a1);
    }
    v15[4] = v16;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFA188(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFA388(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF::StringImpl *v15;
  StringImpl *v17;
  void *v18;

  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v17);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1D7FFA56C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFA73C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, char a12)
{
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v15;
  int v16;
  void *v17;

  v13 = v12;
  if (v13)
  {
    v15 = v13;
    v16 = v13[4] - 1;
    if (!v16)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v17);
      _Unwind_Resume(a1);
    }
    v15[4] = v16;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFA950(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFAB28(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AE08[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFAC98(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFADFC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFAF00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFAF88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB010(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB098(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB198(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12)
{
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v15;
  int v16;
  void *v17;

  v13 = v12;
  if (v13)
  {
    v15 = v13;
    v16 = v13[4] - 1;
    if (!v16)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v17);
      _Unwind_Resume(a1);
    }
    v15[4] = v16;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB338(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADC8[a12])(v14 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB50C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v17;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADD8[a12])(v15 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB6BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADC8[a12])(v14 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB7DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB85C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFB908(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D7FFB944(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFBA78(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v17;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADD8[a12])(v15 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFBC88(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6ADE8[a12])(v14 - 32, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFBE90(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFBF08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFBF80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFC12C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFC23C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFC4F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12CDATASectionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12CDATASectionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21ProcessingInstructionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21ProcessingInstructionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore5EventENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore5EventENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::XPathExpression *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15XPathExpressionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::XPathExpression **a2)
{
  WebCore::XPathExpression *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::XPathExpression::~XPathExpression(result);
      return (WebCore::XPathExpression *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15XPathExpressionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11XPathResultENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
    {
      v3 = (WTF *)MEMORY[0x1D82A3FE0]();
      return (_DWORD *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11XPathResultENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;

  v2 = *(uint64_t **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) != 1)
    {
      --*((_DWORD *)v2 + 2);
      return;
    }
    v3 = (WTF::StringImpl *)v2[2];
    v2[2] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, a2);
        v4 = *v2;
        if (!*v2)
          goto LABEL_12;
LABEL_9:
        *(_QWORD *)(v4 + 8) = 3;
        *v2 = 0;
LABEL_12:
        JUMPOUT(0x1D82A3FA4);
      }
      *(_DWORD *)v3 -= 2;
    }
    v4 = *v2;
    if (!*v2)
      goto LABEL_12;
    goto LABEL_9;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore7ElementENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8NodeListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8NodeListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;

  v2 = *(uint64_t **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) != 1)
    {
      --*((_DWORD *)v2 + 2);
      return;
    }
    v3 = (WTF::StringImpl *)v2[2];
    v2[2] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, a2);
        v4 = *v2;
        if (!*v2)
          goto LABEL_12;
LABEL_9:
        *(_QWORD *)(v4 + 8) = 3;
        *v2 = 0;
LABEL_12:
        JUMPOUT(0x1D82A3FA4);
      }
      *(_DWORD *)v3 -= 2;
    }
    v4 = *v2;
    if (!*v2)
      goto LABEL_12;
    goto LABEL_9;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::RefCounted<WebCore::TreeWalker>::deref(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  v1 = result;
  if (*(_DWORD *)result == 1)
  {
    v2 = result[4];
    v1[4] = 0;
    if (v2)
    {
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
    v3 = v1 - 1;
    v4 = (_DWORD *)v1[2];
    v1[2] = 0;
    if (v4)
    {
      if (v4[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
        v5 = v1[1];
        v1[1] = 0;
        if (!v5)
          goto LABEL_18;
LABEL_14:
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
LABEL_18:
        if (*v3)
        {
          *(_QWORD *)(*v3 + 8) = 3;
          *v3 = 0;
        }
        JUMPOUT(0x1D82A3CBCLL);
      }
      --v4[4];
    }
    v5 = v1[1];
    v1[1] = 0;
    if (!v5)
      goto LABEL_18;
    goto LABEL_14;
  }
  --*(_DWORD *)result;
  return result;
}

void sub_1D7FFCBCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFCC2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFCDE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFCF20(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D7FFCF34(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D7FFD3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  StringImpl *v13;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D7FFD53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;
  StringImpl *v12;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v10 - 24));
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v12);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a10);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a10);
    _Unwind_Resume(a1);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a10);
  _Unwind_Resume(a1);
}

void sub_1D7FFD67C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D7FFD8A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFD98C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t kitClass()
{
  return objc_opt_class();
}

void sub_1D7FFDA34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFDAEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFDBB0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFDC68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFDD2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFDDE4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFDEA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFDF60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE0AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE164(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE228(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE2E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE3A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE45C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE520(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE5D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE69C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE754(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE818(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE8D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFE994(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFEA4C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFEB10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFEBC8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFECAC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFED50(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFEDB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFEE5C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFEF58(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF03C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF124(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF20C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF2F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF3DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF4C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF5AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF694(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF7DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF894(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFF958(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFFA10(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFFB84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFFC04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFFCBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFFD80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFFE38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFFEFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D7FFFFB4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000078(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000130(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80001F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80002AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000350(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80003B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800045C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000558(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800063C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000724(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800080C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80008F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80009DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000AC4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000BAC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000C94(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000D58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000E10(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000EF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8000FE8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80010AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001164(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001228(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80012E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80013A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800145C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001520(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80015D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800169C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001754(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001818(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80018D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001994(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001A4C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001B10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001BC8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001C8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001D44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001E08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8001EC0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002034(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002164(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80021D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002258(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002308(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002454(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800250C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80025D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002688(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002730(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80027B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002868(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002904(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80029F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002ADC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002C30(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, char a16)
{
  void *v17;

  if (a14 != -1)
  {
    ((void (*)(WTF::StringImpl **, char *))off_1E9D6AE30[a14])(&a10, &a12);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002DCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002E40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002EF0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8002F04(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800303C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (a11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[4];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D80031FC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8003210(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D8003370(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80034A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003520(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80035D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14UncachedStringENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14UncachedStringENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D80036FC(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80037E0(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80038C4(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003998(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003A48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003B2C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003C18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003CFC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003DB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003E68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003F24(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8003FD4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004090(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004140(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80041FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80042AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004368(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004418(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80044FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004554(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80046E4(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;

  WTF::FixedVector<WTF::String>::~FixedVector(&a9, a2);
  v16 = *(WTF::StringImpl **)(v13 - 48);
  *(_QWORD *)(v13 - 48) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

WTF **WTF::FixedVector<WTF::String>::~FixedVector(WTF **a1, StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v5 = (WTF::StringImpl **)((char *)v3 + 8);
    v4 = *(unsigned int *)v3;
    if ((_DWORD)v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void sub_1D800494C(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;

  WTF::FixedVector<WTF::String>::~FixedVector(&a9, a2);
  v16 = *(WTF::StringImpl **)(v13 - 48);
  *(_QWORD *)(v13 - 48) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8004A9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004B54(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004C18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004CD0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004D74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004DD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004E4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004EFC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8004FA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005008(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005070(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80050D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005150(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005208(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800537C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80053FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80054B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005598(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80056B0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D80057C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80058DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D80059F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005B08(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8005BDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005C3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005C9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005DA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005E60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8005F3C(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006078(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006218(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v17;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AE40[a12])(v15 - 48, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D80063D4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF::StringImpl *v15;
  uint64_t v16;
  StringImpl *v18;
  WTF::StringImpl *v19;
  void *v20;

  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AE50[a10])(v16 - 48, &a9);
  v19 = a11;
  a11 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v18);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v19 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
  _Unwind_Resume(a1);
}

void sub_1D8006580(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF::StringImpl *v15;
  StringImpl *v17;
  void *v18;

  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1D8006678(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80066E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006740(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80067B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006868(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800692C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80069E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006A90(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006AF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006C00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006CB8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006DA4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006EA0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8006F64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800701C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80070C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007130(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80071A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007224(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80072DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80073A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007458(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800751C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80075D4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007698(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007750(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800783C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007938(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80079F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007AA4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007B88(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007C60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007D44(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007E1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007F00(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8007FF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008140(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80081F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800836C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80083EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80084A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008580(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D800862C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008684(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80086DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800873C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80087BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008874(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008938(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80089F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008AB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008B6C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008C30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008CE8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008E34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8008EEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009060(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80090E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009198(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009284(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009380(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009428(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80094A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009554(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800960C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80096D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009788(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800984C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009904(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009A78(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009AF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009BB0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009C74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009D2C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009E44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009EFC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8009FC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A078(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A160(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A218(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A2DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A394(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A458(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A510(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A5D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A68C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A750(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A808(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A8CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800A984(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800AAD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800AB88(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800AC4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800AD04(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800ADC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800AE80(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800AF6C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B068(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B12C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B1E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B2A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B360(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B408(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B488(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B590(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B648(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B70C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B7C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B888(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800B940(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BA04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BABC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BBA0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BC94(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BD38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BD98(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BE00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BE68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800BF98(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C040(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C13C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C228(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C324(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C3E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C4A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C564(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C61C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C6D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C758(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C810(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C8BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C924(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C984(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800C9E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CA44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CAEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CBE8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CC8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CCEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CD4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CDAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CE54(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CEF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800CF78(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D030(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D0F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D1AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D290(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D384(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D4F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D628(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D6D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D758(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D810(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D984(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800D9F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800DA5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800DB88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a4)
    WTF::RefCounted<WebCore::FileList>::deref(a4 + 8, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D800DC3C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800DD30(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800DE14(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800DF08(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800DFEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E0E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E254(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E2D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E38C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E430(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E490(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E53C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E5D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E6A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E758(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E870(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D800E8AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E92C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800E9E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800EB58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800EC60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800ED18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800EDDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800EE94(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800EF58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F010(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F184(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F2B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F358(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F44C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F4F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F5F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F6B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F76C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F830(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F8E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800F99C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FA4C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FB30(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FC60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FD14(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FDB0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D800FDEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FE54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FEEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D800FF28(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FF88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D800FFE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801004C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80100EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80101C8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010274(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80102D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010334(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010394(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801040C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80104B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010578(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010630(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80106F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80107AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010920(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80109A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010A58(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010B8C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010CB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010DE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010E70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8010EAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010F38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8010F74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8010FDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011084(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801112C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011224(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D80113F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF::StringImpl *v15;
  StringImpl *v17;
  void *v18;

  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1D8011518(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011570(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801165C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v15;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
  _Unwind_Resume(a1);
}

void sub_1D8011870(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011A64(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v19;
  void *v20;
  void *v21;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](&a14);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a18, v19);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](&a14);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a18, v20);
    _Unwind_Resume(a1);
  }
  std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](&a14);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a18, v21);
  _Unwind_Resume(a1);
}

void sub_1D8011BB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011C34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011CEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011D98(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8011E00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*((_BYTE *)a1 + 24))
    return a1;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *a1;
  *a1 = 0;
  if (!v4)
    return a1;
  if (*(_DWORD *)(v4 + 24) != 2)
  {
    *(_DWORD *)(v4 + 24) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v4 + 30) & 0x400) != 0)
    return a1;
  WebCore::Node::removedLastRef((WebCore::Node *)v4);
  return a1;
}

uint64_t WTF::RefCounted<WebCore::FileList>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;
  WTF *v8;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = result - 8;
    v4 = *(unsigned int *)(result + 20);
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD ***)(result + 8);
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          if (v7[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
          else
            --v7[4];
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    v8 = *(WTF **)(v2 + 8);
    if (v8)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v8, a2);
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
      *(_QWORD *)v3 = 0;
    }
    JUMPOUT(0x1D82A6E48);
  }
  --*(_DWORD *)result;
  return result;
}

void sub_1D8011FDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801205C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012114(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80121F0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80122BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012374(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801241C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801249C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012554(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012618(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80126D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012844(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80128C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801297C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012A68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012B64(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012C28(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012CE0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012DA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012E5C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012F20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8012FD8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801309C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013154(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013218(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80132D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013394(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801344C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013510(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80135C8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80136AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80137A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013848(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80138A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801390C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80139A4(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013AF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013BB0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013C74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013D2C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013DF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013EA8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8013F6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014024(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80140E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80141A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801424C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80142B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014314(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80143A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D80143DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D801443C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801449C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80144FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801455C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801468C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80146F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801475C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80147DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014894(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014930(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014988(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80149EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014A94(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014B90(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014C48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014CE8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014DDC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014E80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8014F20(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015014(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015108(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::TimeRanges,WTF::RawPtrTraits<WebCore::TimeRanges>,WTF::DefaultRefDerefTraits<WebCore::TimeRanges>>::~Ref((uint64_t *)va, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v4);
  _Unwind_Resume(a1);
}

void sub_1D8015124(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Ref<WebCore::TimeRanges,WTF::RawPtrTraits<WebCore::TimeRanges>,WTF::DefaultRefDerefTraits<WebCore::TimeRanges>>::~Ref(_QWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF *v4;

  v2 = result;
  v3 = *result;
  *result = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = *(WTF **)(v3 + 8);
      if (v4)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v4, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return result;
}

void sub_1D80151F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015254(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80152C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015358(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8015394(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015404(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801546C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80154DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801554C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80155BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801562C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80156DC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::TimeRanges,WTF::RawPtrTraits<WebCore::TimeRanges>,WTF::DefaultRefDerefTraits<WebCore::TimeRanges>>::~Ref((uint64_t *)va, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v4);
  _Unwind_Resume(a1);
}

void sub_1D80156F8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80157A8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::TimeRanges,WTF::RawPtrTraits<WebCore::TimeRanges>,WTF::DefaultRefDerefTraits<WebCore::TimeRanges>>::~Ref((uint64_t *)va, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v4);
  _Unwind_Resume(a1);
}

void sub_1D80157C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015824(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015954(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015A84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015AE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015B44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015BB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015C50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8015C8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015CF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015D5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015E8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015EEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015F4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8015FB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801601C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016084(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016104(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80161BC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016258(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016350(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016430(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016490(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80164F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016558(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016688(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016708(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80167C0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016884(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801693C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016A88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016B40(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016C04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016CBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016DA8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016EA4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8016F68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017020(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017194(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801724C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801737C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80173FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80174B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801756C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80175EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80176A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017768(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017820(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80178E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801799C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017A60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017B18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017BDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017C94(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017D58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017E10(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017EFC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8017FF8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801816C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80181EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80182A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018350(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80183B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80184C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018578(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801863C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80186F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80187B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018870(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018934(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80189EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018A98(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018B00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018B80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018C38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018CE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018D98(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018EC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8018F48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019000(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019174(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80191D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019278(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801936C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80194E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019544(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80195A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019644(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019738(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801981C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80198C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80199A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019A08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019A68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019AF4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8019B30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019BD8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019BEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019D40(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18, int a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  WTF::StringImpl *v23;
  uint64_t v24;
  void *v26;
  void *v27;

  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a20, a2);
  if (a12 && a10 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AE60[a10])(v24 - 48, &a9);
  if (a18 != -1)
  {
    ((void (*)(uint64_t *, __int16 *))off_1E9D6AE70[a18])(&a9, &a14);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a23, v27);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a23, v26);
  _Unwind_Resume(a1);
}

void sub_1D8019E34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019EA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8019FE0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8019FF4(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D801A0A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A15C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A2A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A360(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A424(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A4DC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A5A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A658(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A71C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A7D4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11HTMLElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSG_iEEEEEEDcSK_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17HTMLOptionElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19HTMLOptGroupElementENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17HTMLOptionElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19HTMLOptGroupElementENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

void sub_1D801A914(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801A97C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801AAAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801AB54(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D801AC50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801AD38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801AE24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801AEE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801AFA0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B064(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B11C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B1E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B298(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B33C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B39C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B4CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B574(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B670(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B734(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B7EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B8D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801B9C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801BA88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801BB40(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801BCB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801BDE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801BE58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801BF08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C010(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C0C8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C1B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C234(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C2CC(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C378(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C3D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C438(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C4D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C5C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C670(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C6DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C784(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C798(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801C9A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(uint64_t *, uint64_t *))off_1E9D6AE90[v15])((uint64_t *)va, (uint64_t *)va1);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va2, v8);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va2, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CA9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CAFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CB60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CBC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CC40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CCF8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CDBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CE74(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CF1C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801CF9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D054(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D118(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D1D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D274(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D2F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D3AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D470(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D528(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D5EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D6A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D768(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D820(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D8E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801D99C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DA40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DAA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DB00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DB60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DBE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DC98(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DD5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DE14(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801DF88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E008(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E0C0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E184(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E23C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E300(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E3B8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E474(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E524(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E5E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E6A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E764(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E81C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E8E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801E998(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801EA84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801EB04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801EBBC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801EC80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801ED38(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801EE14(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801EF50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D801F050(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801F18C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D801F28C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D801F3C8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D801F4C8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D801F5AC(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D801F678(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801F730(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801F7F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801F8AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801F970(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801FA28(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801FAEC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801FBA4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801FC68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801FD20(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801FDE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D801FE9C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D801FF60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020018(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80200DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020194(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020258(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020310(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80203EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1D8020408(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020460(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80204F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1D8020514(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802056C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1D8020620(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80206B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v3);
  _Unwind_Resume(a1);
}

void sub_1D80206D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802072C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020830(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AEA0[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D802092C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8020968(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80209C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020A28(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020AC0(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020B8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020C44(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020D08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020DC0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020E84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8020F3C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021000(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80210B8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D802117C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021234(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D802137C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AEB0[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021478(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D80214B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021534(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80215EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80216B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021768(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D802182C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80218E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80219A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021A60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021B3C(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021C8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AEC0[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021D88(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8021DC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8021FE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80220A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80221A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80223AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8022468(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80225CC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8022608(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8022758(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8022858(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8022964(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8022A64(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8022C68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8022E28(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8022F60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023098(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023160(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023260(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D802336C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023454(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023588(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80236B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D802382C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023948(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80239F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023AD4(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023BC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023C70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023D18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023DC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023E80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8023F70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D802407C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802417C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80242A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80243E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80244D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8024614(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802482C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF::StringImpl *v15;
  StringImpl *v17;
  void *v18;

  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a12, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v17);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
  _Unwind_Resume(a1);
}

void sub_1D8024998(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8024AD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8024B74(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8024C60(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8024DD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8024E54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8024F0C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8024FB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025020(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025088(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80250F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025150(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80251B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025258(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025354(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80254C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025528(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025588(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802560C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D8025648(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80256A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025800(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8025A24(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13, uint64_t a14, int a15, int a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AED0[a15])(v21 - 48, &a13);
  a15 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a19, v23);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a19, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a19, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025CE8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AEE0[a13])(v19 - 64, &a11);
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D8025EC8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, _DWORD *a12, char a13)
{
  void *v14;

  if (a12)
  {
    if (a12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
    else
      --a12[2];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8026040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  StringImpl *v14;
  void *v15;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v14);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v14);
  _Unwind_Resume(a1);
}

void sub_1D80261EC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8026200(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11HTMLElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11HTMLElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20HTMLTableCellElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20HTMLTableCellElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19HTMLTableRowElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19HTMLTableRowElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12DocumentTypeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12DocumentTypeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11XMLDocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11XMLDocumentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t getDOMWrapper(DOMObjectInternal *a1)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  DOMObjectInternal *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;

  if (__ldaxr(wrapperCacheLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, wrapperCacheLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_5:
  {
    if (wrapperCache(void)::map)
    {
      v3 = *(_DWORD *)(wrapperCache(void)::map - 8);
      v4 = ((unint64_t)a1 + ~((_QWORD)a1 << 32)) ^ (((unint64_t)a1 + ~((_QWORD)a1 << 32)) >> 22);
      v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
      v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
      v7 = v3 & ((v6 >> 31) ^ v6);
      v8 = *(DOMObjectInternal **)(wrapperCache(void)::map + 16 * v7);
      if (v8 == a1)
      {
LABEL_11:
        v10 = *(_QWORD *)(wrapperCache(void)::map + 16 * v7 + 8);
        v11 = __ldxr(wrapperCacheLock);
        if (v11 == 1)
          goto LABEL_14;
        goto LABEL_12;
      }
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(DOMObjectInternal **)(wrapperCache(void)::map + 16 * v7);
        ++v9;
        if (v8 == a1)
          goto LABEL_11;
      }
    }
    v10 = 0;
    v12 = __ldxr(wrapperCacheLock);
    if (v12 == 1)
      goto LABEL_14;
LABEL_12:
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
    return v10;
  }
  v10 = 0;
  wrapperCache(void)::map = 0;
  v14 = __ldxr(wrapperCacheLock);
  if (v14 != 1)
    goto LABEL_12;
LABEL_14:
  if (__stlxr(0, wrapperCacheLock))
    goto LABEL_15;
  return v10;
}

uint64_t *addDOMWrapper(NSObject *a1, DOMObjectInternal *a2)
{
  uint64_t *result;
  int v4;
  _BYTE v5[24];
  DOMObjectInternal *v6;
  NSObject *v7;

  v7 = a1;
  v6 = a2;
  if (__ldaxr(wrapperCacheLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, wrapperCacheLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_5:
  {
    wrapperCache(void)::map = 0;
  }
  result = WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v6, (uint64_t *)&v7, (uint64_t)v5);
  v4 = __ldxr(wrapperCacheLock);
  if (v4 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  }
  if (__stlxr(0, wrapperCacheLock))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  return result;
}

void sub_1D80265F8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v4;

  v2 = v1;
  v4 = v2;
  LODWORD(v2) = __ldxr(v2);
  if ((_DWORD)v2 == 1)
  {
    if (!__stlxr(0, v4))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

_OWORD *removeDOMWrapper(_OWORD *result)
{
  _OWORD *v1;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  unsigned int v10;
  int v12;
  int v13;

  v1 = result;
  if (__ldaxr(wrapperCacheLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, wrapperCacheLock))
  {
    goto LABEL_5;
  }
  result = (_OWORD *)MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_5:
  {
    if (wrapperCache(void)::map)
    {
      v3 = *(_DWORD *)(wrapperCache(void)::map - 8);
      v4 = ((unint64_t)v1 + ~((_QWORD)v1 << 32)) ^ (((unint64_t)v1 + ~((_QWORD)v1 << 32)) >> 22);
      v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
      v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
      v7 = v3 & ((v6 >> 31) ^ v6);
      v8 = *(_OWORD **)(wrapperCache(void)::map + 16 * v7);
      if (v8 == v1)
      {
LABEL_11:
        if (v7 != *(_DWORD *)(wrapperCache(void)::map - 4))
        {
          *(_QWORD *)(wrapperCache(void)::map + 16 * v7) = -1;
          ++*(_DWORD *)(wrapperCache(void)::map - 16);
          if (wrapperCache(void)::map)
          {
            --*(_DWORD *)(wrapperCache(void)::map - 12);
            if (wrapperCache(void)::map)
            {
              v10 = *(_DWORD *)(wrapperCache(void)::map - 4);
              if (6 * *(_DWORD *)(wrapperCache(void)::map - 12) < v10 && v10 >= 9)
                result = WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(&wrapperCache(void)::map, v10 >> 1, 0);
            }
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
          }
        }
      }
      else
      {
        v9 = 1;
        while (v8)
        {
          v7 = ((_DWORD)v7 + v9) & v3;
          v8 = *(_OWORD **)(wrapperCache(void)::map + 16 * v7);
          ++v9;
          if (v8 == v1)
            goto LABEL_11;
        }
      }
    }
    v12 = __ldxr(wrapperCacheLock);
    if (v12 == 1)
      goto LABEL_25;
LABEL_29:
    __clrex();
    return (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  }
  wrapperCache(void)::map = 0;
  v13 = __ldxr(wrapperCacheLock);
  if (v13 != 1)
    goto LABEL_29;
LABEL_25:
  if (__stlxr(0, wrapperCacheLock))
    return (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  return result;
}

void sub_1D8026800(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D8026A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, _DWORD *a10)
{
  if (a9)
  {
    if (a9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a9 + 8))(a9);
    else
      --a9[2];
  }
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::toJS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Wrapper;
  uint64_t result;

  if (!a3)
    return 2;
  if (*(_BYTE *)(a2 + 3328))
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return Wrapper;
      }
    }
  }
  else
  {
    result = WebCore::getOutOfLineCachedWrapper();
    if (result)
      return result;
  }
  *(_DWORD *)(a3 + 24) += 2;
  Wrapper = WebCore::createWrapper();
  if (*(_DWORD *)(a3 + 24) != 2)
  {
    *(_DWORD *)(a3 + 24) -= 2;
    return Wrapper;
  }
  if ((*(_WORD *)(a3 + 30) & 0x400) != 0)
    return Wrapper;
  WebCore::Node::removedLastRef((WebCore::Node *)a3);
  return Wrapper;
}

void sub_1D8026BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8026C60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8026E88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8026EE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8026F84(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8027184(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  void *v15;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D80273C8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  void *v15;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D802760C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  void *v15;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D8027850(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  void *v15;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D8027AFC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8027B10(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D8027C64(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8027D50(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8027DF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8027E9C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8027FB4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D80280D0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8028248(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D802825C(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D80285BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802861C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802867C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80287CC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

WebCore::Node *kit(WebCore::Node *result)
{
  WebCore::Node *v1;
  const void *DOMWrapper;
  const void *v3;
  WebCore::Node *v4;
  int v6;
  char v7[24];
  WebCore::Node *v8;
  WebCore::Node *v9;

  if (result)
  {
    v1 = result;
    DOMWrapper = (const void *)getDOMWrapper(result);
    if (DOMWrapper)
    {
      v3 = DOMWrapper;
      CFRetain(DOMWrapper);
      return (WebCore::Node *)(id)CFMakeCollectable(v3);
    }
    result = (WebCore::Node *)objc_msgSend(objc_alloc((Class)kitClass(v1)), "_init");
    if (result)
    {
      v4 = result;
      *((_QWORD *)result + 2) = v1;
      *((_DWORD *)v1 + 6) += 2;
      v9 = result;
      v8 = v1;
      if (__ldaxr(wrapperCacheLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, wrapperCacheLock))
      {
        goto LABEL_9;
      }
      MEMORY[0x1D82A3914](wrapperCacheLock);
LABEL_9:
      {
        wrapperCache(void)::map = 0;
      }
      WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(&wrapperCache(void)::map, (uint64_t *)&v8, (uint64_t *)&v9, (uint64_t)v7);
      v6 = __ldxr(wrapperCacheLock);
      if (v6 == 1)
      {
        if (!__stlxr(0, wrapperCacheLock))
          return (WebCore::Node *)(id)CFMakeCollectable(v4);
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
      return (WebCore::Node *)(id)CFMakeCollectable(v4);
    }
  }
  return result;
}

void sub_1D8028950(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8028964(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D8028A34(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8028C28(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  void *v15;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D8028D2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8028DCC(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8028E94(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8028F5C(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8029170(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14)
{
  uint64_t v14;
  WTF::StringImpl *v16;
  void *v17;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  v16 = *(WTF::StringImpl **)(v14 - 72);
  *(_QWORD *)(v14 - 72) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a13 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D8029318(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80293F4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D80295D8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AEF0[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D80297D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AF00[a13])(v19 - 32, &a11);
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D8029928(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*((_DWORD *)a10 + 6) != 2)
    {
      *((_DWORD *)a10 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a10);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8029AA4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WebCore::Node *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D8029CE8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AF00[a13])(v19 - 48, &a11);
  a13 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, v21);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1D8029EFC(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D802A070(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A15C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A28C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A380(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A418(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[4];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A4E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A564(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A5CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A630(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A698(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A718(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A798(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A87C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802A970(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802A9F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802AA68(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802AB0C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D802AC34(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D802AD40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802ADA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802AE9C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) != 2)
    {
      *((_DWORD *)a9 + 6) -= 2;
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a9 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a9);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802AFC8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802B004(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B018(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B0B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802B0F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B104(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B1A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802B1DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B1F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B360(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF10[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B428(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B4F0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D802B5B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B68C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B754(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B768(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B860(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B874(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D802B948(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D802BA00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802BA78(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802BAD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802BC00(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, uint64_t a13, _DWORD *a14, WTF::StringImpl *a15, char a16)
{
  uint64_t v16;
  _DWORD *v18;
  WTF::StringImpl *v19;
  void *v20;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AF20[a12])(v16 - 33, &a10);
  v18 = a14;
  a14 = 0;
  if (v18)
  {
    if (v18[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[4];
  }
  v19 = a15;
  a15 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v19 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1D802BDD0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, uint64_t a13, _DWORD *a14, WTF::StringImpl *a15, char a16)
{
  uint64_t v16;
  _DWORD *v18;
  WTF::StringImpl *v19;
  void *v20;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AF20[a12])(v16 - 33, &a10);
  v18 = a14;
  a14 = 0;
  if (v18)
  {
    if (v18[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[4];
  }
  v19 = a15;
  a15 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v19 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1D802BF7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;
  _DWORD *v14;
  void *v15;

  v14 = *(_DWORD **)(v12 - 40);
  *(_QWORD *)(v12 - 40) = 0;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[4];
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D802C104(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;
  _DWORD *v14;
  void *v15;

  v14 = *(_DWORD **)(v12 - 40);
  *(_QWORD *)(v12 - 40) = 0;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[4];
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D802C230(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF30[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23AddEventListenerOptionsEbEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_bEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 1)
    {
      MEMORY[0x1D82A3CEC]();
      JUMPOUT(0x1D82A3CF8);
    }
    --*(_DWORD *)(result + 24);
  }
  return result;
}

uint64_t *WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v16[1] = *a3;
    if (*v6)
    {
      ++*(_DWORD *)(*v6 - 12);
      v20 = *v6;
      if (*v6)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v20 = *v6;
      if (*v6)
      {
LABEL_14:
        v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v21 = *(unsigned int *)(v20 - 16);
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v20 + 16 * v22;
        *(_BYTE *)(a4 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v22)
      {
        result = (uint64_t *)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(v6, 8u, v16);
        v16 = result;
        v20 = *v6;
        if (!*v6)
        {
LABEL_18:
          v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = (uint64_t *)WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(v6, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      v16 = result;
      v20 = *v6;
      if (!*v6)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21)
      goto LABEL_26;
    goto LABEL_24;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v11 = *a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v23;
  *(_BYTE *)(a4 + 16) = 0;
  v16[1] = *a3;
  return result;
}

WebCore::WindowProxy *WTF::RefCounted<WebCore::WindowProxy>::deref(WebCore::WindowProxy *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::WindowProxy::~WindowProxy(result);
    return (WebCore::WindowProxy *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_1D802C618(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802C6C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802C730(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802C850(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF40[a11])(v14 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D802C988(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF40[a11])(v14 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D802CB50(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D802CB64(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D802CC84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802CCF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802CE38(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D802CE4C(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D802D158(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D1CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D230(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D3D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D43C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D4A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D504(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D5D0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;

  if (cf)
    CFRelease(cf);
  if ((a9 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v15);
      _Unwind_Resume(a1);
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D764(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D802D778(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D802D894(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802D940(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802DA4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802DB88(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v16;
  void *v17;
  void *v18;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a11);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a11);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v17);
    _Unwind_Resume(a1);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a11);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a15, v18);
  _Unwind_Resume(a1);
}

void sub_1D802DBFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802DCE4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802DD30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802DE18(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802DE64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802DEFC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802DF38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802DF4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802DFE4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802E020(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E034(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E0CC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802E108(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E11C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E1B4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802E1F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E204(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E264(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E2FC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802E338(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E34C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E3E4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802E420(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E434(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E4F4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF50[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E5EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802E628(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E724(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF60[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E890(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF60[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D802E9EC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802EA38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802EAD0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  void *v15;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D802EB0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802EB20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802EBB8(_Unwind_Exception *a1, void *a2, uint64_t a3, _DWORD *a4, ...)
{
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, v5);
      _Unwind_Resume(a1);
    }
    --a4[2];
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D802ED44(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D802ED58(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D802EE28(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D802EFDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, char a12, uint64_t a13, int a14, uint64_t a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a14 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AF60[a14])(v16 - 32, &a12);
  a14 = -1;
  if (a10 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF70[a10])(v16 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, v18);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_1D802F130(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF80[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D802F218(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802F2D8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF50[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D802F40C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AF90[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D802F554(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF::StringImpl *v13;
  StringImpl *v15;
  void *v16;

  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v15);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
  _Unwind_Resume(a1);
}

DOMObjectInternal *kit()
{
  DOMObjectInternal *v0;
  WebCore::Range *v2;

  WebCore::createLiveRange();
  v0 = kit(v2);
  if (!v2)
    return v0;
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return v0;
  }
  (*(void (**)())(*(_QWORD *)v2 + 8))();
  return v0;
}

void sub_1D802F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJsN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJsS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore5Range14CompareResultsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D802F84C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802F8B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802F914(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802F978(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802FAB8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D802FACC(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D802FC2C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D802FCD8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802FD40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802FDAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802FE18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D802FF60(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D802FF74(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D803004C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D8030138(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80301E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80302CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8030338(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8030478(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D803048C(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D803055C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80306A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFA0[a11])(v13 - 32, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D80307F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  uint64_t v11;
  void *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
        WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, v13);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80308F0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  void *v11;

  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, a2);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, v11);
    _Unwind_Resume(a1);
  }
  *(_DWORD *)v9 -= 2;
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8030AA8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  void *v13;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a12, a2);
  _Unwind_Resume(a1);
}

void sub_1D8030C28(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8030CD4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFB0[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D8030DE0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFB0[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D8030F80(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8030F94(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D80310B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031128(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80311D8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80312B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031358(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D80314A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6AFC0[a12])(v14 - 48, &a10);
  a12 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, v16);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031684(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8031698(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D803179C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031848(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80318B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031924(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80319CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFD0[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031AAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFD0[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031B8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFD0[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031C6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFD0[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031D4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFD0[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031E2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFD0[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8031F0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6AFD0[a11])(v13 - 17, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8032084(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8032098(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4TextENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore4NodeENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D80321EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80322E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D803239C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8032404(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D803246C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80324D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D803253C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80325A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80326F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1D8032A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a17);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a21);
  MEMORY[0x1D82A4754](&a34);
  _Unwind_Resume(a1);
}

void sub_1D8032DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a17);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a21);
  MEMORY[0x1D82A4754](&a34);
  _Unwind_Resume(a1);
}

void sub_1D8032F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1D803324C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
  {
    CFRelease(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80336EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v4 = *(_DWORD **)(v2 - 24);
  *(_QWORD *)(v2 - 24) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1D8033764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a16);
  if (a13)
  {
    if (*((_DWORD *)a13 + 6) != 2)
    {
      *((_DWORD *)a13 + 6) -= 2;
      _Unwind_Resume(a1);
    }
    if ((*((_WORD *)a13 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a13);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x1D803375CLL);
}

uint64_t WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>@<X0>(WebCore *a1@<X0>, VisiblePosition *a2@<X1>, uint64_t a3@<X8>)
{
  const VisiblePosition *v5;
  uint64_t result;
  BOOL v7;
  WebCore::Node *v8;
  char v9;
  WebCore::Node *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  WebCore::makeBoundaryPoint(a1, a2);
  result = WebCore::makeBoundaryPoint((WebCore *)a2, v5);
  if (v11)
    v7 = v9 == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    result = WebCore::SimpleRange::SimpleRange();
    *(_QWORD *)a3 = v12;
    *(_DWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v14;
    *(_DWORD *)(a3 + 24) = v15;
    *(_BYTE *)(a3 + 32) = 1;
    if (!v9)
      goto LABEL_14;
  }
  result = (uint64_t)v8;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v8);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
LABEL_14:
  if (v11)
  {
    result = (uint64_t)v10;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v10);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
  }
  return result;
}

void sub_1D80338BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::optional<WebCore::BoundaryPoint>::~optional(&a9);
  std::optional<WebCore::BoundaryPoint>::~optional(&a12);
  _Unwind_Resume(a1);
}

void sub_1D80338D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::optional<WebCore::SimpleRange>::~optional(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!*((_BYTE *)a1 + 32))
    return a1;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)(v3 + 24) != 2)
  {
    *(_DWORD *)(v3 + 24) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v3 + 30) & 0x400) != 0)
    return a1;
  WebCore::Node::removedLastRef((WebCore::Node *)v3);
  return a1;
}

void sub_1D8033FC0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
  {
    CFRelease(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8034130(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8034144(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

WebCore::Node *createDOMWrapper()
{
  WebCore::CSSRule *v0;
  WebCore::Node *result;
  DOMObjectInternal *v2;
  DOMObjectInternal *v3;
  WebCore::DeprecatedCSSOMValue *v4;
  DOMObjectInternal *v5;
  DOMObjectInternal *v6;
  DOMObjectInternal *v7;
  DOMObjectInternal *v8;
  DOMObjectInternal *v9;
  WebCore::Node *v10;
  DOMObjectInternal *v11;
  DOMObjectInternal *v12;
  DOMObjectInternal *v13;
  DOMObjectInternal *v14;
  DOMObjectInternal *v15;
  DOMObjectInternal *v16;
  DOMObjectInternal *v17;
  DOMObjectInternal *v18;
  WebCore::WindowProxy *v19;
  DOMObjectInternal *v20;
  DOMObjectInternal *v21;

  v0 = (WebCore::CSSRule *)WebCore::JSCSSRule::toWrapped();
  if (v0)
    return (WebCore::Node *)kit(v0);
  v2 = (DOMObjectInternal *)WebCore::JSCSSRuleList::toWrapped();
  if (v2)
    return kit(v2);
  v3 = (DOMObjectInternal *)WebCore::JSCSSStyleDeclaration::toWrapped();
  if (v3)
    return kit(v3);
  v4 = (WebCore::DeprecatedCSSOMValue *)WebCore::JSDeprecatedCSSOMValue::toWrapped();
  if (v4)
    return (WebCore::Node *)kit(v4);
  v5 = (DOMObjectInternal *)WebCore::JSDeprecatedCSSOMCounter::toWrapped();
  if (v5)
    return kit(v5);
  v6 = (DOMObjectInternal *)WebCore::JSDOMImplementation::toWrapped();
  if (v6)
    return kit(v6);
  v7 = (DOMObjectInternal *)WebCore::JSEvent::toWrapped();
  if (v7)
    return (WebCore::Node *)kit(v7);
  result = (WebCore::Node *)WebCore::JSHTMLOptionsCollection::toWrapped();
  if (result)
    return (WebCore::Node *)kit(result);
  v8 = (DOMObjectInternal *)WebCore::JSMediaList::toWrapped();
  if (v8)
    return kit(v8);
  v9 = (DOMObjectInternal *)WebCore::JSNamedNodeMap::toWrapped();
  if (v9)
    return kit(v9);
  v10 = (WebCore::Node *)WebCore::JSNode::toWrapped();
  if (v10)
    return kit(v10);
  v11 = (DOMObjectInternal *)WebCore::JSNodeIterator::toWrapped();
  if (v11)
    return kit(v11);
  v12 = (DOMObjectInternal *)WebCore::JSNodeList::toWrapped();
  if (v12)
    return kit(v12);
  v13 = (DOMObjectInternal *)WebCore::JSDeprecatedCSSOMRGBColor::toWrapped();
  if (v13)
    return kit(v13);
  v14 = (DOMObjectInternal *)WebCore::JSRange::toWrapped();
  if (v14)
    return kit(v14);
  v15 = (DOMObjectInternal *)WebCore::JSDeprecatedCSSOMRect::toWrapped();
  if (v15)
    return kit(v15);
  v16 = (DOMObjectInternal *)WebCore::JSStyleSheet::toWrapped();
  if (v16)
    return (WebCore::Node *)kit(v16);
  v17 = (DOMObjectInternal *)WebCore::JSStyleSheetList::toWrapped();
  if (v17)
    return kit(v17);
  v18 = (DOMObjectInternal *)WebCore::JSTreeWalker::toWrapped();
  if (v18)
    return kit(v18);
  v19 = (WebCore::WindowProxy *)WebCore::JSWindowProxy::toWrapped();
  if (v19)
    return (WebCore::Node *)kit(v19);
  v20 = (DOMObjectInternal *)WebCore::JSXPathExpression::toWrapped();
  if (v20)
    return kit(v20);
  v21 = (DOMObjectInternal *)WebCore::JSXPathResult::toWrapped();
  if (v21)
    return kit(v21);
  result = (WebCore::Node *)WebCore::JSHTMLCollection::toWrapped();
  if (result)
    return (WebCore::Node *)kit(result);
  return result;
}

void sub_1D8034868(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80349F4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8034A08(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D8034C0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (a11 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6B000[a11])(v13 - 48, &a9);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, v15);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a13, a2);
  _Unwind_Resume(a1);
}

void sub_1D8034DBC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8034DD0(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D8034F44(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8034F58(_Unwind_Exception *a1)
{
  const void *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;

  v3 = v2;
  v5 = v3;
  LODWORD(v3) = __ldxr(v3);
  if ((_DWORD)v3 == 1)
  {
    if (!__stlxr(0, v5))
    {
LABEL_6:
      CFRelease(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)wrapperCacheLock);
  goto LABEL_6;
}

void sub_1D803506C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8035110(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6B010[v9])(v3 - 48, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D8035284(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6B020[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D8035388(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6B030[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D80354B0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  uint64_t v15;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6B040[a12])(v15 - 32, &a10);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D8035570(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D803560C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t, uint64_t *))off_1E9D6B050[v9])(v3 - 32, (uint64_t *)va);
    WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, v5);
    _Unwind_Resume(a1);
  }
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)va1, a2);
  _Unwind_Resume(a1);
}

void sub_1D8035734(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  uint64_t v15;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6B040[a12])(v15 - 32, &a10);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void sub_1D8035864(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v14;
  uint64_t v15;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6B040[a12])(v15 - 32, &a10);
  WebCore::JSMainThreadNullState::~JSMainThreadNullState((WebCore::JSMainThreadNullState *)&a14, a2);
  _Unwind_Resume(a1);
}

void raiseTypeErrorException(void)
{
  raiseDOMErrorException();
}

void raiseDOMErrorException()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v0 = WebCore::DOMException::description();
  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 32);
  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (v1)
    v4 = objc_msgSend(v3, "initWithFormat:", CFSTR("*** %s: %@ %d"), v1, CFSTR("DOMException"), v2);
  else
    v4 = objc_msgSend(v3, "initWithFormat:", CFSTR("*** %@ %d"), CFSTR("DOMException"), v2, v7);
  v5 = v4;
  v8 = CFSTR("DOMException");
  v9[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v2);
  v6 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("DOMException"), v5, v6), "raise");
  __break(0xC471u);
}

{
  raiseDOMErrorException();
}

void sub_1D80359C8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void raiseNotSupportedErrorException(void)
{
  raiseDOMErrorException();
}

void WebCore::VisibleSelection::~VisibleSelection(WebCore::VisibleSelection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

uint64_t *std::optional<WebCore::BoundaryPoint>::~optional(uint64_t *a1)
{
  uint64_t v2;

  if (!*((_BYTE *)a1 + 16))
    return a1;
  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)(v2 + 24) != 2)
  {
    *(_DWORD *)(v2 + 24) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v2 + 30) & 0x400) != 0)
    return a1;
  WebCore::Node::removedLastRef((WebCore::Node *)v2);
  return a1;
}

_QWORD *WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(_QWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  char v18;

  v2 = result;
  v3 = *result;
  *result = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(v3 + 8);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v15 = v7;
              v16 = v8;
              atomic_store(1u, v9);
              v17 = (WTF *)v9;
              v12 = v9[6];
              if ((_DWORD)v12 != -1)
                ((void (*)(char *, unsigned int *))off_1E9D6B060[v12])(&v18, v9 + 2);
              *((_DWORD *)v17 + 6) = -1;
              WTF::fastFree(v17, a2);
              v7 = v15;
              v8 = v16;
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v13 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v13, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(int a1, WTF::FileSystemImpl::MappedFileData *this)
{
  WTF::FileSystemImpl::MappedFileData::~MappedFileData(this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a2[1];
  a2[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::ObjCEventListener::wrap@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (result)
  {
    v3 = (const void *)result;
    if (WebCore::listenerMap)
    {
      v4 = *(_QWORD *)WebCore::listenerMap;
      if (*(_QWORD *)WebCore::listenerMap)
      {
        v5 = *(_DWORD *)(v4 - 8);
        v6 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
        v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
        v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
        v9 = v5 & ((v8 >> 31) ^ v8);
        v10 = *(_QWORD *)(v4 + 16 * v9);
        if (v10 == result)
        {
LABEL_8:
          v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
          if (v12)
          {
            ++*(_DWORD *)(v12 + 16);
LABEL_10:
            *a2 = v12;
            return result;
          }
        }
        else
        {
          v11 = 1;
          while (v10)
          {
            v9 = ((_DWORD)v9 + v11) & v5;
            v10 = *(_QWORD *)(v4 + 16 * v9);
            ++v11;
            if (v10 == result)
              goto LABEL_8;
          }
        }
      }
    }
    *a2 = 0;
    v12 = WTF::fastMalloc((WTF *)0x20);
    result = WebCore::ObjCEventListener::ObjCEventListener(v12, v3);
    goto LABEL_10;
  }
  *a2 = 0;
  return result;
}

void sub_1D8035E44(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ObjCEventListener::ObjCEventListener(uint64_t a1, CFTypeRef cf)
{
  uint64_t *v4;
  _BYTE v6[24];
  uint64_t v7;
  CFTypeRef v8;

  *(_DWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 20) = 2;
  *(_QWORD *)a1 = off_1E9D6B090;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = cf;
  if (cf)
    CFRetain(cf);
  v4 = (uint64_t *)WebCore::listenerMap;
  if (!WebCore::listenerMap)
  {
    v4 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v4 = 0;
    WebCore::listenerMap = (uint64_t)v4;
  }
  v7 = a1;
  v8 = cf;
  WTF::HashMap<DOMObjectInternal *,NSObject *,WTF::DefaultHash<DOMObjectInternal *>,WTF::HashTraits<DOMObjectInternal *>,WTF::HashTraits<NSObject *>,WTF::HashTableTraits>::inlineSet<DOMObjectInternal * const&,NSObject *&>(v4, (uint64_t *)&v8, &v7, (uint64_t)v6);
  return a1;
}

void sub_1D8035EE8(_Unwind_Exception *a1, void *a2)
{
  WebCore::EventListener *v2;
  const void *v4;

  v4 = (const void *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::EventListener::~EventListener(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::EventListener::~EventListener(WebCore::EventListener *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::ObjCEventListener::~ObjCEventListener(WebCore::ObjCEventListener *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v16;
  const void *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  *(_QWORD *)this = off_1E9D6B090;
  v2 = (uint64_t *)WebCore::listenerMap;
  v3 = *(_QWORD *)WebCore::listenerMap;
  if (*(_QWORD *)WebCore::listenerMap)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *(_DWORD *)(v3 - 8);
    v6 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v3 + 16 * v9);
    if (v10 == v4)
    {
LABEL_6:
      if (v9 == *(_DWORD *)(v3 - 4))
        goto LABEL_19;
      *(_QWORD *)(v3 + 16 * v9) = -1;
      ++*(_DWORD *)(*v2 - 16);
      if (*v2)
      {
        --*(_DWORD *)(*v2 - 12);
        v12 = *v2;
        if (!*v2)
          goto LABEL_19;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        v12 = *v2;
        if (!*v2)
          goto LABEL_19;
      }
      v13 = 6 * *(_DWORD *)(v12 - 12);
      v14 = *(_DWORD *)(v12 - 4);
      if (v13 < v14 && v14 >= 9)
        WTF::HashTable<WebCore::QualifiedName::QualifiedNameImpl const*,WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *>>,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashMap<WebCore::QualifiedName::QualifiedNameImpl const*,objc_class *,WTF::DefaultHash<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName::QualifiedNameImpl const*>>::rehash(v2, v14 >> 1, 0);
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(_QWORD *)(v3 + 16 * v9);
        ++v11;
        if (v10 == v4)
          goto LABEL_6;
      }
    }
  }
LABEL_19:
  CFRetain(*((CFTypeRef *)this + 3));
  CFAutorelease(*((CFTypeRef *)this + 3));
  v17 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
    CFRelease(v17);
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v16);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::ObjCEventListener::~ObjCEventListener(this);
  WTF::fastFree(v1, v2);
}

void sub_1D8036160(_Unwind_Exception *a1, void *a2)
{
  WebCore::EventListener *v2;
  const void *v4;

  v4 = (const void *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::EventListener::~EventListener(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ObjCEventListener::handleEvent(uint64_t a1, uint64_t a2, DOMObjectInternal *a3)
{
  return objc_msgSend(*(id *)(a1 + 24), "handleEvent:", kit(a3));
}

BOOL WebCore::ObjCEventListener::operator==(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 20) == 2 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
}

uint64_t WebCore::ObjCNodeFilterCondition::acceptNode(id *this, WebCore::Node *a2)
{
  return (unsigned __int16)objc_msgSend(this[2], "acceptNode:", kit(a2));
}

void sub_1D80363C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _DWORD *v15;
  uint64_t v16;

  v15 = *(_DWORD **)(v13 - 24);
  *(_QWORD *)(v13 - 24) = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  v16 = a13;
  a13 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(*(WTF::StringImpl **)a1, (StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1D80365E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  _DWORD *v15;
  uint64_t v16;

  v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  v16 = a13;
  a13 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void sub_1D8036AB0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  WTF::StringImpl *v14;

  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8036B34(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1D8036DF8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8036FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(_DWORD **)(v2 - 24);
  *(_QWORD *)(v2 - 24) = 0;
  if (v4)
  {
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
      _Unwind_Resume(a1);
    }
    --v4[2];
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1D80371F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  WTF::StringImpl *v12;

  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, a2);
  else
    *(_DWORD *)v12 -= 2;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
    _Unwind_Resume(a1);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a12);
  _Unwind_Resume(a1);
}

CFTypeRef kit(BackForwardList *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  WebBackForwardList *v12;
  BackForwardList *v13;
  BackForwardList *v14;

  if (!a1)
    return 0;
  if ((_MergedGlobals_8 & 1) != 0)
  {
    if (qword_1ECEC9788)
    {
      v2 = *(_DWORD *)(qword_1ECEC9788 - 8);
      v3 = ((unint64_t)a1 + ~((_QWORD)a1 << 32)) ^ (((unint64_t)a1 + ~((_QWORD)a1 << 32)) >> 22);
      v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
      v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
      v6 = v2 & ((v5 >> 31) ^ v5);
      for (i = 1; ; ++i)
      {
        v8 = v6;
        v9 = *(_QWORD *)(qword_1ECEC9788 + 16 * v6);
        if (v9 != -1)
        {
          if (!v9)
            goto LABEL_13;
          if (*(BackForwardList **)(v9 + 8) == a1)
            break;
        }
        v6 = (v8 + i) & v2;
      }
      v10 = *(CFTypeRef *)(qword_1ECEC9788 + 16 * v8 + 8);
      if (v10)
        return v10;
    }
  }
  else
  {
    qword_1ECEC9788 = 0;
    _MergedGlobals_8 = 1;
  }
LABEL_13:
  v12 = [WebBackForwardList alloc];
  ++*((_DWORD *)a1 + 2);
  v14 = a1;
  v10 = (id)CFMakeCollectable(-[WebBackForwardList initWithBackForwardList:](v12, "initWithBackForwardList:", &v14));
  v13 = v14;
  v14 = 0;
  if (!v13)
    return v10;
  if (*((_DWORD *)v13 + 2) == 1)
    (*(void (**)(BackForwardList *))(*(_QWORD *)v13 + 8))(v13);
  else
    --*((_DWORD *)v13 + 2);
  return v10;
}

void sub_1D80375F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8037920(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8037A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8037CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1D8037F54(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8038184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v2;
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  if (v2)
  {
    CFRelease(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1D8038390(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
    WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8038474(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
    WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8038564(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
    WTF::RefCounted<WebCore::HistoryItem>::deref(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8038684(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80386A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;

  if (v9)
    CFRelease(v9);
  WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  _DWORD *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v8 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v8)
      {
        if (*v8 == 1)
        {
          v6 = (WTF *)MEMORY[0x1D82A3F20]();
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*v8;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void sub_1D8038848(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8038864(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;

  if (v9)
    CFRelease(v9);
  WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8038B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
    WTF::RefCounted<WebCore::HistoryItem>::deref(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80394E4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,WTF::StringImpl *a38,WTF::StringImpl **a39,int a40,unsigned int a41,WTF::StringImpl *a42)
{
  WTF::StringImpl **v43;
  uint64_t v44;
  WTF::StringImpl *v45;

  if (a42)
  {
    if (*(_DWORD *)a42 == 2)
      WTF::StringImpl::destroy(a42, a2);
    else
      *(_DWORD *)a42 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a41)
  {
    v43 = a39;
    v44 = 8 * a41;
    do
    {
      v45 = *v43;
      *v43 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, a2);
        else
          *(_DWORD *)v45 -= 2;
      }
      ++v43;
      v44 -= 8;
    }
    while (v44);
  }
  if (a39)
    WTF::fastFree((WTF *)a39, a2);
  if (a38)
  {
    if (*(_DWORD *)a38 == 2)
      WTF::StringImpl::destroy(a38, a2);
    else
      *(_DWORD *)a38 -= 2;
  }
  if (a37)
  {
    if (*(_DWORD *)a37 == 2)
    {
      WTF::StringImpl::destroy(a37, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a37 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8039944(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8039A1C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8039D50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  WTF *v14;

  if (v14 != a13 && a13 != 0)
    WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D803A398(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::EventListener::isAttribute(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebCore::EventListener::jsFunction(WebCore::EventListener *this)
{
  return 0;
}

uint64_t WebCore::EventListener::wrapper(WebCore::EventListener *this)
{
  return 0;
}

void WebCore::ObjCNodeFilterCondition::~ObjCNodeFilterCondition(WebCore::ObjCNodeFilterCondition *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::ObjCNodeFilterCondition::~ObjCNodeFilterCondition(WebCore::ObjCNodeFilterCondition *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(WTF::StringImpl *result, StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  if (result != (WTF::StringImpl *)a2)
  {
    v3 = result;
    while (1)
    {
      v4 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v4)
        break;
LABEL_17:
      v9 = (WTF *)*((_QWORD *)v3 + 1);
      if (v9)
      {
        *((_QWORD *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v9, a2);
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 24);
      if (v3 == (WTF::StringImpl *)a2)
        return result;
    }
    v5 = 16 * v4;
    v6 = (WTF::StringImpl **)(*((_QWORD *)v3 + 1) + 8);
    while (1)
    {
      v7 = *v6;
      *v6 = 0;
      if (!v7)
        goto LABEL_12;
      if (*(_DWORD *)v7 != 2)
        break;
      WTF::StringImpl::destroy(v7, a2);
      v8 = *(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
LABEL_15:
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
LABEL_8:
      v6 += 2;
      v5 -= 16;
      if (!v5)
        goto LABEL_17;
    }
    *(_DWORD *)v7 -= 2;
LABEL_12:
    v8 = *(v6 - 1);
    *(v6 - 1) = 0;
    if (v8)
      goto LABEL_15;
    goto LABEL_8;
  }
  return result;
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v7;
  uint64_t v9;
  _BYTE *v10;
  int8x16_t *v11;
  size_t v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  _WORD *v17;
  int8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  size_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  _BYTE *v36;
  int8x16_t *v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  _WORD *v43;
  int8x16_t *v44;
  __int16 v45;
  int8x16_t *v46;
  size_t v47;
  __int8 *v48;
  unint64_t v49;
  unsigned __int128 v50;
  size_t v51;
  unint64_t v52;
  BOOL v53;
  unint64_t v54;
  __int8 *v55;
  int8x16_t *v56;
  __int8 v57;
  uint64_t v58;
  _WORD *v59;
  unint64_t v60;
  __int128 v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  char *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  _WORD *v69;
  int8x16_t *v70;
  __int16 v71;
  uint64_t v72;
  unint64_t v73;
  int8x16_t *v74;
  int8x16_t *v75;
  unint64_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int16x8_t *v81;
  int8x8_t *v82;
  unint64_t v83;
  int16x8_t v84;
  int8x16_t *v85;
  int8x16_t *v86;
  unint64_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int16x8_t *v92;
  int8x8_t *v93;
  unint64_t v94;
  int16x8_t v95;
  uint8x8_t *v96;
  uint16x8_t *v97;
  unint64_t v98;
  uint8x16_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint8x8_t *v102;
  uint16x8_t *v103;
  unint64_t v104;
  uint8x8_t v105;
  uint8x8_t *v106;
  uint16x8_t *v107;
  unint64_t v108;
  uint8x16_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  uint8x8_t *v112;
  uint16x8_t *v113;
  unint64_t v114;
  uint8x8_t v115;
  uint64_t v116;
  int8x16x2_t v117;
  int8x16x2_t v118;
  int8x16x2_t v119;
  int8x16x2_t v120;
  int8x16x2_t v121;
  int8x16x2_t v122;

  v7 = result;
  if (!a2)
  {
    if (!(_DWORD)result)
      goto LABEL_14;
    if (result > 0x7FFFFFEF)
      goto LABEL_13;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    v9 = v116;
    if (!v116)
      goto LABEL_15;
    v17 = (_WORD *)(v116 + 20);
    *(_DWORD *)v116 = 2;
    *(_DWORD *)(v116 + 4) = v7;
    *(_QWORD *)(v116 + 8) = v116 + 20;
    *(_DWORD *)(v116 + 16) = 0;
    if (!a3)
    {
      v21 = 0;
      goto LABEL_82;
    }
    v18 = *(int8x16_t **)(a3 + 8);
    v19 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) == 0)
    {
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 == 1)
          *v17 = v18->i16[0];
        else
          result = (unint64_t)memcpy((void *)(v116 + 20), v18, 2 * v19);
      }
      goto LABEL_81;
    }
    v22 = &v17[v19];
    if (v19 < 0x40)
    {
      v23 = v116 + 20;
    }
    else
    {
      v23 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
      v24 = 0uLL;
      v25 = (char *)(v116 + 20);
      do
      {
        v117.val[0] = *v18;
        v26 = v18[1];
        v119.val[0] = v18[2];
        v27 = v18[3];
        v18 += 4;
        v28 = v27;
        v119.val[1] = 0uLL;
        v121.val[0] = v26;
        v117.val[1] = 0uLL;
        v29 = v25;
        vst2q_s8(v29, v117);
        v29 += 32;
        v121.val[1] = 0uLL;
        vst2q_s8(v29, v121);
        v30 = v25 + 64;
        vst2q_s8(v30, v119);
        v31 = v25 + 96;
        vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
        v25 += 128;
      }
      while (v25 != (char *)v23);
    }
    if ((_WORD *)v23 == v22)
    {
LABEL_81:
      v21 = *(unsigned int *)(a3 + 4);
LABEL_82:
      if (!a4)
        goto LABEL_15;
      result = (unint64_t)&v17[v21];
      v46 = *(int8x16_t **)(a4 + 8);
      v58 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) == 0)
      {
        if (!(_DWORD)v58)
          goto LABEL_15;
        if ((_DWORD)v58 == 1)
        {
          *(_WORD *)result = v46->i16[0];
          goto LABEL_15;
        }
        v47 = 2 * v58;
        goto LABEL_99;
      }
      v59 = (_WORD *)(result + 2 * v58);
      if (v58 >= 0x40)
      {
        v60 = result + 2 * (v58 & 0xFFFFFFC0);
        v61 = 0uLL;
        do
        {
          v118.val[0] = *v46;
          v62 = v46[1];
          v120.val[0] = v46[2];
          v63 = v46[3];
          v46 += 4;
          v64 = v63;
          v120.val[1] = 0uLL;
          v122.val[0] = v62;
          v118.val[1] = 0uLL;
          v65 = (char *)result;
          vst2q_s8(v65, v118);
          v65 += 32;
          v122.val[1] = 0uLL;
          vst2q_s8(v65, v122);
          v66 = (char *)(result + 64);
          vst2q_s8(v66, v120);
          v67 = (char *)(result + 96);
          vst2q_s8(v67, *(int8x16x2_t *)(&v61 - 1));
          result += 128;
        }
        while (result != v60);
        result = v60;
      }
      if ((_WORD *)result == v59)
        goto LABEL_15;
      v68 = v116 + 2 * (v21 + v58) - result + 18;
      if (v68 < 0xE
        || result < (unint64_t)v46->u64 + (v68 >> 1) + 1
        && (unint64_t)v46 < (v68 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
      {
        v69 = (_WORD *)result;
        v70 = v46;
        goto LABEL_96;
      }
      v72 = (v68 >> 1) + 1;
      if (v68 >= 0x3E)
      {
        v73 = v72 & 0xFFFFFFFFFFFFFFE0;
        v106 = (uint8x8_t *)&v46[1];
        v107 = (uint16x8_t *)(result + 32);
        v108 = v72 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v109 = *(uint8x16_t *)v106[-2].i8;
          v110 = vmovl_u8(*v106);
          v111 = vmovl_high_u8(*(uint8x16_t *)v106->i8);
          v107[-2] = vmovl_u8(*(uint8x8_t *)v109.i8);
          v107[-1] = vmovl_high_u8(v109);
          *v107 = v110;
          v107[1] = v111;
          v107 += 4;
          v106 += 4;
          v108 -= 32;
        }
        while (v108);
        if (v72 == v73)
          goto LABEL_15;
        if ((v72 & 0x18) == 0)
        {
          v70 = (int8x16_t *)((char *)v46 + v73);
          v69 = (_WORD *)(result + 2 * v73);
          goto LABEL_96;
        }
      }
      else
      {
        v73 = 0;
      }
      v69 = (_WORD *)(result + 2 * (v72 & 0xFFFFFFFFFFFFFFF8));
      v70 = (int8x16_t *)((char *)v46 + (v72 & 0xFFFFFFFFFFFFFFF8));
      v112 = (uint8x8_t *)&v46->i8[v73];
      v113 = (uint16x8_t *)(result + 2 * v73);
      v114 = v73 - (v72 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v115 = *v112++;
        *v113++ = vmovl_u8(v115);
        v114 += 8;
      }
      while (v114);
      if (v72 == (v72 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_15;
      do
      {
LABEL_96:
        v71 = v70->u8[0];
        v70 = (int8x16_t *)((char *)v70 + 1);
        *v69++ = v71;
      }
      while (v69 != v59);
      goto LABEL_15;
    }
    v39 = v116 + 2 * v19 - v23 + 18;
    if (v39 < 0xE
      || (v23 < (unint64_t)v18->u64 + (v39 >> 1) + 1
        ? (v40 = (unint64_t)v18 >= (v39 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
        : (v40 = 1),
          !v40))
    {
      v43 = (_WORD *)v23;
      v44 = v18;
      goto LABEL_55;
    }
    v41 = (v39 >> 1) + 1;
    if (v39 >= 0x3E)
    {
      v42 = v41 & 0xFFFFFFFFFFFFFFE0;
      v96 = (uint8x8_t *)&v18[1];
      v97 = (uint16x8_t *)(v23 + 32);
      v98 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v99 = *(uint8x16_t *)v96[-2].i8;
        v100 = vmovl_u8(*v96);
        v101 = vmovl_high_u8(*(uint8x16_t *)v96->i8);
        v97[-2] = vmovl_u8(*(uint8x8_t *)v99.i8);
        v97[-1] = vmovl_high_u8(v99);
        *v97 = v100;
        v97[1] = v101;
        v97 += 4;
        v96 += 4;
        v98 -= 32;
      }
      while (v98);
      if (v41 == v42)
        goto LABEL_81;
      if ((v41 & 0x18) == 0)
      {
        v44 = (int8x16_t *)((char *)v18 + v42);
        v43 = (_WORD *)(v23 + 2 * v42);
        do
        {
LABEL_55:
          v45 = v44->u8[0];
          v44 = (int8x16_t *)((char *)v44 + 1);
          *v43++ = v45;
        }
        while (v43 != v22);
        goto LABEL_81;
      }
    }
    else
    {
      v42 = 0;
    }
    v43 = (_WORD *)(v23 + 2 * (v41 & 0xFFFFFFFFFFFFFFF8));
    v44 = (int8x16_t *)((char *)v18 + (v41 & 0xFFFFFFFFFFFFFFF8));
    v102 = (uint8x8_t *)&v18->i8[v42];
    v103 = (uint16x8_t *)(v23 + 2 * v42);
    v104 = v42 - (v41 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v105 = *v102++;
      *v103++ = vmovl_u8(v105);
      v104 += 8;
    }
    while (v104);
    if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_81;
    goto LABEL_55;
  }
  if (!(_DWORD)result)
  {
LABEL_14:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_15;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_15;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v9 = v116;
  if (!v116)
    goto LABEL_15;
  v10 = (_BYTE *)(v116 + 20);
  *(_DWORD *)v116 = 2;
  *(_DWORD *)(v116 + 4) = v7;
  *(_QWORD *)(v116 + 8) = v116 + 20;
  *(_DWORD *)(v116 + 16) = 4;
  if (!a3)
  {
    v20 = 0;
    goto LABEL_59;
  }
  v11 = *(int8x16_t **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
        *v10 = v11->i8[0];
      else
        result = (unint64_t)memcpy((void *)(v116 + 20), v11, v12);
    }
    goto LABEL_58;
  }
  v13 = &v10[v12];
  if (v12 < 0x10)
  {
    v14 = v116 + 20;
  }
  else
  {
    v14 = (unint64_t)&v10[v12 & 0xFFFFFFF0];
    v15 = (unsigned __int128 *)(v116 + 20);
    do
    {
      v16 = (unsigned __int128)vld2q_s8(v11->i8);
      v11 += 2;
      *v15++ = v16;
    }
    while (v15 != (unsigned __int128 *)v14);
  }
  if ((_BYTE *)v14 != v13)
  {
    v32 = v116 + v12;
    v33 = v116 + v12 - v14 + 20;
    if (v33 < 8
      || (v14 < (unint64_t)&v11[2].u64[1] + 2 * v32 + -2 * v14
        ? (v34 = (unint64_t)v11 >= v32 + 20)
        : (v34 = 1),
          !v34))
    {
      v36 = (_BYTE *)v14;
      v37 = v11;
      goto LABEL_42;
    }
    if (v33 >= 0x20)
    {
      v35 = v33 & 0xFFFFFFFFFFFFFFE0;
      v74 = v11 + 2;
      v75 = (int8x16_t *)(v14 + 16);
      v76 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v78 = v74[-2];
        v77 = v74[-1];
        v80 = *v74;
        v79 = v74[1];
        v74 += 4;
        v75[-1] = vuzp1q_s8(v78, v77);
        *v75 = vuzp1q_s8(v80, v79);
        v75 += 2;
        v76 -= 32;
      }
      while (v76);
      if (v33 == v35)
        goto LABEL_58;
      if ((v33 & 0x18) == 0)
      {
        v37 = (int8x16_t *)((char *)v11 + 2 * v35);
        v36 = (_BYTE *)(v14 + v35);
        do
        {
LABEL_42:
          v38 = v37->i8[0];
          v37 = (int8x16_t *)((char *)v37 + 2);
          *v36++ = v38;
        }
        while (v36 != v13);
        goto LABEL_58;
      }
    }
    else
    {
      v35 = 0;
    }
    v36 = (_BYTE *)(v14 + (v33 & 0xFFFFFFFFFFFFFFF8));
    v37 = (int8x16_t *)((char *)v11 + 2 * (v33 & 0xFFFFFFFFFFFFFFF8));
    v81 = (int16x8_t *)((char *)v11 + 2 * v35);
    v82 = (int8x8_t *)(v14 + v35);
    v83 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v84 = *v81++;
      *v82++ = vmovn_s16(v84);
      v83 += 8;
    }
    while (v83);
    if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_58;
    goto LABEL_42;
  }
LABEL_58:
  v20 = *(unsigned int *)(a3 + 4);
LABEL_59:
  if (!a4)
    goto LABEL_15;
  result = (unint64_t)&v10[v20];
  v46 = *(int8x16_t **)(a4 + 8);
  v47 = *(unsigned int *)(a4 + 4);
  if ((*(_BYTE *)(a4 + 16) & 4) != 0)
  {
    if (!(_DWORD)v47)
      goto LABEL_15;
    if ((_DWORD)v47 == 1)
    {
      *(_BYTE *)result = v46->i8[0];
      goto LABEL_15;
    }
LABEL_99:
    result = (unint64_t)memcpy((void *)result, v46, v47);
    goto LABEL_15;
  }
  v48 = (__int8 *)(result + v47);
  if (v47 >= 0x10)
  {
    v49 = result + (v47 & 0xFFFFFFF0);
    do
    {
      v50 = (unsigned __int128)vld2q_s8(v46->i8);
      v46 += 2;
      *(_OWORD *)result = v50;
      result += 16;
    }
    while (result != v49);
    result = v49;
  }
  if ((__int8 *)result != v48)
  {
    v51 = v20 + v116 + v47;
    v52 = v51 - result + 20;
    if (v52 < 8
      || (result < (unint64_t)&v46[2].u64[1] + 2 * v51 + -2 * result
        ? (v53 = (unint64_t)v46 >= v51 + 20)
        : (v53 = 1),
          !v53))
    {
      v55 = (__int8 *)result;
      v56 = v46;
      goto LABEL_78;
    }
    if (v52 >= 0x20)
    {
      v54 = v52 & 0xFFFFFFFFFFFFFFE0;
      v85 = v46 + 2;
      v86 = (int8x16_t *)(result + 16);
      v87 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v89 = v85[-2];
        v88 = v85[-1];
        v91 = *v85;
        v90 = v85[1];
        v85 += 4;
        v86[-1] = vuzp1q_s8(v89, v88);
        *v86 = vuzp1q_s8(v91, v90);
        v86 += 2;
        v87 -= 32;
      }
      while (v87);
      if (v52 == v54)
        goto LABEL_15;
      if ((v52 & 0x18) == 0)
      {
        v56 = (int8x16_t *)((char *)v46 + 2 * v54);
        v55 = (__int8 *)(result + v54);
        do
        {
LABEL_78:
          v57 = v56->i8[0];
          v56 = (int8x16_t *)((char *)v56 + 2);
          *v55++ = v57;
        }
        while (v55 != v48);
        goto LABEL_15;
      }
    }
    else
    {
      v54 = 0;
    }
    v55 = (__int8 *)(result + (v52 & 0xFFFFFFFFFFFFFFF8));
    v56 = (int8x16_t *)((char *)v46 + 2 * (v52 & 0xFFFFFFFFFFFFFFF8));
    v92 = (int16x8_t *)((char *)v46 + 2 * v54);
    v93 = (int8x8_t *)(result + v54);
    v94 = v54 - (v52 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v95 = *v92++;
      *v93++ = vmovn_s16(v95);
      v94 += 8;
    }
    while (v94);
    if (v52 != (v52 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_78;
  }
LABEL_15:
  *a5 = v9;
  return result;
}

_DWORD *WTF::HashTable<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>,WebBackForwardList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>,WebBackForwardList *>>,WTF::DefaultHash<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>,WebBackForwardList *,WTF::DefaultHash<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WebBackForwardList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<BackForwardList,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t i;
  unsigned int **v8;
  unsigned int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v2 = qword_1ECEC9788;
  if (qword_1ECEC9788)
  {
    v3 = *(_DWORD *)(qword_1ECEC9788 - 4);
    v4 = *(_DWORD *)(qword_1ECEC9788 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECEC9788 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECEC9788 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = (unsigned int **)(v2 + 16 * i);
      v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (qword_1ECEC9788)
            v10 = *(_DWORD *)(qword_1ECEC9788 - 8);
          else
            v10 = 0;
          v11 = ~(*((_QWORD *)v9 + 1) << 32) + *((_QWORD *)v9 + 1);
          v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
          v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
          v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
          v15 = 1;
          do
          {
            v16 = v14;
            v17 = *(_QWORD *)(qword_1ECEC9788 + 16 * v14);
            v14 = (v14 + v15++) & v10;
          }
          while (v17);
          v18 = (_QWORD *)(qword_1ECEC9788 + 16 * v16);
          *v18 = 0;
          v19 = *(_OWORD *)v8;
          *v8 = 0;
          *(_OWORD *)v18 = v19;
          v20 = *v8;
          *v8 = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v6);
            }
          }
        }
        else
        {
          *v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

char *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WTF::StringImpl *v5;
  StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  StringImpl *v18;
  uint64_t v19;
  void *v20;

  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1D803B190);
      }
      v18 = (StringImpl *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::MimeClassInfo>::move(v5, v18, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
    return (char *)a3;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1D803B198);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::MimeClassInfo>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(a3 - (_QWORD)v5) >> 5);
  }
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MimeClassInfo>::move(WTF::StringImpl *result, StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;

  if (result != (WTF::StringImpl *)a2)
  {
    v5 = result;
    while (1)
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 7);
      *((_DWORD *)v5 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v8;
      v9 = *((unsigned int *)v5 + 7);
      if ((_DWORD)v9)
      {
        v10 = (WTF::StringImpl **)*((_QWORD *)v5 + 2);
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v13 = (WTF *)*((_QWORD *)v5 + 2);
      if (v13)
      {
        *((_QWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v13, a2);
      }
      v14 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (!v14)
        goto LABEL_17;
      if (*(_DWORD *)v14 != 2)
        break;
      WTF::StringImpl::destroy(v14, a2);
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
LABEL_20:
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
LABEL_4:
      a3 += 32;
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
      if (v5 == (WTF::StringImpl *)a2)
        return result;
    }
    *(_DWORD *)v14 -= 2;
LABEL_17:
    result = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = 0;
    if (result)
      goto LABEL_20;
    goto LABEL_4;
  }
  return result;
}

void sub_1D803B5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803B5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803B64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803B708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803B71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803B840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803B854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803BB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803BB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803BB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803BBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803BBBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::JSLock::DropAllLocks::~DropAllLocks((JSC::JSLock::DropAllLocks *)va);
  _Unwind_Resume(a1);
}

void sub_1D803C2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebCore::ResourceError::~ResourceError(WebCore::ResourceError *this, StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v4)
  {
LABEL_6:
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v5)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v5)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    v6 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = 0;
    if (!v6)
      return;
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (!v6)
    return;
LABEL_14:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, a2);
  else
    *(_DWORD *)v6 -= 2;
}

void sub_1D803C6A8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t PluginPackageCandidates::update(id *this, WebBasePluginPackage *a2)
{
  uint64_t result;
  const WTF::StringImpl *v5;
  StringImpl *v6;
  unsigned int v7;
  StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) == 0)
    return result;
  result = (uint64_t)*this;
  if (!*this)
  {
    *this = a2;
    return result;
  }
  objc_msgSend((id)result, "bundleIdentifier");
  -[WebBasePluginPackage bundleIdentifier](a2, "bundleIdentifier");
  if (!WTF::equal(v13, v12, v5))
  {
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v6);
        result = (uint64_t)v13;
        v13 = 0;
        if (!result)
          return result;
LABEL_17:
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        *(_DWORD *)result -= 2;
        return result;
      }
      *(_DWORD *)v11 -= 2;
    }
    result = (uint64_t)v13;
    v13 = 0;
    if (!result)
      return result;
    goto LABEL_17;
  }
  v7 = -[WebBasePluginPackage versionNumber](a2, "versionNumber");
  v9 = objc_msgSend(*this, "versionNumber");
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      result = (uint64_t)v13;
      v13 = 0;
      if (!result)
        goto LABEL_23;
      goto LABEL_21;
    }
    *(_DWORD *)v10 -= 2;
  }
  result = (uint64_t)v13;
  v13 = 0;
  if (!result)
  {
LABEL_23:
    if (v7 > v9)
      goto LABEL_26;
    return result;
  }
LABEL_21:
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_23;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
  if (v7 > v9)
LABEL_26:
    *this = a2;
  return result;
}

void sub_1D803C860(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D803CA0C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D803CED4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D803D210(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D803D40C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D803D54C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(_QWORD *result, void *a2)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = result;
  if (*result)
  {
    *(_QWORD *)(*result + 8) = 0;
    v3 = (unsigned int *)*result;
    *v2 = 0;
    if (!v3)
      return v2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void WebFrameLoaderClient::~WebFrameLoaderClient(id *this)
{
  void *v2;
  id v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *this = &off_1E9D6B138;
  objc_msgSend(this[2], "_clearCoreFrame");
  objc_destroyWeak(this + 3);
  v3 = this[2];
  this[2] = 0;
  if (v3)
    CFRelease(v3);
  v4 = this[1];
  if (v4)
  {
    v4[1] = 0;
    v5 = (unsigned int *)this[1];
    this[1] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v2);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebFrameLoaderClient::~WebFrameLoaderClient(this);
  WTF::fastFree(v1, v2);
}

void sub_1D803D69C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  const void *v4;

  objc_destroyWeak((id *)(v1 + 24));
  v4 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v4)
    CFRelease(v4);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((_QWORD *)(v1 + 8), v3);
  _Unwind_Resume(a1);
}

BOOL WebFrameLoaderClient::hasWebView(id *this)
{
  return objc_msgSend(this[2], "webView") != 0;
}

uint64_t WebFrameLoaderClient::makeRepresentation(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2)
{
  void *v2;

  if (a2)
    v2 = (void *)*((_QWORD *)a2 + 445);
  else
    v2 = 0;
  return objc_msgSend(v2, "_makeRepresentation");
}

uint64_t WebFrameLoaderClient::hasHTMLView(WebFrameLoaderClient *this)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "documentView");
  objc_opt_class();
  return objc_opt_isKindOfClass() & 1;
}

uint64_t WebFrameLoaderClient::forceLayoutOnRestoreFromBackForwardCache(WebFrameLoaderClient *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *Weak;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGFloat v10;
  CGFloat v11;
  CGSize v13;
  int v14;

  v2 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "documentView");
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        Weak = *(_QWORD **)(v5 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) != 0)
            goto LABEL_6;
          Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
          v7 = objc_msgSend(Weak, "mainFrame");
          v8 = *((_QWORD *)this + 2);
          if (v8)
            goto LABEL_11;
LABEL_7:
          v9 = 0;
          if (v7 != v8)
            goto LABEL_14;
          goto LABEL_12;
        }
      }
      else
      {
        Weak = 0;
      }
      v7 = objc_msgSend(Weak, "mainFrame");
      v8 = *((_QWORD *)this + 2);
      if (v8)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
LABEL_6:
  Weak = 0;
  v7 = objc_msgSend(0, "mainFrame");
  v8 = *((_QWORD *)this + 2);
  if (!v8)
    goto LABEL_7;
LABEL_11:
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
  if (v7 != v8)
    goto LABEL_14;
LABEL_12:
  if (*(_QWORD *)(v9 + 288))
  {
    objc_msgSend(Weak, "_fixedLayoutSize");
    v13.width = v10;
    v13.height = v11;
    WebCore::IntSize::IntSize((WebCore::IntSize *)&v14, &v13);
    WebCore::ScrollView::setFixedLayoutSize();
    WebCore::ScrollView::setUseFixedLayout(*(WebCore::ScrollView **)(v9 + 288));
  }
LABEL_14:
  objc_msgSend(v2, "setNeedsLayout:", 1);
  objc_msgSend(v2, "layout");
  return 1;
}

void WebFrameLoaderClient::forceLayoutForNonHTML(WebFrameLoaderClient *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v3 = *(void **)(v2 + 16);
  if (v3)
    CFRetain(*(CFTypeRef *)(v2 + 16));
  v4 = (void *)objc_msgSend(v3, "documentView");
  if ((objc_msgSend((id)objc_msgSend(*((id *)this + 2), "_dataSource"), "_isDocumentHTML") & 1) == 0)
  {
    objc_msgSend(v4, "setNeedsLayout:", 1);
    objc_msgSend(v4, "layout");
    objc_msgSend(v4, "setNeedsDisplay:", 1);
  }
  if (v3)
    CFRelease(v3);
}

void sub_1D803D930(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::setCopiesOnScroll(WebFrameLoaderClient *this)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "_scrollView"), "contentView"), "setCopiesOnScroll:", 1);
}

void (*WebFrameLoaderClient::detachedFromParent2(WebFrameLoaderClient *this))(void)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebView *Weak;
  void (*result)(void);

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_6;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (!v3)
    goto LABEL_6;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
  {
    Weak = 0;
    goto LABEL_10;
  }
  Weak = *(WebView **)(v4 + 8);
  if (!Weak)
  {
LABEL_10:
    objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "_setWebFrame:", 0);
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) != 0)
  {
LABEL_6:
    Weak = 0;
    objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "_setWebFrame:", 0);
    goto LABEL_7;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "_setWebFrame:", 0);
  if (!Weak)
  {
LABEL_7:
    result = (void (*)(void))qword_1F0165E60;
    if (!qword_1F0165E60)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didRemoveFrameFromHierarchy_, *((objc_object **)this + 2));
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didRemoveFrameFromHierarchyFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didRemoveFrameFromHierarchy_, *((objc_object **)this + 2));
  return result;
}

void WebFrameLoaderClient::detachedFromParent3(WebFrameLoaderClient *this)
{
  uint64_t v1;
  const void *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v2 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v2)
    CFRelease(v2);
}

id WebFrameLoaderClient::convertMainResourceLoadToDownload(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *Weak;
  uint64_t v10;
  WebDownload *v11;
  uint64_t v13;
  uint64_t v14;

  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        Weak = *(_QWORD **)(v8 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(_QWORD, WebCore::DocumentLoader *, const WebCore::ResourceRequest *))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16), a2, a3) & 1) == 0)
          {
            Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
            v10 = WebCore::DocumentLoader::mainResourceLoader(a2);
            if (!v10)
              goto LABEL_7;
            goto LABEL_10;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weak = 0;
      }
      v10 = WebCore::DocumentLoader::mainResourceLoader(a2);
      if (!v10)
        goto LABEL_7;
      goto LABEL_10;
    }
  }
LABEL_6:
  Weak = 0;
  v10 = WebCore::DocumentLoader::mainResourceLoader(a2);
  if (!v10)
  {
LABEL_7:
    v11 = -[WebDownload initWithRequest:delegate:]([WebDownload alloc], "initWithRequest:delegate:", WebCore::ResourceRequest::nsURLRequest(), objc_msgSend(Weak, "downloadDelegate"));
    return (id)(id)CFMakeCollectable(v11);
  }
LABEL_10:
  v13 = WebCore::ResourceHandle::connection(*(WebCore::ResourceHandle **)(v10 + 24));
  v14 = WebCore::ResourceRequest::nsURLRequest();
  return +[NSURLDownload _downloadWithLoadingConnection:request:response:delegate:proxy:](WebDownload, "_downloadWithLoadingConnection:request:response:delegate:proxy:", v13, v14, WebCore::ResourceResponse::nsURLResponse(a4), objc_msgSend(Weak, "downloadDelegate"), 0);
}

uint64_t WebFrameLoaderClient::dispatchDidLoadResourceFromMemoryCache(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebView *v11;
  uint64_t *p_resourceLoadDelegateImplementations;
  void (*webThreadDidLoadResourceFromMemoryCacheFunc)(id, char *, WebView *, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id resourceProgressDelegate;
  WebView *Weak;
  void (*v19)(void);
  objc_object *v20;
  objc_object *v21;
  objc_object *v22;

  v8 = *((_QWORD *)this + 2);
  if (!v8)
    goto LABEL_6;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
  if (!v9)
    goto LABEL_6;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    goto LABEL_6;
  v11 = *(WebView **)(v10 + 8);
  if (!v11)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD, WebCore::DocumentLoader *, const WebCore::ResourceRequest *))(**((_QWORD **)v11->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)v11->super.viewContext.invalidateGStateCallback + 2), a2, a3) & 1) == 0)
  {
    Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)v11->super.viewContext.invalidateGStateCallback + 2) + 16));
    v11 = Weak;
    if (Weak)
    {
      p_resourceLoadDelegateImplementations = (uint64_t *)&Weak->_private->resourceLoadDelegateImplementations;
      webThreadDidLoadResourceFromMemoryCacheFunc = (void (*)(id, char *, WebView *, uint64_t, uint64_t, _QWORD, uint64_t))Weak->_private->resourceLoadDelegateImplementations.webThreadDidLoadResourceFromMemoryCacheFunc;
      if (webThreadDidLoadResourceFromMemoryCacheFunc)
        goto LABEL_8;
LABEL_15:
      v19 = (void (*)(void))p_resourceLoadDelegateImplementations[17];
      if (!v19)
        return 0;
      v20 = (objc_object *)WebCore::ResourceRequest::nsURLRequest();
      v21 = (objc_object *)WebCore::ResourceResponse::nsURLResponse(a4);
      if (a2)
        v22 = (objc_object *)*((_QWORD *)a2 + 445);
      else
        v22 = 0;
      CallResourceLoadDelegate(v19, v11, (objc_selector *)sel_webView_didLoadResourceFromMemoryCache_response_length_fromDataSource_, v20, v21, a5, v22);
      return 1;
    }
  }
  else
  {
LABEL_6:
    v11 = 0;
  }
LABEL_7:
  p_resourceLoadDelegateImplementations = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
  webThreadDidLoadResourceFromMemoryCacheFunc = (void (*)(id, char *, WebView *, uint64_t, uint64_t, _QWORD, uint64_t))off_1F0165D00;
  if (!off_1F0165D00)
    goto LABEL_15;
LABEL_8:
  v14 = WebCore::ResourceRequest::nsURLRequest();
  v15 = WebCore::ResourceResponse::nsURLResponse(a4);
  if (a2)
  {
    v16 = *((_QWORD *)a2 + 445);
    resourceProgressDelegate = v11->_private->resourceProgressDelegate;
    if (!resourceProgressDelegate)
      return 1;
    goto LABEL_12;
  }
  v16 = 0;
  resourceProgressDelegate = v11->_private->resourceProgressDelegate;
  if (resourceProgressDelegate)
LABEL_12:
    webThreadDidLoadResourceFromMemoryCacheFunc(resourceProgressDelegate, sel_webThreadWebView_didLoadResourceFromMemoryCache_response_length_fromDataSource_, v11, v14, v15, a5, v16);
  return 1;
}

void WebFrameLoaderClient::assignIdentifierToInitialRequest(uint64_t a1, uint64_t a2, objc_object *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t (*v10)(uint64_t, char *, _QWORD *, uint64_t, Class);
  uint64_t v11;
  Class isa;
  uint64_t v13;
  id v14;
  _QWORD *Weak;
  objc_selector *v16;
  WebView *v17;
  objc_object *v18;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
  if (!v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD **)(v7 + 8);
  if (!v8)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8[6] + 16) + 1368))(*(_QWORD *)(v8[6] + 16)) & 1) != 0)
  {
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  Weak = objc_loadWeak((id *)(*(_QWORD *)(v8[6] + 16) + 16));
  v8 = Weak;
  if (!Weak)
  {
LABEL_7:
    v9 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    v10 = (uint64_t (*)(uint64_t, char *, _QWORD *, uint64_t, Class))off_1F0165CF8;
    if (off_1F0165CF8)
      goto LABEL_8;
    goto LABEL_16;
  }
  v9 = (uint64_t *)(Weak[10] + 240);
  v10 = *(uint64_t (**)(uint64_t, char *, _QWORD *, uint64_t, Class))(Weak[10] + 280);
  if (v10)
  {
LABEL_8:
    v11 = WebCore::ResourceRequest::nsURLRequest();
    if (a3)
    {
      isa = a3[445].isa;
      v13 = *(_QWORD *)(v8[10] + 40);
      if (v13)
        goto LABEL_10;
    }
    else
    {
      isa = 0;
      v13 = *(_QWORD *)(v8[10] + 40);
      if (v13)
      {
LABEL_10:
        v14 = (id)v10(v13, sel_webThreadWebView_identifierForInitialRequest_fromDataSource_, v8, v11, isa);
        if (!v14)
          goto LABEL_22;
LABEL_20:
        CFRetain(v14);
        goto LABEL_22;
      }
    }
    v14 = 0;
    goto LABEL_22;
  }
LABEL_16:
  if (!v9[11])
  {
    v14 = objc_alloc_init(MEMORY[0x1E0DE7910]);
    goto LABEL_22;
  }
  v16 = (objc_selector *)WebCore::ResourceRequest::nsURLRequest();
  if (a3)
    a3 = (objc_object *)a3[445].isa;
  v17 = (WebView *)objc_msgSend(v8, "_resourceLoadDelegateForwarder");
  v14 = (id)CallDelegate((void (*)(void))v8, v17, (objc_object *)sel_webView_identifierForInitialRequest_fromDataSource_, v16, a3, v18);
  if (v14)
    goto LABEL_20;
LABEL_22:
  objc_msgSend(v8, "_addObject:forIdentifier:", v14, a2);
  if (v14)
    CFRelease(v14);
}

void WebFrameLoaderClient::dispatchWillSendRequest(uint64_t a1, uint64_t *a2, uint64_t a3, WebCore::ResourceRequest *a4, WebCore::ResourceResponse *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  objc_object *v14;
  uint64_t (*v15)(uint64_t, char *, _QWORD *, uint64_t, objc_object *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_selector *v20;
  objc_object *v21;
  WebView *v22;
  objc_object *v23;
  StringImpl *v24;
  _QWORD *Weak;
  _BYTE v26[200];

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_6;
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
  if (!v10)
    goto LABEL_6;
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    goto LABEL_6;
  v12 = *(_QWORD **)(v11 + 8);
  if (!v12)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12[6] + 16) + 1368))(*(_QWORD *)(v12[6] + 16)) & 1) != 0)
  {
LABEL_6:
    v12 = 0;
    goto LABEL_7;
  }
  Weak = objc_loadWeak((id *)(*(_QWORD *)(v12[6] + 16) + 16));
  v12 = Weak;
  if (!Weak)
  {
LABEL_7:
    v13 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if ((*((_BYTE *)a5 + 138) & 1) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = (uint64_t *)(Weak[10] + 240);
  if ((*((_BYTE *)a5 + 138) & 1) != 0)
LABEL_8:
    WebDocumentLoaderMac::increaseLoadCount(a2, a3);
LABEL_9:
  v14 = (objc_object *)WebCore::ResourceRequest::nsURLRequest();
  v15 = (uint64_t (*)(uint64_t, char *, _QWORD *, uint64_t, objc_object *, uint64_t, uint64_t))v13[7];
  if (v15)
  {
    v16 = objc_msgSend(v12, "_objectForIdentifier:", a3);
    v17 = WebCore::ResourceResponse::nsURLResponse(a5);
    if (a2)
    {
      v18 = a2[445];
      v19 = *(_QWORD *)(v12[10] + 40);
      if (v19)
        goto LABEL_12;
    }
    else
    {
      v18 = 0;
      v19 = *(_QWORD *)(v12[10] + 40);
      if (v19)
      {
LABEL_12:
        if ((objc_object *)v15(v19, sel_webThreadWebView_resource_willSendRequest_redirectResponse_fromDataSource_, v12, v16, v14, v17, v18) == v14)return;
        goto LABEL_21;
      }
    }
    if (!v14)
      return;
    goto LABEL_21;
  }
  if (v13[12])
  {
    v20 = (objc_selector *)objc_msgSend(v12, "_objectForIdentifier:", a3);
    v21 = (objc_object *)WebCore::ResourceResponse::nsURLResponse(a5);
    if (a2)
      a2 = (uint64_t *)a2[445];
    v22 = (WebView *)objc_msgSend(v12, "_resourceLoadDelegateForwarder");
    if ((objc_object *)CallDelegate((void (*)(void))v12, v22, (objc_object *)sel_webView_resource_willSendRequest_redirectResponse_fromDataSource_, v20, v14, v21, (objc_object *)a2, v23) != v14)
    {
LABEL_21:
      MEMORY[0x1D82A4D48](v26);
      WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties(a4, (const WebCore::ResourceRequest *)v26);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v26, v24);
    }
  }
}

uint64_t WebFrameLoaderClient::shouldUseCredentialStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *Weak;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
  if (!v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD **)(v7 + 8);
  if (!v8)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8[6] + 16) + 1368))(*(_QWORD *)(v8[6] + 16)) & 1) != 0)
  {
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  Weak = objc_loadWeak((id *)(*(_QWORD *)(v8[6] + 16) + 16));
  v8 = Weak;
  if (!Weak)
  {
LABEL_7:
    if (qword_1F0165D70)
      goto LABEL_8;
    return 1;
  }
  if (!*(_QWORD *)(Weak[10] + 400))
    return 1;
LABEL_8:
  v9 = objc_msgSend(v8, "_objectForIdentifier:", a3);
  if (!v9)
    return 1;
  if (a2)
    v10 = *(_QWORD *)(a2 + 3560);
  else
    v10 = 0;
  return (uint64_t)objc_msgSend(*(id *)(v8[10] + 40), sel_webView_resource_shouldUseCredentialStorageForDataSource_, v8, v9, v10);
}

void sub_1D803E388(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::dispatchDidReceiveAuthenticationChallenge(uint64_t a1, objc_object *isa, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  objc_object *v10;
  objc_selector *v11;
  WebView *v12;
  objc_object *v13;
  _QWORD *Weak;
  _QWORD *v15;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
  if (!v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD **)(v7 + 8);
  if (!v8)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8[6] + 16) + 1368))(*(_QWORD *)(v8[6] + 16)) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(v8[6] + 16) + 16));
    v8 = Weak;
    if (Weak)
    {
      v15 = (_QWORD *)(Weak[10] + 240);
      result = WebCore::mac();
      if (!*v15)
        return result;
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    v8 = 0;
  }
LABEL_7:
  result = WebCore::mac();
  if (!WebViewGetResourceLoadDelegateImplementations(WebView *)::empty)
    return result;
LABEL_8:
  v10 = (objc_object *)result;
  result = objc_msgSend(v8, "_objectForIdentifier:", a3);
  if (result)
  {
    v11 = (objc_selector *)result;
    if (isa)
      isa = (objc_object *)isa[445].isa;
    v12 = (WebView *)objc_msgSend(v8, "_resourceLoadDelegateForwarder");
    return CallDelegate((void (*)(void))v8, v12, (objc_object *)sel_webView_resource_didReceiveAuthenticationChallenge_fromDataSource_, v11, v10, isa, v13);
  }
  return result;
}

id WebFrameLoaderClient::canAuthenticateAgainstProtectionSpace(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ProtectionSpace *this)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *Weak;
  uint64_t v17;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  if (!v8)
    goto LABEL_6;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    goto LABEL_6;
  v10 = *(_QWORD **)(v9 + 8);
  if (!v10)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10[6] + 16) + 1368))(*(_QWORD *)(v10[6] + 16)) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(v10[6] + 16) + 16));
    v10 = Weak;
    if (Weak)
    {
      v17 = Weak[10] + 240;
      v11 = WebCore::ProtectionSpace::nsSpace(this);
      if (!*(_QWORD *)(v17 + 8))
        return (id)(*((unsigned __int8 *)this + 21) < 7u);
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    v10 = 0;
  }
LABEL_7:
  v11 = WebCore::ProtectionSpace::nsSpace(this);
  if (!qword_1F0165CD8)
    return (id)(*((unsigned __int8 *)this + 21) < 7u);
LABEL_8:
  v12 = v11;
  v13 = objc_msgSend(v10, "_objectForIdentifier:", a3);
  if (!v13)
    return (id)(*((unsigned __int8 *)this + 21) < 7u);
  if (a2)
    v14 = *(_QWORD *)(a2 + 3560);
  else
    v14 = 0;
  return objc_msgSend(*(id *)(v10[10] + 40), sel_webView_resource_canAuthenticateAgainstProtectionSpace_forDataSource_, v10, v13, v12, v14);
}

void sub_1D803E628(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

objc_selector *WebFrameLoaderClient::connectionProperties@<X0>(uint64_t a1@<X0>, objc_object *isa@<X1>, uint64_t a3@<X2>, objc_selector **a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *Weak;
  objc_selector *result;
  objc_selector *v12;
  WebView *v13;
  objc_object *v14;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7 || (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8)) == 0)
  {
LABEL_6:
    Weak = 0;
    result = (objc_selector *)objc_msgSend(0, "_objectForIdentifier:", a3);
    if (!result)
      goto LABEL_19;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
  {
    Weak = 0;
LABEL_9:
    result = (objc_selector *)objc_msgSend(Weak, "_objectForIdentifier:", a3);
    if (!result)
      goto LABEL_19;
    goto LABEL_10;
  }
  Weak = *(_QWORD **)(v9 + 8);
  if (!Weak)
    goto LABEL_9;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) != 0)
    goto LABEL_6;
  Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
  result = (objc_selector *)objc_msgSend(Weak, "_objectForIdentifier:", a3);
  if (!result)
    goto LABEL_19;
LABEL_10:
  v12 = result;
  if (!Weak)
  {
    if (qword_1F0165CE0)
      goto LABEL_14;
LABEL_19:
    *a4 = 0;
    return result;
  }
  if (!*(_QWORD *)(Weak[10] + 256))
    goto LABEL_19;
LABEL_14:
  if (isa)
    isa = (objc_object *)isa[445].isa;
  v13 = (WebView *)objc_msgSend(Weak, "_resourceLoadDelegateForwarder");
  result = (objc_selector *)CallDelegate((void (*)(void))Weak, v13, (objc_object *)sel_webView_connectionPropertiesForResource_dataSource_, v12, isa, v14);
  *a4 = result;
  if (result)
    return (objc_selector *)CFRetain(result);
  return result;
}

uint64_t WebFrameLoaderClient::shouldPaintBrokenImage(WebFrameLoaderClient *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *Weak;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_6;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (!v3)
    goto LABEL_6;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    goto LABEL_6;
  v5 = *(_QWORD **)(v4 + 8);
  if (!v5)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD, const WTF::URL *))(**(_QWORD **)(v5[6] + 16) + 1368))(*(_QWORD *)(v5[6] + 16), a2) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(v5[6] + 16) + 16));
    v5 = Weak;
    if (Weak)
    {
      if (*(_QWORD *)(Weak[10] + 408))
        return (uint64_t)objc_msgSend(*(id *)(v5[10] + 40), sel_webView_shouldPaintBrokenImageForURL_, v5, WTF::URL::operator NSURL *());
      return 1;
    }
  }
  else
  {
LABEL_6:
    v5 = 0;
  }
LABEL_7:
  if (qword_1F0165D78)
    return (uint64_t)objc_msgSend(*(id *)(v5[10] + 40), sel_webView_shouldPaintBrokenImageForURL_, v5, WTF::URL::operator NSURL *());
  return 1;
}

void sub_1D803E888(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::dispatchDidReceiveResponse(uint64_t result, objc_object *a2, uint64_t a3, WebCore::ResourceResponse *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, char *, _QWORD *, uint64_t, uint64_t, Class);
  uint64_t v14;
  Class isa;
  objc_selector *v16;
  objc_object *v17;
  WebView *v18;
  objc_object *v19;

  v7 = *(_QWORD *)(result + 16);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  if (!v8)
    goto LABEL_6;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    goto LABEL_6;
  v10 = *(_QWORD **)(v9 + 8);
  if (!v10)
    goto LABEL_7;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10[6] + 16) + 1368))(*(_QWORD *)(v10[6] + 16));
  if ((result & 1) != 0)
  {
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  result = (uint64_t)objc_loadWeak((id *)(*(_QWORD *)(v10[6] + 16) + 16));
  v10 = (_QWORD *)result;
  if (!result)
  {
LABEL_7:
    v11 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1F0165D10)
      goto LABEL_8;
    goto LABEL_16;
  }
  v11 = (uint64_t *)(*(_QWORD *)(result + 80) + 240);
  if (*(_QWORD *)(*(_QWORD *)(result + 80) + 304))
  {
LABEL_8:
    result = objc_msgSend(v10, "_objectForIdentifier:", a3);
    if (!result)
      return result;
    v12 = result;
    v13 = (uint64_t (*)(uint64_t, char *, _QWORD *, uint64_t, uint64_t, Class))v11[8];
    v14 = WebCore::ResourceResponse::nsURLResponse(a4);
    if (a2)
    {
      isa = a2[445].isa;
      result = *(_QWORD *)(v10[10] + 40);
      if (!result)
        return result;
    }
    else
    {
      isa = 0;
      result = *(_QWORD *)(v10[10] + 40);
      if (!result)
        return result;
    }
    return v13(result, sel_webThreadWebView_resource_didReceiveResponse_fromDataSource_, v10, v12, v14, isa);
  }
LABEL_16:
  if (v11[13])
  {
    result = objc_msgSend(v10, "_objectForIdentifier:", a3);
    if (result)
    {
      v16 = (objc_selector *)result;
      v17 = (objc_object *)WebCore::ResourceResponse::nsURLResponse(a4);
      if (a2)
        a2 = (objc_object *)a2[445].isa;
      v18 = (WebView *)objc_msgSend(v10, "_resourceLoadDelegateForwarder");
      return CallDelegate((void (*)(void))v10, v18, (objc_object *)sel_webView_resource_didReceiveResponse_fromDataSource_, v16, v17, a2, v19);
    }
  }
  return result;
}

uint64_t WebFrameLoaderClient::willCacheResponse(uint64_t a1, objc_object *a2, uint64_t a3, objc_object *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  _QWORD *Weak;
  uint64_t v20;
  objc_selector *v21;
  WebView *v22;
  objc_object *v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_6;
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
  if (!v10)
    goto LABEL_6;
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    goto LABEL_6;
  v12 = *(_QWORD **)(v11 + 8);
  if (!v12)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12[6] + 16) + 1368))(*(_QWORD *)(v12[6] + 16)) & 1) != 0)
  {
LABEL_6:
    v12 = 0;
    goto LABEL_7;
  }
  Weak = objc_loadWeak((id *)(*(_QWORD *)(v12[6] + 16) + 16));
  v12 = Weak;
  if (!Weak)
  {
LABEL_7:
    v13 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1F0165D20)
      goto LABEL_8;
    goto LABEL_16;
  }
  v13 = (uint64_t *)(Weak[10] + 240);
  if (*(_QWORD *)(Weak[10] + 320))
  {
LABEL_8:
    v14 = objc_msgSend(v12, "_objectForIdentifier:", a3);
    if (v14)
    {
      v15 = v14;
      if (a2)
      {
        isa = a2[445].isa;
        v17 = *(_QWORD *)(v12[10] + 40);
        if (!v17)
          goto LABEL_22;
      }
      else
      {
        isa = 0;
        v17 = *(_QWORD *)(v12[10] + 40);
        if (!v17)
        {
LABEL_22:
          v18 = 0;
          goto LABEL_23;
        }
      }
      v18 = ((uint64_t (*)(uint64_t, char *, _QWORD *, uint64_t, objc_object *, Class))v13[10])(v17, sel_webThreadWebView_resource_willCacheResponse_fromDataSource_, v12, v15, a4, isa);
LABEL_23:
      v25 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v18);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
    goto LABEL_21;
  }
LABEL_16:
  if (!v13[18] || (v20 = objc_msgSend(v12, "_objectForIdentifier:", a3)) == 0)
  {
LABEL_21:
    v25 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, objc_object *))(*(_QWORD *)v25 + 16))(v25, a4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  v21 = (objc_selector *)v20;
  if (a2)
    a2 = (objc_object *)a2[445].isa;
  v22 = (WebView *)objc_msgSend(v12, "_resourceLoadDelegateForwarder");
  v24 = CallDelegate((void (*)(void))v12, v22, (objc_object *)sel_webView_resource_willCacheResponse_fromDataSource_, v21, a4, a2, v23);
  v25 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
}

void sub_1D803EC7C()
{
  objc_end_catch();
  JUMPOUT(0x1D803EC84);
}

void sub_1D803EC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::dispatchDidReceiveContentLength(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebView *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  objc_object *v14;

  v7 = *(_QWORD *)(result + 16);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  if (!v8)
    goto LABEL_6;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    goto LABEL_6;
  v10 = *(WebView **)(v9 + 8);
  if (!v10)
    goto LABEL_7;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v10->super.viewContext.invalidateGStateCallback + 2)
                                             + 1368))(*((_QWORD *)v10->super.viewContext.invalidateGStateCallback + 2));
  if ((result & 1) != 0)
  {
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  result = (uint64_t)objc_loadWeak((id *)(*((_QWORD *)v10->super.viewContext.invalidateGStateCallback + 2) + 16));
  v10 = (WebView *)result;
  if (!result)
  {
LABEL_7:
    v11 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1F0165D18)
      goto LABEL_8;
LABEL_16:
    if (v11[14])
    {
      result = -[WebView _objectForIdentifier:](v10, "_objectForIdentifier:", a3);
      if (result)
      {
        if (a2)
          v14 = *(objc_object **)(a2 + 3560);
        else
          v14 = 0;
        return (uint64_t)CallResourceLoadDelegate((void (*)(void))v11[14], v10, (objc_selector *)sel_webView_resource_didReceiveContentLength_fromDataSource_, (objc_object *)result, a4, v14);
      }
    }
    return result;
  }
  v11 = (uint64_t *)(*(_QWORD *)(result + 80) + 240);
  if (!*(_QWORD *)(*(_QWORD *)(result + 80) + 312))
    goto LABEL_16;
LABEL_8:
  result = -[WebView _objectForIdentifier:](v10, "_objectForIdentifier:", a3);
  if (result)
  {
    v12 = result;
    if (a2)
    {
      v13 = *(_QWORD *)(a2 + 3560);
      result = (uint64_t)v10->_private->resourceProgressDelegate;
      if (!result)
        return result;
      return ((uint64_t (*)(uint64_t, char *, WebView *, uint64_t, _QWORD, uint64_t))v11[9])(result, sel_webThreadWebView_resource_didReceiveContentLength_fromDataSource_, v10, v12, a4, v13);
    }
    v13 = 0;
    result = (uint64_t)v10->_private->resourceProgressDelegate;
    if (result)
      return ((uint64_t (*)(uint64_t, char *, WebView *, uint64_t, _QWORD, uint64_t))v11[9])(result, sel_webThreadWebView_resource_didReceiveContentLength_fromDataSource_, v10, v12, a4, v13);
  }
  return result;
}

void WebFrameLoaderClient::dispatchDidFinishLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *Weak;
  uint64_t v15;
  objc_selector *v16;
  objc_object *v17;
  WebView *v18;
  objc_object *v19;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
  if (!v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD **)(v7 + 8);
  if (!v8)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8[6] + 16) + 1368))(*(_QWORD *)(v8[6] + 16)) & 1) != 0)
  {
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  Weak = objc_loadWeak((id *)(*(_QWORD *)(v8[6] + 16) + 16));
  v8 = Weak;
  if (!Weak)
  {
LABEL_7:
    v9 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1F0165CE8)
      goto LABEL_8;
LABEL_16:
    if (v9[15])
    {
      v15 = objc_msgSend(v8, "_objectForIdentifier:", a3);
      if (v15)
      {
        v16 = (objc_selector *)v15;
        if (a2)
          v17 = *(objc_object **)(a2 + 3560);
        else
          v17 = 0;
        v18 = (WebView *)objc_msgSend(v8, "_resourceLoadDelegateForwarder");
        CallDelegate((void (*)(void))v8, v18, (objc_object *)sel_webView_resource_didFinishLoadingFromDataSource_, v16, v17, v19);
      }
    }
    goto LABEL_22;
  }
  v9 = (uint64_t *)(Weak[10] + 240);
  if (!*(_QWORD *)(Weak[10] + 264))
    goto LABEL_16;
LABEL_8:
  v10 = objc_msgSend(v8, "_objectForIdentifier:", a3);
  if (v10)
  {
    v11 = v10;
    if (a2)
    {
      v12 = *(_QWORD *)(a2 + 3560);
      v13 = *(_QWORD *)(v8[10] + 40);
      if (!v13)
        goto LABEL_22;
      goto LABEL_13;
    }
    v12 = 0;
    v13 = *(_QWORD *)(v8[10] + 40);
    if (v13)
LABEL_13:
      ((void (*)(uint64_t, char *, _QWORD *, uint64_t, uint64_t))v9[3])(v13, sel_webThreadWebView_resource_didFinishLoadingFromDataSource_, v8, v11, v12);
  }
LABEL_22:
  objc_msgSend(v8, "_removeObjectForIdentifier:", a3);
  WebDocumentLoaderMac::decreaseLoadCount(a2, a3);
}

void WebFrameLoaderClient::dispatchDidFailLoading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, char *, _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *Weak;
  uint64_t v19;
  objc_selector *v20;
  objc_object *v21;
  objc_object *v22;
  WebView *v23;
  objc_object *v24;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  if (!v8)
    goto LABEL_6;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    goto LABEL_6;
  v10 = *(_QWORD **)(v9 + 8);
  if (!v10)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10[6] + 16) + 1368))(*(_QWORD *)(v10[6] + 16)) & 1) != 0)
  {
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  Weak = objc_loadWeak((id *)(*(_QWORD *)(v10[6] + 16) + 16));
  v10 = Weak;
  if (!Weak)
  {
LABEL_7:
    v11 = &WebViewGetResourceLoadDelegateImplementations(WebView *)::empty;
    if (qword_1F0165CF0)
      goto LABEL_8;
LABEL_16:
    if (v11[16])
    {
      v19 = objc_msgSend(v10, "_objectForIdentifier:", a3);
      if (v19)
      {
        v20 = (objc_selector *)v19;
        v21 = (objc_object *)MEMORY[0x1D82A7BC8](a4);
        if (a2)
          v22 = *(objc_object **)(a2 + 3560);
        else
          v22 = 0;
        v23 = (WebView *)objc_msgSend(v10, "_resourceLoadDelegateForwarder");
        CallDelegate((void (*)(void))v10, v23, (objc_object *)sel_webView_resource_didFailLoadingWithError_fromDataSource_, v20, v21, v22, v24);
      }
    }
    goto LABEL_22;
  }
  v11 = (uint64_t *)(Weak[10] + 240);
  if (!*(_QWORD *)(Weak[10] + 272))
    goto LABEL_16;
LABEL_8:
  v12 = objc_msgSend(v10, "_objectForIdentifier:", a3);
  if (v12)
  {
    v13 = v12;
    v14 = (void (*)(uint64_t, char *, _QWORD *, uint64_t, uint64_t, uint64_t))v11[4];
    v15 = MEMORY[0x1D82A7BC8](a4);
    if (a2)
    {
      v16 = *(_QWORD *)(a2 + 3560);
      v17 = *(_QWORD *)(v10[10] + 40);
      if (!v17)
        goto LABEL_22;
      goto LABEL_13;
    }
    v16 = 0;
    v17 = *(_QWORD *)(v10[10] + 40);
    if (v17)
LABEL_13:
      v14(v17, sel_webThreadWebView_resource_didFailLoadingWithError_fromDataSource_, v10, v13, v15, v16);
  }
LABEL_22:
  objc_msgSend(v10, "_removeObjectForIdentifier:", a3);
  WebDocumentLoaderMac::decreaseLoadCount(a2, a3);
}

void (*WebFrameLoaderClient::dispatchDidDispatchOnloadEvents(WebFrameLoaderClient *this))(void)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebView *v6;
  void (*result)(void);
  WebView *Weak;

  v2 = *((_QWORD *)this + 2);
  if (!v2
    || (v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8)) == 0
    || (v4 = *(_QWORD *)(v3 + 24)) == 0
    || (v5 = *(_QWORD *)(v4 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16)) & 1) != 0)
  {
    v6 = 0;
    goto LABEL_7;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16) + 16));
  v6 = Weak;
  if (!Weak)
  {
LABEL_7:
    result = (void (*)(void))qword_1F0165DA8;
    if (!qword_1F0165DA8)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, v6, (objc_selector *)sel_webView_didHandleOnloadEventsForFrame_, *((objc_object **)this + 2));
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didHandleOnloadEventsForFrameFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, v6, (objc_selector *)sel_webView_didHandleOnloadEventsForFrame_, *((objc_object **)this + 2));
  return result;
}

void (*WebFrameLoaderClient::dispatchDidReceiveServerRedirectForProvisionalLoad(WebFrameLoaderClient *this))(void)
{
  const __CFString *v2;
  const void **v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebView *v9;
  void (*result)(void);
  WebView *Weak;

  if (!*(_QWORD *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 8) + 280)
                                                                                                + 96)
                                                                                    + 872)))
  {
    v3 = (const void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64);
    v2 = &stru_1E9D6EC48;
LABEL_14:
    CFRetain(v2);
    v4 = *v3;
    *v3 = v2;
    if (!v4)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
  v3 = (const void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64);
  if (v2)
    goto LABEL_14;
  v4 = *v3;
  *v3 = 0;
  if (v4)
LABEL_4:
    CFRelease(v4);
LABEL_5:
  v5 = *((_QWORD *)this + 2);
  if (!v5
    || (v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8)) == 0
    || (v7 = *(_QWORD *)(v6 + 24)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16)) & 1) != 0)
  {
    v9 = 0;
    goto LABEL_11;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16) + 16));
  v9 = Weak;
  if (!Weak)
  {
LABEL_11:
    result = (void (*)(void))qword_1F0165DB0;
    if (!qword_1F0165DB0)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, v9, (objc_selector *)sel_webView_didReceiveServerRedirectForProvisionalLoadForFrame_, *((objc_object **)this + 2));
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didReceiveServerRedirectForProvisionalLoadForFrameFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, v9, (objc_selector *)sel_webView_didReceiveServerRedirectForProvisionalLoadForFrame_, *((objc_object **)this + 2));
  return result;
}

void (*WebFrameLoaderClient::dispatchDidCancelClientRedirect(WebFrameLoaderClient *this))(void)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebView *v6;
  void (*result)(void);
  WebView *Weak;

  v2 = *((_QWORD *)this + 2);
  if (!v2
    || (v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8)) == 0
    || (v4 = *(_QWORD *)(v3 + 24)) == 0
    || (v5 = *(_QWORD *)(v4 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16)) & 1) != 0)
  {
    v6 = 0;
    goto LABEL_7;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16) + 16));
  v6 = Weak;
  if (!Weak)
  {
LABEL_7:
    result = (void (*)(void))qword_1F0165DB8;
    if (!qword_1F0165DB8)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, v6, (objc_selector *)sel_webView_didCancelClientRedirectForFrame_, *((objc_object **)this + 2));
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didCancelClientRedirectForFrameFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, v6, (objc_selector *)sel_webView_didCancelClientRedirectForFrame_, *((objc_object **)this + 2));
  return result;
}

uint64_t WebFrameLoaderClient::dispatchWillPerformClientRedirect(uint64_t result, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebView *v9;
  uint64_t *v10;
  objc_object *v11;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  if (!v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    goto LABEL_6;
  v9 = *(WebView **)(v8 + 8);
  if (!v9)
    goto LABEL_7;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v9->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)v9->super.viewContext.invalidateGStateCallback + 2));
  if ((result & 1) != 0)
  {
LABEL_6:
    v9 = 0;
    goto LABEL_7;
  }
  result = (uint64_t)objc_loadWeak((id *)(*((_QWORD *)v9->super.viewContext.invalidateGStateCallback + 2) + 16));
  v9 = (WebView *)result;
  if (!result)
  {
LABEL_7:
    v10 = &WebViewGetFrameLoadDelegateImplementations(WebView *)::empty;
    if (!qword_1F0165DC0)
      return result;
    goto LABEL_8;
  }
  v10 = (uint64_t *)(*(_QWORD *)(result + 80) + 416);
  if (*(_QWORD *)(*(_QWORD *)(result + 80) + 480))
  {
LABEL_8:
    v11 = (objc_object *)WTF::URL::operator NSURL *();
    return (uint64_t)CallFrameLoadDelegate((void (*)(void))v10[8], v9, (objc_selector *)sel_webView_willPerformClientRedirectToURL_delay_fireDate_forFrame_, v11, a2, (objc_object *)objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", a3), *(objc_object **)(v5 + 16));
  }
  return result;
}

uint64_t WebFrameLoaderClient::dispatchDidChangeLocationWithinPage(WebFrameLoaderClient *this)
{
  uint64_t v2;
  const __CFString *v3;
  const void **v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebView *v9;
  void (*didChangeLocationWithinPageForFrameFunc)(void);
  WebView *Weak;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 296) + 736))
  {
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
    v4 = (const void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 56);
    if (!v3)
    {
      v5 = *v4;
      *v4 = 0;
      if (!v5)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v4 = (const void **)(v2 + 56);
    v3 = &stru_1E9D6EC48;
  }
  CFRetain(v3);
  v5 = *v4;
  *v4 = v3;
  if (v5)
LABEL_4:
    CFRelease(v5);
LABEL_5:
  v6 = *((_QWORD *)this + 2);
  if (!v6)
    goto LABEL_10;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
  if (!v7)
    goto LABEL_10;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    goto LABEL_10;
  v9 = *(WebView **)(v8 + 8);
  if (!v9)
    goto LABEL_11;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v9->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)v9->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0)
  {
    Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)v9->super.viewContext.invalidateGStateCallback + 2) + 16));
    v9 = Weak;
    if (Weak)
    {
      didChangeLocationWithinPageForFrameFunc = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didChangeLocationWithinPageForFrameFunc;
      if (!didChangeLocationWithinPageForFrameFunc)
        return objc_msgSend(-[WebView _UIKitDelegateForwarder](v9, "_UIKitDelegateForwarder"), "webView:didChangeLocationWithinPageForFrame:", v9, *((_QWORD *)this + 2));
      goto LABEL_12;
    }
  }
  else
  {
LABEL_10:
    v9 = 0;
  }
LABEL_11:
  didChangeLocationWithinPageForFrameFunc = (void (*)(void))qword_1F0165DC8;
  if (qword_1F0165DC8)
LABEL_12:
    CallFrameLoadDelegate(didChangeLocationWithinPageForFrameFunc, v9, (objc_selector *)sel_webView_didChangeLocationWithinPageForFrame_, *((objc_object **)this + 2));
  return objc_msgSend(-[WebView _UIKitDelegateForwarder](v9, "_UIKitDelegateForwarder"), "webView:didChangeLocationWithinPageForFrame:", v9, *((_QWORD *)this + 2));
}

void (*WebFrameLoaderClient::dispatchDidPushStateWithinPage(WebFrameLoaderClient *this))(void)
{
  uint64_t v2;
  const __CFString *v3;
  const void **v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebView *v10;
  void (*result)(void);
  WebView *Weak;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 296) + 736))
  {
    v4 = (const void **)(v2 + 56);
    v3 = &stru_1E9D6EC48;
LABEL_14:
    CFRetain(v3);
    v5 = *v4;
    *v4 = v3;
    if (!v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  v4 = (const void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 56);
  if (v3)
    goto LABEL_14;
  v5 = *v4;
  *v4 = 0;
  if (v5)
LABEL_4:
    CFRelease(v5);
LABEL_5:
  v6 = *((_QWORD *)this + 2);
  if (!v6
    || (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8)) == 0
    || (v8 = *(_QWORD *)(v7 + 24)) == 0
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16)) & 1) != 0)
  {
    v10 = 0;
    goto LABEL_11;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16) + 16));
  v10 = Weak;
  if (!Weak)
  {
LABEL_11:
    result = (void (*)(void))qword_1F0165DD0;
    if (!qword_1F0165DD0)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didPushStateWithinPageForFrame_, *((objc_object **)this + 2));
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didPushStateWithinPageForFrameFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didPushStateWithinPageForFrame_, *((objc_object **)this + 2));
  return result;
}

void (*WebFrameLoaderClient::dispatchDidReplaceStateWithinPage(WebFrameLoaderClient *this))(void)
{
  uint64_t v2;
  const __CFString *v3;
  const void **v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebView *v10;
  void (*result)(void);
  WebView *Weak;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 296) + 736))
  {
    v4 = (const void **)(v2 + 56);
    v3 = &stru_1E9D6EC48;
LABEL_14:
    CFRetain(v3);
    v5 = *v4;
    *v4 = v3;
    if (!v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  v4 = (const void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 56);
  if (v3)
    goto LABEL_14;
  v5 = *v4;
  *v4 = 0;
  if (v5)
LABEL_4:
    CFRelease(v5);
LABEL_5:
  v6 = *((_QWORD *)this + 2);
  if (!v6
    || (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8)) == 0
    || (v8 = *(_QWORD *)(v7 + 24)) == 0
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16)) & 1) != 0)
  {
    v10 = 0;
    goto LABEL_11;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16) + 16));
  v10 = Weak;
  if (!Weak)
  {
LABEL_11:
    result = (void (*)(void))qword_1F0165DD8;
    if (!qword_1F0165DD8)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didReplaceStateWithinPageForFrame_, *((objc_object **)this + 2));
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didReplaceStateWithinPageForFrameFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didReplaceStateWithinPageForFrame_, *((objc_object **)this + 2));
  return result;
}

void (*WebFrameLoaderClient::dispatchDidPopStateWithinPage(WebFrameLoaderClient *this))(void)
{
  uint64_t v2;
  const __CFString *v3;
  const void **v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebView *v10;
  void (*result)(void);
  WebView *Weak;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 296) + 736))
  {
    v4 = (const void **)(v2 + 56);
    v3 = &stru_1E9D6EC48;
LABEL_14:
    CFRetain(v3);
    v5 = *v4;
    *v4 = v3;
    if (!v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  v4 = (const void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 56);
  if (v3)
    goto LABEL_14;
  v5 = *v4;
  *v4 = 0;
  if (v5)
LABEL_4:
    CFRelease(v5);
LABEL_5:
  v6 = *((_QWORD *)this + 2);
  if (!v6
    || (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8)) == 0
    || (v8 = *(_QWORD *)(v7 + 24)) == 0
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16)) & 1) != 0)
  {
    v10 = 0;
    goto LABEL_11;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16) + 16));
  v10 = Weak;
  if (!Weak)
  {
LABEL_11:
    result = (void (*)(void))qword_1F0165DE0;
    if (!qword_1F0165DE0)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didPopStateWithinPageForFrame_, *((objc_object **)this + 2));
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didPopStateWithinPageForFrameFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, v10, (objc_selector *)sel_webView_didPopStateWithinPageForFrame_, *((objc_object **)this + 2));
  return result;
}

uint64_t WebFrameLoaderClient::dispatchWillClose(WebFrameLoaderClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebView *v5;
  void (*willCloseFrameFunc)(void);
  WebView *Weak;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_6;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (!v3)
    goto LABEL_6;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    goto LABEL_6;
  v5 = *(WebView **)(v4 + 8);
  if (!v5)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v5->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)v5->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0)
  {
    Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)v5->super.viewContext.invalidateGStateCallback + 2) + 16));
    v5 = Weak;
    if (Weak)
    {
      willCloseFrameFunc = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.willCloseFrameFunc;
      if (!willCloseFrameFunc)
        return objc_msgSend(-[WebView _UIKitDelegateForwarder](v5, "_UIKitDelegateForwarder"), "webView:willCloseFrame:", v5, *((_QWORD *)this + 2));
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    v5 = 0;
  }
LABEL_7:
  willCloseFrameFunc = (void (*)(void))qword_1F0165DE8;
  if (qword_1F0165DE8)
LABEL_8:
    CallFrameLoadDelegate(willCloseFrameFunc, v5, (objc_selector *)sel_webView_willCloseFrame_, *((objc_object **)this + 2));
  return objc_msgSend(-[WebView _UIKitDelegateForwarder](v5, "_UIKitDelegateForwarder"), "webView:willCloseFrame:", v5, *((_QWORD *)this + 2));
}

void (*WebFrameLoaderClient::dispatchDidStartProvisionalLoad(WebFrameLoaderClient *this))(void)
{
  const __CFString *v2;
  const void **v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebView *Weak;
  void (*result)(void);

  if (!*(_QWORD *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 8) + 280)
                                                                                                + 96)
                                                                                    + 872)))
  {
    v3 = (const void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64);
    v2 = &stru_1E9D6EC48;
LABEL_14:
    CFRetain(v2);
    v4 = *v3;
    *v3 = v2;
    if (!v4)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
  v3 = (const void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 64);
  if (v2)
    goto LABEL_14;
  v4 = *v3;
  *v3 = 0;
  if (v4)
LABEL_4:
    CFRelease(v4);
LABEL_5:
  v5 = *((_QWORD *)this + 2);
  if (!v5)
    goto LABEL_10;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
  if (!v6)
    goto LABEL_10;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
  {
    Weak = 0;
    goto LABEL_17;
  }
  Weak = *(WebView **)(v7 + 8);
  if (!Weak)
  {
LABEL_17:
    objc_msgSend(-[WebView _UIKitDelegateForwarder](Weak, "_UIKitDelegateForwarder"), "webView:didStartProvisionalLoadForFrame:", Weak, *((_QWORD *)this + 2));
    goto LABEL_11;
  }
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) != 0)
  {
LABEL_10:
    Weak = 0;
    objc_msgSend((id)objc_msgSend(0, "_UIKitDelegateForwarder"), "webView:didStartProvisionalLoadForFrame:", 0, *((_QWORD *)this + 2));
    goto LABEL_11;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  objc_msgSend(-[WebView _UIKitDelegateForwarder](Weak, "_UIKitDelegateForwarder"), "webView:didStartProvisionalLoadForFrame:", Weak, *((_QWORD *)this + 2));
  if (!Weak)
  {
LABEL_11:
    result = (void (*)(void))qword_1F0165DF0;
    if (!qword_1F0165DF0)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didStartProvisionalLoadForFrame_, *((objc_object **)this + 2));
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didStartProvisionalLoadForFrameFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didStartProvisionalLoadForFrame_, *((objc_object **)this + 2));
  return result;
}

uint64_t WebFrameLoaderClient::dispatchDidReceiveTitle(uint64_t result, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  objc_selector *v8;
  objc_object *v9;
  WebView *v10;
  objc_object *v11;
  WTF::StringImpl *v12;

  v2 = result;
  v3 = *a2;
  if (!*a2)
  {
LABEL_4:
    v4 = *(_QWORD *)(v2 + 16);
    if (!v4)
      goto LABEL_11;
    goto LABEL_7;
  }
  if (*((_DWORD *)v3 + 1) > 0x3E8u)
  {
    result = WTF::StringImpl::substring(*a2);
    v3 = v12;
    goto LABEL_4;
  }
  *(_DWORD *)v3 += 2;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
LABEL_7:
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
  if (!v5)
    goto LABEL_11;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_11;
  v7 = *(_QWORD **)(v6 + 8);
  if (!v7)
    goto LABEL_12;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7[6] + 16) + 1368))(*(_QWORD *)(v7[6] + 16));
  if ((result & 1) != 0)
    goto LABEL_11;
  result = (uint64_t)objc_loadWeak((id *)(*(_QWORD *)(v7[6] + 16) + 16));
  v7 = (_QWORD *)result;
  if (result)
  {
    if (*(_QWORD *)(*(_QWORD *)(result + 80) + 536))
      goto LABEL_13;
    goto LABEL_17;
  }
LABEL_12:
  if (qword_1F0165DF8)
  {
LABEL_13:
    if (v3)
      v8 = (objc_selector *)WTF::StringImpl::operator NSString *();
    else
      v8 = (objc_selector *)&stru_1E9D6EC48;
    v9 = *(objc_object **)(v2 + 16);
    v10 = (WebView *)objc_msgSend(v7, "_frameLoadDelegateForwarder");
    result = CallDelegate((void (*)(void))v7, v10, (objc_object *)sel_webView_didReceiveTitle_forFrame_, v8, v9, v11);
  }
LABEL_17:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, (StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

void sub_1D803FE20(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void (*WebFrameLoaderClient::dispatchDidCommitLoad(uint64_t a1))(void)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebView *Weak;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  void (*result)(void);

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    goto LABEL_6;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (!v3)
    goto LABEL_6;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    goto LABEL_6;
  Weak = *(WebView **)(v4 + 8);
  if (!Weak)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0)
    Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  else
LABEL_6:
    Weak = 0;
LABEL_7:
  -[WebView _didCommitLoadForFrame:](Weak, "_didCommitLoadForFrame:", *(_QWORD *)(a1 + 16));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7)
    CFRetain(*(CFTypeRef *)(v6 + 64));
  v8 = *(const void **)(v6 + 56);
  *(_QWORD *)(v6 + 56) = v7;
  if (v8)
    CFRelease(v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v10 = *(const void **)(v9 + 64);
  *(_QWORD *)(v9 + 64) = 0;
  if (v10)
    CFRelease(v10);
  objc_msgSend(-[WebView _UIKitDelegateForwarder](Weak, "_UIKitDelegateForwarder"), "webView:didCommitLoadForFrame:", Weak, *(_QWORD *)(a1 + 16));
  if (Weak)
  {
    result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didCommitLoadForFrameFunc;
    if (result)
      return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didCommitLoadForFrame_, *(objc_object **)(a1 + 16));
  }
  else
  {
    result = (void (*)(void))qword_1F0165E00;
    if (qword_1F0165E00)
      return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didCommitLoadForFrame_, *(objc_object **)(a1 + 16));
  }
  return result;
}

uint64_t WebFrameLoaderClient::dispatchDidFailProvisionalLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  objc_selector *v10;
  objc_object *v11;
  WebView *v12;
  objc_object *v13;
  _QWORD *Weak;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = *(const void **)(v4 + 64);
  *(_QWORD *)(v4 + 64) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_8;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
  if (!v7)
    goto LABEL_8;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    goto LABEL_8;
  v9 = *(_QWORD **)(v8 + 8);
  if (!v9)
    goto LABEL_9;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9[6] + 16) + 1368))(*(_QWORD *)(v9[6] + 16)) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(v9[6] + 16) + 16));
    v9 = Weak;
    if (Weak)
    {
      if (!*(_QWORD *)(Weak[10] + 552))
        return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 40), "webFrame:didFinishLoadWithError:", *(_QWORD *)(a1 + 16), MEMORY[0x1D82A7BC8](a2));
      goto LABEL_10;
    }
  }
  else
  {
LABEL_8:
    v9 = 0;
  }
LABEL_9:
  if (qword_1F0165E08)
  {
LABEL_10:
    v10 = (objc_selector *)MEMORY[0x1D82A7BC8](a2);
    v11 = *(objc_object **)(a1 + 16);
    v12 = (WebView *)objc_msgSend(v9, "_frameLoadDelegateForwarder");
    CallDelegate((void (*)(void))v9, v12, (objc_object *)sel_webView_didFailProvisionalLoadWithError_forFrame_, v10, v11, v13);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 40), "webFrame:didFinishLoadWithError:", *(_QWORD *)(a1 + 16), MEMORY[0x1D82A7BC8](a2));
}

uint64_t WebFrameLoaderClient::dispatchDidFailLoad(WebFrameLoaderClient *this, const WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  objc_selector *v8;
  objc_object *v9;
  WebView *v10;
  objc_object *v11;
  _QWORD *Weak;

  v4 = *((_QWORD *)this + 2);
  if (!v4)
    goto LABEL_6;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_6;
  v7 = *(_QWORD **)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7[6] + 16) + 1368))(*(_QWORD *)(v7[6] + 16)) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(v7[6] + 16) + 16));
    v7 = Weak;
    if (Weak)
    {
      if (!*(_QWORD *)(Weak[10] + 560))
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    v7 = 0;
  }
LABEL_7:
  if (qword_1F0165E10)
  {
LABEL_8:
    v8 = (objc_selector *)MEMORY[0x1D82A7BC8](a2);
    v9 = (objc_object *)*((_QWORD *)this + 2);
    v10 = (WebView *)objc_msgSend(v7, "_frameLoadDelegateForwarder");
    CallDelegate((void (*)(void))v7, v10, (objc_object *)sel_webView_didFailLoadWithError_forFrame_, v8, v9, v11);
  }
LABEL_9:
  objc_msgSend((id)objc_msgSend(v7, "_UIKitDelegateForwarder"), "webView:didFailLoadWithError:forFrame:", v7, MEMORY[0x1D82A7BC8](a2), *((_QWORD *)this + 2));
  return objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40), "webFrame:didFinishLoadWithError:", *((_QWORD *)this + 2), MEMORY[0x1D82A7BC8](a2));
}

void (*WebFrameLoaderClient::dispatchDidFinishDocumentLoad(WebFrameLoaderClient *this))(void)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebView *Weak;
  id v6;
  void (*result)(void);

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_6;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (!v3)
    goto LABEL_6;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    goto LABEL_6;
  Weak = *(WebView **)(v4 + 8);
  if (!Weak)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0)
    Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  else
LABEL_6:
    Weak = 0;
LABEL_7:
  v6 = -[WebView _webMailDelegate](Weak, "_webMailDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v6, "_webthread_webView:didFinishDocumentLoadForFrame:", Weak, *((_QWORD *)this + 2));
  if (Weak)
  {
    result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didFinishDocumentLoadForFrameFunc;
    if (result)
      return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didFinishDocumentLoadForFrame_, *((objc_object **)this + 2));
  }
  else
  {
    result = (void (*)(void))qword_1F0165E40;
    if (qword_1F0165E40)
      return (void (*)(void))CallFrameLoadDelegate(result, Weak, (objc_selector *)sel_webView_didFinishDocumentLoadForFrame_, *((objc_object **)this + 2));
  }
  return result;
}

uint64_t WebFrameLoaderClient::dispatchDidFinishLoad(WebFrameLoaderClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebView *Weak;
  id v6;
  void (*didFinishLoadForFrameFunc)(void);

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_6;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (!v3)
    goto LABEL_6;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    goto LABEL_6;
  Weak = *(WebView **)(v4 + 8);
  if (!Weak)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0)
    Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  else
LABEL_6:
    Weak = 0;
LABEL_7:
  objc_msgSend(-[WebView _UIKitDelegateForwarder](Weak, "_UIKitDelegateForwarder"), "webView:didFinishLoadForFrame:", Weak, *((_QWORD *)this + 2));
  v6 = -[WebView _webMailDelegate](Weak, "_webMailDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v6, "_webthread_webView:didFinishLoadForFrame:", Weak, *((_QWORD *)this + 2));
  if (!Weak)
  {
    didFinishLoadForFrameFunc = (void (*)(void))qword_1F0165E18;
    if (!qword_1F0165E18)
      return objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40), "webFrame:didFinishLoadWithError:");
    goto LABEL_11;
  }
  didFinishLoadForFrameFunc = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didFinishLoadForFrameFunc;
  if (didFinishLoadForFrameFunc)
LABEL_11:
    CallFrameLoadDelegate(didFinishLoadForFrameFunc, Weak, (objc_selector *)sel_webView_didFinishLoadForFrame_, *((objc_object **)this + 2));
  return objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40), "webFrame:didFinishLoadWithError:");
}

uint64_t WebFrameLoaderClient::dispatchDidReachLayoutMilestone(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebView *v7;
  uint64_t *v8;
  uint64_t (*v9)(uint64_t, char *, WebView *, _QWORD);
  void (*v10)(void);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
    goto LABEL_6;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_6;
  v7 = *(WebView **)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)v7->super.viewContext.invalidateGStateCallback + 2));
  if ((result & 1) == 0)
  {
    result = (uint64_t)objc_loadWeak((id *)(*((_QWORD *)v7->super.viewContext.invalidateGStateCallback + 2) + 16));
    v7 = (WebView *)result;
    if (result)
    {
      v8 = (uint64_t *)(*(_QWORD *)(result + 80) + 416);
      v9 = *(uint64_t (**)(uint64_t, char *, WebView *, _QWORD))(*(_QWORD *)(result + 80) + 648);
      if (!v9)
        goto LABEL_10;
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    v7 = 0;
  }
LABEL_7:
  v8 = &WebViewGetFrameLoadDelegateImplementations(WebView *)::empty;
  v9 = (uint64_t (*)(uint64_t, char *, WebView *, _QWORD))off_1F0165E68;
  if (!off_1F0165E68)
    goto LABEL_10;
LABEL_8:
  result = (uint64_t)v7->_private->frameLoadDelegate;
  if (result)
    result = v9(result, sel_webThreadWebView_didLayout_, v7, a2 & 7);
LABEL_10:
  if ((a2 & 1) == 0)
    goto LABEL_20;
  v10 = (void (*)(void))v8[20];
  if (v10)
    CallFrameLoadDelegate(v10, v7, (objc_selector *)sel_webView_didFirstLayoutInFrame_, *(objc_object **)(v3 + 16));
  objc_msgSend(-[WebView _UIKitDelegateForwarder](v7, "_UIKitDelegateForwarder"), "webView:didFirstLayoutInFrame:", v7, *(_QWORD *)(v3 + 16));
  v11 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 16), "_scrollView");
  v12 = *(_QWORD *)(v3 + 16);
  if (!v12
    || (v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8)) == 0
    || (v14 = *(_QWORD *)(v13 + 24)) == 0
    || (v15 = *(_QWORD *)(v14 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v15 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16)) & 1) != 0)
  {
    result = objc_msgSend(0, "drawsBackground");
    if (!(_DWORD)result)
      goto LABEL_20;
    goto LABEL_19;
  }
  result = objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16) + 16)), "drawsBackground");
  if ((_DWORD)result)
LABEL_19:
    result = objc_msgSend(v11, "setDrawsBackground:", 1);
LABEL_20:
  if ((a2 & 2) != 0)
  {
    v16 = (void (*)(void))v8[21];
    if (v16)
      CallFrameLoadDelegate(v16, v7, (objc_selector *)sel_webView_didFirstVisuallyNonEmptyLayoutInFrame_, *(objc_object **)(v3 + 16));
    result = -[WebView mainFrame](v7, "mainFrame");
    if (result == *(_QWORD *)(v3 + 16))
      return objc_msgSend(-[WebView _UIKitDelegateForwarder](v7, "_UIKitDelegateForwarder"), "webView:didFirstVisuallyNonEmptyLayoutInFrame:", v7, *(_QWORD *)(v3 + 16));
  }
  return result;
}

uint64_t WebFrameLoaderClient::dispatchCreatePage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id Weak;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1
    && (v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16)) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16) + 16));
  }
  else
  {
    Weak = 0;
  }
  v6 = objc_alloc_init(MEMORY[0x1E0C99D80]);
  v7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(Weak, "_UIDelegateForwarder"), "webView:createWebViewWithRequest:windowFeatures:", Weak, 0, v6), "mainFrame");
  if (!v7)
  {
    v8 = 0;
    if (!v6)
      return v8;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  if (v6)
LABEL_9:
    CFRelease(v6);
  return v8;
}

void sub_1D80406C8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::dispatchShow(WebFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  id Weak;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 24)) != 0)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (v4)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4[6] + 16) + 1368))(*(_QWORD *)(v4[6] + 16)) & 1) == 0)
      {
        Weak = objc_loadWeak((id *)(*(_QWORD *)(v4[6] + 16) + 16));
        v5 = (void *)objc_msgSend(Weak, "_UIDelegateForwarder");
        v6 = Weak;
        return objc_msgSend(v5, "webViewShow:", v6);
      }
      v4 = 0;
    }
    v5 = (void *)objc_msgSend(v4, "_UIDelegateForwarder");
    v6 = v4;
  }
  else
  {
    v5 = (void *)objc_msgSend(0, "_UIDelegateForwarder");
    v6 = 0;
  }
  return objc_msgSend(v5, "webViewShow:", v6);
}

void WebFrameLoaderClient::dispatchDecidePolicyForResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *Weak;
  void *v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  WebFramePolicyListener *v16;
  uint64_t v17;
  WebFramePolicyListener *v18;
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_6;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
  if (!v9)
    goto LABEL_6;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    goto LABEL_6;
  Weak = *(_QWORD **)(v10 + 8);
  if (!Weak)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
    Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
  else
LABEL_6:
    Weak = 0;
LABEL_7:
  v12 = (void *)objc_msgSend(Weak, "_policyDelegateForwarder");
  if (*(_QWORD *)WebCore::ResourceResponseBase::mimeType(a2))
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E9D6EC48;
  v14 = WebCore::ResourceRequest::nsURLRequest();
  v15 = *(_QWORD *)(a1 + 16);
  objc_msgSend(objc_loadWeak((id *)(a1 + 24)), "invalidate");
  v16 = [WebFramePolicyListener alloc];
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
    v17 = *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8);
  v19 = v17;
  v18 = -[WebFramePolicyListener initWithFrame:policyFunction:defaultPolicy:](v16, "initWithFrame:policyFunction:defaultPolicy:", &v19, a5, 0);
  objc_storeWeak((id *)(a1 + 24), v18);
  objc_msgSend(v12, "webView:decidePolicyForMIMEType:request:frame:decisionListener:", Weak, v13, v14, v15, v18);
  if (v18)
    CFRelease(v18);
}

void sub_1D80408E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

id WebFrameLoaderClient::setUpPolicyListener(WebFramePolicyListener **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id *v10;
  WebFramePolicyListener *v11;
  uint64_t v12;
  WebFramePolicyListener *v13;
  WebFramePolicyListener *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v10 = (id *)(a2 + 24);
  objc_msgSend(objc_loadWeak((id *)(a2 + 24)), "invalidate");
  *a1 = 0;
  if (a4)
  {
    v11 = [WebFramePolicyListener alloc];
    v12 = *(_QWORD *)(a2 + 16);
    if (v12)
      v12 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8);
    v18 = v12;
    v13 = -[WebFramePolicyListener initWithFrame:policyFunction:defaultPolicy:appLinkURL:referrerURL:](v11, "initWithFrame:policyFunction:defaultPolicy:appLinkURL:referrerURL:", &v18, a3, 2, a4, a5);
  }
  else
  {
    v14 = [WebFramePolicyListener alloc];
    v15 = *(_QWORD *)(a2 + 16);
    if (v15)
      v15 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8);
    v17 = v15;
    v13 = -[WebFramePolicyListener initWithFrame:policyFunction:defaultPolicy:](v14, "initWithFrame:policyFunction:defaultPolicy:", &v17, a3, 2);
  }
  *a1 = v13;
  return objc_storeWeak(v10, v13);
}

void sub_1D80409D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_1D80409DC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void sub_1D80409F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void WebFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *this, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *Weak;
  uint64_t v17;
  uint64_t v18;
  StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  const __CFString *v26;
  WTF::StringImpl *v27;
  StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32[5];

  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        Weak = *(_QWORD **)(v15 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) != 0)
            goto LABEL_6;
          Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
          v17 = *(_QWORD *)(a2 + 480);
          if (v17)
            goto LABEL_10;
LABEL_17:
          v18 = 0;
          goto LABEL_18;
        }
      }
      else
      {
        Weak = 0;
      }
      v17 = *(_QWORD *)(a2 + 480);
      if (v17)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
LABEL_6:
  Weak = 0;
  v17 = *(_QWORD *)(a2 + 480);
  if (!v17)
    goto LABEL_17;
LABEL_10:
  if (*(_DWORD *)(v17 + 68) || *(_BYTE *)(v17 + 16) != 1)
    goto LABEL_17;
  WebCore::ResourceRequestBase::url(this);
  v18 = WTF::URL::operator NSURL *();
  WebCore::ResourceRequestBase::httpReferrer(this);
  v20 = v32[0];
  if (!v32[0])
  {
LABEL_18:
    v22 = 0;
    goto LABEL_19;
  }
  v21 = *((_DWORD *)v32[0] + 1);
  v32[0] = 0;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::destroy(v20, v19);
    if (!v21)
      goto LABEL_18;
  }
  else
  {
    *(_DWORD *)v20 -= 2;
    if (!v21)
      goto LABEL_18;
  }
  WebCore::ResourceRequestBase::httpReferrer(this);
  MEMORY[0x1D82A38E4](v32, &v31, 0);
  v22 = WTF::URL::operator NSURL *();
  v29 = v32[0];
  v32[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v31;
  v31 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
LABEL_19:
  v23 = (void *)objc_msgSend(Weak, "_policyDelegateForwarder", v31);
  v24 = WebFrameLoaderClient::actionDictionary(a1, a2, a4);
  v25 = WebCore::ResourceRequest::nsURLRequest();
  if (*a5)
    v26 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v26 = &stru_1E9D6EC48;
  WebFrameLoaderClient::setUpPolicyListener((WebFramePolicyListener **)v32, a1, a7, v18, v22);
  v27 = v32[0];
  objc_msgSend(v23, "webView:decidePolicyForNewWindowAction:request:newFrameName:decisionListener:", Weak, v24, v25, v26, v32[0]);
  if (v27)
    CFRelease(v27);
}

void sub_1D8040C38(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WTF::URL::~URL(WTF::StringImpl **this, StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

uint64_t WebFrameLoaderClient::actionDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  __int128 v7;
  StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  void *v11;
  uint64_t v12;
  NSString *v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  WebElementDictionary *v17;
  WebElementDictionary *v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v5 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 240));
  v6 = *(WTF::StringImpl **)v5;
  if (*(_QWORD *)v5)
    *(_DWORD *)v6 += 2;
  v22 = v6;
  v7 = *(_OWORD *)(v5 + 24);
  v23 = *(_OWORD *)(v5 + 8);
  v24 = v7;
  v9 = WTF::URL::operator NSURL *();
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (void *)MEMORY[0x1E0C99E08];
  v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned __int8 *)(a2 + 868));
  v13 = WebActionNavigationTypeKey;
  v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 0);
  v15 = (void *)objc_msgSend(v11, "dictionaryWithObjectsAndKeys:", v12, v13, v14, WebActionModifierFlagsKey, v9, WebActionOriginalURLKey, 0);
  v16 = *(_OWORD *)(a2 + 464);
  v25 = *(_OWORD *)(a2 + 448);
  v26 = v16;
  if (BYTE12(v16))
  {
    v17 = [WebElementDictionary alloc];
    WebCore::EventHandler::hitTestResultAtPoint();
    v18 = -[WebElementDictionary initWithHitTestResult:](v17, "initWithHitTestResult:", &v22);
    MEMORY[0x1D82A4430](&v22);
    result = objc_msgSend(v15, "setObject:forKey:", v18, WebActionElementKey);
    if (!BYTE12(v26))
    {
      __break(1u);
      return result;
    }
    if ((_BYTE)v25)
      v20 = BYTE8(v26);
    else
      v20 = -2;
    v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", v20);
    objc_msgSend(v15, "setObject:forKey:", v21, WebActionButtonKey);
    if (v18)
      CFRelease(v18);
  }
  if (a3)
    objc_msgSend(v15, "setObject:forKey:", kit(*(WebCore::Node **)(a3 + 32)), WebActionFormKey[0]);
  return (uint64_t)v15;
}

void sub_1D8040F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  const void *v16;

  if (v16)
    CFRelease(v16);
  _Unwind_Resume(exception_object);
}

void WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *this, int a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *Weak;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  __int128 v35;
  unsigned __int8 *v36;
  StringImpl *v37;
  int8x16_t *v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  int8x16_t *v42;
  uint64_t v43;
  __int32 v44;
  __int32 v45;
  int16x8_t *v46;
  unsigned int v47;
  uint8x8_t *v48;
  uint16x8_t v49;
  unsigned int v50;
  uint16x8_t v51;
  BOOL v52;
  uint8x8_t *v53;
  unsigned int v54;
  int16x8_t *v55;
  uint16x8_t v56;
  unsigned int v57;
  uint16x8_t v58;
  BOOL v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v73;
  __int32 v74;
  uint64_t v75;
  int v76;
  int v77;
  int v79;
  __int32 v80;
  uint64_t v81;
  int v82;
  int v83;
  int v85;
  int v86;
  uint8x16_t v87;
  unsigned int v88;
  uint8x16_t v89;
  BOOL v90;
  uint16x8_t v91;
  uint16x8_t v92;
  WTF::StringImpl *v93;
  StringImpl *v94;
  WTF::StringImpl *v95;
  int v96;
  StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  unsigned int v100;
  uint16x8_t v101;
  BOOL v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  __int128 v105;
  __int128 v106;

  v15 = *(_QWORD **)(a1 + 16);
  if (!v15)
  {
    Weak = 0;
    v19 = 1;
    v20 = *(_QWORD *)(a2 + 480);
    if (!v20)
      goto LABEL_19;
    goto LABEL_18;
  }
  v16 = *(_QWORD *)(v15[1] + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 24);
    if (v17)
    {
      Weak = *(_QWORD **)(v17 + 8);
      if (Weak)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) != 0)
          goto LABEL_6;
        Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
        v15 = *(_QWORD **)(a1 + 16);
        if (!v15)
          goto LABEL_17;
LABEL_12:
        v15 = *(_QWORD **)(v15[1] + 8);
        if (v15)
        {
          if (*(_QWORD **)(v15[16] + 8) != v15)
            goto LABEL_19;
          v19 = 0;
          v20 = *(_QWORD *)(a2 + 480);
          if (!v20)
            goto LABEL_19;
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    else
    {
      Weak = 0;
    }
    v15 = *(_QWORD **)(a1 + 16);
    if (!v15)
      goto LABEL_17;
    goto LABEL_12;
  }
LABEL_6:
  Weak = 0;
  v15 = *(_QWORD **)(a1 + 16);
  if (v15)
    goto LABEL_12;
LABEL_17:
  v19 = 1;
  v20 = *(_QWORD *)(a2 + 480);
  if (!v20)
  {
LABEL_19:
    v21 = 0;
LABEL_20:
    v22 = 0;
    goto LABEL_21;
  }
LABEL_18:
  if (*(_DWORD *)(v20 + 68))
    goto LABEL_19;
  v28 = *(unsigned __int8 *)(v20 + 16);
  if (v28 != 1)
    v19 = 1;
  if ((v19 & 1) != 0)
  {
    if (v28 != 1)
      goto LABEL_19;
    goto LABEL_144;
  }
  v29 = v15[37];
  if (!v29)
    goto LABEL_144;
  v30 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v29 + 736));
  v32 = v31;
  v33 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 240));
  v34 = *(WTF::StringImpl **)v33;
  if (*(_QWORD *)v33)
    *(_DWORD *)v34 += 2;
  v104 = v34;
  v35 = *(_OWORD *)(v33 + 24);
  v105 = *(_OWORD *)(v33 + 8);
  v106 = v35;
  v36 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)&v104);
  v41 = (_DWORD)v32 == (_DWORD)v37 && v30 == v36;
  if (v30 != v36 && (_DWORD)v32 == (_DWORD)v37)
  {
    if (!(_DWORD)v32)
      goto LABEL_129;
    v42 = (int8x16_t *)((unint64_t)v37 & 0xFF00000000);
    v43 = v37;
    if ((v32 & 0xFF00000000) != 0)
    {
      if (v42)
      {
        if ((_DWORD)v37)
        {
          if (*v30 == *v36)
          {
            v39 = (_DWORD)v37 - 1;
            if ((_DWORD)v37 != 1)
            {
              v38 = (int8x16_t *)(v30 + 1);
              v42 = (int8x16_t *)(v36 + 1);
              v40 = (_DWORD)v37 - 2;
              if ((_DWORD)v37 == 2)
              {
                v44 = v38->u8[0];
                v45 = v42->u8[0];
LABEL_76:
                v41 = v44 == v45;
                goto LABEL_138;
              }
LABEL_74:
              switch(31 - __clz(v40))
              {
                case 0u:
                  goto LABEL_75;
                case 1u:
                  if (v38->u16[0] != v42->u16[0])
                    goto LABEL_137;
                  v86 = *(unsigned __int16 *)&v30[v37 - 2];
                  v85 = *(unsigned __int16 *)&v36[v37 - 2];
                  goto LABEL_133;
                case 2u:
                  if (v38->i32[0] != v42->i32[0])
                    goto LABEL_137;
                  goto LABEL_132;
                case 3u:
                  if (v38->i64[0] == v42->i64[0])
                    goto LABEL_136;
                  goto LABEL_137;
                case 4u:
                  v91 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v30[v37 - 16], *(int8x16_t *)&v36[v37 - 16]), vceqq_s8(*(int8x16_t *)(v30 + 1), *(int8x16_t *)(v36 + 1)));
                  v91.i8[0] = vminvq_u8((uint8x16_t)v91);
                  goto LABEL_158;
                default:
                  v87 = (uint8x16_t)vceqq_s8(*v38, *v42);
                  v87.i8[0] = vminvq_u8(v87);
                  if (!v87.i32[0])
                    goto LABEL_137;
                  if (v39 < 0x10)
                    goto LABEL_129;
                  v88 = v39 & 0xF;
                  do
                  {
                    v89 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v38 + v88), *(int8x16_t *)((char *)v42 + v88));
                    v89.i8[0] = vminvq_u8(v89);
                    v41 = v89.i32[0] != 0;
                    v88 += 16;
                    if (v89.i32[0])
                      v90 = v88 >= v39;
                    else
                      v90 = 1;
                  }
                  while (!v90);
                  break;
              }
              goto LABEL_138;
            }
LABEL_129:
            v41 = 1;
            goto LABEL_138;
          }
          goto LABEL_137;
        }
      }
      else if ((_DWORD)v37)
      {
        if (*(_WORD *)v36 == *v30)
        {
          v53 = (uint8x8_t *)(v30 + 1);
          v54 = (_DWORD)v37 - 1;
          v55 = (int16x8_t *)(v36 + 2);
          if (((_DWORD)v37 - 1) < 8)
          {
            if (v54 >= 4)
            {
              v67 = (v53->u32[0] | ((unint64_t)v53->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v66 = ((v67 | (v67 << 8)) & 0xFF00FF00FF00FFLL) == v55->i64[0];
              v68 = v54 & 3;
              v69 = (*(unsigned int *)((char *)v53->u32 + v68) | ((unint64_t)*(unsigned int *)((char *)v53->u32 + v68) << 16)) & 0xFFFF0000FFFFLL;
              v70 = (v69 | (v69 << 8)) & 0xFF00FF00FF00FFLL;
              v71 = *(uint64_t *)((char *)v55->i64 + 2 * v68);
              v41 = v66 && v70 == v71;
              goto LABEL_138;
            }
            if (v54 >= 2)
            {
              v79 = (v53->u16[0] | (v53->u16[0] << 8)) & 0xFF00FF;
              v80 = v55->i32[0];
              v81 = v54 & 1;
              v82 = (*(unsigned __int16 *)((char *)v53->u16 + v81) | (*(unsigned __int16 *)((char *)v53->u16 + v81) << 8)) & 0xFF00FF;
              v83 = *(__int32 *)((char *)v55->i32 + 2 * v81);
              v41 = v79 == v80 && v82 == v83;
              goto LABEL_138;
            }
            if ((_DWORD)v37 == 2)
            {
              v45 = v53->u8[0];
              v44 = v55->u16[0];
              goto LABEL_76;
            }
            goto LABEL_129;
          }
          v56 = (uint16x8_t)vceqq_s16(*v55, (int16x8_t)vmovl_u8(*v53));
          v56.i16[0] = vminvq_u16(v56);
          if (v56.i32[0])
          {
            v57 = v54 & 7;
            do
            {
              v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v55 + 2 * v57), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v53 + v57)));
              v58.i16[0] = vminvq_u16(v58);
              v41 = v58.i32[0] != 0;
              v57 += 8;
              if (v58.i32[0])
                v59 = v57 >= v54;
              else
                v59 = 1;
            }
            while (!v59);
            goto LABEL_138;
          }
        }
LABEL_137:
        v41 = 0;
        goto LABEL_138;
      }
    }
    else if (v42)
    {
      if ((_DWORD)v37)
      {
        if (*(_WORD *)v30 == *v36)
        {
          v46 = (int16x8_t *)(v30 + 2);
          v47 = (_DWORD)v37 - 1;
          v48 = (uint8x8_t *)(v36 + 1);
          if (((_DWORD)v37 - 1) < 8)
          {
            if (v47 >= 4)
            {
              v61 = (v48->u32[0] | ((unint64_t)v48->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v66 = ((v61 | (v61 << 8)) & 0xFF00FF00FF00FFLL) == v46->i64[0];
              v62 = v47 & 3;
              v63 = (*(unsigned int *)((char *)v48->u32 + v62) | ((unint64_t)*(unsigned int *)((char *)v48->u32 + v62) << 16)) & 0xFFFF0000FFFFLL;
              v64 = (v63 | (v63 << 8)) & 0xFF00FF00FF00FFLL;
              v65 = *(uint64_t *)((char *)v46->i64 + 2 * v62);
              v66 = v66 && v64 == v65;
              v41 = v66;
              goto LABEL_138;
            }
            if (v47 >= 2)
            {
              v73 = (v48->u16[0] | (v48->u16[0] << 8)) & 0xFF00FF;
              v74 = v46->i32[0];
              v75 = v47 & 1;
              v76 = (*(unsigned __int16 *)((char *)v48->u16 + v75) | (*(unsigned __int16 *)((char *)v48->u16 + v75) << 8)) & 0xFF00FF;
              v77 = *(__int32 *)((char *)v46->i32 + 2 * v75);
              v41 = v73 == v74 && v76 == v77;
              goto LABEL_138;
            }
            if ((_DWORD)v37 == 2)
            {
              v85 = v48->u8[0];
              v86 = v46->u16[0];
LABEL_133:
              v41 = v86 == v85;
              goto LABEL_138;
            }
            goto LABEL_129;
          }
          v49 = (uint16x8_t)vceqq_s16(*v46, (int16x8_t)vmovl_u8(*v48));
          v49.i16[0] = vminvq_u16(v49);
          if (v49.i32[0])
          {
            v50 = v47 & 7;
            do
            {
              v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v46 + 2 * v50), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v48 + v50)));
              v51.i16[0] = vminvq_u16(v51);
              v41 = v51.i32[0] != 0;
              v50 += 8;
              if (v51.i32[0])
                v52 = v50 >= v47;
              else
                v52 = 1;
            }
            while (!v52);
            goto LABEL_138;
          }
        }
        goto LABEL_137;
      }
    }
    else if ((_DWORD)v37)
    {
      if (*(unsigned __int16 *)v30 == *(unsigned __int16 *)v36)
      {
        v60 = (_DWORD)v37 - 1;
        if ((_DWORD)v37 != 1)
        {
          v38 = (int8x16_t *)(v30 + 2);
          v42 = (int8x16_t *)(v36 + 2);
          if ((_DWORD)v37 != 2)
          {
            switch(31 - __clz((_DWORD)v37 - 2))
            {
              case 0u:
                v44 = v38->i32[0];
                v45 = v42->i32[0];
                goto LABEL_76;
              case 1u:
                if (v38->i32[0] != v42->i32[0])
                  goto LABEL_137;
                v43 = 2 * v37;
LABEL_132:
                v86 = *(_DWORD *)&v30[v43 - 4];
                v85 = *(_DWORD *)&v36[v43 - 4];
                goto LABEL_133;
              case 2u:
                if (v38->i64[0] != v42->i64[0])
                  goto LABEL_137;
                v43 = 2 * v37;
LABEL_136:
                v41 = *(_QWORD *)&v30[v43 - 8] == *(_QWORD *)&v36[v43 - 8];
                goto LABEL_138;
              case 3u:
                v91 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v30[2 * v37 - 16], *(int16x8_t *)&v36[2 * v37 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v30 + 2), *(int16x8_t *)(v36 + 2)));
                v91.i16[0] = vminvq_u16(v91);
LABEL_158:
                v41 = v91.i32[0] != 0;
                goto LABEL_138;
              default:
                v92 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v38, *(int16x8_t *)v42);
                v92.i16[0] = vminvq_u16(v92);
                if (!v92.i32[0])
                  goto LABEL_137;
                if (v60 < 8)
                  goto LABEL_129;
                v100 = v60 & 7;
                do
                {
                  v101 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v38 + 2 * v100), *(int16x8_t *)((char *)v42 + 2 * v100));
                  v101.i16[0] = vminvq_u16(v101);
                  v41 = v101.i32[0] != 0;
                  v100 += 8;
                  if (v101.i32[0])
                    v102 = v100 >= v60;
                  else
                    v102 = 1;
                }
                while (!v102);
                break;
            }
            goto LABEL_138;
          }
LABEL_75:
          v44 = v38->u16[0];
          v45 = v42->u16[0];
          goto LABEL_76;
        }
        goto LABEL_129;
      }
      goto LABEL_137;
    }
    __break(1u);
    goto LABEL_74;
  }
LABEL_138:
  v93 = v104;
  v104 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::destroy(v93, v37);
      if (v41)
        goto LABEL_19;
      goto LABEL_144;
    }
    *(_DWORD *)v93 -= 2;
  }
  if (v41)
    goto LABEL_19;
LABEL_144:
  WebCore::ResourceRequestBase::url(this);
  v21 = WTF::URL::operator NSURL *();
  WebCore::ResourceRequestBase::httpReferrer(this);
  v95 = v104;
  if (!v104)
    goto LABEL_20;
  v96 = *((_DWORD *)v104 + 1);
  v104 = 0;
  if (*(_DWORD *)v95 == 2)
  {
    WTF::StringImpl::destroy(v95, v94);
    if (!v96)
      goto LABEL_20;
  }
  else
  {
    *(_DWORD *)v95 -= 2;
    if (!v96)
      goto LABEL_20;
  }
  WebCore::ResourceRequestBase::httpReferrer(this);
  MEMORY[0x1D82A38E4](&v104, &v103, 0);
  v22 = WTF::URL::operator NSURL *();
  v98 = v104;
  v104 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, v97);
    else
      *(_DWORD *)v98 -= 2;
  }
  v99 = v103;
  v103 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, v97);
    else
      *(_DWORD *)v99 -= 2;
  }
LABEL_21:
  v23 = (void *)objc_msgSend(Weak, "_policyDelegateForwarder", v103);
  v24 = WebFrameLoaderClient::actionDictionary(a1, a2, a5);
  v25 = WebCore::ResourceRequest::nsURLRequest();
  v26 = *(_QWORD *)(a1 + 16);
  WebFrameLoaderClient::setUpPolicyListener((WebFramePolicyListener **)&v104, a1, a11, v21, v22);
  v27 = v104;
  objc_msgSend(v23, "webView:decidePolicyForNavigationAction:request:frame:decisionListener:", Weak, v24, v25, v26, v104);
  if (v27)
    CFRelease(v27);
}

void sub_1D8041788(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id WebFrameLoaderClient::cancelPolicyCheck(id *this)
{
  id *v1;
  id result;

  v1 = this + 3;
  result = objc_loadWeak(this + 3);
  if (result)
  {
    objc_msgSend(objc_loadWeak(v1), "invalidate");
    return objc_storeWeak(v1, 0);
  }
  return result;
}

uint64_t WebFrameLoaderClient::dispatchUnableToImplementPolicy(WebFrameLoaderClient *this, const WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *Weak;

  v4 = *((_QWORD *)this + 2);
  if (!v4 || (v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8)) == 0 || (v6 = *(_QWORD *)(v5 + 24)) == 0)
  {
LABEL_6:
    Weak = 0;
    return objc_msgSend((id)objc_msgSend(Weak, "_policyDelegateForwarder"), "webView:unableToImplementPolicyWithError:frame:", Weak, MEMORY[0x1D82A7BC8](a2), *((_QWORD *)this + 2));
  }
  Weak = *(_QWORD **)(v6 + 8);
  if (Weak)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
    {
      Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
      return objc_msgSend((id)objc_msgSend(Weak, "_policyDelegateForwarder"), "webView:unableToImplementPolicyWithError:frame:", Weak, MEMORY[0x1D82A7BC8](a2), *((_QWORD *)this + 2));
    }
    goto LABEL_6;
  }
  return objc_msgSend((id)objc_msgSend(Weak, "_policyDelegateForwarder"), "webView:unableToImplementPolicyWithError:frame:", Weak, MEMORY[0x1D82A7BC8](a2), *((_QWORD *)this + 2));
}

id WebFrameLoaderClient::dispatchWillSendSubmitEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  WebCore::Node *v9;
  objc_object *FormFieldValuesDictionary;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebView *Weak;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4
    && (v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8)) != 0
    && (v6 = *(_QWORD *)(v5 + 24)) != 0
    && (v7 = *(_QWORD *)(v6 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16)) & 1) == 0)
  {
    result = (id)objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16) + 16)), "_formDelegate");
    if (!result)
      return result;
  }
  else
  {
    result = (id)objc_msgSend(0, "_formDelegate");
    if (!result)
      return result;
  }
  v9 = kit(*(WebCore::Node **)(*a2 + 32));
  FormFieldValuesDictionary = (objc_object *)makeFormFieldValuesDictionary(*a2);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11
    && (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8)) != 0
    && (v13 = *(_QWORD *)(v12 + 24)) != 0
    && (v14 = *(_QWORD *)(v13 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v14 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v14 + 48) + 16)) & 1) == 0)
  {
    Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v14 + 48) + 16) + 16));
  }
  else
  {
    Weak = 0;
  }
  return CallFormDelegate(Weak, (objc_selector *)sel_willSendSubmitEventToForm_inFrame_withValues_, (objc_object *)v9, *(objc_object **)(a1 + 16), FormFieldValuesDictionary);
}

CFTypeRef makeFormFieldValuesDictionary(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const __CFString *v6;
  const __CFString *v7;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", *(unsigned int *)(a1 + 52));
  v3 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      if (*v5)
      {
        v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
        if (!*(v5 - 1))
          goto LABEL_7;
      }
      else
      {
        v6 = &stru_1E9D6EC48;
        if (!*(v5 - 1))
        {
LABEL_7:
          v7 = &stru_1E9D6EC48;
          goto LABEL_8;
        }
      }
      v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
LABEL_8:
      objc_msgSend(v2, "setObject:forKey:", v6, v7);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  return (id)CFMakeCollectable(v2);
}

void sub_1D8041AE4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::dispatchWillSubmitForm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_object *FormFieldValuesDictionary;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebView *Weak;
  objc_object *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  objc_object *v19;
  WebCore::Node *v20;
  uint64_t v21;
  _QWORD *v22;
  id *v23;
  WebFramePolicyListener *v24;
  uint64_t v25;
  objc_object *v26;
  uint64_t result;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16)) & 1) == 0)
          {
            if (objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16) + 16)), "_formDelegate"))
              goto LABEL_7;
LABEL_28:
            v28 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          }
        }
      }
    }
  }
  if (!objc_msgSend(0, "_formDelegate"))
    goto LABEL_28;
LABEL_7:
  FormFieldValuesDictionary = (objc_object *)makeFormFieldValuesDictionary(a2);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11 || (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8)) == 0)
  {
LABEL_12:
    Weak = 0;
    v15 = *(objc_object **)(a1 + 16);
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 528);
    if (!v16)
      goto LABEL_18;
    goto LABEL_16;
  }
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13)
  {
    Weak = 0;
LABEL_15:
    v15 = *(objc_object **)(a1 + 16);
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 528);
    if (!v16)
      goto LABEL_18;
    goto LABEL_16;
  }
  Weak = *(WebView **)(v13 + 8);
  if (!Weak)
    goto LABEL_15;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)Weak->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2)) & 1) != 0)
    goto LABEL_12;
  Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)Weak->super.viewContext.invalidateGStateCallback + 2) + 16));
  v15 = *(objc_object **)(a1 + 16);
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 528);
  if (!v16)
    goto LABEL_18;
LABEL_16:
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
  {
    v18 = *(_QWORD **)(*(_QWORD *)(v17 + 280) + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v18 + 1072))(v18) & 1) == 0)
    {
      v19 = (objc_object *)v18[2];
      goto LABEL_19;
    }
  }
LABEL_18:
  v19 = 0;
LABEL_19:
  v20 = kit(*(WebCore::Node **)(a2 + 32));
  v21 = *a3;
  *a3 = 0;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v22 = &off_1E9D6B8D0;
  v22[1] = v21;
  v29 = v22;
  v23 = (id *)(a1 + 24);
  objc_msgSend(objc_loadWeak((id *)(a1 + 24)), "invalidate");
  v24 = [WebFramePolicyListener alloc];
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
    v25 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8);
  v30 = v25;
  v26 = -[WebFramePolicyListener initWithFrame:policyFunction:defaultPolicy:](v24, "initWithFrame:policyFunction:defaultPolicy:", &v30, &v29, 2);
  objc_storeWeak(v23, v26);
  CallFormDelegate(Weak, (objc_selector *)sel_frame_sourceFrame_willSubmitForm_withValues_submissionListener_, v15, v19, (objc_object *)v20, FormFieldValuesDictionary, v26);
  if (v26)
    CFRelease(v26);
  result = (uint64_t)v29;
  v29 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D8041D70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::revertToProvisionalState(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2)
{
  void *v2;

  if (a2)
    v2 = (void *)*((_QWORD *)a2 + 445);
  else
    v2 = 0;
  return objc_msgSend(v2, "_revertToProvisionalState");
}

uint64_t WebFrameLoaderClient::setMainDocumentError(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceError *a3)
{
  void *v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v3 = (void *)*((_QWORD *)a2 + 445);
    v4 = MEMORY[0x1D82A7BC8](a3);
    v5 = v3;
  }
  else
  {
    v4 = MEMORY[0x1D82A7BC8](a3);
    v5 = 0;
  }
  return objc_msgSend(v5, "_setMainDocumentError:", v4);
}

uint64_t WebFrameLoaderClient::setMainFrameDocumentReady(WebFrameLoaderClient *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id Weak;
  uint64_t v8;

  v3 = *((_QWORD *)this + 2);
  if (v3
    && (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16)) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16) + 16));
    v8 = a2;
  }
  else
  {
    Weak = 0;
    v8 = a2;
  }
  return objc_msgSend(Weak, "setMainFrameDocumentReady:", v8);
}

uint64_t WebFrameLoaderClient::startDownload(uint64_t a1, WebCore::ResourceRequestBase *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *Weak;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3 || (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 24)) == 0)
  {
LABEL_6:
    Weak = 0;
    goto LABEL_7;
  }
  Weak = *(_QWORD **)(v5 + 8);
  if (Weak)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
    {
      Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_7:
  WebCore::ResourceRequestBase::url(this);
  return objc_msgSend(Weak, "_downloadURL:", WTF::URL::operator NSURL *());
}

WebCore::LocalFrameView *WebFrameLoaderClient::didReplaceMultipartContent(WebFrameLoaderClient *this)
{
  WebCore::LocalFrameView *result;

  result = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 8) + 288);
  if (result)
    return (WebCore::LocalFrameView *)WebCore::LocalFrameView::didReplaceMultipartContent(result);
  return result;
}

void WebFrameLoaderClient::committedLoad(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::SharedBuffer *a3)
{
  void *v3;
  CFTypeRef cf;

  if (a2)
    v3 = (void *)*((_QWORD *)a2 + 445);
  else
    v3 = 0;
  WebCore::SharedBuffer::createNSData(a3);
  objc_msgSend(v3, "_receivedData:", cf);
  if (cf)
    CFRelease(cf);
}

void sub_1D8041FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::finishedLoading(WebFrameLoaderClient *this, WebCore::DocumentLoader *a2)
{
  void *v2;

  if (a2)
    v2 = (void *)*((_QWORD *)a2 + 445);
  else
    v2 = 0;
  return objc_msgSend(v2, "_finishedLoading");
}

void WebFrameLoaderClient::updateGlobalHistory(WebFrameLoaderClient *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *Weak;
  _QWORD *v5;
  WTF *v6;
  const WTF::StringImpl **v7;
  const WTF::StringImpl *v8;
  StringImpl *v9;
  char v10;
  WebHistory *v11;
  uint64_t v12;
  const __CFString *v13;
  WebNavigationData *v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  _BOOL8 v20;
  WTF::StringImpl *v21;
  const __CFString *v22;
  StringImpl *v23;
  objc_object *v24;
  objc_selector *v25;
  const __CFString *v26;
  WTF::StringImpl *v27;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 8);
  if (!v2)
    goto LABEL_5;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    goto LABEL_5;
  Weak = *(_QWORD **)(v3 + 8);
  if (!Weak)
    goto LABEL_6;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
    Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
  else
LABEL_5:
    Weak = 0;
LABEL_6:
  v5 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 8) + 280) + 88);
  v6 = (WTF *)WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)v5);
  v7 = (const WTF::StringImpl **)WTF::aboutBlankURL(v6);
  v10 = WTF::equal(v27, *v7, v8);
  if (!v27)
    goto LABEL_9;
  if (*(_DWORD *)v27 != 2)
  {
    *(_DWORD *)v27 -= 2;
LABEL_9:
    if ((v10 & 1) != 0)
      return;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v27, v9);
  if ((v10 & 1) != 0)
    return;
LABEL_12:
  if (!objc_msgSend(Weak, "historyDelegate"))
  {
    v11 = +[WebHistory optionalSharedHistory](WebHistory, "optionalSharedHistory");
    WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)v5);
    v12 = WTF::URL::operator NSURL *();
    if (v5[201])
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E9D6EC48;
    if (*(_QWORD *)WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(v5 + 84)))
      v26 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v26 = &stru_1E9D6EC48;
    -[WebHistory _visitedURL:withTitle:method:wasFailure:](v11, "_visitedURL:withTitle:method:wasFailure:", v12, v13, v26, WebCore::DocumentLoader::urlForHistoryReflectsFailure((WebCore::DocumentLoader *)v5));
    return;
  }
  if (Weak)
  {
    if (!*(_QWORD *)(Weak[10] + 688))
      return;
  }
  else if (!WebViewGetHistoryDelegateImplementations(WebView *)::empty)
  {
    return;
  }
  v14 = [WebNavigationData alloc];
  if (!*(_QWORD *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v5 + 109)))
  {
    v15 = &stru_1E9D6EC48;
    if (v5[201])
      goto LABEL_22;
LABEL_24:
    v16 = 0;
    goto LABEL_25;
  }
  v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
  if (!v5[201])
    goto LABEL_24;
LABEL_22:
  v16 = WTF::StringImpl::operator NSString *();
LABEL_25:
  v17 = WebCore::ResourceRequest::nsURLRequest();
  v18 = WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v5 + 159));
  v19 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  if (!v5[45])
    v19 = 0;
  v20 = v19 != 0;
  v21 = (WTF::StringImpl *)v5[340];
  if (v21)
  {
    *(_DWORD *)v21 += 2;
    v22 = (const __CFString *)WTF::StringImpl::operator NSString *();
  }
  else
  {
    v22 = &stru_1E9D6EC48;
  }
  v25 = -[WebNavigationData initWithURLString:title:originalRequest:response:hasSubstituteData:clientRedirectSource:](v14, "initWithURLString:title:originalRequest:response:hasSubstituteData:clientRedirectSource:", v15, v16, v17, v18, v20, v22);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v23);
    else
      *(_DWORD *)v21 -= 2;
  }
  CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_didNavigateWithNavigationData_inFrame_, v25, *((objc_object **)this + 2), v24);
  if (v25)
    CFRelease(v25);
}

void sub_1D80422F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
  {
    CFRelease(v10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8042370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
      JUMPOUT(0x1D804238CLL);
    JUMPOUT(0x1D8042364);
  }
  JUMPOUT(0x1D8042368);
}

void WebFrameLoaderClient::updateGlobalHistoryRedirectLinks(WebFrameLoaderClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *Weak;
  StringImpl *v6;
  uint64_t *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  int v10;
  objc_selector *v11;
  StringImpl *v12;
  objc_object *v13;
  WTF::StringImpl *v14;
  int v15;
  WebHistory *v16;
  WTF::StringImpl *v17;
  const __CFString *v18;
  uint64_t v19;
  StringImpl *v20;
  WebHistoryItem *v21;
  objc_object *v22;
  StringImpl *v23;
  StringImpl *v24;
  int v25;
  StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  objc_selector *v29;
  WebHistory *v30;
  WTF::StringImpl *v31;
  const __CFString *v32;
  objc_object *v33;
  WTF::StringImpl *v34;
  objc_object *v35;
  StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  StringImpl *v39;
  WebHistoryItem *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43[5];

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        Weak = *(_QWORD **)(v4 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
          {
            Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
            if (!objc_msgSend(Weak, "historyDelegate"))
              goto LABEL_7;
            goto LABEL_10;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weak = 0;
      }
      if (!objc_msgSend(Weak, "historyDelegate"))
        goto LABEL_7;
      goto LABEL_10;
    }
  }
LABEL_6:
  Weak = 0;
  if (!objc_msgSend(0, "historyDelegate"))
  {
LABEL_7:
    v7 = 0;
    goto LABEL_13;
  }
LABEL_10:
  if (Weak)
    v7 = (uint64_t *)(Weak[10] + 688);
  else
    v7 = &WebViewGetHistoryDelegateImplementations(WebView *)::empty;
LABEL_13:
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 8) + 280) + 88);
  v9 = (WTF::StringImpl *)v8[340];
  if (!v9)
    goto LABEL_40;
  v10 = *(_DWORD *)v9;
  *(_DWORD *)v9 += 2;
  if (v10)
  {
    *(_DWORD *)v9 = v10;
    if (v7)
    {
LABEL_16:
      if (!v7[1])
        goto LABEL_40;
      v11 = *(objc_selector **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 56);
      WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)v8);
      v14 = v43[0];
      if (v43[0])
      {
        v15 = *(_DWORD *)v43[0];
        *(_DWORD *)v43[0] += 2;
        v43[0] = 0;
        if (v15)
          *(_DWORD *)v14 = v15;
        else
          WTF::StringImpl::destroy(v14, v12);
        v22 = (objc_object *)WTF::StringImpl::operator NSString *();
      }
      else
      {
        v22 = (objc_object *)&stru_1E9D6EC48;
      }
      CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_didPerformClientRedirectFromURL_toURL_inFrame_, v11, v22, *((objc_object **)this + 2), v13);
      goto LABEL_37;
    }
  }
  else
  {
    WTF::StringImpl::destroy(v9, v6);
    if (v7)
      goto LABEL_16;
  }
  v16 = +[WebHistory optionalSharedHistory](WebHistory, "optionalSharedHistory");
  v17 = (WTF::StringImpl *)v8[340];
  if (v17)
  {
    *(_DWORD *)v17 += 2;
    v18 = (const __CFString *)WTF::StringImpl::operator NSString *();
  }
  else
  {
    v18 = &stru_1E9D6EC48;
  }
  v19 = -[WebHistory _itemForURLString:](v16, "_itemForURLString:", v18);
  v21 = (WebHistoryItem *)v19;
  if (!v17)
    goto LABEL_26;
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
LABEL_26:
    if (!v19)
      goto LABEL_40;
    goto LABEL_32;
  }
  WTF::StringImpl::destroy(v17, v20);
  if (!v21)
    goto LABEL_40;
LABEL_32:
  WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)v8);
  v14 = v43[0];
  if (v43[0])
  {
    v25 = *(_DWORD *)v43[0];
    *(_DWORD *)v43[0] += 2;
    v42 = v14;
    v43[0] = 0;
    if (v25)
      *(_DWORD *)v14 = v25;
    else
      WTF::StringImpl::destroy(v14, v24);
  }
  else
  {
    v42 = 0;
  }
  addRedirectURL(v21, (StringImpl *)&v42);
LABEL_37:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v23);
      WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v43, (uint64_t)v8);
      v27 = v43[0];
      if (!v43[0])
        return;
      goto LABEL_41;
    }
    *(_DWORD *)v14 -= 2;
  }
LABEL_40:
  WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v43, (uint64_t)v8);
  v27 = v43[0];
  if (!v43[0])
    return;
LABEL_41:
  if (*(_DWORD *)v27 != 2)
  {
    *(_DWORD *)v27 -= 2;
    if (v7)
      goto LABEL_43;
LABEL_47:
    v30 = +[WebHistory optionalSharedHistory](WebHistory, "optionalSharedHistory", v42);
    WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v43, (uint64_t)v8);
    v31 = v43[0];
    if (v43[0])
      v32 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v32 = &stru_1E9D6EC48;
    v38 = -[WebHistory _itemForURLString:](v30, "_itemForURLString:", v32);
    v40 = (WebHistoryItem *)v38;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v39);
        if (!v40)
          return;
        goto LABEL_70;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (!v38)
      return;
LABEL_70:
    v41 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 109));
    if (v41)
      *(_DWORD *)v41 += 2;
    v43[0] = v41;
    addRedirectURL(v40, (StringImpl *)v43);
    if (v41)
    {
      if (*(_DWORD *)v41 != 2)
      {
        *(_DWORD *)v41 -= 2;
        return;
      }
      v37 = v41;
      goto LABEL_76;
    }
    return;
  }
  WTF::StringImpl::destroy(v27, v26);
  if (!v7)
    goto LABEL_47;
LABEL_43:
  if (v7[2])
  {
    WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v43, (uint64_t)v8);
    v28 = v43[0];
    if (v43[0])
      v29 = (objc_selector *)WTF::StringImpl::operator NSString *();
    else
      v29 = (objc_selector *)&stru_1E9D6EC48;
    v34 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 109));
    if (v34)
    {
      *(_DWORD *)v34 += 2;
      v35 = (objc_object *)WTF::StringImpl::operator NSString *();
    }
    else
    {
      v35 = (objc_object *)&stru_1E9D6EC48;
    }
    CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_didPerformServerRedirectFromURL_toURL_inFrame_, v29, v35, *((objc_object **)this + 2), v33);
    if (!v34)
    {
LABEL_57:
      if (!v28)
        return;
      goto LABEL_60;
    }
    if (*(_DWORD *)v34 != 2)
    {
      *(_DWORD *)v34 -= 2;
      goto LABEL_57;
    }
    WTF::StringImpl::destroy(v34, v36);
    if (v28)
    {
LABEL_60:
      if (*(_DWORD *)v28 != 2)
      {
        *(_DWORD *)v28 -= 2;
        return;
      }
      v37 = v28;
LABEL_76:
      WTF::StringImpl::destroy(v37, v36);
    }
  }
}

void sub_1D8042828(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8042874(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      if (!v3)
        goto LABEL_9;
      goto LABEL_10;
    }
    *(_DWORD *)v2 -= 2;
  }
  if (!v3)
LABEL_9:
    JUMPOUT(0x1D8042864);
LABEL_10:
  JUMPOUT(0x1D80428C8);
}

void sub_1D80428AC()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1D8042864);
  JUMPOUT(0x1D80428C8);
}

void sub_1D80428B8(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v2 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1D8042864);
}

void addRedirectURL(WebHistoryItem *a1, StringImpl *a2)
{
  _QWORD *v4;
  WebHistoryItemPrivate *v5;
  WTF *value;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  void *v17;
  void *v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (!a1->_private->_redirectURLs.__ptr_.__value_)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = 0;
    v4[1] = 0;
    v5 = a1->_private;
    value = (WTF *)v5->_redirectURLs.__ptr_.__value_;
    v5->_redirectURLs.__ptr_.__value_ = v4;
    if (value)
    {
      v7 = *((unsigned int *)value + 3);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)value;
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)value;
      if (*(_QWORD *)value)
      {
        *(_QWORD *)value = 0;
        *((_DWORD *)value + 2) = 0;
        WTF::fastFree(v11, a2);
      }
      WTF::fastFree(value, a2);
    }
  }
  v12 = a1->_private->_redirectURLs.__ptr_.__value_;
  v13 = v12[3];
  if ((_DWORD)v13)
  {
    if ((_DWORD)v13 != 1)
    {
      v14 = (WTF::StringImpl **)(*(_QWORD *)v12 + 8);
      v15 = 8 * v13 - 8;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  else
  {
    if (!v12[2])
    {
      v17 = *(void **)v12;
      v18 = (void *)WTF::fastMalloc((WTF *)0x80);
      v12[2] = 16;
      *(_QWORD *)v12 = v18;
      memcpy(v18, v17, 8 * v13);
      if (v17)
      {
        if (*(void **)v12 == v17)
        {
          *(_QWORD *)v12 = 0;
          v12[2] = 0;
        }
        WTF::fastFree((WTF *)v17, a2);
      }
    }
    if (*(_QWORD *)v12)
      bzero((void *)(*(_QWORD *)v12 + 8 * v12[3]), 8 - 8 * v12[3]);
  }
  v12[3] = 1;
  v19 = (WTF::StringImpl ***)a1->_private->_redirectURLs.__ptr_.__value_;
  if (*((_DWORD *)v19 + 3))
  {
    v20 = *v19;
    v21 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v21 += 2;
    v22 = *v20;
    *v20 = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, a2);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

WTF::StringImpl *WebCore::DocumentLoader::serverRedirectSourceForHistory(WebCore::DocumentLoader *this, uint64_t a2)
{
  const WTF::StringImpl **v4;
  const WTF::StringImpl *v5;
  StringImpl *v6;
  WTF *v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *result;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)a2);
  v4 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 872));
  if ((WTF::equal(v13, *v4, v5) & 1) != 0
    || (v7 = (WTF *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 872)),
        v8 = (const WTF::StringImpl **)WTF::aboutBlankURL(v7),
        WTF::equal(*(WTF **)v7, *v8, v9))
    || (WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)a2), !v12))
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    v11 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    *(_QWORD *)this = v12;
    if (v11)
      *(_DWORD *)v12 = v11;
    else
      WTF::StringImpl::destroy(v12, v6);
  }
  result = v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

void sub_1D8042BCC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::shouldGoToHistoryItem(WebFrameLoaderClient *this, WebCore::HistoryItem *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *Weak;

  v3 = *((_QWORD *)this + 2);
  if (!v3 || (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 24)) == 0)
  {
LABEL_6:
    Weak = 0;
    return objc_msgSend((id)objc_msgSend(Weak, "_policyDelegateForwarder"), "webView:shouldGoToHistoryItem:", Weak, kit(a2));
  }
  Weak = *(_QWORD **)(v5 + 8);
  if (Weak)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
    {
      Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
      return objc_msgSend((id)objc_msgSend(Weak, "_policyDelegateForwarder"), "webView:shouldGoToHistoryItem:", Weak, kit(a2));
    }
    goto LABEL_6;
  }
  return objc_msgSend((id)objc_msgSend(Weak, "_policyDelegateForwarder"), "webView:shouldGoToHistoryItem:", Weak, kit(a2));
}

void (*WebFrameLoaderClient::didDisplayInsecureContent(WebFrameLoaderClient *this))(void)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebView *v5;
  void (*result)(void);
  WebView *Weak;

  v1 = *((_QWORD *)this + 2);
  if (!v1
    || (v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8)) == 0
    || (v3 = *(_QWORD *)(v2 + 24)) == 0
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16)) & 1) != 0)
  {
    v5 = 0;
    goto LABEL_7;
  }
  Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16) + 16));
  v5 = Weak;
  if (!Weak)
  {
LABEL_7:
    result = (void (*)(void))qword_1F0165E48;
    if (!qword_1F0165E48)
      return result;
    return (void (*)(void))CallFrameLoadDelegate(result, v5, (objc_selector *)sel_webViewDidDisplayInsecureContent_);
  }
  result = (void (*)(void))Weak->_private->frameLoadDelegateImplementations.didDisplayInsecureContentFunc;
  if (result)
    return (void (*)(void))CallFrameLoadDelegate(result, v5, (objc_selector *)sel_webViewDidDisplayInsecureContent_);
  return result;
}

void WebFrameLoaderClient::didRunInsecureContent(WebFrameLoaderClient *this, WebCore::SecurityOrigin *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebView *v6;
  uint64_t *p_frameLoadDelegateImplementations;
  objc_object *v8;
  WebView *Weak;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_6;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
  if (!v4)
    goto LABEL_6;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    goto LABEL_6;
  v6 = *(WebView **)(v5 + 8);
  if (!v6)
    goto LABEL_7;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v6->super.viewContext.invalidateGStateCallback + 2) + 1368))(*((_QWORD *)v6->super.viewContext.invalidateGStateCallback + 2)) & 1) == 0)
  {
    Weak = (WebView *)objc_loadWeak((id *)(*((_QWORD *)v6->super.viewContext.invalidateGStateCallback + 2) + 16));
    v6 = Weak;
    if (Weak)
    {
      p_frameLoadDelegateImplementations = (uint64_t *)&Weak->_private->frameLoadDelegateImplementations;
      if (!Weak->_private->frameLoadDelegateImplementations.didRunInsecureContentFunc)
        return;
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    v6 = 0;
  }
LABEL_7:
  p_frameLoadDelegateImplementations = &WebViewGetFrameLoadDelegateImplementations(WebView *)::empty;
  if (!qword_1F0165E50)
    return;
LABEL_8:
  v8 = -[WebSecurityOrigin _initWithWebCoreSecurityOrigin:]([WebSecurityOrigin alloc], "_initWithWebCoreSecurityOrigin:", a2);
  CallFrameLoadDelegate((void (*)(void))p_frameLoadDelegateImplementations[26], v6, (objc_selector *)sel_webView_didRunInsecureContent_, v8);
  if (v8)
    CFRelease(v8);
}

void sub_1D8042E38(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebFrameLoaderClient::cancelledError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x1E0CB35C8];
  v3 = *MEMORY[0x1E0CB32E8];
  WebCore::ResourceRequestBase::url(a2);
  objc_msgSend(v2, "_webKitErrorWithDomain:code:URL:", v3, 4294966297, WTF::URL::operator NSURL *());
  JUMPOUT(0x1D82A44F0);
}

void WebFrameLoaderClient::blockedError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  void *v2;
  NSString *v3;

  v2 = (void *)MEMORY[0x1E0CB35C8];
  v3 = WebKitErrorDomain;
  WebCore::ResourceRequestBase::url(a2);
  objc_msgSend(v2, "_webKitErrorWithDomain:code:URL:", v3, 103, WTF::URL::operator NSURL *());
  JUMPOUT(0x1D82A44F0);
}

void WebFrameLoaderClient::blockedByContentBlockerError()
{
  __break(0xC471u);
}

void WebFrameLoaderClient::cannotShowURLError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  void *v2;
  NSString *v3;

  v2 = (void *)MEMORY[0x1E0CB35C8];
  v3 = WebKitErrorDomain;
  WebCore::ResourceRequestBase::url(a2);
  objc_msgSend(v2, "_webKitErrorWithDomain:code:URL:", v3, 101, WTF::URL::operator NSURL *());
  JUMPOUT(0x1D82A44F0);
}

void WebFrameLoaderClient::interruptedForPolicyChangeError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  void *v2;
  NSString *v3;

  v2 = (void *)MEMORY[0x1E0CB35C8];
  v3 = WebKitErrorDomain;
  WebCore::ResourceRequestBase::url(a2);
  objc_msgSend(v2, "_webKitErrorWithDomain:code:URL:", v3, 102, WTF::URL::operator NSURL *());
  JUMPOUT(0x1D82A44F0);
}

void WebFrameLoaderClient::blockedByContentFilterError(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  void *v2;
  NSString *v3;

  v2 = (void *)MEMORY[0x1E0CB35C8];
  v3 = WebKitErrorDomain;
  WebCore::ResourceRequestBase::url(a2);
  objc_msgSend(v2, "_webKitErrorWithDomain:code:URL:", v3, 105, WTF::URL::operator NSURL *());
  JUMPOUT(0x1D82A44F0);
}

void WebFrameLoaderClient::cannotShowMIMETypeError(WebFrameLoaderClient *this, const WebCore::ResourceResponse *a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x1E0CB35C8];
  v3 = *MEMORY[0x1E0CB32E8];
  WebCore::ResourceResponseBase::url(a2);
  objc_msgSend(v2, "_webKitErrorWithDomain:code:URL:", v3, 100, WTF::URL::operator NSURL *());
  JUMPOUT(0x1D82A44F0);
}

void WebFrameLoaderClient::fileDoesNotExistError(WebFrameLoaderClient *this, const WebCore::ResourceResponse *a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x1E0CB35C8];
  v3 = *MEMORY[0x1E0CB32E8];
  WebCore::ResourceResponseBase::url(a2);
  objc_msgSend(v2, "_webKitErrorWithDomain:code:URL:", v3, 4294966196, WTF::URL::operator NSURL *());
  JUMPOUT(0x1D82A44F0);
}

void WebFrameLoaderClient::httpsUpgradeRedirectLoopError()
{
  __break(0xC471u);
}

void WebFrameLoaderClient::httpNavigationWithHTTPSOnlyError()
{
  __break(0xC471u);
}

void WebFrameLoaderClient::pluginWillHandleLoadError(WebFrameLoaderClient *this, const WebCore::ResourceResponse *a2)
{
  id v3;
  uint64_t v4;
  const __CFString *v5;
  CFTypeRef v6;

  v3 = objc_alloc(MEMORY[0x1E0CB35C8]);
  WebCore::ResourceResponseBase::url(a2);
  v4 = WTF::URL::operator NSURL *();
  if (*(_QWORD *)WebCore::ResourceResponseBase::mimeType(a2))
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E9D6EC48;
  v6 = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(v3, "_initWithPluginErrorCode:contentURL:pluginPageURL:pluginName:MIMEType:", 204, v4, 0, 0, v5));
  JUMPOUT(0x1D82A44F0);
}

BOOL WebFrameLoaderClient::shouldFallBack(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1D82A8270](a2);
  if (*(_DWORD *)(a2 + 56) == -999)
    return 0;
  MEMORY[0x1D82A8270](a2);
  return *(_DWORD *)(a2 + 56) != 204;
}

BOOL WebFrameLoaderClient::canHandleRequest(WebFrameLoaderClient *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = WebCore::ResourceRequest::nsURLRequest();
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
  return +[WebView _canHandleRequest:forMainFrame:](WebView, "_canHandleRequest:forMainFrame:", v3, *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4);
}

uint64_t WebFrameLoaderClient::canShowMIMEType(WebFrameLoaderClient *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *Weak;
  const __CFString *v7;
  void *v8;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        Weak = *(_QWORD **)(v5 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) != 0)
            goto LABEL_6;
          Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
          if (!*(_QWORD *)a2)
            goto LABEL_7;
LABEL_11:
          v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
          v8 = Weak;
          return objc_msgSend(v8, "_canShowMIMEType:", v7);
        }
      }
      else
      {
        Weak = 0;
      }
      if (!*(_QWORD *)a2)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
LABEL_6:
  Weak = 0;
  if (*(_QWORD *)a2)
    goto LABEL_11;
LABEL_7:
  v7 = &stru_1E9D6EC48;
  v8 = Weak;
  return objc_msgSend(v8, "_canShowMIMEType:", v7);
}

BOOL WebFrameLoaderClient::canShowMIMETypeAsHTML(WebFrameLoaderClient *this, const WTF::String *a2)
{
  const __CFString *v2;

  if (*(_QWORD *)a2)
    v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v2 = &stru_1E9D6EC48;
  return +[WebView canShowMIMETypeAsHTML:](WebView, "canShowMIMETypeAsHTML:", v2);
}

BOOL WebFrameLoaderClient::representationExistsForURLScheme(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  CFTypeRef cf;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  WTF::StringView::createNSString((WTF::StringView *)v6);
  v3 = +[WebView _representationExistsForURLScheme:](WebView, "_representationExistsForURLScheme:", cf);
  if (cf)
    CFRelease(cf);
  return v3;
}

void sub_1D80433EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebFrameLoaderClient::generatedMIMETypeForURLScheme(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  CFTypeRef cf;
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  WTF::StringView::createNSString((WTF::StringView *)v5);
  MEMORY[0x1D82A3998](a3, +[WebView _generatedMIMETypeForURLScheme:](WebView, "_generatedMIMETypeForURLScheme:", cf));
  if (cf)
    CFRelease(cf);
}

void sub_1D804346C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::frameLoadCompleted(WebFrameLoaderClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (!v2
    || (v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8)) == 0
    || (v4 = *(_QWORD *)(v3 + 24)) == 0
    || (v5 = *(_QWORD *)(v4 + 8)) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16)) & 1) != 0)
  {
    result = objc_msgSend(0, "drawsBackground");
    if (!(_DWORD)result)
      return result;
    return objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "_scrollView"), "setDrawsBackground:", 1);
  }
  result = objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16) + 16)), "drawsBackground");
  if ((_DWORD)result)
    return objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "_scrollView"), "setDrawsBackground:", 1);
  return result;
}

uint64_t WebFrameLoaderClient::saveViewStateToItem(WebFrameLoaderClient *this, WebCore::HistoryItem *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *Weak;
  uint64_t result;
  void *v9;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        Weak = *(_QWORD **)(v6 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
          {
            Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
            if (v4 == objc_msgSend(Weak, "mainFrame"))
              return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webView:saveStateToHistoryItem:forFrame:", Weak, kit(a2), v4);
            goto LABEL_10;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weak = 0;
      }
      if (v4 == objc_msgSend(Weak, "mainFrame"))
        return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webView:saveStateToHistoryItem:forFrame:", Weak, kit(a2), v4);
      goto LABEL_10;
    }
  }
LABEL_6:
  Weak = 0;
  if (v4 == objc_msgSend(0, "mainFrame"))
    return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webView:saveStateToHistoryItem:forFrame:", Weak, kit(a2), v4);
LABEL_10:
  v9 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "documentView");
  result = objc_msgSend(v9, "superview");
  if (result)
  {
    result = objc_msgSend(v9, "conformsToProtocol:", &unk_1F018DA58);
    if ((_DWORD)result)
      return WebCore::HistoryItem::setViewState(a2, (objc_object *)objc_msgSend(v9, "viewState"));
  }
  return result;
}

uint64_t WebFrameLoaderClient::restoreViewState(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::HistoryItem *v4;
  uint64_t v5;
  _QWORD *Weak;
  void *v7;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (!v2)
  {
    v4 = *(WebCore::HistoryItem **)(MEMORY[0xB8] + 16);
    if (!v4)
      return this;
LABEL_9:
    Weak = 0;
    if (v2 != objc_msgSend(0, "mainFrame"))
      goto LABEL_13;
    return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webView:restoreStateFromHistoryItem:forFrame:force:", Weak, kit(v4), v2, 0);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  v4 = *(WebCore::HistoryItem **)(*(_QWORD *)(v3 + 184) + 16);
  if (!v4)
    return this;
  v5 = *(_QWORD *)(v3 + 24);
  if (!v5)
  {
    Weak = 0;
LABEL_12:
    if (v2 != objc_msgSend(Weak, "mainFrame"))
      goto LABEL_13;
    return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webView:restoreStateFromHistoryItem:forFrame:force:", Weak, kit(v4), v2, 0);
  }
  Weak = *(_QWORD **)(v5 + 8);
  if (!Weak)
    goto LABEL_12;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) != 0)
    goto LABEL_9;
  Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
  if (v2 == objc_msgSend(Weak, "mainFrame"))
    return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webView:restoreStateFromHistoryItem:forFrame:force:", Weak, kit(v4), v2, 0);
LABEL_13:
  v7 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 16), "documentView");
  this = objc_msgSend(v7, "conformsToProtocol:", &unk_1F018DA58);
  if ((_DWORD)this)
  {
    this = WebCore::HistoryItem::viewState(v4);
    if (this)
      return objc_msgSend(v7, "setViewState:", this);
  }
  return this;
}

uint64_t WebFrameLoaderClient::provisionalLoadStarted(WebFrameLoaderClient *this)
{
  return objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "_scrollView"), "setDrawsBackground:", 0);
}

uint64_t WebFrameLoaderClient::didFinishLoad(WebFrameLoaderClient *this)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 40), "webFrame:didFinishLoadWithError:");
}

uint64_t WebFrameLoaderClient::prepareForDataSourceReplacement(id *this)
{
  return objc_msgSend(this[2], "_dataSource");
}

void WebFrameLoaderClient::createDocumentLoader(WebFrameLoaderClient *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, const WebCore::SubstituteData *a3@<X2>, WebDocumentLoaderMac **a4@<X8>)
{
  WebDocumentLoaderMac *v8;
  WebDataSource *v9;
  id v10;
  WebDocumentLoaderMac *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebView *Weak;
  WebDocumentLoaderMac *v17;

  v8 = (WebDocumentLoaderMac *)WTF::fastMalloc((WTF *)0xE10);
  WebDocumentLoaderMac::WebDocumentLoaderMac(v8, a2, a3);
  v9 = [WebDataSource alloc];
  ++*((_DWORD *)v8 + 6);
  v17 = v8;
  v10 = -[WebDataSource _initWithDocumentLoader:](v9, "_initWithDocumentLoader:", &v17);
  v11 = v17;
  v17 = 0;
  if (!v11)
  {
LABEL_4:
    v12 = *((_QWORD *)this + 2);
    if (!v12)
      goto LABEL_11;
    goto LABEL_5;
  }
  if (*((_DWORD *)v11 + 6) != 1)
  {
    --*((_DWORD *)v11 + 6);
    goto LABEL_4;
  }
  (*(void (**)(WebDocumentLoaderMac *))(*(_QWORD *)v11 + 24))(v11);
  v12 = *((_QWORD *)this + 2);
  if (!v12)
    goto LABEL_11;
LABEL_5:
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 24);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v15 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16)) & 1) == 0)
        {
          Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16) + 16));
          goto LABEL_12;
        }
      }
    }
  }
LABEL_11:
  Weak = 0;
LABEL_12:
  WebDocumentLoaderMac::setDataSource(v8, v10, Weak);
  *a4 = v8;
  if (v10)
    CFRelease(v10);
}

void sub_1D8043900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  _DWORD *v10;

  if (a10)
  {
    if (a10[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 24))(a10);
    else
      --a10[6];
  }
  if (v10[6] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
    _Unwind_Resume(exception_object);
  }
  --v10[6];
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::setTitle(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *Weak;
  uint64_t result;
  objc_object *v11;
  objc_object *v12;
  uint64_t v13;
  WebHistoryItem *v14;
  const __CFString *v15;
  uint64_t *v16;
  objc_selector *v17;
  objc_object *v18;
  objc_selector *v19;
  objc_object *v20;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        Weak = *(_QWORD **)(v8 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) != 0)
            goto LABEL_6;
          Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
          result = objc_msgSend(Weak, "historyDelegate");
          if (!result)
            goto LABEL_7;
LABEL_14:
          if (Weak)
          {
            v16 = (uint64_t *)(Weak[10] + 688);
            if (*(_QWORD *)(Weak[10] + 720))
              goto LABEL_16;
          }
          else
          {
            v16 = &WebViewGetHistoryDelegateImplementations(WebView *)::empty;
            if (qword_1F0165EB0)
            {
LABEL_16:
              if (*a2)
              {
                v17 = (objc_selector *)WTF::StringImpl::operator NSString *();
                if (*a3)
                {
LABEL_18:
                  v18 = (objc_object *)WTF::StringImpl::operator NSString *();
                  return CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_updateHistoryTitle_forURL_inFrame_, v17, v18, *(objc_object **)(a1 + 16), v12);
                }
              }
              else
              {
                v17 = (objc_selector *)&stru_1E9D6EC48;
                if (*a3)
                  goto LABEL_18;
              }
              v18 = (objc_object *)&stru_1E9D6EC48;
              return CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_updateHistoryTitle_forURL_inFrame_, v17, v18, *(objc_object **)(a1 + 16), v12);
            }
          }
          if (!v16[3])
            return result;
          if (*a2)
          {
            v19 = (objc_selector *)WTF::StringImpl::operator NSString *();
            if (*a3)
            {
LABEL_23:
              v20 = (objc_object *)WTF::StringImpl::operator NSString *();
              return CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_updateHistoryTitle_forURL_, v19, v20, v11);
            }
          }
          else
          {
            v19 = (objc_selector *)&stru_1E9D6EC48;
            if (*a3)
              goto LABEL_23;
          }
          v20 = (objc_object *)&stru_1E9D6EC48;
          return CallDelegate((void (*)(void))Weak, *(WebView **)(Weak[10] + 120), (objc_object *)sel_webView_updateHistoryTitle_forURL_, v19, v20, v11);
        }
      }
      else
      {
        Weak = 0;
      }
      result = objc_msgSend(Weak, "historyDelegate");
      if (!result)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
LABEL_6:
  Weak = 0;
  result = objc_msgSend(0, "historyDelegate");
  if (result)
    goto LABEL_14;
LABEL_7:
  result = objc_msgSend((id)WTF::URL::operator NSURL *(), "_webkit_canonicalize");
  if (result)
  {
    v13 = result;
    result = objc_msgSend((id)objc_msgSend((id)result, "absoluteString"), "isEqualToString:", CFSTR("about:blank"));
    if ((result & 1) == 0)
    {
      v14 = -[WebHistory itemForURL:](+[WebHistory optionalSharedHistory](WebHistory, "optionalSharedHistory"), "itemForURL:", v13);
      if (*a2)
        v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v15 = &stru_1E9D6EC48;
      return -[WebHistoryItem setTitle:](v14, "setTitle:", v15);
    }
  }
  return result;
}

uint64_t WebFrameLoaderClient::savePlatformDataToCachedFrame(WebFrameLoaderClient *this, WebCore::CachedFrame *a2)
{
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (const void *)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "documentView");
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E9D6B678;
  v4[1] = v3;
  if (v3)
    CFRetain(v3);
  WebCore::CachedFrame::setCachedFramePlatformData();
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  if (v5
    && (v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16)) & 1) == 0)
  {
    return objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16) + 16)), "_stopAllPlugInsForPageCache");
  }
  else
  {
    return objc_msgSend(0, "_stopAllPlugInsForPageCache");
  }
}

void sub_1D8043CDC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D8043CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::transitionToCommittedFromCachedFrame(WebFrameLoaderClient *this, WebCore::CachedFrame *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = WebCore::CachedFrame::cachedFramePlatformData(a2);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
    v7 = *(_QWORD *)(v6 + 3560);
  else
    v7 = 0;
  objc_msgSend(*(id *)(v4 + 8), "setDataSource:", v7);
  return objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16), "_setDocumentView:", v5);
}

uint64_t WebFrameLoaderClient::didRestoreFrameHierarchyForCachedFrame(WebFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id Weak;

  v1 = *((_QWORD *)this + 2);
  if (v1
    && (v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16)) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16) + 16));
  }
  else
  {
    Weak = 0;
  }
  return objc_msgSend(Weak, "_restorePlugInsFromCache");
}

void WebFrameLoaderClient::transitionToCommittedForNewPage(uint64_t a1)
{
  void *v2;
  void *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  _BOOL4 v6;
  uint64_t v7;
  BOOL v8;
  WebHTMLView *v9;
  WebHTMLView *v10;
  uint64_t v11;
  WebCore::LocalFrameView *v12;
  uint64_t v13;
  WebCore::FocusController **v14;
  WebCore::LocalFrameView *v15;
  WebHTMLView *v16;
  WebCore::ScrollView *v17;
  WebCore::LocalFrame *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::LocalFrameView *v25;
  WebCore::ScrollView *v26;
  WTF::StringImpl *v27;
  char v28;
  uint64_t v29;
  WebCore::ScrollView *v30;

  v2 = (void *)objc_msgSend(*(id *)(a1 + 16), "_dataSource");
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "_documentLoader");
    v4 = v27;
  }
  else
  {
    v4 = 0;
    v27 = 0;
  }
  v5 = (_QWORD *)WebCore::ResourceResponseBase::mimeType((WTF::StringImpl *)((char *)v4 + 1272));
  if ((MEMORY[0x1D82A392C](*v5, "text/html", 9) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 16), "_viewClassForMIMEType:", objc_msgSend(v3, "_responseMIMEType"));
    v6 = v7 == objc_opt_class();
  }
  if (WebCore::FrameLoaderStateMachine::committingFirstRealLoad((WebCore::FrameLoaderStateMachine *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8) + 280) + 64)))
    v8 = !v6;
  else
    v8 = 1;
  if (!v8)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 16), "documentView"), "setDataSource:", v3);
    return;
  }
  if (v6)
  {
    v9 = [WebHTMLView alloc];
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 16), "bounds");
    v10 = -[WebHTMLView initWithFrame:](v9, "initWithFrame:");
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 16), "_setDocumentView:", v10);
    if (!v10)
      return;
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
      goto LABEL_15;
  }
  else
  {
    v16 = (WebHTMLView *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 16), "_makeDocumentViewForDataSource:", v3);
    if (!v16)
      return;
    v10 = v16;
    CFRetain(v16);
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
LABEL_15:
      v12 = *(WebCore::LocalFrameView **)(*(_QWORD *)(v11 + 8) + 8);
      v13 = *((_QWORD *)v12 + 3);
      if (v13)
        goto LABEL_16;
LABEL_22:
      v14 = 0;
      v15 = *(WebCore::LocalFrameView **)(*((_QWORD *)v12 + 16) + 8);
      if (v15 != v12)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  v12 = 0;
  v13 = MEMORY[0x18];
  if (!MEMORY[0x18])
    goto LABEL_22;
LABEL_16:
  v14 = *(WebCore::FocusController ***)(v13 + 8);
  v15 = *(WebCore::LocalFrameView **)(*((_QWORD *)v12 + 16) + 8);
  if (v15 != v12)
    goto LABEL_25;
LABEL_23:
  v17 = (WebCore::ScrollView *)*((_QWORD *)v12 + 36);
  if (v17)
    WebCore::ScrollView::setParentVisible(v17);
LABEL_25:
  WebCore::LocalFrame::setView();
  v27 = 0;
  WebCore::LocalFrameView::create(v12, v18);
  v19 = v30;
  ++*((_DWORD *)v30 + 2);
  v27 = v19;
  WebCore::LocalFrame::setView();
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
    else
      --*((_DWORD *)v20 + 2);
  }
  WebCore::Page::setDelegatesScaling((WebCore::Page *)v14);
  objc_msgSend(*(id *)(a1 + 16), "_updateBackgroundAndUpdatesWhileOffscreen");
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 16), "_install");
  if (v15 == v12)
  {
    WebCore::ScrollView::setDelegatedScrollingMode();
    WebCore::ScrollView::setParentVisible(v30);
  }
  -[WebHTMLView setDataSource:](v10, "setDataSource:", v3, v27);
  if (!v3
    || (objc_msgSend(v3, "_documentLoader"), !v29)
    || (MEMORY[0x1D82A3998](&v27, objc_msgSend(v3, "pageTitle")),
        v28 = 0,
        WebCore::DocumentLoader::setTitle(),
        v22 = v27,
        v27 = 0,
        !v22))
  {
LABEL_36:
    v23 = *((_QWORD *)v12 + 15);
    if (v23)
      goto LABEL_37;
    goto LABEL_39;
  }
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    goto LABEL_36;
  }
  WTF::StringImpl::destroy(v22, v21);
  v23 = *((_QWORD *)v12 + 15);
  if (v23)
  {
LABEL_37:
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
    {
      v25 = (WebCore::LocalFrameView *)*((_QWORD *)v12 + 36);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 1248))(v24);
      WebCore::LocalFrameView::setCanHaveScrollbars(v25);
    }
  }
LABEL_39:
  if (v10 == (WebHTMLView *)objc_msgSend((id)-[WebHTMLView window](v10, "window", v27), "firstResponder"))
  {
    WebCore::FocusController::setFocusedFrame();
    WebCore::FocusController::setFocused(v14[9]);
  }
  v26 = v30;
  v30 = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v26 + 8))(v26);
    else
      --*((_DWORD *)v26 + 2);
  }
  CFRelease(v10);
}

void sub_1D80441B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  CFRelease(v12);
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::didRestoreFromBackForwardCache(WebFrameLoaderClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *Weak;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        Weak = *(_QWORD **)(v4 + 8);
        if (Weak)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
          {
            Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
            result = objc_msgSend(Weak, "mainFrame");
            if (result == *((_QWORD *)this + 2))
              return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webViewDidRestoreFromPageCache:", Weak);
            return result;
          }
          goto LABEL_6;
        }
      }
      else
      {
        Weak = 0;
      }
      result = objc_msgSend(Weak, "mainFrame");
      if (result == *((_QWORD *)this + 2))
        return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webViewDidRestoreFromPageCache:", Weak);
      return result;
    }
  }
LABEL_6:
  Weak = 0;
  result = objc_msgSend(0, "mainFrame");
  if (result == *((_QWORD *)this + 2))
    return objc_msgSend((id)objc_msgSend(Weak, "_UIKitDelegateForwarder"), "webViewDidRestoreFromPageCache:", Weak);
  return result;
}

uint64_t WebFrameLoaderClient::userAgent@<X0>(uint64_t this@<X0>, const WTF::URL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v4 = *(_QWORD *)(this + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          this = (*(uint64_t (**)(_QWORD, const WTF::URL *))(**(_QWORD **)(*(_QWORD *)(v7 + 48) + 16)
                                                                     + 1368))(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16), a2);
          if ((this & 1) == 0)
          {
            this = (uint64_t)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16) + 16));
            if (this)
              return objc_msgSend((id)this, "_userAgentString");
          }
        }
      }
    }
  }
  v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v8 += 2;
  *a3 = v8;
  return this;
}

BOOL WebFrameLoaderClient::canCachePage(id *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  objc_msgSend((id)objc_msgSend(this[2], "_dataSource"), "representation");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[2] + 1) + 8) + 24)) != 0
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 16), *(_BYTE *)(v4 + 65)))
  {
    return *(_DWORD *)(v4 + 60) != 0;
  }
  else
  {
    return 0;
  }
}

void WebFrameLoaderClient::createFrame(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebFrameView *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 528);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (v7 = *(_QWORD *)(v6 + 24)) == 0 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    *a4 = 0;
    return;
  }
  v12 = objc_alloc_init(WebFrameView);
  +[WebFrame _createSubframeWithOwnerElement:page:frameName:frameView:](WebFrame, "_createSubframeWithOwnerElement:page:frameName:frameView:", a3, v8, a2, v12);
  if (v27
    && (v13 = *(_QWORD **)(*(_QWORD *)(v27 + 280) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v13 + 1072))(v13) & 1) == 0))
  {
    v14 = (void *)v13[2];
  }
  else
  {
    v14 = 0;
  }
  if (objc_msgSend(v14, "_dataSource"))
  {
    v15 = (void *)objc_msgSend(v14, "_dataSource");
    if (v15)
    {
      objc_msgSend(v15, "_documentLoader");
      v16 = v28;
    }
    else
    {
      v16 = 0;
    }
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 16), "_dataSource"), "_documentLoader");
    v18 = *(_DWORD **)(v26 + 1624);
    if (v18)
      *v18 += 2;
    v19 = *(WTF::StringImpl **)(v16 + 1624);
    *(_QWORD *)(v16 + 1624) = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v17);
        v20 = v27;
        v21 = *(_QWORD *)(v27 + 24);
        if (!v21)
          goto LABEL_22;
        goto LABEL_19;
      }
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = v27;
  v21 = *(_QWORD *)(v27 + 24);
  if (!v21)
  {
LABEL_22:
    *a4 = 0;
    v22 = (unsigned int *)(v20 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E9D6A4D8;
      v25[1] = v22;
      v29 = v25;
      WTF::ensureOnMainThread();
      if (v29)
        (*(void (**)(_QWORD *))(*v29 + 8))(v29);
    }
    goto LABEL_25;
  }
LABEL_19:
  if (!*(_QWORD *)(v21 + 8))
    goto LABEL_22;
  *a4 = v20;
LABEL_25:
  if (v12)
    CFRelease(v12);
}

void sub_1D8044700(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *WTF::Ref<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>::~Ref(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  v3 = (unsigned int *)(v2 + 8);
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v3);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E9D6A4D8;
  v7[1] = v3;
  v8 = v7;
  WTF::ensureOnMainThread();
  if (!v8)
    return a1;
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return a1;
}

void sub_1D80447B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::objectContentType(WebFrameLoaderClient *this, StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  const WTF::String *v10;
  int isSupportedImageMIMEType;
  unsigned int v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  void *v16;
  const __CFString *v17;
  int v18;
  void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id Weak;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v4 = *a3;
  if (*a3)
  {
    *(_DWORD *)v4 += 2;
    v29 = v4;
    if (*((_DWORD *)v4 + 1))
      goto LABEL_3;
  }
  else
  {
    v29 = 0;
  }
  v20 = (void *)objc_msgSend((id)objc_msgSend((id)WTF::URL::operator NSURL *(), "path"), "pathExtension");
  if (objc_msgSend(v20, "length"))
  {
    MEMORY[0x1D82A3998](&v28, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB39C0], "sharedMappings"), "MIMETypeForExtension:", v20));
    v21 = v28;
    v28 = 0;
    v29 = v21;
    if (v4)
    {
      if (*(_DWORD *)v4 != 2)
      {
        *(_DWORD *)v4 -= 2;
        if (!v21)
        {
LABEL_41:
          v23 = *((_QWORD *)this + 2);
          if (v23
            && (v24 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8)) != 0
            && (v25 = *(_QWORD *)(v24 + 24)) != 0
            && (v26 = *(_QWORD *)(v25 + 8)) != 0
            && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v26 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v26 + 48) + 16)) & 1) == 0)
          {
            Weak = objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v26 + 48) + 16) + 16));
          }
          else
          {
            Weak = 0;
          }
          if (objc_msgSend(Weak, "_pluginForExtension:", v20, v28))
          {
            v14 = 3;
            v29 = 0;
            v4 = v21;
            if (!v21)
              return v14;
LABEL_24:
            v18 = *(_DWORD *)v4 - 2;
            if (*(_DWORD *)v4 != 2)
            {
LABEL_25:
              *(_DWORD *)v4 = v18;
              return v14;
            }
            goto LABEL_54;
          }
          v4 = v21;
          goto LABEL_51;
        }
LABEL_38:
        if (*((_DWORD *)v21 + 1))
        {
LABEL_3:
          v5 = *((_QWORD *)this + 2);
          if (!v5)
            goto LABEL_8;
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
          if (!v6)
            goto LABEL_8;
          v7 = *(_QWORD *)(v6 + 24);
          if (!v7)
            goto LABEL_8;
          v8 = *(_QWORD **)(v7 + 8);
          if (!v8)
            goto LABEL_9;
          if (((*(uint64_t (**)(_QWORD, StringImpl *))(**(_QWORD **)(v8[6] + 16) + 1368))(*(_QWORD *)(v8[6] + 16), a2) & 1) == 0)v8 = objc_loadWeak((id *)(*(_QWORD *)(v8[6] + 16) + 16));
          else
LABEL_8:
            v8 = 0;
LABEL_9:
          v9 = objc_msgSend(v8, "_pluginForMIMEType:", WTF::StringImpl::operator NSString *());
          isSupportedImageMIMEType = WebCore::MIMETypeRegistry::isSupportedImageMIMEType((WebCore::MIMETypeRegistry *)&v29, v10);
          if (v9)
            v12 = 3;
          else
            v12 = 0;
          if (v9)
            v13 = 1;
          else
            v13 = isSupportedImageMIMEType;
          if (isSupportedImageMIMEType)
            v14 = 1;
          else
            v14 = v12;
          v15 = v29;
          if ((v13 & 1) == 0)
          {
            v16 = *(void **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16);
            if (v29)
              v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
            else
              v17 = &stru_1E9D6EC48;
            v14 = 2 * (objc_msgSend(v16, "_viewClassForMIMEType:", v17, v28) != 0);
            v15 = v29;
          }
          v29 = 0;
          v4 = v15;
          if (!v15)
            return v14;
          goto LABEL_24;
        }
        goto LABEL_41;
      }
      WTF::StringImpl::destroy(v4, a2);
      v22 = v28;
      v28 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, a2);
          if (!v21)
            goto LABEL_41;
          goto LABEL_38;
        }
        *(_DWORD *)v22 -= 2;
      }
    }
    if (!v21)
      goto LABEL_41;
    goto LABEL_38;
  }
LABEL_51:
  if (v4)
  {
    if (!*((_DWORD *)v4 + 1))
    {
      v29 = 0;
      v14 = 2;
      v18 = *(_DWORD *)v4 - 2;
      if (*(_DWORD *)v4 != 2)
        goto LABEL_25;
LABEL_54:
      WTF::StringImpl::destroy(v4, a2);
      return v14;
    }
    goto LABEL_3;
  }
  return 2;
}

uint64_t sub_1D8044A9C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WTF::StringImpl *v16;
  int v17;
  NSException *v19;

  v17 = (int)a2;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v17 != 1)
    _Unwind_Resume(exception_object);
  v19 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v19);
  objc_end_catch();
  return 0;
}

void WebFrameLoaderClient::createPlugin(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *Weak;
  const WTF::String *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  const __CFString *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned __int16 *v43;
  WTF::StringImpl *v44;
  StringImpl *v45;
  WTF::StringImpl *v46;
  StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore::Widget *v51;
  const __CFString *v52;
  objc_selector *v53;
  void *v54;
  objc_object *v55;
  WebView *v56;
  objc_object *v57;
  StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WebCore::Widget **v61;
  void *v62;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;
  CFTypeRef cf;
  __int128 v67;
  __int128 v68;

  v60 = a6;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8);
  if (!v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(v11 + 24);
  if (!v12)
    goto LABEL_5;
  Weak = *(_QWORD **)(v12 + 8);
  if (!Weak)
    goto LABEL_6;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16)) & 1) == 0)
    Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
  else
LABEL_5:
    Weak = 0;
LABEL_6:
  WTF::URL::operator NSURL *();
  v62 = (void *)WTF::URL::operator NSURL *();
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a3 + 12));
  v16 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v16)
  {
    v17 = *(WTF **)a3;
    v18 = 8 * v16;
    do
    {
      WTF::makeNSArrayElement(v17, v14);
      if (cf)
      {
        objc_msgSend(v15, "addObject:");
        v19 = cf;
        cf = 0;
        CFRelease(v19);
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  if (*(_QWORD *)a5 && *(_DWORD *)(*(_QWORD *)a5 + 4))
  {
    v20 = WTF::StringImpl::operator NSString *();
    if (*(_QWORD *)a5)
      v21 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v21 = &stru_1E9D6EC48;
    v22 = (void *)objc_msgSend(Weak, "_pluginForMIMEType:", v21, v60);
  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = (void *)objc_msgSend((id)objc_msgSend(v62, "path", v60), "pathExtension");
  if (v22)
  {
    v24 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v24)
      goto LABEL_23;
LABEL_20:
    if ((*(_BYTE *)(v24 + 45) & 2) != 0)
      goto LABEL_108;
    if (*(_BYTE *)(v24 + 46) == 7)
      WebCore::RenderEmbeddedObject::setPluginUnavailabilityReason();
LABEL_23:
    v25 = 0;
    v26 = 203;
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_24;
LABEL_78:
    v51 = (WebCore::Widget *)WTF::fastMalloc((WTF *)0x40);
    WebCore::Widget::Widget(v51, 0);
    *(_QWORD *)v51 = off_1E9D6B6A0;
    *v61 = v51;
    if (!v15)
      return;
    goto LABEL_97;
  }
  v27 = v23;
  if (objc_msgSend(v23, "length"))
  {
    v22 = (void *)objc_msgSend(Weak, "_pluginForExtension:", v27);
    if (v22)
    {
      MEMORY[0x1D82A3998](&cf, v27);
      v29 = (void *)objc_msgSend(v22, "MIMETypeForExtension:", &cf);
      v30 = (WTF::StringImpl *)cf;
      cf = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v28);
        else
          *(_DWORD *)v30 -= 2;
      }
      if (objc_msgSend(v29, "length"))
        v20 = (uint64_t)v29;
      v24 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v24)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  else
  {
    v22 = 0;
  }
  v26 = 200;
  v25 = 1;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_78;
LABEL_24:
  if (Weak)
  {
    if (!*(_QWORD *)(Weak[10] + 392))
      goto LABEL_96;
  }
  else if (!qword_1F0165D68)
  {
    goto LABEL_96;
  }
  v31 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v31)
  {
LABEL_65:
    v44 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_67;
    goto LABEL_66;
  }
  v32 = 0;
  v33 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112);
  v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108);
  v35 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
  v36 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103);
  v37 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105);
  v38 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110);
  v39 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
  v40 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97);
  v41 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101);
  while (1)
  {
    v42 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v32);
    if (!v42 || *(_DWORD *)(v42 + 4) != 11)
      goto LABEL_35;
    v43 = *(unsigned __int16 **)(v42 + 8);
    if ((*(_BYTE *)(v42 + 16) & 4) != 0)
      break;
    if (v33 == (unsigned __int16)(*v43 | (32 * (*v43 - 65 < 0x1A)))
      && v34 == (unsigned __int16)(v43[1] | (32 * (v43[1] - 65 < 0x1A)))
      && v35 == (unsigned __int16)(v43[2] | (32 * (v43[2] - 65 < 0x1A)))
      && v36 == (unsigned __int16)(v43[3] | (32 * (v43[3] - 65 < 0x1A)))
      && v37 == (unsigned __int16)(v43[4] | (32 * (v43[4] - 65 < 0x1A)))
      && v38 == (unsigned __int16)(v43[5] | (32 * (v43[5] - 65 < 0x1A)))
      && v39 == (unsigned __int16)(v43[6] | (32 * (v43[6] - 65 < 0x1A)))
      && v33 == (unsigned __int16)(v43[7] | (32 * (v43[7] - 65 < 0x1A)))
      && v40 == (unsigned __int16)(v43[8] | (32 * (v43[8] - 65 < 0x1A)))
      && v36 == (unsigned __int16)(v43[9] | (32 * (v43[9] - 65 < 0x1A)))
      && v41 == (unsigned __int16)(v43[10] | (32 * (v43[10] - 65 < 0x1A))))
    {
      goto LABEL_62;
    }
LABEL_35:
    if (v31 == ++v32)
      goto LABEL_65;
  }
  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v43) != v33
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 1)) != v34
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 2)) != v35
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 3)) != v36
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 4)) != v37
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 5)) != v38
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 6)) != v39
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 7)) != v33
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 8)) != v40
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 9)) != v36
    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v43 + 10)) != v41)
  {
    goto LABEL_35;
  }
LABEL_62:
  if (v32 >= *(unsigned int *)(a4 + 12))
  {
LABEL_108:
    __break(0xC471u);
    JUMPOUT(0x1D8045264);
  }
  v44 = *(WTF::StringImpl **)(*(_QWORD *)a4 + 8 * v32);
  if (v44)
LABEL_66:
    *(_DWORD *)v44 += 2;
LABEL_67:
  v63 = v44;
  WebCore::Document::completeURL();
  v46 = v63;
  v63 = 0;
  if (!v46)
    goto LABEL_70;
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::destroy(v46, v45);
    if ((v67 & 2) != 0)
      goto LABEL_85;
  }
  else
  {
    *(_DWORD *)v46 -= 2;
LABEL_70:
    if ((v67 & 2) != 0)
    {
LABEL_85:
      if ((v25 & 1) != 0)
        goto LABEL_86;
LABEL_88:
      if (*(_QWORD *)objc_msgSend(v22, "pluginInfo"))
        v52 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v52 = &stru_1E9D6EC48;
      goto LABEL_91;
    }
  }
  v63 = 0;
  WTF::URL::invalidate((WTF::URL *)&v63);
  v48 = v63;
  v63 = 0;
  v49 = (WTF::StringImpl *)cf;
  cf = v48;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::destroy(v49, v47);
      v50 = v63;
    }
    else
    {
      v50 = 0;
      *(_DWORD *)v49 -= 2;
    }
  }
  else
  {
    v50 = 0;
  }
  v67 = v64;
  LODWORD(v64) = v64 & 0xFFFFFFFE;
  v68 = v65;
  v63 = 0;
  if (!v50)
    goto LABEL_85;
  if (*(_DWORD *)v50 != 2)
  {
    *(_DWORD *)v50 -= 2;
    goto LABEL_85;
  }
  WTF::StringImpl::destroy(v50, v47);
  if ((v25 & 1) == 0)
    goto LABEL_88;
LABEL_86:
  v52 = 0;
LABEL_91:
  v53 = (objc_selector *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "_initWithPluginErrorCode:contentURL:pluginPageURL:pluginName:MIMEType:", v26, v62, WTF::URL::operator NSURL *(), v52, v20);
  v54 = (void *)objc_msgSend(*(id *)(a1 + 16), "webView");
  v55 = (objc_object *)objc_msgSend(*(id *)(a1 + 16), "_dataSource");
  v56 = (WebView *)objc_msgSend(v54, "_resourceLoadDelegateForwarder");
  CallDelegate((void (*)(void))v54, v56, (objc_object *)sel_webView_plugInFailedWithError_dataSource_, v53, v55, v57);
  if (v53)
    CFRelease(v53);
  v59 = (WTF::StringImpl *)cf;
  cf = 0;
  if (!v59)
  {
LABEL_96:
    *v61 = 0;
    if (!v15)
      return;
    goto LABEL_97;
  }
  if (*(_DWORD *)v59 != 2)
  {
    *(_DWORD *)v59 -= 2;
    goto LABEL_96;
  }
  WTF::StringImpl::destroy(v59, v58);
  *v61 = 0;
  if (v15)
LABEL_97:
    CFRelease(v15);
}

void sub_1D8045278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  const void *v16;
  NSException *v19;

  if (v16)
    CFRelease(v16);
  if (a2 == 1)
  {
    v19 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v19);
    objc_end_catch();
    *a9 = 0;
    JUMPOUT(0x1D80451ECLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80453C8()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1D8045394);
  JUMPOUT(0x1D804538CLL);
}

uint64_t WebFrameLoaderClient::redirectDataToPlugin(id *this, WebCore::Widget *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(this[2], "_dataSource"), "representation"), "_redirectDataToManualLoader:forPluginView:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(this[2], "frameView"), "documentView"), "_pluginController"), WebCore::Widget::platformWidget(a2));
}

void sub_1D804543C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSException *v14;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v14 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v14);
  objc_end_catch();
}

uint64_t WebFrameLoaderClient::sendH2Ping(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *v6[2];
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  __int16 v17;
  CFTypeRef cf;
  char v19;
  char v20;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  int v31;
  __int16 v32;
  CFTypeRef v33;
  char v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  WebCore::createInternalError();
  v21 = *(_OWORD *)v6;
  v22 = v7;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  v28 = v13;
  v29 = v14;
  v30 = v15;
  v32 = v17;
  v31 = v16;
  v33 = cf;
  v34 = v19;
  v35 = 1;
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 16))(v4, &v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v35 != -1)
    ((void (*)(char *, __int128 *))off_1E9D6B848[v35])(&v20, &v21);
  return 0;
}

void sub_1D804569C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  StringImpl *v22;
  uint64_t v23;
  StringImpl *v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v23 = *(unsigned int *)(v20 - 48);
  if ((_DWORD)v23 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E9D6B848[v23])(v20 - 129, v20 - 128);
  *(_DWORD *)(v20 - 48) = -1;
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&a19, v22);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&a9, v24);
  _Unwind_Resume(a1);
}

WTF::AtomStringImpl *WebFrameLoaderClient::overrideMediaType@<X0>(WebFrameLoaderClient *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *result;
  const __CFString *v8;
  _DWORD *v9;
  _DWORD *v10;

  v3 = *((_QWORD *)this + 2);
  if (v3
    && (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16)) & 1) == 0)
  {
    result = (WTF::AtomStringImpl *)objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16) + 16)), "mediaStyle");
    if (result)
      goto LABEL_7;
  }
  else
  {
    result = (WTF::AtomStringImpl *)objc_msgSend(0, "mediaStyle");
    if (result)
    {
LABEL_7:
      result = (WTF::AtomStringImpl *)WTF::AtomStringImpl::add(result, v8);
      v9 = v10;
LABEL_8:
      *a2 = v9;
      return result;
    }
  }
  v9 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (!*MEMORY[0x1E0CBF2F8])
    goto LABEL_8;
  *v9 += 2;
  *a2 = v9;
  return result;
}

WebCore::DOMWrapperWorld *WebFrameLoaderClient::dispatchDidClearWindowObjectInWorld(WebFrameLoaderClient *this, WebCore::DOMWrapperWorld *a2)
{
  WebFrameLoaderClient *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebView *v7;
  uint64_t *v8;
  objc_selector *v9;
  objc_object *v10;
  WebView *v11;
  objc_object *v12;
  WebCore::DOMWrapperWorld *result;
  WebCore::ScriptController *v14;
  char *v15;
  uint64_t v16;
  objc_selector *v17;
  objc_object *v18;
  WebView *v19;
  objc_object *v20;
  void (*v21)(void);
  objc_object *v22;

  v3 = this;
  v4 = *((_QWORD *)this + 2);
  if (!v4)
    goto LABEL_6;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
  if (!v5)
    goto LABEL_6;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_6;
  v7 = *(WebView **)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  this = (WebFrameLoaderClient *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v7->super.viewContext.invalidateGStateCallback
                                                                      + 2)
                                                                   + 1368))(*((_QWORD *)v7->super.viewContext.invalidateGStateCallback
                                                                              + 2));
  if ((this & 1) == 0)
  {
    this = (WebFrameLoaderClient *)objc_loadWeak((id *)(*((_QWORD *)v7->super.viewContext.invalidateGStateCallback + 2)
                                                      + 16));
    v7 = (WebView *)this;
    if (this)
    {
      v8 = (uint64_t *)(*((_QWORD *)this + 10) + 416);
      if (*(_QWORD *)(*((_QWORD *)this + 10) + 432))
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  else
  {
LABEL_6:
    v7 = 0;
  }
LABEL_7:
  v8 = &WebViewGetFrameLoadDelegateImplementations(WebView *)::empty;
  if (qword_1F0165D90)
  {
LABEL_8:
    v9 = (objc_selector *)*((_QWORD *)v3 + 2);
    v10 = +[WebScriptWorld findOrCreateWorld:](WebScriptWorld, "findOrCreateWorld:", a2);
    v11 = -[WebView _frameLoadDelegateForwarder](v7, "_frameLoadDelegateForwarder");
    return (WebCore::DOMWrapperWorld *)CallDelegate((void (*)(void))v7, v11, (objc_object *)sel_webView_didClearWindowObjectForFrame_inScriptWorld_, v9, v10, v12);
  }
LABEL_11:
  result = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(this);
  if (result != a2)
    return result;
  v14 = *(WebCore::ScriptController **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 2) + 8) + 8) + 304);
  if (*v8)
  {
    v15 = sel_webView_didCreateJavaScriptContext_forFrame_;
    v16 = WebCore::ScriptController::javaScriptContext(v14);
  }
  else
  {
    if (!v8[1])
    {
      v21 = (void (*)(void))v8[4];
      if (v21)
      {
        v22 = (objc_object *)WebCore::ScriptController::windowScriptObject(v14);
        CallFrameLoadDelegate(v21, v7, (objc_selector *)sel_webView_windowScriptObjectAvailable_, v22);
      }
      goto LABEL_18;
    }
    v15 = sel_webView_didClearWindowObject_forFrame_;
    v16 = WebCore::ScriptController::windowScriptObject(v14);
  }
  v17 = (objc_selector *)v16;
  v18 = (objc_object *)*((_QWORD *)v3 + 2);
  v19 = -[WebView _frameLoadDelegateForwarder](v7, "_frameLoadDelegateForwarder");
  CallDelegate((void (*)(void))v7, v19, (objc_object *)v15, v17, v18, v20);
LABEL_18:
  result = -[WebView scriptDebugDelegate](v7, "scriptDebugDelegate");
  if (result)
  {
    objc_msgSend(*((id *)v3 + 2), "_detachScriptDebugger");
    return (WebCore::DOMWrapperWorld *)objc_msgSend(*((id *)v3 + 2), "_attachScriptDebugger");
  }
  return result;
}

uint64_t WebFrameLoaderClient::createNetworkingContext@<X0>(WebFrameLoaderClient *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
  else
    v4 = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = &unk_1E9D6B9A8;
  if (!v4)
  {
    result = 0;
    goto LABEL_13;
  }
  result = *(_QWORD *)(v4 + 16);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v4;
    v8 = *(unsigned int **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = result;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (v10)
      {
        result = *(_QWORD *)(v4 + 16);
        if (!result)
          goto LABEL_13;
      }
      else
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v7);
        result = *(_QWORD *)(v4 + 16);
        if (!result)
          goto LABEL_13;
      }
    }
  }
  do
    v11 = __ldaxr((unsigned int *)result);
  while (__stlxr(v11 + 1, (unsigned int *)result));
LABEL_13:
  *(_QWORD *)(v5 + 16) = result;
  *(_QWORD *)v5 = &unk_1E9D6DC28;
  *a2 = v5;
  return result;
}

void sub_1D8045A78(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebFrameLoaderClient::shouldLoadMediaElementURL(WebFrameLoaderClient *this, const WTF::URL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *Weak;
  uint64_t v7;
  void *v8;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_6;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
  if (!v4)
    goto LABEL_6;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
  {
    Weak = 0;
LABEL_9:
    v7 = objc_msgSend(Weak, "policyDelegate");
    if (!v7)
      return 1;
    goto LABEL_10;
  }
  Weak = *(_QWORD **)(v5 + 8);
  if (!Weak)
    goto LABEL_9;
  if (((*(uint64_t (**)(_QWORD, const WTF::URL *))(**(_QWORD **)(Weak[6] + 16) + 1368))(*(_QWORD *)(Weak[6] + 16), a2) & 1) == 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(Weak[6] + 16) + 16));
    v7 = objc_msgSend(Weak, "policyDelegate");
    if (!v7)
      return 1;
    goto LABEL_10;
  }
LABEL_6:
  Weak = 0;
  v7 = objc_msgSend(0, "policyDelegate");
  if (!v7)
    return 1;
LABEL_10:
  v8 = (void *)v7;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v8, "webView:shouldLoadMediaURL:inFrame:", Weak, WTF::URL::operator NSURL *(), *((_QWORD *)this + 2));
  return 1;
}

const void *WebFrameLoaderClient::createPreviewLoaderClient@<X0>(id *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, uint64_t *a4@<X8>)
{
  const void *result;
  NSString *v9;
  WebCore *v10;
  NSString *v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  const __CFString *v15;
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  result = (const void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(this[2], "webView"), "preferences"), "quickLookDocumentSavingEnabled");
  if (!(_DWORD)result)
    goto LABEL_9;
  if (!*(_QWORD *)a2)
  {
    result = (const void *)WebCore::createTemporaryFileForQuickLook((WebCore *)&stru_1E9D6EC48, v9);
    if (result)
      goto LABEL_4;
LABEL_9:
    v13 = 0;
    goto LABEL_12;
  }
  v10 = (WebCore *)WTF::StringImpl::operator NSString *();
  result = (const void *)WebCore::createTemporaryFileForQuickLook(v10, v11);
  if (!result)
    goto LABEL_9;
LABEL_4:
  v12 = result;
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E9D6B868;
  *(_QWORD *)(v13 + 16) = v12;
  CFRetain(v12);
  v14 = (const void *)objc_msgSend(MEMORY[0x1E0CB3608], "fileHandleForWritingAtPath:", v12);
  *(_QWORD *)(v13 + 24) = v14;
  if (v14)
    CFRetain(v14);
  v17[0] = v12;
  v16[0] = WebQuickLookFileNameKey;
  v16[1] = WebQuickLookUTIKey;
  if (*(_QWORD *)a3)
    v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v15 = &stru_1E9D6EC48;
  v17[1] = v15;
  objc_msgSend((id)objc_msgSend(this[2], "provisionalDataSource"), "_setQuickLookContent:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
  result = (const void *)objc_msgSend((id)objc_msgSend(this[2], "provisionalDataSource"), "_setQuickLookPreviewLoaderClient:", v13);
LABEL_12:
  *a4 = v13;
  return result;
}

void sub_1D8045CE4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D8045CF8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  const void *v4;

  v4 = (const void *)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v4)
    CFRelease(v4);
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D8045D1C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    _Unwind_Resume(exception_object);
  }
  --v1[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::contentFilterDidBlockLoad(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  __int128 *v7;
  WTF::StringImpl *v8;
  const void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  _QWORD *v18;
  uint64_t v19;
  CFTypeRef v20;
  WTF::StringImpl *v22[2];
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];
  _QWORD *v26;
  CFTypeRef cf;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8) + 280) + 24);
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v22 = v4;
  v23 = v5;
  v24 = a2[2];
  *((_DWORD *)a2 + 4) = v5 & 0xFFFFFFFE;
  v6 = v25;
  v7 = (__int128 *)*((_QWORD *)a2 + 9);
  if (!v7)
  {
    v26 = 0;
    goto LABEL_5;
  }
  if (v7 != a2 + 3)
  {
    v26 = (_QWORD *)*((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = 0;
LABEL_5:
    v8 = (WTF::StringImpl *)v4;
    goto LABEL_7;
  }
  v26 = v25;
  (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v7 + 24))(v7, v25);
  v8 = v22[0];
LABEL_7:
  v9 = (const void *)*((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = 0;
  v28 = *((_BYTE *)a2 + 88);
  cf = v9;
  v10 = *(WTF::StringImpl **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v8;
  if (!v10)
    goto LABEL_10;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_10:
    v11 = *(WTF::StringImpl **)(v3 + 40);
    *(WTF::StringImpl **)(v3 + 40) = v22[1];
    if (!v11)
      goto LABEL_16;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v10, (StringImpl *)a2);
  v11 = *(WTF::StringImpl **)(v3 + 40);
  *(WTF::StringImpl **)(v3 + 40) = v22[1];
  if (!v11)
    goto LABEL_16;
LABEL_13:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, (StringImpl *)a2);
  else
    *(_DWORD *)v11 -= 2;
LABEL_16:
  *(_OWORD *)(v3 + 48) = v23;
  *(_OWORD *)(v3 + 64) = v24;
  v12 = *(_QWORD **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = 0;
  if (v12 == (_QWORD *)(v3 + 80))
  {
    v13 = 4;
    v12 = (_QWORD *)(v3 + 80);
  }
  else
  {
    if (!v12)
      goto LABEL_21;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_21:
  if (!v26)
  {
    v16 = cf;
    cf = 0;
    v15 = *(const void **)(v3 + 112);
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 112) = v16;
    if (!v15)
      goto LABEL_32;
    goto LABEL_26;
  }
  if (v26 == v25)
  {
    *(_QWORD *)(v3 + 104) = v3 + 80;
    (*(void (**)(_QWORD *, uint64_t))(v25[0] + 24))(v25, v3 + 80);
    v20 = cf;
    cf = 0;
    v15 = *(const void **)(v3 + 112);
    *(_QWORD *)(v3 + 112) = v20;
    if (!v15)
      goto LABEL_32;
LABEL_26:
    CFRelease(v15);
    v17 = cf;
    *(_BYTE *)(v3 + 120) = v28;
    cf = 0;
    if (v17)
      CFRelease(v17);
    v18 = v26;
    if (v26 == v25)
      goto LABEL_33;
    goto LABEL_29;
  }
  *(_QWORD *)(v3 + 104) = v26;
  v14 = cf;
  v26 = 0;
  cf = 0;
  v15 = *(const void **)(v3 + 112);
  *(_QWORD *)(v3 + 112) = v14;
  if (v15)
    goto LABEL_26;
LABEL_32:
  *(_BYTE *)(v3 + 120) = v28;
  cf = 0;
  v18 = v26;
  if (v26 == v25)
  {
LABEL_33:
    v19 = 4;
    goto LABEL_34;
  }
LABEL_29:
  if (v18)
  {
    v19 = 5;
    v6 = v18;
LABEL_34:
    (*(void (**)(_QWORD *))(*v6 + 8 * v19))(v6);
  }
  return 0;
}

uint64_t WebFrameLoaderClient::prefetchDNS(WebFrameLoaderClient *this, const WTF::String *a2)
{
  return WebCore::prefetchDNS(a2, a2);
}

uint64_t WebFrameLoaderClient::getLoadDecisionForIcons(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v3 = *(_QWORD **)(result + 16);
  if (v3)
    v3 = *(_QWORD **)(v3[1] + 8);
  if ((*(_QWORD *)(v3[17] + 680) & 0x2000000000000000) != 0
    && *(_QWORD **)(v3[16] + 8) == v3
    && (result = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)(v3[35] + 88) + 872)),
        (*(_BYTE *)(result + 8) & 2) != 0)
    && (result = +[WebView _isIconLoadingEnabled](WebView, "_isIconLoadingEnabled"), (result & 1) != 0))
  {
    v4 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      v6 = *(_QWORD *)a2 + 8;
      do
      {
        v6 += 16;
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v11 = off_1E9D6B920;
        v13 = v11;
        WebCore::DocumentLoader::didGetLoadDecisionForIcon();
        result = (uint64_t)v13;
        if (v13)
          result = (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
        v5 -= 16;
      }
      while (v5);
    }
  }
  else
  {
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      v9 = *(_QWORD *)a2 + 8;
      do
      {
        v9 += 16;
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E9D6B8F8;
        v12 = v10;
        WebCore::DocumentLoader::didGetLoadDecisionForIcon();
        result = (uint64_t)v12;
        if (v12)
          result = (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
        v8 -= 16;
      }
      while (v8);
    }
  }
  return result;
}

void sub_1D804618C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80462AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80464A0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  StringImpl *v17;

  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a15, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D80465CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D8046780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8046890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80469A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8046AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D8046DA4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8047164(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8047444(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void sub_1D8047614(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80478E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
  {
    CFRelease(v10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8047B54(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _DWORD *v11;
  StringImpl *v12;

  v11 = *(_DWORD **)(v9 - 40);
  *(_QWORD *)(v9 - 40) = 0;
  if (v11)
  {
    if (v11[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 24))(v11);
    else
      --v11[6];
  }
  WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)&a9, a2);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v9 - 240), v12);
  _Unwind_Resume(a1);
}

void sub_1D8047BB4(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v2 - 240), a2);
  _Unwind_Resume(a1);
}

void sub_1D8047E8C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;

  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a12, a2);
  v16 = *(_QWORD *)(v13 - 24);
  *(_QWORD *)(v13 - 24) = 0;
  if (v16)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v16, v15);
  _Unwind_Resume(a1);
}

void sub_1D8048124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8048254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, _DWORD *a10)
{
  if (a9)
  {
    if (a9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a9 + 8))(a9);
    else
      --a9[2];
  }
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80483E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8048400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  void *v12;

  CFRelease(v10);
  if (v9)
    CFRelease(v9);
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1D80485E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  uint64_t v9;
  _DWORD *v11;

  if (a9)
  {
    if (*((_DWORD *)a9 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a9 + 8))(a9);
    else
      --*((_DWORD *)a9 + 2);
  }
  v11 = *(_DWORD **)(v9 - 24);
  *(_QWORD *)(v9 - 24) = 0;
  if (v11)
  {
    if (v11[2] != 1)
    {
      --v11[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8048714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vectorForDictationPhrasesArray@<X0>(NSArray *a1@<X0>, unsigned int *a2@<X8>)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  StringImpl *v10;
  unint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t j;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  WTF *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  uint64_t v57;

  v2 = a2;
  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  result = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
  v4 = result;
  if (result)
  {
    v42 = 0;
    v43 = v2;
    v5 = 0;
    v6 = *(_QWORD *)v52;
    v37 = (char *)&v50 + 4;
    v38 = *(_QWORD *)v52;
    v7 = 0x1E0CB3000uLL;
    do
    {
      v8 = 0;
      v39 = v4;
      do
      {
        if (*(_QWORD *)v52 != v6)
          objc_enumerationMutation(a1);
        v9 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v49 = 0;
          v50 = 0;
          if (v5 == v2[2])
          {
            v11 = WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2, v5 + 1, (unint64_t)&v49);
            v12 = (WTF *)v2[3];
            v42 = *(_QWORD *)v2;
            v13 = *(_QWORD *)v2 + 16 * (_QWORD)v12;
            *(_QWORD *)v13 = 0;
            *(_QWORD *)(v13 + 8) = 0;
            v14 = *(_QWORD *)v11;
            *(_QWORD *)v11 = 0;
            *(_QWORD *)v13 = v14;
            LODWORD(v14) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = 0;
            *(_DWORD *)(v13 + 8) = v14;
            v15 = (char *)(v11 + 12);
          }
          else
          {
            v13 = v42 + 16 * v5;
            *(_QWORD *)v13 = 0;
            *(_QWORD *)(v13 + 8) = 0;
            v12 = v49;
            v49 = 0;
            *(_QWORD *)v13 = v12;
            LODWORD(v12) = v50;
            LODWORD(v50) = 0;
            *(_DWORD *)(v13 + 8) = (_DWORD)v12;
            LODWORD(v12) = v2[3];
            v15 = v37;
          }
          v16 = *(_DWORD *)v15;
          *(_DWORD *)v15 = 0;
          *(_DWORD *)(v13 + 12) = v16;
          v17 = (_DWORD)v12 + 1;
          v2[3] = (_DWORD)v12 + 1;
          if (HIDWORD(v50))
          {
            v18 = v49;
            v19 = 8 * HIDWORD(v50);
            do
            {
              v20 = *(WTF::StringImpl **)v18;
              *(_QWORD *)v18 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v10);
                else
                  *(_DWORD *)v20 -= 2;
              }
              v18 = (WTF *)((char *)v18 + 8);
              v19 -= 8;
            }
            while (v19);
          }
          v21 = v49;
          if (v49)
          {
            v49 = 0;
            LODWORD(v50) = 0;
            WTF::fastFree(v21, v10);
          }
          v45 = 0u;
          v46 = 0u;
          v47 = 0u;
          v48 = 0u;
          v22 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v55, 16, v37);
          if (v22)
          {
            v23 = *(_QWORD *)v46;
            v41 = v8;
            v42 = *(_QWORD *)v2;
            if (v17)
            {
              v24 = *(_QWORD *)v2 + 16 * v17 - 16;
              v44 = v17;
              do
              {
                for (i = 0; i != v22; ++i)
                {
                  if (*(_QWORD *)v46 != v23)
                    objc_enumerationMutation(v9);
                  v27 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * i);
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                  {
                    v28 = v7;
                    v29 = *(unsigned int *)(v24 + 12);
                    if ((_DWORD)v29 == *(_DWORD *)(v24 + 8))
                    {
                      v30 = v29 + (v29 >> 2);
                      if (v30 >= 0x10)
                        v31 = v30 + 1;
                      else
                        v31 = 16;
                      if (v31 <= v29 + 1)
                        v32 = v29 + 1;
                      else
                        v32 = v31;
                      if (v32 >> 29)
                        goto LABEL_56;
                      v33 = *(void **)v24;
                      v34 = (void *)WTF::fastMalloc((WTF *)(8 * v32));
                      *(_DWORD *)(v24 + 8) = v32;
                      *(_QWORD *)v24 = v34;
                      memcpy(v34, v33, 8 * v29);
                      if (v33)
                      {
                        if (*(void **)v24 == v33)
                        {
                          *(_QWORD *)v24 = 0;
                          *(_DWORD *)(v24 + 8) = 0;
                        }
                        WTF::fastFree((WTF *)v33, v35);
                      }
                      v26 = *(_QWORD *)v24 + 8 * *(unsigned int *)(v24 + 12);
                    }
                    else
                    {
                      v26 = *(_QWORD *)v24 + 8 * v29;
                    }
                    MEMORY[0x1D82A3998](v26, v27);
                    ++*(_DWORD *)(v24 + 12);
                    v2 = v43;
                    v7 = v28;
                    v17 = v44;
                  }
                }
                v22 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
              }
              while (v22);
              v5 = v17;
              v6 = v38;
            }
            else
            {
              do
              {
                for (j = 0; j != v22; ++j)
                {
                  if (*(_QWORD *)v46 != v23)
                    objc_enumerationMutation(v9);
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                  {
LABEL_56:
                    __break(0xC471u);
                    JUMPOUT(0x1D8048CB4);
                  }
                }
                v22 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
              }
              while (v22);
              v5 = 0;
            }
            v4 = v39;
            v8 = v41;
          }
          else
          {
            v5 = v17;
            v4 = v39;
          }
        }
        ++v8;
      }
      while (v8 != v4);
      result = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_1D8048CC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  WTF *v28;

  v28 = *(WTF **)v26;
  if (*(_QWORD *)v26)
  {
    *(_QWORD *)v26 = 0;
    *(_DWORD *)(v26 + 8) = 0;
    WTF::fastFree(v28, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((unsigned int *)v4 + 3);
      if ((_DWORD)v6)
      {
        v7 = *(WTF::StringImpl ***)v4;
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v10 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v10, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1D8049084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1D8049204(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80493B8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  const void *v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      CFRelease(v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a14 -= 2;
  }
  CFRelease(v14);
  _Unwind_Resume(a1);
}

uint64_t createUniqueWebDataURL(void)
{
  const __CFAllocator *v0;
  const __CFUUID *v1;
  CFStringRef v2;
  uint64_t v3;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  v2 = CFUUIDCreateString(v0, v1);
  v3 = objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("applewebdata://%@"), v2));
  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  return v3;
}

void sub_1D80494EC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D80496A4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D80499DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8049DE8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8049F78(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  va_list va;

  va_start(va, a3);
  v5 = *(WTF::StringImpl **)(v3 - 24);
  *(_QWORD *)(v3 - 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v5 -= 2;
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
    _Unwind_Resume(a1);
  }
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1D804A1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1D804A1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1D804A1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1D804A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1D804A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1D804A21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

void sub_1D804A4A4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12)
{
  const void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 != 2)
    {
      *(_DWORD *)a10 -= 2;
      MEMORY[0x1D82A33C8](&a12);
      CFRelease(v12);
      _Unwind_Resume(a1);
    }
    WTF::StringImpl::destroy(a10, a2);
    MEMORY[0x1D82A33C8](&a12);
    CFRelease(v12);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1D82A33C8](&a12);
  CFRelease(v12);
  _Unwind_Resume(a1);
}

void sub_1D804A534(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D804A548(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D804A604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804A71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1D804AAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D804AAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a11);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D804AE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v4 - 64));
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804AEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1D804AEBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D804AEE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D804AEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v7 - 64));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804AF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804AFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

void sub_1D804B0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1D804B1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804B2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  StringImpl *v13;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D804B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  WTF *v18;
  void *v20;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a16);
  if (v18)
  {
    a17 = 0;
    a18 = 0;
    WTF::fastFree(v18, v20);
  }
  _Unwind_Resume(a1);
}

void sub_1D804B65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804B7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804B870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::MutableStyleProperties *a10)
{
  if (a10)
    WebCore::MutableStyleProperties::deref(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D804B930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref((WebCore::MutableStyleProperties **)va);
  _Unwind_Resume(a1);
}

WebCore::MutableStyleProperties **WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(WebCore::MutableStyleProperties **a1)
{
  WebCore::MutableStyleProperties *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebCore::MutableStyleProperties::~MutableStyleProperties(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1D804BA94(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D804BB58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D804BB6C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF *v10;
  void *v12;

  WTF::fastFree(v10, a2);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&a10, v12);
  _Unwind_Resume(a1);
}

void sub_1D804BB88(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D804BCE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D804BFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1D804BFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  std::optional<WebCore::SimpleRange>::~optional(&a22);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v22 - 80));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v22 - 56));
  _Unwind_Resume(a1);
}

void sub_1D804BFFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 80));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1D804C120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v2 - 56));
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804C14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804C258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804C35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_1D804C378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1D804C60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_1D804C628(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1D804C63C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1D804CC34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D804CDCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D804CFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804D134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804D22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804D398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D804D3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D804D4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804D56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804D748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  _Unwind_Resume(a1);
}

void sub_1D804D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a14);
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

void sub_1D804D904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

void sub_1D804D918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v14 - 40));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a14);
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

void sub_1D804DA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804DBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804DC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804DE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  uint64_t v7;
  uint64_t v8;
  va_list va2;
  uint64_t v10;
  va_list va3;
  uint64_t v12;
  uint64_t v13;
  va_list va4;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va5;

  va_start(va5, a2);
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  v7 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v8 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v10 = va_arg(va4, _QWORD);
  v12 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v13 = va_arg(va5, _QWORD);
  v15 = va_arg(va5, _QWORD);
  v16 = va_arg(va5, _QWORD);
  v17 = va_arg(va5, _QWORD);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va5);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va3);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_1D804DF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D804E1F8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  void *v14;
  StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;

  WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(&a9, a2);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&a10, v14);
  v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *(WTF::StringImpl **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(WTF **)(v5 + 8);
          if (v7)
          {
            *(_QWORD *)(v5 + 8) = 0;
            *(_DWORD *)(v5 + 16) = 0;
            WTF::fastFree(v7, a2);
            v6 = *(WTF::StringImpl **)v5;
          }
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 32 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 2);
      if ((v6 & 0x8000000000000) != 0)
      {
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      v4 = (WTF *)((char *)v4 + 32);
    }
    while (v4 != v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1D804E5E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D804E5FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D804E610(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  void *v14;
  StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;

  WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(&a9, a2);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&a10, v14);
  v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D804E740(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D804E820(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D804E964(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D804ED10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  const void *v21;

  if (v21)
    CFRelease(v21);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      while (1)
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
            break;
        }
        if (++v4 == (unsigned int **)v5)
          goto LABEL_9;
      }
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
LABEL_9:
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void sub_1D804EF64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D804EF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1D804F0D4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D804F224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1D804F4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12)
{
  StringImpl *v13;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, v13);
      std::optional<WebCore::SimpleRange>::~optional(&a12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    std::optional<WebCore::SimpleRange>::~optional(&a12);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a12);
  _Unwind_Resume(a1);
}

void sub_1D804FFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12)
{
  StringImpl *v13;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, v13);
      std::optional<WebCore::SimpleRange>::~optional(&a12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    std::optional<WebCore::SimpleRange>::~optional(&a12);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a12);
  _Unwind_Resume(a1);
}

void sub_1D805028C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8050574(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  const void *v11;
  char v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  MEMORY[0x1D82A33C8](&a11);
  if ((v12 & 1) == 0)
    CFRelease(v11);
  _Unwind_Resume(a1);
}

void sub_1D8050720(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8050804(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8050C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12)
{
  StringImpl *v13;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, v13);
      std::optional<WebCore::SimpleRange>::~optional(&a12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    std::optional<WebCore::SimpleRange>::~optional(&a12);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a12);
  _Unwind_Resume(a1);
}

void sub_1D8050E04(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80510B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, WebCore::Node *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL WebCore::operator==(uint64_t a1, uint64_t a2)
{
  WebCore::Node *v2;
  WebCore::Node *v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  int v8;
  WebCore::Node *v9;
  WebCore::Node *v11;
  int v12;
  unsigned __int8 v13;
  WebCore::Node *v14;
  int v15;
  unsigned __int8 v16;

  v2 = *(WebCore::Node **)a1;
  if (*(_QWORD *)a1)
    *((_DWORD *)v2 + 6) += 2;
  v14 = v2;
  v15 = *(_DWORD *)(a1 + 8);
  v16 = *(_BYTE *)(a1 + 12);
  v3 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v3 + 6) += 2;
  v11 = v3;
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_BYTE *)(a2 + 12);
  if (v2 != v3)
  {
    v4 = 0;
    v11 = 0;
    if (!v3)
      goto LABEL_25;
    goto LABEL_21;
  }
  if ((v16 & 8) == 0 && ((v5 = v16 & 7, v5 == 2) || v5 == 4))
  {
    v6 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v14);
    v7 = v13;
    if ((v13 & 8) != 0)
      goto LABEL_18;
  }
  else
  {
    v6 = v15;
    v7 = v13;
    if ((v13 & 8) != 0)
      goto LABEL_18;
  }
  v8 = v7 & 7;
  if (v8 != 2 && v8 != 4)
  {
LABEL_18:
    if (v6 != v12)
      goto LABEL_19;
LABEL_17:
    v4 = ((v13 ^ v16) & 7) == 0;
    goto LABEL_20;
  }
  if (v6 == WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v11))
    goto LABEL_17;
LABEL_19:
  v4 = 0;
LABEL_20:
  v3 = v11;
  v11 = 0;
  if (!v3)
    goto LABEL_25;
LABEL_21:
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v3);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
LABEL_25:
  v9 = v14;
  v14 = 0;
  if (!v9)
    return v4;
  if (*((_DWORD *)v9 + 6) != 2)
  {
    *((_DWORD *)v9 + 6) -= 2;
    return v4;
  }
  if ((*((_WORD *)v9 + 15) & 0x400) != 0)
    return v4;
  WebCore::Node::removedLastRef(v9);
  return v4;
}

void sub_1D80512E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  _Unwind_Resume(a1);
}

void sub_1D8051388(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8051684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8051840(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8051B28(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,WTF::StringImpl *a49)
{
  uint64_t v49;
  StringImpl *v51;

  if (a49)
  {
    if (*(_DWORD *)a49 == 2)
    {
      WTF::StringImpl::destroy(a49, a2);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v49 - 232), v51);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a49 -= 2;
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v49 - 232), a2);
    _Unwind_Resume(a1);
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v49 - 232), a2);
  _Unwind_Resume(a1);
}

void sub_1D805229C(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CFTypeRef a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  WTF::StringImpl *a67;
  WTF::StringImpl *a68;
  WebCore::HTTPHeaderMap *v68;
  _QWORD *v69;
  const void *v71;
  StringImpl *v72;
  StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  StringImpl *v82;
  StringImpl *v83;

  if (LOBYTE(STACK[0x280]))
  {
    v71 = (const void *)STACK[0x278];
    STACK[0x278] = 0;
    if (v71)
      CFRelease(v71);
  }
  WTF::Box<WebCore::NetworkLoadMetrics>::~Box(v69, a2);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap(v68, v72);
  v74 = (WTF::StringImpl *)STACK[0x248];
  STACK[0x248] = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v73);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = (WTF::StringImpl *)STACK[0x240];
  STACK[0x240] = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v73);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = (WTF::StringImpl *)STACK[0x238];
  STACK[0x238] = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v73);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = (WTF::StringImpl *)STACK[0x228];
  STACK[0x228] = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v73);
    else
      *(_DWORD *)v77 -= 2;
  }
  v78 = (WTF::StringImpl *)STACK[0x200];
  STACK[0x200] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v73);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = a68;
  a68 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v73);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = a67;
  a67 = 0;
  if (v80)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)v80, v73);
  v81 = (WTF::StringImpl *)STACK[0x308];
  STACK[0x308] = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v73);
    else
      *(_DWORD *)v81 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, v73);
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)&a10, v82);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&a42, v83);
  _Unwind_Resume(a1);
}

void sub_1D805257C()
{
  _DWORD *v0;

  v0 = (_DWORD *)STACK[0x308];
  STACK[0x308] = 0;
  if (v0)
  {
    if (*v0 == 2)
      JUMPOUT(0x1D8052598);
    JUMPOUT(0x1D8052540);
  }
  JUMPOUT(0x1D8052574);
}

void WebCore::ResourceResponse::~ResourceResponse(WebCore::ResourceResponse *this, StringImpl *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
}

void sub_1D80527A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80528E4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8052CD8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D805307C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void sub_1D8053248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8053440(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8053828(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalFrameLoaderClient::hasCustomUserAgent(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

void WebCore::LocalFrameLoaderClient::overrideContentSecurityPolicy(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebFrameLoaderClient::accessibilityRemoteObject(WebFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebFrameLoaderClient::accessibilityRemoteFrameOffset(WebFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::dataDetectionReferenceDate(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::allowScript(WebCore::LocalFrameLoaderClient *this, uint64_t a2)
{
  return a2;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldForceUniversalAccessFromLocalURL(WebCore::LocalFrameLoaderClient *this, const URL *a2)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isEmptyFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isRemoteWorkerFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::hasFrameSpecificStorageAccess(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

void WebCore::LocalFrameLoaderClient::loadedSubresourceDomains(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::LocalFrameLoaderClient::allowsContentJavaScriptFromMostRecentNavigation(WebCore::LocalFrameLoaderClient *this)
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldEnableInAppBrowserPrivacyProtections(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldUsePDFPlugin()
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isParentProcessAFullWebBrowser(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

WebCore::SubstituteData *WebCore::SubstituteData::SubstituteData(WebCore::SubstituteData *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = 0;
  WTF::URL::invalidate((WebCore::SubstituteData *)((char *)this + 8));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::SubstituteData *)((char *)this + 48));
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_BYTE *)this + 186) = *((_BYTE *)this + 186) & 0xF1 | 4;
  *((_BYTE *)this + 304) = 1;
  return this;
}

void sub_1D8054C00(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  void *v6;
  uint64_t v7;

  v4 = v3;
  WTF::URL::~URL(v4, a2);
  v7 = *v2;
  *v2 = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
  _Unwind_Resume(a1);
}

void WebCore::SubstituteData::~SubstituteData(WebCore::SubstituteData *this, StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  char v22;

  v3 = (WebCore::SubstituteData *)((char *)this + 48);
  v4 = (const void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      v7 = *(_QWORD *)this;
      *(_QWORD *)this = 0;
      if (!v7)
        return;
      goto LABEL_9;
    }
    *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (!v7)
    return;
  do
  {
LABEL_9:
    v8 = __ldaxr((unsigned int *)v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)v7));
  if (!v9)
  {
    atomic_store(1u, (unsigned int *)v7);
    v10 = *(unsigned int *)(v7 + 20);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v7 + 8);
      v12 = v11 + 16 * v10;
      do
      {
        v13 = *(unsigned int **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v19 = v11;
            v20 = v12;
            atomic_store(1u, v13);
            v21 = (WTF *)v13;
            v16 = v13[6];
            if ((_DWORD)v16 != -1)
              ((void (*)(char *, unsigned int *))off_1E9D6B8A0[v16])(&v22, v13 + 2);
            *((_DWORD *)v21 + 6) = -1;
            WTF::fastFree(v21, v5);
            v11 = v19;
            v12 = v20;
          }
        }
        v11 += 16;
      }
      while (v11 != v12);
    }
    v17 = *(WTF **)(v7 + 8);
    if ((WTF *)(v7 + 24) != v17 && v17 != 0)
    {
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      WTF::fastFree(v17, v5);
    }
    WTF::fastFree((WTF *)v7, v5);
  }
}

unsigned int *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(unsigned int *a1, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebCachedFramePlatformData::~WebCachedFramePlatformData(WebCachedFramePlatformData *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E9D6B678;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

void WebCachedFramePlatformData::~WebCachedFramePlatformData(WebCachedFramePlatformData *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E9D6B678;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

id WebCachedFramePlatformData::clear(id *this)
{
  return objc_msgSend(this[1], sel_closeIfNotCurrentView);
}

void PluginWidget::~PluginWidget(PluginWidget *this)
{
  WTF *v1;
  void *v2;

  WebCore::Widget::~Widget(this);
  WTF::fastFree(v1, v2);
}

uint64_t PluginWidget::invalidateRect(WebCore::Widget *a1)
{
  void *v1;

  v1 = (void *)WebCore::Widget::platformWidget(a1);
  WebCore::IntRect::operator CGRect();
  return objc_msgSend(v1, "setNeedsDisplayInRect:");
}

uint64_t WebCore::Widget::setParentVisible(uint64_t this, char a2)
{
  *(_BYTE *)(this + 25) = a2;
  return this;
}

uint64_t WebCore::Widget::isLocalFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isRemoteFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::isPluginViewBase(WebCore::PluginViewBase *this)
{
  return 1;
}

uint64_t WebCore::Widget::isScrollbar(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isScrollView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::transformsAffectFrameRect(WebCore::Widget *this)
{
  return 1;
}

uint64_t WebCore::Widget::accessibilityHitTest(WebCore::Widget *this, const IntPoint *a2)
{
  return 0;
}

uint64_t WebCore::Widget::accessibilityObject(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::layerHostingStrategy(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::platformLayer(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::graphicsLayer(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::scroll()
{
  return 0;
}

uint64_t WebCore::PluginViewBase::scrollPositionForTesting(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::horizontalScrollbar(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::verticalScrollbar(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::wantsWheelEvents(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::shouldAllowNavigationFromDrags(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::scrollableArea(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::usesAsyncScrolling(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::scrollingNodeID(WebCore::PluginViewBase *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::accessibilityAssociatedPluginParentForElement(WebCore::PluginViewBase *this, Element *a2)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::sendEditingCommandToPDFForTesting(WebCore::PluginViewBase *this, const WTF::String *a2, const WTF::String *a3)
{
  return 0;
}

void WebCore::PluginViewBase::pdfAnnotationRectsForTesting(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = *(const void **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  if (!v4)
  {
LABEL_6:
    v5 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (!v5)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v4, (StringImpl *)a2);
  v5 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (!v5)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, (StringImpl *)a2);
    result = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (!result)
      return result;
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (!result)
    return result;
LABEL_14:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
  *(_DWORD *)result -= 2;
  return result;
}

BOOL WebCore::FrameNetworkingContext::isValid(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return v1 && *(_QWORD *)(v1 + 8) != 0;
}

BOOL WebCore::FrameNetworkingContext::shouldClearReferrerOnHTTPSToHTTPRedirect(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  return !v1
      || (v2 = *(_QWORD *)(v1 + 8)) == 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 296) + 192) + 8))(*(_QWORD *)(v2 + 296) + 192) == 2;
}

uint64_t WebCore::NetworkingContext::scheduledRunLoopPairs(WebCore::NetworkingContext *this)
{
  return 0;
}

void WebCore::NetworkingContext::sourceApplicationIdentifier(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

_QWORD *WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::~QuickLookDocumentWriter(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = off_1E9D6B868;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "_web_removeFileOnlyAtPath:", a1[2]);
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_1D80551B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
  {
    CFRelease(v3);
    v4 = *(const void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(const void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (!v4)
      goto LABEL_3;
  }
  CFRelease(v4);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::~QuickLookDocumentWriter(WTF *a1)
{
  void *v2;
  const void *v3;
  const void *v4;

  *(_QWORD *)a1 = off_1E9D6B868;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "_web_removeFileOnlyAtPath:", *((_QWORD *)a1 + 2));
  v3 = (const void *)*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(a1, v2);
}

void sub_1D8055254(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
  {
    CFRelease(v3);
    v4 = *(const void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(const void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (!v4)
      goto LABEL_3;
  }
  CFRelease(v4);
  _Unwind_Resume(exception_object);
}

void WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::didReceiveData(uint64_t a1, WebCore::FragmentedSharedBuffer *this)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CFTypeRef cf;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WebCore::FragmentedSharedBuffer::createNSDataArray(this);
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v3 = (void *)cf;
  v4 = objc_msgSend((id)cf, "countByEnumeratingWithState:objects:count:", &v8, v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(a1 + 24), "writeData:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v13, 16);
    }
    while (v4);
  }
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
}

void sub_1D8055398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf)
{
  if (!cf)
    _Unwind_Resume(exception_object);
  CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::didFinishLoading(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 24), "closeFile");
}

uint64_t WebFrameLoaderClient::createPreviewLoaderClient(WTF::String const&,WTF::String const&)::QuickLookDocumentWriter::didFail(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 24), "closeFile");
}

uint64_t WebCore::LegacyPreviewLoaderClient::supportsPasswordEntry(WebCore::LegacyPreviewLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LegacyPreviewLoaderClient::didRequestPassword(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, MEMORY[0x1E0CBF738]);
}

uint64_t WebCore::ResourceRequestBase::RequestData::RequestData(uint64_t a1, uint64_t a2, char a3)
{
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *(_OWORD *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = v7;
  WTF::URL::invalidate((WTF::URL *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = *MEMORY[0x1E0DD1D20];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 88) = v9;
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(a1 + 96));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = a3;
  *(_WORD *)(a1 + 145) = 256;
  *(_BYTE *)(a1 + 147) = 0;
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a1 + 148) & 0x80 | 4;
  return a1;
}

void sub_1D80554B8(_Unwind_Exception *a1, StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  StringImpl *v6;

  v5 = v2[11];
  v2[11] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::URL::~URL(v3, a2);
  WTF::URL::~URL(v2, v6);
  _Unwind_Resume(a1);
}

void sub_1D8055500(_Unwind_Exception *a1, StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  StringImpl *v6;

  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, a2);
      WTF::URL::~URL(v2, v6);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v5 -= 2;
  }
  WTF::URL::~URL(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Box<WebCore::NetworkLoadMetrics>::~Box(_QWORD *result, StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  WTF::StringImpl *v7;

  v2 = result;
  v3 = *result;
  *result = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(_DWORD **)(v3 + 128);
      *(_QWORD *)(v3 + 128) = 0;
      if (v6)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v6, a2);
      v7 = *(WTF::StringImpl **)(v3 + 96);
      *(_QWORD *)(v3 + 96) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 != 2)
        {
          *(_DWORD *)v7 -= 2;
          WTF::fastFree((WTF *)v3, a2);
          return v2;
        }
        WTF::StringImpl::destroy(v7, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  char v17;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = *(unsigned int *)(this + 20);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(this + 8);
      v7 = v6 + 16 * v5;
      do
      {
        v8 = *(unsigned int **)(v6 + 8);
        *(_QWORD *)(v6 + 8) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v14 = v6;
            v15 = v7;
            atomic_store(1u, v8);
            v16 = (WTF *)v8;
            v11 = v8[6];
            if ((_DWORD)v11 != -1)
              ((void (*)(char *, unsigned int *))off_1E9D6B8A0[v11])(&v17, v8 + 2);
            *((_DWORD *)v16 + 6) = -1;
            WTF::fastFree(v16, a2);
            v6 = v14;
            v7 = v15;
          }
        }
        v6 += 16;
      }
      while (v6 != v7);
    }
    v12 = *(WTF **)(v2 + 8);
    if ((WTF *)(v2 + 24) != v12 && v12 != 0)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v12, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebFrameLoaderClient::dispatchWillSubmitForm(WebCore::FormState &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E9D6B8D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebFrameLoaderClient::dispatchWillSubmitForm(WebCore::FormState &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6B8D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebFrameLoaderClient::dispatchWillSubmitForm(WebCore::FormState &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1D80557B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          v10 = *(WTF::StringImpl ***)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          v7[2] = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[3] = v10;
          v11 = *((unsigned int *)v9 + 3);
          if ((_DWORD)v11)
          {
            v12 = *(WTF::StringImpl ***)v9;
            v13 = 8 * v11;
            do
            {
              v14 = *v12;
              *v12 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, v6);
                else
                  *(_DWORD *)v14 -= 2;
              }
              ++v12;
              v13 -= 8;
            }
            while (v13);
          }
          result = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v7 += 4;
          v9 = (WTF *)((char *)v9 + 16);
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void sub_1D8055A98(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  v4 = *((_QWORD *)v2 + 1);
  if (!v4)
  {
    *((_QWORD *)v2 + 1) = 0;
    WTF::fastFree(v2, a2);
    _Unwind_Resume(a1);
  }
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)*((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      WTF::fastFree(v2, v8);
      _Unwind_Resume(a1);
    }
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::MutableStyleProperties *WebCore::MutableStyleProperties::deref(WebCore::MutableStyleProperties *this)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)this == 1)
  {
    WebCore::MutableStyleProperties::~MutableStyleProperties(this);
    return (WebCore::MutableStyleProperties *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

_QWORD *WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(_QWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  char v18;

  v2 = result;
  v3 = *result;
  *result = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(v3 + 8);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v15 = v7;
              v16 = v8;
              atomic_store(1u, v9);
              v17 = (WTF *)v9;
              v12 = v9[6];
              if ((_DWORD)v12 != -1)
                ((void (*)(char *, unsigned int *))off_1E9D6B8A0[v12])(&v18, v9 + 2);
              *((_DWORD *)v17 + 6) = -1;
              WTF::fastFree(v17, a2);
              v7 = v15;
              v8 = v16;
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v13 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v13, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t *a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 3);
  v4 = *a1;
  if (v3)
  {
    v5 = v4 + 40 * v3;
    while (1)
    {
      if (!*(_BYTE *)(v4 + 32))
        goto LABEL_23;
      v6 = *(_QWORD *)(v4 + 24);
      if ((v6 & 0x8000000000000) == 0)
        goto LABEL_23;
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
        if (*(_BYTE *)(v4 + 16))
        {
LABEL_10:
          v10 = *(_QWORD *)(v4 + 8);
          if ((v10 & 0x8000000000000) != 0)
          {
            v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, a2);
            }
          }
        }
      }
      else
      {
LABEL_23:
        if (*(_BYTE *)(v4 + 16))
          goto LABEL_10;
      }
      v4 += 40;
      if (v4 == v5)
      {
        v4 = *a1;
        break;
      }
    }
  }
  if (v4)
  {
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void sub_1D8056114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D8056758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8056840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8056998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8056A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8056B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D805743C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void hardwareKeyboardAvailabilityChangedCallback(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  id v5;
  id location;

  location = 0;
  objc_initWeak(&location, a2);
  v5 = 0;
  objc_copyWeak(&v5, &location);
  WebThreadRun();
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void sub_1D80574DC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1D80574F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1D80575EC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D805783C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8057928(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8057A90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::Editor::Command::~Command(WebCore::Editor::Command *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E9D6A4D8;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
}

void sub_1D8057BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D8057CF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80587C0(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_1D8058910(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8058924(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D805899C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8058C50(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8058C64(_Unwind_Exception *a1, StringImpl *a2, WebCore::WindowProxy *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a3)
    WTF::RefCounted<WebCore::WindowProxy>::deref(a3);
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8058C88(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1D8058C94(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
      _Unwind_Resume(exception_object);
    }
    --v1[4];
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1D8058C8CLL);
}

void sub_1D805924C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  char v10;
  uint64_t v11;
  unsigned int v13;
  unsigned int v14;

  *(_BYTE *)(*(_QWORD *)(v11 + 8) + 274) = v10;
  do
  {
    v13 = __ldaxr((unsigned int *)v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v11));
  if (v14)
    _Unwind_Resume(exception_object);
  atomic_store(1u, (unsigned int *)v11);
  WTF::fastFree((WTF *)v11, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D8059364(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8059378(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8059428(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8059630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::EditingStyle,WTF::RawPtrTraits<WebCore::EditingStyle>,WTF::DefaultRefDerefTraits<WebCore::EditingStyle>>::~Ref((WebCore::EditingStyle **)va);
  _Unwind_Resume(a1);
}

void sub_1D8059644(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::EditingStyle **WTF::Ref<WebCore::EditingStyle,WTF::RawPtrTraits<WebCore::EditingStyle>,WTF::DefaultRefDerefTraits<WebCore::EditingStyle>>::~Ref(WebCore::EditingStyle **a1)
{
  WebCore::EditingStyle *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebCore::EditingStyle::~EditingStyle(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1D805A1A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D805A540(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  void *v14;
  StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;

  WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(&a9, a2);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&a10, v14);
  v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_1D805A93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a14 + 8))(a14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::KeypressCommand::~KeypressCommand(WebCore::KeypressCommand *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = 0;
      if (!v4)
        return;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (!v4)
    return;
LABEL_7:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, a2);
  else
    *(_DWORD *)v4 -= 2;
}

void sub_1D805AE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D805AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  uint64_t v12;

  if (a12)
  {
    if (*a12 == 2)
      JUMPOUT(0x1D805AF00);
    JUMPOUT(0x1D805AE48);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12 + 8);
  _Unwind_Resume(a1);
}

void sub_1D805AF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1D805B0B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (!a9)
    _Unwind_Resume(exception_object);
  WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D805B4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  objc_end_catch();
  WTF::Ref<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D805B4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1D805B510);
}

void sub_1D805B8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  StringImpl *v15;
  WTF::StringImpl *v16;

  std::optional<WebCore::SimpleRange>::~optional(&a9);
  v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D805BB10(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (!a9)
    _Unwind_Resume(exception_object);
  WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D805BC3C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D805BD1C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D805C004(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, a2);
    _Unwind_Resume(exception_object);
  }
  *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

JSC::Debugger *WebScriptDebugger::WebScriptDebugger(JSC::Debugger *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  StringImpl *v9;
  uint64_t v10;
  WTF *v12;

  v4 = JSC::Debugger::Debugger();
  *(_QWORD *)v4 = off_1E9D6BA20;
  *(_BYTE *)(v4 + 232) = 0;
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(v5 + 712);
  if (!v6)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v5 + 672));
    v6 = *(_QWORD *)(v5 + 712);
  }
  *(_QWORD *)(v5 + 712) = *(_QWORD *)v6;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *((_QWORD *)a1 + 30) = v6 + 16;
  if (!*(_QWORD *)(v6 + 16))
  {
    v7 = *(unint64_t **)((v6 & 0xFFFFFFFFFFFFF000) + 0x10);
    v8 = v7[3];
    v7 += 3;
    *(_QWORD *)v6 = v8;
    *(_QWORD *)(v6 + 8) = v7;
    *v7 = v6;
    *(_QWORD *)(v8 + 8) = v6;
  }
  *(_QWORD *)(v6 + 16) = a2;
  JSC::Breakpoint::create();
  v10 = *((_QWORD *)a1 + 19);
  *((_QWORD *)a1 + 19) = v12;
  if (v10)
    WTF::RefCounted<JSC::Breakpoint>::deref(v10, v9);
  JSC::Debugger::setBreakpointsActivated(a1);
  JSC::Debugger::attach();
  return a1;
}

void sub_1D805C1BC(_Unwind_Exception *a1)
{
  JSC::Debugger *v1;

  JSC::Debugger::~Debugger(v1);
  _Unwind_Resume(a1);
}

void sub_1D805C1D0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  JSC::Debugger *v3;
  uint64_t *v4;
  va_list va;

  va_start(va, a3);
  WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)va, a2);
  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong(v4);
  JSC::Debugger::~Debugger(v3);
  _Unwind_Resume(a1);
}

void sub_1D805C1F4(_Unwind_Exception *a1)
{
  JSC::Debugger *v1;
  uint64_t *v2;

  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong(v2);
  JSC::Debugger::~Debugger(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t *JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *result;
  if (*result)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *result = 0;
  }
  return result;
}

void WebScriptDebugger::sourceParsed(uint64_t a1, uint64_t a2, JSC::SourceProvider *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  void *v14;
  int v15;
  WebCore::JSDOMWindowBase *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  const void *v26;
  void (*v27)(uint64_t, char *, uint64_t, uint64_t, _QWORD, void *, const void *, void *);
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t, uint64_t, uint64_t, _QWORD, void *);
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _QWORD v37[2];
  _QWORD v38[2];
  const __CFString *v39;
  _QWORD v40[2];

  v40[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 232))
  {
    *(_BYTE *)(a1 + 232) = 1;
    (*(void (**)(JSC::SourceProvider *))(*(_QWORD *)a3 + 24))(a3);
    if ((v9 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v11 = v36;
    if (!v36)
    {
      v12 = 0;
      goto LABEL_12;
    }
    if (*((_DWORD *)v36 + 1))
    {
      v12 = WTF::StringImpl::operator NSString *();
      v11 = v36;
      v13 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 != 2)
      {
LABEL_8:
        *(_DWORD *)v11 = v13;
LABEL_12:
        v35 = v12;
        v14 = (void *)WTF::URL::operator NSURL *();
        v15 = *((_DWORD *)a3 + 26);
        v16 = (WebCore::JSDOMWindowBase *)JSC::VM::deprecatedVMEntryGlobalObject();
        v17 = WebCore::JSDOMWindowBase::wrapped(v16);
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 104))(v17);
        if (!v18
          || *(_BYTE *)(v18 + 144)
          || (v19 = *(_QWORD **)(*(_QWORD *)(v18 + 280) + 16),
              ((*(uint64_t (**)(_QWORD *))(*v19 + 1072))(v19) & 1) != 0))
        {
          v20 = 0;
        }
        else
        {
          v20 = (void *)v19[2];
        }
        v21 = objc_msgSend(v20, "webView");
        v22 = v21;
        if (v21)
        {
          v23 = (char *)(*(_QWORD *)(v21 + 80) + 656);
          v24 = v15 + 1;
          if ((_DWORD)a4 != -1)
            goto LABEL_18;
        }
        else
        {
          v23 = &WebViewGetScriptDebugDelegateImplementations(WebView *)::empty;
          v24 = v15 + 1;
          if ((_DWORD)a4 != -1)
          {
LABEL_18:
            if (*(_QWORD *)a5 && *(_DWORD *)(*(_QWORD *)a5 + 4))
            {
              v37[0] = CFSTR("WebScriptErrorDescription");
              v37[1] = CFSTR("WebScriptErrorLineNumber");
              v38[0] = WTF::StringImpl::operator NSString *();
              v38[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
              v25 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, 2);
            }
            else
            {
              v39 = CFSTR("WebScriptErrorLineNumber");
              v40[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
              v25 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v40, &v39, 1);
            }
            v26 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("WebScriptErrorDomain"), -100, v25);
            v27 = (void (*)(uint64_t, char *, uint64_t, uint64_t, _QWORD, void *, const void *, void *))*((_QWORD *)v23 + 2);
            if (v27)
            {
              v28 = *(_QWORD *)(*(_QWORD *)(v22 + 80) + 112);
              if (v28)
                v27(v28, sel_webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_, v22, v35, v24, v14, v26, v20);
            }
            if (v26)
              CFRelease(v26);
LABEL_39:
            *(_BYTE *)(a1 + 232) = 0;
            return;
          }
        }
        v29 = (void (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, _QWORD, void *))*((_QWORD *)v23 + 1);
        if (v29)
        {
          if (*v23)
          {
            v30 = *((_DWORD *)a3 + 28);
            if (!v30)
            {
              JSC::SourceProvider::getID(a3);
              v30 = *((_DWORD *)a3 + 28);
            }
            v31 = *(_QWORD *)(*(_QWORD *)(v22 + 80) + 112);
            if (v31)
              ((void (*)(uint64_t, char *, uint64_t, uint64_t, _QWORD, void *, _QWORD, void *))v29)(v31, sel_webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_, v22, v35, v24, v14, v30, v20);
          }
          else
          {
            v32 = objc_msgSend(v14, "absoluteString");
            v33 = *((_DWORD *)a3 + 28);
            if (!v33)
            {
              JSC::SourceProvider::getID(a3);
              v33 = *((_DWORD *)a3 + 28);
            }
            v34 = *(_QWORD *)(*(_QWORD *)(v22 + 80) + 112);
            if (v34)
              v29(v34, sel_webView_didParseSource_fromURL_sourceId_forWebFrame_, v22, v35, v32, v33, v20);
          }
        }
        goto LABEL_39;
      }
    }
    else
    {
      v12 = 0;
      v13 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 != 2)
        goto LABEL_8;
    }
    WTF::StringImpl::destroy(v11, v10);
    goto LABEL_12;
  }
}

void sub_1D805C668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  objc_selector *v11;
  objc_object *v12;

  if (a2 == 1)
  {
    v12 = (objc_object *)objc_begin_catch(exception_object);
    ReportDiscardedDelegateException(v11, v12);
    objc_end_catch();
    JUMPOUT(0x1D805C628);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebScriptDebugger::handlePause(WTF::StringImpl *result, WebCore::JSDOMWindowBase *this, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  WebScriptCallFrame *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  StringImpl *v14;
  id v15;
  WTF::StringImpl *v16;
  char *v17;
  void (*v18)(uint64_t, char *, uint64_t, id, _QWORD, _QWORD, _QWORD *);
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  if (a3 != 1)
    return result;
  v3 = (uint64_t)result;
  if (*((_BYTE *)result + 232))
    return result;
  *((_BYTE *)result + 232) = 1;
  v4 = WebCore::JSDOMWindowBase::wrapped(this);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  if (!v5
    || *(_BYTE *)(v5 + 144)
    || (v6 = *(_QWORD **)(*(_QWORD *)(v5 + 280) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v6 + 1072))(v6) & 1) != 0))
  {
    v7 = 0;
  }
  else
  {
    v7 = (_QWORD *)v6[2];
  }
  v8 = objc_msgSend(v7, "webView");
  v9 = (unsigned int *)JSC::Debugger::currentDebuggerCallFrame((JSC::Debugger *)v3);
  v10 = *(_QWORD *)(v3 + 56);
  JSC::DebuggerCallFrame::functionName();
  v11 = [WebScriptCallFrame alloc];
  v12 = WebCore::ScriptController::windowScriptObject(*(WebCore::ScriptController **)(*(_QWORD *)(v7[1] + 8) + 304));
  v13 = v25;
  if (v25)
    *(_DWORD *)v25 += 2;
  v24 = v13;
  v15 = -[WebScriptCallFrame _initWithGlobalObject:functionName:exceptionValue:](v11, "_initWithGlobalObject:functionName:exceptionValue:", v12, &v24, v10);
  v16 = v24;
  v24 = 0;
  if (!v16)
  {
LABEL_12:
    if (v8)
      goto LABEL_13;
    goto LABEL_16;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v16, v14);
  if (v8)
  {
LABEL_13:
    v17 = (char *)(*(_QWORD *)(v8 + 80) + 656);
    v18 = *(void (**)(uint64_t, char *, uint64_t, id, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)(v8 + 80) + 680);
    if (!v18)
      goto LABEL_22;
LABEL_17:
    if (v17[1])
    {
      v19 = *(unsigned __int16 *)(v3 + 48);
      v20 = JSC::DebuggerCallFrame::sourceID((JSC::DebuggerCallFrame *)v9);
      v21 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 112);
      if (v21)
        ((void (*)(uint64_t, char *, uint64_t, id, _QWORD, _QWORD, _QWORD, _QWORD *, WTF::StringImpl *))v18)(v21, sel_webView_exceptionWasRaised_hasHandler_sourceId_line_forWebFrame_, v8, v15, (v19 >> 7) & 1, v20, v9[6], v7, v24);
    }
    else
    {
      v22 = JSC::DebuggerCallFrame::sourceID((JSC::DebuggerCallFrame *)v9);
      v23 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 112);
      if (v23)
        v18(v23, sel_webView_exceptionWasRaised_sourceId_line_forWebFrame_, v8, v15, v22, v9[6], v7);
    }
    goto LABEL_22;
  }
LABEL_16:
  v17 = &WebViewGetScriptDebugDelegateImplementations(WebView *)::empty;
  v18 = (void (*)(uint64_t, char *, uint64_t, id, _QWORD, _QWORD, _QWORD *))qword_1F0165E88;
  if (qword_1F0165E88)
    goto LABEL_17;
LABEL_22:
  *(_BYTE *)(v3 + 232) = 0;
  if (v15)
    CFRelease(v15);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D805CDE8(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)v2 == 1)
  {
    WTF::fastFree(v2, a2);
    _Unwind_Resume(exception_object);
  }
  --*(_DWORD *)v2;
  _Unwind_Resume(exception_object);
}

void sub_1D805CED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, _DWORD *a10)
{
  StringImpl *v11;

  WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, v11);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

_DWORD **WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref(_DWORD **a1)
{
  _DWORD *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*v2 != 1)
  {
    --*v2;
    return a1;
  }
  v4 = (WTF *)MEMORY[0x1D82A4B08]();
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1D805D1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1D805D3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1D805D3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void WebScriptDebugger::~WebScriptDebugger(WebScriptDebugger *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 30);
  if (v1)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *((_QWORD *)this + 30) = 0;
  }
  JSC::Debugger::~Debugger((JSC::Debugger *)this);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  v1 = *((_QWORD *)this + 30);
  if (v1)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *((_QWORD *)this + 30) = 0;
  }
  JSC::Debugger::~Debugger((JSC::Debugger *)this);
  WTF::fastFree(v6, v7);
}

uint64_t JSC::Debugger::isContentScript()
{
  return 0;
}

void ___ZL43hardwareKeyboardAvailabilityChangedCallbackP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  id WeakRetained;
  const void *v2;
  uint64_t v3;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    v3 = objc_msgSend(WeakRetained, "_frame");
    if (v3)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
      if (v4)
        WebCore::EventHandler::capsLockStateMayHaveChanged(*(WebCore::EventHandler **)(v4 + 640));
    }
    CFRelease(v2);
  }
}

void sub_1D805D4E8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c38_ZTSN3WTF11WeakObjCPtrI11WebHTMLViewEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c38_ZTSN3WTF11WeakObjCPtrI11WebHTMLViewEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

uint64_t *createSelectorExceptionMap(void)
{
  uint64_t *v0;
  _BYTE v2[24];
  const char *v3;
  uint64_t v4;
  char *v5;

  v0 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  *v0 = 0;
  v3 = "InsertNewline";
  v4 = 14;
  v5 = sel_insertNewlineIgnoringFieldEditor_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>((WTF::StringImpl *)v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  v4 = 14;
  v5 = sel_insertParagraphSeparator_;
  v3 = "InsertNewline";
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>((WTF::StringImpl *)v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  v3 = "InsertTab";
  v4 = 10;
  v5 = sel_insertTabIgnoringFieldEditor_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>((WTF::StringImpl *)v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  v3 = "MovePageDown";
  v4 = 13;
  v5 = sel_pageDown_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>((WTF::StringImpl *)v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  v3 = "MovePageDownAndModifySelection";
  v4 = 31;
  v5 = sel_pageDownAndModifySelection_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>((WTF::StringImpl *)v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  v3 = "MovePageUp";
  v4 = 11;
  v5 = sel_pageUp_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>((WTF::StringImpl *)v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  v3 = "MovePageUpAndModifySelection";
  v4 = 29;
  v5 = sel_pageUpAndModifySelection_;
  WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>((WTF::StringImpl *)v2, v0, (uint64_t *)&v5, (uint64_t)&v3);
  return v0;
}

WTF::StringImpl *WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::ASCIILiteral>(WTF::StringImpl *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2;
  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF::StringImpl *)WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,WTF::String>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::rehash(a2, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v20 = *(_QWORD *)(a4 + 8);
    if (v20)
    {
      a2 = (uint64_t *)(v20 - 1);
      if (v20 == 1)
      {
        v27 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        result = (WTF::StringImpl *)v16[1];
        v16[1] = v27;
        if (!result)
          goto LABEL_21;
        goto LABEL_16;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v20 = v28;
    }
    result = (WTF::StringImpl *)v16[1];
    v16[1] = v20;
    if (!result)
      goto LABEL_21;
LABEL_16:
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
LABEL_21:
    if (*v6)
    {
      ++*(_DWORD *)(*v6 - 12);
      v22 = *v6;
      if (*v6)
        goto LABEL_23;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v22 = *v6;
      if (*v6)
      {
LABEL_23:
        v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
        v24 = *(unsigned int *)(v22 - 4);
        if (v24 <= 0x400)
          goto LABEL_24;
        goto LABEL_30;
      }
    }
    v23 = *(unsigned int *)(v22 - 16);
    v24 = *(unsigned int *)(v22 - 4);
    if (v24 <= 0x400)
    {
LABEL_24:
      if (3 * v24 > 4 * v23)
      {
LABEL_33:
        v25 = v22 + 16 * v24;
        v26 = 1;
        goto LABEL_38;
      }
      if (!(_DWORD)v24)
      {
        result = (WTF::StringImpl *)WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,WTF::String>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::rehash(v6, 8u, v16);
        v16 = (uint64_t *)result;
        v22 = *v6;
        if (!*v6)
        {
LABEL_27:
          v24 = 0;
          goto LABEL_33;
        }
LABEL_32:
        v24 = *(unsigned int *)(v22 - 4);
        goto LABEL_33;
      }
LABEL_31:
      result = (WTF::StringImpl *)WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,WTF::String>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::rehash(v6, (_DWORD)v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), v16);
      v16 = (uint64_t *)result;
      v22 = *v6;
      if (!*v6)
        goto LABEL_27;
      goto LABEL_32;
    }
LABEL_30:
    if (v24 > 2 * v23)
      goto LABEL_33;
    goto LABEL_31;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v21 = 0;
  else
    v21 = *(unsigned int *)(v8 - 4);
  v26 = 0;
  v25 = v8 + 16 * v21;
LABEL_38:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v25;
  *((_BYTE *)v7 + 16) = v26;
  return result;
}

uint64_t *WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,WTF::String>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,WTF::String,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WTF::StringImpl *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v10);
            else
              *(_DWORD *)v27 -= 2;
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WTF::StringImpl **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF::StringImpl **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent(WebCore::PlatformKeyboardEvent *this, StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (!v4)
  {
LABEL_6:
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (!v5)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v5)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (!v6)
      goto LABEL_16;
    goto LABEL_14;
  }
  *(_DWORD *)v5 -= 2;
LABEL_11:
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (!v6)
  {
LABEL_16:
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (!v7)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_14:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v6, a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (!v7)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, a2);
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (!v8)
      return;
    goto LABEL_24;
  }
  *(_DWORD *)v7 -= 2;
LABEL_21:
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v8)
    return;
LABEL_24:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, a2);
  else
    *(_DWORD *)v8 -= 2;
}

unint64_t WTF::Vector<WebCore::KeypressCommand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::KeypressCommand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::KeypressCommand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WebCore::KeypressCommand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  StringImpl *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        while (1)
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = (WTF::StringImpl *)v9[1];
          v9[1] = 0;
          if (!v12)
            goto LABEL_10;
          if (*(_DWORD *)v12 != 2)
            break;
          WTF::StringImpl::destroy(v12, v6);
          result = *v9;
          *v9 = 0;
          if (result)
          {
LABEL_13:
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
LABEL_6:
          v9 += 2;
          v7 += 4;
          if (v9 == v8)
            goto LABEL_15;
        }
        *(_DWORD *)v12 -= 2;
LABEL_10:
        result = *v9;
        *v9 = 0;
        if (result)
          goto LABEL_13;
        goto LABEL_6;
      }
LABEL_15:
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::RefCounted<JSC::Breakpoint>::deref(uint64_t this, StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v2 = this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  v3 = *(unsigned int *)(this + 52);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)(this + 40) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v7 = *(WTF **)(v2 + 40);
  if (v7)
  {
    *(_QWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(WTF::StringImpl **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, a2);
      v9 = (WTF *)v2;
      return WTF::fastFree(v9, a2);
    }
    *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF *)v2;
  return WTF::fastFree(v9, a2);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WebScriptWorld *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WebScriptWorld *>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WebScriptWorld *,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebScriptWorld *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  WTF *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF **)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ~(*((_QWORD *)v11 + 1) << 32) + *((_QWORD *)v11 + 1);
          v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 16 * v19);
          *v21 = 0;
          v22 = *(_OWORD *)v10;
          *v10 = 0;
          *(_OWORD *)v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, v8);
            else
              --*(_DWORD *)v23;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void sub_1D805E60C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(a10 + 8), a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D805E918(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D805ECD8(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebCore::UserScript *a9)
{
  uint64_t v9;
  StringImpl *v11;

  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](&a9, a2);
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100]((WebCore::UserScript **)(v9 - 48), v11);
  _Unwind_Resume(a1);
}

void sub_1D805ECF4(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100]((WebCore::UserScript **)(v2 - 48), a2);
  _Unwind_Resume(a1);
}

void sub_1D805ED08(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14)
{
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  StringImpl *v18;
  StringImpl *v19;
  StringImpl *v20;
  WTF::StringImpl *v21;

  v17 = *(WTF::StringImpl **)(v15 - 40);
  *(_QWORD *)(v15 - 40) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::fastFree(v14, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v18);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v19);
  v21 = a14;
  a14 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v21 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t createLaBanquePostaleQuirksScript(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  v3 = 0;
  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithContentsOfURL:usedEncoding:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class()), "URLForResource:withExtension:", CFSTR("LaBanquePostaleQuirks"), CFSTR("js")), &v3, 0);
  *a1 = result;
  return result;
}

WebCore::UserScript **std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](WebCore::UserScript **a1, StringImpl *a2)
{
  WebCore::UserScript *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::UserScript::~UserScript(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

void sub_1D806045C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,WTF::StringImpl *a46,int a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,WTF::StringImpl *a58)
{
  uint64_t v58;
  uint64_t v60;

  v60 = *(_QWORD *)(v58 - 112);
  *(_QWORD *)(v58 - 112) = 0;
  if (v60)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WTF::String>::~optional(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (!*(_BYTE *)(a1 + 8))
    return a1;
  v3 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v3, a2);
  return a1;
}

WebViewGroup **WTF::Ref<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>::~Ref(WebViewGroup **a1, StringImpl *a2)
{
  WebViewGroup *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebViewGroup::~WebViewGroup(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

id **WTF::UniqueRef<WebChromeClientIOS>::~UniqueRef(id **a1)
{
  id *v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    objc_destroyWeak(v2 + 2);
    WebCore::ChromeClient::~ChromeClient((WebCore::ChromeClient *)v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

WebCore::DummyModelPlayerProvider **WTF::UniqueRef<WebCore::DummyModelPlayerProvider>::~UniqueRef(WebCore::DummyModelPlayerProvider **a1)
{
  WebCore::DummyModelPlayerProvider *v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::DummyModelPlayerProvider::~DummyModelPlayerProvider(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

WTF **WTF::UniqueRef<WebCore::DummyStorageProvider>::~UniqueRef(WTF **a1, StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, a2);
        v5 = (unsigned int *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (!v5)
        {
LABEL_12:
          WTF::fastFree(v3, a2);
          return a1;
        }
LABEL_8:
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
        }
        goto LABEL_12;
      }
      *(_DWORD *)v4 -= 2;
    }
    v5 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (!v5)
      goto LABEL_12;
    goto LABEL_8;
  }
  return a1;
}

WTF **WTF::UniqueRef<WebCore::DummySpeechRecognitionProvider>::~UniqueRef(WTF **a1, void *a2)
{
  WTF *v3;
  _DWORD *v4;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WebEditorClient **WTF::UniqueRef<WebEditorClient>::~UniqueRef(WebEditorClient **a1)
{
  WebEditorClient *v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebEditorClient::~WebEditorClient(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

void WebInstallMemoryPressureHandler()
{
  WebCore *v0;
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v0 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("WebKitSuppressMemoryPressureHandler"));
  if ((v0 & 1) == 0)
  {
    WebCore::registerMemoryReleaseNotifyCallbacks(v0);
    v1 = atomic_load(&qword_1ECEC9810);
    if (v1 != -1)
    {
      v4 = &v2;
      v3 = &v4;
      std::__call_once(&qword_1ECEC9810, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebInstallMemoryPressureHandler::$_0 &&>>);
    }
  }
}

void sub_1D80622A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef cf,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,WTF::StringImpl *a46,int a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,char a58)
{
  uint64_t v58;
  uint64_t v60;

  v60 = *(_QWORD *)(v58 - 112);
  *(_QWORD *)(v58 - 112) = 0;
  if (v60)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8062A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
    WTF::RefCounted<WebCore::HistoryItem>::deref(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D8062B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1D8062BB0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1D8062F3C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8062F50(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8062F64(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8062F78(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8062F8C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8063060(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1D80634B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::DragData::~DragData(WebCore::DragData *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 11);
    if (!(_DWORD)v4)
      goto LABEL_13;
    goto LABEL_7;
  }
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v3, a2);
  v4 = *((unsigned int *)this + 11);
  if (!(_DWORD)v4)
    goto LABEL_13;
LABEL_7:
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  v6 = 8 * v4;
  do
  {
    v7 = *v5;
    *v5 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    ++v5;
    v6 -= 8;
  }
  while (v6);
LABEL_13:
  v8 = (WTF *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v8, a2);
  }
}

void sub_1D80637F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8063A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8063B90(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::DragData::~DragData((WebCore::DragData *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D8063F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::TextIndicatorData::~TextIndicatorData(WebCore::TextIndicatorData *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  WTF *v10;

  v3 = *((_QWORD *)this + 12);
  if ((v3 & 0x8000000000000) == 0)
    goto LABEL_5;
  v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
    v7 = (_DWORD *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (_DWORD *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (!v7)
      goto LABEL_9;
  }
  if (v7[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  else
    --v7[2];
LABEL_9:
  v8 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
  {
    if (v8[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      v9 = (_DWORD *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = 0;
      if (!v9)
        goto LABEL_17;
      goto LABEL_15;
    }
    --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (!v9)
  {
LABEL_17:
    v10 = (WTF *)*((_QWORD *)this + 6);
    if (!v10)
      return;
    goto LABEL_18;
  }
LABEL_15:
  if (v9[2] != 1)
  {
    --v9[2];
    goto LABEL_17;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (WTF *)*((_QWORD *)this + 6);
  if (v10)
  {
LABEL_18:
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v10, a2);
  }
}

void sub_1D80646DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[4] != 1)
    {
      --a10[4];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80647E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::EditingStyle *a10)
{
  if (a10)
    WTF::RefCounted<WebCore::EditingStyle>::deref(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D8064D98(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8064ED4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8065280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
  {
    CFRelease(cf);
    if (!v10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1D8065528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8065574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  if (a9)
  {
    WTF::RefCounted<WebCore::HistoryItem>::deref(a9);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1D806556CLL);
}

void sub_1D8065D80(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 != 2)
    {
      *(_DWORD *)a11 -= 2;
      _Unwind_Resume(exception_object);
    }
    WTF::StringImpl::destroy(a11, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::makeVector<WTF::String>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *result;
  int v5;
  uint64_t v6;
  objc_object *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned __int8 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = (unsigned int *)objc_msgSend(a1, "count");
  v5 = (int)result;
  if (!result)
    goto LABEL_4;
  if (!((unint64_t)result >> 29))
  {
    v6 = WTF::fastMalloc((WTF *)(8 * (_QWORD)result));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
LABEL_4:
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (!v8)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, (StringImpl *)*(unsigned int *)(a2 + 12));
    v9 = *(_QWORD *)v23;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v23 != v9)
          objc_enumerationMutation(a1);
        WTF::makeVectorElement(0, *(const WTF::String **)(*((_QWORD *)&v22 + 1) + 8 * i), v7);
        if (v21)
        {
          v12 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v12 != *(_DWORD *)(a2 + 8))
          {
            v18 = *(_QWORD *)a2;
            v19 = v20;
            v20 = 0;
            *(_QWORD *)(v18 + 8 * v12) = v19;
            *(_DWORD *)(a2 + 12) = v12 + 1;
            v17 = v20;
            v20 = 0;
            if (!v17)
              continue;
LABEL_17:
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v11);
            else
              *(_DWORD *)v17 -= 2;
            continue;
          }
          v13 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v20);
          v14 = *(unsigned int *)(a2 + 12);
          v15 = *(_QWORD *)a2;
          v16 = *v13;
          *v13 = 0;
          *(_QWORD *)(v15 + 8 * v14) = v16;
          LODWORD(v15) = v21;
          *(_DWORD *)(a2 + 12) = v14 + 1;
          if ((_DWORD)v15)
          {
            v17 = v20;
            v20 = 0;
            if (v17)
              goto LABEL_17;
          }
        }
      }
      v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (!v8)
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, (StringImpl *)*(unsigned int *)(a2 + 12));
    }
  }
  __break(0xC471u);
  return result;
}

