void sub_1D8065FE0(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D8065FF4(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D8066008(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D806601C(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  StringImpl *v11;

  std::optional<WTF::String>::~optional((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v11);
  _Unwind_Resume(a1);
}

void sub_1D8066038(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D806604C(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D8067324(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80674A8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a12 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80677A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WebCore::TextResourceDecoder *a15)
{
  uint64_t v15;
  WTF::StringImpl *v17;
  StringImpl *v18;

  v17 = *(WTF::StringImpl **)(v15 - 40);
  *(_QWORD *)(v15 - 40) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref(&a15);
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(a1);
}

WebCore::TextResourceDecoder **WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref(WebCore::TextResourceDecoder **a1)
{
  WebCore::TextResourceDecoder *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebCore::TextResourceDecoder::~TextResourceDecoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void sub_1D8067B78(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8067CEC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8068628(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_1D80688F4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_1D8068C74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (!a13)
    _Unwind_Resume(exception_object);
  WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D8068F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D8068F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D8068F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1D8068F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1D806919C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a14 + 8))(a14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806925C()
{
  JUMPOUT(0x1D806924CLL);
}

void sub_1D8069664(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, a2);
    _Unwind_Resume(exception_object);
  }
  *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1D8069940(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8069B1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  StringImpl *v13;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a12, a2);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D8069D7C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  StringImpl *v13;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a12, a2);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D806A1C4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WebCore::UserScript *a14, WebViewGroup *a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  StringImpl *v18;
  StringImpl *v19;
  StringImpl *v20;
  WTF::StringImpl *v21;

  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100]((WebCore::UserScript **)&a9, a2);
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](&a14, v18);
  WTF::Ref<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>::~Ref(&a15, v19);
  v21 = a16;
  a16 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v20);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v21 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D806A298()
{
  JUMPOUT(0x1D806A260);
}

void sub_1D806A2A0(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  JUMPOUT(0x1D806A268);
}

void sub_1D806A2CC()
{
  JUMPOUT(0x1D806A268);
}

void sub_1D806A5A8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebCore::UserScript *a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, WebCore::UserScript *a18, WebViewGroup *a19, WTF::StringImpl *a20,WTF::StringImpl *a21)
{
  StringImpl *v22;
  StringImpl *v23;
  StringImpl *v24;
  WTF::StringImpl *v25;

  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](&a11, a2);
  std::unique_ptr<WebCore::UserScript>::~unique_ptr[abi:sn180100](&a18, v22);
  WTF::Ref<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>::~Ref(&a19, v23);
  v25 = a20;
  a20 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, v24);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v25 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D806A67C()
{
  JUMPOUT(0x1D806A644);
}

void sub_1D806A684(int a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  JUMPOUT(0x1D806A64CLL);
}

void sub_1D806A6B0()
{
  JUMPOUT(0x1D806A64CLL);
}

void sub_1D806A830(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806AA10(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
    {
      WTF::StringImpl::destroy(a14, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806ABA8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806AD10(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806AE5C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806AF2C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806AFC4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806B060(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806B944(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1D806BE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806C0E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D806C228(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D806C2B0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806C80C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D806C8BC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D806D010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806D868(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806DAC0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806DF2C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806E188(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D806E614(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D806EDE0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D806F108(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Ref<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D806F11C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Ref<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::~Ref(_QWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = result;
  v3 = *result;
  *result = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(const void **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v6)
        CFRelease(v6);
      v7 = *(const void **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v7)
        CFRelease(v7);
      v8 = *(const void **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v8)
        CFRelease(v8);
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
  }
  return result;
}

void sub_1D806F2AC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Ref<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D806F2C0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D806F6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16)
{
  StringImpl *v17;
  WTF::StringImpl *v18;

  std::optional<WebCore::SimpleRange>::~optional(&a16);
  std::optional<WebCore::SimpleRange>::~optional(&a10);
  v18 = a15;
  a15 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v17);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D80702FC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80704C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D8070710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  _Unwind_Resume(a1);
}

void sub_1D8070824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D8070F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref((WebCore::MutableStyleProperties **)va);
  _Unwind_Resume(a1);
}

void sub_1D8071728(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80717E0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::FontAttributes::~FontAttributes((WebCore::FontAttributes *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80717F4(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  uint64_t v3;
  const void *v5;
  va_list va;

  va_start(va, a3);
  v5 = *(const void **)(v3 - 24);
  *(_QWORD *)(v3 - 24) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::FontAttributes::~FontAttributes((WebCore::FontAttributes *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8071DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D8072670(_Unwind_Exception *a1)
{
  _QWORD *v1;
  WebCore::RunLoopObserver **v2;
  WebCore::RunLoopObserver **v3;
  void *v5;
  WTF *WeakPtrBase;
  void *v7;

  std::unique_ptr<WebCore::RunLoopObserver>::~unique_ptr[abi:sn180100](v2);
  std::unique_ptr<WebCore::RunLoopObserver>::~unique_ptr[abi:sn180100](v3);
  WeakPtrBase = (WTF *)WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v1, v5);
  WTF::fastFree(WeakPtrBase, v7);
  _Unwind_Resume(a1);
}

void sub_1D8072880(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1D8072A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D8072B78(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D8073010(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

WTF **WTF::Ref<WebCore::GeolocationError,WTF::RawPtrTraits<WebCore::GeolocationError>,WTF::DefaultRefDerefTraits<WebCore::GeolocationError>>::~Ref(WTF **result, StringImpl *a2)
{
  WTF **v2;
  WTF *v3;
  WTF::StringImpl *v4;
  void *v5;

  v2 = result;
  v3 = *result;
  *result = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, a2);
          WTF::fastFree(v3, v5);
          return v2;
        }
        *(_DWORD *)v4 -= 2;
      }
      WTF::fastFree(v3, a2);
      return v2;
    }
    --*(_DWORD *)v3;
  }
  return result;
}

void sub_1D80732F0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  _DWORD *v12;

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      WTF::RefCounted<WebCore::Page>::deref(v12);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
    WTF::RefCounted<WebCore::Page>::deref(v12);
    _Unwind_Resume(a1);
  }
  WTF::RefCounted<WebCore::Page>::deref(v12);
  _Unwind_Resume(a1);
}

void sub_1D807349C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1D80734B0(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1D8073660(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D8073678(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;

  if (v11)
    CFRelease(v11);
  WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  _Unwind_Resume(a1);
}

WebCore::RunLoopObserver **std::unique_ptr<WebCore::RunLoopObserver>::~unique_ptr[abi:sn180100](WebCore::RunLoopObserver **a1)
{
  WebCore::RunLoopObserver *v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

void WebViewRenderingUpdateScheduler::~WebViewRenderingUpdateScheduler(WebViewRenderingUpdateScheduler *this, void *a2)
{
  WebCore::RunLoopObserver *v3;
  WTF *v4;
  void *v5;
  WebCore::RunLoopObserver *v6;
  WTF *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = (WebCore::RunLoopObserver *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v3);
    WTF::fastFree(v4, v5);
  }
  v6 = (WebCore::RunLoopObserver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v6);
    WTF::fastFree(v7, v8);
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v9 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t ___ZN31WebViewRenderingUpdateScheduler24registerCACommitHandlersEv_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_willStartRenderingUpdateDisplay");
}

uint64_t ___ZN31WebViewRenderingUpdateScheduler24registerCACommitHandlersEv_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didCompleteRenderingUpdateDisplay");
}

void WebCore::UserScript::~UserScript(WebCore::UserScript *this, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 8);
  if (v7)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 15);
  if ((_DWORD)v8)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 6);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 6);
  if (v12)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, a2);
      v14 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = 0;
      if (!v14)
        return;
      goto LABEL_25;
    }
    *(_DWORD *)v13 -= 2;
  }
  v14 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (!v14)
    return;
LABEL_25:
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, a2);
  else
    *(_DWORD *)v14 -= 2;
}

uint64_t PageStorageSessionProvider::storageSession(PageStorageSessionProvider *this)
{
  uint64_t v1;
  WebCore::Page *v2;
  NetworkStorageSessionMap *v3;
  SessionID v5;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(WebCore::Page **)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (NetworkStorageSessionMap *)WebCore::Page::sessionID(v2);
  return NetworkStorageSessionMap::storageSession(v3, v5);
}

void PageStorageSessionProvider::~PageStorageSessionProvider(PageStorageSessionProvider *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
    v6 = this;
  }
  else
  {
LABEL_4:
    v6 = this;
  }
  WTF::fastFree(v6, a2);
}

uint64_t WebCore::CacheStorageProvider::createCacheStorageConnection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E9D6BBB0;
  *a1 = result;
  return result;
}

void WebCore::CacheStorageProvider::DummyCacheStorageConnection::~DummyCacheStorageConnection(WebCore::CacheStorageProvider::DummyCacheStorageConnection *this, void *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E9D6BC38;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    WTF::fastFree((WTF *)(v2 - 16), a2);
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E9D6BC38;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  WTF::fastFree(this, a2);
}

WTF *WebCore::CacheStorageProvider::DummyCacheStorageConnection::open@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  _BYTE *v40;
  _BYTE *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  char v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  NSObject *v55;
  uint64_t v56;
  StringImpl *v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF *result;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  WTF::StringImpl *v88;
  char v89;
  WTF::Logger *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  __int128 buf;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100[3];

  v100[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v86 = 0uLL;
  *(_QWORD *)&v87 = "open";
  *((_QWORD *)&v87 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E9D6BCC0;
  v3 = v87;
  *(_OWORD *)(v2 + 16) = v86;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  v4 = (unsigned __int8 *)(v2 + 48);
  v5 = v2 + 56;
  *(_DWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = v2 + 112;
  *(_QWORD *)(v2 + 104) = 1;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 136) = 0;
  v6 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  v7 = v6;
  if (!*v6 || v6[16] < 4u)
    goto LABEL_78;
  WTF::String::String((WTF::String *)&v95, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v94, v2);
  v8 = v94;
  if (v95)
  {
    v9 = *((_DWORD *)v95 + 1);
    if (v94)
      goto LABEL_5;
  }
  else
  {
    v9 = 0;
    if (v94)
    {
LABEL_5:
      v10 = *((_DWORD *)v94 + 1);
      if ((v10 | v9) < 0)
        goto LABEL_194;
      goto LABEL_9;
    }
  }
  v10 = 0;
  if (v9 < 0)
  {
LABEL_194:
    __break(0xC471u);
LABEL_195:
    JUMPOUT(0x1D8074530);
  }
LABEL_9:
  v11 = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_194;
  if (!v95)
  {
    if (!v94)
    {
      v13 = 1;
      goto LABEL_17;
    }
LABEL_15:
    v13 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  v12 = *((_DWORD *)v95 + 4);
  v13 = (v12 >> 2) & 1;
  if (v94 && (v12 & 4) != 0)
    goto LABEL_15;
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v11, v13, (uint64_t)v95, (uint64_t)v94, &buf);
  v88 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_194;
  v94 = 0;
  if (!v8)
    goto LABEL_21;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_21:
    v15 = v95;
    v95 = 0;
    if (!v15)
      goto LABEL_26;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v8, v14);
  v15 = v95;
  v95 = 0;
  if (!v15)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v14);
    v16 = *((_QWORD *)v7 + 4);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_35;
    goto LABEL_29;
  }
  *(_DWORD *)v15 -= 2;
LABEL_26:
  v16 = *((_QWORD *)v7 + 4);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_35;
LABEL_29:
  WTF::String::utf8();
  if (v90)
    v19 = (char *)v90 + 16;
  else
    v19 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v17 = (uint64_t)v90;
  v90 = 0;
  if (!v17)
  {
LABEL_35:
    if (!*v7)
      goto LABEL_75;
    goto LABEL_36;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_35;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*v7)
    goto LABEL_75;
LABEL_36:
  if (v7[16] < 4u)
    goto LABEL_75;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_75;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v85 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      LODWORD(buf) = 0;
      WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
      v97 = 0;
      WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v98, v2);
      v90 = 0;
      v91 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
      LODWORD(v91) = 2;
      v90 = v27;
      v28 = HIDWORD(v91);
      *((_DWORD *)v27 + 4 * HIDWORD(v91)) = buf;
      v29 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v97;
      v30 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      HIDWORD(v91) = v28 + 2;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, v7, 4, &v90);
      v31 = v90;
      if (HIDWORD(v91))
      {
        v32 = 16 * HIDWORD(v91);
        v33 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v34 = *v33;
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v18);
            else
              *(_DWORD *)v34 -= 2;
          }
          v33 += 2;
          v32 -= 16;
        }
        while (v32);
        v31 = v90;
      }
      if (v31)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v31, v18);
      }
      v35 = v98;
      v98 = 0;
      if (!v35)
        goto LABEL_63;
      if (*(_DWORD *)v35 != 2)
        break;
      WTF::StringImpl::destroy(v35, v18);
      v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v36)
      {
LABEL_66:
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v18);
        else
          *(_DWORD *)v36 -= 2;
      }
LABEL_45:
      if (++v25 == (uint64_t *)v85)
        goto LABEL_70;
    }
    *(_DWORD *)v35 -= 2;
LABEL_63:
    v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v36)
      goto LABEL_66;
    goto LABEL_45;
  }
LABEL_70:
  v37 = __ldxr(v20);
  if (v37 != 1)
  {
    __clrex();
    v5 = v2 + 56;
    goto LABEL_74;
  }
  v5 = v2 + 56;
  if (__stlxr(0, v20))
LABEL_74:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_75:
  v6 = (unsigned __int8 *)v88;
  v88 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      v6 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, v18);
      *a1 = v2;
      v88 = (WTF::StringImpl *)(v2 + 48);
      v89 = 1;
      if (__ldaxr(v4))
        goto LABEL_79;
      goto LABEL_81;
    }
    *(_DWORD *)v6 -= 2;
  }
LABEL_78:
  *a1 = v2;
  v88 = (WTF::StringImpl *)(v2 + 48);
  v89 = 1;
  if (__ldaxr(v4))
  {
LABEL_79:
    __clrex();
LABEL_82:
    v6 = (unsigned __int8 *)MEMORY[0x1D82A3914](v4);
    goto LABEL_83;
  }
LABEL_81:
  if (__stxr(1u, v4))
    goto LABEL_82;
LABEL_83:
  v40 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  v41 = v40;
  if (!*v40 || v40[16] < 4u)
  {
LABEL_182:
    v80 = *(unsigned int *)(v2 + 88);
    if ((_DWORD)v80 == -1)
      goto LABEL_184;
    goto LABEL_183;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
  WTF::String::String((WTF::String *)&v93, " rejecting ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v92, v2);
  v42 = (WTF::StringImpl *)v92;
  if (v94)
  {
    v43 = *((_DWORD *)v94 + 1);
    if (v93)
      goto LABEL_87;
  }
  else
  {
    v43 = 0;
    if (v93)
    {
LABEL_87:
      v44 = *((_DWORD *)v93 + 1);
      if (v92)
        goto LABEL_88;
      goto LABEL_92;
    }
  }
  v44 = 0;
  if (v92)
  {
LABEL_88:
    v45 = *(_DWORD *)(v92 + 4);
    if ((v45 | v44) < 0)
      goto LABEL_193;
    goto LABEL_93;
  }
LABEL_92:
  v45 = 0;
  if (v44 < 0)
  {
LABEL_193:
    __break(0xC471u);
    goto LABEL_195;
  }
LABEL_93:
  v46 = __OFADD__(v44, v45);
  v47 = v44 + v45;
  v48 = v46;
  if (v43 < 0)
    goto LABEL_193;
  if ((v48 & 1) != 0)
    goto LABEL_193;
  v49 = v43 + v47;
  if (__OFADD__(v43, v47))
    goto LABEL_193;
  if (v94 && (*((_BYTE *)v94 + 16) & 4) == 0)
  {
    v50 = 0;
    goto LABEL_109;
  }
  if (!v93)
  {
    if (!v92)
    {
      v50 = 1;
      goto LABEL_109;
    }
LABEL_107:
    v50 = (*(unsigned __int8 *)(v92 + 16) >> 2) & 1;
    goto LABEL_109;
  }
  v51 = *((_DWORD *)v93 + 4);
  v50 = (v51 >> 2) & 1;
  if (v92 && (v51 & 4) != 0)
    goto LABEL_107;
LABEL_109:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v49, v50, (uint64_t)v94, (uint64_t)v93, v92);
  v95 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_193;
  v92 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::destroy(v42, v52);
      v53 = v93;
      v93 = 0;
      if (!v53)
        goto LABEL_118;
      goto LABEL_116;
    }
    *(_DWORD *)v42 -= 2;
  }
  v53 = v93;
  v93 = 0;
  if (!v53)
  {
LABEL_118:
    v54 = v94;
    v94 = 0;
    if (!v54)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_116:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_118;
  }
  WTF::StringImpl::destroy(v53, v52);
  v54 = v94;
  v94 = 0;
  if (!v54)
    goto LABEL_123;
LABEL_121:
  if (*(_DWORD *)v54 == 2)
  {
    WTF::StringImpl::destroy(v54, v52);
    v55 = *((_QWORD *)v41 + 4);
    v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v56)
      goto LABEL_132;
    goto LABEL_126;
  }
  *(_DWORD *)v54 -= 2;
LABEL_123:
  v55 = *((_QWORD *)v41 + 4);
  v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v56)
    goto LABEL_132;
LABEL_126:
  WTF::String::utf8();
  if (v90)
    v58 = (char *)v90 + 16;
  else
    v58 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v58;
  _os_log_impl(&dword_1D7FB9000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v56 = (uint64_t)v90;
  v90 = 0;
  if (!v56)
  {
LABEL_132:
    if (!*v41)
      goto LABEL_179;
    goto LABEL_133;
  }
  if (*(_DWORD *)v56 != 1)
  {
    --*(_DWORD *)v56;
    goto LABEL_132;
  }
  v56 = WTF::fastFree((WTF *)v56, v57);
  if (!*v41)
    goto LABEL_179;
LABEL_133:
  if (v41[16] < 4u)
    goto LABEL_179;
  v59 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v60 = *v59;
      if ((v60 & 1) != 0)
        goto LABEL_179;
      v61 = __ldaxr(v59);
      if (v61 == v60)
        break;
      __clrex();
    }
  }
  while (__stxr(v60 | 1, v59));
  v83 = v5;
  v62 = WTF::Logger::observers((WTF::Logger *)v56);
  v63 = *(unsigned int *)(v62 + 12);
  if ((_DWORD)v63)
  {
    v64 = *(uint64_t **)v62;
    v84 = *(_QWORD *)v62 + 8 * v63;
    while (1)
    {
      v65 = *v64;
      LODWORD(buf) = 0;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
      v97 = 0;
      WTF::String::String((WTF::String *)&v98, " rejecting ");
      v99 = 0;
      WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(v100, v2);
      v90 = 0;
      v91 = 0;
      v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
      LODWORD(v91) = 3;
      v90 = v66;
      v67 = HIDWORD(v91);
      *((_DWORD *)v66 + 4 * HIDWORD(v91)) = buf;
      v68 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v66 + 2 * v67 + 1) = v68;
      *((_DWORD *)v66 + 4 * (v67 + 1)) = v97;
      v69 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
      *((_DWORD *)v66 + 4 * (v67 + 2)) = v99;
      v70 = v100[0];
      if (v100[0])
        *(_DWORD *)v100[0] += 2;
      *((_QWORD *)v66 + 2 * (v67 + 2) + 1) = v70;
      HIDWORD(v91) = v67 + 3;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 16))(v65, v41, 4, &v90);
      v71 = v90;
      if (HIDWORD(v91))
      {
        v72 = 16 * HIDWORD(v91);
        v73 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v74 = *v73;
          *v73 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v57);
            else
              *(_DWORD *)v74 -= 2;
          }
          v73 += 2;
          v72 -= 16;
        }
        while (v72);
        v71 = v90;
      }
      if (v71)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v71, v57);
      }
      v75 = v100[0];
      v100[0] = 0;
      if (!v75)
        goto LABEL_162;
      if (*(_DWORD *)v75 != 2)
        break;
      WTF::StringImpl::destroy(v75, v57);
      v76 = v98;
      v98 = 0;
      if (!v76)
        goto LABEL_167;
LABEL_165:
      if (*(_DWORD *)v76 != 2)
      {
        *(_DWORD *)v76 -= 2;
LABEL_167:
        v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v77)
          goto LABEL_170;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v76, v57);
      v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v77)
      {
LABEL_170:
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v57);
        else
          *(_DWORD *)v77 -= 2;
      }
LABEL_142:
      if (++v64 == (uint64_t *)v84)
        goto LABEL_174;
    }
    *(_DWORD *)v75 -= 2;
LABEL_162:
    v76 = v98;
    v98 = 0;
    if (!v76)
      goto LABEL_167;
    goto LABEL_165;
  }
LABEL_174:
  v78 = __ldxr(v59);
  if (v78 != 1)
  {
    __clrex();
    v5 = v83;
    goto LABEL_178;
  }
  v5 = v83;
  if (__stlxr(0, v59))
LABEL_178:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_179:
  v79 = v95;
  v95 = 0;
  if (!v79)
    goto LABEL_182;
  if (*(_DWORD *)v79 != 2)
  {
    *(_DWORD *)v79 -= 2;
    goto LABEL_182;
  }
  WTF::StringImpl::destroy(v79, v57);
  v80 = *(unsigned int *)(v2 + 88);
  if ((_DWORD)v80 != -1)
LABEL_183:
    ((void (*)(__int128 *, uint64_t))off_1E9D6BCD8[v80])(&buf, v5);
LABEL_184:
  *(_BYTE *)(v2 + 56) = 5;
  *(_DWORD *)(v2 + 80) = 1;
  *(_DWORD *)(v2 + 88) = 1;
  result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (unsigned __int8 **)&v88);
  if (v89)
  {
    result = v88;
    v82 = __ldxr((unsigned __int8 *)v88);
    if (v82 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v88))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1D807453C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF *a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32)
{
  unsigned int *v32;
  unsigned __int8 *v33;
  unsigned int *v34;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v36 = __ldxr(v33);
  if (v36 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_8:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      if (a20)
      {
        v37 = __ldxr((unsigned __int8 *)a19);
        if (v37 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a19))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a19);
      }
LABEL_17:
      *a11 = 0;
      do
      {
        v38 = __ldaxr(v32);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v32));
      if (v39)
        _Unwind_Resume(exception_object);
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WebCore::CacheStorageProvider::DummyCacheStorageConnection::remove@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  _BYTE *v40;
  _BYTE *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  char v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  NSObject *v55;
  uint64_t v56;
  StringImpl *v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF *result;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  WTF::StringImpl *v88;
  char v89;
  WTF::Logger *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  __int128 buf;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100[3];

  v100[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v86 = 0uLL;
  *(_QWORD *)&v87 = "remove";
  *((_QWORD *)&v87 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E9D6BD60;
  v3 = v87;
  *(_OWORD *)(v2 + 16) = v86;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  v4 = (unsigned __int8 *)(v2 + 48);
  v5 = v2 + 56;
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v2 + 88;
  *(_QWORD *)(v2 + 80) = 1;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_WORD *)(v2 + 112) = 0;
  v6 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  v7 = v6;
  if (!*v6 || v6[16] < 4u)
    goto LABEL_78;
  WTF::String::String((WTF::String *)&v95, "creating ");
  WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v94, v2);
  v8 = v94;
  if (v95)
  {
    v9 = *((_DWORD *)v95 + 1);
    if (v94)
      goto LABEL_5;
  }
  else
  {
    v9 = 0;
    if (v94)
    {
LABEL_5:
      v10 = *((_DWORD *)v94 + 1);
      if ((v10 | v9) < 0)
        goto LABEL_194;
      goto LABEL_9;
    }
  }
  v10 = 0;
  if (v9 < 0)
  {
LABEL_194:
    __break(0xC471u);
LABEL_195:
    JUMPOUT(0x1D8075418);
  }
LABEL_9:
  v11 = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_194;
  if (!v95)
  {
    if (!v94)
    {
      v13 = 1;
      goto LABEL_17;
    }
LABEL_15:
    v13 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  v12 = *((_DWORD *)v95 + 4);
  v13 = (v12 >> 2) & 1;
  if (v94 && (v12 & 4) != 0)
    goto LABEL_15;
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v11, v13, (uint64_t)v95, (uint64_t)v94, &buf);
  v88 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_194;
  v94 = 0;
  if (!v8)
    goto LABEL_21;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_21:
    v15 = v95;
    v95 = 0;
    if (!v15)
      goto LABEL_26;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v8, v14);
  v15 = v95;
  v95 = 0;
  if (!v15)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v14);
    v16 = *((_QWORD *)v7 + 4);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_35;
    goto LABEL_29;
  }
  *(_DWORD *)v15 -= 2;
LABEL_26:
  v16 = *((_QWORD *)v7 + 4);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_35;
LABEL_29:
  WTF::String::utf8();
  if (v90)
    v19 = (char *)v90 + 16;
  else
    v19 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v17 = (uint64_t)v90;
  v90 = 0;
  if (!v17)
  {
LABEL_35:
    if (!*v7)
      goto LABEL_75;
    goto LABEL_36;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_35;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*v7)
    goto LABEL_75;
LABEL_36:
  if (v7[16] < 4u)
    goto LABEL_75;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_75;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v85 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      LODWORD(buf) = 0;
      WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
      v97 = 0;
      WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v98, v2);
      v90 = 0;
      v91 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
      LODWORD(v91) = 2;
      v90 = v27;
      v28 = HIDWORD(v91);
      *((_DWORD *)v27 + 4 * HIDWORD(v91)) = buf;
      v29 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v97;
      v30 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      HIDWORD(v91) = v28 + 2;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, v7, 4, &v90);
      v31 = v90;
      if (HIDWORD(v91))
      {
        v32 = 16 * HIDWORD(v91);
        v33 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v34 = *v33;
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v18);
            else
              *(_DWORD *)v34 -= 2;
          }
          v33 += 2;
          v32 -= 16;
        }
        while (v32);
        v31 = v90;
      }
      if (v31)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v31, v18);
      }
      v35 = v98;
      v98 = 0;
      if (!v35)
        goto LABEL_63;
      if (*(_DWORD *)v35 != 2)
        break;
      WTF::StringImpl::destroy(v35, v18);
      v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v36)
      {
LABEL_66:
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v18);
        else
          *(_DWORD *)v36 -= 2;
      }
LABEL_45:
      if (++v25 == (uint64_t *)v85)
        goto LABEL_70;
    }
    *(_DWORD *)v35 -= 2;
LABEL_63:
    v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v36)
      goto LABEL_66;
    goto LABEL_45;
  }
LABEL_70:
  v37 = __ldxr(v20);
  if (v37 != 1)
  {
    __clrex();
    v5 = v2 + 56;
    goto LABEL_74;
  }
  v5 = v2 + 56;
  if (__stlxr(0, v20))
LABEL_74:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_75:
  v6 = (unsigned __int8 *)v88;
  v88 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      v6 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, v18);
      *a1 = v2;
      v88 = (WTF::StringImpl *)(v2 + 48);
      v89 = 1;
      if (__ldaxr(v4))
        goto LABEL_79;
      goto LABEL_81;
    }
    *(_DWORD *)v6 -= 2;
  }
LABEL_78:
  *a1 = v2;
  v88 = (WTF::StringImpl *)(v2 + 48);
  v89 = 1;
  if (__ldaxr(v4))
  {
LABEL_79:
    __clrex();
LABEL_82:
    v6 = (unsigned __int8 *)MEMORY[0x1D82A3914](v4);
    goto LABEL_83;
  }
LABEL_81:
  if (__stxr(1u, v4))
    goto LABEL_82;
LABEL_83:
  v40 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  v41 = v40;
  if (!*v40 || v40[16] < 4u)
  {
LABEL_182:
    v80 = *(unsigned int *)(v2 + 64);
    if ((_DWORD)v80 == -1)
      goto LABEL_184;
    goto LABEL_183;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
  WTF::String::String((WTF::String *)&v93, " rejecting ");
  WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v92, v2);
  v42 = (WTF::StringImpl *)v92;
  if (v94)
  {
    v43 = *((_DWORD *)v94 + 1);
    if (v93)
      goto LABEL_87;
  }
  else
  {
    v43 = 0;
    if (v93)
    {
LABEL_87:
      v44 = *((_DWORD *)v93 + 1);
      if (v92)
        goto LABEL_88;
      goto LABEL_92;
    }
  }
  v44 = 0;
  if (v92)
  {
LABEL_88:
    v45 = *(_DWORD *)(v92 + 4);
    if ((v45 | v44) < 0)
      goto LABEL_193;
    goto LABEL_93;
  }
LABEL_92:
  v45 = 0;
  if (v44 < 0)
  {
LABEL_193:
    __break(0xC471u);
    goto LABEL_195;
  }
LABEL_93:
  v46 = __OFADD__(v44, v45);
  v47 = v44 + v45;
  v48 = v46;
  if (v43 < 0)
    goto LABEL_193;
  if ((v48 & 1) != 0)
    goto LABEL_193;
  v49 = v43 + v47;
  if (__OFADD__(v43, v47))
    goto LABEL_193;
  if (v94 && (*((_BYTE *)v94 + 16) & 4) == 0)
  {
    v50 = 0;
    goto LABEL_109;
  }
  if (!v93)
  {
    if (!v92)
    {
      v50 = 1;
      goto LABEL_109;
    }
LABEL_107:
    v50 = (*(unsigned __int8 *)(v92 + 16) >> 2) & 1;
    goto LABEL_109;
  }
  v51 = *((_DWORD *)v93 + 4);
  v50 = (v51 >> 2) & 1;
  if (v92 && (v51 & 4) != 0)
    goto LABEL_107;
LABEL_109:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v49, v50, (uint64_t)v94, (uint64_t)v93, v92);
  v95 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_193;
  v92 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::destroy(v42, v52);
      v53 = v93;
      v93 = 0;
      if (!v53)
        goto LABEL_118;
      goto LABEL_116;
    }
    *(_DWORD *)v42 -= 2;
  }
  v53 = v93;
  v93 = 0;
  if (!v53)
  {
LABEL_118:
    v54 = v94;
    v94 = 0;
    if (!v54)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_116:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_118;
  }
  WTF::StringImpl::destroy(v53, v52);
  v54 = v94;
  v94 = 0;
  if (!v54)
    goto LABEL_123;
LABEL_121:
  if (*(_DWORD *)v54 == 2)
  {
    WTF::StringImpl::destroy(v54, v52);
    v55 = *((_QWORD *)v41 + 4);
    v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v56)
      goto LABEL_132;
    goto LABEL_126;
  }
  *(_DWORD *)v54 -= 2;
LABEL_123:
  v55 = *((_QWORD *)v41 + 4);
  v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v56)
    goto LABEL_132;
LABEL_126:
  WTF::String::utf8();
  if (v90)
    v58 = (char *)v90 + 16;
  else
    v58 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v58;
  _os_log_impl(&dword_1D7FB9000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v56 = (uint64_t)v90;
  v90 = 0;
  if (!v56)
  {
LABEL_132:
    if (!*v41)
      goto LABEL_179;
    goto LABEL_133;
  }
  if (*(_DWORD *)v56 != 1)
  {
    --*(_DWORD *)v56;
    goto LABEL_132;
  }
  v56 = WTF::fastFree((WTF *)v56, v57);
  if (!*v41)
    goto LABEL_179;
LABEL_133:
  if (v41[16] < 4u)
    goto LABEL_179;
  v59 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v60 = *v59;
      if ((v60 & 1) != 0)
        goto LABEL_179;
      v61 = __ldaxr(v59);
      if (v61 == v60)
        break;
      __clrex();
    }
  }
  while (__stxr(v60 | 1, v59));
  v83 = v5;
  v62 = WTF::Logger::observers((WTF::Logger *)v56);
  v63 = *(unsigned int *)(v62 + 12);
  if ((_DWORD)v63)
  {
    v64 = *(uint64_t **)v62;
    v84 = *(_QWORD *)v62 + 8 * v63;
    while (1)
    {
      v65 = *v64;
      LODWORD(buf) = 0;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
      v97 = 0;
      WTF::String::String((WTF::String *)&v98, " rejecting ");
      v99 = 0;
      WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(v100, v2);
      v90 = 0;
      v91 = 0;
      v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
      LODWORD(v91) = 3;
      v90 = v66;
      v67 = HIDWORD(v91);
      *((_DWORD *)v66 + 4 * HIDWORD(v91)) = buf;
      v68 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v66 + 2 * v67 + 1) = v68;
      *((_DWORD *)v66 + 4 * (v67 + 1)) = v97;
      v69 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
      *((_DWORD *)v66 + 4 * (v67 + 2)) = v99;
      v70 = v100[0];
      if (v100[0])
        *(_DWORD *)v100[0] += 2;
      *((_QWORD *)v66 + 2 * (v67 + 2) + 1) = v70;
      HIDWORD(v91) = v67 + 3;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 16))(v65, v41, 4, &v90);
      v71 = v90;
      if (HIDWORD(v91))
      {
        v72 = 16 * HIDWORD(v91);
        v73 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v74 = *v73;
          *v73 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v57);
            else
              *(_DWORD *)v74 -= 2;
          }
          v73 += 2;
          v72 -= 16;
        }
        while (v72);
        v71 = v90;
      }
      if (v71)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v71, v57);
      }
      v75 = v100[0];
      v100[0] = 0;
      if (!v75)
        goto LABEL_162;
      if (*(_DWORD *)v75 != 2)
        break;
      WTF::StringImpl::destroy(v75, v57);
      v76 = v98;
      v98 = 0;
      if (!v76)
        goto LABEL_167;
LABEL_165:
      if (*(_DWORD *)v76 != 2)
      {
        *(_DWORD *)v76 -= 2;
LABEL_167:
        v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v77)
          goto LABEL_170;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v76, v57);
      v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v77)
      {
LABEL_170:
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v57);
        else
          *(_DWORD *)v77 -= 2;
      }
LABEL_142:
      if (++v64 == (uint64_t *)v84)
        goto LABEL_174;
    }
    *(_DWORD *)v75 -= 2;
LABEL_162:
    v76 = v98;
    v98 = 0;
    if (!v76)
      goto LABEL_167;
    goto LABEL_165;
  }
LABEL_174:
  v78 = __ldxr(v59);
  if (v78 != 1)
  {
    __clrex();
    v5 = v83;
    goto LABEL_178;
  }
  v5 = v83;
  if (__stlxr(0, v59))
LABEL_178:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_179:
  v79 = v95;
  v95 = 0;
  if (!v79)
    goto LABEL_182;
  if (*(_DWORD *)v79 != 2)
  {
    *(_DWORD *)v79 -= 2;
    goto LABEL_182;
  }
  WTF::StringImpl::destroy(v79, v57);
  v80 = *(unsigned int *)(v2 + 64);
  if ((_DWORD)v80 != -1)
LABEL_183:
    ((void (*)(__int128 *, uint64_t))off_1E9D6BD78[v80])(&buf, v5);
LABEL_184:
  *(_BYTE *)(v2 + 56) = 5;
  *(_QWORD *)(v2 + 60) = 0x100000001;
  result = WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (unsigned __int8 **)&v88);
  if (v89)
  {
    result = v88;
    v82 = __ldxr((unsigned __int8 *)v88);
    if (v82 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v88))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1D8075424(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF *a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32)
{
  unsigned int *v32;
  unsigned __int8 *v33;
  unsigned int *v34;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v36 = __ldxr(v33);
  if (v36 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_8:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      if (a20)
      {
        v37 = __ldxr((unsigned __int8 *)a19);
        if (v37 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a19))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a19);
      }
LABEL_17:
      *a11 = 0;
      do
      {
        v38 = __ldaxr(v32);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v32));
      if (v39)
        _Unwind_Resume(exception_object);
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WebCore::CacheStorageProvider::DummyCacheStorageConnection::retrieveCaches@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  _BYTE *v40;
  _BYTE *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  char v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  NSObject *v55;
  uint64_t v56;
  StringImpl *v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF *result;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  WTF::StringImpl *v88;
  char v89;
  WTF::Logger *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  __int128 buf;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100[3];

  v100[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v86 = 0uLL;
  *(_QWORD *)&v87 = "retrieveCaches";
  *((_QWORD *)&v87 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E9D6BE00;
  v3 = v87;
  *(_OWORD *)(v2 + 16) = v86;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  v4 = (unsigned __int8 *)(v2 + 48);
  v5 = v2 + 56;
  *(_DWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = v2 + 112;
  *(_QWORD *)(v2 + 104) = 1;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 136) = 0;
  v6 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  v7 = v6;
  if (!*v6 || v6[16] < 4u)
    goto LABEL_78;
  WTF::String::String((WTF::String *)&v95, "creating ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v94, v2);
  v8 = v94;
  if (v95)
  {
    v9 = *((_DWORD *)v95 + 1);
    if (v94)
      goto LABEL_5;
  }
  else
  {
    v9 = 0;
    if (v94)
    {
LABEL_5:
      v10 = *((_DWORD *)v94 + 1);
      if ((v10 | v9) < 0)
        goto LABEL_194;
      goto LABEL_9;
    }
  }
  v10 = 0;
  if (v9 < 0)
  {
LABEL_194:
    __break(0xC471u);
LABEL_195:
    JUMPOUT(0x1D8076304);
  }
LABEL_9:
  v11 = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_194;
  if (!v95)
  {
    if (!v94)
    {
      v13 = 1;
      goto LABEL_17;
    }
LABEL_15:
    v13 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  v12 = *((_DWORD *)v95 + 4);
  v13 = (v12 >> 2) & 1;
  if (v94 && (v12 & 4) != 0)
    goto LABEL_15;
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v11, v13, (uint64_t)v95, (uint64_t)v94, &buf);
  v88 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_194;
  v94 = 0;
  if (!v8)
    goto LABEL_21;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_21:
    v15 = v95;
    v95 = 0;
    if (!v15)
      goto LABEL_26;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v8, v14);
  v15 = v95;
  v95 = 0;
  if (!v15)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v14);
    v16 = *((_QWORD *)v7 + 4);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_35;
    goto LABEL_29;
  }
  *(_DWORD *)v15 -= 2;
LABEL_26:
  v16 = *((_QWORD *)v7 + 4);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_35;
LABEL_29:
  WTF::String::utf8();
  if (v90)
    v19 = (char *)v90 + 16;
  else
    v19 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v17 = (uint64_t)v90;
  v90 = 0;
  if (!v17)
  {
LABEL_35:
    if (!*v7)
      goto LABEL_75;
    goto LABEL_36;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_35;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*v7)
    goto LABEL_75;
LABEL_36:
  if (v7[16] < 4u)
    goto LABEL_75;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_75;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v85 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      LODWORD(buf) = 0;
      WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
      v97 = 0;
      WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v98, v2);
      v90 = 0;
      v91 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
      LODWORD(v91) = 2;
      v90 = v27;
      v28 = HIDWORD(v91);
      *((_DWORD *)v27 + 4 * HIDWORD(v91)) = buf;
      v29 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v97;
      v30 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      HIDWORD(v91) = v28 + 2;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, v7, 4, &v90);
      v31 = v90;
      if (HIDWORD(v91))
      {
        v32 = 16 * HIDWORD(v91);
        v33 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v34 = *v33;
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v18);
            else
              *(_DWORD *)v34 -= 2;
          }
          v33 += 2;
          v32 -= 16;
        }
        while (v32);
        v31 = v90;
      }
      if (v31)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v31, v18);
      }
      v35 = v98;
      v98 = 0;
      if (!v35)
        goto LABEL_63;
      if (*(_DWORD *)v35 != 2)
        break;
      WTF::StringImpl::destroy(v35, v18);
      v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v36)
      {
LABEL_66:
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v18);
        else
          *(_DWORD *)v36 -= 2;
      }
LABEL_45:
      if (++v25 == (uint64_t *)v85)
        goto LABEL_70;
    }
    *(_DWORD *)v35 -= 2;
LABEL_63:
    v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v36)
      goto LABEL_66;
    goto LABEL_45;
  }
LABEL_70:
  v37 = __ldxr(v20);
  if (v37 != 1)
  {
    __clrex();
    v5 = v2 + 56;
    goto LABEL_74;
  }
  v5 = v2 + 56;
  if (__stlxr(0, v20))
LABEL_74:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_75:
  v6 = (unsigned __int8 *)v88;
  v88 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      v6 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, v18);
      *a1 = v2;
      v88 = (WTF::StringImpl *)(v2 + 48);
      v89 = 1;
      if (__ldaxr(v4))
        goto LABEL_79;
      goto LABEL_81;
    }
    *(_DWORD *)v6 -= 2;
  }
LABEL_78:
  *a1 = v2;
  v88 = (WTF::StringImpl *)(v2 + 48);
  v89 = 1;
  if (__ldaxr(v4))
  {
LABEL_79:
    __clrex();
LABEL_82:
    v6 = (unsigned __int8 *)MEMORY[0x1D82A3914](v4);
    goto LABEL_83;
  }
LABEL_81:
  if (__stxr(1u, v4))
    goto LABEL_82;
LABEL_83:
  v40 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  v41 = v40;
  if (!*v40 || v40[16] < 4u)
  {
LABEL_182:
    v80 = *(unsigned int *)(v2 + 88);
    if ((_DWORD)v80 == -1)
      goto LABEL_184;
    goto LABEL_183;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
  WTF::String::String((WTF::String *)&v93, " rejecting ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v92, v2);
  v42 = (WTF::StringImpl *)v92;
  if (v94)
  {
    v43 = *((_DWORD *)v94 + 1);
    if (v93)
      goto LABEL_87;
  }
  else
  {
    v43 = 0;
    if (v93)
    {
LABEL_87:
      v44 = *((_DWORD *)v93 + 1);
      if (v92)
        goto LABEL_88;
      goto LABEL_92;
    }
  }
  v44 = 0;
  if (v92)
  {
LABEL_88:
    v45 = *(_DWORD *)(v92 + 4);
    if ((v45 | v44) < 0)
      goto LABEL_193;
    goto LABEL_93;
  }
LABEL_92:
  v45 = 0;
  if (v44 < 0)
  {
LABEL_193:
    __break(0xC471u);
    goto LABEL_195;
  }
LABEL_93:
  v46 = __OFADD__(v44, v45);
  v47 = v44 + v45;
  v48 = v46;
  if (v43 < 0)
    goto LABEL_193;
  if ((v48 & 1) != 0)
    goto LABEL_193;
  v49 = v43 + v47;
  if (__OFADD__(v43, v47))
    goto LABEL_193;
  if (v94 && (*((_BYTE *)v94 + 16) & 4) == 0)
  {
    v50 = 0;
    goto LABEL_109;
  }
  if (!v93)
  {
    if (!v92)
    {
      v50 = 1;
      goto LABEL_109;
    }
LABEL_107:
    v50 = (*(unsigned __int8 *)(v92 + 16) >> 2) & 1;
    goto LABEL_109;
  }
  v51 = *((_DWORD *)v93 + 4);
  v50 = (v51 >> 2) & 1;
  if (v92 && (v51 & 4) != 0)
    goto LABEL_107;
LABEL_109:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v49, v50, (uint64_t)v94, (uint64_t)v93, v92);
  v95 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_193;
  v92 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::destroy(v42, v52);
      v53 = v93;
      v93 = 0;
      if (!v53)
        goto LABEL_118;
      goto LABEL_116;
    }
    *(_DWORD *)v42 -= 2;
  }
  v53 = v93;
  v93 = 0;
  if (!v53)
  {
LABEL_118:
    v54 = v94;
    v94 = 0;
    if (!v54)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_116:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_118;
  }
  WTF::StringImpl::destroy(v53, v52);
  v54 = v94;
  v94 = 0;
  if (!v54)
    goto LABEL_123;
LABEL_121:
  if (*(_DWORD *)v54 == 2)
  {
    WTF::StringImpl::destroy(v54, v52);
    v55 = *((_QWORD *)v41 + 4);
    v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v56)
      goto LABEL_132;
    goto LABEL_126;
  }
  *(_DWORD *)v54 -= 2;
LABEL_123:
  v55 = *((_QWORD *)v41 + 4);
  v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v56)
    goto LABEL_132;
LABEL_126:
  WTF::String::utf8();
  if (v90)
    v58 = (char *)v90 + 16;
  else
    v58 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v58;
  _os_log_impl(&dword_1D7FB9000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v56 = (uint64_t)v90;
  v90 = 0;
  if (!v56)
  {
LABEL_132:
    if (!*v41)
      goto LABEL_179;
    goto LABEL_133;
  }
  if (*(_DWORD *)v56 != 1)
  {
    --*(_DWORD *)v56;
    goto LABEL_132;
  }
  v56 = WTF::fastFree((WTF *)v56, v57);
  if (!*v41)
    goto LABEL_179;
LABEL_133:
  if (v41[16] < 4u)
    goto LABEL_179;
  v59 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v60 = *v59;
      if ((v60 & 1) != 0)
        goto LABEL_179;
      v61 = __ldaxr(v59);
      if (v61 == v60)
        break;
      __clrex();
    }
  }
  while (__stxr(v60 | 1, v59));
  v83 = v5;
  v62 = WTF::Logger::observers((WTF::Logger *)v56);
  v63 = *(unsigned int *)(v62 + 12);
  if ((_DWORD)v63)
  {
    v64 = *(uint64_t **)v62;
    v84 = *(_QWORD *)v62 + 8 * v63;
    while (1)
    {
      v65 = *v64;
      LODWORD(buf) = 0;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
      v97 = 0;
      WTF::String::String((WTF::String *)&v98, " rejecting ");
      v99 = 0;
      WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(v100, v2);
      v90 = 0;
      v91 = 0;
      v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
      LODWORD(v91) = 3;
      v90 = v66;
      v67 = HIDWORD(v91);
      *((_DWORD *)v66 + 4 * HIDWORD(v91)) = buf;
      v68 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v66 + 2 * v67 + 1) = v68;
      *((_DWORD *)v66 + 4 * (v67 + 1)) = v97;
      v69 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
      *((_DWORD *)v66 + 4 * (v67 + 2)) = v99;
      v70 = v100[0];
      if (v100[0])
        *(_DWORD *)v100[0] += 2;
      *((_QWORD *)v66 + 2 * (v67 + 2) + 1) = v70;
      HIDWORD(v91) = v67 + 3;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 16))(v65, v41, 4, &v90);
      v71 = v90;
      if (HIDWORD(v91))
      {
        v72 = 16 * HIDWORD(v91);
        v73 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v74 = *v73;
          *v73 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v57);
            else
              *(_DWORD *)v74 -= 2;
          }
          v73 += 2;
          v72 -= 16;
        }
        while (v72);
        v71 = v90;
      }
      if (v71)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v71, v57);
      }
      v75 = v100[0];
      v100[0] = 0;
      if (!v75)
        goto LABEL_162;
      if (*(_DWORD *)v75 != 2)
        break;
      WTF::StringImpl::destroy(v75, v57);
      v76 = v98;
      v98 = 0;
      if (!v76)
        goto LABEL_167;
LABEL_165:
      if (*(_DWORD *)v76 != 2)
      {
        *(_DWORD *)v76 -= 2;
LABEL_167:
        v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v77)
          goto LABEL_170;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v76, v57);
      v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v77)
      {
LABEL_170:
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v57);
        else
          *(_DWORD *)v77 -= 2;
      }
LABEL_142:
      if (++v64 == (uint64_t *)v84)
        goto LABEL_174;
    }
    *(_DWORD *)v75 -= 2;
LABEL_162:
    v76 = v98;
    v98 = 0;
    if (!v76)
      goto LABEL_167;
    goto LABEL_165;
  }
LABEL_174:
  v78 = __ldxr(v59);
  if (v78 != 1)
  {
    __clrex();
    v5 = v83;
    goto LABEL_178;
  }
  v5 = v83;
  if (__stlxr(0, v59))
LABEL_178:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_179:
  v79 = v95;
  v95 = 0;
  if (!v79)
    goto LABEL_182;
  if (*(_DWORD *)v79 != 2)
  {
    *(_DWORD *)v79 -= 2;
    goto LABEL_182;
  }
  WTF::StringImpl::destroy(v79, v57);
  v80 = *(unsigned int *)(v2 + 88);
  if ((_DWORD)v80 != -1)
LABEL_183:
    ((void (*)(__int128 *, uint64_t))off_1E9D6BE18[v80])(&buf, v5);
LABEL_184:
  *(_BYTE *)(v2 + 56) = 5;
  *(_DWORD *)(v2 + 80) = 1;
  *(_DWORD *)(v2 + 88) = 1;
  result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (unsigned __int8 **)&v88);
  if (v89)
  {
    result = v88;
    v82 = __ldxr((unsigned __int8 *)v88);
    if (v82 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v88))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1D8076310(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF *a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32)
{
  unsigned int *v32;
  unsigned __int8 *v33;
  unsigned int *v34;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v36 = __ldxr(v33);
  if (v36 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_8:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      if (a20)
      {
        v37 = __ldxr((unsigned __int8 *)a19);
        if (v37 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a19))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a19);
      }
LABEL_17:
      *a11 = 0;
      do
      {
        v38 = __ldaxr(v32);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v32));
      if (v39)
        _Unwind_Resume(exception_object);
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WebCore::CacheStorageProvider::DummyCacheStorageConnection::retrieveRecords@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  _BYTE *v40;
  _BYTE *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  char v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  NSObject *v55;
  uint64_t v56;
  StringImpl *v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF *result;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  WTF::StringImpl *v88;
  char v89;
  WTF::Logger *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  __int128 buf;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100[3];

  v100[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v86 = 0uLL;
  *(_QWORD *)&v87 = "retrieveRecords";
  *((_QWORD *)&v87 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E9D6BEC0;
  v3 = v87;
  *(_OWORD *)(v2 + 16) = v86;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  v4 = (unsigned __int8 *)(v2 + 48);
  v5 = v2 + 56;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = v2 + 104;
  *(_QWORD *)(v2 + 96) = 1;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 128) = 0;
  v6 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  v7 = v6;
  if (!*v6 || v6[16] < 4u)
    goto LABEL_78;
  WTF::String::String((WTF::String *)&v95, "creating ");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v94, v2);
  v8 = v94;
  if (v95)
  {
    v9 = *((_DWORD *)v95 + 1);
    if (v94)
      goto LABEL_5;
  }
  else
  {
    v9 = 0;
    if (v94)
    {
LABEL_5:
      v10 = *((_DWORD *)v94 + 1);
      if ((v10 | v9) < 0)
        goto LABEL_194;
      goto LABEL_9;
    }
  }
  v10 = 0;
  if (v9 < 0)
  {
LABEL_194:
    __break(0xC471u);
LABEL_195:
    JUMPOUT(0x1D80771F0);
  }
LABEL_9:
  v11 = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_194;
  if (!v95)
  {
    if (!v94)
    {
      v13 = 1;
      goto LABEL_17;
    }
LABEL_15:
    v13 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  v12 = *((_DWORD *)v95 + 4);
  v13 = (v12 >> 2) & 1;
  if (v94 && (v12 & 4) != 0)
    goto LABEL_15;
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v11, v13, (uint64_t)v95, (uint64_t)v94, &buf);
  v88 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_194;
  v94 = 0;
  if (!v8)
    goto LABEL_21;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_21:
    v15 = v95;
    v95 = 0;
    if (!v15)
      goto LABEL_26;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v8, v14);
  v15 = v95;
  v95 = 0;
  if (!v15)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v14);
    v16 = *((_QWORD *)v7 + 4);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_35;
    goto LABEL_29;
  }
  *(_DWORD *)v15 -= 2;
LABEL_26:
  v16 = *((_QWORD *)v7 + 4);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_35;
LABEL_29:
  WTF::String::utf8();
  if (v90)
    v19 = (char *)v90 + 16;
  else
    v19 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v17 = (uint64_t)v90;
  v90 = 0;
  if (!v17)
  {
LABEL_35:
    if (!*v7)
      goto LABEL_75;
    goto LABEL_36;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_35;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*v7)
    goto LABEL_75;
LABEL_36:
  if (v7[16] < 4u)
    goto LABEL_75;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_75;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v85 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      LODWORD(buf) = 0;
      WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
      v97 = 0;
      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v98, v2);
      v90 = 0;
      v91 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
      LODWORD(v91) = 2;
      v90 = v27;
      v28 = HIDWORD(v91);
      *((_DWORD *)v27 + 4 * HIDWORD(v91)) = buf;
      v29 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v97;
      v30 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      HIDWORD(v91) = v28 + 2;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, v7, 4, &v90);
      v31 = v90;
      if (HIDWORD(v91))
      {
        v32 = 16 * HIDWORD(v91);
        v33 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v34 = *v33;
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v18);
            else
              *(_DWORD *)v34 -= 2;
          }
          v33 += 2;
          v32 -= 16;
        }
        while (v32);
        v31 = v90;
      }
      if (v31)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v31, v18);
      }
      v35 = v98;
      v98 = 0;
      if (!v35)
        goto LABEL_63;
      if (*(_DWORD *)v35 != 2)
        break;
      WTF::StringImpl::destroy(v35, v18);
      v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v36)
      {
LABEL_66:
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v18);
        else
          *(_DWORD *)v36 -= 2;
      }
LABEL_45:
      if (++v25 == (uint64_t *)v85)
        goto LABEL_70;
    }
    *(_DWORD *)v35 -= 2;
LABEL_63:
    v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v36)
      goto LABEL_66;
    goto LABEL_45;
  }
LABEL_70:
  v37 = __ldxr(v20);
  if (v37 != 1)
  {
    __clrex();
    v5 = v2 + 56;
    goto LABEL_74;
  }
  v5 = v2 + 56;
  if (__stlxr(0, v20))
LABEL_74:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_75:
  v6 = (unsigned __int8 *)v88;
  v88 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      v6 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, v18);
      *a1 = v2;
      v88 = (WTF::StringImpl *)(v2 + 48);
      v89 = 1;
      if (__ldaxr(v4))
        goto LABEL_79;
      goto LABEL_81;
    }
    *(_DWORD *)v6 -= 2;
  }
LABEL_78:
  *a1 = v2;
  v88 = (WTF::StringImpl *)(v2 + 48);
  v89 = 1;
  if (__ldaxr(v4))
  {
LABEL_79:
    __clrex();
LABEL_82:
    v6 = (unsigned __int8 *)MEMORY[0x1D82A3914](v4);
    goto LABEL_83;
  }
LABEL_81:
  if (__stxr(1u, v4))
    goto LABEL_82;
LABEL_83:
  v40 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  v41 = v40;
  if (!*v40 || v40[16] < 4u)
  {
LABEL_182:
    v80 = *(unsigned int *)(v2 + 80);
    if ((_DWORD)v80 == -1)
      goto LABEL_184;
    goto LABEL_183;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
  WTF::String::String((WTF::String *)&v93, " rejecting ");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v92, v2);
  v42 = (WTF::StringImpl *)v92;
  if (v94)
  {
    v43 = *((_DWORD *)v94 + 1);
    if (v93)
      goto LABEL_87;
  }
  else
  {
    v43 = 0;
    if (v93)
    {
LABEL_87:
      v44 = *((_DWORD *)v93 + 1);
      if (v92)
        goto LABEL_88;
      goto LABEL_92;
    }
  }
  v44 = 0;
  if (v92)
  {
LABEL_88:
    v45 = *(_DWORD *)(v92 + 4);
    if ((v45 | v44) < 0)
      goto LABEL_193;
    goto LABEL_93;
  }
LABEL_92:
  v45 = 0;
  if (v44 < 0)
  {
LABEL_193:
    __break(0xC471u);
    goto LABEL_195;
  }
LABEL_93:
  v46 = __OFADD__(v44, v45);
  v47 = v44 + v45;
  v48 = v46;
  if (v43 < 0)
    goto LABEL_193;
  if ((v48 & 1) != 0)
    goto LABEL_193;
  v49 = v43 + v47;
  if (__OFADD__(v43, v47))
    goto LABEL_193;
  if (v94 && (*((_BYTE *)v94 + 16) & 4) == 0)
  {
    v50 = 0;
    goto LABEL_109;
  }
  if (!v93)
  {
    if (!v92)
    {
      v50 = 1;
      goto LABEL_109;
    }
LABEL_107:
    v50 = (*(unsigned __int8 *)(v92 + 16) >> 2) & 1;
    goto LABEL_109;
  }
  v51 = *((_DWORD *)v93 + 4);
  v50 = (v51 >> 2) & 1;
  if (v92 && (v51 & 4) != 0)
    goto LABEL_107;
LABEL_109:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v49, v50, (uint64_t)v94, (uint64_t)v93, v92);
  v95 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_193;
  v92 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::destroy(v42, v52);
      v53 = v93;
      v93 = 0;
      if (!v53)
        goto LABEL_118;
      goto LABEL_116;
    }
    *(_DWORD *)v42 -= 2;
  }
  v53 = v93;
  v93 = 0;
  if (!v53)
  {
LABEL_118:
    v54 = v94;
    v94 = 0;
    if (!v54)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_116:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_118;
  }
  WTF::StringImpl::destroy(v53, v52);
  v54 = v94;
  v94 = 0;
  if (!v54)
    goto LABEL_123;
LABEL_121:
  if (*(_DWORD *)v54 == 2)
  {
    WTF::StringImpl::destroy(v54, v52);
    v55 = *((_QWORD *)v41 + 4);
    v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v56)
      goto LABEL_132;
    goto LABEL_126;
  }
  *(_DWORD *)v54 -= 2;
LABEL_123:
  v55 = *((_QWORD *)v41 + 4);
  v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v56)
    goto LABEL_132;
LABEL_126:
  WTF::String::utf8();
  if (v90)
    v58 = (char *)v90 + 16;
  else
    v58 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v58;
  _os_log_impl(&dword_1D7FB9000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v56 = (uint64_t)v90;
  v90 = 0;
  if (!v56)
  {
LABEL_132:
    if (!*v41)
      goto LABEL_179;
    goto LABEL_133;
  }
  if (*(_DWORD *)v56 != 1)
  {
    --*(_DWORD *)v56;
    goto LABEL_132;
  }
  v56 = WTF::fastFree((WTF *)v56, v57);
  if (!*v41)
    goto LABEL_179;
LABEL_133:
  if (v41[16] < 4u)
    goto LABEL_179;
  v59 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v60 = *v59;
      if ((v60 & 1) != 0)
        goto LABEL_179;
      v61 = __ldaxr(v59);
      if (v61 == v60)
        break;
      __clrex();
    }
  }
  while (__stxr(v60 | 1, v59));
  v83 = v5;
  v62 = WTF::Logger::observers((WTF::Logger *)v56);
  v63 = *(unsigned int *)(v62 + 12);
  if ((_DWORD)v63)
  {
    v64 = *(uint64_t **)v62;
    v84 = *(_QWORD *)v62 + 8 * v63;
    while (1)
    {
      v65 = *v64;
      LODWORD(buf) = 0;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
      v97 = 0;
      WTF::String::String((WTF::String *)&v98, " rejecting ");
      v99 = 0;
      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v100, v2);
      v90 = 0;
      v91 = 0;
      v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
      LODWORD(v91) = 3;
      v90 = v66;
      v67 = HIDWORD(v91);
      *((_DWORD *)v66 + 4 * HIDWORD(v91)) = buf;
      v68 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v66 + 2 * v67 + 1) = v68;
      *((_DWORD *)v66 + 4 * (v67 + 1)) = v97;
      v69 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
      *((_DWORD *)v66 + 4 * (v67 + 2)) = v99;
      v70 = v100[0];
      if (v100[0])
        *(_DWORD *)v100[0] += 2;
      *((_QWORD *)v66 + 2 * (v67 + 2) + 1) = v70;
      HIDWORD(v91) = v67 + 3;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 16))(v65, v41, 4, &v90);
      v71 = v90;
      if (HIDWORD(v91))
      {
        v72 = 16 * HIDWORD(v91);
        v73 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v74 = *v73;
          *v73 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v57);
            else
              *(_DWORD *)v74 -= 2;
          }
          v73 += 2;
          v72 -= 16;
        }
        while (v72);
        v71 = v90;
      }
      if (v71)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v71, v57);
      }
      v75 = v100[0];
      v100[0] = 0;
      if (!v75)
        goto LABEL_162;
      if (*(_DWORD *)v75 != 2)
        break;
      WTF::StringImpl::destroy(v75, v57);
      v76 = v98;
      v98 = 0;
      if (!v76)
        goto LABEL_167;
LABEL_165:
      if (*(_DWORD *)v76 != 2)
      {
        *(_DWORD *)v76 -= 2;
LABEL_167:
        v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v77)
          goto LABEL_170;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v76, v57);
      v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v77)
      {
LABEL_170:
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v57);
        else
          *(_DWORD *)v77 -= 2;
      }
LABEL_142:
      if (++v64 == (uint64_t *)v84)
        goto LABEL_174;
    }
    *(_DWORD *)v75 -= 2;
LABEL_162:
    v76 = v98;
    v98 = 0;
    if (!v76)
      goto LABEL_167;
    goto LABEL_165;
  }
LABEL_174:
  v78 = __ldxr(v59);
  if (v78 != 1)
  {
    __clrex();
    v5 = v83;
    goto LABEL_178;
  }
  v5 = v83;
  if (__stlxr(0, v59))
LABEL_178:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_179:
  v79 = v95;
  v95 = 0;
  if (!v79)
    goto LABEL_182;
  if (*(_DWORD *)v79 != 2)
  {
    *(_DWORD *)v79 -= 2;
    goto LABEL_182;
  }
  WTF::StringImpl::destroy(v79, v57);
  v80 = *(unsigned int *)(v2 + 80);
  if ((_DWORD)v80 != -1)
LABEL_183:
    ((void (*)(__int128 *, uint64_t))off_1E9D6BED8[v80])(&buf, v5);
LABEL_184:
  *(_BYTE *)(v2 + 56) = 5;
  *(_DWORD *)(v2 + 72) = 1;
  *(_DWORD *)(v2 + 80) = 1;
  result = WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (unsigned __int8 **)&v88);
  if (v89)
  {
    result = v88;
    v82 = __ldxr((unsigned __int8 *)v88);
    if (v82 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v88))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1D80771FC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF *a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32)
{
  unsigned int *v32;
  unsigned __int8 *v33;
  unsigned int *v34;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v36 = __ldxr(v33);
  if (v36 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_8:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      if (a20)
      {
        v37 = __ldxr((unsigned __int8 *)a19);
        if (v37 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a19))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a19);
      }
LABEL_17:
      *a11 = 0;
      do
      {
        v38 = __ldaxr(v32);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v32));
      if (v39)
        _Unwind_Resume(exception_object);
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::batchDeleteOperation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v4;
  const char *v5;
  uint64_t v6;
  char v7;

  v7 = 5;
  v4 = 0uLL;
  v5 = "batchDeleteOperation";
  v6 = 0;
  v2 = WTF::fastMalloc((WTF *)0x88);
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v2, &v4);
  *a1 = v2;
  return WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v7, (WTF::Logger::LogSiteIdentifier *)&v4);
}

void sub_1D80776C4(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  _QWORD *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *v2 = 0;
  v4 = v1 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    _Unwind_Resume(exception_object);
  atomic_store(1u, v1 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D8077710(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WTF::Lock *WebCore::CacheStorageProvider::DummyCacheStorageConnection::batchPutOperation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v4;
  const char *v5;
  uint64_t v6;
  char v7;

  v7 = 5;
  v4 = 0uLL;
  v5 = "batchPutOperation";
  v6 = 0;
  v2 = WTF::fastMalloc((WTF *)0x88);
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromise(v2, &v4);
  *a1 = v2;
  return WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(v2, &v7, (WTF::Logger::LogSiteIdentifier *)&v4);
}

void sub_1D8077790(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  _QWORD *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *v2 = 0;
  v4 = v1 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (v6)
    _Unwind_Resume(exception_object);
  atomic_store(1u, v1 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D80777DC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WTF *WebCore::CacheStorageConnection::clearMemoryRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  _BYTE *v40;
  _BYTE *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  char v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  NSObject *v55;
  uint64_t v56;
  StringImpl *v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF *result;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  WTF::StringImpl *v88;
  char v89;
  WTF::Logger *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  __int128 buf;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100[3];

  v100[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v86 = 0uLL;
  *(_QWORD *)&v87 = "clearMemoryRepresentation";
  *((_QWORD *)&v87 + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E9D6C058;
  v3 = v87;
  *(_OWORD *)(v2 + 16) = v86;
  *(_OWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  v4 = (unsigned __int8 *)(v2 + 48);
  v5 = v2 + 56;
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v2 + 88;
  *(_QWORD *)(v2 + 80) = 1;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_WORD *)(v2 + 112) = 0;
  v6 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v2);
  v7 = v6;
  if (!*v6 || v6[16] < 4u)
    goto LABEL_78;
  WTF::String::String((WTF::String *)&v95, "creating ");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v94, v2);
  v8 = v94;
  if (v95)
  {
    v9 = *((_DWORD *)v95 + 1);
    if (v94)
      goto LABEL_5;
  }
  else
  {
    v9 = 0;
    if (v94)
    {
LABEL_5:
      v10 = *((_DWORD *)v94 + 1);
      if ((v10 | v9) < 0)
        goto LABEL_194;
      goto LABEL_9;
    }
  }
  v10 = 0;
  if (v9 < 0)
  {
LABEL_194:
    __break(0xC471u);
LABEL_195:
    JUMPOUT(0x1D8078280);
  }
LABEL_9:
  v11 = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_194;
  if (!v95)
  {
    if (!v94)
    {
      v13 = 1;
      goto LABEL_17;
    }
LABEL_15:
    v13 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  v12 = *((_DWORD *)v95 + 4);
  v13 = (v12 >> 2) & 1;
  if (v94 && (v12 & 4) != 0)
    goto LABEL_15;
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v11, v13, (uint64_t)v95, (uint64_t)v94, &buf);
  v88 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_194;
  v94 = 0;
  if (!v8)
    goto LABEL_21;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_21:
    v15 = v95;
    v95 = 0;
    if (!v15)
      goto LABEL_26;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v8, v14);
  v15 = v95;
  v95 = 0;
  if (!v15)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v14);
    v16 = *((_QWORD *)v7 + 4);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_35;
    goto LABEL_29;
  }
  *(_DWORD *)v15 -= 2;
LABEL_26:
  v16 = *((_QWORD *)v7 + 4);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_35;
LABEL_29:
  WTF::String::utf8();
  if (v90)
    v19 = (char *)v90 + 16;
  else
    v19 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v17 = (uint64_t)v90;
  v90 = 0;
  if (!v17)
  {
LABEL_35:
    if (!*v7)
      goto LABEL_75;
    goto LABEL_36;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_35;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*v7)
    goto LABEL_75;
LABEL_36:
  if (v7[16] < 4u)
    goto LABEL_75;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_75;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v85 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      LODWORD(buf) = 0;
      WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
      v97 = 0;
      WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v98, v2);
      v90 = 0;
      v91 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
      LODWORD(v91) = 2;
      v90 = v27;
      v28 = HIDWORD(v91);
      *((_DWORD *)v27 + 4 * HIDWORD(v91)) = buf;
      v29 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v97;
      v30 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      HIDWORD(v91) = v28 + 2;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, v7, 4, &v90);
      v31 = v90;
      if (HIDWORD(v91))
      {
        v32 = 16 * HIDWORD(v91);
        v33 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v34 = *v33;
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v18);
            else
              *(_DWORD *)v34 -= 2;
          }
          v33 += 2;
          v32 -= 16;
        }
        while (v32);
        v31 = v90;
      }
      if (v31)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v31, v18);
      }
      v35 = v98;
      v98 = 0;
      if (!v35)
        goto LABEL_63;
      if (*(_DWORD *)v35 != 2)
        break;
      WTF::StringImpl::destroy(v35, v18);
      v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v36)
      {
LABEL_66:
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v18);
        else
          *(_DWORD *)v36 -= 2;
      }
LABEL_45:
      if (++v25 == (uint64_t *)v85)
        goto LABEL_70;
    }
    *(_DWORD *)v35 -= 2;
LABEL_63:
    v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v36)
      goto LABEL_66;
    goto LABEL_45;
  }
LABEL_70:
  v37 = __ldxr(v20);
  if (v37 != 1)
  {
    __clrex();
    v5 = v2 + 56;
    goto LABEL_74;
  }
  v5 = v2 + 56;
  if (__stlxr(0, v20))
LABEL_74:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_75:
  v6 = (unsigned __int8 *)v88;
  v88 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      v6 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, v18);
      *a1 = v2;
      v88 = (WTF::StringImpl *)(v2 + 48);
      v89 = 1;
      if (__ldaxr(v4))
        goto LABEL_79;
      goto LABEL_81;
    }
    *(_DWORD *)v6 -= 2;
  }
LABEL_78:
  *a1 = v2;
  v88 = (WTF::StringImpl *)(v2 + 48);
  v89 = 1;
  if (__ldaxr(v4))
  {
LABEL_79:
    __clrex();
LABEL_82:
    v6 = (unsigned __int8 *)MEMORY[0x1D82A3914](v4);
    goto LABEL_83;
  }
LABEL_81:
  if (__stxr(1u, v4))
    goto LABEL_82;
LABEL_83:
  v40 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  v41 = v40;
  if (!*v40 || v40[16] < 4u)
  {
LABEL_182:
    v80 = *(unsigned int *)(v2 + 64);
    if ((_DWORD)v80 == -1)
      goto LABEL_184;
    goto LABEL_183;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
  WTF::String::String((WTF::String *)&v93, " rejecting ");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v92, v2);
  v42 = (WTF::StringImpl *)v92;
  if (v94)
  {
    v43 = *((_DWORD *)v94 + 1);
    if (v93)
      goto LABEL_87;
  }
  else
  {
    v43 = 0;
    if (v93)
    {
LABEL_87:
      v44 = *((_DWORD *)v93 + 1);
      if (v92)
        goto LABEL_88;
      goto LABEL_92;
    }
  }
  v44 = 0;
  if (v92)
  {
LABEL_88:
    v45 = *(_DWORD *)(v92 + 4);
    if ((v45 | v44) < 0)
      goto LABEL_193;
    goto LABEL_93;
  }
LABEL_92:
  v45 = 0;
  if (v44 < 0)
  {
LABEL_193:
    __break(0xC471u);
    goto LABEL_195;
  }
LABEL_93:
  v46 = __OFADD__(v44, v45);
  v47 = v44 + v45;
  v48 = v46;
  if (v43 < 0)
    goto LABEL_193;
  if ((v48 & 1) != 0)
    goto LABEL_193;
  v49 = v43 + v47;
  if (__OFADD__(v43, v47))
    goto LABEL_193;
  if (v94 && (*((_BYTE *)v94 + 16) & 4) == 0)
  {
    v50 = 0;
    goto LABEL_109;
  }
  if (!v93)
  {
    if (!v92)
    {
      v50 = 1;
      goto LABEL_109;
    }
LABEL_107:
    v50 = (*(unsigned __int8 *)(v92 + 16) >> 2) & 1;
    goto LABEL_109;
  }
  v51 = *((_DWORD *)v93 + 4);
  v50 = (v51 >> 2) & 1;
  if (v92 && (v51 & 4) != 0)
    goto LABEL_107;
LABEL_109:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v49, v50, (uint64_t)v94, (uint64_t)v93, v92);
  v95 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_193;
  v92 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::destroy(v42, v52);
      v53 = v93;
      v93 = 0;
      if (!v53)
        goto LABEL_118;
      goto LABEL_116;
    }
    *(_DWORD *)v42 -= 2;
  }
  v53 = v93;
  v93 = 0;
  if (!v53)
  {
LABEL_118:
    v54 = v94;
    v94 = 0;
    if (!v54)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_116:
  if (*(_DWORD *)v53 != 2)
  {
    *(_DWORD *)v53 -= 2;
    goto LABEL_118;
  }
  WTF::StringImpl::destroy(v53, v52);
  v54 = v94;
  v94 = 0;
  if (!v54)
    goto LABEL_123;
LABEL_121:
  if (*(_DWORD *)v54 == 2)
  {
    WTF::StringImpl::destroy(v54, v52);
    v55 = *((_QWORD *)v41 + 4);
    v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v56)
      goto LABEL_132;
    goto LABEL_126;
  }
  *(_DWORD *)v54 -= 2;
LABEL_123:
  v55 = *((_QWORD *)v41 + 4);
  v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v56)
    goto LABEL_132;
LABEL_126:
  WTF::String::utf8();
  if (v90)
    v58 = (char *)v90 + 16;
  else
    v58 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v58;
  _os_log_impl(&dword_1D7FB9000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v56 = (uint64_t)v90;
  v90 = 0;
  if (!v56)
  {
LABEL_132:
    if (!*v41)
      goto LABEL_179;
    goto LABEL_133;
  }
  if (*(_DWORD *)v56 != 1)
  {
    --*(_DWORD *)v56;
    goto LABEL_132;
  }
  v56 = WTF::fastFree((WTF *)v56, v57);
  if (!*v41)
    goto LABEL_179;
LABEL_133:
  if (v41[16] < 4u)
    goto LABEL_179;
  v59 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v60 = *v59;
      if ((v60 & 1) != 0)
        goto LABEL_179;
      v61 = __ldaxr(v59);
      if (v61 == v60)
        break;
      __clrex();
    }
  }
  while (__stxr(v60 | 1, v59));
  v83 = v5;
  v62 = WTF::Logger::observers((WTF::Logger *)v56);
  v63 = *(unsigned int *)(v62 + 12);
  if ((_DWORD)v63)
  {
    v64 = *(uint64_t **)v62;
    v84 = *(_QWORD *)v62 + 8 * v63;
    while (1)
    {
      v65 = *v64;
      LODWORD(buf) = 0;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
      v97 = 0;
      WTF::String::String((WTF::String *)&v98, " rejecting ");
      v99 = 0;
      WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(v100, v2);
      v90 = 0;
      v91 = 0;
      v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
      LODWORD(v91) = 3;
      v90 = v66;
      v67 = HIDWORD(v91);
      *((_DWORD *)v66 + 4 * HIDWORD(v91)) = buf;
      v68 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v66 + 2 * v67 + 1) = v68;
      *((_DWORD *)v66 + 4 * (v67 + 1)) = v97;
      v69 = v98;
      if (v98)
        *(_DWORD *)v98 += 2;
      *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
      *((_DWORD *)v66 + 4 * (v67 + 2)) = v99;
      v70 = v100[0];
      if (v100[0])
        *(_DWORD *)v100[0] += 2;
      *((_QWORD *)v66 + 2 * (v67 + 2) + 1) = v70;
      HIDWORD(v91) = v67 + 3;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 16))(v65, v41, 4, &v90);
      v71 = v90;
      if (HIDWORD(v91))
      {
        v72 = 16 * HIDWORD(v91);
        v73 = (WTF::StringImpl **)((char *)v90 + 8);
        do
        {
          v74 = *v73;
          *v73 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v57);
            else
              *(_DWORD *)v74 -= 2;
          }
          v73 += 2;
          v72 -= 16;
        }
        while (v72);
        v71 = v90;
      }
      if (v71)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v71, v57);
      }
      v75 = v100[0];
      v100[0] = 0;
      if (!v75)
        goto LABEL_162;
      if (*(_DWORD *)v75 != 2)
        break;
      WTF::StringImpl::destroy(v75, v57);
      v76 = v98;
      v98 = 0;
      if (!v76)
        goto LABEL_167;
LABEL_165:
      if (*(_DWORD *)v76 != 2)
      {
        *(_DWORD *)v76 -= 2;
LABEL_167:
        v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v77)
          goto LABEL_170;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v76, v57);
      v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v77)
      {
LABEL_170:
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v57);
        else
          *(_DWORD *)v77 -= 2;
      }
LABEL_142:
      if (++v64 == (uint64_t *)v84)
        goto LABEL_174;
    }
    *(_DWORD *)v75 -= 2;
LABEL_162:
    v76 = v98;
    v98 = 0;
    if (!v76)
      goto LABEL_167;
    goto LABEL_165;
  }
LABEL_174:
  v78 = __ldxr(v59);
  if (v78 != 1)
  {
    __clrex();
    v5 = v83;
    goto LABEL_178;
  }
  v5 = v83;
  if (__stlxr(0, v59))
LABEL_178:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_179:
  v79 = v95;
  v95 = 0;
  if (!v79)
    goto LABEL_182;
  if (*(_DWORD *)v79 != 2)
  {
    *(_DWORD *)v79 -= 2;
    goto LABEL_182;
  }
  WTF::StringImpl::destroy(v79, v57);
  v80 = *(unsigned int *)(v2 + 64);
  if ((_DWORD)v80 != -1)
LABEL_183:
    ((void (*)(__int128 *, uint64_t))off_1E9D6C070[v80])(&buf, v5);
LABEL_184:
  *(_WORD *)(v2 + 56) = 256;
  *(_DWORD *)(v2 + 64) = 1;
  result = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v2, (unsigned __int8 **)&v88);
  if (v89)
  {
    result = v88;
    v82 = __ldxr((unsigned __int8 *)v88);
    if (v82 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v88))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1D807828C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF *a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32)
{
  unsigned int *v32;
  unsigned __int8 *v33;
  unsigned int *v34;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v36 = __ldxr(v33);
  if (v36 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_8:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      if (a20)
      {
        v37 = __ldxr((unsigned __int8 *)a19);
        if (v37 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a19))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a19);
      }
LABEL_17:
      *a11 = 0;
      do
      {
        v38 = __ldaxr(v32);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v32));
      if (v39)
        _Unwind_Resume(exception_object);
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WebCore::CacheStorageConnection::engineRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  __int128 v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  StringImpl *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  _BYTE *v41;
  _BYTE *v42;
  WTF::StringImpl *v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  char v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  NSObject *v56;
  uint64_t v57;
  StringImpl *v58;
  char *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  WTF::Logger *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF *result;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::Logger *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  __int128 buf;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101[3];

  v101[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v87 = 0uLL;
  *(_QWORD *)&v88 = "engineRepresentation";
  *((_QWORD *)&v88 + 1) = 0;
  v3 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E9D6C0D8;
  v4 = v88;
  *(_OWORD *)(v3 + 16) = v87;
  *(_OWORD *)(v3 + 32) = v4;
  *(_BYTE *)(v3 + 48) = 0;
  v5 = (unsigned __int8 *)(v3 + 48);
  v6 = v3 + 56;
  *(_DWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = v3 + 96;
  *(_QWORD *)(v3 + 88) = 1;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_WORD *)(v3 + 120) = 0;
  v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v3);
  v8 = v7;
  if (!*v7 || v7[16] < 4u)
    goto LABEL_78;
  WTF::String::String((WTF::String *)&v96, "creating ");
  WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v95, v3);
  v9 = v95;
  if (v96)
  {
    v10 = *((_DWORD *)v96 + 1);
    if (v95)
      goto LABEL_5;
  }
  else
  {
    v10 = 0;
    if (v95)
    {
LABEL_5:
      v11 = *((_DWORD *)v95 + 1);
      if ((v11 | v10) < 0)
        goto LABEL_194;
      goto LABEL_9;
    }
  }
  v11 = 0;
  if (v10 < 0)
  {
LABEL_194:
    __break(0xC471u);
LABEL_195:
    JUMPOUT(0x1D8079168);
  }
LABEL_9:
  v12 = (v10 + v11);
  if (__OFADD__(v10, v11))
    goto LABEL_194;
  if (!v96)
  {
    if (!v95)
    {
      v14 = 1;
      goto LABEL_17;
    }
LABEL_15:
    v14 = (*((unsigned __int8 *)v95 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  v13 = *((_DWORD *)v96 + 4);
  v14 = (v13 >> 2) & 1;
  if (v95 && (v13 & 4) != 0)
    goto LABEL_15;
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v12, v14, (uint64_t)v96, (uint64_t)v95, &buf);
  v89 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_194;
  v95 = 0;
  if (!v9)
    goto LABEL_21;
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_21:
    v16 = v96;
    v96 = 0;
    if (!v16)
      goto LABEL_26;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v9, v15);
  v16 = v96;
  v96 = 0;
  if (!v16)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v16 == 2)
  {
    WTF::StringImpl::destroy(v16, v15);
    v17 = *((_QWORD *)v8 + 4);
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v18)
      goto LABEL_35;
    goto LABEL_29;
  }
  *(_DWORD *)v16 -= 2;
LABEL_26:
  v17 = *((_QWORD *)v8 + 4);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v18)
    goto LABEL_35;
LABEL_29:
  WTF::String::utf8();
  if (v91)
    v20 = (char *)v91 + 16;
  else
    v20 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v20;
  _os_log_impl(&dword_1D7FB9000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v18 = (uint64_t)v91;
  v91 = 0;
  if (!v18)
  {
LABEL_35:
    if (!*v8)
      goto LABEL_75;
    goto LABEL_36;
  }
  if (*(_DWORD *)v18 != 1)
  {
    --*(_DWORD *)v18;
    goto LABEL_35;
  }
  v18 = WTF::fastFree((WTF *)v18, v19);
  if (!*v8)
    goto LABEL_75;
LABEL_36:
  if (v8[16] < 4u)
    goto LABEL_75;
  v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        goto LABEL_75;
      v23 = __ldaxr(v21);
      if (v23 == v22)
        break;
      __clrex();
    }
  }
  while (__stxr(v22 | 1, v21));
  v24 = WTF::Logger::observers((WTF::Logger *)v18);
  v25 = *(unsigned int *)(v24 + 12);
  if ((_DWORD)v25)
  {
    v26 = *(uint64_t **)v24;
    v86 = *(_QWORD *)v24 + 8 * v25;
    while (1)
    {
      v27 = *v26;
      LODWORD(buf) = 0;
      WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
      v98 = 0;
      WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v99, v3);
      v91 = 0;
      v92 = 0;
      v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
      LODWORD(v92) = 2;
      v91 = v28;
      v29 = HIDWORD(v92);
      *((_DWORD *)v28 + 4 * HIDWORD(v92)) = buf;
      v30 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v28 + 2 * v29 + 1) = v30;
      *((_DWORD *)v28 + 4 * (v29 + 1)) = v98;
      v31 = v99;
      if (v99)
        *(_DWORD *)v99 += 2;
      *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
      HIDWORD(v92) = v29 + 2;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, v8, 4, &v91);
      v32 = v91;
      if (HIDWORD(v92))
      {
        v33 = 16 * HIDWORD(v92);
        v34 = (WTF::StringImpl **)((char *)v91 + 8);
        do
        {
          v35 = *v34;
          *v34 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v19);
            else
              *(_DWORD *)v35 -= 2;
          }
          v34 += 2;
          v33 -= 16;
        }
        while (v33);
        v32 = v91;
      }
      if (v32)
      {
        v91 = 0;
        LODWORD(v92) = 0;
        WTF::fastFree(v32, v19);
      }
      v36 = v99;
      v99 = 0;
      if (!v36)
        goto LABEL_63;
      if (*(_DWORD *)v36 != 2)
        break;
      WTF::StringImpl::destroy(v36, v19);
      v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v37)
      {
LABEL_66:
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v19);
        else
          *(_DWORD *)v37 -= 2;
      }
LABEL_45:
      if (++v26 == (uint64_t *)v86)
        goto LABEL_70;
    }
    *(_DWORD *)v36 -= 2;
LABEL_63:
    v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v37)
      goto LABEL_66;
    goto LABEL_45;
  }
LABEL_70:
  v38 = __ldxr(v21);
  if (v38 != 1)
  {
    __clrex();
    v6 = v3 + 56;
    goto LABEL_74;
  }
  v6 = v3 + 56;
  if (__stlxr(0, v21))
LABEL_74:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_75:
  v7 = (unsigned __int8 *)v89;
  v89 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, v19);
      *a1 = v3;
      v89 = (WTF::StringImpl *)(v3 + 48);
      v90 = 1;
      if (__ldaxr(v5))
        goto LABEL_79;
      goto LABEL_81;
    }
    *(_DWORD *)v7 -= 2;
  }
LABEL_78:
  *a1 = v3;
  v89 = (WTF::StringImpl *)(v3 + 48);
  v90 = 1;
  if (__ldaxr(v5))
  {
LABEL_79:
    __clrex();
LABEL_82:
    v7 = (unsigned __int8 *)MEMORY[0x1D82A3914](v5);
    goto LABEL_83;
  }
LABEL_81:
  if (__stxr(1u, v5))
    goto LABEL_82;
LABEL_83:
  v41 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  v42 = v41;
  if (!*v41 || v41[16] < 4u)
  {
LABEL_182:
    v81 = *(unsigned int *)(v3 + 72);
    if ((_DWORD)v81 == -1)
      goto LABEL_184;
    goto LABEL_183;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v87);
  WTF::String::String((WTF::String *)&v94, " rejecting ");
  WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v93, v3);
  v43 = (WTF::StringImpl *)v93;
  if (v95)
  {
    v44 = *((_DWORD *)v95 + 1);
    if (v94)
      goto LABEL_87;
  }
  else
  {
    v44 = 0;
    if (v94)
    {
LABEL_87:
      v45 = *((_DWORD *)v94 + 1);
      if (v93)
        goto LABEL_88;
      goto LABEL_92;
    }
  }
  v45 = 0;
  if (v93)
  {
LABEL_88:
    v46 = *(_DWORD *)(v93 + 4);
    if ((v46 | v45) < 0)
      goto LABEL_193;
    goto LABEL_93;
  }
LABEL_92:
  v46 = 0;
  if (v45 < 0)
  {
LABEL_193:
    __break(0xC471u);
    goto LABEL_195;
  }
LABEL_93:
  v47 = __OFADD__(v45, v46);
  v48 = v45 + v46;
  v49 = v47;
  if (v44 < 0)
    goto LABEL_193;
  if ((v49 & 1) != 0)
    goto LABEL_193;
  v50 = v44 + v48;
  if (__OFADD__(v44, v48))
    goto LABEL_193;
  if (v95 && (*((_BYTE *)v95 + 16) & 4) == 0)
  {
    v51 = 0;
    goto LABEL_109;
  }
  if (!v94)
  {
    if (!v93)
    {
      v51 = 1;
      goto LABEL_109;
    }
LABEL_107:
    v51 = (*(unsigned __int8 *)(v93 + 16) >> 2) & 1;
    goto LABEL_109;
  }
  v52 = *((_DWORD *)v94 + 4);
  v51 = (v52 >> 2) & 1;
  if (v93 && (v52 & 4) != 0)
    goto LABEL_107;
LABEL_109:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v50, v51, (uint64_t)v95, (uint64_t)v94, v93);
  v96 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_193;
  v93 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::destroy(v43, v53);
      v54 = v94;
      v94 = 0;
      if (!v54)
        goto LABEL_118;
      goto LABEL_116;
    }
    *(_DWORD *)v43 -= 2;
  }
  v54 = v94;
  v94 = 0;
  if (!v54)
  {
LABEL_118:
    v55 = v95;
    v95 = 0;
    if (!v55)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_116:
  if (*(_DWORD *)v54 != 2)
  {
    *(_DWORD *)v54 -= 2;
    goto LABEL_118;
  }
  WTF::StringImpl::destroy(v54, v53);
  v55 = v95;
  v95 = 0;
  if (!v55)
    goto LABEL_123;
LABEL_121:
  if (*(_DWORD *)v55 == 2)
  {
    WTF::StringImpl::destroy(v55, v53);
    v56 = *((_QWORD *)v42 + 4);
    v57 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v57)
      goto LABEL_132;
    goto LABEL_126;
  }
  *(_DWORD *)v55 -= 2;
LABEL_123:
  v56 = *((_QWORD *)v42 + 4);
  v57 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v57)
    goto LABEL_132;
LABEL_126:
  WTF::String::utf8();
  if (v91)
    v59 = (char *)v91 + 16;
  else
    v59 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v59;
  _os_log_impl(&dword_1D7FB9000, v56, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v57 = (uint64_t)v91;
  v91 = 0;
  if (!v57)
  {
LABEL_132:
    if (!*v42)
      goto LABEL_179;
    goto LABEL_133;
  }
  if (*(_DWORD *)v57 != 1)
  {
    --*(_DWORD *)v57;
    goto LABEL_132;
  }
  v57 = WTF::fastFree((WTF *)v57, v58);
  if (!*v42)
    goto LABEL_179;
LABEL_133:
  if (v42[16] < 4u)
    goto LABEL_179;
  v60 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v61 = *v60;
      if ((v61 & 1) != 0)
        goto LABEL_179;
      v62 = __ldaxr(v60);
      if (v62 == v61)
        break;
      __clrex();
    }
  }
  while (__stxr(v61 | 1, v60));
  v84 = v6;
  v63 = WTF::Logger::observers((WTF::Logger *)v57);
  v64 = *(unsigned int *)(v63 + 12);
  if ((_DWORD)v64)
  {
    v65 = *(uint64_t **)v63;
    v85 = *(_QWORD *)v63 + 8 * v64;
    while (1)
    {
      v66 = *v65;
      LODWORD(buf) = 0;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v87);
      v98 = 0;
      WTF::String::String((WTF::String *)&v99, " rejecting ");
      v100 = 0;
      WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(v101, v3);
      v91 = 0;
      v92 = 0;
      v67 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
      LODWORD(v92) = 3;
      v91 = v67;
      v68 = HIDWORD(v92);
      *((_DWORD *)v67 + 4 * HIDWORD(v92)) = buf;
      v69 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v67 + 2 * v68 + 1) = v69;
      *((_DWORD *)v67 + 4 * (v68 + 1)) = v98;
      v70 = v99;
      if (v99)
        *(_DWORD *)v99 += 2;
      *((_QWORD *)v67 + 2 * (v68 + 1) + 1) = v70;
      *((_DWORD *)v67 + 4 * (v68 + 2)) = v100;
      v71 = v101[0];
      if (v101[0])
        *(_DWORD *)v101[0] += 2;
      *((_QWORD *)v67 + 2 * (v68 + 2) + 1) = v71;
      HIDWORD(v92) = v68 + 3;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v66 + 16))(v66, v42, 4, &v91);
      v72 = v91;
      if (HIDWORD(v92))
      {
        v73 = 16 * HIDWORD(v92);
        v74 = (WTF::StringImpl **)((char *)v91 + 8);
        do
        {
          v75 = *v74;
          *v74 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v58);
            else
              *(_DWORD *)v75 -= 2;
          }
          v74 += 2;
          v73 -= 16;
        }
        while (v73);
        v72 = v91;
      }
      if (v72)
      {
        v91 = 0;
        LODWORD(v92) = 0;
        WTF::fastFree(v72, v58);
      }
      v76 = v101[0];
      v101[0] = 0;
      if (!v76)
        goto LABEL_162;
      if (*(_DWORD *)v76 != 2)
        break;
      WTF::StringImpl::destroy(v76, v58);
      v77 = v99;
      v99 = 0;
      if (!v77)
        goto LABEL_167;
LABEL_165:
      if (*(_DWORD *)v77 != 2)
      {
        *(_DWORD *)v77 -= 2;
LABEL_167:
        v78 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v78)
          goto LABEL_170;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v77, v58);
      v78 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v78)
      {
LABEL_170:
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v58);
        else
          *(_DWORD *)v78 -= 2;
      }
LABEL_142:
      if (++v65 == (uint64_t *)v85)
        goto LABEL_174;
    }
    *(_DWORD *)v76 -= 2;
LABEL_162:
    v77 = v99;
    v99 = 0;
    if (!v77)
      goto LABEL_167;
    goto LABEL_165;
  }
LABEL_174:
  v79 = __ldxr(v60);
  if (v79 != 1)
  {
    __clrex();
    v6 = v84;
    goto LABEL_178;
  }
  v6 = v84;
  if (__stlxr(0, v60))
LABEL_178:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_179:
  v80 = v96;
  v96 = 0;
  if (!v80)
    goto LABEL_182;
  if (*(_DWORD *)v80 != 2)
  {
    *(_DWORD *)v80 -= 2;
    goto LABEL_182;
  }
  WTF::StringImpl::destroy(v80, v58);
  v81 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v81 != -1)
LABEL_183:
    ((void (*)(__int128 *, uint64_t))off_1E9D6C0F0[v81])(&buf, v6);
LABEL_184:
  *(_BYTE *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 64) = 1;
  *(_DWORD *)(v3 + 72) = 1;
  result = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v3, (unsigned __int8 **)&v89);
  if (v90)
  {
    result = v89;
    v83 = __ldxr((unsigned __int8 *)v89);
    if (v83 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v89))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1D8079174(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF *a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32)
{
  unsigned int *v32;
  unsigned __int8 *v33;
  unsigned int *v34;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v36 = __ldxr(v33);
  if (v36 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_8:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      if (a20)
      {
        v37 = __ldxr((unsigned __int8 *)a19);
        if (v37 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a19))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a19);
      }
LABEL_17:
      *a11 = 0;
      do
      {
        v38 = __ldaxr(v32);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v32));
      if (v39)
        _Unwind_Resume(exception_object);
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v10 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

void sub_1D8079744(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  WTF::StringImpl *result;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 v12;
  StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v16)
  {
    v6 = *((_DWORD *)v16 + 1);
    if (v15)
    {
LABEL_3:
      v7 = *((_DWORD *)v15 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        v4 = __OFADD__(v7, 1);
        v8 = v7 + 1;
        if (!v4)
          goto LABEL_9;
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
    if (v15)
      goto LABEL_3;
  }
  v8 = 1;
  if (v4)
    goto LABEL_33;
LABEL_9:
  v4 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v4;
  if (v6 < 0)
    goto LABEL_33;
  if ((v10 & 1) != 0)
    goto LABEL_33;
  v4 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13))
    goto LABEL_33;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v17, v11 + 13, v12, (uint64_t)v16, (uint64_t)v15);
  v14 = v17;
  *a1 = v17;
  if (!v14)
    goto LABEL_34;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      result = v16;
      if (!v16)
        return result;
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  result = v16;
  if (!v16)
    return result;
LABEL_29:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D80798C8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WTF::JSONLogValue::~JSONLogValue(WTF::JSONLogValue *this, StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  int8x16_t *v11;
  size_t v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  _WORD *v17;
  int8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  _WORD *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  size_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  _BYTE *v40;
  int8x16_t *v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  _WORD *v47;
  int8x16_t *v48;
  __int16 v49;
  int8x16_t *v50;
  size_t v51;
  _BYTE *v52;
  unint64_t v53;
  unsigned __int128 *v54;
  unsigned __int128 v55;
  size_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  _BYTE *v60;
  int8x16_t *v61;
  char v62;
  _WORD *v63;
  int8x16_t *v64;
  uint64_t v65;
  _WORD *v66;
  unint64_t v67;
  __int128 v68;
  char *v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  _WORD *v77;
  int8x16_t *v78;
  __int16 v79;
  uint64_t v80;
  unint64_t v81;
  int8x16_t *v82;
  int8x16_t *v83;
  unint64_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t *v89;
  int8x8_t *v90;
  unint64_t v91;
  int16x8_t v92;
  int8x16_t *v93;
  int8x16_t *v94;
  unint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int16x8_t *v100;
  int8x8_t *v101;
  unint64_t v102;
  int16x8_t v103;
  uint8x8_t *v104;
  uint16x8_t *v105;
  unint64_t v106;
  uint8x16_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint8x8_t *v110;
  uint16x8_t *v111;
  unint64_t v112;
  uint8x8_t v113;
  uint8x8_t *v114;
  uint16x8_t *v115;
  unint64_t v116;
  uint8x16_t v117;
  uint16x8_t v118;
  uint16x8_t v119;
  uint8x8_t *v120;
  uint16x8_t *v121;
  unint64_t v122;
  uint8x8_t v123;
  uint64_t v124;
  int8x16x2_t v125;
  int8x16x2_t v126;
  int8x16x2_t v127;
  int8x16x2_t v128;
  int8x16x2_t v129;
  int8x16x2_t v130;

  v8 = (_QWORD *)result;
  if (!a3)
  {
    if (!a2)
      goto LABEL_14;
    if (a2 > 0x7FFFFFEF)
      goto LABEL_13;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    v9 = v124;
    if (!v124)
      goto LABEL_105;
    *(_DWORD *)v124 = 2;
    *(_DWORD *)(v124 + 4) = a2;
    *(_OWORD *)(v124 + 20) = xmmword_1D80FBCA0;
    *(_QWORD *)(v124 + 8) = v124 + 20;
    *(_DWORD *)(v124 + 16) = 0;
    *(_QWORD *)(v124 + 36) = 0x730069006D006FLL;
    *(_WORD *)(v124 + 44) = 101;
    v17 = (_WORD *)(v124 + 46);
    if (!a4)
    {
      v23 = 0;
      *v17 = 60;
      v24 = (_WORD *)(v124 + 48);
      if (a5)
        goto LABEL_86;
      goto LABEL_27;
    }
    v18 = *(int8x16_t **)(a4 + 8);
    v19 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) == 0)
    {
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 == 1)
          *v17 = v18->i16[0];
        else
          result = (uint64_t)memcpy((void *)(v124 + 46), v18, 2 * v19);
      }
LABEL_85:
      v23 = *(unsigned int *)(a4 + 4);
      v63 = &v17[v23];
      *v63 = 60;
      v24 = v63 + 1;
      if (a5)
      {
LABEL_86:
        v64 = *(int8x16_t **)(a5 + 8);
        v65 = *(unsigned int *)(a5 + 4);
        if ((*(_BYTE *)(a5 + 16) & 4) == 0)
        {
          if ((_DWORD)v65)
          {
            if ((_DWORD)v65 == 1)
              *v24 = v64->i16[0];
            else
              result = (uint64_t)memcpy(v24, v64, 2 * v65);
          }
          goto LABEL_103;
        }
        v66 = &v24[v65];
        if (v65 < 0x40)
        {
          v67 = (unint64_t)v24;
        }
        else
        {
          v67 = (unint64_t)&v24[v65 & 0xFFFFFFC0];
          v68 = 0uLL;
          v69 = (char *)v24;
          do
          {
            v126.val[0] = *v64;
            v70 = v64[1];
            v128.val[0] = v64[2];
            v71 = v64[3];
            v64 += 4;
            v72 = v71;
            v128.val[1] = 0uLL;
            v130.val[0] = v70;
            v126.val[1] = 0uLL;
            v73 = v69;
            vst2q_s8(v73, v126);
            v73 += 32;
            v130.val[1] = 0uLL;
            vst2q_s8(v73, v130);
            v74 = v69 + 64;
            vst2q_s8(v74, v128);
            v75 = v69 + 96;
            vst2q_s8(v75, *(int8x16x2_t *)(&v68 - 1));
            v69 += 128;
          }
          while (v69 != (char *)v67);
        }
        if ((_WORD *)v67 == v66)
        {
LABEL_103:
          v25 = *(unsigned int *)(a5 + 4);
          goto LABEL_104;
        }
        v76 = v124 + 2 * (v23 + v65) - v67 + 46;
        if (v76 < 0xE
          || v67 < (unint64_t)v64->u64 + (v76 >> 1) + 1
          && (unint64_t)v64 < (v76 & 0xFFFFFFFFFFFFFFFELL) + v67 + 2)
        {
          v77 = (_WORD *)v67;
          v78 = v64;
          goto LABEL_100;
        }
        v80 = (v76 >> 1) + 1;
        if (v76 >= 0x3E)
        {
          v81 = v80 & 0xFFFFFFFFFFFFFFE0;
          v114 = (uint8x8_t *)&v64[1];
          v115 = (uint16x8_t *)(v67 + 32);
          v116 = v80 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v117 = *(uint8x16_t *)v114[-2].i8;
            v118 = vmovl_u8(*v114);
            v119 = vmovl_high_u8(*(uint8x16_t *)v114->i8);
            v115[-2] = vmovl_u8(*(uint8x8_t *)v117.i8);
            v115[-1] = vmovl_high_u8(v117);
            *v115 = v118;
            v115[1] = v119;
            v115 += 4;
            v114 += 4;
            v116 -= 32;
          }
          while (v116);
          if (v80 == v81)
            goto LABEL_103;
          if ((v80 & 0x18) == 0)
          {
            v78 = (int8x16_t *)((char *)v64 + v81);
            v77 = (_WORD *)(v67 + 2 * v81);
            do
            {
LABEL_100:
              v79 = v78->u8[0];
              v78 = (int8x16_t *)((char *)v78 + 1);
              *v77++ = v79;
            }
            while (v77 != v66);
            goto LABEL_103;
          }
        }
        else
        {
          v81 = 0;
        }
        v77 = (_WORD *)(v67 + 2 * (v80 & 0xFFFFFFFFFFFFFFF8));
        v78 = (int8x16_t *)((char *)v64 + (v80 & 0xFFFFFFFFFFFFFFF8));
        v120 = (uint8x8_t *)&v64->i8[v81];
        v121 = (uint16x8_t *)(v67 + 2 * v81);
        v122 = v81 - (v80 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v123 = *v120++;
          *v121++ = vmovl_u8(v123);
          v122 += 8;
        }
        while (v122);
        if (v80 == (v80 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_103;
        goto LABEL_100;
      }
LABEL_27:
      v25 = 0;
LABEL_104:
      v24[v25] = 62;
      goto LABEL_105;
    }
    v26 = &v17[v19];
    if (v19 < 0x40)
    {
      v27 = v124 + 46;
    }
    else
    {
      v27 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
      v28 = 0uLL;
      v29 = (char *)(v124 + 46);
      do
      {
        v125.val[0] = *v18;
        v30 = v18[1];
        v127.val[0] = v18[2];
        v31 = v18[3];
        v18 += 4;
        v32 = v31;
        v127.val[1] = 0uLL;
        v129.val[0] = v30;
        v125.val[1] = 0uLL;
        v33 = v29;
        vst2q_s8(v33, v125);
        v33 += 32;
        v129.val[1] = 0uLL;
        vst2q_s8(v33, v129);
        v34 = v29 + 64;
        vst2q_s8(v34, v127);
        v35 = v29 + 96;
        vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
        v29 += 128;
      }
      while (v29 != (char *)v27);
    }
    if ((_WORD *)v27 == v26)
      goto LABEL_85;
    v43 = v124 + 2 * v19 - v27 + 44;
    if (v43 < 0xE
      || (v27 < (unint64_t)v18->u64 + (v43 >> 1) + 1
        ? (v44 = (unint64_t)v18 >= (v43 & 0xFFFFFFFFFFFFFFFELL) + v27 + 2)
        : (v44 = 1),
          !v44))
    {
      v47 = (_WORD *)v27;
      v48 = v18;
      goto LABEL_56;
    }
    v45 = (v43 >> 1) + 1;
    if (v43 >= 0x3E)
    {
      v46 = v45 & 0xFFFFFFFFFFFFFFE0;
      v104 = (uint8x8_t *)&v18[1];
      v105 = (uint16x8_t *)(v27 + 32);
      v106 = v45 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v107 = *(uint8x16_t *)v104[-2].i8;
        v108 = vmovl_u8(*v104);
        v109 = vmovl_high_u8(*(uint8x16_t *)v104->i8);
        v105[-2] = vmovl_u8(*(uint8x8_t *)v107.i8);
        v105[-1] = vmovl_high_u8(v107);
        *v105 = v108;
        v105[1] = v109;
        v105 += 4;
        v104 += 4;
        v106 -= 32;
      }
      while (v106);
      if (v45 == v46)
        goto LABEL_85;
      if ((v45 & 0x18) == 0)
      {
        v48 = (int8x16_t *)((char *)v18 + v46);
        v47 = (_WORD *)(v27 + 2 * v46);
        goto LABEL_56;
      }
    }
    else
    {
      v46 = 0;
    }
    v47 = (_WORD *)(v27 + 2 * (v45 & 0xFFFFFFFFFFFFFFF8));
    v48 = (int8x16_t *)((char *)v18 + (v45 & 0xFFFFFFFFFFFFFFF8));
    v110 = (uint8x8_t *)&v18->i8[v46];
    v111 = (uint16x8_t *)(v27 + 2 * v46);
    v112 = v46 - (v45 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v113 = *v110++;
      *v111++ = vmovl_u8(v113);
      v112 += 8;
    }
    while (v112);
    if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_85;
    do
    {
LABEL_56:
      v49 = v48->u8[0];
      v48 = (int8x16_t *)((char *)v48 + 1);
      *v47++ = v49;
    }
    while (v47 != v26);
    goto LABEL_85;
  }
  if (!a2)
  {
LABEL_14:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_105;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_105;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  v9 = v124;
  if (v124)
  {
    *(_DWORD *)v124 = 2;
    *(_DWORD *)(v124 + 4) = a2;
    qmemcpy((void *)(v124 + 20), "NativePromise", 13);
    *(_QWORD *)(v124 + 8) = v124 + 20;
    *(_DWORD *)(v124 + 16) = 4;
    v10 = (_BYTE *)(v124 + 33);
    if (!a4)
    {
      v20 = 0;
      *v10 = 60;
      v21 = (_BYTE *)(v124 + 34);
      if (a5)
        goto LABEL_60;
      goto LABEL_22;
    }
    v11 = *(int8x16_t **)(a4 + 8);
    v12 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 == 1)
          *v10 = v11->i8[0];
        else
          result = (uint64_t)memcpy((void *)(v124 + 33), v11, v12);
      }
    }
    else
    {
      v13 = &v10[v12];
      if (v12 < 0x10)
      {
        v14 = v124 + 33;
      }
      else
      {
        v14 = (unint64_t)&v10[v12 & 0xFFFFFFF0];
        v15 = (unsigned __int128 *)(v124 + 33);
        do
        {
          v16 = (unsigned __int128)vld2q_s8(v11->i8);
          v11 += 2;
          *v15++ = v16;
        }
        while (v15 != (unsigned __int128 *)v14);
      }
      if ((_BYTE *)v14 != v13)
      {
        v36 = v124 + v12;
        v37 = v124 + v12 - v14 + 33;
        if (v37 < 8
          || (v14 < (unint64_t)v11[4].u64 + 2 * v36 + -2 * v14 + 2
            ? (v38 = (unint64_t)v11 >= v36 + 33)
            : (v38 = 1),
              !v38))
        {
          v40 = (_BYTE *)v14;
          v41 = v11;
          goto LABEL_43;
        }
        if (v37 >= 0x20)
        {
          v39 = v37 & 0xFFFFFFFFFFFFFFE0;
          v82 = v11 + 2;
          v83 = (int8x16_t *)(v14 + 16);
          v84 = v37 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v86 = v82[-2];
            v85 = v82[-1];
            v88 = *v82;
            v87 = v82[1];
            v82 += 4;
            v83[-1] = vuzp1q_s8(v86, v85);
            *v83 = vuzp1q_s8(v88, v87);
            v83 += 2;
            v84 -= 32;
          }
          while (v84);
          if (v37 == v39)
            goto LABEL_59;
          if ((v37 & 0x18) == 0)
          {
            v41 = (int8x16_t *)((char *)v11 + 2 * v39);
            v40 = (_BYTE *)(v14 + v39);
            do
            {
LABEL_43:
              v42 = v41->i8[0];
              v41 = (int8x16_t *)((char *)v41 + 2);
              *v40++ = v42;
            }
            while (v40 != v13);
            goto LABEL_59;
          }
        }
        else
        {
          v39 = 0;
        }
        v40 = (_BYTE *)(v14 + (v37 & 0xFFFFFFFFFFFFFFF8));
        v41 = (int8x16_t *)((char *)v11 + 2 * (v37 & 0xFFFFFFFFFFFFFFF8));
        v89 = (int16x8_t *)((char *)v11 + 2 * v39);
        v90 = (int8x8_t *)(v14 + v39);
        v91 = v39 - (v37 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v92 = *v89++;
          *v90++ = vmovn_s16(v92);
          v91 += 8;
        }
        while (v91);
        if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_43;
      }
    }
LABEL_59:
    v20 = *(unsigned int *)(a4 + 4);
    v10[v20] = 60;
    v21 = &v10[v20 + 1];
    if (a5)
    {
LABEL_60:
      v50 = *(int8x16_t **)(a5 + 8);
      v51 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        if ((_DWORD)v51)
        {
          if ((_DWORD)v51 == 1)
            *v21 = v50->i8[0];
          else
            result = (uint64_t)memcpy(v21, v50, v51);
        }
        goto LABEL_82;
      }
      v52 = &v21[v51];
      if (v51 < 0x10)
      {
        v53 = (unint64_t)v21;
      }
      else
      {
        v53 = (unint64_t)&v21[v51 & 0xFFFFFFF0];
        v54 = (unsigned __int128 *)v21;
        do
        {
          v55 = (unsigned __int128)vld2q_s8(v50->i8);
          v50 += 2;
          *v54++ = v55;
        }
        while (v54 != (unsigned __int128 *)v53);
      }
      if ((_BYTE *)v53 == v52)
      {
LABEL_82:
        v22 = *(unsigned int *)(a5 + 4);
        goto LABEL_83;
      }
      v56 = v20 + v124 + v51;
      v57 = v56 - v53 + 34;
      if (v57 < 8
        || (v53 < (unint64_t)v50[4].u64 + 2 * v56 + -2 * v53 + 4
          ? (v58 = (unint64_t)v50 >= v56 + 34)
          : (v58 = 1),
            !v58))
      {
        v60 = (_BYTE *)v53;
        v61 = v50;
        goto LABEL_79;
      }
      if (v57 >= 0x20)
      {
        v59 = v57 & 0xFFFFFFFFFFFFFFE0;
        v93 = v50 + 2;
        v94 = (int8x16_t *)(v53 + 16);
        v95 = v57 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v97 = v93[-2];
          v96 = v93[-1];
          v99 = *v93;
          v98 = v93[1];
          v93 += 4;
          v94[-1] = vuzp1q_s8(v97, v96);
          *v94 = vuzp1q_s8(v99, v98);
          v94 += 2;
          v95 -= 32;
        }
        while (v95);
        if (v57 == v59)
          goto LABEL_82;
        if ((v57 & 0x18) == 0)
        {
          v61 = (int8x16_t *)((char *)v50 + 2 * v59);
          v60 = (_BYTE *)(v53 + v59);
          do
          {
LABEL_79:
            v62 = v61->i8[0];
            v61 = (int8x16_t *)((char *)v61 + 2);
            *v60++ = v62;
          }
          while (v60 != v52);
          goto LABEL_82;
        }
      }
      else
      {
        v59 = 0;
      }
      v60 = (_BYTE *)(v53 + (v57 & 0xFFFFFFFFFFFFFFF8));
      v61 = (int8x16_t *)((char *)v50 + 2 * (v57 & 0xFFFFFFFFFFFFFFF8));
      v100 = (int16x8_t *)((char *)v50 + 2 * v59);
      v101 = (int8x8_t *)(v53 + v59);
      v102 = v59 - (v57 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v103 = *v100++;
        *v101++ = vmovn_s16(v103);
        v102 += 8;
      }
      while (v102);
      if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_82;
      goto LABEL_79;
    }
LABEL_22:
    v22 = 0;
LABEL_83:
    v21[v22] = 62;
  }
LABEL_105:
  *v8 = v9;
  return result;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1D807A190(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (!v6)
    goto LABEL_5;
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
LABEL_7:
      _Unwind_Resume(exception_object);
  }
  else
  {
LABEL_5:
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_7;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v10, a2);
  goto LABEL_7;
}

uint64_t *WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (!v3)
      return a1;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1D807A288(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  StringImpl *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v51, "destroying ");
    result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v50, a1);
    v5 = (WTF::StringImpl *)v50;
    if (v51)
    {
      v6 = *((_DWORD *)v51 + 1);
      if (v50)
        goto LABEL_8;
    }
    else
    {
      v6 = 0;
      if (v50)
      {
LABEL_8:
        v7 = *(_DWORD *)(v50 + 4);
        if ((v7 | v6) < 0)
          goto LABEL_98;
        goto LABEL_12;
      }
    }
    v7 = 0;
    if (v6 < 0)
      goto LABEL_98;
LABEL_12:
    result = (v6 + v7);
    if (__OFADD__(v6, v7))
      goto LABEL_98;
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 4);
      v9 = (v8 >> 2) & 1;
      if (!v50 || (v8 & 4) == 0)
      {
LABEL_20:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v51, v50, &buf);
        v52 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v50 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              v11 = v51;
              v51 = 0;
              if (!v11)
                goto LABEL_29;
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                v12 = *(NSObject **)(v2 + 32);
                v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v13)
                  goto LABEL_38;
LABEL_32:
                WTF::String::utf8();
                if (v48)
                  v15 = (char *)v48 + 16;
                else
                  v15 = 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1D7FB9000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v13 = (uint64_t)v48;
                v48 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    v13 = WTF::fastFree((WTF *)v13, v14);
                    if (!*(_BYTE *)v2)
                      goto LABEL_78;
LABEL_39:
                    if (*(unsigned __int8 *)(v2 + 16) < 4u)
                      goto LABEL_78;
                    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    do
                    {
                      while (1)
                      {
                        v17 = *v16;
                        if ((v17 & 1) != 0)
                          goto LABEL_78;
                        v18 = __ldaxr(v16);
                        if (v18 == v17)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v17 | 1, v16));
                    v19 = WTF::Logger::observers((WTF::Logger *)v13);
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20)
                    {
                      v21 = *(uint64_t **)v19;
                      v22 = *(_QWORD *)v19 + 8 * v20;
                      while (1)
                      {
                        v23 = *v21;
                        LODWORD(buf) = 0;
                        WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                        v54 = 0;
                        WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(v55, a1);
                        v48 = 0;
                        v49 = 0;
                        v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v49) = 2;
                        v48 = v24;
                        v25 = HIDWORD(v49);
                        *((_DWORD *)v24 + 4 * HIDWORD(v49)) = buf;
                        v26 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                        *((_DWORD *)v24 + 4 * (v25 + 1)) = v54;
                        v27 = v55[0];
                        if (v55[0])
                          *(_DWORD *)v55[0] += 2;
                        *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                        HIDWORD(v49) = v25 + 2;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, v2, 4, &v48);
                        v28 = v48;
                        if (HIDWORD(v49))
                        {
                          v29 = 16 * HIDWORD(v49);
                          v30 = (WTF::StringImpl **)((char *)v48 + 8);
                          do
                          {
                            v31 = *v30;
                            *v30 = 0;
                            if (v31)
                            {
                              if (*(_DWORD *)v31 == 2)
                                WTF::StringImpl::destroy(v31, v14);
                              else
                                *(_DWORD *)v31 -= 2;
                            }
                            v30 += 2;
                            v29 -= 16;
                          }
                          while (v29);
                          v28 = v48;
                        }
                        if (v28)
                        {
                          v48 = 0;
                          LODWORD(v49) = 0;
                          WTF::fastFree(v28, v14);
                        }
                        v32 = v55[0];
                        v55[0] = 0;
                        if (!v32)
                          goto LABEL_66;
                        if (*(_DWORD *)v32 != 2)
                          break;
                        WTF::StringImpl::destroy(v32, v14);
                        v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v33)
                        {
LABEL_69:
                          if (*(_DWORD *)v33 == 2)
                            WTF::StringImpl::destroy(v33, v14);
                          else
                            *(_DWORD *)v33 -= 2;
                        }
LABEL_48:
                        if (++v21 == (uint64_t *)v22)
                          goto LABEL_73;
                      }
                      *(_DWORD *)v32 -= 2;
LABEL_66:
                      v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v33)
                        goto LABEL_69;
                      goto LABEL_48;
                    }
LABEL_73:
                    v34 = __ldxr(v16);
                    if (v34 == 1)
                    {
                      if (!__stlxr(0, v16))
                      {
LABEL_78:
                        v35 = v52;
                        v52 = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, v14);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        goto LABEL_82;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_78;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(_BYTE *)v2)
                  goto LABEL_78;
                goto LABEL_39;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              v12 = *(NSObject **)(v2 + 32);
              v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!(_DWORD)v13)
                goto LABEL_38;
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          v11 = v51;
          v51 = 0;
          if (!v11)
            goto LABEL_29;
          goto LABEL_27;
        }
LABEL_98:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v50)
    {
      v9 = 1;
      goto LABEL_20;
    }
    v9 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_82:
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 120, v36);
  v38 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v38)
  {
    v39 = *(unsigned int ***)(a1 + 96);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 96);
  if ((WTF *)(a1 + 112) != v45 && v45 != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v45, v37);
  }
  v47 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v47 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E9D6BCD8[v47])(&buf, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

void sub_1D807A814(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_8:
      v22 = a14;
      a14 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 120, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 96, v23);
      v24 = *(unsigned int *)(v18 + 88);
      if ((_DWORD)v24 != -1)
        ((void (*)(WTF **, uint64_t))off_1E9D6BCD8[v24])(&a10, v18 + 56);
      *(_DWORD *)(v18 + 88) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = (_QWORD *)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v11 = v12;
        if (v12)
        {
          *(_DWORD *)v12 = 2;
          *(_DWORD *)(v12 + 4) = a2;
          *(_QWORD *)(v12 + 8) = v12 + 20;
          *(_DWORD *)(v12 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((int8x16_t *)(v12 + 20), a4, a5, a6);
        }
        goto LABEL_12;
      }
LABEL_8:
      v11 = 0;
      goto LABEL_12;
    }
LABEL_9:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if (!a2)
    goto LABEL_9;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_8;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v11 = v12;
  if (v12)
  {
    *(_DWORD *)v12 = 2;
    *(_DWORD *)(v12 + 4) = a2;
    *(_QWORD *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint16x8_t *)(v12 + 20), a4, a5, a6);
  }
LABEL_12:
  *v10 = v11;
  return result;
}

void sub_1D807AA98(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, a2);
    _Unwind_Resume(exception_object);
  }
  *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

int8x16_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(int8x16_t *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t *v6;
  const char *v8;
  size_t v9;
  int8x16_t *v10;
  int8x16_t *v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int8x16_t *v20;
  const char *v21;
  char v22;
  const char *v23;
  size_t v24;
  char *v25;
  unint64_t v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  const char *v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  char *v33;
  const char *v34;
  char v35;
  int8x16_t *v36;
  size_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  unsigned __int128 v40;
  unint64_t v41;
  int8x16_t *v42;
  BOOL v43;
  unint64_t v44;
  int8x16_t *v45;
  int8x16_t *v46;
  __int8 v47;
  int8x16_t *v48;
  int8x16_t *v49;
  unint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t *v55;
  int8x8_t *v56;
  unint64_t v57;
  int16x8_t v58;
  int8x16_t *v59;
  int8x16_t *v60;
  unint64_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t *v66;
  int8x8_t *v67;
  unint64_t v68;
  int16x8_t v69;
  int8x16_t *v70;
  int8x16_t *v71;
  unint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t *v77;
  int8x8_t *v78;
  unint64_t v79;
  int16x8_t v80;

  v6 = __dst;
  if (!a2)
  {
    v14 = 0;
    v15 = (char *)__dst;
    if (a3)
      goto LABEL_28;
LABEL_9:
    v16 = 0;
    if (!a4)
      return __dst;
    goto LABEL_51;
  }
  v8 = *(const char **)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) == 0)
  {
    v10 = (int8x16_t *)((char *)__dst + v9);
    if (v9 < 0x10)
    {
      v11 = __dst;
      if (__dst == v10)
        goto LABEL_27;
    }
    else
    {
      v11 = (int8x16_t *)((char *)__dst + (v9 & 0xFFFFFFF0));
      v12 = (unsigned __int128 *)__dst;
      do
      {
        v13 = (unsigned __int128)vld2q_s8(v8);
        v8 += 32;
        *v12++ = v13;
      }
      while (v12 != (unsigned __int128 *)v11);
      if (v11 == v10)
        goto LABEL_27;
    }
    v17 = &__dst->i8[v9] - (__int8 *)v11;
    if (v17 < 8 || (v11 < (int8x16_t *)&v8[2 * v17] ? (v18 = v8 >= &__dst->i8[v9]) : (v18 = 1), !v18))
    {
      v20 = v11;
      v21 = v8;
      goto LABEL_24;
    }
    if (v17 >= 0x20)
    {
      v19 = v17 & 0xFFFFFFFFFFFFFFE0;
      v48 = (int8x16_t *)(v8 + 32);
      v49 = v11 + 1;
      v50 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v52 = v48[-2];
        v51 = v48[-1];
        v54 = *v48;
        v53 = v48[1];
        v48 += 4;
        v49[-1] = vuzp1q_s8(v52, v51);
        *v49 = vuzp1q_s8(v54, v53);
        v49 += 2;
        v50 -= 32;
      }
      while (v50);
      if (v17 == v19)
        goto LABEL_27;
      if ((v17 & 0x18) == 0)
      {
        v21 = &v8[2 * v19];
        v20 = (int8x16_t *)((char *)v11 + v19);
        goto LABEL_24;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = (int8x16_t *)((char *)v11 + (v17 & 0xFFFFFFFFFFFFFFF8));
    v21 = &v8[2 * (v17 & 0xFFFFFFFFFFFFFFF8)];
    v55 = (int16x8_t *)&v8[2 * v19];
    v56 = (int8x8_t *)&v11->i8[v19];
    v57 = v19 - (v17 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v58 = *v55++;
      *v56++ = vmovn_s16(v58);
      v57 += 8;
    }
    while (v57);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_27;
    do
    {
LABEL_24:
      v22 = *v21;
      v21 += 2;
      v20->i8[0] = v22;
      v20 = (int8x16_t *)((char *)v20 + 1);
    }
    while (v20 != v10);
    goto LABEL_27;
  }
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 == 1)
      __dst->i8[0] = *v8;
    else
      __dst = (int8x16_t *)memcpy(__dst, v8, v9);
  }
LABEL_27:
  v14 = *(unsigned int *)(a2 + 4);
  v15 = &v6->i8[v14];
  if (!a3)
    goto LABEL_9;
LABEL_28:
  v23 = *(const char **)(a3 + 8);
  v24 = *(unsigned int *)(a3 + 4);
  if ((*(_BYTE *)(a3 + 16) & 4) == 0)
  {
    v25 = &v15[v24];
    if (v24 < 0x10)
    {
      v26 = (unint64_t)v15;
      if (v15 == v25)
        goto LABEL_50;
    }
    else
    {
      v26 = (unint64_t)&v15[v24 & 0xFFFFFFF0];
      v27 = (unsigned __int128 *)v15;
      do
      {
        v28 = (unsigned __int128)vld2q_s8(v23);
        v23 += 32;
        *v27++ = v28;
      }
      while (v27 != (unsigned __int128 *)v26);
      if ((char *)v26 == v25)
        goto LABEL_50;
    }
    v29 = &v6->i8[v14 + v24];
    v30 = (unint64_t)&v29[-v26];
    if ((unint64_t)&v29[-v26] < 8
      || (v26 < (unint64_t)&v23[2 * v30] ? (v31 = v23 >= v29) : (v31 = 1), !v31))
    {
      v33 = (char *)v26;
      v34 = v23;
      goto LABEL_47;
    }
    if (v30 >= 0x20)
    {
      v32 = v30 & 0xFFFFFFFFFFFFFFE0;
      v59 = (int8x16_t *)(v23 + 32);
      v60 = (int8x16_t *)(v26 + 16);
      v61 = v30 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v63 = v59[-2];
        v62 = v59[-1];
        v65 = *v59;
        v64 = v59[1];
        v59 += 4;
        v60[-1] = vuzp1q_s8(v63, v62);
        *v60 = vuzp1q_s8(v65, v64);
        v60 += 2;
        v61 -= 32;
      }
      while (v61);
      if (v30 == v32)
        goto LABEL_50;
      if ((v30 & 0x18) == 0)
      {
        v34 = &v23[2 * v32];
        v33 = (char *)(v26 + v32);
        goto LABEL_47;
      }
    }
    else
    {
      v32 = 0;
    }
    v33 = (char *)(v26 + (v30 & 0xFFFFFFFFFFFFFFF8));
    v34 = &v23[2 * (v30 & 0xFFFFFFFFFFFFFFF8)];
    v66 = (int16x8_t *)&v23[2 * v32];
    v67 = (int8x8_t *)(v26 + v32);
    v68 = v32 - (v30 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v69 = *v66++;
      *v67++ = vmovn_s16(v69);
      v68 += 8;
    }
    while (v68);
    if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_50;
    do
    {
LABEL_47:
      v35 = *v34;
      v34 += 2;
      *v33++ = v35;
    }
    while (v33 != v25);
    goto LABEL_50;
  }
  if ((_DWORD)v24)
  {
    if ((_DWORD)v24 == 1)
      *v15 = *v23;
    else
      __dst = (int8x16_t *)memcpy(v15, v23, v24);
  }
LABEL_50:
  v16 = *(unsigned int *)(a3 + 4);
  if (!a4)
    return __dst;
LABEL_51:
  __dst = (int8x16_t *)&v15[v16];
  v36 = *(int8x16_t **)(a4 + 8);
  v37 = *(unsigned int *)(a4 + 4);
  if ((*(_BYTE *)(a4 + 16) & 4) != 0)
  {
    if ((_DWORD)v37)
    {
      if ((_DWORD)v37 == 1)
        __dst->i8[0] = v36->i8[0];
      else
        return (int8x16_t *)memcpy(__dst, v36, v37);
    }
  }
  else
  {
    v38 = (int8x16_t *)((char *)__dst + v37);
    if (v37 >= 0x10)
    {
      v39 = (int8x16_t *)((char *)__dst + (v37 & 0xFFFFFFF0));
      do
      {
        v40 = (unsigned __int128)vld2q_s8(v36->i8);
        v36 += 2;
        *__dst++ = (int8x16_t)v40;
      }
      while (__dst != v39);
      __dst = v39;
    }
    if (__dst != v38)
    {
      v41 = &v6->i8[v37 + v14 + v16] - (__int8 *)__dst;
      if (v41 < 8
        || ((v42 = (int8x16_t *)((char *)v6 + v37 + v16 + v14),
             __dst < (int8x16_t *)((char *)v36 + 2 * ((char *)v42 - (char *)__dst)))
          ? (v43 = v36 >= v42)
          : (v43 = 1),
            !v43))
      {
        v45 = __dst;
        v46 = v36;
        goto LABEL_69;
      }
      if (v41 >= 0x20)
      {
        v44 = v41 & 0xFFFFFFFFFFFFFFE0;
        v70 = v36 + 2;
        v71 = __dst + 1;
        v72 = v41 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v74 = v70[-2];
          v73 = v70[-1];
          v76 = *v70;
          v75 = v70[1];
          v70 += 4;
          v71[-1] = vuzp1q_s8(v74, v73);
          *v71 = vuzp1q_s8(v76, v75);
          v71 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v41 == v44)
          return __dst;
        if ((v41 & 0x18) == 0)
        {
          v46 = (int8x16_t *)((char *)v36 + 2 * v44);
          v45 = (int8x16_t *)((char *)__dst + v44);
          do
          {
LABEL_69:
            v47 = v46->i8[0];
            v46 = (int8x16_t *)((char *)v46 + 2);
            v45->i8[0] = v47;
            v45 = (int8x16_t *)((char *)v45 + 1);
          }
          while (v45 != v38);
          return __dst;
        }
      }
      else
      {
        v44 = 0;
      }
      v45 = (int8x16_t *)((char *)__dst + (v41 & 0xFFFFFFFFFFFFFFF8));
      v46 = (int8x16_t *)((char *)v36 + 2 * (v41 & 0xFFFFFFFFFFFFFFF8));
      v77 = (int16x8_t *)((char *)v36 + 2 * v44);
      v78 = (int8x8_t *)&__dst->i8[v44];
      v79 = v44 - (v41 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v80 = *v77++;
        *v78++ = vmovn_s16(v80);
        v79 += 8;
      }
      while (v79);
      if (v41 != (v41 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_69;
    }
  }
  return __dst;
}

uint16x8_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint16x8_t *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint16x8_t *v6;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint16x8_t *v13;
  uint16x8_t *v14;
  __int128 v15;
  char *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint16x8_t *v27;
  int8x16_t *v28;
  __int16 v29;
  int8x16_t *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  int8x16_t *v44;
  __int16 v45;
  int8x16_t *v46;
  uint64_t v47;
  uint16x8_t *v48;
  uint16x8_t *v49;
  __int128 v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char *v54;
  char *i8;
  char *v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  uint16x8_t *v61;
  int8x16_t *v62;
  __int16 v63;
  uint64_t v64;
  unint64_t v65;
  uint8x8_t *v66;
  uint16x8_t *v67;
  unint64_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint8x8_t *v72;
  uint16x8_t *v73;
  unint64_t v74;
  uint8x8_t v75;
  uint8x8_t *v76;
  uint16x8_t *v77;
  unint64_t v78;
  uint8x16_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint8x8_t *v82;
  uint16x8_t *v83;
  unint64_t v84;
  uint8x8_t v85;
  uint8x8_t *v86;
  uint16x8_t *v87;
  unint64_t v88;
  uint8x16_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint8x8_t *v92;
  uint16x8_t *v93;
  unint64_t v94;
  uint8x8_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;

  v6 = __dst;
  if (!a2)
  {
    v10 = 0;
    v11 = (char *)__dst;
    if (a3)
      goto LABEL_28;
LABEL_7:
    v12 = 0;
    if (!a4)
      return __dst;
    goto LABEL_46;
  }
  v8 = *(int8x16_t **)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    v13 = (uint16x8_t *)((char *)__dst + 2 * v9);
    if (v9 < 0x40)
    {
      v14 = __dst;
      if (__dst == v13)
        goto LABEL_27;
    }
    else
    {
      v14 = (uint16x8_t *)((char *)__dst + 2 * (v9 & 0xFFFFFFC0));
      v15 = 0uLL;
      v16 = (char *)__dst;
      do
      {
        v96.val[0] = *v8;
        v17 = v8[1];
        v99.val[0] = v8[2];
        v18 = v8[3];
        v8 += 4;
        v19 = v18;
        v99.val[1] = 0uLL;
        v102.val[0] = v17;
        v96.val[1] = 0uLL;
        v20 = v16;
        vst2q_s8(v20, v96);
        v20 += 32;
        v102.val[1] = 0uLL;
        vst2q_s8(v20, v102);
        v21 = v16 + 64;
        vst2q_s8(v21, v99);
        v22 = v16 + 96;
        vst2q_s8(v22, *(int8x16x2_t *)(&v15 - 1));
        v16 += 128;
      }
      while (v16 != (char *)v14);
      if (v14 == v13)
        goto LABEL_27;
    }
    v23 = (char *)__dst + 2 * v9 - (char *)v14 - 2;
    if (v23 < 0xE
      || (v14 < (uint16x8_t *)&v8->i8[(v23 >> 1) + 1]
        ? (v24 = v8 >= (int8x16_t *)((char *)&v14->i16[1] + (v23 & 0xFFFFFFFFFFFFFFFELL)))
        : (v24 = 1),
          !v24))
    {
      v27 = v14;
      v28 = v8;
      goto LABEL_24;
    }
    v25 = (v23 >> 1) + 1;
    if (v23 >= 0x3E)
    {
      v26 = v25 & 0xFFFFFFFFFFFFFFE0;
      v66 = (uint8x8_t *)&v8[1];
      v67 = v14 + 2;
      v68 = v25 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v69 = *(uint8x16_t *)v66[-2].i8;
        v70 = vmovl_u8(*v66);
        v71 = vmovl_high_u8(*(uint8x16_t *)v66->i8);
        v67[-2] = vmovl_u8(*(uint8x8_t *)v69.i8);
        v67[-1] = vmovl_high_u8(v69);
        *v67 = v70;
        v67[1] = v71;
        v67 += 4;
        v66 += 4;
        v68 -= 32;
      }
      while (v68);
      if (v25 == v26)
        goto LABEL_27;
      if ((v25 & 0x18) == 0)
      {
        v28 = (int8x16_t *)((char *)v8 + v26);
        v27 = (uint16x8_t *)((char *)v14 + 2 * v26);
        goto LABEL_24;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = (uint16x8_t *)((char *)v14 + 2 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v28 = (int8x16_t *)((char *)v8 + (v25 & 0xFFFFFFFFFFFFFFF8));
    v72 = (uint8x8_t *)&v8->i8[v26];
    v73 = (uint16x8_t *)((char *)v14 + 2 * v26);
    v74 = v26 - (v25 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v75 = *v72++;
      *v73++ = vmovl_u8(v75);
      v74 += 8;
    }
    while (v74);
    if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_27;
    do
    {
LABEL_24:
      v29 = v28->u8[0];
      v28 = (int8x16_t *)((char *)v28 + 1);
      v27->i16[0] = v29;
      v27 = (uint16x8_t *)((char *)v27 + 2);
    }
    while (v27 != v13);
    goto LABEL_27;
  }
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 == 1)
      __dst->i16[0] = v8->i16[0];
    else
      __dst = (uint16x8_t *)memcpy(__dst, v8, 2 * v9);
  }
LABEL_27:
  v10 = *(unsigned int *)(a2 + 4);
  v11 = &v6->i8[2 * v10];
  if (!a3)
    goto LABEL_7;
LABEL_28:
  v30 = *(int8x16_t **)(a3 + 8);
  v31 = *(unsigned int *)(a3 + 4);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    v32 = &v11[2 * v31];
    if (v31 < 0x40)
    {
      v33 = (unint64_t)v11;
      if (v11 == v32)
        goto LABEL_45;
    }
    else
    {
      v33 = (unint64_t)&v11[2 * (v31 & 0xFFFFFFC0)];
      v34 = 0uLL;
      v35 = v11;
      do
      {
        v97.val[0] = *v30;
        v36 = v30[1];
        v100.val[0] = v30[2];
        v37 = v30[3];
        v30 += 4;
        v38 = v37;
        v100.val[1] = 0uLL;
        v103.val[0] = v36;
        v97.val[1] = 0uLL;
        v39 = v35;
        vst2q_s8(v39, v97);
        v39 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v39, v103);
        v40 = v35 + 64;
        vst2q_s8(v40, v100);
        v41 = v35 + 96;
        vst2q_s8(v41, *(int8x16x2_t *)(&v34 - 1));
        v35 += 128;
      }
      while (v35 != (char *)v33);
      if ((char *)v33 == v32)
        goto LABEL_45;
    }
    v42 = (unint64_t)v6->u64 + 2 * v10 + 2 * v31 - v33 - 2;
    if (v42 < 0xE
      || v33 < (unint64_t)v30->u64 + (v42 >> 1) + 1
      && (unint64_t)v30 < (v42 & 0xFFFFFFFFFFFFFFFELL) + v33 + 2)
    {
      v43 = (char *)v33;
      v44 = v30;
      goto LABEL_42;
    }
    v64 = (v42 >> 1) + 1;
    if (v42 >= 0x3E)
    {
      v65 = v64 & 0xFFFFFFFFFFFFFFE0;
      v86 = (uint8x8_t *)&v30[1];
      v87 = (uint16x8_t *)(v33 + 32);
      v88 = v64 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v89 = *(uint8x16_t *)v86[-2].i8;
        v90 = vmovl_u8(*v86);
        v91 = vmovl_high_u8(*(uint8x16_t *)v86->i8);
        v87[-2] = vmovl_u8(*(uint8x8_t *)v89.i8);
        v87[-1] = vmovl_high_u8(v89);
        *v87 = v90;
        v87[1] = v91;
        v87 += 4;
        v86 += 4;
        v88 -= 32;
      }
      while (v88);
      if (v64 == v65)
        goto LABEL_45;
      if ((v64 & 0x18) == 0)
      {
        v44 = (int8x16_t *)((char *)v30 + v65);
        v43 = (char *)(v33 + 2 * v65);
        goto LABEL_42;
      }
    }
    else
    {
      v65 = 0;
    }
    v43 = (char *)(v33 + 2 * (v64 & 0xFFFFFFFFFFFFFFF8));
    v44 = (int8x16_t *)((char *)v30 + (v64 & 0xFFFFFFFFFFFFFFF8));
    v92 = (uint8x8_t *)&v30->i8[v65];
    v93 = (uint16x8_t *)(v33 + 2 * v65);
    v94 = v65 - (v64 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v95 = *v92++;
      *v93++ = vmovl_u8(v95);
      v94 += 8;
    }
    while (v94);
    if (v64 == (v64 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_45;
    do
    {
LABEL_42:
      v45 = v44->u8[0];
      v44 = (int8x16_t *)((char *)v44 + 1);
      *(_WORD *)v43 = v45;
      v43 += 2;
    }
    while (v43 != v32);
    goto LABEL_45;
  }
  if ((_DWORD)v31)
  {
    if ((_DWORD)v31 == 1)
      *(_WORD *)v11 = v30->i16[0];
    else
      __dst = (uint16x8_t *)memcpy(v11, v30, 2 * v31);
  }
LABEL_45:
  v12 = *(unsigned int *)(a3 + 4);
  if (!a4)
    return __dst;
LABEL_46:
  __dst = (uint16x8_t *)&v11[2 * v12];
  v46 = *(int8x16_t **)(a4 + 8);
  v47 = *(unsigned int *)(a4 + 4);
  if ((*(_BYTE *)(a4 + 16) & 4) == 0)
  {
    if ((_DWORD)v47)
    {
      if ((_DWORD)v47 == 1)
        __dst->i16[0] = v46->i16[0];
      else
        return (uint16x8_t *)memcpy(__dst, v46, 2 * v47);
    }
    return __dst;
  }
  v48 = (uint16x8_t *)((char *)__dst + 2 * v47);
  if (v47 >= 0x40)
  {
    v49 = (uint16x8_t *)((char *)__dst + 2 * (v47 & 0xFFFFFFC0));
    v50 = 0uLL;
    do
    {
      v98.val[0] = *v46;
      v51 = v46[1];
      v101.val[0] = v46[2];
      v52 = v46[3];
      v46 += 4;
      v53 = v52;
      v101.val[1] = 0uLL;
      v104.val[0] = v51;
      v98.val[1] = 0uLL;
      v54 = (char *)__dst;
      vst2q_s8(v54, v98);
      v54 += 32;
      v104.val[1] = 0uLL;
      vst2q_s8(v54, v104);
      i8 = __dst[4].i8;
      vst2q_s8(i8, v101);
      v56 = __dst[6].i8;
      vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
      __dst += 8;
    }
    while (__dst != v49);
    __dst = v49;
  }
  if (__dst != v48)
  {
    v57 = (char *)v6 + 2 * v10 + 2 * v12 + 2 * v47 - (char *)__dst - 2;
    if (v57 < 0xE
      || (__dst < (uint16x8_t *)&v46->i8[(v57 >> 1) + 1]
        ? (v58 = v46 >= (int8x16_t *)((char *)&__dst->i16[1] + (v57 & 0xFFFFFFFFFFFFFFFELL)))
        : (v58 = 1),
          !v58))
    {
      v61 = __dst;
      v62 = v46;
      goto LABEL_64;
    }
    v59 = (v57 >> 1) + 1;
    if (v57 >= 0x3E)
    {
      v60 = v59 & 0xFFFFFFFFFFFFFFE0;
      v76 = (uint8x8_t *)&v46[1];
      v77 = __dst + 2;
      v78 = v59 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v79 = *(uint8x16_t *)v76[-2].i8;
        v80 = vmovl_u8(*v76);
        v81 = vmovl_high_u8(*(uint8x16_t *)v76->i8);
        v77[-2] = vmovl_u8(*(uint8x8_t *)v79.i8);
        v77[-1] = vmovl_high_u8(v79);
        *v77 = v80;
        v77[1] = v81;
        v77 += 4;
        v76 += 4;
        v78 -= 32;
      }
      while (v78);
      if (v59 == v60)
        return __dst;
      if ((v59 & 0x18) == 0)
      {
        v62 = (int8x16_t *)((char *)v46 + v60);
        v61 = (uint16x8_t *)((char *)__dst + 2 * v60);
        goto LABEL_64;
      }
    }
    else
    {
      v60 = 0;
    }
    v61 = (uint16x8_t *)((char *)__dst + 2 * (v59 & 0xFFFFFFFFFFFFFFF8));
    v62 = (int8x16_t *)((char *)v46 + (v59 & 0xFFFFFFFFFFFFFFF8));
    v82 = (uint8x8_t *)&v46->i8[v60];
    v83 = (uint16x8_t *)((char *)__dst + 2 * v60);
    v84 = v60 - (v59 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v85 = *v82++;
      *v83++ = vmovl_u8(v85);
      v84 += 8;
    }
    while (v84);
    if (v59 == (v59 & 0xFFFFFFFFFFFFFFF8))
      return __dst;
    do
    {
LABEL_64:
      v63 = v62->u8[0];
      v62 = (int8x16_t *)((char *)v62 + 1);
      v61->i16[0] = v63;
      v61 = (uint16x8_t *)((char *)v61 + 2);
    }
    while (v61 != v48);
  }
  return __dst;
}

WTF *WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  _BYTE *v34;
  _BYTE *v35;
  WTF *result;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  char v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  uint64_t v52;
  StringImpl *v53;
  WTF::StringImpl **v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::Lock *v79;
  int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  WTF *v89;
  WTF *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[4];
  unsigned int *v104;
  __int128 v105;
  __int128 v106;
  WTF::Lock *v107;
  char v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  __int128 buf;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  _QWORD v119[3];

  v119[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&buf = &v116;
  *((_QWORD *)&buf + 1) = 1;
  v100 = (WTF *)&v102;
  v101 = 1;
  v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    v6 = *(unsigned int *)(a1 + 108);
    memcpy(&v102, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = a1 + 112;
    v100 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 104);
    LODWORD(v6) = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 104) = 1;
    LODWORD(v101) = v5;
  }
  HIDWORD(v101) = v6;
  *(_QWORD *)(a1 + 104) = 1;
  v7 = *(_DWORD *)(a1 + 128);
  v8 = *(_DWORD *)(a1 + 132);
  v9 = *(_QWORD *)(a1 + 120);
  v97 = v9;
  v98 = v7;
  v99 = v8;
  *(_QWORD *)&buf = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *((_QWORD *)&buf + 1) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v101))
  {
    v11 = v100;
    v12 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *(_QWORD *)v11;
      if (*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 137));
        if (v15 != 1
          || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)))
        {
          v16 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)&buf = v14;
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          *((_QWORD *)&buf + 1) = v14;
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v116 = a1;
          v20 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E9D6BD00;
          *(_OWORD *)(v20 + 8) = buf;
          *(_QWORD *)(v20 + 24) = a1;
          *((_QWORD *)&buf + 1) = 0;
          v116 = 0;
          v104 = (unsigned int *)v20;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v16 + 16))(v16, &v104);
          v21 = v104;
          v104 = 0;
          if (v21)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_8;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        *(_QWORD *)&buf = v14;
        WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_8;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_23:
      if (WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v104, a1);
        v24 = v104;
        (*(void (**)(__int128 *__return_ptr, unsigned int *))(*(_QWORD *)v104 + 16))(&buf, v104);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
      }
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_29:
        MEMORY[0x1D82A3914]();
        goto LABEL_8;
      }
      if (__stxr(1u, *a2))
        goto LABEL_29;
LABEL_8:
      v11 = (WTF *)((char *)v11 + 8);
      if (v11 == v12)
      {
        v9 = v97;
        v8 = v99;
        break;
      }
    }
  }
  if (v8)
  {
    v26 = v9 + 40 * v8;
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    v96 = v26;
    while (1)
    {
      v28 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      v104 = v28;
      v29 = *(_OWORD *)(v9 + 24);
      v105 = *(_OWORD *)(v9 + 8);
      v106 = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      v103[0] = 0;
      v103[1] = 0;
      v103[2] = "<chained promise>";
      v103[3] = 0;
      v32 = (unsigned __int8 *)(v28 + 12);
      v107 = (WTF::Lock *)(v28 + 12);
      v108 = 1;
      if (__ldaxr((unsigned __int8 *)v28 + 48))
        break;
      if (__stxr(1u, v32))
        goto LABEL_41;
LABEL_42:
      v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v32);
      v35 = v34;
      if (!*v34 || v34[16] < 4u)
        goto LABEL_141;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
      WTF::String::String((WTF::String *)&v112, " settling chained promise ");
      result = WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v111, (uint64_t)v28);
      if (v113)
      {
        v37 = *(_DWORD *)(v113 + 4);
        v38 = (uint64_t)v112;
        if (v112)
          goto LABEL_46;
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)v112;
        if (v112)
        {
LABEL_46:
          v39 = *(_DWORD *)(v38 + 4);
          v40 = v111;
          if (v111)
            goto LABEL_47;
          goto LABEL_51;
        }
      }
      v39 = 0;
      v40 = v111;
      if (v111)
      {
LABEL_47:
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 | v39) < 0)
          goto LABEL_177;
        goto LABEL_52;
      }
LABEL_51:
      v41 = 0;
      if (v39 < 0)
        goto LABEL_177;
LABEL_52:
      v42 = __OFADD__(v39, v41);
      v43 = v39 + v41;
      v44 = v42;
      if (v37 < 0 || (v44 & 1) != 0 || (v45 = v37 + v43, __OFADD__(v37, v43)))
      {
LABEL_177:
        __break(0xC471u);
        return result;
      }
      if (v113 && (*(_BYTE *)(v113 + 16) & 4) == 0)
      {
        v46 = 0;
        goto LABEL_68;
      }
      if (v38)
      {
        v47 = *(_DWORD *)(v38 + 16);
        v46 = (v47 >> 2) & 1;
        if (v40 && (v47 & 4) != 0)
LABEL_66:
          v46 = (*(unsigned __int8 *)(v40 + 16) >> 2) & 1;
      }
      else
      {
        if (v40)
          goto LABEL_66;
        v46 = 1;
      }
LABEL_68:
      result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v45, v46, v113, v38, v40);
      v114 = (WTF::StringImpl *)buf;
      if (!(_QWORD)buf)
        goto LABEL_177;
      v111 = 0;
      if (!v40)
        goto LABEL_72;
      if (*(_DWORD *)v40 != 2)
      {
        *(_DWORD *)v40 -= 2;
LABEL_72:
        v49 = v112;
        v112 = 0;
        if (!v49)
          goto LABEL_77;
        goto LABEL_75;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v40, v48);
      v49 = v112;
      v112 = 0;
      if (!v49)
        goto LABEL_77;
LABEL_75:
      if (*(_DWORD *)v49 != 2)
      {
        *(_DWORD *)v49 -= 2;
LABEL_77:
        v50 = (WTF::StringImpl *)v113;
        v113 = 0;
        if (!v50)
          goto LABEL_82;
        goto LABEL_80;
      }
      WTF::StringImpl::destroy(v49, v48);
      v50 = (WTF::StringImpl *)v113;
      v113 = 0;
      if (!v50)
        goto LABEL_82;
LABEL_80:
      if (*(_DWORD *)v50 != 2)
      {
        *(_DWORD *)v50 -= 2;
LABEL_82:
        v51 = *((_QWORD *)v35 + 4);
        v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v52)
          goto LABEL_91;
        goto LABEL_85;
      }
      WTF::StringImpl::destroy(v50, v48);
      v51 = *((_QWORD *)v35 + 4);
      v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)v52)
        goto LABEL_91;
LABEL_85:
      WTF::String::utf8();
      if (v109)
        v54 = v109 + 2;
      else
        v54 = 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v54;
      _os_log_impl(&dword_1D7FB9000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v52 = (uint64_t)v109;
      v109 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          v52 = WTF::fastFree((WTF *)v52, v53);
          if (!*v35)
            goto LABEL_138;
          goto LABEL_92;
        }
        --*(_DWORD *)v52;
      }
LABEL_91:
      if (!*v35)
        goto LABEL_138;
LABEL_92:
      if (v35[16] < 4u)
        goto LABEL_138;
      do
      {
        while (1)
        {
          v55 = *v27;
          if ((v55 & 1) != 0)
            goto LABEL_138;
          v56 = __ldaxr(v27);
          if (v56 == v55)
            break;
          __clrex();
        }
      }
      while (__stxr(v55 | 1, v27));
      v57 = WTF::Logger::observers((WTF::Logger *)v52);
      v58 = *(unsigned int *)(v57 + 12);
      if ((_DWORD)v58)
      {
        v59 = *(uint64_t **)v57;
        v60 = *(_QWORD *)v57 + 8 * v58;
        while (1)
        {
          v61 = *v59;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
          LODWORD(v116) = 0;
          WTF::String::String((WTF::String *)&v117, " settling chained promise ");
          v118 = 0;
          WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(v119, (uint64_t)v28);
          v109 = 0;
          v110 = 0;
          v62 = WTF::fastMalloc((WTF *)0x30);
          LODWORD(v110) = 3;
          v109 = (WTF::StringImpl **)v62;
          v63 = HIDWORD(v110);
          *(_DWORD *)(v62 + 16 * HIDWORD(v110)) = buf;
          v64 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *(_QWORD *)(v62 + 16 * v63 + 8) = v64;
          *(_DWORD *)(v62 + 16 * (v63 + 1)) = v116;
          v65 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 1) + 8) = v65;
          *(_DWORD *)(v62 + 16 * (v63 + 2)) = v118;
          v66 = v119[0];
          if (v119[0])
            *(_DWORD *)v119[0] += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 2) + 8) = v66;
          HIDWORD(v110) = v63 + 3;
          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl ***))(*(_QWORD *)v61 + 16))(v61, v35, 4, &v109);
          v67 = (WTF *)v109;
          if (HIDWORD(v110))
          {
            v68 = 16 * HIDWORD(v110);
            v69 = v109 + 1;
            do
            {
              v70 = *v69;
              *v69 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, v53);
                else
                  *(_DWORD *)v70 -= 2;
              }
              v69 += 2;
              v68 -= 16;
            }
            while (v68);
            v67 = (WTF *)v109;
          }
          if (v67)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree(v67, v53);
          }
          v71 = (WTF::StringImpl *)v119[0];
          v119[0] = 0;
          if (!v71)
            goto LABEL_121;
          if (*(_DWORD *)v71 != 2)
            break;
          WTF::StringImpl::destroy(v71, v53);
          v72 = v117;
          v117 = 0;
          if (!v72)
            goto LABEL_126;
LABEL_124:
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
LABEL_126:
            v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v73)
              goto LABEL_129;
            goto LABEL_101;
          }
          WTF::StringImpl::destroy(v72, v53);
          v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v73)
          {
LABEL_129:
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v53);
            else
              *(_DWORD *)v73 -= 2;
          }
LABEL_101:
          if (++v59 == (uint64_t *)v60)
            goto LABEL_133;
        }
        *(_DWORD *)v71 -= 2;
LABEL_121:
        v72 = v117;
        v117 = 0;
        if (!v72)
          goto LABEL_126;
        goto LABEL_124;
      }
LABEL_133:
      v74 = __ldxr(v27);
      if (v74 != 1)
      {
        __clrex();
        v26 = v96;
LABEL_137:
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        goto LABEL_138;
      }
      v26 = v96;
      if (__stlxr(0, v27))
        goto LABEL_137;
LABEL_138:
      v75 = v114;
      v114 = 0;
      if (!v75)
        goto LABEL_141;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
LABEL_141:
        v76 = v28 + 14;
        v77 = v28[22];
        v78 = *(unsigned int *)(a1 + 88);
        if ((_DWORD)v77 == -1)
          goto LABEL_145;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v75, v53);
      v76 = v28 + 14;
      v77 = v28[22];
      v78 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v77 == -1)
      {
LABEL_145:
        if ((_DWORD)v78 == -1)
          goto LABEL_147;
        goto LABEL_146;
      }
LABEL_142:
      if ((_DWORD)v78 == -1)
      {
        ((void (*)(__int128 *, unsigned int *))off_1E9D6BCD8[v77])(&buf, v76);
        v28[22] = -1;
        goto LABEL_147;
      }
LABEL_146:
      *(_QWORD *)&buf = v76;
      ((void (*)(__int128 *))off_1E9D6BD18[v78])(&buf);
LABEL_147:
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v28, &v107);
      if (v108)
      {
        v79 = v107;
        v80 = __ldxr((unsigned __int8 *)v107);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v107))
            goto LABEL_153;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v79);
      }
LABEL_153:
      v81 = v28 + 2;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (v83)
      {
        v84 = v104;
        if (v104)
          goto LABEL_157;
      }
      else
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        v84 = v104;
        if (v104)
        {
LABEL_157:
          WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v84);
          v104 = 0;
          v85 = v84 + 2;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v84 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
          }
        }
      }
      v9 += 40;
      if (v9 == v26)
        goto LABEL_163;
    }
    __clrex();
LABEL_41:
    v32 = (unsigned __int8 *)MEMORY[0x1D82A3914]();
    goto LABEL_42;
  }
LABEL_163:
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v10);
  if (HIDWORD(v101))
  {
    v89 = v100;
    v90 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    do
    {
      v91 = *(unsigned int **)v89;
      *(_QWORD *)v89 = 0;
      if (v91)
      {
        v92 = v91 + 2;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v91 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
      }
      v89 = (WTF *)((char *)v89 + 8);
    }
    while (v89 != v90);
  }
  result = v100;
  if (&v102 != (uint64_t *)v100 && v100 != 0)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    return (WTF *)WTF::fastFree(result, v88);
  }
  return result;
}

void sub_1D807BEA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  unsigned __int8 **v14;
  void *v17;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (__ldaxr(*v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v14))
  {
LABEL_6:
    WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1D82A3914]();
  goto LABEL_6;
}

void sub_1D807BF08(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::Lock *a35,char a36)
{
  unsigned int *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v40;
  WTF::StringImpl *v41;
  WTF::Lock *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  void *v48;

  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_8:
      v41 = *(WTF::StringImpl **)(v38 - 168);
      *(_QWORD *)(v38 - 168) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (a36)
      {
        v42 = a35;
        v43 = __ldxr((unsigned __int8 *)a35);
        if (v43 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a35))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v42);
      }
LABEL_17:
      if (v36)
      {
        v44 = v36 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
      WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a30);
      WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v47);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::StringImpl *result;
  BOOL v7;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  return result;
}

BOOL WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 88);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 88) == 2)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *v3 = v6;
    LODWORD(v6) = __ldxr(v4);
    if ((_DWORD)v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D807C378(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  _OWORD *v3;
  unsigned __int8 *v4;
  __int128 v6;
  int v7;

  v3 = (_OWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 88) == 1)
  {
    v6 = *(_OWORD *)(a2 + 72);
    *v3 = *(_OWORD *)(a2 + 56);
    v3[1] = v6;
    v7 = __ldxr(v4);
    if (v7 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D807C458(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::~Locker(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = *(unsigned int **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  v6 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (!v6)
    return a1;
LABEL_6:
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v6 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74[3];

  v74[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v59, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a2);
  WTF::String::String((WTF::String *)&v57, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v53, "]");
  v7 = v58;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v53);
  if (!v60)
  {
    __break(0xC471u);
    return result;
  }
  v10 = v53;
  v53 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      v11 = v54;
      v54 = 0;
      if (!v11)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  v11 = v54;
  v54 = 0;
  if (!v11)
  {
LABEL_10:
    v12 = v55;
    v55 = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  v12 = v55;
  v55 = 0;
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    v13 = v56;
    v56 = 0;
    if (!v13)
      goto LABEL_20;
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  v13 = v56;
  v56 = 0;
  if (!v13)
  {
LABEL_20:
    v14 = v57;
    v57 = 0;
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  v14 = v57;
  v57 = 0;
  if (!v14)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    v58 = 0;
    if (!v7)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  v58 = 0;
  if (!v7)
  {
LABEL_30:
    v15 = v59;
    v59 = 0;
    if (!v15)
      goto LABEL_35;
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  v15 = v59;
  v59 = 0;
  if (!v15)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_44;
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_44;
LABEL_38:
  WTF::String::utf8();
  if (v51)
    v19 = (char *)v51 + 16;
  else
    v19 = 0;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v62 = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  v17 = (uint64_t)v51;
  v51 = 0;
  if (!v17)
  {
LABEL_44:
    if (!*(_BYTE *)a1)
      goto LABEL_119;
    goto LABEL_45;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*(_BYTE *)a1)
    goto LABEL_119;
LABEL_45:
  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    goto LABEL_119;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_119;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v49 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      *(_DWORD *)buf = 0;
      WTF::String::String((WTF::String *)&v62[4], "ThenCallback disconnected from ");
      v63 = 0;
      WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>::toString(&v64, a2);
      v65 = 0;
      WTF::String::String((WTF::String *)&v66, " aborting [callback:");
      v67 = 0;
      WTF::LogArgument<void const*>::toString();
      v69 = 0;
      WTF::String::String((WTF::String *)&v70, " callSite:");
      v71 = 0;
      WTF::Logger::LogSiteIdentifier::toString(a4);
      v73 = 0;
      WTF::String::String((WTF::String *)v74, "]");
      v51 = 0;
      v52 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
      LODWORD(v52) = 7;
      v51 = v27;
      v28 = HIDWORD(v52);
      *((_DWORD *)v27 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
      v29 = *(_QWORD *)&v62[4];
      if (*(_QWORD *)&v62[4])
        **(_DWORD **)&v62[4] += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v63;
      v30 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      *((_DWORD *)v27 + 4 * (v28 + 2)) = v65;
      v31 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
      *((_DWORD *)v27 + 4 * (v28 + 3)) = v67;
      v32 = v68;
      if (v68)
        *(_DWORD *)v68 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
      *((_DWORD *)v27 + 4 * (v28 + 4)) = v69;
      v33 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
      *((_DWORD *)v27 + 4 * (v28 + 5)) = v71;
      v34 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 5) + 1) = v34;
      *((_DWORD *)v27 + 4 * (v28 + 6)) = v73;
      v35 = v74[0];
      if (v74[0])
        *(_DWORD *)v74[0] += 2;
      *((_QWORD *)v27 + 2 * (v28 + 6) + 1) = v35;
      HIDWORD(v52) = v28 + 7;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 4, &v51);
      v36 = v51;
      if (HIDWORD(v52))
      {
        v37 = a3;
        v38 = 16 * HIDWORD(v52);
        v39 = (WTF::StringImpl **)((char *)v51 + 8);
        do
        {
          v40 = *v39;
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        v36 = v51;
        a3 = v37;
      }
      if (v36)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v36, v18);
      }
      v41 = v74[0];
      v74[0] = 0;
      if (!v41)
        goto LABEL_82;
      if (*(_DWORD *)v41 != 2)
        break;
      WTF::StringImpl::destroy(v41, v18);
      v42 = v72;
      v72 = 0;
      if (!v42)
        goto LABEL_87;
LABEL_85:
      if (*(_DWORD *)v42 != 2)
      {
        *(_DWORD *)v42 -= 2;
LABEL_87:
        v43 = v70;
        v70 = 0;
        if (!v43)
          goto LABEL_92;
        goto LABEL_90;
      }
      WTF::StringImpl::destroy(v42, v18);
      v43 = v70;
      v70 = 0;
      if (!v43)
        goto LABEL_92;
LABEL_90:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_92:
        v44 = v68;
        v68 = 0;
        if (!v44)
          goto LABEL_97;
        goto LABEL_95;
      }
      WTF::StringImpl::destroy(v43, v18);
      v44 = v68;
      v68 = 0;
      if (!v44)
        goto LABEL_97;
LABEL_95:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_97:
        v45 = v66;
        v66 = 0;
        if (!v45)
          goto LABEL_102;
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v44, v18);
      v45 = v66;
      v66 = 0;
      if (!v45)
        goto LABEL_102;
LABEL_100:
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
LABEL_102:
        v46 = v64;
        v64 = 0;
        if (!v46)
          goto LABEL_107;
        goto LABEL_105;
      }
      WTF::StringImpl::destroy(v45, v18);
      v46 = v64;
      v64 = 0;
      if (!v46)
        goto LABEL_107;
LABEL_105:
      if (*(_DWORD *)v46 != 2)
      {
        *(_DWORD *)v46 -= 2;
LABEL_107:
        v47 = *(WTF::StringImpl **)&v62[4];
        *(_QWORD *)&v62[4] = 0;
        if (v47)
          goto LABEL_110;
        goto LABEL_54;
      }
      WTF::StringImpl::destroy(v46, v18);
      v47 = *(WTF::StringImpl **)&v62[4];
      *(_QWORD *)&v62[4] = 0;
      if (v47)
      {
LABEL_110:
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v18);
        else
          *(_DWORD *)v47 -= 2;
      }
LABEL_54:
      if (++v25 == (uint64_t *)v49)
        goto LABEL_114;
    }
    *(_DWORD *)v41 -= 2;
LABEL_82:
    v42 = v72;
    v72 = 0;
    if (!v42)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_114:
  v48 = __ldxr(v20);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, v20))
LABEL_118:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_119:
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D807CCEC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  unsigned __int8 *v44;
  int v46;

  v46 = __ldxr(v44);
  if (v46 == 1)
  {
    if (!__stlxr(0, v44))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_7:
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
    {
      WTF::StringImpl::destroy(a30, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a30 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  char v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;

  v13 = result;
  if (a2)
  {
    v14 = *(_DWORD *)(a2 + 4);
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v14 = 0;
    if (a3)
    {
LABEL_3:
      v15 = *(_DWORD *)(a3 + 4);
      if (a4)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  v15 = 0;
  if (a4)
  {
LABEL_4:
    v16 = *(_DWORD *)(a4 + 4);
    if (a5)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v16 = 0;
  if (a5)
  {
LABEL_5:
    v17 = *(_DWORD *)(a5 + 4);
    if (a6)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v17 = 0;
  if (a6)
  {
LABEL_6:
    v18 = *(_DWORD *)(a6 + 4);
    if (a7)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v18 = 0;
  if (a7)
  {
LABEL_7:
    v19 = *(_DWORD *)(a7 + 4);
    if (a8)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v19 = 0;
  if (a8)
  {
LABEL_8:
    v20 = *(_DWORD *)(a8 + 4);
    if ((v20 | v19) < 0)
      goto LABEL_44;
    goto LABEL_17;
  }
LABEL_16:
  v20 = 0;
  if (v19 < 0)
  {
LABEL_44:
    *result = 0;
    return result;
  }
LABEL_17:
  v21 = __OFADD__(v19, v20);
  v22 = v19 + v20;
  v23 = v21;
  if (v18 < 0 || (v23 & 1) != 0)
    goto LABEL_44;
  v21 = __OFADD__(v18, v22);
  v24 = v18 + v22;
  v25 = v21;
  if (v17 < 0 || v25)
    goto LABEL_44;
  v21 = __OFADD__(v17, v24);
  v26 = v17 + v24;
  v27 = v21;
  if (v16 < 0 || v27)
    goto LABEL_44;
  v21 = __OFADD__(v16, v26);
  v28 = v16 + v26;
  v29 = v21;
  if (v15 < 0 || v29)
    goto LABEL_44;
  v21 = __OFADD__(v15, v28);
  v30 = v15 + v28;
  v31 = v21;
  if (v14 < 0)
    goto LABEL_44;
  if (v31)
    goto LABEL_44;
  v32 = v14 + v30;
  if (__OFADD__(v14, v30))
    goto LABEL_44;
  if ((!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0)
    && (!a3 || (*(_BYTE *)(a3 + 16) & 4) != 0)
    && (!a4 || (*(_BYTE *)(a4 + 16) & 4) != 0)
    && (!a5 || (*(_BYTE *)(a5 + 16) & 4) != 0)
    && (!a6 || (*(_BYTE *)(a6 + 16) & 4) != 0))
  {
    if (a7)
    {
      v34 = *(_DWORD *)(a7 + 16);
      v33 = (v34 >> 2) & 1;
      if (!a8 || (v34 & 4) == 0)
        goto LABEL_56;
    }
    else if (!a8)
    {
      v33 = 1;
      goto LABEL_56;
    }
    v33 = (*(unsigned __int8 *)(a8 + 16) >> 2) & 1;
  }
  else
  {
    v33 = 0;
  }
LABEL_56:
  result = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v35, v32, v33, a2, a3, a4, a5, a6, a7, a8);
  *v13 = v35;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  int8x16_t *v19;
  size_t v20;
  _BYTE *v21;
  unint64_t v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  _WORD *v25;
  int8x16_t *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  _WORD *v42;
  unint64_t v43;
  __int128 v44;
  char *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  size_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  _BYTE *v56;
  int8x16_t *v57;
  char v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  _WORD *v63;
  int8x16_t *v64;
  __int16 v65;
  int8x16_t *v66;
  size_t v67;
  _BYTE *v68;
  unint64_t v69;
  unsigned __int128 *v70;
  unsigned __int128 v71;
  size_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  _BYTE *v76;
  int8x16_t *v77;
  char v78;
  int8x16_t *v79;
  size_t v80;
  _BYTE *v81;
  unint64_t v82;
  unsigned __int128 *v83;
  unsigned __int128 v84;
  unint64_t v85;
  size_t v86;
  BOOL v87;
  unint64_t v88;
  _BYTE *v89;
  int8x16_t *v90;
  char v91;
  int8x16_t *v92;
  size_t v93;
  _BYTE *v94;
  unint64_t v95;
  unsigned __int128 *v96;
  unsigned __int128 v97;
  size_t v98;
  unint64_t v99;
  unint64_t v100;
  BOOL v101;
  unint64_t v102;
  _BYTE *v103;
  int8x16_t *v104;
  char v105;
  int8x16_t *v106;
  uint64_t v107;
  _WORD *v108;
  unint64_t v109;
  __int128 v110;
  char *v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  char *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  _WORD *v119;
  int8x16_t *v120;
  __int16 v121;
  int8x16_t *v122;
  uint64_t v123;
  _WORD *v124;
  unint64_t v125;
  __int128 v126;
  char *v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  char *v131;
  char *v132;
  char *v133;
  unint64_t v134;
  BOOL v135;
  uint64_t v136;
  unint64_t v137;
  _WORD *v138;
  int8x16_t *v139;
  __int16 v140;
  int8x16_t *v141;
  uint64_t v142;
  _WORD *v143;
  unint64_t v144;
  __int128 v145;
  char *v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  char *v150;
  char *v151;
  char *v152;
  unint64_t v153;
  BOOL v154;
  uint64_t v155;
  unint64_t v156;
  _WORD *v157;
  int8x16_t *v158;
  __int16 v159;
  uint64_t v160;
  unint64_t v161;
  int8x16_t *v162;
  int8x16_t *v163;
  unint64_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int16x8_t *v169;
  int8x8_t *v170;
  unint64_t v171;
  int16x8_t v172;
  int8x16_t *v173;
  int8x16_t *v174;
  unint64_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int16x8_t *v180;
  int8x8_t *v181;
  unint64_t v182;
  int16x8_t v183;
  int8x16_t *v184;
  int8x16_t *v185;
  unint64_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int16x8_t *v191;
  int8x8_t *v192;
  unint64_t v193;
  int16x8_t v194;
  int8x16_t *v195;
  int8x16_t *v196;
  unint64_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int16x8_t *v202;
  int8x8_t *v203;
  unint64_t v204;
  int16x8_t v205;
  uint8x8_t *v206;
  uint16x8_t *v207;
  unint64_t v208;
  uint8x16_t v209;
  uint16x8_t v210;
  uint16x8_t v211;
  uint8x8_t *v212;
  uint16x8_t *v213;
  unint64_t v214;
  uint8x8_t v215;
  uint8x8_t *v216;
  uint16x8_t *v217;
  unint64_t v218;
  uint8x16_t v219;
  uint16x8_t v220;
  uint16x8_t v221;
  uint8x8_t *v222;
  uint16x8_t *v223;
  unint64_t v224;
  uint8x8_t v225;
  uint8x8_t *v226;
  uint16x8_t *v227;
  unint64_t v228;
  uint8x16_t v229;
  uint16x8_t v230;
  uint16x8_t v231;
  uint8x8_t *v232;
  uint16x8_t *v233;
  unint64_t v234;
  uint8x8_t v235;
  uint8x8_t *v236;
  uint16x8_t *v237;
  unint64_t v238;
  uint8x16_t v239;
  uint16x8_t v240;
  uint16x8_t v241;
  uint8x8_t *v242;
  uint16x8_t *v243;
  unint64_t v244;
  uint8x8_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int8x16x2_t v249;
  int8x16x2_t v250;
  int8x16x2_t v251;
  int8x16x2_t v252;
  int8x16x2_t v253;
  int8x16x2_t v254;
  int8x16x2_t v255;
  int8x16x2_t v256;
  int8x16x2_t v257;
  int8x16x2_t v258;
  int8x16x2_t v259;
  int8x16x2_t v260;

  v16 = (_QWORD *)result;
  if (!a3)
  {
    if (!a2)
      goto LABEL_14;
    if (a2 > 0x7FFFFFEF)
      goto LABEL_13;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    v17 = v248;
    if (!v248)
      goto LABEL_201;
    v247 = a8;
    v25 = (_WORD *)(v248 + 20);
    *(_DWORD *)v248 = 2;
    *(_DWORD *)(v248 + 4) = a2;
    *(_QWORD *)(v248 + 8) = v248 + 20;
    *(_DWORD *)(v248 + 16) = 0;
    if (!a4)
    {
      v35 = 0;
      v36 = (_WORD *)(v248 + 20);
      if (a5)
        goto LABEL_136;
      goto LABEL_29;
    }
    v26 = *(int8x16_t **)(a4 + 8);
    v27 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) == 0)
    {
      if ((_DWORD)v27)
      {
        if ((_DWORD)v27 == 1)
          *v25 = v26->i16[0];
        else
          memcpy((void *)(v248 + 20), v26, 2 * v27);
      }
LABEL_135:
      v35 = *(unsigned int *)(a4 + 4);
      v36 = &v25[v35];
      if (a5)
      {
LABEL_136:
        v106 = *(int8x16_t **)(a5 + 8);
        v107 = *(unsigned int *)(a5 + 4);
        if ((*(_BYTE *)(a5 + 16) & 4) == 0)
        {
          if ((_DWORD)v107)
          {
            if ((_DWORD)v107 == 1)
              *v36 = v106->i16[0];
            else
              memcpy(v36, v106, 2 * v107);
          }
LABEL_153:
          v37 = *(unsigned int *)(a5 + 4);
          v38 = &v36[v37];
          if (a6)
          {
LABEL_154:
            v122 = *(int8x16_t **)(a6 + 8);
            v123 = *(unsigned int *)(a6 + 4);
            if ((*(_BYTE *)(a6 + 16) & 4) == 0)
            {
              if ((_DWORD)v123)
              {
                if ((_DWORD)v123 == 1)
                  *v38 = v122->i16[0];
                else
                  memcpy(v38, v122, 2 * v123);
              }
LABEL_176:
              v39 = *(unsigned int *)(a6 + 4);
              v40 = &v38[v39];
              if (a7)
              {
LABEL_177:
                v141 = *(int8x16_t **)(a7 + 8);
                v142 = *(unsigned int *)(a7 + 4);
                if ((*(_BYTE *)(a7 + 16) & 4) == 0)
                {
                  if ((_DWORD)v142)
                  {
                    if ((_DWORD)v142 == 1)
                      *v40 = v141->i16[0];
                    else
                      memcpy(v40, v141, 2 * v142);
                  }
                  goto LABEL_199;
                }
                v143 = &v40[v142];
                if (v142 < 0x40)
                {
                  v144 = (unint64_t)v40;
                }
                else
                {
                  v144 = (unint64_t)&v40[v142 & 0xFFFFFFC0];
                  v145 = 0uLL;
                  v146 = (char *)v40;
                  do
                  {
                    v252.val[0] = *v141;
                    v147 = v141[1];
                    v256.val[0] = v141[2];
                    v148 = v141[3];
                    v141 += 4;
                    v149 = v148;
                    v256.val[1] = 0uLL;
                    v260.val[0] = v147;
                    v252.val[1] = 0uLL;
                    v150 = v146;
                    vst2q_s8(v150, v252);
                    v150 += 32;
                    v260.val[1] = 0uLL;
                    vst2q_s8(v150, v260);
                    v151 = v146 + 64;
                    vst2q_s8(v151, v256);
                    v152 = v146 + 96;
                    vst2q_s8(v152, *(int8x16x2_t *)(&v145 - 1));
                    v146 += 128;
                  }
                  while (v146 != (char *)v144);
                }
                if ((_WORD *)v144 == v143)
                {
LABEL_199:
                  v41 = *(unsigned int *)(a7 + 4);
                  goto LABEL_200;
                }
                v153 = v248 + 2 * (v35 + v37 + v39 + v142) - v144 + 18;
                if (v153 < 0xE
                  || (v144 < (unint64_t)v141->u64 + (v153 >> 1) + 1
                    ? (v154 = (unint64_t)v141 >= (v153 & 0xFFFFFFFFFFFFFFFELL) + v144 + 2)
                    : (v154 = 1),
                      !v154))
                {
                  v157 = (_WORD *)v144;
                  v158 = v141;
                  goto LABEL_196;
                }
                v155 = (v153 >> 1) + 1;
                if (v153 >= 0x3E)
                {
                  v156 = v155 & 0xFFFFFFFFFFFFFFE0;
                  v236 = (uint8x8_t *)&v141[1];
                  v237 = (uint16x8_t *)(v144 + 32);
                  v238 = v155 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v239 = *(uint8x16_t *)v236[-2].i8;
                    v240 = vmovl_u8(*v236);
                    v241 = vmovl_high_u8(*(uint8x16_t *)v236->i8);
                    v237[-2] = vmovl_u8(*(uint8x8_t *)v239.i8);
                    v237[-1] = vmovl_high_u8(v239);
                    *v237 = v240;
                    v237[1] = v241;
                    v237 += 4;
                    v236 += 4;
                    v238 -= 32;
                  }
                  while (v238);
                  if (v155 == v156)
                    goto LABEL_199;
                  if ((v155 & 0x18) == 0)
                  {
                    v158 = (int8x16_t *)((char *)v141 + v156);
                    v157 = (_WORD *)(v144 + 2 * v156);
                    do
                    {
LABEL_196:
                      v159 = v158->u8[0];
                      v158 = (int8x16_t *)((char *)v158 + 1);
                      *v157++ = v159;
                    }
                    while (v157 != v143);
                    goto LABEL_199;
                  }
                }
                else
                {
                  v156 = 0;
                }
                v157 = (_WORD *)(v144 + 2 * (v155 & 0xFFFFFFFFFFFFFFF8));
                v158 = (int8x16_t *)((char *)v141 + (v155 & 0xFFFFFFFFFFFFFFF8));
                v242 = (uint8x8_t *)&v141->i8[v156];
                v243 = (uint16x8_t *)(v144 + 2 * v156);
                v244 = v156 - (v155 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v245 = *v242++;
                  *v243++ = vmovl_u8(v245);
                  v244 += 8;
                }
                while (v244);
                if (v155 == (v155 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_199;
                goto LABEL_196;
              }
LABEL_31:
              v41 = 0;
LABEL_200:
              result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint16x8_t *)&v40[v41], v247, a9, a10);
              goto LABEL_201;
            }
            v124 = &v38[v123];
            if (v123 < 0x40)
            {
              v125 = (unint64_t)v38;
            }
            else
            {
              v125 = (unint64_t)&v38[v123 & 0xFFFFFFC0];
              v126 = 0uLL;
              v127 = (char *)v38;
              do
              {
                v251.val[0] = *v122;
                v128 = v122[1];
                v255.val[0] = v122[2];
                v129 = v122[3];
                v122 += 4;
                v130 = v129;
                v255.val[1] = 0uLL;
                v259.val[0] = v128;
                v251.val[1] = 0uLL;
                v131 = v127;
                vst2q_s8(v131, v251);
                v131 += 32;
                v259.val[1] = 0uLL;
                vst2q_s8(v131, v259);
                v132 = v127 + 64;
                vst2q_s8(v132, v255);
                v133 = v127 + 96;
                vst2q_s8(v133, *(int8x16x2_t *)(&v126 - 1));
                v127 += 128;
              }
              while (v127 != (char *)v125);
            }
            if ((_WORD *)v125 == v124)
              goto LABEL_176;
            v134 = v248 + 2 * (v35 + v37 + v123) - v125 + 18;
            if (v134 < 0xE
              || (v125 < (unint64_t)v122->u64 + (v134 >> 1) + 1
                ? (v135 = (unint64_t)v122 >= (v134 & 0xFFFFFFFFFFFFFFFELL) + v125 + 2)
                : (v135 = 1),
                  !v135))
            {
              v138 = (_WORD *)v125;
              v139 = v122;
              goto LABEL_173;
            }
            v136 = (v134 >> 1) + 1;
            if (v134 >= 0x3E)
            {
              v137 = v136 & 0xFFFFFFFFFFFFFFE0;
              v226 = (uint8x8_t *)&v122[1];
              v227 = (uint16x8_t *)(v125 + 32);
              v228 = v136 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v229 = *(uint8x16_t *)v226[-2].i8;
                v230 = vmovl_u8(*v226);
                v231 = vmovl_high_u8(*(uint8x16_t *)v226->i8);
                v227[-2] = vmovl_u8(*(uint8x8_t *)v229.i8);
                v227[-1] = vmovl_high_u8(v229);
                *v227 = v230;
                v227[1] = v231;
                v227 += 4;
                v226 += 4;
                v228 -= 32;
              }
              while (v228);
              if (v136 == v137)
                goto LABEL_176;
              if ((v136 & 0x18) == 0)
              {
                v139 = (int8x16_t *)((char *)v122 + v137);
                v138 = (_WORD *)(v125 + 2 * v137);
                goto LABEL_173;
              }
            }
            else
            {
              v137 = 0;
            }
            v138 = (_WORD *)(v125 + 2 * (v136 & 0xFFFFFFFFFFFFFFF8));
            v139 = (int8x16_t *)((char *)v122 + (v136 & 0xFFFFFFFFFFFFFFF8));
            v232 = (uint8x8_t *)&v122->i8[v137];
            v233 = (uint16x8_t *)(v125 + 2 * v137);
            v234 = v137 - (v136 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v235 = *v232++;
              *v233++ = vmovl_u8(v235);
              v234 += 8;
            }
            while (v234);
            if (v136 == (v136 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_176;
            do
            {
LABEL_173:
              v140 = v139->u8[0];
              v139 = (int8x16_t *)((char *)v139 + 1);
              *v138++ = v140;
            }
            while (v138 != v124);
            goto LABEL_176;
          }
LABEL_30:
          v39 = 0;
          v40 = v38;
          if (a7)
            goto LABEL_177;
          goto LABEL_31;
        }
        v108 = &v36[v107];
        if (v107 < 0x40)
        {
          v109 = (unint64_t)v36;
        }
        else
        {
          v109 = (unint64_t)&v36[v107 & 0xFFFFFFC0];
          v110 = 0uLL;
          v111 = (char *)v36;
          do
          {
            v250.val[0] = *v106;
            v112 = v106[1];
            v254.val[0] = v106[2];
            v113 = v106[3];
            v106 += 4;
            v114 = v113;
            v254.val[1] = 0uLL;
            v258.val[0] = v112;
            v250.val[1] = 0uLL;
            v115 = v111;
            vst2q_s8(v115, v250);
            v115 += 32;
            v258.val[1] = 0uLL;
            vst2q_s8(v115, v258);
            v116 = v111 + 64;
            vst2q_s8(v116, v254);
            v117 = v111 + 96;
            vst2q_s8(v117, *(int8x16x2_t *)(&v110 - 1));
            v111 += 128;
          }
          while (v111 != (char *)v109);
        }
        if ((_WORD *)v109 == v108)
          goto LABEL_153;
        v118 = v248 + 2 * (v35 + v107) - v109 + 18;
        if (v118 < 0xE
          || v109 < (unint64_t)v106->u64 + (v118 >> 1) + 1
          && (unint64_t)v106 < (v118 & 0xFFFFFFFFFFFFFFFELL) + v109 + 2)
        {
          v119 = (_WORD *)v109;
          v120 = v106;
          goto LABEL_150;
        }
        v160 = (v118 >> 1) + 1;
        if (v118 >= 0x3E)
        {
          v161 = v160 & 0xFFFFFFFFFFFFFFE0;
          v206 = (uint8x8_t *)&v106[1];
          v207 = (uint16x8_t *)(v109 + 32);
          v208 = v160 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v209 = *(uint8x16_t *)v206[-2].i8;
            v210 = vmovl_u8(*v206);
            v211 = vmovl_high_u8(*(uint8x16_t *)v206->i8);
            v207[-2] = vmovl_u8(*(uint8x8_t *)v209.i8);
            v207[-1] = vmovl_high_u8(v209);
            *v207 = v210;
            v207[1] = v211;
            v207 += 4;
            v206 += 4;
            v208 -= 32;
          }
          while (v208);
          if (v160 == v161)
            goto LABEL_153;
          if ((v160 & 0x18) == 0)
          {
            v120 = (int8x16_t *)((char *)v106 + v161);
            v119 = (_WORD *)(v109 + 2 * v161);
            goto LABEL_150;
          }
        }
        else
        {
          v161 = 0;
        }
        v119 = (_WORD *)(v109 + 2 * (v160 & 0xFFFFFFFFFFFFFFF8));
        v120 = (int8x16_t *)((char *)v106 + (v160 & 0xFFFFFFFFFFFFFFF8));
        v212 = (uint8x8_t *)&v106->i8[v161];
        v213 = (uint16x8_t *)(v109 + 2 * v161);
        v214 = v161 - (v160 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v215 = *v212++;
          *v213++ = vmovl_u8(v215);
          v214 += 8;
        }
        while (v214);
        if (v160 == (v160 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_153;
        do
        {
LABEL_150:
          v121 = v120->u8[0];
          v120 = (int8x16_t *)((char *)v120 + 1);
          *v119++ = v121;
        }
        while (v119 != v108);
        goto LABEL_153;
      }
LABEL_29:
      v37 = 0;
      v38 = v36;
      if (a6)
        goto LABEL_154;
      goto LABEL_30;
    }
    v42 = &v25[v27];
    if (v27 < 0x40)
    {
      v43 = v248 + 20;
    }
    else
    {
      v43 = (unint64_t)&v25[v27 & 0xFFFFFFC0];
      v44 = 0uLL;
      v45 = (char *)(v248 + 20);
      do
      {
        v249.val[0] = *v26;
        v46 = v26[1];
        v253.val[0] = v26[2];
        v47 = v26[3];
        v26 += 4;
        v48 = v47;
        v253.val[1] = 0uLL;
        v257.val[0] = v46;
        v249.val[1] = 0uLL;
        v49 = v45;
        vst2q_s8(v49, v249);
        v49 += 32;
        v257.val[1] = 0uLL;
        vst2q_s8(v49, v257);
        v50 = v45 + 64;
        vst2q_s8(v50, v253);
        v51 = v45 + 96;
        vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
        v45 += 128;
      }
      while (v45 != (char *)v43);
    }
    if ((_WORD *)v43 == v42)
      goto LABEL_135;
    v59 = v248 + 2 * v27 - v43 + 18;
    if (v59 < 0xE
      || (v43 < (unint64_t)v26->u64 + (v59 >> 1) + 1
        ? (v60 = (unint64_t)v26 >= (v59 & 0xFFFFFFFFFFFFFFFELL) + v43 + 2)
        : (v60 = 1),
          !v60))
    {
      v63 = (_WORD *)v43;
      v64 = v26;
      goto LABEL_60;
    }
    v61 = (v59 >> 1) + 1;
    if (v59 >= 0x3E)
    {
      v62 = v61 & 0xFFFFFFFFFFFFFFE0;
      v216 = (uint8x8_t *)&v26[1];
      v217 = (uint16x8_t *)(v43 + 32);
      v218 = v61 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v219 = *(uint8x16_t *)v216[-2].i8;
        v220 = vmovl_u8(*v216);
        v221 = vmovl_high_u8(*(uint8x16_t *)v216->i8);
        v217[-2] = vmovl_u8(*(uint8x8_t *)v219.i8);
        v217[-1] = vmovl_high_u8(v219);
        *v217 = v220;
        v217[1] = v221;
        v217 += 4;
        v216 += 4;
        v218 -= 32;
      }
      while (v218);
      if (v61 == v62)
        goto LABEL_135;
      if ((v61 & 0x18) == 0)
      {
        v64 = (int8x16_t *)((char *)v26 + v62);
        v63 = (_WORD *)(v43 + 2 * v62);
        goto LABEL_60;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = (_WORD *)(v43 + 2 * (v61 & 0xFFFFFFFFFFFFFFF8));
    v64 = (int8x16_t *)((char *)v26 + (v61 & 0xFFFFFFFFFFFFFFF8));
    v222 = (uint8x8_t *)&v26->i8[v62];
    v223 = (uint16x8_t *)(v43 + 2 * v62);
    v224 = v62 - (v61 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v225 = *v222++;
      *v223++ = vmovl_u8(v225);
      v224 += 8;
    }
    while (v224);
    if (v61 == (v61 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_135;
    do
    {
LABEL_60:
      v65 = v64->u8[0];
      v64 = (int8x16_t *)((char *)v64 + 1);
      *v63++ = v65;
    }
    while (v63 != v42);
    goto LABEL_135;
  }
  if (!a2)
  {
LABEL_14:
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_201;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_13:
    v17 = 0;
    goto LABEL_201;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  v17 = v248;
  if (v248)
  {
    v246 = a8;
    v18 = (_BYTE *)(v248 + 20);
    *(_DWORD *)v248 = 2;
    *(_DWORD *)(v248 + 4) = a2;
    *(_QWORD *)(v248 + 8) = v248 + 20;
    *(_DWORD *)(v248 + 16) = 4;
    if (!a4)
    {
      v28 = 0;
      v29 = (_BYTE *)(v248 + 20);
      if (a5)
        goto LABEL_64;
      goto LABEL_22;
    }
    v19 = *(int8x16_t **)(a4 + 8);
    v20 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v20)
      {
        if ((_DWORD)v20 == 1)
          *v18 = v19->i8[0];
        else
          memcpy((void *)(v248 + 20), v19, v20);
      }
    }
    else
    {
      v21 = &v18[v20];
      if (v20 < 0x10)
      {
        v22 = v248 + 20;
      }
      else
      {
        v22 = (unint64_t)&v18[v20 & 0xFFFFFFF0];
        v23 = (unsigned __int128 *)(v248 + 20);
        do
        {
          v24 = (unsigned __int128)vld2q_s8(v19->i8);
          v19 += 2;
          *v23++ = v24;
        }
        while (v23 != (unsigned __int128 *)v22);
      }
      if ((_BYTE *)v22 != v21)
      {
        v52 = v248 + v20;
        v53 = v248 + v20 - v22 + 20;
        if (v53 < 8
          || (v22 < (unint64_t)&v19[2].u64[1] + 2 * v52 + -2 * v22
            ? (v54 = (unint64_t)v19 >= v52 + 20)
            : (v54 = 1),
              !v54))
        {
          v56 = (_BYTE *)v22;
          v57 = v19;
          goto LABEL_47;
        }
        if (v53 >= 0x20)
        {
          v55 = v53 & 0xFFFFFFFFFFFFFFE0;
          v162 = v19 + 2;
          v163 = (int8x16_t *)(v22 + 16);
          v164 = v53 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v166 = v162[-2];
            v165 = v162[-1];
            v168 = *v162;
            v167 = v162[1];
            v162 += 4;
            v163[-1] = vuzp1q_s8(v166, v165);
            *v163 = vuzp1q_s8(v168, v167);
            v163 += 2;
            v164 -= 32;
          }
          while (v164);
          if (v53 == v55)
            goto LABEL_63;
          if ((v53 & 0x18) == 0)
          {
            v57 = (int8x16_t *)((char *)v19 + 2 * v55);
            v56 = (_BYTE *)(v22 + v55);
            do
            {
LABEL_47:
              v58 = v57->i8[0];
              v57 = (int8x16_t *)((char *)v57 + 2);
              *v56++ = v58;
            }
            while (v56 != v21);
            goto LABEL_63;
          }
        }
        else
        {
          v55 = 0;
        }
        v56 = (_BYTE *)(v22 + (v53 & 0xFFFFFFFFFFFFFFF8));
        v57 = (int8x16_t *)((char *)v19 + 2 * (v53 & 0xFFFFFFFFFFFFFFF8));
        v169 = (int16x8_t *)((char *)v19 + 2 * v55);
        v170 = (int8x8_t *)(v22 + v55);
        v171 = v55 - (v53 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v172 = *v169++;
          *v170++ = vmovn_s16(v172);
          v171 += 8;
        }
        while (v171);
        if (v53 != (v53 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_47;
      }
    }
LABEL_63:
    v28 = *(unsigned int *)(a4 + 4);
    v29 = &v18[v28];
    if (a5)
    {
LABEL_64:
      v66 = *(int8x16_t **)(a5 + 8);
      v67 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        if ((_DWORD)v67)
        {
          if ((_DWORD)v67 == 1)
            *v29 = v66->i8[0];
          else
            memcpy(v29, v66, v67);
        }
      }
      else
      {
        v68 = &v29[v67];
        if (v67 < 0x10)
        {
          v69 = (unint64_t)v29;
        }
        else
        {
          v69 = (unint64_t)&v29[v67 & 0xFFFFFFF0];
          v70 = (unsigned __int128 *)v29;
          do
          {
            v71 = (unsigned __int128)vld2q_s8(v66->i8);
            v66 += 2;
            *v70++ = v71;
          }
          while (v70 != (unsigned __int128 *)v69);
        }
        if ((_BYTE *)v69 != v68)
        {
          v72 = v28 + v248 + v67;
          v73 = v72 - v69 + 20;
          if (v73 < 8
            || (v69 < (unint64_t)&v66[2].u64[1] + 2 * v72 + -2 * v69
              ? (v74 = (unint64_t)v66 >= v72 + 20)
              : (v74 = 1),
                !v74))
          {
            v76 = (_BYTE *)v69;
            v77 = v66;
            goto LABEL_83;
          }
          if (v73 >= 0x20)
          {
            v75 = v73 & 0xFFFFFFFFFFFFFFE0;
            v173 = v66 + 2;
            v174 = (int8x16_t *)(v69 + 16);
            v175 = v73 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v177 = v173[-2];
              v176 = v173[-1];
              v179 = *v173;
              v178 = v173[1];
              v173 += 4;
              v174[-1] = vuzp1q_s8(v177, v176);
              *v174 = vuzp1q_s8(v179, v178);
              v174 += 2;
              v175 -= 32;
            }
            while (v175);
            if (v73 == v75)
              goto LABEL_86;
            if ((v73 & 0x18) == 0)
            {
              v77 = (int8x16_t *)((char *)v66 + 2 * v75);
              v76 = (_BYTE *)(v69 + v75);
              do
              {
LABEL_83:
                v78 = v77->i8[0];
                v77 = (int8x16_t *)((char *)v77 + 2);
                *v76++ = v78;
              }
              while (v76 != v68);
              goto LABEL_86;
            }
          }
          else
          {
            v75 = 0;
          }
          v76 = (_BYTE *)(v69 + (v73 & 0xFFFFFFFFFFFFFFF8));
          v77 = (int8x16_t *)((char *)v66 + 2 * (v73 & 0xFFFFFFFFFFFFFFF8));
          v180 = (int16x8_t *)((char *)v66 + 2 * v75);
          v181 = (int8x8_t *)(v69 + v75);
          v182 = v75 - (v73 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v183 = *v180++;
            *v181++ = vmovn_s16(v183);
            v182 += 8;
          }
          while (v182);
          if (v73 != (v73 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_83;
        }
      }
LABEL_86:
      v30 = *(unsigned int *)(a5 + 4);
      v31 = &v29[v30];
      if (a6)
      {
LABEL_87:
        v79 = *(int8x16_t **)(a6 + 8);
        v80 = *(unsigned int *)(a6 + 4);
        if ((*(_BYTE *)(a6 + 16) & 4) != 0)
        {
          if ((_DWORD)v80)
          {
            if ((_DWORD)v80 == 1)
              *v31 = v79->i8[0];
            else
              memcpy(v31, v79, v80);
          }
        }
        else
        {
          v81 = &v31[v80];
          if (v80 < 0x10)
          {
            v82 = (unint64_t)v31;
          }
          else
          {
            v82 = (unint64_t)&v31[v80 & 0xFFFFFFF0];
            v83 = (unsigned __int128 *)v31;
            do
            {
              v84 = (unsigned __int128)vld2q_s8(v79->i8);
              v79 += 2;
              *v83++ = v84;
            }
            while (v83 != (unsigned __int128 *)v82);
          }
          if ((_BYTE *)v82 != v81)
          {
            v85 = v28 + v30 + v248 + v80 - v82 + 20;
            if (v85 < 8
              || ((v86 = v30 + v28 + v248 + v80, v82 < (unint64_t)&v79[2].u64[1] + 2 * v86 + -2 * v82)
                ? (v87 = (unint64_t)v79 >= v86 + 20)
                : (v87 = 1),
                  !v87))
            {
              v89 = (_BYTE *)v82;
              v90 = v79;
              goto LABEL_106;
            }
            if (v85 >= 0x20)
            {
              v88 = v85 & 0xFFFFFFFFFFFFFFE0;
              v184 = v79 + 2;
              v185 = (int8x16_t *)(v82 + 16);
              v186 = v85 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v188 = v184[-2];
                v187 = v184[-1];
                v190 = *v184;
                v189 = v184[1];
                v184 += 4;
                v185[-1] = vuzp1q_s8(v188, v187);
                *v185 = vuzp1q_s8(v190, v189);
                v185 += 2;
                v186 -= 32;
              }
              while (v186);
              if (v85 == v88)
                goto LABEL_109;
              if ((v85 & 0x18) == 0)
              {
                v90 = (int8x16_t *)((char *)v79 + 2 * v88);
                v89 = (_BYTE *)(v82 + v88);
                do
                {
LABEL_106:
                  v91 = v90->i8[0];
                  v90 = (int8x16_t *)((char *)v90 + 2);
                  *v89++ = v91;
                }
                while (v89 != v81);
                goto LABEL_109;
              }
            }
            else
            {
              v88 = 0;
            }
            v89 = (_BYTE *)(v82 + (v85 & 0xFFFFFFFFFFFFFFF8));
            v90 = (int8x16_t *)((char *)v79 + 2 * (v85 & 0xFFFFFFFFFFFFFFF8));
            v191 = (int16x8_t *)((char *)v79 + 2 * v88);
            v192 = (int8x8_t *)(v82 + v88);
            v193 = v88 - (v85 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v194 = *v191++;
              *v192++ = vmovn_s16(v194);
              v193 += 8;
            }
            while (v193);
            if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_106;
          }
        }
LABEL_109:
        v32 = *(unsigned int *)(a6 + 4);
        v33 = &v31[v32];
        if (a7)
        {
LABEL_110:
          v92 = *(int8x16_t **)(a7 + 8);
          v93 = *(unsigned int *)(a7 + 4);
          if ((*(_BYTE *)(a7 + 16) & 4) != 0)
          {
            if ((_DWORD)v93)
            {
              if ((_DWORD)v93 == 1)
                *v33 = v92->i8[0];
              else
                memcpy(v33, v92, v93);
            }
            goto LABEL_132;
          }
          v94 = &v33[v93];
          if (v93 < 0x10)
          {
            v95 = (unint64_t)v33;
          }
          else
          {
            v95 = (unint64_t)&v33[v93 & 0xFFFFFFF0];
            v96 = (unsigned __int128 *)v33;
            do
            {
              v97 = (unsigned __int128)vld2q_s8(v92->i8);
              v92 += 2;
              *v96++ = v97;
            }
            while (v96 != (unsigned __int128 *)v95);
          }
          if ((_BYTE *)v95 == v94)
          {
LABEL_132:
            v34 = *(unsigned int *)(a7 + 4);
            goto LABEL_133;
          }
          v98 = v28 + v30 + v32 + v248 + v93;
          v99 = v98 - v95 + 20;
          if (v99 < 8
            || ((v100 = v32 + v30 + v28 + v248 + v93 + 20, v95 < (unint64_t)&v92[2].u64[1] + 2 * v98 + -2 * v95)
              ? (v101 = (unint64_t)v92 >= v100)
              : (v101 = 1),
                !v101))
          {
            v103 = (_BYTE *)v95;
            v104 = v92;
            goto LABEL_129;
          }
          if (v99 >= 0x20)
          {
            v102 = v99 & 0xFFFFFFFFFFFFFFE0;
            v195 = v92 + 2;
            v196 = (int8x16_t *)(v95 + 16);
            v197 = v99 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v199 = v195[-2];
              v198 = v195[-1];
              v201 = *v195;
              v200 = v195[1];
              v195 += 4;
              v196[-1] = vuzp1q_s8(v199, v198);
              *v196 = vuzp1q_s8(v201, v200);
              v196 += 2;
              v197 -= 32;
            }
            while (v197);
            if (v99 == v102)
              goto LABEL_132;
            if ((v99 & 0x18) == 0)
            {
              v104 = (int8x16_t *)((char *)v92 + 2 * v102);
              v103 = (_BYTE *)(v95 + v102);
              do
              {
LABEL_129:
                v105 = v104->i8[0];
                v104 = (int8x16_t *)((char *)v104 + 2);
                *v103++ = v105;
              }
              while (v103 != v94);
              goto LABEL_132;
            }
          }
          else
          {
            v102 = 0;
          }
          v103 = (_BYTE *)(v95 + (v99 & 0xFFFFFFFFFFFFFFF8));
          v104 = (int8x16_t *)((char *)v92 + 2 * (v99 & 0xFFFFFFFFFFFFFFF8));
          v202 = (int16x8_t *)((char *)v92 + 2 * v102);
          v203 = (int8x8_t *)(v95 + v102);
          v204 = v102 - (v99 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v205 = *v202++;
            *v203++ = vmovn_s16(v205);
            v204 += 8;
          }
          while (v204);
          if (v99 == (v99 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_132;
          goto LABEL_129;
        }
LABEL_24:
        v34 = 0;
LABEL_133:
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((int8x16_t *)&v33[v34], v246, a9, a10);
        goto LABEL_201;
      }
LABEL_23:
      v32 = 0;
      v33 = v31;
      if (a7)
        goto LABEL_110;
      goto LABEL_24;
    }
LABEL_22:
    v30 = 0;
    v31 = v29;
    if (a6)
      goto LABEL_87;
    goto LABEL_23;
  }
LABEL_201:
  *v16 = v17;
  return result;
}

void sub_1D807DF84(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, a2);
    _Unwind_Resume(exception_object);
  }
  *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E9D6BD00;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v6)
    return a1;
LABEL_6:
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v6 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;

  *(_QWORD *)this = &off_1E9D6BD00;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  v8 = v7 + 2;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    v11 = this;
    return WTF::fastFree(v11, a2);
  }
LABEL_9:
  v11 = this;
  return WTF::fastFree(v11, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  int v15;
  __int128 v16;
  int v17;
  _OWORD v18[2];

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (!v1[56])
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x1D82A3914](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 88);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
        v10 = *((_QWORD *)a1 + 3);
        v11 = (unsigned __int8 *)(v10 + 48);
        if (v8 == 2)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
    v10 = *((_QWORD *)a1 + 3);
    v11 = (unsigned __int8 *)(v10 + 48);
    if (v8 == 2)
    {
LABEL_15:
      if (__ldaxr(v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_23;
      }
      MEMORY[0x1D82A3914](v11);
LABEL_23:
      if (*(_DWORD *)(v10 + 88) == 2)
      {
        v14 = *(_QWORD *)(v10 + 56);
        *(_QWORD *)(v10 + 56) = 0;
        v15 = __ldxr(v11);
        if (v15 == 1)
        {
          if (!__stlxr(0, v11))
            goto LABEL_29;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_29:
        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(v18, v14);
        (*(void (**)(_BYTE *, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v18);
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
LABEL_39:
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
LABEL_19:
    if (__ldaxr(v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_32;
    }
    MEMORY[0x1D82A3914](v11);
LABEL_32:
    if (*(_DWORD *)(v10 + 88) != 1)
      goto LABEL_39;
    v16 = *(_OWORD *)(v10 + 72);
    v18[0] = *(_OWORD *)(v10 + 56);
    v18[1] = v16;
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
        return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v18);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v18);
  }
  *(_QWORD *)&v18[0] = *((_QWORD *)a1 + 1);
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v18, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  return result;
}

void sub_1D807E364(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_1D807E398(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BCD8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, __int128 *a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  __int128 v12;
  _BOOL4 v14;
  __int128 *v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_16;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))off_1E9D6BCD8[v5])(&v23, v4);
LABEL_16:
    *(_DWORD *)(v4 + 32) = -1;
    v12 = a3[1];
    *(_OWORD *)v4 = *a3;
    *(_OWORD *)(v4 + 16) = v12;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v6 = a3[1];
  v21 = *a3;
  v22 = v6;
  v7 = (_DWORD *)a2 + 6;
  v8 = *((unsigned int *)a2 + 6);
  if (DWORD2(v6) != -1 || (_DWORD)v8 != -1)
  {
    v10 = DWORD2(v6) == -1;
    if (DWORD2(v6) == -1)
      v11 = -1;
    else
      v11 = DWORD2(v6);
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      return ((uint64_t (*)(__int128 *, __int128 *, __int128 *))off_1E9D6BD30[v11])(&v23, &v21, a2);
    }
    else
    {
      v14 = (DWORD2(v6) - 2) < 0xFFFFFFFD || (v8 + 1) < 3;
      if (v14)
        v15 = &v21;
      else
        v15 = a2;
      if (!v14)
        a2 = &v21;
      v16 = a2[1];
      v23 = *a2;
      v24 = v16;
      if (v14)
        v17 = v7;
      else
        v17 = (_DWORD *)&v22 + 2;
      *((_DWORD *)a2 + 6) = -1;
      if (v14)
        v18 = (_DWORD *)&v22 + 2;
      else
        v18 = v7;
      v19 = *((unsigned int *)v15 + 6);
      if ((_DWORD)v19 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E9D6BD40[v19])(&v25);
        *v17 = v19;
      }
      *v18 = -1;
      v20 = DWORD2(v24);
      if (DWORD2(v24) != -1)
      {
        result = ((uint64_t (*)(char *, __int128 *, __int128 *))off_1E9D6BD40[DWORD2(v24)])(&v25, v15, &v23);
        *v18 = v20;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BCD8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;
  unsigned __int8 v5;

  result = *a2;
  v4 = a2[1].n128_u64[0];
  v5 = a3[1].n128_u8[0];
  *a2 = *a3;
  a2[1].n128_u8[0] = v5;
  a3[1].n128_u8[0] = v4;
  *a3 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

void sub_1D807E768(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  WTF::StringImpl *result;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 v12;
  StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v16)
  {
    v6 = *((_DWORD *)v16 + 1);
    if (v15)
    {
LABEL_3:
      v7 = *((_DWORD *)v15 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        v4 = __OFADD__(v7, 1);
        v8 = v7 + 1;
        if (!v4)
          goto LABEL_9;
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
    if (v15)
      goto LABEL_3;
  }
  v8 = 1;
  if (v4)
    goto LABEL_33;
LABEL_9:
  v4 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v4;
  if (v6 < 0)
    goto LABEL_33;
  if ((v10 & 1) != 0)
    goto LABEL_33;
  v4 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13))
    goto LABEL_33;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v17, v11 + 13, v12, (uint64_t)v16, (uint64_t)v15);
  v14 = v17;
  *a1 = v17;
  if (!v14)
    goto LABEL_34;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      result = v16;
      if (!v16)
        return result;
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  result = v16;
  if (!v16)
    return result;
LABEL_29:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D807E8EC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1D807E9FC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (!v6)
    goto LABEL_5;
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
LABEL_7:
      _Unwind_Resume(exception_object);
  }
  else
  {
LABEL_5:
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_7;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v10, a2);
  goto LABEL_7;
}

uint64_t *WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (!v3)
      return a1;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1D807EAF4(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  StringImpl *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v51, "destroying ");
    result = (unint64_t)WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v50, a1);
    v5 = (WTF::StringImpl *)v50;
    if (v51)
    {
      v6 = *((_DWORD *)v51 + 1);
      if (v50)
        goto LABEL_8;
    }
    else
    {
      v6 = 0;
      if (v50)
      {
LABEL_8:
        v7 = *(_DWORD *)(v50 + 4);
        if ((v7 | v6) < 0)
          goto LABEL_98;
        goto LABEL_12;
      }
    }
    v7 = 0;
    if (v6 < 0)
      goto LABEL_98;
LABEL_12:
    result = (v6 + v7);
    if (__OFADD__(v6, v7))
      goto LABEL_98;
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 4);
      v9 = (v8 >> 2) & 1;
      if (!v50 || (v8 & 4) == 0)
      {
LABEL_20:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v51, v50, &buf);
        v52 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v50 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              v11 = v51;
              v51 = 0;
              if (!v11)
                goto LABEL_29;
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                v12 = *(NSObject **)(v2 + 32);
                v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v13)
                  goto LABEL_38;
LABEL_32:
                WTF::String::utf8();
                if (v48)
                  v15 = (char *)v48 + 16;
                else
                  v15 = 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1D7FB9000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v13 = (uint64_t)v48;
                v48 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    v13 = WTF::fastFree((WTF *)v13, v14);
                    if (!*(_BYTE *)v2)
                      goto LABEL_78;
LABEL_39:
                    if (*(unsigned __int8 *)(v2 + 16) < 4u)
                      goto LABEL_78;
                    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    do
                    {
                      while (1)
                      {
                        v17 = *v16;
                        if ((v17 & 1) != 0)
                          goto LABEL_78;
                        v18 = __ldaxr(v16);
                        if (v18 == v17)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v17 | 1, v16));
                    v19 = WTF::Logger::observers((WTF::Logger *)v13);
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20)
                    {
                      v21 = *(uint64_t **)v19;
                      v22 = *(_QWORD *)v19 + 8 * v20;
                      while (1)
                      {
                        v23 = *v21;
                        LODWORD(buf) = 0;
                        WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                        v54 = 0;
                        WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(v55, a1);
                        v48 = 0;
                        v49 = 0;
                        v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v49) = 2;
                        v48 = v24;
                        v25 = HIDWORD(v49);
                        *((_DWORD *)v24 + 4 * HIDWORD(v49)) = buf;
                        v26 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                        *((_DWORD *)v24 + 4 * (v25 + 1)) = v54;
                        v27 = v55[0];
                        if (v55[0])
                          *(_DWORD *)v55[0] += 2;
                        *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                        HIDWORD(v49) = v25 + 2;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, v2, 4, &v48);
                        v28 = v48;
                        if (HIDWORD(v49))
                        {
                          v29 = 16 * HIDWORD(v49);
                          v30 = (WTF::StringImpl **)((char *)v48 + 8);
                          do
                          {
                            v31 = *v30;
                            *v30 = 0;
                            if (v31)
                            {
                              if (*(_DWORD *)v31 == 2)
                                WTF::StringImpl::destroy(v31, v14);
                              else
                                *(_DWORD *)v31 -= 2;
                            }
                            v30 += 2;
                            v29 -= 16;
                          }
                          while (v29);
                          v28 = v48;
                        }
                        if (v28)
                        {
                          v48 = 0;
                          LODWORD(v49) = 0;
                          WTF::fastFree(v28, v14);
                        }
                        v32 = v55[0];
                        v55[0] = 0;
                        if (!v32)
                          goto LABEL_66;
                        if (*(_DWORD *)v32 != 2)
                          break;
                        WTF::StringImpl::destroy(v32, v14);
                        v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v33)
                        {
LABEL_69:
                          if (*(_DWORD *)v33 == 2)
                            WTF::StringImpl::destroy(v33, v14);
                          else
                            *(_DWORD *)v33 -= 2;
                        }
LABEL_48:
                        if (++v21 == (uint64_t *)v22)
                          goto LABEL_73;
                      }
                      *(_DWORD *)v32 -= 2;
LABEL_66:
                      v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v33)
                        goto LABEL_69;
                      goto LABEL_48;
                    }
LABEL_73:
                    v34 = __ldxr(v16);
                    if (v34 == 1)
                    {
                      if (!__stlxr(0, v16))
                      {
LABEL_78:
                        v35 = v52;
                        v52 = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, v14);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        goto LABEL_82;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_78;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(_BYTE *)v2)
                  goto LABEL_78;
                goto LABEL_39;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              v12 = *(NSObject **)(v2 + 32);
              v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!(_DWORD)v13)
                goto LABEL_38;
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          v11 = v51;
          v51 = 0;
          if (!v11)
            goto LABEL_29;
          goto LABEL_27;
        }
LABEL_98:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v50)
    {
      v9 = 1;
      goto LABEL_20;
    }
    v9 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_82:
  WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v36);
  v38 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v38)
  {
    v39 = *(unsigned int ***)(a1 + 72);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 72);
  if ((WTF *)(a1 + 88) != v45 && v45 != 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v45, v37);
  }
  v47 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v47 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E9D6BD78[v47])(&buf, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

void sub_1D807F080(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_8:
      v22 = a14;
      a14 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 96, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 72, v23);
      v24 = *(unsigned int *)(v18 + 64);
      if ((_DWORD)v24 != -1)
        ((void (*)(WTF **, uint64_t))off_1E9D6BD78[v24])(&a10, v18 + 56);
      *(_DWORD *)(v18 + 64) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  _BYTE *v34;
  _BYTE *v35;
  WTF *result;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  char v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  uint64_t v52;
  StringImpl *v53;
  WTF::StringImpl **v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::Lock *v79;
  int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  WTF *v89;
  WTF *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[4];
  unsigned int *v104;
  __int128 v105;
  __int128 v106;
  WTF::Lock *v107;
  char v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  __int128 buf;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  _QWORD v119[3];

  v119[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&buf = &v116;
  *((_QWORD *)&buf + 1) = 1;
  v100 = (WTF *)&v102;
  v101 = 1;
  v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v102, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v100 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v101) = v5;
  }
  HIDWORD(v101) = v6;
  *(_QWORD *)(a1 + 80) = 1;
  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 108);
  v9 = *(_QWORD *)(a1 + 96);
  v97 = v9;
  v98 = v7;
  v99 = v8;
  *(_QWORD *)&buf = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *((_QWORD *)&buf + 1) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v101))
  {
    v11 = v100;
    v12 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *(_QWORD *)v11;
      if (*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 113));
        if (v15 != 1
          || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)))
        {
          v16 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)&buf = v14;
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          *((_QWORD *)&buf + 1) = v14;
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v116 = a1;
          v20 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E9D6BDA0;
          *(_OWORD *)(v20 + 8) = buf;
          *(_QWORD *)(v20 + 24) = a1;
          *((_QWORD *)&buf + 1) = 0;
          v116 = 0;
          v104 = (unsigned int *)v20;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v16 + 16))(v16, &v104);
          v21 = v104;
          v104 = 0;
          if (v21)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_8;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        *(_QWORD *)&buf = v14;
        WTF::NativePromiseBase::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_8;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_23:
      if (WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v104, a1);
        v24 = v104;
        (*(void (**)(__int128 *__return_ptr, unsigned int *))(*(_QWORD *)v104 + 16))(&buf, v104);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
      }
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_29:
        MEMORY[0x1D82A3914]();
        goto LABEL_8;
      }
      if (__stxr(1u, *a2))
        goto LABEL_29;
LABEL_8:
      v11 = (WTF *)((char *)v11 + 8);
      if (v11 == v12)
      {
        v9 = v97;
        v8 = v99;
        break;
      }
    }
  }
  if (v8)
  {
    v26 = v9 + 40 * v8;
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    v96 = v26;
    while (1)
    {
      v28 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      v104 = v28;
      v29 = *(_OWORD *)(v9 + 24);
      v105 = *(_OWORD *)(v9 + 8);
      v106 = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      v103[0] = 0;
      v103[1] = 0;
      v103[2] = "<chained promise>";
      v103[3] = 0;
      v32 = (unsigned __int8 *)(v28 + 12);
      v107 = (WTF::Lock *)(v28 + 12);
      v108 = 1;
      if (__ldaxr((unsigned __int8 *)v28 + 48))
        break;
      if (__stxr(1u, v32))
        goto LABEL_41;
LABEL_42:
      v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v32);
      v35 = v34;
      if (!*v34 || v34[16] < 4u)
        goto LABEL_141;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
      WTF::String::String((WTF::String *)&v112, " settling chained promise ");
      result = WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v111, (uint64_t)v28);
      if (v113)
      {
        v37 = *(_DWORD *)(v113 + 4);
        v38 = (uint64_t)v112;
        if (v112)
          goto LABEL_46;
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)v112;
        if (v112)
        {
LABEL_46:
          v39 = *(_DWORD *)(v38 + 4);
          v40 = v111;
          if (v111)
            goto LABEL_47;
          goto LABEL_51;
        }
      }
      v39 = 0;
      v40 = v111;
      if (v111)
      {
LABEL_47:
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 | v39) < 0)
          goto LABEL_177;
        goto LABEL_52;
      }
LABEL_51:
      v41 = 0;
      if (v39 < 0)
        goto LABEL_177;
LABEL_52:
      v42 = __OFADD__(v39, v41);
      v43 = v39 + v41;
      v44 = v42;
      if (v37 < 0 || (v44 & 1) != 0 || (v45 = v37 + v43, __OFADD__(v37, v43)))
      {
LABEL_177:
        __break(0xC471u);
        return result;
      }
      if (v113 && (*(_BYTE *)(v113 + 16) & 4) == 0)
      {
        v46 = 0;
        goto LABEL_68;
      }
      if (v38)
      {
        v47 = *(_DWORD *)(v38 + 16);
        v46 = (v47 >> 2) & 1;
        if (v40 && (v47 & 4) != 0)
LABEL_66:
          v46 = (*(unsigned __int8 *)(v40 + 16) >> 2) & 1;
      }
      else
      {
        if (v40)
          goto LABEL_66;
        v46 = 1;
      }
LABEL_68:
      result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v45, v46, v113, v38, v40);
      v114 = (WTF::StringImpl *)buf;
      if (!(_QWORD)buf)
        goto LABEL_177;
      v111 = 0;
      if (!v40)
        goto LABEL_72;
      if (*(_DWORD *)v40 != 2)
      {
        *(_DWORD *)v40 -= 2;
LABEL_72:
        v49 = v112;
        v112 = 0;
        if (!v49)
          goto LABEL_77;
        goto LABEL_75;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v40, v48);
      v49 = v112;
      v112 = 0;
      if (!v49)
        goto LABEL_77;
LABEL_75:
      if (*(_DWORD *)v49 != 2)
      {
        *(_DWORD *)v49 -= 2;
LABEL_77:
        v50 = (WTF::StringImpl *)v113;
        v113 = 0;
        if (!v50)
          goto LABEL_82;
        goto LABEL_80;
      }
      WTF::StringImpl::destroy(v49, v48);
      v50 = (WTF::StringImpl *)v113;
      v113 = 0;
      if (!v50)
        goto LABEL_82;
LABEL_80:
      if (*(_DWORD *)v50 != 2)
      {
        *(_DWORD *)v50 -= 2;
LABEL_82:
        v51 = *((_QWORD *)v35 + 4);
        v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v52)
          goto LABEL_91;
        goto LABEL_85;
      }
      WTF::StringImpl::destroy(v50, v48);
      v51 = *((_QWORD *)v35 + 4);
      v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)v52)
        goto LABEL_91;
LABEL_85:
      WTF::String::utf8();
      if (v109)
        v54 = v109 + 2;
      else
        v54 = 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v54;
      _os_log_impl(&dword_1D7FB9000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v52 = (uint64_t)v109;
      v109 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          v52 = WTF::fastFree((WTF *)v52, v53);
          if (!*v35)
            goto LABEL_138;
          goto LABEL_92;
        }
        --*(_DWORD *)v52;
      }
LABEL_91:
      if (!*v35)
        goto LABEL_138;
LABEL_92:
      if (v35[16] < 4u)
        goto LABEL_138;
      do
      {
        while (1)
        {
          v55 = *v27;
          if ((v55 & 1) != 0)
            goto LABEL_138;
          v56 = __ldaxr(v27);
          if (v56 == v55)
            break;
          __clrex();
        }
      }
      while (__stxr(v55 | 1, v27));
      v57 = WTF::Logger::observers((WTF::Logger *)v52);
      v58 = *(unsigned int *)(v57 + 12);
      if ((_DWORD)v58)
      {
        v59 = *(uint64_t **)v57;
        v60 = *(_QWORD *)v57 + 8 * v58;
        while (1)
        {
          v61 = *v59;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
          LODWORD(v116) = 0;
          WTF::String::String((WTF::String *)&v117, " settling chained promise ");
          v118 = 0;
          WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(v119, (uint64_t)v28);
          v109 = 0;
          v110 = 0;
          v62 = WTF::fastMalloc((WTF *)0x30);
          LODWORD(v110) = 3;
          v109 = (WTF::StringImpl **)v62;
          v63 = HIDWORD(v110);
          *(_DWORD *)(v62 + 16 * HIDWORD(v110)) = buf;
          v64 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *(_QWORD *)(v62 + 16 * v63 + 8) = v64;
          *(_DWORD *)(v62 + 16 * (v63 + 1)) = v116;
          v65 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 1) + 8) = v65;
          *(_DWORD *)(v62 + 16 * (v63 + 2)) = v118;
          v66 = v119[0];
          if (v119[0])
            *(_DWORD *)v119[0] += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 2) + 8) = v66;
          HIDWORD(v110) = v63 + 3;
          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl ***))(*(_QWORD *)v61 + 16))(v61, v35, 4, &v109);
          v67 = (WTF *)v109;
          if (HIDWORD(v110))
          {
            v68 = 16 * HIDWORD(v110);
            v69 = v109 + 1;
            do
            {
              v70 = *v69;
              *v69 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, v53);
                else
                  *(_DWORD *)v70 -= 2;
              }
              v69 += 2;
              v68 -= 16;
            }
            while (v68);
            v67 = (WTF *)v109;
          }
          if (v67)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree(v67, v53);
          }
          v71 = (WTF::StringImpl *)v119[0];
          v119[0] = 0;
          if (!v71)
            goto LABEL_121;
          if (*(_DWORD *)v71 != 2)
            break;
          WTF::StringImpl::destroy(v71, v53);
          v72 = v117;
          v117 = 0;
          if (!v72)
            goto LABEL_126;
LABEL_124:
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
LABEL_126:
            v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v73)
              goto LABEL_129;
            goto LABEL_101;
          }
          WTF::StringImpl::destroy(v72, v53);
          v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v73)
          {
LABEL_129:
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v53);
            else
              *(_DWORD *)v73 -= 2;
          }
LABEL_101:
          if (++v59 == (uint64_t *)v60)
            goto LABEL_133;
        }
        *(_DWORD *)v71 -= 2;
LABEL_121:
        v72 = v117;
        v117 = 0;
        if (!v72)
          goto LABEL_126;
        goto LABEL_124;
      }
LABEL_133:
      v74 = __ldxr(v27);
      if (v74 != 1)
      {
        __clrex();
        v26 = v96;
LABEL_137:
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        goto LABEL_138;
      }
      v26 = v96;
      if (__stlxr(0, v27))
        goto LABEL_137;
LABEL_138:
      v75 = v114;
      v114 = 0;
      if (!v75)
        goto LABEL_141;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
LABEL_141:
        v76 = v28 + 14;
        v77 = v28[16];
        v78 = *(unsigned int *)(a1 + 64);
        if ((_DWORD)v77 == -1)
          goto LABEL_145;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v75, v53);
      v76 = v28 + 14;
      v77 = v28[16];
      v78 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v77 == -1)
      {
LABEL_145:
        if ((_DWORD)v78 == -1)
          goto LABEL_147;
        goto LABEL_146;
      }
LABEL_142:
      if ((_DWORD)v78 == -1)
      {
        ((void (*)(__int128 *, unsigned int *))off_1E9D6BD78[v77])(&buf, v76);
        v28[16] = -1;
        goto LABEL_147;
      }
LABEL_146:
      *(_QWORD *)&buf = v76;
      ((void (*)(__int128 *))off_1E9D6BDB8[v78])(&buf);
LABEL_147:
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v28, &v107);
      if (v108)
      {
        v79 = v107;
        v80 = __ldxr((unsigned __int8 *)v107);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v107))
            goto LABEL_153;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v79);
      }
LABEL_153:
      v81 = v28 + 2;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (v83)
      {
        v84 = v104;
        if (v104)
          goto LABEL_157;
      }
      else
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        v84 = v104;
        if (v104)
        {
LABEL_157:
          WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v84);
          v104 = 0;
          v85 = v84 + 2;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v84 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
          }
        }
      }
      v9 += 40;
      if (v9 == v26)
        goto LABEL_163;
    }
    __clrex();
LABEL_41:
    v32 = (unsigned __int8 *)MEMORY[0x1D82A3914]();
    goto LABEL_42;
  }
LABEL_163:
  WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v10);
  if (HIDWORD(v101))
  {
    v89 = v100;
    v90 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    do
    {
      v91 = *(unsigned int **)v89;
      *(_QWORD *)v89 = 0;
      if (v91)
      {
        v92 = v91 + 2;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v91 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
      }
      v89 = (WTF *)((char *)v89 + 8);
    }
    while (v89 != v90);
  }
  result = v100;
  if (&v102 != (uint64_t *)v100 && v100 != 0)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    return (WTF *)WTF::fastFree(result, v88);
  }
  return result;
}

void sub_1D807FC3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  unsigned __int8 **v14;
  void *v17;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (__ldaxr(*v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v14))
  {
LABEL_6:
    WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1D82A3914]();
  goto LABEL_6;
}

void sub_1D807FC9C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::Lock *a35,char a36)
{
  unsigned int *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v40;
  WTF::StringImpl *v41;
  WTF::Lock *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  void *v48;

  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_8:
      v41 = *(WTF::StringImpl **)(v38 - 168);
      *(_QWORD *)(v38 - 168) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (a36)
      {
        v42 = a35;
        v43 = __ldxr((unsigned __int8 *)a35);
        if (v43 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a35))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v42);
      }
LABEL_17:
      if (v36)
      {
        v44 = v36 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
      WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a30);
      WTF::Vector<WTF::NativePromiseProducer<BOOL,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v47);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::StringImpl *result;
  BOOL v7;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  return result;
}

BOOL WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 64);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) == 2)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *v3 = v6;
    LODWORD(v6) = __ldxr(v4);
    if ((_DWORD)v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D808010C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  int v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) == 1)
  {
    *v3 = *(_QWORD *)(a2 + 56);
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D80801E8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74[3];

  v74[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v59, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a2);
  WTF::String::String((WTF::String *)&v57, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v53, "]");
  v7 = v58;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v53);
  if (!v60)
  {
    __break(0xC471u);
    return result;
  }
  v10 = v53;
  v53 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      v11 = v54;
      v54 = 0;
      if (!v11)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  v11 = v54;
  v54 = 0;
  if (!v11)
  {
LABEL_10:
    v12 = v55;
    v55 = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  v12 = v55;
  v55 = 0;
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    v13 = v56;
    v56 = 0;
    if (!v13)
      goto LABEL_20;
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  v13 = v56;
  v56 = 0;
  if (!v13)
  {
LABEL_20:
    v14 = v57;
    v57 = 0;
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  v14 = v57;
  v57 = 0;
  if (!v14)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    v58 = 0;
    if (!v7)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  v58 = 0;
  if (!v7)
  {
LABEL_30:
    v15 = v59;
    v59 = 0;
    if (!v15)
      goto LABEL_35;
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  v15 = v59;
  v59 = 0;
  if (!v15)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_44;
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_44;
LABEL_38:
  WTF::String::utf8();
  if (v51)
    v19 = (char *)v51 + 16;
  else
    v19 = 0;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v62 = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  v17 = (uint64_t)v51;
  v51 = 0;
  if (!v17)
  {
LABEL_44:
    if (!*(_BYTE *)a1)
      goto LABEL_119;
    goto LABEL_45;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*(_BYTE *)a1)
    goto LABEL_119;
LABEL_45:
  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    goto LABEL_119;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_119;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v49 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      *(_DWORD *)buf = 0;
      WTF::String::String((WTF::String *)&v62[4], "ThenCallback disconnected from ");
      v63 = 0;
      WTF::LogArgument<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>>::toString(&v64, a2);
      v65 = 0;
      WTF::String::String((WTF::String *)&v66, " aborting [callback:");
      v67 = 0;
      WTF::LogArgument<void const*>::toString();
      v69 = 0;
      WTF::String::String((WTF::String *)&v70, " callSite:");
      v71 = 0;
      WTF::Logger::LogSiteIdentifier::toString(a4);
      v73 = 0;
      WTF::String::String((WTF::String *)v74, "]");
      v51 = 0;
      v52 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
      LODWORD(v52) = 7;
      v51 = v27;
      v28 = HIDWORD(v52);
      *((_DWORD *)v27 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
      v29 = *(_QWORD *)&v62[4];
      if (*(_QWORD *)&v62[4])
        **(_DWORD **)&v62[4] += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v63;
      v30 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      *((_DWORD *)v27 + 4 * (v28 + 2)) = v65;
      v31 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
      *((_DWORD *)v27 + 4 * (v28 + 3)) = v67;
      v32 = v68;
      if (v68)
        *(_DWORD *)v68 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
      *((_DWORD *)v27 + 4 * (v28 + 4)) = v69;
      v33 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
      *((_DWORD *)v27 + 4 * (v28 + 5)) = v71;
      v34 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 5) + 1) = v34;
      *((_DWORD *)v27 + 4 * (v28 + 6)) = v73;
      v35 = v74[0];
      if (v74[0])
        *(_DWORD *)v74[0] += 2;
      *((_QWORD *)v27 + 2 * (v28 + 6) + 1) = v35;
      HIDWORD(v52) = v28 + 7;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 4, &v51);
      v36 = v51;
      if (HIDWORD(v52))
      {
        v37 = a3;
        v38 = 16 * HIDWORD(v52);
        v39 = (WTF::StringImpl **)((char *)v51 + 8);
        do
        {
          v40 = *v39;
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        v36 = v51;
        a3 = v37;
      }
      if (v36)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v36, v18);
      }
      v41 = v74[0];
      v74[0] = 0;
      if (!v41)
        goto LABEL_82;
      if (*(_DWORD *)v41 != 2)
        break;
      WTF::StringImpl::destroy(v41, v18);
      v42 = v72;
      v72 = 0;
      if (!v42)
        goto LABEL_87;
LABEL_85:
      if (*(_DWORD *)v42 != 2)
      {
        *(_DWORD *)v42 -= 2;
LABEL_87:
        v43 = v70;
        v70 = 0;
        if (!v43)
          goto LABEL_92;
        goto LABEL_90;
      }
      WTF::StringImpl::destroy(v42, v18);
      v43 = v70;
      v70 = 0;
      if (!v43)
        goto LABEL_92;
LABEL_90:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_92:
        v44 = v68;
        v68 = 0;
        if (!v44)
          goto LABEL_97;
        goto LABEL_95;
      }
      WTF::StringImpl::destroy(v43, v18);
      v44 = v68;
      v68 = 0;
      if (!v44)
        goto LABEL_97;
LABEL_95:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_97:
        v45 = v66;
        v66 = 0;
        if (!v45)
          goto LABEL_102;
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v44, v18);
      v45 = v66;
      v66 = 0;
      if (!v45)
        goto LABEL_102;
LABEL_100:
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
LABEL_102:
        v46 = v64;
        v64 = 0;
        if (!v46)
          goto LABEL_107;
        goto LABEL_105;
      }
      WTF::StringImpl::destroy(v45, v18);
      v46 = v64;
      v64 = 0;
      if (!v46)
        goto LABEL_107;
LABEL_105:
      if (*(_DWORD *)v46 != 2)
      {
        *(_DWORD *)v46 -= 2;
LABEL_107:
        v47 = *(WTF::StringImpl **)&v62[4];
        *(_QWORD *)&v62[4] = 0;
        if (v47)
          goto LABEL_110;
        goto LABEL_54;
      }
      WTF::StringImpl::destroy(v46, v18);
      v47 = *(WTF::StringImpl **)&v62[4];
      *(_QWORD *)&v62[4] = 0;
      if (v47)
      {
LABEL_110:
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v18);
        else
          *(_DWORD *)v47 -= 2;
      }
LABEL_54:
      if (++v25 == (uint64_t *)v49)
        goto LABEL_114;
    }
    *(_DWORD *)v41 -= 2;
LABEL_82:
    v42 = v72;
    v72 = 0;
    if (!v42)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_114:
  v48 = __ldxr(v20);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, v20))
LABEL_118:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_119:
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D80809C4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  unsigned __int8 *v44;
  int v46;

  v46 = __ldxr(v44);
  if (v46 == 1)
  {
    if (!__stlxr(0, v44))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_7:
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
    {
      WTF::StringImpl::destroy(a30, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a30 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E9D6BDA0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v6)
    return a1;
LABEL_6:
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v6 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;

  *(_QWORD *)this = &off_1E9D6BDA0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  v8 = v7 + 2;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    v11 = this;
    return WTF::fastFree(v11, a2);
  }
LABEL_9:
  v11 = this;
  return WTF::fastFree(v11, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (!v1[56])
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x1D82A3914](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 64);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
        v10 = *((_QWORD *)a1 + 3);
        if (v8 == 2)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    v10 = *((_QWORD *)a1 + 3);
    if (v8 == 2)
    {
LABEL_15:
      v11 = (unsigned __int8 *)(v10 + 48);
      if (__ldaxr((unsigned __int8 *)(v10 + 48)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_23;
      }
      MEMORY[0x1D82A3914](v10 + 48);
LABEL_23:
      if (*(_DWORD *)(v10 + 64) == 2)
      {
        v15 = *(_QWORD *)(v10 + 56);
        *(_QWORD *)(v10 + 56) = 0;
        v16 = __ldxr(v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, v11))
            goto LABEL_29;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_29:
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v18, v15);
        (*(void (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v18);
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
LABEL_39:
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
LABEL_19:
    v13 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_32;
    }
    MEMORY[0x1D82A3914](v10 + 48);
LABEL_32:
    if (*(_DWORD *)(v10 + 64) != 1)
      goto LABEL_39;
    v18 = *(_QWORD *)(v10 + 56);
    v17 = __ldxr(v13);
    if (v17 == 1)
    {
      if (!__stlxr(0, v13))
        return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v18);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
    return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v18);
  }
  v18 = *((_QWORD *)a1 + 1);
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v18, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  return result;
}

void sub_1D80810AC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_1D80810E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BD78[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(unint64_t *, uint64_t))off_1E9D6BD78[v5])(&v21, v4);
LABEL_15:
    *(_DWORD *)(v4 + 8) = -1;
    *(_QWORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v20 = *a3;
  v6 = (_DWORD *)a2 + 1;
  v7 = *((unsigned int *)a2 + 1);
  if (HIDWORD(v20) != -1 || (_DWORD)v7 != -1)
  {
    v9 = HIDWORD(v20) == -1;
    if (HIDWORD(v20) == -1)
      v10 = -1;
    else
      v10 = HIDWORD(v20);
    if ((_DWORD)v7 != -1)
      v9 = v10 == v7;
    if (v9)
    {
      return ((uint64_t (*)(unint64_t *, unint64_t *, unint64_t *))off_1E9D6BDD0[v10])(&v21, &v20, a2);
    }
    else
    {
      v12 = (HIDWORD(v20) - 2) < 0xFFFFFFFD || (v7 + 1) < 3;
      v13 = !v12;
      if (v12)
        v14 = &v20;
      else
        v14 = a2;
      if (!v12)
        a2 = &v20;
      v15 = *a2;
      v21 = *a2;
      if (v13)
        v16 = (_DWORD *)&v20 + 1;
      else
        v16 = v6;
      *((_DWORD *)a2 + 1) = -1;
      if (v13)
        v17 = v6;
      else
        v17 = (_DWORD *)&v20 + 1;
      v18 = *((unsigned int *)v14 + 1);
      v19 = HIDWORD(v15);
      if ((_DWORD)v18 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E9D6BDE0[v18])(&v22);
        *v16 = v18;
      }
      *v17 = -1;
      if ((_DWORD)v19 != -1)
      {
        result = ((uint64_t (*)(char *, unint64_t *, unint64_t *))off_1E9D6BDE0[v19])(&v22, v14, &v21);
        *v17 = v19;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BD78[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJbN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbSA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbSA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

void sub_1D8081470(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  WTF::StringImpl *result;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 v12;
  StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v16)
  {
    v6 = *((_DWORD *)v16 + 1);
    if (v15)
    {
LABEL_3:
      v7 = *((_DWORD *)v15 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        v4 = __OFADD__(v7, 1);
        v8 = v7 + 1;
        if (!v4)
          goto LABEL_9;
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
    if (v15)
      goto LABEL_3;
  }
  v8 = 1;
  if (v4)
    goto LABEL_33;
LABEL_9:
  v4 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v4;
  if (v6 < 0)
    goto LABEL_33;
  if ((v10 & 1) != 0)
    goto LABEL_33;
  v4 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13))
    goto LABEL_33;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v17, v11 + 13, v12, (uint64_t)v16, (uint64_t)v15);
  v14 = v17;
  *a1 = v17;
  if (!v14)
    goto LABEL_34;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      result = v16;
      if (!v16)
        return result;
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  result = v16;
  if (!v16)
    return result;
LABEL_29:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D80815F4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1D8081704(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (!v6)
    goto LABEL_5;
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
LABEL_7:
      _Unwind_Resume(exception_object);
  }
  else
  {
LABEL_5:
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_7;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v10, a2);
  goto LABEL_7;
}

uint64_t *WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (!v3)
      return a1;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1D80817FC(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BE30[v3])(&v5, a2);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a2 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  StringImpl *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v51, "destroying ");
    result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v50, a1);
    v5 = (WTF::StringImpl *)v50;
    if (v51)
    {
      v6 = *((_DWORD *)v51 + 1);
      if (v50)
        goto LABEL_8;
    }
    else
    {
      v6 = 0;
      if (v50)
      {
LABEL_8:
        v7 = *(_DWORD *)(v50 + 4);
        if ((v7 | v6) < 0)
          goto LABEL_98;
        goto LABEL_12;
      }
    }
    v7 = 0;
    if (v6 < 0)
      goto LABEL_98;
LABEL_12:
    result = (v6 + v7);
    if (__OFADD__(v6, v7))
      goto LABEL_98;
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 4);
      v9 = (v8 >> 2) & 1;
      if (!v50 || (v8 & 4) == 0)
      {
LABEL_20:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v51, v50, &buf);
        v52 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v50 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              v11 = v51;
              v51 = 0;
              if (!v11)
                goto LABEL_29;
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                v12 = *(NSObject **)(v2 + 32);
                v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v13)
                  goto LABEL_38;
LABEL_32:
                WTF::String::utf8();
                if (v48)
                  v15 = (char *)v48 + 16;
                else
                  v15 = 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1D7FB9000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v13 = (uint64_t)v48;
                v48 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    v13 = WTF::fastFree((WTF *)v13, v14);
                    if (!*(_BYTE *)v2)
                      goto LABEL_78;
LABEL_39:
                    if (*(unsigned __int8 *)(v2 + 16) < 4u)
                      goto LABEL_78;
                    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    do
                    {
                      while (1)
                      {
                        v17 = *v16;
                        if ((v17 & 1) != 0)
                          goto LABEL_78;
                        v18 = __ldaxr(v16);
                        if (v18 == v17)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v17 | 1, v16));
                    v19 = WTF::Logger::observers((WTF::Logger *)v13);
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20)
                    {
                      v21 = *(uint64_t **)v19;
                      v22 = *(_QWORD *)v19 + 8 * v20;
                      while (1)
                      {
                        v23 = *v21;
                        LODWORD(buf) = 0;
                        WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                        v54 = 0;
                        WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(v55, a1);
                        v48 = 0;
                        v49 = 0;
                        v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v49) = 2;
                        v48 = v24;
                        v25 = HIDWORD(v49);
                        *((_DWORD *)v24 + 4 * HIDWORD(v49)) = buf;
                        v26 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                        *((_DWORD *)v24 + 4 * (v25 + 1)) = v54;
                        v27 = v55[0];
                        if (v55[0])
                          *(_DWORD *)v55[0] += 2;
                        *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                        HIDWORD(v49) = v25 + 2;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, v2, 4, &v48);
                        v28 = v48;
                        if (HIDWORD(v49))
                        {
                          v29 = 16 * HIDWORD(v49);
                          v30 = (WTF::StringImpl **)((char *)v48 + 8);
                          do
                          {
                            v31 = *v30;
                            *v30 = 0;
                            if (v31)
                            {
                              if (*(_DWORD *)v31 == 2)
                                WTF::StringImpl::destroy(v31, v14);
                              else
                                *(_DWORD *)v31 -= 2;
                            }
                            v30 += 2;
                            v29 -= 16;
                          }
                          while (v29);
                          v28 = v48;
                        }
                        if (v28)
                        {
                          v48 = 0;
                          LODWORD(v49) = 0;
                          WTF::fastFree(v28, v14);
                        }
                        v32 = v55[0];
                        v55[0] = 0;
                        if (!v32)
                          goto LABEL_66;
                        if (*(_DWORD *)v32 != 2)
                          break;
                        WTF::StringImpl::destroy(v32, v14);
                        v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v33)
                        {
LABEL_69:
                          if (*(_DWORD *)v33 == 2)
                            WTF::StringImpl::destroy(v33, v14);
                          else
                            *(_DWORD *)v33 -= 2;
                        }
LABEL_48:
                        if (++v21 == (uint64_t *)v22)
                          goto LABEL_73;
                      }
                      *(_DWORD *)v32 -= 2;
LABEL_66:
                      v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v33)
                        goto LABEL_69;
                      goto LABEL_48;
                    }
LABEL_73:
                    v34 = __ldxr(v16);
                    if (v34 == 1)
                    {
                      if (!__stlxr(0, v16))
                      {
LABEL_78:
                        v35 = v52;
                        v52 = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, v14);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        goto LABEL_82;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_78;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(_BYTE *)v2)
                  goto LABEL_78;
                goto LABEL_39;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              v12 = *(NSObject **)(v2 + 32);
              v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!(_DWORD)v13)
                goto LABEL_38;
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          v11 = v51;
          v51 = 0;
          if (!v11)
            goto LABEL_29;
          goto LABEL_27;
        }
LABEL_98:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v50)
    {
      v9 = 1;
      goto LABEL_20;
    }
    v9 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_82:
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 120, v36);
  v38 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v38)
  {
    v39 = *(unsigned int ***)(a1 + 96);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 96);
  if ((WTF *)(a1 + 112) != v45 && v45 != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v45, v37);
  }
  v47 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v47 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E9D6BE18[v47])(&buf, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

void sub_1D8081E68(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_8:
      v22 = a14;
      a14 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 120, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 96, v23);
      v24 = *(unsigned int *)(v18 + 88);
      if ((_DWORD)v24 != -1)
        ((void (*)(WTF **, uint64_t))off_1E9D6BE18[v24])(&a10, v18 + 56);
      *(_DWORD *)(v18 + 88) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  _BYTE *v34;
  _BYTE *v35;
  WTF *result;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  char v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  uint64_t v52;
  StringImpl *v53;
  WTF::StringImpl **v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::Lock *v79;
  int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  WTF *v89;
  WTF *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[4];
  unsigned int *v104;
  __int128 v105;
  __int128 v106;
  WTF::Lock *v107;
  char v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  __int128 buf;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  _QWORD v119[3];

  v119[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&buf = &v116;
  *((_QWORD *)&buf + 1) = 1;
  v100 = (WTF *)&v102;
  v101 = 1;
  v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    v6 = *(unsigned int *)(a1 + 108);
    memcpy(&v102, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = a1 + 112;
    v100 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 104);
    LODWORD(v6) = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 104) = 1;
    LODWORD(v101) = v5;
  }
  HIDWORD(v101) = v6;
  *(_QWORD *)(a1 + 104) = 1;
  v7 = *(_DWORD *)(a1 + 128);
  v8 = *(_DWORD *)(a1 + 132);
  v9 = *(_QWORD *)(a1 + 120);
  v97 = v9;
  v98 = v7;
  v99 = v8;
  *(_QWORD *)&buf = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *((_QWORD *)&buf + 1) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v101))
  {
    v11 = v100;
    v12 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *(_QWORD *)v11;
      if (*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 137));
        if (v15 != 1
          || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)))
        {
          v16 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)&buf = v14;
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          *((_QWORD *)&buf + 1) = v14;
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v116 = a1;
          v20 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E9D6BE60;
          *(_OWORD *)(v20 + 8) = buf;
          *(_QWORD *)(v20 + 24) = a1;
          *((_QWORD *)&buf + 1) = 0;
          v116 = 0;
          v104 = (unsigned int *)v20;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v16 + 16))(v16, &v104);
          v21 = v104;
          v104 = 0;
          if (v21)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_8;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        *(_QWORD *)&buf = v14;
        WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_8;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_23:
      if (WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v104, a1);
        v24 = v104;
        (*(void (**)(__int128 *__return_ptr, unsigned int *))(*(_QWORD *)v104 + 16))(&buf, v104);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        if ((_DWORD)v117 != -1)
          ((void (*)(_QWORD *, __int128 *))off_1E9D6BE30[v117])(v103, &buf);
        LODWORD(v117) = -1;
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        if ((_DWORD)v117 != -1)
          ((void (*)(unsigned int **, __int128 *))off_1E9D6BE30[v117])(&v104, &buf);
      }
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_32:
        MEMORY[0x1D82A3914]();
        goto LABEL_8;
      }
      if (__stxr(1u, *a2))
        goto LABEL_32;
LABEL_8:
      v11 = (WTF *)((char *)v11 + 8);
      if (v11 == v12)
      {
        v9 = v97;
        v8 = v99;
        break;
      }
    }
  }
  if (v8)
  {
    v26 = v9 + 40 * v8;
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    v96 = v26;
    while (1)
    {
      v28 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      v104 = v28;
      v29 = *(_OWORD *)(v9 + 24);
      v105 = *(_OWORD *)(v9 + 8);
      v106 = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      v103[0] = 0;
      v103[1] = 0;
      v103[2] = "<chained promise>";
      v103[3] = 0;
      v32 = (unsigned __int8 *)(v28 + 12);
      v107 = (WTF::Lock *)(v28 + 12);
      v108 = 1;
      if (__ldaxr((unsigned __int8 *)v28 + 48))
        break;
      if (__stxr(1u, v32))
        goto LABEL_44;
LABEL_45:
      v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v32);
      v35 = v34;
      if (!*v34 || v34[16] < 4u)
        goto LABEL_144;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
      WTF::String::String((WTF::String *)&v112, " settling chained promise ");
      result = WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v111, (uint64_t)v28);
      if (v113)
      {
        v37 = *(_DWORD *)(v113 + 4);
        v38 = (uint64_t)v112;
        if (v112)
          goto LABEL_49;
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)v112;
        if (v112)
        {
LABEL_49:
          v39 = *(_DWORD *)(v38 + 4);
          v40 = v111;
          if (v111)
            goto LABEL_50;
          goto LABEL_54;
        }
      }
      v39 = 0;
      v40 = v111;
      if (v111)
      {
LABEL_50:
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 | v39) < 0)
          goto LABEL_180;
        goto LABEL_55;
      }
LABEL_54:
      v41 = 0;
      if (v39 < 0)
        goto LABEL_180;
LABEL_55:
      v42 = __OFADD__(v39, v41);
      v43 = v39 + v41;
      v44 = v42;
      if (v37 < 0 || (v44 & 1) != 0 || (v45 = v37 + v43, __OFADD__(v37, v43)))
      {
LABEL_180:
        __break(0xC471u);
        return result;
      }
      if (v113 && (*(_BYTE *)(v113 + 16) & 4) == 0)
      {
        v46 = 0;
        goto LABEL_71;
      }
      if (v38)
      {
        v47 = *(_DWORD *)(v38 + 16);
        v46 = (v47 >> 2) & 1;
        if (v40 && (v47 & 4) != 0)
LABEL_69:
          v46 = (*(unsigned __int8 *)(v40 + 16) >> 2) & 1;
      }
      else
      {
        if (v40)
          goto LABEL_69;
        v46 = 1;
      }
LABEL_71:
      result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v45, v46, v113, v38, v40);
      v114 = (WTF::StringImpl *)buf;
      if (!(_QWORD)buf)
        goto LABEL_180;
      v111 = 0;
      if (!v40)
        goto LABEL_75;
      if (*(_DWORD *)v40 != 2)
      {
        *(_DWORD *)v40 -= 2;
LABEL_75:
        v49 = v112;
        v112 = 0;
        if (!v49)
          goto LABEL_80;
        goto LABEL_78;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v40, v48);
      v49 = v112;
      v112 = 0;
      if (!v49)
        goto LABEL_80;
LABEL_78:
      if (*(_DWORD *)v49 != 2)
      {
        *(_DWORD *)v49 -= 2;
LABEL_80:
        v50 = (WTF::StringImpl *)v113;
        v113 = 0;
        if (!v50)
          goto LABEL_85;
        goto LABEL_83;
      }
      WTF::StringImpl::destroy(v49, v48);
      v50 = (WTF::StringImpl *)v113;
      v113 = 0;
      if (!v50)
        goto LABEL_85;
LABEL_83:
      if (*(_DWORD *)v50 != 2)
      {
        *(_DWORD *)v50 -= 2;
LABEL_85:
        v51 = *((_QWORD *)v35 + 4);
        v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v52)
          goto LABEL_94;
        goto LABEL_88;
      }
      WTF::StringImpl::destroy(v50, v48);
      v51 = *((_QWORD *)v35 + 4);
      v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)v52)
        goto LABEL_94;
LABEL_88:
      WTF::String::utf8();
      if (v109)
        v54 = v109 + 2;
      else
        v54 = 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v54;
      _os_log_impl(&dword_1D7FB9000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v52 = (uint64_t)v109;
      v109 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          v52 = WTF::fastFree((WTF *)v52, v53);
          if (!*v35)
            goto LABEL_141;
          goto LABEL_95;
        }
        --*(_DWORD *)v52;
      }
LABEL_94:
      if (!*v35)
        goto LABEL_141;
LABEL_95:
      if (v35[16] < 4u)
        goto LABEL_141;
      do
      {
        while (1)
        {
          v55 = *v27;
          if ((v55 & 1) != 0)
            goto LABEL_141;
          v56 = __ldaxr(v27);
          if (v56 == v55)
            break;
          __clrex();
        }
      }
      while (__stxr(v55 | 1, v27));
      v57 = WTF::Logger::observers((WTF::Logger *)v52);
      v58 = *(unsigned int *)(v57 + 12);
      if ((_DWORD)v58)
      {
        v59 = *(uint64_t **)v57;
        v60 = *(_QWORD *)v57 + 8 * v58;
        while (1)
        {
          v61 = *v59;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
          LODWORD(v116) = 0;
          WTF::String::String((WTF::String *)&v117, " settling chained promise ");
          v118 = 0;
          WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(v119, (uint64_t)v28);
          v109 = 0;
          v110 = 0;
          v62 = WTF::fastMalloc((WTF *)0x30);
          LODWORD(v110) = 3;
          v109 = (WTF::StringImpl **)v62;
          v63 = HIDWORD(v110);
          *(_DWORD *)(v62 + 16 * HIDWORD(v110)) = buf;
          v64 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *(_QWORD *)(v62 + 16 * v63 + 8) = v64;
          *(_DWORD *)(v62 + 16 * (v63 + 1)) = v116;
          v65 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 1) + 8) = v65;
          *(_DWORD *)(v62 + 16 * (v63 + 2)) = v118;
          v66 = v119[0];
          if (v119[0])
            *(_DWORD *)v119[0] += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 2) + 8) = v66;
          HIDWORD(v110) = v63 + 3;
          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl ***))(*(_QWORD *)v61 + 16))(v61, v35, 4, &v109);
          v67 = (WTF *)v109;
          if (HIDWORD(v110))
          {
            v68 = 16 * HIDWORD(v110);
            v69 = v109 + 1;
            do
            {
              v70 = *v69;
              *v69 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, v53);
                else
                  *(_DWORD *)v70 -= 2;
              }
              v69 += 2;
              v68 -= 16;
            }
            while (v68);
            v67 = (WTF *)v109;
          }
          if (v67)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree(v67, v53);
          }
          v71 = (WTF::StringImpl *)v119[0];
          v119[0] = 0;
          if (!v71)
            goto LABEL_124;
          if (*(_DWORD *)v71 != 2)
            break;
          WTF::StringImpl::destroy(v71, v53);
          v72 = v117;
          v117 = 0;
          if (!v72)
            goto LABEL_129;
LABEL_127:
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
LABEL_129:
            v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v73)
              goto LABEL_132;
            goto LABEL_104;
          }
          WTF::StringImpl::destroy(v72, v53);
          v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v73)
          {
LABEL_132:
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v53);
            else
              *(_DWORD *)v73 -= 2;
          }
LABEL_104:
          if (++v59 == (uint64_t *)v60)
            goto LABEL_136;
        }
        *(_DWORD *)v71 -= 2;
LABEL_124:
        v72 = v117;
        v117 = 0;
        if (!v72)
          goto LABEL_129;
        goto LABEL_127;
      }
LABEL_136:
      v74 = __ldxr(v27);
      if (v74 != 1)
      {
        __clrex();
        v26 = v96;
LABEL_140:
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        goto LABEL_141;
      }
      v26 = v96;
      if (__stlxr(0, v27))
        goto LABEL_140;
LABEL_141:
      v75 = v114;
      v114 = 0;
      if (!v75)
        goto LABEL_144;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
LABEL_144:
        v76 = v28 + 14;
        v77 = v28[22];
        v78 = *(unsigned int *)(a1 + 88);
        if ((_DWORD)v77 == -1)
          goto LABEL_148;
        goto LABEL_145;
      }
      WTF::StringImpl::destroy(v75, v53);
      v76 = v28 + 14;
      v77 = v28[22];
      v78 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v77 == -1)
      {
LABEL_148:
        if ((_DWORD)v78 == -1)
          goto LABEL_150;
        goto LABEL_149;
      }
LABEL_145:
      if ((_DWORD)v78 == -1)
      {
        ((void (*)(__int128 *, unsigned int *))off_1E9D6BE18[v77])(&buf, v76);
        v28[22] = -1;
        goto LABEL_150;
      }
LABEL_149:
      *(_QWORD *)&buf = v76;
      ((void (*)(__int128 *))off_1E9D6BE78[v78])(&buf);
LABEL_150:
      WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v28, &v107);
      if (v108)
      {
        v79 = v107;
        v80 = __ldxr((unsigned __int8 *)v107);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v107))
            goto LABEL_156;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v79);
      }
LABEL_156:
      v81 = v28 + 2;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (v83)
      {
        v84 = v104;
        if (v104)
          goto LABEL_160;
      }
      else
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        v84 = v104;
        if (v104)
        {
LABEL_160:
          WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v84);
          v104 = 0;
          v85 = v84 + 2;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v84 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
          }
        }
      }
      v9 += 40;
      if (v9 == v26)
        goto LABEL_166;
    }
    __clrex();
LABEL_44:
    v32 = (unsigned __int8 *)MEMORY[0x1D82A3914]();
    goto LABEL_45;
  }
LABEL_166:
  WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v10);
  if (HIDWORD(v101))
  {
    v89 = v100;
    v90 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    do
    {
      v91 = *(unsigned int **)v89;
      *(_QWORD *)v89 = 0;
      if (v91)
      {
        v92 = v91 + 2;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v91 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
      }
      v89 = (WTF *)((char *)v89 + 8);
    }
    while (v89 != v90);
  }
  result = v100;
  if (&v102 != (uint64_t *)v100 && v100 != 0)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    return (WTF *)WTF::fastFree(result, v88);
  }
  return result;
}

void sub_1D8082A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  void *v33;

  v30 = *(unsigned int *)(v28 - 136);
  if ((_DWORD)v30 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BE30[v30])(&a26, v28 - 160);
  *(_DWORD *)(v28 - 136) = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (__ldaxr(*v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v26))
  {
LABEL_8:
    WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v31);
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1D82A3914]();
  goto LABEL_8;
}

void sub_1D8082B34(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::Lock *a35,char a36)
{
  unsigned int *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v40;
  WTF::StringImpl *v41;
  WTF::Lock *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  void *v48;

  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_8:
      v41 = *(WTF::StringImpl **)(v38 - 168);
      *(_QWORD *)(v38 - 168) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (a36)
      {
        v42 = a35;
        v43 = __ldxr((unsigned __int8 *)a35);
        if (v43 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a35))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v42);
      }
LABEL_17:
      if (v36)
      {
        v44 = v36 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
      WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a30);
      WTF::Vector<WTF::NativePromiseProducer<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v47);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::StringImpl *result;
  BOOL v7;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  return result;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 88) == 2)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *v3 = v6;
    LODWORD(v6) = __ldxr(v4);
    if ((_DWORD)v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D8082F20(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _BYTE v8[2];

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 88) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 24) = -1;
  v6 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6BE40[v6])(v8, v3, a2 + 56);
    *(_DWORD *)(v3 + 24) = v6;
  }
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1D8083028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  v16 = *(unsigned int *)(v14 + 24);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BE30[v16])(&a13, v14);
  *(_DWORD *)(v14 + 24) = -1;
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74[3];

  v74[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v59, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a2);
  WTF::String::String((WTF::String *)&v57, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v53, "]");
  v7 = v58;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v53);
  if (!v60)
  {
    __break(0xC471u);
    return result;
  }
  v10 = v53;
  v53 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      v11 = v54;
      v54 = 0;
      if (!v11)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  v11 = v54;
  v54 = 0;
  if (!v11)
  {
LABEL_10:
    v12 = v55;
    v55 = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  v12 = v55;
  v55 = 0;
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    v13 = v56;
    v56 = 0;
    if (!v13)
      goto LABEL_20;
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  v13 = v56;
  v56 = 0;
  if (!v13)
  {
LABEL_20:
    v14 = v57;
    v57 = 0;
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  v14 = v57;
  v57 = 0;
  if (!v14)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    v58 = 0;
    if (!v7)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  v58 = 0;
  if (!v7)
  {
LABEL_30:
    v15 = v59;
    v59 = 0;
    if (!v15)
      goto LABEL_35;
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  v15 = v59;
  v59 = 0;
  if (!v15)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_44;
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_44;
LABEL_38:
  WTF::String::utf8();
  if (v51)
    v19 = (char *)v51 + 16;
  else
    v19 = 0;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v62 = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  v17 = (uint64_t)v51;
  v51 = 0;
  if (!v17)
  {
LABEL_44:
    if (!*(_BYTE *)a1)
      goto LABEL_119;
    goto LABEL_45;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*(_BYTE *)a1)
    goto LABEL_119;
LABEL_45:
  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    goto LABEL_119;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_119;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v49 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      *(_DWORD *)buf = 0;
      WTF::String::String((WTF::String *)&v62[4], "ThenCallback disconnected from ");
      v63 = 0;
      WTF::LogArgument<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>>::toString(&v64, a2);
      v65 = 0;
      WTF::String::String((WTF::String *)&v66, " aborting [callback:");
      v67 = 0;
      WTF::LogArgument<void const*>::toString();
      v69 = 0;
      WTF::String::String((WTF::String *)&v70, " callSite:");
      v71 = 0;
      WTF::Logger::LogSiteIdentifier::toString(a4);
      v73 = 0;
      WTF::String::String((WTF::String *)v74, "]");
      v51 = 0;
      v52 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
      LODWORD(v52) = 7;
      v51 = v27;
      v28 = HIDWORD(v52);
      *((_DWORD *)v27 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
      v29 = *(_QWORD *)&v62[4];
      if (*(_QWORD *)&v62[4])
        **(_DWORD **)&v62[4] += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v63;
      v30 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      *((_DWORD *)v27 + 4 * (v28 + 2)) = v65;
      v31 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
      *((_DWORD *)v27 + 4 * (v28 + 3)) = v67;
      v32 = v68;
      if (v68)
        *(_DWORD *)v68 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
      *((_DWORD *)v27 + 4 * (v28 + 4)) = v69;
      v33 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
      *((_DWORD *)v27 + 4 * (v28 + 5)) = v71;
      v34 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 5) + 1) = v34;
      *((_DWORD *)v27 + 4 * (v28 + 6)) = v73;
      v35 = v74[0];
      if (v74[0])
        *(_DWORD *)v74[0] += 2;
      *((_QWORD *)v27 + 2 * (v28 + 6) + 1) = v35;
      HIDWORD(v52) = v28 + 7;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 4, &v51);
      v36 = v51;
      if (HIDWORD(v52))
      {
        v37 = a3;
        v38 = 16 * HIDWORD(v52);
        v39 = (WTF::StringImpl **)((char *)v51 + 8);
        do
        {
          v40 = *v39;
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        v36 = v51;
        a3 = v37;
      }
      if (v36)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v36, v18);
      }
      v41 = v74[0];
      v74[0] = 0;
      if (!v41)
        goto LABEL_82;
      if (*(_DWORD *)v41 != 2)
        break;
      WTF::StringImpl::destroy(v41, v18);
      v42 = v72;
      v72 = 0;
      if (!v42)
        goto LABEL_87;
LABEL_85:
      if (*(_DWORD *)v42 != 2)
      {
        *(_DWORD *)v42 -= 2;
LABEL_87:
        v43 = v70;
        v70 = 0;
        if (!v43)
          goto LABEL_92;
        goto LABEL_90;
      }
      WTF::StringImpl::destroy(v42, v18);
      v43 = v70;
      v70 = 0;
      if (!v43)
        goto LABEL_92;
LABEL_90:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_92:
        v44 = v68;
        v68 = 0;
        if (!v44)
          goto LABEL_97;
        goto LABEL_95;
      }
      WTF::StringImpl::destroy(v43, v18);
      v44 = v68;
      v68 = 0;
      if (!v44)
        goto LABEL_97;
LABEL_95:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_97:
        v45 = v66;
        v66 = 0;
        if (!v45)
          goto LABEL_102;
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v44, v18);
      v45 = v66;
      v66 = 0;
      if (!v45)
        goto LABEL_102;
LABEL_100:
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
LABEL_102:
        v46 = v64;
        v64 = 0;
        if (!v46)
          goto LABEL_107;
        goto LABEL_105;
      }
      WTF::StringImpl::destroy(v45, v18);
      v46 = v64;
      v64 = 0;
      if (!v46)
        goto LABEL_107;
LABEL_105:
      if (*(_DWORD *)v46 != 2)
      {
        *(_DWORD *)v46 -= 2;
LABEL_107:
        v47 = *(WTF::StringImpl **)&v62[4];
        *(_QWORD *)&v62[4] = 0;
        if (v47)
          goto LABEL_110;
        goto LABEL_54;
      }
      WTF::StringImpl::destroy(v46, v18);
      v47 = *(WTF::StringImpl **)&v62[4];
      *(_QWORD *)&v62[4] = 0;
      if (v47)
      {
LABEL_110:
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v18);
        else
          *(_DWORD *)v47 -= 2;
      }
LABEL_54:
      if (++v25 == (uint64_t *)v49)
        goto LABEL_114;
    }
    *(_DWORD *)v41 -= 2;
LABEL_82:
    v42 = v72;
    v72 = 0;
    if (!v42)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_114:
  v48 = __ldxr(v20);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, v20))
LABEL_118:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_119:
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D8083838(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  unsigned __int8 *v44;
  int v46;

  v46 = __ldxr(v44);
  if (v46 == 1)
  {
    if (!__stlxr(0, v44))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_7:
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
    {
      WTF::StringImpl::destroy(a30, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a30 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E9D6BE60;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v6)
    return a1;
LABEL_6:
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v6 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;

  *(_QWORD *)this = &off_1E9D6BE60;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  v8 = v7 + 2;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    v11 = this;
    return WTF::fastFree(v11, a2);
  }
LABEL_9:
  v11 = this;
  return WTF::fastFree(v11, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  int v16;
  char v17;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v15[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v15, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_13;
  }
  MEMORY[0x1D82A3914](v2 + 48);
LABEL_13:
  v8 = *(_DWORD *)(v2 + 88);
  v9 = __ldxr(v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, v6))
    {
      v10 = *((_QWORD *)a1 + 3);
      if (v8 == 2)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
LABEL_16:
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x1D82A3914](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 88) != 2)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(v15, v13);
    (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v15);
    if (v16 != -1)
      ((void (*)(char *, _QWORD *))off_1E9D6BE30[v16])(&v17, v15);
    v16 = -1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
LABEL_20:
  WTF::NativePromise<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v15, v10);
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v15);
  if (v16 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E9D6BE30[v16])(&v17, v15);
  return result;
}

void sub_1D8083F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a13 != -1)
    ((void (*)(char *, char *))off_1E9D6BE30[a13])(&a18, &a10);
  a13 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void sub_1D8083FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1D8083FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  unsigned __int8 *v18;
  int v20;

  v20 = __ldxr(v18);
  if (v20 == 1)
  {
    if (!__stlxr(0, v18))
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BE18[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[24];
  int v20;
  _BYTE v21[24];
  int v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v19[0] = 0;
      v20 = -1;
      v7 = *(unsigned int *)(a3 + 24);
      if ((_DWORD)v7 == -1)
      {
        v8 = *(_DWORD *)(a2 + 24);
        if (v8 == -1)
        {
LABEL_42:
          if (v20 != -1)
            return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E9D6BE30[v20])(v21, v19);
          return result;
        }
      }
      else
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E9D6BE40[v7])(&v24, v19, a3);
        v20 = v7;
        v8 = *((_DWORD *)v6 + 6);
        if (v8 != -1 && (_DWORD)v7 == v8)
        {
          result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E9D6BE90[v7])(v21, v19, v6);
          goto LABEL_42;
        }
        if ((_DWORD)v7 != 1)
        {
          v14 = v19;
          v21[0] = 0;
          v22 = -1;
          if (v8 == -1)
          {
LABEL_36:
            *((_DWORD *)v6 + 6) = -1;
            v16 = *((unsigned int *)v14 + 6);
            if ((_DWORD)v16 != -1)
            {
              result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6BEA0[v16])(&v23, v6, v14);
              *((_DWORD *)v6 + 6) = v16;
              v17 = *((unsigned int *)v14 + 6);
              if ((_DWORD)v17 != -1)
                result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BE30[v17])(&v24, v14);
            }
            *((_DWORD *)v14 + 6) = -1;
            v18 = v22;
            if (v22 != -1)
            {
              result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6BEA0[v22])(&v23, v14, v21);
              *((_DWORD *)v14 + 6) = v18;
              if (v22 != -1)
                result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BE30[v22])(&v24, v21);
            }
            goto LABEL_42;
          }
LABEL_34:
          result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6BE40[v8])(&v23, v21, v6);
          v22 = v8;
          v15 = *((unsigned int *)v6 + 6);
          if ((_DWORD)v15 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BE30[v15])(&v24, v6);
          goto LABEL_36;
        }
      }
      v10 = v19;
      if (v8 == 1)
        v11 = 1;
      else
        v11 = v7;
      if (v8 == 1)
        v12 = v19;
      else
        v12 = v6;
      if (v8 == 1)
        v10 = v6;
      v13 = v8 == -1;
      if (v8 == -1)
        v8 = -1;
      else
        v8 = v11;
      if (v13)
        v14 = v19;
      else
        v14 = v12;
      if (!v13)
        v6 = v10;
      v21[0] = 0;
      v22 = -1;
      if (v8 == -1)
        goto LABEL_36;
      goto LABEL_34;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E9D6BE18[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  v9 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6BE40[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 24) = v9;
  }
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

void sub_1D8084330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  uint64_t v18;

  if (a18 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6BE30[a18])(v18 - 33, &a15);
  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6BE30[a13])(v18 - 33, &a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80843B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v14 + 24);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BE30[v16])(&a14, v14);
  *(_DWORD *)(v14 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore14DOMCacheEngine10CacheInfosENSB_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISC_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BE18[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF *result;

  v4 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v5 = *((_DWORD *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v7 = a2[2];
  v8 = a3[2];
  v9 = *((_DWORD *)a3 + 2);
  v10 = *a3;
  *a3 = 0;
  *a2 = v10;
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v9;
  v11 = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v11;
  a2[2] = v8;
  v12 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v12)
  {
    v13 = 24 * v12;
    v14 = (WTF::StringImpl **)(*a3 + 16);
    do
    {
      v15 = *v14;
      *v14 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (StringImpl *)a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v14 += 3;
      v13 -= 24;
    }
    while (v13);
  }
  result = (WTF *)*a3;
  if (*a3)
  {
    *a3 = 0;
    *((_DWORD *)a3 + 2) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *a3 = v4;
  *((_DWORD *)a3 + 2) = v6;
  *((_DWORD *)a3 + 3) = v5;
  a3[2] = v7;
  return result;
}

void sub_1D808455C(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    v6 = (WTF::StringImpl **)((char *)v2 + 16);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore14DOMCacheEngine10CacheInfosENS8_5ErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(_QWORD *)(a2 + 16) = a3[2];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSA_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

void sub_1D80846CC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  WTF::StringImpl *result;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 v12;
  StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v16)
  {
    v6 = *((_DWORD *)v16 + 1);
    if (v15)
    {
LABEL_3:
      v7 = *((_DWORD *)v15 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        v4 = __OFADD__(v7, 1);
        v8 = v7 + 1;
        if (!v4)
          goto LABEL_9;
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
    if (v15)
      goto LABEL_3;
  }
  v8 = 1;
  if (v4)
    goto LABEL_33;
LABEL_9:
  v4 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v4;
  if (v6 < 0)
    goto LABEL_33;
  if ((v10 & 1) != 0)
    goto LABEL_33;
  v4 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13))
    goto LABEL_33;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v17, v11 + 13, v12, (uint64_t)v16, (uint64_t)v15);
  v14 = v17;
  *a1 = v17;
  if (!v14)
    goto LABEL_34;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      result = v16;
      if (!v16)
        return result;
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  result = v16;
  if (!v16)
    return result;
LABEL_29:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D8084850(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1D8084960(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (!v6)
    goto LABEL_5;
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
LABEL_7:
      _Unwind_Resume(exception_object);
  }
  else
  {
LABEL_5:
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_7;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v10, a2);
  goto LABEL_7;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (!v3)
      return a1;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1D8084A58(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BEF0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSK_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _QWORD *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  StringImpl *v23;
  WTF *result;
  char v25;

  v3 = *((_DWORD *)a2 + 3);
  if (v3)
  {
    v4 = 0;
    v5 = *a2;
    v6 = 592 * v3;
    do
    {
      v7 = v5 + v4;
      v8 = *(unsigned int *)(v5 + v4 + 576);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))off_1E9D6BF00[v8])(&v25, v7 + 568);
      *(_DWORD *)(v7 + 576) = -1;
      if (*(_BYTE *)(v7 + 560))
      {
        v9 = *(const void **)(v5 + v4 + 552);
        *(_QWORD *)(v5 + v4 + 552) = 0;
        if (v9)
          CFRelease(v9);
      }
      v10 = (_QWORD *)(v5 + v4);
      if (*(_BYTE *)(v5 + v4 + 536))
      {
        v11 = (_DWORD *)v10[66];
        v10[66] = 0;
        if (v11)
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v11, (StringImpl *)a2);
        v12 = *(WTF::StringImpl **)(v5 + v4 + 496);
        *(_QWORD *)(v5 + v4 + 496) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::destroy(v12, (StringImpl *)a2);
            WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v10 + 47), v23);
            v14 = (WTF::StringImpl *)v10[46];
            v10[46] = 0;
            if (!v14)
              goto LABEL_20;
            goto LABEL_17;
          }
          *(_DWORD *)v12 -= 2;
        }
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v10 + 47), (StringImpl *)a2);
      v14 = (WTF::StringImpl *)v10[46];
      v10[46] = 0;
      if (!v14)
        goto LABEL_20;
LABEL_17:
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
LABEL_20:
      v15 = v5 + v4;
      v16 = *(WTF::StringImpl **)(v5 + v4 + 360);
      *(_QWORD *)(v5 + v4 + 360) = 0;
      if (!v16)
        goto LABEL_23;
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
LABEL_23:
        v17 = *(WTF::StringImpl **)(v15 + 344);
        *(_QWORD *)(v15 + 344) = 0;
        if (!v17)
          goto LABEL_28;
        goto LABEL_26;
      }
      WTF::StringImpl::destroy(v16, v13);
      v17 = *(WTF::StringImpl **)(v15 + 344);
      *(_QWORD *)(v15 + 344) = 0;
      if (!v17)
        goto LABEL_28;
LABEL_26:
      if (*(_DWORD *)v17 != 2)
      {
        *(_DWORD *)v17 -= 2;
LABEL_28:
        v18 = *(WTF::StringImpl **)(v5 + v4 + 328);
        *(_QWORD *)(v5 + v4 + 328) = 0;
        if (!v18)
          goto LABEL_33;
        goto LABEL_31;
      }
      WTF::StringImpl::destroy(v17, v13);
      v18 = *(WTF::StringImpl **)(v5 + v4 + 328);
      *(_QWORD *)(v5 + v4 + 328) = 0;
      if (!v18)
        goto LABEL_33;
LABEL_31:
      if (*(_DWORD *)v18 != 2)
      {
        *(_DWORD *)v18 -= 2;
LABEL_33:
        v19 = *(WTF::StringImpl **)(v7 + 288);
        *(_QWORD *)(v7 + 288) = 0;
        if (!v19)
          goto LABEL_38;
        goto LABEL_36;
      }
      WTF::StringImpl::destroy(v18, v13);
      v19 = *(WTF::StringImpl **)(v7 + 288);
      *(_QWORD *)(v7 + 288) = 0;
      if (!v19)
        goto LABEL_38;
LABEL_36:
      if (*(_DWORD *)v19 != 2)
      {
        *(_DWORD *)v19 -= 2;
LABEL_38:
        v20 = v5 + v4;
        v21 = *(WTF::StringImpl **)(v5 + v4 + 272);
        *(_QWORD *)(v5 + v4 + 272) = 0;
        if (!v21)
          goto LABEL_43;
        goto LABEL_41;
      }
      WTF::StringImpl::destroy(v19, v13);
      v20 = v5 + v4;
      v21 = *(WTF::StringImpl **)(v5 + v4 + 272);
      *(_QWORD *)(v5 + v4 + 272) = 0;
      if (!v21)
        goto LABEL_43;
LABEL_41:
      if (*(_DWORD *)v21 != 2)
      {
        *(_DWORD *)v21 -= 2;
LABEL_43:
        v22 = *(WTF::StringImpl **)(v20 + 232);
        *(_QWORD *)(v20 + 232) = 0;
        if (v22)
          goto LABEL_46;
        goto LABEL_4;
      }
      WTF::StringImpl::destroy(v21, v13);
      v22 = *(WTF::StringImpl **)(v20 + 232);
      *(_QWORD *)(v20 + 232) = 0;
      if (v22)
      {
LABEL_46:
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v13);
        else
          *(_DWORD *)v22 -= 2;
      }
LABEL_4:
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(v5 + v4 + 24), v13);
      v4 += 592;
    }
    while (v6 != v4);
  }
  result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
    {
      MEMORY[0x1D82A6E54]();
      JUMPOUT(0x1D82A6E60);
    }
    --*result;
  }
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _QWORD *a2)
{
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a2, a2);
}

unint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  StringImpl *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v51, "destroying ");
    result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v50, a1);
    v5 = (WTF::StringImpl *)v50;
    if (v51)
    {
      v6 = *((_DWORD *)v51 + 1);
      if (v50)
        goto LABEL_8;
    }
    else
    {
      v6 = 0;
      if (v50)
      {
LABEL_8:
        v7 = *(_DWORD *)(v50 + 4);
        if ((v7 | v6) < 0)
          goto LABEL_98;
        goto LABEL_12;
      }
    }
    v7 = 0;
    if (v6 < 0)
      goto LABEL_98;
LABEL_12:
    result = (v6 + v7);
    if (__OFADD__(v6, v7))
      goto LABEL_98;
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 4);
      v9 = (v8 >> 2) & 1;
      if (!v50 || (v8 & 4) == 0)
      {
LABEL_20:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v51, v50, &buf);
        v52 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v50 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              v11 = v51;
              v51 = 0;
              if (!v11)
                goto LABEL_29;
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                v12 = *(NSObject **)(v2 + 32);
                v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v13)
                  goto LABEL_38;
LABEL_32:
                WTF::String::utf8();
                if (v48)
                  v15 = (char *)v48 + 16;
                else
                  v15 = 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1D7FB9000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v13 = (uint64_t)v48;
                v48 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    v13 = WTF::fastFree((WTF *)v13, v14);
                    if (!*(_BYTE *)v2)
                      goto LABEL_78;
LABEL_39:
                    if (*(unsigned __int8 *)(v2 + 16) < 4u)
                      goto LABEL_78;
                    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    do
                    {
                      while (1)
                      {
                        v17 = *v16;
                        if ((v17 & 1) != 0)
                          goto LABEL_78;
                        v18 = __ldaxr(v16);
                        if (v18 == v17)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v17 | 1, v16));
                    v19 = WTF::Logger::observers((WTF::Logger *)v13);
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20)
                    {
                      v21 = *(uint64_t **)v19;
                      v22 = *(_QWORD *)v19 + 8 * v20;
                      while (1)
                      {
                        v23 = *v21;
                        LODWORD(buf) = 0;
                        WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                        v54 = 0;
                        WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v55, a1);
                        v48 = 0;
                        v49 = 0;
                        v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v49) = 2;
                        v48 = v24;
                        v25 = HIDWORD(v49);
                        *((_DWORD *)v24 + 4 * HIDWORD(v49)) = buf;
                        v26 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                        *((_DWORD *)v24 + 4 * (v25 + 1)) = v54;
                        v27 = v55[0];
                        if (v55[0])
                          *(_DWORD *)v55[0] += 2;
                        *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                        HIDWORD(v49) = v25 + 2;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, v2, 4, &v48);
                        v28 = v48;
                        if (HIDWORD(v49))
                        {
                          v29 = 16 * HIDWORD(v49);
                          v30 = (WTF::StringImpl **)((char *)v48 + 8);
                          do
                          {
                            v31 = *v30;
                            *v30 = 0;
                            if (v31)
                            {
                              if (*(_DWORD *)v31 == 2)
                                WTF::StringImpl::destroy(v31, v14);
                              else
                                *(_DWORD *)v31 -= 2;
                            }
                            v30 += 2;
                            v29 -= 16;
                          }
                          while (v29);
                          v28 = v48;
                        }
                        if (v28)
                        {
                          v48 = 0;
                          LODWORD(v49) = 0;
                          WTF::fastFree(v28, v14);
                        }
                        v32 = v55[0];
                        v55[0] = 0;
                        if (!v32)
                          goto LABEL_66;
                        if (*(_DWORD *)v32 != 2)
                          break;
                        WTF::StringImpl::destroy(v32, v14);
                        v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v33)
                        {
LABEL_69:
                          if (*(_DWORD *)v33 == 2)
                            WTF::StringImpl::destroy(v33, v14);
                          else
                            *(_DWORD *)v33 -= 2;
                        }
LABEL_48:
                        if (++v21 == (uint64_t *)v22)
                          goto LABEL_73;
                      }
                      *(_DWORD *)v32 -= 2;
LABEL_66:
                      v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v33)
                        goto LABEL_69;
                      goto LABEL_48;
                    }
LABEL_73:
                    v34 = __ldxr(v16);
                    if (v34 == 1)
                    {
                      if (!__stlxr(0, v16))
                      {
LABEL_78:
                        v35 = v52;
                        v52 = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, v14);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        goto LABEL_82;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_78;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(_BYTE *)v2)
                  goto LABEL_78;
                goto LABEL_39;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              v12 = *(NSObject **)(v2 + 32);
              v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!(_DWORD)v13)
                goto LABEL_38;
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          v11 = v51;
          v51 = 0;
          if (!v11)
            goto LABEL_29;
          goto LABEL_27;
        }
LABEL_98:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v50)
    {
      v9 = 1;
      goto LABEL_20;
    }
    v9 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_82:
  WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, v36);
  v38 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v38)
  {
    v39 = *(unsigned int ***)(a1 + 88);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v45 && v45 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v45, v37);
  }
  v47 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v47 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E9D6BED8[v47])(&buf, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_1D808530C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_8:
      v22 = a14;
      a14 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 112, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 88, v23);
      v24 = *(unsigned int *)(v18 + 80);
      if ((_DWORD)v24 != -1)
        ((void (*)(WTF **, uint64_t))off_1E9D6BED8[v24])(&a10, v18 + 56);
      *(_DWORD *)(v18 + 80) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  _BYTE *v34;
  _BYTE *v35;
  WTF *result;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  char v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  uint64_t v52;
  StringImpl *v53;
  WTF::StringImpl **v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::Lock *v79;
  int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  WTF *v89;
  WTF *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[4];
  unsigned int *v104;
  __int128 v105;
  __int128 v106;
  WTF::Lock *v107;
  char v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  __int128 buf;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  _QWORD v119[3];

  v119[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&buf = &v116;
  *((_QWORD *)&buf + 1) = 1;
  v100 = (WTF *)&v102;
  v101 = 1;
  v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    v6 = *(unsigned int *)(a1 + 100);
    memcpy(&v102, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v100 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 96);
    LODWORD(v6) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 96) = 1;
    LODWORD(v101) = v5;
  }
  HIDWORD(v101) = v6;
  *(_QWORD *)(a1 + 96) = 1;
  v7 = *(_DWORD *)(a1 + 120);
  v8 = *(_DWORD *)(a1 + 124);
  v9 = *(_QWORD *)(a1 + 112);
  v97 = v9;
  v98 = v7;
  v99 = v8;
  *(_QWORD *)&buf = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *((_QWORD *)&buf + 1) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v101))
  {
    v11 = v100;
    v12 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *(_QWORD *)v11;
      if (*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 129));
        if (v15 != 1
          || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)))
        {
          v16 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)&buf = v14;
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          *((_QWORD *)&buf + 1) = v14;
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v116 = a1;
          v20 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E9D6BF38;
          *(_OWORD *)(v20 + 8) = buf;
          *(_QWORD *)(v20 + 24) = a1;
          *((_QWORD *)&buf + 1) = 0;
          v116 = 0;
          v104 = (unsigned int *)v20;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v16 + 16))(v16, &v104);
          v21 = v104;
          v104 = 0;
          if (v21)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_8;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        *(_QWORD *)&buf = v14;
        WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_8;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_23:
      if (WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v104, a1);
        v24 = v104;
        (*(void (**)(__int128 *__return_ptr, unsigned int *))(*(_QWORD *)v104 + 16))(&buf, v104);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        if ((_DWORD)v116 != -1)
          ((void (*)(_QWORD *, __int128 *))off_1E9D6BEF0[v116])(v103, &buf);
        LODWORD(v116) = -1;
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        if ((_DWORD)v116 != -1)
          ((void (*)(unsigned int **, __int128 *))off_1E9D6BEF0[v116])(&v104, &buf);
      }
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_32:
        MEMORY[0x1D82A3914]();
        goto LABEL_8;
      }
      if (__stxr(1u, *a2))
        goto LABEL_32;
LABEL_8:
      v11 = (WTF *)((char *)v11 + 8);
      if (v11 == v12)
      {
        v9 = v97;
        v8 = v99;
        break;
      }
    }
  }
  if (v8)
  {
    v26 = v9 + 40 * v8;
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    v96 = v26;
    while (1)
    {
      v28 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      v104 = v28;
      v29 = *(_OWORD *)(v9 + 24);
      v105 = *(_OWORD *)(v9 + 8);
      v106 = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      v103[0] = 0;
      v103[1] = 0;
      v103[2] = "<chained promise>";
      v103[3] = 0;
      v32 = (unsigned __int8 *)(v28 + 12);
      v107 = (WTF::Lock *)(v28 + 12);
      v108 = 1;
      if (__ldaxr((unsigned __int8 *)v28 + 48))
        break;
      if (__stxr(1u, v32))
        goto LABEL_44;
LABEL_45:
      v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v32);
      v35 = v34;
      if (!*v34 || v34[16] < 4u)
        goto LABEL_144;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
      WTF::String::String((WTF::String *)&v112, " settling chained promise ");
      result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v111, (uint64_t)v28);
      if (v113)
      {
        v37 = *(_DWORD *)(v113 + 4);
        v38 = (uint64_t)v112;
        if (v112)
          goto LABEL_49;
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)v112;
        if (v112)
        {
LABEL_49:
          v39 = *(_DWORD *)(v38 + 4);
          v40 = v111;
          if (v111)
            goto LABEL_50;
          goto LABEL_54;
        }
      }
      v39 = 0;
      v40 = v111;
      if (v111)
      {
LABEL_50:
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 | v39) < 0)
          goto LABEL_180;
        goto LABEL_55;
      }
LABEL_54:
      v41 = 0;
      if (v39 < 0)
        goto LABEL_180;
LABEL_55:
      v42 = __OFADD__(v39, v41);
      v43 = v39 + v41;
      v44 = v42;
      if (v37 < 0 || (v44 & 1) != 0 || (v45 = v37 + v43, __OFADD__(v37, v43)))
      {
LABEL_180:
        __break(0xC471u);
        return result;
      }
      if (v113 && (*(_BYTE *)(v113 + 16) & 4) == 0)
      {
        v46 = 0;
        goto LABEL_71;
      }
      if (v38)
      {
        v47 = *(_DWORD *)(v38 + 16);
        v46 = (v47 >> 2) & 1;
        if (v40 && (v47 & 4) != 0)
LABEL_69:
          v46 = (*(unsigned __int8 *)(v40 + 16) >> 2) & 1;
      }
      else
      {
        if (v40)
          goto LABEL_69;
        v46 = 1;
      }
LABEL_71:
      result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v45, v46, v113, v38, v40);
      v114 = (WTF::StringImpl *)buf;
      if (!(_QWORD)buf)
        goto LABEL_180;
      v111 = 0;
      if (!v40)
        goto LABEL_75;
      if (*(_DWORD *)v40 != 2)
      {
        *(_DWORD *)v40 -= 2;
LABEL_75:
        v49 = v112;
        v112 = 0;
        if (!v49)
          goto LABEL_80;
        goto LABEL_78;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v40, v48);
      v49 = v112;
      v112 = 0;
      if (!v49)
        goto LABEL_80;
LABEL_78:
      if (*(_DWORD *)v49 != 2)
      {
        *(_DWORD *)v49 -= 2;
LABEL_80:
        v50 = (WTF::StringImpl *)v113;
        v113 = 0;
        if (!v50)
          goto LABEL_85;
        goto LABEL_83;
      }
      WTF::StringImpl::destroy(v49, v48);
      v50 = (WTF::StringImpl *)v113;
      v113 = 0;
      if (!v50)
        goto LABEL_85;
LABEL_83:
      if (*(_DWORD *)v50 != 2)
      {
        *(_DWORD *)v50 -= 2;
LABEL_85:
        v51 = *((_QWORD *)v35 + 4);
        v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v52)
          goto LABEL_94;
        goto LABEL_88;
      }
      WTF::StringImpl::destroy(v50, v48);
      v51 = *((_QWORD *)v35 + 4);
      v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)v52)
        goto LABEL_94;
LABEL_88:
      WTF::String::utf8();
      if (v109)
        v54 = v109 + 2;
      else
        v54 = 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v54;
      _os_log_impl(&dword_1D7FB9000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v52 = (uint64_t)v109;
      v109 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          v52 = WTF::fastFree((WTF *)v52, v53);
          if (!*v35)
            goto LABEL_141;
          goto LABEL_95;
        }
        --*(_DWORD *)v52;
      }
LABEL_94:
      if (!*v35)
        goto LABEL_141;
LABEL_95:
      if (v35[16] < 4u)
        goto LABEL_141;
      do
      {
        while (1)
        {
          v55 = *v27;
          if ((v55 & 1) != 0)
            goto LABEL_141;
          v56 = __ldaxr(v27);
          if (v56 == v55)
            break;
          __clrex();
        }
      }
      while (__stxr(v55 | 1, v27));
      v57 = WTF::Logger::observers((WTF::Logger *)v52);
      v58 = *(unsigned int *)(v57 + 12);
      if ((_DWORD)v58)
      {
        v59 = *(uint64_t **)v57;
        v60 = *(_QWORD *)v57 + 8 * v58;
        while (1)
        {
          v61 = *v59;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
          LODWORD(v116) = 0;
          WTF::String::String((WTF::String *)&v117, " settling chained promise ");
          v118 = 0;
          WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v119, (uint64_t)v28);
          v109 = 0;
          v110 = 0;
          v62 = WTF::fastMalloc((WTF *)0x30);
          LODWORD(v110) = 3;
          v109 = (WTF::StringImpl **)v62;
          v63 = HIDWORD(v110);
          *(_DWORD *)(v62 + 16 * HIDWORD(v110)) = buf;
          v64 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *(_QWORD *)(v62 + 16 * v63 + 8) = v64;
          *(_DWORD *)(v62 + 16 * (v63 + 1)) = v116;
          v65 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 1) + 8) = v65;
          *(_DWORD *)(v62 + 16 * (v63 + 2)) = v118;
          v66 = v119[0];
          if (v119[0])
            *(_DWORD *)v119[0] += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 2) + 8) = v66;
          HIDWORD(v110) = v63 + 3;
          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl ***))(*(_QWORD *)v61 + 16))(v61, v35, 4, &v109);
          v67 = (WTF *)v109;
          if (HIDWORD(v110))
          {
            v68 = 16 * HIDWORD(v110);
            v69 = v109 + 1;
            do
            {
              v70 = *v69;
              *v69 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, v53);
                else
                  *(_DWORD *)v70 -= 2;
              }
              v69 += 2;
              v68 -= 16;
            }
            while (v68);
            v67 = (WTF *)v109;
          }
          if (v67)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree(v67, v53);
          }
          v71 = (WTF::StringImpl *)v119[0];
          v119[0] = 0;
          if (!v71)
            goto LABEL_124;
          if (*(_DWORD *)v71 != 2)
            break;
          WTF::StringImpl::destroy(v71, v53);
          v72 = v117;
          v117 = 0;
          if (!v72)
            goto LABEL_129;
LABEL_127:
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
LABEL_129:
            v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v73)
              goto LABEL_132;
            goto LABEL_104;
          }
          WTF::StringImpl::destroy(v72, v53);
          v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v73)
          {
LABEL_132:
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v53);
            else
              *(_DWORD *)v73 -= 2;
          }
LABEL_104:
          if (++v59 == (uint64_t *)v60)
            goto LABEL_136;
        }
        *(_DWORD *)v71 -= 2;
LABEL_124:
        v72 = v117;
        v117 = 0;
        if (!v72)
          goto LABEL_129;
        goto LABEL_127;
      }
LABEL_136:
      v74 = __ldxr(v27);
      if (v74 != 1)
      {
        __clrex();
        v26 = v96;
LABEL_140:
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        goto LABEL_141;
      }
      v26 = v96;
      if (__stlxr(0, v27))
        goto LABEL_140;
LABEL_141:
      v75 = v114;
      v114 = 0;
      if (!v75)
        goto LABEL_144;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
LABEL_144:
        v76 = v28 + 14;
        v77 = v28[20];
        v78 = *(unsigned int *)(a1 + 80);
        if ((_DWORD)v77 == -1)
          goto LABEL_148;
        goto LABEL_145;
      }
      WTF::StringImpl::destroy(v75, v53);
      v76 = v28 + 14;
      v77 = v28[20];
      v78 = *(unsigned int *)(a1 + 80);
      if ((_DWORD)v77 == -1)
      {
LABEL_148:
        if ((_DWORD)v78 == -1)
          goto LABEL_150;
        goto LABEL_149;
      }
LABEL_145:
      if ((_DWORD)v78 == -1)
      {
        ((void (*)(__int128 *, unsigned int *))off_1E9D6BED8[v77])(&buf, v76);
        v28[20] = -1;
        goto LABEL_150;
      }
LABEL_149:
      *(_QWORD *)&buf = v76;
      ((void (*)(__int128 *))off_1E9D6BF50[v78])(&buf);
LABEL_150:
      WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v28, &v107);
      if (v108)
      {
        v79 = v107;
        v80 = __ldxr((unsigned __int8 *)v107);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v107))
            goto LABEL_156;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v79);
      }
LABEL_156:
      v81 = v28 + 2;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (v83)
      {
        v84 = v104;
        if (v104)
          goto LABEL_160;
      }
      else
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        v84 = v104;
        if (v104)
        {
LABEL_160:
          WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v84);
          v104 = 0;
          v85 = v84 + 2;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v84 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
          }
        }
      }
      v9 += 40;
      if (v9 == v26)
        goto LABEL_166;
    }
    __clrex();
LABEL_44:
    v32 = (unsigned __int8 *)MEMORY[0x1D82A3914]();
    goto LABEL_45;
  }
LABEL_166:
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v10);
  if (HIDWORD(v101))
  {
    v89 = v100;
    v90 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    do
    {
      v91 = *(unsigned int **)v89;
      *(_QWORD *)v89 = 0;
      if (v91)
      {
        v92 = v91 + 2;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v91 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
      }
      v89 = (WTF *)((char *)v89 + 8);
    }
    while (v89 != v90);
  }
  result = v100;
  if (&v102 != (uint64_t *)v100 && v100 != 0)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    return (WTF *)WTF::fastFree(result, v88);
  }
  return result;
}

void sub_1D8085F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  void *v33;

  v30 = *(unsigned int *)(v28 - 144);
  if ((_DWORD)v30 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BEF0[v30])(&a26, v28 - 160);
  *(_DWORD *)(v28 - 144) = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (__ldaxr(*v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v26))
  {
LABEL_8:
    WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v31);
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1D82A3914]();
  goto LABEL_8;
}

void sub_1D8085FD8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::Lock *a35,char a36)
{
  unsigned int *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v40;
  WTF::StringImpl *v41;
  WTF::Lock *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  void *v48;

  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_8:
      v41 = *(WTF::StringImpl **)(v38 - 168);
      *(_QWORD *)(v38 - 168) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (a36)
      {
        v42 = a35;
        v43 = __ldxr((unsigned __int8 *)a35);
        if (v43 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a35))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v42);
      }
LABEL_17:
      if (v36)
      {
        v44 = v36 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
      WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a30);
      WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v47);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::StringImpl *result;
  BOOL v7;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  return result;
}

BOOL WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 80);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) == 2)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *v3 = v6;
    LODWORD(v6) = __ldxr(v4);
    if ((_DWORD)v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D8086448(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _BYTE v8[2];

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 16) = -1;
  v6 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6BF18[v6])(v8, v3, a2 + 56);
    *(_DWORD *)(v3 + 16) = v6;
  }
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1D8086550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  v16 = *(unsigned int *)(v14 + 16);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BEF0[v16])(&a13, v14);
  *(_DWORD *)(v14 + 16) = -1;
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74[3];

  v74[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v59, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a2);
  WTF::String::String((WTF::String *)&v57, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v53, "]");
  v7 = v58;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v53);
  if (!v60)
  {
    __break(0xC471u);
    return result;
  }
  v10 = v53;
  v53 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      v11 = v54;
      v54 = 0;
      if (!v11)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  v11 = v54;
  v54 = 0;
  if (!v11)
  {
LABEL_10:
    v12 = v55;
    v55 = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  v12 = v55;
  v55 = 0;
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    v13 = v56;
    v56 = 0;
    if (!v13)
      goto LABEL_20;
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  v13 = v56;
  v56 = 0;
  if (!v13)
  {
LABEL_20:
    v14 = v57;
    v57 = 0;
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  v14 = v57;
  v57 = 0;
  if (!v14)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    v58 = 0;
    if (!v7)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  v58 = 0;
  if (!v7)
  {
LABEL_30:
    v15 = v59;
    v59 = 0;
    if (!v15)
      goto LABEL_35;
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  v15 = v59;
  v59 = 0;
  if (!v15)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_44;
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_44;
LABEL_38:
  WTF::String::utf8();
  if (v51)
    v19 = (char *)v51 + 16;
  else
    v19 = 0;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v62 = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  v17 = (uint64_t)v51;
  v51 = 0;
  if (!v17)
  {
LABEL_44:
    if (!*(_BYTE *)a1)
      goto LABEL_119;
    goto LABEL_45;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*(_BYTE *)a1)
    goto LABEL_119;
LABEL_45:
  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    goto LABEL_119;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_119;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v49 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      *(_DWORD *)buf = 0;
      WTF::String::String((WTF::String *)&v62[4], "ThenCallback disconnected from ");
      v63 = 0;
      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v64, a2);
      v65 = 0;
      WTF::String::String((WTF::String *)&v66, " aborting [callback:");
      v67 = 0;
      WTF::LogArgument<void const*>::toString();
      v69 = 0;
      WTF::String::String((WTF::String *)&v70, " callSite:");
      v71 = 0;
      WTF::Logger::LogSiteIdentifier::toString(a4);
      v73 = 0;
      WTF::String::String((WTF::String *)v74, "]");
      v51 = 0;
      v52 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
      LODWORD(v52) = 7;
      v51 = v27;
      v28 = HIDWORD(v52);
      *((_DWORD *)v27 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
      v29 = *(_QWORD *)&v62[4];
      if (*(_QWORD *)&v62[4])
        **(_DWORD **)&v62[4] += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v63;
      v30 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      *((_DWORD *)v27 + 4 * (v28 + 2)) = v65;
      v31 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
      *((_DWORD *)v27 + 4 * (v28 + 3)) = v67;
      v32 = v68;
      if (v68)
        *(_DWORD *)v68 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
      *((_DWORD *)v27 + 4 * (v28 + 4)) = v69;
      v33 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
      *((_DWORD *)v27 + 4 * (v28 + 5)) = v71;
      v34 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 5) + 1) = v34;
      *((_DWORD *)v27 + 4 * (v28 + 6)) = v73;
      v35 = v74[0];
      if (v74[0])
        *(_DWORD *)v74[0] += 2;
      *((_QWORD *)v27 + 2 * (v28 + 6) + 1) = v35;
      HIDWORD(v52) = v28 + 7;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 4, &v51);
      v36 = v51;
      if (HIDWORD(v52))
      {
        v37 = a3;
        v38 = 16 * HIDWORD(v52);
        v39 = (WTF::StringImpl **)((char *)v51 + 8);
        do
        {
          v40 = *v39;
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        v36 = v51;
        a3 = v37;
      }
      if (v36)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v36, v18);
      }
      v41 = v74[0];
      v74[0] = 0;
      if (!v41)
        goto LABEL_82;
      if (*(_DWORD *)v41 != 2)
        break;
      WTF::StringImpl::destroy(v41, v18);
      v42 = v72;
      v72 = 0;
      if (!v42)
        goto LABEL_87;
LABEL_85:
      if (*(_DWORD *)v42 != 2)
      {
        *(_DWORD *)v42 -= 2;
LABEL_87:
        v43 = v70;
        v70 = 0;
        if (!v43)
          goto LABEL_92;
        goto LABEL_90;
      }
      WTF::StringImpl::destroy(v42, v18);
      v43 = v70;
      v70 = 0;
      if (!v43)
        goto LABEL_92;
LABEL_90:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_92:
        v44 = v68;
        v68 = 0;
        if (!v44)
          goto LABEL_97;
        goto LABEL_95;
      }
      WTF::StringImpl::destroy(v43, v18);
      v44 = v68;
      v68 = 0;
      if (!v44)
        goto LABEL_97;
LABEL_95:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_97:
        v45 = v66;
        v66 = 0;
        if (!v45)
          goto LABEL_102;
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v44, v18);
      v45 = v66;
      v66 = 0;
      if (!v45)
        goto LABEL_102;
LABEL_100:
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
LABEL_102:
        v46 = v64;
        v64 = 0;
        if (!v46)
          goto LABEL_107;
        goto LABEL_105;
      }
      WTF::StringImpl::destroy(v45, v18);
      v46 = v64;
      v64 = 0;
      if (!v46)
        goto LABEL_107;
LABEL_105:
      if (*(_DWORD *)v46 != 2)
      {
        *(_DWORD *)v46 -= 2;
LABEL_107:
        v47 = *(WTF::StringImpl **)&v62[4];
        *(_QWORD *)&v62[4] = 0;
        if (v47)
          goto LABEL_110;
        goto LABEL_54;
      }
      WTF::StringImpl::destroy(v46, v18);
      v47 = *(WTF::StringImpl **)&v62[4];
      *(_QWORD *)&v62[4] = 0;
      if (v47)
      {
LABEL_110:
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v18);
        else
          *(_DWORD *)v47 -= 2;
      }
LABEL_54:
      if (++v25 == (uint64_t *)v49)
        goto LABEL_114;
    }
    *(_DWORD *)v41 -= 2;
LABEL_82:
    v42 = v72;
    v72 = 0;
    if (!v42)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_114:
  v48 = __ldxr(v20);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, v20))
LABEL_118:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_119:
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D8086D60(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  unsigned __int8 *v44;
  int v46;

  v46 = __ldxr(v44);
  if (v46 == 1)
  {
    if (!__stlxr(0, v44))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_7:
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
    {
      WTF::StringImpl::destroy(a30, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a30 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E9D6BF38;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v6)
    return a1;
LABEL_6:
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v6 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;

  *(_QWORD *)this = &off_1E9D6BF38;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  v8 = v7 + 2;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    v11 = this;
    return WTF::fastFree(v11, a2);
  }
LABEL_9:
  v11 = this;
  return WTF::fastFree(v11, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  _QWORD v15[2];
  int v16;
  char v17;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v15[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v15, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_13;
  }
  MEMORY[0x1D82A3914](v2 + 48);
LABEL_13:
  v8 = *(_DWORD *)(v2 + 80);
  v9 = __ldxr(v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, v6))
    {
      v10 = *((_QWORD *)a1 + 3);
      if (v8 == 2)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
LABEL_16:
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x1D82A3914](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 80) != 2)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(v15, v13);
    (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v15);
    if (v16 != -1)
      ((void (*)(char *, _QWORD *))off_1E9D6BEF0[v16])(&v17, v15);
    v16 = -1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
LABEL_20:
  WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v15, v10);
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v15);
  if (v16 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E9D6BEF0[v16])(&v17, v15);
  return result;
}

void sub_1D8087484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a11 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D6BEF0[a11])(&a16, &a9);
  a11 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void sub_1D80874CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1D80874E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v16);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BED8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[16];
  int v20;
  _BYTE v21[16];
  int v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v19[0] = 0;
      v20 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 == -1)
      {
        v8 = *(_DWORD *)(a2 + 16);
        if (v8 == -1)
        {
LABEL_42:
          if (v20 != -1)
            return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E9D6BEF0[v20])(v21, v19);
          return result;
        }
      }
      else
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E9D6BF18[v7])(&v24, v19, a3);
        v20 = v7;
        v8 = *((_DWORD *)v6 + 4);
        if (v8 != -1 && (_DWORD)v7 == v8)
        {
          result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E9D6BF68[v7])(v21, v19, v6);
          goto LABEL_42;
        }
        if ((_DWORD)v7 != 1)
        {
          v14 = v19;
          v21[0] = 0;
          v22 = -1;
          if (v8 == -1)
          {
LABEL_36:
            *((_DWORD *)v6 + 4) = -1;
            v16 = *((unsigned int *)v14 + 4);
            if ((_DWORD)v16 != -1)
            {
              result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6BF78[v16])(&v23, v6, v14);
              *((_DWORD *)v6 + 4) = v16;
              v17 = *((unsigned int *)v14 + 4);
              if ((_DWORD)v17 != -1)
                result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BEF0[v17])(&v24, v14);
            }
            *((_DWORD *)v14 + 4) = -1;
            v18 = v22;
            if (v22 != -1)
            {
              result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6BF78[v22])(&v23, v14, v21);
              *((_DWORD *)v14 + 4) = v18;
              if (v22 != -1)
                result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BEF0[v22])(&v24, v21);
            }
            goto LABEL_42;
          }
LABEL_34:
          result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6BF18[v8])(&v23, v21, v6);
          v22 = v8;
          v15 = *((unsigned int *)v6 + 4);
          if ((_DWORD)v15 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BEF0[v15])(&v24, v6);
          goto LABEL_36;
        }
      }
      v10 = v19;
      if (v8 == 1)
        v11 = 1;
      else
        v11 = v7;
      if (v8 == 1)
        v12 = v19;
      else
        v12 = v6;
      if (v8 == 1)
        v10 = v6;
      v13 = v8 == -1;
      if (v8 == -1)
        v8 = -1;
      else
        v8 = v11;
      if (v13)
        v14 = v19;
      else
        v14 = v12;
      if (!v13)
        v6 = v10;
      v21[0] = 0;
      v22 = -1;
      if (v8 == -1)
        goto LABEL_36;
      goto LABEL_34;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E9D6BED8[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  v9 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6BF18[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 16) = v9;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

void sub_1D8087850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, int a16)
{
  uint64_t v16;

  if (a16 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6BEF0[a16])(v16 - 33, &a14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6BEF0[a12])(v16 - 33, &a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80878D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BEF0[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SH_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSK_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BED8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSA_5ErrorEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::NativePromise(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t result;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  StringImpl *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E9D6BF98;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  v6 = v5;
  if (!*v5 || v5[16] < 4u)
    return a1;
  WTF::String::String((WTF::String *)&v42, "creating ");
  result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v41, a1);
  v8 = (WTF::StringImpl *)v41;
  if (v42)
  {
    v9 = *((_DWORD *)v42 + 1);
    if (v41)
      goto LABEL_5;
  }
  else
  {
    v9 = 0;
    if (v41)
    {
LABEL_5:
      v10 = *(_DWORD *)(v41 + 4);
      if ((v10 | v9) < 0)
        goto LABEL_80;
      goto LABEL_9;
    }
  }
  v10 = 0;
  if (v9 < 0)
    goto LABEL_80;
LABEL_9:
  result = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_80;
  if (!v42)
  {
    if (!v41)
    {
      v12 = 1;
      goto LABEL_17;
    }
LABEL_15:
    v12 = (*(unsigned __int8 *)(v41 + 16) >> 2) & 1;
    goto LABEL_17;
  }
  v11 = *((_DWORD *)v42 + 4);
  v12 = (v11 >> 2) & 1;
  if (v41 && (v11 & 4) != 0)
    goto LABEL_15;
LABEL_17:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v42, v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if ((_QWORD)buf)
  {
    v41 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v13);
        v14 = v42;
        v42 = 0;
        if (!v14)
          goto LABEL_26;
LABEL_24:
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v13);
          v15 = *((_QWORD *)v6 + 4);
          v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          if (!(_DWORD)v16)
            goto LABEL_35;
LABEL_29:
          WTF::String::utf8();
          if (v39)
            v18 = (char *)v39 + 16;
          else
            v18 = 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v18;
          _os_log_impl(&dword_1D7FB9000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v16 = (uint64_t)v39;
          v39 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
            {
              v16 = WTF::fastFree((WTF *)v16, v17);
              if (!*v6)
                goto LABEL_75;
LABEL_36:
              if (v6[16] < 4u)
                goto LABEL_75;
              v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              do
              {
                while (1)
                {
                  v20 = *v19;
                  if ((v20 & 1) != 0)
                    goto LABEL_75;
                  v21 = __ldaxr(v19);
                  if (v21 == v20)
                    break;
                  __clrex();
                }
              }
              while (__stxr(v20 | 1, v19));
              v22 = WTF::Logger::observers((WTF::Logger *)v16);
              v23 = *(unsigned int *)(v22 + 12);
              if ((_DWORD)v23)
              {
                v24 = *(uint64_t **)v22;
                v25 = *(_QWORD *)v22 + 8 * v23;
                while (1)
                {
                  v26 = *v24;
                  LODWORD(buf) = 0;
                  WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
                  v45 = 0;
                  WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v46, a1);
                  v39 = 0;
                  v40 = 0;
                  v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                  LODWORD(v40) = 2;
                  v39 = v27;
                  v28 = HIDWORD(v40);
                  *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
                  v29 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v27 + 2 * v28 + 1) = v29;
                  *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
                  v30 = v46[0];
                  if (v46[0])
                    *(_DWORD *)v46[0] += 2;
                  *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
                  HIDWORD(v40) = v28 + 2;
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, v6, 4, &v39);
                  v31 = v39;
                  if (HIDWORD(v40))
                  {
                    v32 = 16 * HIDWORD(v40);
                    v33 = (WTF::StringImpl **)((char *)v39 + 8);
                    do
                    {
                      v34 = *v33;
                      *v33 = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, v17);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      v33 += 2;
                      v32 -= 16;
                    }
                    while (v32);
                    v31 = v39;
                  }
                  if (v31)
                  {
                    v39 = 0;
                    LODWORD(v40) = 0;
                    WTF::fastFree(v31, v17);
                  }
                  v35 = v46[0];
                  v46[0] = 0;
                  if (!v35)
                    goto LABEL_63;
                  if (*(_DWORD *)v35 != 2)
                    break;
                  WTF::StringImpl::destroy(v35, v17);
                  v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v36)
                  {
LABEL_66:
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, v17);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
LABEL_45:
                  if (++v24 == (uint64_t *)v25)
                    goto LABEL_70;
                }
                *(_DWORD *)v35 -= 2;
LABEL_63:
                v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v36)
                  goto LABEL_66;
                goto LABEL_45;
              }
LABEL_70:
              v37 = __ldxr(v19);
              if (v37 == 1)
              {
                if (!__stlxr(0, v19))
                {
LABEL_75:
                  v38 = v43;
                  v43 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, v17);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  return a1;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              goto LABEL_75;
            }
            --*(_DWORD *)v16;
          }
LABEL_35:
          if (!*v6)
            goto LABEL_75;
          goto LABEL_36;
        }
        *(_DWORD *)v14 -= 2;
LABEL_26:
        v15 = *((_QWORD *)v6 + 4);
        v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v16)
          goto LABEL_35;
        goto LABEL_29;
      }
      *(_DWORD *)v8 -= 2;
    }
    v14 = v42;
    v42 = 0;
    if (!v14)
      goto LABEL_26;
    goto LABEL_24;
  }
LABEL_80:
  __break(0xC471u);
  return result;
}

void sub_1D8087EDC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v28;
  unsigned int **v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;

  v22 = __ldxr(v20);
  if (v22 == 1)
  {
    if (!__stlxr(0, v20))
    {
LABEL_8:
      v23 = a14;
      a14 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19, a2);
      v25 = *(unsigned int *)(v18 + 100);
      if ((_DWORD)v25)
      {
        v29 = *(unsigned int ***)(v18 + 88);
        v30 = &v29[v25];
        do
        {
          v31 = *v29;
          *v29 = 0;
          if (v31)
          {
            v32 = v31 + 2;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v31 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
            }
          }
          ++v29;
        }
        while (v29 != v30);
      }
      v26 = *(WTF **)(v18 + 88);
      if (a9 == v26 || v26 == 0)
      {
        v28 = *(unsigned int *)(v18 + 80);
        if ((_DWORD)v28 != -1)
          goto LABEL_27;
      }
      else
      {
        *(_QWORD *)(v18 + 88) = 0;
        *(_DWORD *)(v18 + 96) = 0;
        WTF::fastFree(v26, v24);
        v28 = *(unsigned int *)(v18 + 80);
        if ((_DWORD)v28 != -1)
        {
LABEL_27:
          ((void (*)(WTF **, uint64_t))off_1E9D6BFB0[v28])(&a10, v19 - 56);
          *(_DWORD *)(v18 + 80) = -1;
          _Unwind_Resume(a1);
        }
      }
      *(_DWORD *)(v18 + 80) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::reject<WebCore::DOMCacheEngine::Error,std::enable_if<true,void>>(uint64_t a1, _BYTE *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v5;
  uint64_t v7;
  BOOL v8;
  WTF::Lock *result;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  StringImpl *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  char v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  WTF::Lock *v54;
  char v55;
  WTF::Logger *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 buf;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66[3];

  v66[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v5 = (WTF::Lock *)(a1 + 48);
  v54 = v5;
  v55 = 1;
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  v5 = (WTF::Lock *)MEMORY[0x1D82A3914]();
LABEL_5:
  v7 = WTF::NativePromiseBase::logChannel(v5);
  if (*(_BYTE *)v7)
    v8 = *(unsigned __int8 *)(v7 + 16) >= 4u;
  else
    v8 = 0;
  if (!v8)
  {
LABEL_107:
    v48 = *a2;
    v49 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v49 == -1)
      goto LABEL_109;
    goto LABEL_108;
  }
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v59, " rejecting ");
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a1);
  v10 = (WTF::StringImpl *)v58;
  if (v60)
  {
    v11 = *((_DWORD *)v60 + 1);
    if (v59)
      goto LABEL_12;
  }
  else
  {
    v11 = 0;
    if (v59)
    {
LABEL_12:
      v12 = *((_DWORD *)v59 + 1);
      if (v58)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  v12 = 0;
  if (v58)
  {
LABEL_13:
    v13 = *(_DWORD *)(v58 + 4);
    if ((v13 | v12) < 0)
      goto LABEL_118;
    goto LABEL_18;
  }
LABEL_17:
  v13 = 0;
  if (v12 < 0)
  {
LABEL_118:
    __break(0xC471u);
    return result;
  }
LABEL_18:
  v14 = __OFADD__(v12, v13);
  v15 = v12 + v13;
  v16 = v14;
  if (v11 < 0)
    goto LABEL_118;
  if ((v16 & 1) != 0)
    goto LABEL_118;
  v17 = v11 + v15;
  if (__OFADD__(v11, v15))
    goto LABEL_118;
  if (v60 && (*((_BYTE *)v60 + 16) & 4) == 0)
  {
    v18 = 0;
    goto LABEL_34;
  }
  if (!v59)
  {
    if (!v58)
    {
      v18 = 1;
      goto LABEL_34;
    }
LABEL_32:
    v18 = (*(unsigned __int8 *)(v58 + 16) >> 2) & 1;
    goto LABEL_34;
  }
  v19 = *((_DWORD *)v59 + 4);
  v18 = (v19 >> 2) & 1;
  if (v58 && (v19 & 4) != 0)
    goto LABEL_32;
LABEL_34:
  result = (WTF::Lock *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v17, v18, (uint64_t)v60, (uint64_t)v59, v58);
  v61 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_118;
  v58 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v20);
      v21 = v59;
      v59 = 0;
      if (!v21)
        goto LABEL_43;
      goto LABEL_41;
    }
    *(_DWORD *)v10 -= 2;
  }
  v21 = v59;
  v59 = 0;
  if (!v21)
  {
LABEL_43:
    v22 = v60;
    v60 = 0;
    if (!v22)
      goto LABEL_48;
    goto LABEL_46;
  }
LABEL_41:
  if (*(_DWORD *)v21 != 2)
  {
    *(_DWORD *)v21 -= 2;
    goto LABEL_43;
  }
  WTF::StringImpl::destroy(v21, v20);
  v22 = v60;
  v60 = 0;
  if (!v22)
    goto LABEL_48;
LABEL_46:
  if (*(_DWORD *)v22 == 2)
  {
    WTF::StringImpl::destroy(v22, v20);
    v23 = *(NSObject **)(v7 + 32);
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v24)
      goto LABEL_57;
    goto LABEL_51;
  }
  *(_DWORD *)v22 -= 2;
LABEL_48:
  v23 = *(NSObject **)(v7 + 32);
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v24)
    goto LABEL_57;
LABEL_51:
  WTF::String::utf8();
  if (v56)
    v26 = (char *)v56 + 16;
  else
    v26 = 0;
  LODWORD(buf) = 136446210;
  *(_QWORD *)((char *)&buf + 4) = v26;
  _os_log_impl(&dword_1D7FB9000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
  v24 = (uint64_t)v56;
  v56 = 0;
  if (!v24)
  {
LABEL_57:
    if (!*(_BYTE *)v7)
      goto LABEL_104;
    goto LABEL_58;
  }
  if (*(_DWORD *)v24 != 1)
  {
    --*(_DWORD *)v24;
    goto LABEL_57;
  }
  v24 = WTF::fastFree((WTF *)v24, v25);
  if (!*(_BYTE *)v7)
    goto LABEL_104;
LABEL_58:
  if (*(unsigned __int8 *)(v7 + 16) < 4u)
    goto LABEL_104;
  v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v28 = *v27;
      if ((v28 & 1) != 0)
        goto LABEL_104;
      v29 = __ldaxr(v27);
      if (v29 == v28)
        break;
      __clrex();
    }
  }
  while (__stxr(v28 | 1, v27));
  v51 = a2;
  v30 = WTF::Logger::observers((WTF::Logger *)v24);
  v31 = *(unsigned int *)(v30 + 12);
  if ((_DWORD)v31)
  {
    v32 = *(uint64_t **)v30;
    v52 = *(_QWORD *)v30 + 8 * v31;
    while (1)
    {
      v33 = *v32;
      LODWORD(buf) = 0;
      WTF::Logger::LogSiteIdentifier::toString(a3);
      v63 = 0;
      WTF::String::String((WTF::String *)&v64, " rejecting ");
      v65 = 0;
      WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v66, a1);
      v56 = 0;
      v57 = 0;
      v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
      LODWORD(v57) = 3;
      v56 = v34;
      v35 = HIDWORD(v57);
      *((_DWORD *)v34 + 4 * HIDWORD(v57)) = buf;
      v36 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
        **((_DWORD **)&buf + 1) += 2;
      *((_QWORD *)v34 + 2 * v35 + 1) = v36;
      *((_DWORD *)v34 + 4 * (v35 + 1)) = v63;
      v37 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
      *((_DWORD *)v34 + 4 * (v35 + 2)) = v65;
      v38 = v66[0];
      if (v66[0])
        *(_DWORD *)v66[0] += 2;
      *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
      HIDWORD(v57) = v35 + 3;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, v7, 4, &v56);
      v39 = v56;
      if (HIDWORD(v57))
      {
        v40 = 16 * HIDWORD(v57);
        v41 = (WTF::StringImpl **)((char *)v56 + 8);
        do
        {
          v42 = *v41;
          *v41 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v25);
            else
              *(_DWORD *)v42 -= 2;
          }
          v41 += 2;
          v40 -= 16;
        }
        while (v40);
        v39 = v56;
      }
      if (v39)
      {
        v56 = 0;
        LODWORD(v57) = 0;
        WTF::fastFree(v39, v25);
      }
      v43 = v66[0];
      v66[0] = 0;
      if (!v43)
        goto LABEL_87;
      if (*(_DWORD *)v43 != 2)
        break;
      WTF::StringImpl::destroy(v43, v25);
      v44 = v64;
      v64 = 0;
      if (!v44)
        goto LABEL_92;
LABEL_90:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_92:
        v45 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v45)
          goto LABEL_95;
        goto LABEL_67;
      }
      WTF::StringImpl::destroy(v44, v25);
      v45 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v45)
      {
LABEL_95:
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v25);
        else
          *(_DWORD *)v45 -= 2;
      }
LABEL_67:
      if (++v32 == (uint64_t *)v52)
        goto LABEL_99;
    }
    *(_DWORD *)v43 -= 2;
LABEL_87:
    v44 = v64;
    v64 = 0;
    if (!v44)
      goto LABEL_92;
    goto LABEL_90;
  }
LABEL_99:
  v46 = __ldxr(v27);
  if (v46 != 1)
  {
    __clrex();
    a2 = v51;
    goto LABEL_103;
  }
  a2 = v51;
  if (__stlxr(0, v27))
LABEL_103:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_104:
  v47 = v61;
  v61 = 0;
  if (!v47)
    goto LABEL_107;
  if (*(_DWORD *)v47 != 2)
  {
    *(_DWORD *)v47 -= 2;
    goto LABEL_107;
  }
  WTF::StringImpl::destroy(v47, v25);
  v48 = *a2;
  v49 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v49 != -1)
LABEL_108:
    ((void (*)(__int128 *, uint64_t))off_1E9D6BFB0[v49])(&buf, a1 + 56);
LABEL_109:
  *(_BYTE *)(a1 + 56) = v48;
  *(_DWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  result = WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(a1, (unsigned __int8 **)&v54);
  if (v55)
  {
    result = v54;
    v50 = __ldxr((unsigned __int8 *)v54);
    if (v50 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v54))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1D8088710(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::Lock *a13, char a14, WTF *a15, int a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26)
{
  unsigned __int8 *v26;
  int v28;
  int v29;

  v28 = __ldxr(v26);
  if (v28 == 1)
  {
    if (!__stlxr(0, v26))
    {
LABEL_8:
      if (a20)
      {
        if (*(_DWORD *)a20 == 2)
          WTF::StringImpl::destroy(a20, a2);
        else
          *(_DWORD *)a20 -= 2;
      }
      if (a14)
      {
        v29 = __ldxr((unsigned __int8 *)a13);
        if (v29 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a13))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a13);
      }
LABEL_17:
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

void sub_1D80889A0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  WTF::StringImpl *result;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 v12;
  StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v16)
  {
    v6 = *((_DWORD *)v16 + 1);
    if (v15)
    {
LABEL_3:
      v7 = *((_DWORD *)v15 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        v4 = __OFADD__(v7, 1);
        v8 = v7 + 1;
        if (!v4)
          goto LABEL_9;
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
    if (v15)
      goto LABEL_3;
  }
  v8 = 1;
  if (v4)
    goto LABEL_33;
LABEL_9:
  v4 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v4;
  if (v6 < 0)
    goto LABEL_33;
  if ((v10 & 1) != 0)
    goto LABEL_33;
  v4 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13))
    goto LABEL_33;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v17, v11 + 13, v12, (uint64_t)v16, (uint64_t)v15);
  v14 = v17;
  *a1 = v17;
  if (!v14)
    goto LABEL_34;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      result = v16;
      if (!v16)
        return result;
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  result = v16;
  if (!v16)
    return result;
LABEL_29:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D8088B24(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1D8088C34(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (!v6)
    goto LABEL_5;
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
LABEL_7:
      _Unwind_Resume(exception_object);
  }
  else
  {
LABEL_5:
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_7;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v10, a2);
  goto LABEL_7;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (!v3)
      return a1;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1D8088D2C(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BFC8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  StringImpl *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v51, "destroying ");
    result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v50, a1);
    v5 = (WTF::StringImpl *)v50;
    if (v51)
    {
      v6 = *((_DWORD *)v51 + 1);
      if (v50)
        goto LABEL_8;
    }
    else
    {
      v6 = 0;
      if (v50)
      {
LABEL_8:
        v7 = *(_DWORD *)(v50 + 4);
        if ((v7 | v6) < 0)
          goto LABEL_98;
        goto LABEL_12;
      }
    }
    v7 = 0;
    if (v6 < 0)
      goto LABEL_98;
LABEL_12:
    result = (v6 + v7);
    if (__OFADD__(v6, v7))
      goto LABEL_98;
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 4);
      v9 = (v8 >> 2) & 1;
      if (!v50 || (v8 & 4) == 0)
      {
LABEL_20:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v51, v50, &buf);
        v52 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v50 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              v11 = v51;
              v51 = 0;
              if (!v11)
                goto LABEL_29;
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                v12 = *(NSObject **)(v2 + 32);
                v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v13)
                  goto LABEL_38;
LABEL_32:
                WTF::String::utf8();
                if (v48)
                  v15 = (char *)v48 + 16;
                else
                  v15 = 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1D7FB9000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v13 = (uint64_t)v48;
                v48 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    v13 = WTF::fastFree((WTF *)v13, v14);
                    if (!*(_BYTE *)v2)
                      goto LABEL_78;
LABEL_39:
                    if (*(unsigned __int8 *)(v2 + 16) < 4u)
                      goto LABEL_78;
                    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    do
                    {
                      while (1)
                      {
                        v17 = *v16;
                        if ((v17 & 1) != 0)
                          goto LABEL_78;
                        v18 = __ldaxr(v16);
                        if (v18 == v17)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v17 | 1, v16));
                    v19 = WTF::Logger::observers((WTF::Logger *)v13);
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20)
                    {
                      v21 = *(uint64_t **)v19;
                      v22 = *(_QWORD *)v19 + 8 * v20;
                      while (1)
                      {
                        v23 = *v21;
                        LODWORD(buf) = 0;
                        WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                        v54 = 0;
                        WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v55, a1);
                        v48 = 0;
                        v49 = 0;
                        v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v49) = 2;
                        v48 = v24;
                        v25 = HIDWORD(v49);
                        *((_DWORD *)v24 + 4 * HIDWORD(v49)) = buf;
                        v26 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                        *((_DWORD *)v24 + 4 * (v25 + 1)) = v54;
                        v27 = v55[0];
                        if (v55[0])
                          *(_DWORD *)v55[0] += 2;
                        *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                        HIDWORD(v49) = v25 + 2;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, v2, 4, &v48);
                        v28 = v48;
                        if (HIDWORD(v49))
                        {
                          v29 = 16 * HIDWORD(v49);
                          v30 = (WTF::StringImpl **)((char *)v48 + 8);
                          do
                          {
                            v31 = *v30;
                            *v30 = 0;
                            if (v31)
                            {
                              if (*(_DWORD *)v31 == 2)
                                WTF::StringImpl::destroy(v31, v14);
                              else
                                *(_DWORD *)v31 -= 2;
                            }
                            v30 += 2;
                            v29 -= 16;
                          }
                          while (v29);
                          v28 = v48;
                        }
                        if (v28)
                        {
                          v48 = 0;
                          LODWORD(v49) = 0;
                          WTF::fastFree(v28, v14);
                        }
                        v32 = v55[0];
                        v55[0] = 0;
                        if (!v32)
                          goto LABEL_66;
                        if (*(_DWORD *)v32 != 2)
                          break;
                        WTF::StringImpl::destroy(v32, v14);
                        v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v33)
                        {
LABEL_69:
                          if (*(_DWORD *)v33 == 2)
                            WTF::StringImpl::destroy(v33, v14);
                          else
                            *(_DWORD *)v33 -= 2;
                        }
LABEL_48:
                        if (++v21 == (uint64_t *)v22)
                          goto LABEL_73;
                      }
                      *(_DWORD *)v32 -= 2;
LABEL_66:
                      v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v33)
                        goto LABEL_69;
                      goto LABEL_48;
                    }
LABEL_73:
                    v34 = __ldxr(v16);
                    if (v34 == 1)
                    {
                      if (!__stlxr(0, v16))
                      {
LABEL_78:
                        v35 = v52;
                        v52 = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, v14);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        goto LABEL_82;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_78;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(_BYTE *)v2)
                  goto LABEL_78;
                goto LABEL_39;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              v12 = *(NSObject **)(v2 + 32);
              v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!(_DWORD)v13)
                goto LABEL_38;
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          v11 = v51;
          v51 = 0;
          if (!v11)
            goto LABEL_29;
          goto LABEL_27;
        }
LABEL_98:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v50)
    {
      v9 = 1;
      goto LABEL_20;
    }
    v9 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_82:
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, v36);
  v38 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v38)
  {
    v39 = *(unsigned int ***)(a1 + 88);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v45 && v45 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v45, v37);
  }
  v47 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v47 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E9D6BFB0[v47])(&buf, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_1D8089320(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_8:
      v22 = a14;
      a14 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 112, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 88, v23);
      v24 = *(unsigned int *)(v18 + 80);
      if ((_DWORD)v24 != -1)
        ((void (*)(WTF **, uint64_t))off_1E9D6BFB0[v24])(&a10, v18 + 56);
      *(_DWORD *)(v18 + 80) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  _BYTE *v34;
  _BYTE *v35;
  WTF *result;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  char v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  uint64_t v52;
  StringImpl *v53;
  WTF::StringImpl **v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::Lock *v79;
  int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  WTF *v89;
  WTF *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[4];
  unsigned int *v104;
  __int128 v105;
  __int128 v106;
  WTF::Lock *v107;
  char v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  __int128 buf;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  _QWORD v119[3];

  v119[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&buf = &v116;
  *((_QWORD *)&buf + 1) = 1;
  v100 = (WTF *)&v102;
  v101 = 1;
  v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    v6 = *(unsigned int *)(a1 + 100);
    memcpy(&v102, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v100 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 96);
    LODWORD(v6) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 96) = 1;
    LODWORD(v101) = v5;
  }
  HIDWORD(v101) = v6;
  *(_QWORD *)(a1 + 96) = 1;
  v7 = *(_DWORD *)(a1 + 120);
  v8 = *(_DWORD *)(a1 + 124);
  v9 = *(_QWORD *)(a1 + 112);
  v97 = v9;
  v98 = v7;
  v99 = v8;
  *(_QWORD *)&buf = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *((_QWORD *)&buf + 1) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v101))
  {
    v11 = v100;
    v12 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *(_QWORD *)v11;
      if (*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 129));
        if (v15 != 1
          || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)))
        {
          v16 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)&buf = v14;
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          *((_QWORD *)&buf + 1) = v14;
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v116 = a1;
          v20 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E9D6BFF8;
          *(_OWORD *)(v20 + 8) = buf;
          *(_QWORD *)(v20 + 24) = a1;
          *((_QWORD *)&buf + 1) = 0;
          v116 = 0;
          v104 = (unsigned int *)v20;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v16 + 16))(v16, &v104);
          v21 = v104;
          v104 = 0;
          if (v21)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_8;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        *(_QWORD *)&buf = v14;
        WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_8;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_23:
      if (WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v104, a1);
        v24 = v104;
        (*(void (**)(__int128 *__return_ptr, unsigned int *))(*(_QWORD *)v104 + 16))(&buf, v104);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        if ((_DWORD)v116 != -1)
          ((void (*)(_QWORD *, __int128 *))off_1E9D6BFC8[v116])(v103, &buf);
        LODWORD(v116) = -1;
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        if ((_DWORD)v116 != -1)
          ((void (*)(unsigned int **, __int128 *))off_1E9D6BFC8[v116])(&v104, &buf);
      }
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_32:
        MEMORY[0x1D82A3914]();
        goto LABEL_8;
      }
      if (__stxr(1u, *a2))
        goto LABEL_32;
LABEL_8:
      v11 = (WTF *)((char *)v11 + 8);
      if (v11 == v12)
      {
        v9 = v97;
        v8 = v99;
        break;
      }
    }
  }
  if (v8)
  {
    v26 = v9 + 40 * v8;
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    v96 = v26;
    while (1)
    {
      v28 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      v104 = v28;
      v29 = *(_OWORD *)(v9 + 24);
      v105 = *(_OWORD *)(v9 + 8);
      v106 = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      v103[0] = 0;
      v103[1] = 0;
      v103[2] = "<chained promise>";
      v103[3] = 0;
      v32 = (unsigned __int8 *)(v28 + 12);
      v107 = (WTF::Lock *)(v28 + 12);
      v108 = 1;
      if (__ldaxr((unsigned __int8 *)v28 + 48))
        break;
      if (__stxr(1u, v32))
        goto LABEL_44;
LABEL_45:
      v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v32);
      v35 = v34;
      if (!*v34 || v34[16] < 4u)
        goto LABEL_144;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
      WTF::String::String((WTF::String *)&v112, " settling chained promise ");
      result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v111, (uint64_t)v28);
      if (v113)
      {
        v37 = *(_DWORD *)(v113 + 4);
        v38 = (uint64_t)v112;
        if (v112)
          goto LABEL_49;
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)v112;
        if (v112)
        {
LABEL_49:
          v39 = *(_DWORD *)(v38 + 4);
          v40 = v111;
          if (v111)
            goto LABEL_50;
          goto LABEL_54;
        }
      }
      v39 = 0;
      v40 = v111;
      if (v111)
      {
LABEL_50:
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 | v39) < 0)
          goto LABEL_180;
        goto LABEL_55;
      }
LABEL_54:
      v41 = 0;
      if (v39 < 0)
        goto LABEL_180;
LABEL_55:
      v42 = __OFADD__(v39, v41);
      v43 = v39 + v41;
      v44 = v42;
      if (v37 < 0 || (v44 & 1) != 0 || (v45 = v37 + v43, __OFADD__(v37, v43)))
      {
LABEL_180:
        __break(0xC471u);
        return result;
      }
      if (v113 && (*(_BYTE *)(v113 + 16) & 4) == 0)
      {
        v46 = 0;
        goto LABEL_71;
      }
      if (v38)
      {
        v47 = *(_DWORD *)(v38 + 16);
        v46 = (v47 >> 2) & 1;
        if (v40 && (v47 & 4) != 0)
LABEL_69:
          v46 = (*(unsigned __int8 *)(v40 + 16) >> 2) & 1;
      }
      else
      {
        if (v40)
          goto LABEL_69;
        v46 = 1;
      }
LABEL_71:
      result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v45, v46, v113, v38, v40);
      v114 = (WTF::StringImpl *)buf;
      if (!(_QWORD)buf)
        goto LABEL_180;
      v111 = 0;
      if (!v40)
        goto LABEL_75;
      if (*(_DWORD *)v40 != 2)
      {
        *(_DWORD *)v40 -= 2;
LABEL_75:
        v49 = v112;
        v112 = 0;
        if (!v49)
          goto LABEL_80;
        goto LABEL_78;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v40, v48);
      v49 = v112;
      v112 = 0;
      if (!v49)
        goto LABEL_80;
LABEL_78:
      if (*(_DWORD *)v49 != 2)
      {
        *(_DWORD *)v49 -= 2;
LABEL_80:
        v50 = (WTF::StringImpl *)v113;
        v113 = 0;
        if (!v50)
          goto LABEL_85;
        goto LABEL_83;
      }
      WTF::StringImpl::destroy(v49, v48);
      v50 = (WTF::StringImpl *)v113;
      v113 = 0;
      if (!v50)
        goto LABEL_85;
LABEL_83:
      if (*(_DWORD *)v50 != 2)
      {
        *(_DWORD *)v50 -= 2;
LABEL_85:
        v51 = *((_QWORD *)v35 + 4);
        v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v52)
          goto LABEL_94;
        goto LABEL_88;
      }
      WTF::StringImpl::destroy(v50, v48);
      v51 = *((_QWORD *)v35 + 4);
      v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)v52)
        goto LABEL_94;
LABEL_88:
      WTF::String::utf8();
      if (v109)
        v54 = v109 + 2;
      else
        v54 = 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v54;
      _os_log_impl(&dword_1D7FB9000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v52 = (uint64_t)v109;
      v109 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          v52 = WTF::fastFree((WTF *)v52, v53);
          if (!*v35)
            goto LABEL_141;
          goto LABEL_95;
        }
        --*(_DWORD *)v52;
      }
LABEL_94:
      if (!*v35)
        goto LABEL_141;
LABEL_95:
      if (v35[16] < 4u)
        goto LABEL_141;
      do
      {
        while (1)
        {
          v55 = *v27;
          if ((v55 & 1) != 0)
            goto LABEL_141;
          v56 = __ldaxr(v27);
          if (v56 == v55)
            break;
          __clrex();
        }
      }
      while (__stxr(v55 | 1, v27));
      v57 = WTF::Logger::observers((WTF::Logger *)v52);
      v58 = *(unsigned int *)(v57 + 12);
      if ((_DWORD)v58)
      {
        v59 = *(uint64_t **)v57;
        v60 = *(_QWORD *)v57 + 8 * v58;
        while (1)
        {
          v61 = *v59;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
          LODWORD(v116) = 0;
          WTF::String::String((WTF::String *)&v117, " settling chained promise ");
          v118 = 0;
          WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v119, (uint64_t)v28);
          v109 = 0;
          v110 = 0;
          v62 = WTF::fastMalloc((WTF *)0x30);
          LODWORD(v110) = 3;
          v109 = (WTF::StringImpl **)v62;
          v63 = HIDWORD(v110);
          *(_DWORD *)(v62 + 16 * HIDWORD(v110)) = buf;
          v64 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *(_QWORD *)(v62 + 16 * v63 + 8) = v64;
          *(_DWORD *)(v62 + 16 * (v63 + 1)) = v116;
          v65 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 1) + 8) = v65;
          *(_DWORD *)(v62 + 16 * (v63 + 2)) = v118;
          v66 = v119[0];
          if (v119[0])
            *(_DWORD *)v119[0] += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 2) + 8) = v66;
          HIDWORD(v110) = v63 + 3;
          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl ***))(*(_QWORD *)v61 + 16))(v61, v35, 4, &v109);
          v67 = (WTF *)v109;
          if (HIDWORD(v110))
          {
            v68 = 16 * HIDWORD(v110);
            v69 = v109 + 1;
            do
            {
              v70 = *v69;
              *v69 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, v53);
                else
                  *(_DWORD *)v70 -= 2;
              }
              v69 += 2;
              v68 -= 16;
            }
            while (v68);
            v67 = (WTF *)v109;
          }
          if (v67)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree(v67, v53);
          }
          v71 = (WTF::StringImpl *)v119[0];
          v119[0] = 0;
          if (!v71)
            goto LABEL_124;
          if (*(_DWORD *)v71 != 2)
            break;
          WTF::StringImpl::destroy(v71, v53);
          v72 = v117;
          v117 = 0;
          if (!v72)
            goto LABEL_129;
LABEL_127:
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
LABEL_129:
            v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v73)
              goto LABEL_132;
            goto LABEL_104;
          }
          WTF::StringImpl::destroy(v72, v53);
          v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v73)
          {
LABEL_132:
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v53);
            else
              *(_DWORD *)v73 -= 2;
          }
LABEL_104:
          if (++v59 == (uint64_t *)v60)
            goto LABEL_136;
        }
        *(_DWORD *)v71 -= 2;
LABEL_124:
        v72 = v117;
        v117 = 0;
        if (!v72)
          goto LABEL_129;
        goto LABEL_127;
      }
LABEL_136:
      v74 = __ldxr(v27);
      if (v74 != 1)
      {
        __clrex();
        v26 = v96;
LABEL_140:
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        goto LABEL_141;
      }
      v26 = v96;
      if (__stlxr(0, v27))
        goto LABEL_140;
LABEL_141:
      v75 = v114;
      v114 = 0;
      if (!v75)
        goto LABEL_144;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
LABEL_144:
        v76 = v28 + 14;
        v77 = v28[20];
        v78 = *(unsigned int *)(a1 + 80);
        if ((_DWORD)v77 == -1)
          goto LABEL_148;
        goto LABEL_145;
      }
      WTF::StringImpl::destroy(v75, v53);
      v76 = v28 + 14;
      v77 = v28[20];
      v78 = *(unsigned int *)(a1 + 80);
      if ((_DWORD)v77 == -1)
      {
LABEL_148:
        if ((_DWORD)v78 == -1)
          goto LABEL_150;
        goto LABEL_149;
      }
LABEL_145:
      if ((_DWORD)v78 == -1)
      {
        ((void (*)(__int128 *, unsigned int *))off_1E9D6BFB0[v77])(&buf, v76);
        v28[20] = -1;
        goto LABEL_150;
      }
LABEL_149:
      *(_QWORD *)&buf = v76;
      ((void (*)(__int128 *))off_1E9D6C010[v78])(&buf);
LABEL_150:
      WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v28, &v107);
      if (v108)
      {
        v79 = v107;
        v80 = __ldxr((unsigned __int8 *)v107);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v107))
            goto LABEL_156;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v79);
      }
LABEL_156:
      v81 = v28 + 2;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (v83)
      {
        v84 = v104;
        if (v104)
          goto LABEL_160;
      }
      else
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        v84 = v104;
        if (v104)
        {
LABEL_160:
          WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v84);
          v104 = 0;
          v85 = v84 + 2;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v84 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
          }
        }
      }
      v9 += 40;
      if (v9 == v26)
        goto LABEL_166;
    }
    __clrex();
LABEL_44:
    v32 = (unsigned __int8 *)MEMORY[0x1D82A3914]();
    goto LABEL_45;
  }
LABEL_166:
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v10);
  if (HIDWORD(v101))
  {
    v89 = v100;
    v90 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    do
    {
      v91 = *(unsigned int **)v89;
      *(_QWORD *)v89 = 0;
      if (v91)
      {
        v92 = v91 + 2;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v91 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
      }
      v89 = (WTF *)((char *)v89 + 8);
    }
    while (v89 != v90);
  }
  result = v100;
  if (&v102 != (uint64_t *)v100 && v100 != 0)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    return (WTF *)WTF::fastFree(result, v88);
  }
  return result;
}

void sub_1D8089F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  void *v33;

  v30 = *(unsigned int *)(v28 - 144);
  if ((_DWORD)v30 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BFC8[v30])(&a26, v28 - 160);
  *(_DWORD *)(v28 - 144) = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (__ldaxr(*v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v26))
  {
LABEL_8:
    WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v31);
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1D82A3914]();
  goto LABEL_8;
}

void sub_1D8089FEC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::Lock *a35,char a36)
{
  unsigned int *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v40;
  WTF::StringImpl *v41;
  WTF::Lock *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  void *v48;

  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_8:
      v41 = *(WTF::StringImpl **)(v38 - 168);
      *(_QWORD *)(v38 - 168) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (a36)
      {
        v42 = a35;
        v43 = __ldxr((unsigned __int8 *)a35);
        if (v43 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a35))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v42);
      }
LABEL_17:
      if (v36)
      {
        v44 = v36 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
      WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a30);
      WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v47);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::StringImpl *result;
  BOOL v7;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) == 2)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *v3 = v6;
    LODWORD(v6) = __ldxr(v4);
    if ((_DWORD)v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D808A3D8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _BYTE v8[2];

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 80) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 16) = -1;
  v6 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6BFD8[v6])(v8, v3, a2 + 56);
    *(_DWORD *)(v3 + 16) = v6;
  }
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1D808A4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  v16 = *(unsigned int *)(v14 + 16);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BFC8[v16])(&a13, v14);
  *(_DWORD *)(v14 + 16) = -1;
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74[3];

  v74[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v59, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a2);
  WTF::String::String((WTF::String *)&v57, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v53, "]");
  v7 = v58;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v53);
  if (!v60)
  {
    __break(0xC471u);
    return result;
  }
  v10 = v53;
  v53 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      v11 = v54;
      v54 = 0;
      if (!v11)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  v11 = v54;
  v54 = 0;
  if (!v11)
  {
LABEL_10:
    v12 = v55;
    v55 = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  v12 = v55;
  v55 = 0;
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    v13 = v56;
    v56 = 0;
    if (!v13)
      goto LABEL_20;
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  v13 = v56;
  v56 = 0;
  if (!v13)
  {
LABEL_20:
    v14 = v57;
    v57 = 0;
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  v14 = v57;
  v57 = 0;
  if (!v14)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    v58 = 0;
    if (!v7)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  v58 = 0;
  if (!v7)
  {
LABEL_30:
    v15 = v59;
    v59 = 0;
    if (!v15)
      goto LABEL_35;
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  v15 = v59;
  v59 = 0;
  if (!v15)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_44;
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_44;
LABEL_38:
  WTF::String::utf8();
  if (v51)
    v19 = (char *)v51 + 16;
  else
    v19 = 0;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v62 = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  v17 = (uint64_t)v51;
  v51 = 0;
  if (!v17)
  {
LABEL_44:
    if (!*(_BYTE *)a1)
      goto LABEL_119;
    goto LABEL_45;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*(_BYTE *)a1)
    goto LABEL_119;
LABEL_45:
  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    goto LABEL_119;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_119;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v49 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      *(_DWORD *)buf = 0;
      WTF::String::String((WTF::String *)&v62[4], "ThenCallback disconnected from ");
      v63 = 0;
      WTF::LogArgument<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(&v64, a2);
      v65 = 0;
      WTF::String::String((WTF::String *)&v66, " aborting [callback:");
      v67 = 0;
      WTF::LogArgument<void const*>::toString();
      v69 = 0;
      WTF::String::String((WTF::String *)&v70, " callSite:");
      v71 = 0;
      WTF::Logger::LogSiteIdentifier::toString(a4);
      v73 = 0;
      WTF::String::String((WTF::String *)v74, "]");
      v51 = 0;
      v52 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
      LODWORD(v52) = 7;
      v51 = v27;
      v28 = HIDWORD(v52);
      *((_DWORD *)v27 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
      v29 = *(_QWORD *)&v62[4];
      if (*(_QWORD *)&v62[4])
        **(_DWORD **)&v62[4] += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v63;
      v30 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      *((_DWORD *)v27 + 4 * (v28 + 2)) = v65;
      v31 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
      *((_DWORD *)v27 + 4 * (v28 + 3)) = v67;
      v32 = v68;
      if (v68)
        *(_DWORD *)v68 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
      *((_DWORD *)v27 + 4 * (v28 + 4)) = v69;
      v33 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
      *((_DWORD *)v27 + 4 * (v28 + 5)) = v71;
      v34 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 5) + 1) = v34;
      *((_DWORD *)v27 + 4 * (v28 + 6)) = v73;
      v35 = v74[0];
      if (v74[0])
        *(_DWORD *)v74[0] += 2;
      *((_QWORD *)v27 + 2 * (v28 + 6) + 1) = v35;
      HIDWORD(v52) = v28 + 7;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 4, &v51);
      v36 = v51;
      if (HIDWORD(v52))
      {
        v37 = a3;
        v38 = 16 * HIDWORD(v52);
        v39 = (WTF::StringImpl **)((char *)v51 + 8);
        do
        {
          v40 = *v39;
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        v36 = v51;
        a3 = v37;
      }
      if (v36)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v36, v18);
      }
      v41 = v74[0];
      v74[0] = 0;
      if (!v41)
        goto LABEL_82;
      if (*(_DWORD *)v41 != 2)
        break;
      WTF::StringImpl::destroy(v41, v18);
      v42 = v72;
      v72 = 0;
      if (!v42)
        goto LABEL_87;
LABEL_85:
      if (*(_DWORD *)v42 != 2)
      {
        *(_DWORD *)v42 -= 2;
LABEL_87:
        v43 = v70;
        v70 = 0;
        if (!v43)
          goto LABEL_92;
        goto LABEL_90;
      }
      WTF::StringImpl::destroy(v42, v18);
      v43 = v70;
      v70 = 0;
      if (!v43)
        goto LABEL_92;
LABEL_90:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_92:
        v44 = v68;
        v68 = 0;
        if (!v44)
          goto LABEL_97;
        goto LABEL_95;
      }
      WTF::StringImpl::destroy(v43, v18);
      v44 = v68;
      v68 = 0;
      if (!v44)
        goto LABEL_97;
LABEL_95:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_97:
        v45 = v66;
        v66 = 0;
        if (!v45)
          goto LABEL_102;
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v44, v18);
      v45 = v66;
      v66 = 0;
      if (!v45)
        goto LABEL_102;
LABEL_100:
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
LABEL_102:
        v46 = v64;
        v64 = 0;
        if (!v46)
          goto LABEL_107;
        goto LABEL_105;
      }
      WTF::StringImpl::destroy(v45, v18);
      v46 = v64;
      v64 = 0;
      if (!v46)
        goto LABEL_107;
LABEL_105:
      if (*(_DWORD *)v46 != 2)
      {
        *(_DWORD *)v46 -= 2;
LABEL_107:
        v47 = *(WTF::StringImpl **)&v62[4];
        *(_QWORD *)&v62[4] = 0;
        if (v47)
          goto LABEL_110;
        goto LABEL_54;
      }
      WTF::StringImpl::destroy(v46, v18);
      v47 = *(WTF::StringImpl **)&v62[4];
      *(_QWORD *)&v62[4] = 0;
      if (v47)
      {
LABEL_110:
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v18);
        else
          *(_DWORD *)v47 -= 2;
      }
LABEL_54:
      if (++v25 == (uint64_t *)v49)
        goto LABEL_114;
    }
    *(_DWORD *)v41 -= 2;
LABEL_82:
    v42 = v72;
    v72 = 0;
    if (!v42)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_114:
  v48 = __ldxr(v20);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, v20))
LABEL_118:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_119:
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D808ACF0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  unsigned __int8 *v44;
  int v46;

  v46 = __ldxr(v44);
  if (v46 == 1)
  {
    if (!__stlxr(0, v44))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_7:
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
    {
      WTF::StringImpl::destroy(a30, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a30 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E9D6BFF8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v6)
    return a1;
LABEL_6:
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v6 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;

  *(_QWORD *)this = &off_1E9D6BFF8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  v8 = v7 + 2;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    v11 = this;
    return WTF::fastFree(v11, a2);
  }
LABEL_9:
  v11 = this;
  return WTF::fastFree(v11, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  _QWORD v15[2];
  int v16;
  char v17;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v15[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v15, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_13;
  }
  MEMORY[0x1D82A3914](v2 + 48);
LABEL_13:
  v8 = *(_DWORD *)(v2 + 80);
  v9 = __ldxr(v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, v6))
    {
      v10 = *((_QWORD *)a1 + 3);
      if (v8 == 2)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
LABEL_16:
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x1D82A3914](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 80) != 2)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(v15, v13);
    (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v15);
    if (v16 != -1)
      ((void (*)(char *, _QWORD *))off_1E9D6BFC8[v16])(&v17, v15);
    v16 = -1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
LABEL_20:
  WTF::NativePromise<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)v15, v10);
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v15);
  if (v16 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E9D6BFC8[v16])(&v17, v15);
  return result;
}

void sub_1D808B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a11 != -1)
    ((void (*)(char *, uint64_t *))off_1E9D6BFC8[a11])(&a16, &a9);
  a11 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void sub_1D808B45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1D808B478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v16);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BFB0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[16];
  int v20;
  _BYTE v21[16];
  int v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v19[0] = 0;
      v20 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 == -1)
      {
        v8 = *(_DWORD *)(a2 + 16);
        if (v8 == -1)
        {
LABEL_42:
          if (v20 != -1)
            return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E9D6BFC8[v20])(v21, v19);
          return result;
        }
      }
      else
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E9D6BFD8[v7])(&v24, v19, a3);
        v20 = v7;
        v8 = *((_DWORD *)v6 + 4);
        if (v8 != -1 && (_DWORD)v7 == v8)
        {
          result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E9D6C028[v7])(v21, v19, v6);
          goto LABEL_42;
        }
        if ((_DWORD)v7 != 1)
        {
          v14 = v19;
          v21[0] = 0;
          v22 = -1;
          if (v8 == -1)
          {
LABEL_36:
            *((_DWORD *)v6 + 4) = -1;
            v16 = *((unsigned int *)v14 + 4);
            if ((_DWORD)v16 != -1)
            {
              result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6C038[v16])(&v23, v6, v14);
              *((_DWORD *)v6 + 4) = v16;
              v17 = *((unsigned int *)v14 + 4);
              if ((_DWORD)v17 != -1)
                result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BFC8[v17])(&v24, v14);
            }
            *((_DWORD *)v14 + 4) = -1;
            v18 = v22;
            if (v22 != -1)
            {
              result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6C038[v22])(&v23, v14, v21);
              *((_DWORD *)v14 + 4) = v18;
              if (v22 != -1)
                result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BFC8[v22])(&v24, v21);
            }
            goto LABEL_42;
          }
LABEL_34:
          result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6BFD8[v8])(&v23, v21, v6);
          v22 = v8;
          v15 = *((unsigned int *)v6 + 4);
          if ((_DWORD)v15 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6BFC8[v15])(&v24, v6);
          goto LABEL_36;
        }
      }
      v10 = v19;
      if (v8 == 1)
        v11 = 1;
      else
        v11 = v7;
      if (v8 == 1)
        v12 = v19;
      else
        v12 = v6;
      if (v8 == 1)
        v10 = v6;
      v13 = v8 == -1;
      if (v8 == -1)
        v8 = -1;
      else
        v8 = v11;
      if (v13)
        v14 = v19;
      else
        v14 = v12;
      if (!v13)
        v6 = v10;
      v21[0] = 0;
      v22 = -1;
      if (v8 == -1)
        goto LABEL_36;
      goto LABEL_34;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E9D6BFB0[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  v9 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6BFD8[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 16) = v9;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

void sub_1D808B7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, int a16)
{
  uint64_t v16;

  if (a16 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6BFC8[a16])(v16 - 33, &a14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6BFC8[a12])(v16 - 33, &a10);
  _Unwind_Resume(exception_object);
}

void sub_1D808B864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6BFC8[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6BFB0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorIyLm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

void sub_1D808BA70(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  WTF::StringImpl *result;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 v12;
  StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v16)
  {
    v6 = *((_DWORD *)v16 + 1);
    if (v15)
    {
LABEL_3:
      v7 = *((_DWORD *)v15 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        v4 = __OFADD__(v7, 1);
        v8 = v7 + 1;
        if (!v4)
          goto LABEL_9;
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
    if (v15)
      goto LABEL_3;
  }
  v8 = 1;
  if (v4)
    goto LABEL_33;
LABEL_9:
  v4 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v4;
  if (v6 < 0)
    goto LABEL_33;
  if ((v10 & 1) != 0)
    goto LABEL_33;
  v4 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13))
    goto LABEL_33;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v17, v11 + 13, v12, (uint64_t)v16, (uint64_t)v15);
  v14 = v17;
  *a1 = v17;
  if (!v14)
    goto LABEL_34;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      result = v16;
      if (!v16)
        return result;
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  result = v16;
  if (!v16)
    return result;
LABEL_29:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D808BBF4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1D808BD04(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (!v6)
    goto LABEL_5;
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
LABEL_7:
      _Unwind_Resume(exception_object);
  }
  else
  {
LABEL_5:
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_7;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v10, a2);
  goto LABEL_7;
}

uint64_t *WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (!v3)
      return a1;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1D808BDFC(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  StringImpl *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v51, "destroying ");
    result = (unint64_t)WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v50, a1);
    v5 = (WTF::StringImpl *)v50;
    if (v51)
    {
      v6 = *((_DWORD *)v51 + 1);
      if (v50)
        goto LABEL_8;
    }
    else
    {
      v6 = 0;
      if (v50)
      {
LABEL_8:
        v7 = *(_DWORD *)(v50 + 4);
        if ((v7 | v6) < 0)
          goto LABEL_98;
        goto LABEL_12;
      }
    }
    v7 = 0;
    if (v6 < 0)
      goto LABEL_98;
LABEL_12:
    result = (v6 + v7);
    if (__OFADD__(v6, v7))
      goto LABEL_98;
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 4);
      v9 = (v8 >> 2) & 1;
      if (!v50 || (v8 & 4) == 0)
      {
LABEL_20:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v51, v50, &buf);
        v52 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v50 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              v11 = v51;
              v51 = 0;
              if (!v11)
                goto LABEL_29;
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                v12 = *(NSObject **)(v2 + 32);
                v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v13)
                  goto LABEL_38;
LABEL_32:
                WTF::String::utf8();
                if (v48)
                  v15 = (char *)v48 + 16;
                else
                  v15 = 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1D7FB9000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v13 = (uint64_t)v48;
                v48 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    v13 = WTF::fastFree((WTF *)v13, v14);
                    if (!*(_BYTE *)v2)
                      goto LABEL_78;
LABEL_39:
                    if (*(unsigned __int8 *)(v2 + 16) < 4u)
                      goto LABEL_78;
                    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    do
                    {
                      while (1)
                      {
                        v17 = *v16;
                        if ((v17 & 1) != 0)
                          goto LABEL_78;
                        v18 = __ldaxr(v16);
                        if (v18 == v17)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v17 | 1, v16));
                    v19 = WTF::Logger::observers((WTF::Logger *)v13);
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20)
                    {
                      v21 = *(uint64_t **)v19;
                      v22 = *(_QWORD *)v19 + 8 * v20;
                      while (1)
                      {
                        v23 = *v21;
                        LODWORD(buf) = 0;
                        WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                        v54 = 0;
                        WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(v55, a1);
                        v48 = 0;
                        v49 = 0;
                        v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v49) = 2;
                        v48 = v24;
                        v25 = HIDWORD(v49);
                        *((_DWORD *)v24 + 4 * HIDWORD(v49)) = buf;
                        v26 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                        *((_DWORD *)v24 + 4 * (v25 + 1)) = v54;
                        v27 = v55[0];
                        if (v55[0])
                          *(_DWORD *)v55[0] += 2;
                        *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                        HIDWORD(v49) = v25 + 2;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, v2, 4, &v48);
                        v28 = v48;
                        if (HIDWORD(v49))
                        {
                          v29 = 16 * HIDWORD(v49);
                          v30 = (WTF::StringImpl **)((char *)v48 + 8);
                          do
                          {
                            v31 = *v30;
                            *v30 = 0;
                            if (v31)
                            {
                              if (*(_DWORD *)v31 == 2)
                                WTF::StringImpl::destroy(v31, v14);
                              else
                                *(_DWORD *)v31 -= 2;
                            }
                            v30 += 2;
                            v29 -= 16;
                          }
                          while (v29);
                          v28 = v48;
                        }
                        if (v28)
                        {
                          v48 = 0;
                          LODWORD(v49) = 0;
                          WTF::fastFree(v28, v14);
                        }
                        v32 = v55[0];
                        v55[0] = 0;
                        if (!v32)
                          goto LABEL_66;
                        if (*(_DWORD *)v32 != 2)
                          break;
                        WTF::StringImpl::destroy(v32, v14);
                        v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v33)
                        {
LABEL_69:
                          if (*(_DWORD *)v33 == 2)
                            WTF::StringImpl::destroy(v33, v14);
                          else
                            *(_DWORD *)v33 -= 2;
                        }
LABEL_48:
                        if (++v21 == (uint64_t *)v22)
                          goto LABEL_73;
                      }
                      *(_DWORD *)v32 -= 2;
LABEL_66:
                      v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v33)
                        goto LABEL_69;
                      goto LABEL_48;
                    }
LABEL_73:
                    v34 = __ldxr(v16);
                    if (v34 == 1)
                    {
                      if (!__stlxr(0, v16))
                      {
LABEL_78:
                        v35 = v52;
                        v52 = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, v14);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        goto LABEL_82;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_78;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(_BYTE *)v2)
                  goto LABEL_78;
                goto LABEL_39;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              v12 = *(NSObject **)(v2 + 32);
              v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!(_DWORD)v13)
                goto LABEL_38;
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          v11 = v51;
          v51 = 0;
          if (!v11)
            goto LABEL_29;
          goto LABEL_27;
        }
LABEL_98:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v50)
    {
      v9 = 1;
      goto LABEL_20;
    }
    v9 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_82:
  WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v36);
  v38 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v38)
  {
    v39 = *(unsigned int ***)(a1 + 72);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 72);
  if ((WTF *)(a1 + 88) != v45 && v45 != 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v45, v37);
  }
  v47 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v47 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E9D6C070[v47])(&buf, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

void sub_1D808C388(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_8:
      v22 = a14;
      a14 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 96, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 72, v23);
      v24 = *(unsigned int *)(v18 + 64);
      if ((_DWORD)v24 != -1)
        ((void (*)(WTF **, uint64_t))off_1E9D6C070[v24])(&a10, v18 + 56);
      *(_DWORD *)(v18 + 64) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  _BYTE *v34;
  _BYTE *v35;
  WTF *result;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  char v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  uint64_t v52;
  StringImpl *v53;
  WTF::StringImpl **v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::Lock *v79;
  int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  WTF *v89;
  WTF *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[4];
  unsigned int *v104;
  __int128 v105;
  __int128 v106;
  WTF::Lock *v107;
  char v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  __int128 buf;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  _QWORD v119[3];

  v119[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&buf = &v116;
  *((_QWORD *)&buf + 1) = 1;
  v100 = (WTF *)&v102;
  v101 = 1;
  v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v102, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v100 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v101) = v5;
  }
  HIDWORD(v101) = v6;
  *(_QWORD *)(a1 + 80) = 1;
  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 108);
  v9 = *(_QWORD *)(a1 + 96);
  v97 = v9;
  v98 = v7;
  v99 = v8;
  *(_QWORD *)&buf = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *((_QWORD *)&buf + 1) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v101))
  {
    v11 = v100;
    v12 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *(_QWORD *)v11;
      if (*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 113));
        if (v15 != 1
          || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)))
        {
          v16 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)&buf = v14;
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          *((_QWORD *)&buf + 1) = v14;
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v116 = a1;
          v20 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E9D6C098;
          *(_OWORD *)(v20 + 8) = buf;
          *(_QWORD *)(v20 + 24) = a1;
          *((_QWORD *)&buf + 1) = 0;
          v116 = 0;
          v104 = (unsigned int *)v20;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v16 + 16))(v16, &v104);
          v21 = v104;
          v104 = 0;
          if (v21)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_8;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        *(_QWORD *)&buf = v14;
        WTF::NativePromiseBase::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_8;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_23:
      if (WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&buf, a1);
        v24 = buf;
        (*(void (**)(unsigned int **__return_ptr, _QWORD))(*(_QWORD *)buf + 16))(&v104, buf);
        (*(void (**)(uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v14 + 24))(v14, a1, &v104);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
      }
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_29:
        MEMORY[0x1D82A3914]();
        goto LABEL_8;
      }
      if (__stxr(1u, *a2))
        goto LABEL_29;
LABEL_8:
      v11 = (WTF *)((char *)v11 + 8);
      if (v11 == v12)
      {
        v9 = v97;
        v8 = v99;
        break;
      }
    }
  }
  if (v8)
  {
    v26 = v9 + 40 * v8;
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    v96 = v26;
    while (1)
    {
      v28 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      v104 = v28;
      v29 = *(_OWORD *)(v9 + 24);
      v105 = *(_OWORD *)(v9 + 8);
      v106 = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      v103[0] = 0;
      v103[1] = 0;
      v103[2] = "<chained promise>";
      v103[3] = 0;
      v32 = (unsigned __int8 *)(v28 + 12);
      v107 = (WTF::Lock *)(v28 + 12);
      v108 = 1;
      if (__ldaxr((unsigned __int8 *)v28 + 48))
        break;
      if (__stxr(1u, v32))
        goto LABEL_41;
LABEL_42:
      v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v32);
      v35 = v34;
      if (!*v34 || v34[16] < 4u)
        goto LABEL_141;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
      WTF::String::String((WTF::String *)&v112, " settling chained promise ");
      result = WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v111, (uint64_t)v28);
      if (v113)
      {
        v37 = *(_DWORD *)(v113 + 4);
        v38 = (uint64_t)v112;
        if (v112)
          goto LABEL_46;
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)v112;
        if (v112)
        {
LABEL_46:
          v39 = *(_DWORD *)(v38 + 4);
          v40 = v111;
          if (v111)
            goto LABEL_47;
          goto LABEL_51;
        }
      }
      v39 = 0;
      v40 = v111;
      if (v111)
      {
LABEL_47:
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 | v39) < 0)
          goto LABEL_177;
        goto LABEL_52;
      }
LABEL_51:
      v41 = 0;
      if (v39 < 0)
        goto LABEL_177;
LABEL_52:
      v42 = __OFADD__(v39, v41);
      v43 = v39 + v41;
      v44 = v42;
      if (v37 < 0 || (v44 & 1) != 0 || (v45 = v37 + v43, __OFADD__(v37, v43)))
      {
LABEL_177:
        __break(0xC471u);
        return result;
      }
      if (v113 && (*(_BYTE *)(v113 + 16) & 4) == 0)
      {
        v46 = 0;
        goto LABEL_68;
      }
      if (v38)
      {
        v47 = *(_DWORD *)(v38 + 16);
        v46 = (v47 >> 2) & 1;
        if (v40 && (v47 & 4) != 0)
LABEL_66:
          v46 = (*(unsigned __int8 *)(v40 + 16) >> 2) & 1;
      }
      else
      {
        if (v40)
          goto LABEL_66;
        v46 = 1;
      }
LABEL_68:
      result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v45, v46, v113, v38, v40);
      v114 = (WTF::StringImpl *)buf;
      if (!(_QWORD)buf)
        goto LABEL_177;
      v111 = 0;
      if (!v40)
        goto LABEL_72;
      if (*(_DWORD *)v40 != 2)
      {
        *(_DWORD *)v40 -= 2;
LABEL_72:
        v49 = v112;
        v112 = 0;
        if (!v49)
          goto LABEL_77;
        goto LABEL_75;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v40, v48);
      v49 = v112;
      v112 = 0;
      if (!v49)
        goto LABEL_77;
LABEL_75:
      if (*(_DWORD *)v49 != 2)
      {
        *(_DWORD *)v49 -= 2;
LABEL_77:
        v50 = (WTF::StringImpl *)v113;
        v113 = 0;
        if (!v50)
          goto LABEL_82;
        goto LABEL_80;
      }
      WTF::StringImpl::destroy(v49, v48);
      v50 = (WTF::StringImpl *)v113;
      v113 = 0;
      if (!v50)
        goto LABEL_82;
LABEL_80:
      if (*(_DWORD *)v50 != 2)
      {
        *(_DWORD *)v50 -= 2;
LABEL_82:
        v51 = *((_QWORD *)v35 + 4);
        v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v52)
          goto LABEL_91;
        goto LABEL_85;
      }
      WTF::StringImpl::destroy(v50, v48);
      v51 = *((_QWORD *)v35 + 4);
      v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)v52)
        goto LABEL_91;
LABEL_85:
      WTF::String::utf8();
      if (v109)
        v54 = v109 + 2;
      else
        v54 = 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v54;
      _os_log_impl(&dword_1D7FB9000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v52 = (uint64_t)v109;
      v109 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          v52 = WTF::fastFree((WTF *)v52, v53);
          if (!*v35)
            goto LABEL_138;
          goto LABEL_92;
        }
        --*(_DWORD *)v52;
      }
LABEL_91:
      if (!*v35)
        goto LABEL_138;
LABEL_92:
      if (v35[16] < 4u)
        goto LABEL_138;
      do
      {
        while (1)
        {
          v55 = *v27;
          if ((v55 & 1) != 0)
            goto LABEL_138;
          v56 = __ldaxr(v27);
          if (v56 == v55)
            break;
          __clrex();
        }
      }
      while (__stxr(v55 | 1, v27));
      v57 = WTF::Logger::observers((WTF::Logger *)v52);
      v58 = *(unsigned int *)(v57 + 12);
      if ((_DWORD)v58)
      {
        v59 = *(uint64_t **)v57;
        v60 = *(_QWORD *)v57 + 8 * v58;
        while (1)
        {
          v61 = *v59;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
          LODWORD(v116) = 0;
          WTF::String::String((WTF::String *)&v117, " settling chained promise ");
          v118 = 0;
          WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(v119, (uint64_t)v28);
          v109 = 0;
          v110 = 0;
          v62 = WTF::fastMalloc((WTF *)0x30);
          LODWORD(v110) = 3;
          v109 = (WTF::StringImpl **)v62;
          v63 = HIDWORD(v110);
          *(_DWORD *)(v62 + 16 * HIDWORD(v110)) = buf;
          v64 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *(_QWORD *)(v62 + 16 * v63 + 8) = v64;
          *(_DWORD *)(v62 + 16 * (v63 + 1)) = v116;
          v65 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 1) + 8) = v65;
          *(_DWORD *)(v62 + 16 * (v63 + 2)) = v118;
          v66 = v119[0];
          if (v119[0])
            *(_DWORD *)v119[0] += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 2) + 8) = v66;
          HIDWORD(v110) = v63 + 3;
          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl ***))(*(_QWORD *)v61 + 16))(v61, v35, 4, &v109);
          v67 = (WTF *)v109;
          if (HIDWORD(v110))
          {
            v68 = 16 * HIDWORD(v110);
            v69 = v109 + 1;
            do
            {
              v70 = *v69;
              *v69 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, v53);
                else
                  *(_DWORD *)v70 -= 2;
              }
              v69 += 2;
              v68 -= 16;
            }
            while (v68);
            v67 = (WTF *)v109;
          }
          if (v67)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree(v67, v53);
          }
          v71 = (WTF::StringImpl *)v119[0];
          v119[0] = 0;
          if (!v71)
            goto LABEL_121;
          if (*(_DWORD *)v71 != 2)
            break;
          WTF::StringImpl::destroy(v71, v53);
          v72 = v117;
          v117 = 0;
          if (!v72)
            goto LABEL_126;
LABEL_124:
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
LABEL_126:
            v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v73)
              goto LABEL_129;
            goto LABEL_101;
          }
          WTF::StringImpl::destroy(v72, v53);
          v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v73)
          {
LABEL_129:
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v53);
            else
              *(_DWORD *)v73 -= 2;
          }
LABEL_101:
          if (++v59 == (uint64_t *)v60)
            goto LABEL_133;
        }
        *(_DWORD *)v71 -= 2;
LABEL_121:
        v72 = v117;
        v117 = 0;
        if (!v72)
          goto LABEL_126;
        goto LABEL_124;
      }
LABEL_133:
      v74 = __ldxr(v27);
      if (v74 != 1)
      {
        __clrex();
        v26 = v96;
LABEL_137:
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        goto LABEL_138;
      }
      v26 = v96;
      if (__stlxr(0, v27))
        goto LABEL_137;
LABEL_138:
      v75 = v114;
      v114 = 0;
      if (!v75)
        goto LABEL_141;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
LABEL_141:
        v76 = v28 + 14;
        v77 = v28[16];
        v78 = *(unsigned int *)(a1 + 64);
        if ((_DWORD)v77 == -1)
          goto LABEL_145;
        goto LABEL_142;
      }
      WTF::StringImpl::destroy(v75, v53);
      v76 = v28 + 14;
      v77 = v28[16];
      v78 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v77 == -1)
      {
LABEL_145:
        if ((_DWORD)v78 == -1)
          goto LABEL_147;
        goto LABEL_146;
      }
LABEL_142:
      if ((_DWORD)v78 == -1)
      {
        ((void (*)(__int128 *, unsigned int *))off_1E9D6C070[v77])(&buf, v76);
        v28[16] = -1;
        goto LABEL_147;
      }
LABEL_146:
      *(_QWORD *)&buf = v76;
      ((void (*)(__int128 *))off_1E9D6C0B0[v78])(&buf);
LABEL_147:
      WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v28, &v107);
      if (v108)
      {
        v79 = v107;
        v80 = __ldxr((unsigned __int8 *)v107);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v107))
            goto LABEL_153;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v79);
      }
LABEL_153:
      v81 = v28 + 2;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (v83)
      {
        v84 = v104;
        if (v104)
          goto LABEL_157;
      }
      else
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        v84 = v104;
        if (v104)
        {
LABEL_157:
          WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v84);
          v104 = 0;
          v85 = v84 + 2;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v84 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
          }
        }
      }
      v9 += 40;
      if (v9 == v26)
        goto LABEL_163;
    }
    __clrex();
LABEL_41:
    v32 = (unsigned __int8 *)MEMORY[0x1D82A3914]();
    goto LABEL_42;
  }
LABEL_163:
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v10);
  if (HIDWORD(v101))
  {
    v89 = v100;
    v90 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    do
    {
      v91 = *(unsigned int **)v89;
      *(_QWORD *)v89 = 0;
      if (v91)
      {
        v92 = v91 + 2;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v91 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
      }
      v89 = (WTF *)((char *)v89 + 8);
    }
    while (v89 != v90);
  }
  result = v100;
  if (&v102 != (uint64_t *)v100 && v100 != 0)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    return (WTF *)WTF::fastFree(result, v88);
  }
  return result;
}

void sub_1D808CF44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  unsigned __int8 **v14;
  void *v17;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (__ldaxr(*v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v14))
  {
LABEL_6:
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1D82A3914]();
  goto LABEL_6;
}

void sub_1D808CFA4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::Lock *a35,char a36)
{
  unsigned int *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v40;
  WTF::StringImpl *v41;
  WTF::Lock *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  void *v48;

  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_8:
      v41 = *(WTF::StringImpl **)(v38 - 168);
      *(_QWORD *)(v38 - 168) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (a36)
      {
        v42 = a35;
        v43 = __ldxr((unsigned __int8 *)a35);
        if (v43 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a35))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v42);
      }
LABEL_17:
      if (v36)
      {
        v44 = v36 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
      WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a30);
      WTF::Vector<WTF::NativePromiseProducer<void,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v47);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::StringImpl *result;
  BOOL v7;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) == 2)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *v3 = v6;
    LODWORD(v6) = __ldxr(v4);
    if ((_DWORD)v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D808D390(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  _WORD *v3;
  unsigned __int8 *v4;
  int v6;

  v3 = (_WORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 64) == 1)
  {
    *v3 = *(_WORD *)(a2 + 56);
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D808D46C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74[3];

  v74[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v59, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a2);
  WTF::String::String((WTF::String *)&v57, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v53, "]");
  v7 = v58;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v53);
  if (!v60)
  {
    __break(0xC471u);
    return result;
  }
  v10 = v53;
  v53 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      v11 = v54;
      v54 = 0;
      if (!v11)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  v11 = v54;
  v54 = 0;
  if (!v11)
  {
LABEL_10:
    v12 = v55;
    v55 = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  v12 = v55;
  v55 = 0;
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    v13 = v56;
    v56 = 0;
    if (!v13)
      goto LABEL_20;
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  v13 = v56;
  v56 = 0;
  if (!v13)
  {
LABEL_20:
    v14 = v57;
    v57 = 0;
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  v14 = v57;
  v57 = 0;
  if (!v14)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    v58 = 0;
    if (!v7)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  v58 = 0;
  if (!v7)
  {
LABEL_30:
    v15 = v59;
    v59 = 0;
    if (!v15)
      goto LABEL_35;
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  v15 = v59;
  v59 = 0;
  if (!v15)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_44;
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_44;
LABEL_38:
  WTF::String::utf8();
  if (v51)
    v19 = (char *)v51 + 16;
  else
    v19 = 0;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v62 = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  v17 = (uint64_t)v51;
  v51 = 0;
  if (!v17)
  {
LABEL_44:
    if (!*(_BYTE *)a1)
      goto LABEL_119;
    goto LABEL_45;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*(_BYTE *)a1)
    goto LABEL_119;
LABEL_45:
  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    goto LABEL_119;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_119;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v49 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      *(_DWORD *)buf = 0;
      WTF::String::String((WTF::String *)&v62[4], "ThenCallback disconnected from ");
      v63 = 0;
      WTF::LogArgument<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>>::toString(&v64, a2);
      v65 = 0;
      WTF::String::String((WTF::String *)&v66, " aborting [callback:");
      v67 = 0;
      WTF::LogArgument<void const*>::toString();
      v69 = 0;
      WTF::String::String((WTF::String *)&v70, " callSite:");
      v71 = 0;
      WTF::Logger::LogSiteIdentifier::toString(a4);
      v73 = 0;
      WTF::String::String((WTF::String *)v74, "]");
      v51 = 0;
      v52 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
      LODWORD(v52) = 7;
      v51 = v27;
      v28 = HIDWORD(v52);
      *((_DWORD *)v27 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
      v29 = *(_QWORD *)&v62[4];
      if (*(_QWORD *)&v62[4])
        **(_DWORD **)&v62[4] += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v63;
      v30 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      *((_DWORD *)v27 + 4 * (v28 + 2)) = v65;
      v31 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
      *((_DWORD *)v27 + 4 * (v28 + 3)) = v67;
      v32 = v68;
      if (v68)
        *(_DWORD *)v68 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
      *((_DWORD *)v27 + 4 * (v28 + 4)) = v69;
      v33 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
      *((_DWORD *)v27 + 4 * (v28 + 5)) = v71;
      v34 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 5) + 1) = v34;
      *((_DWORD *)v27 + 4 * (v28 + 6)) = v73;
      v35 = v74[0];
      if (v74[0])
        *(_DWORD *)v74[0] += 2;
      *((_QWORD *)v27 + 2 * (v28 + 6) + 1) = v35;
      HIDWORD(v52) = v28 + 7;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 4, &v51);
      v36 = v51;
      if (HIDWORD(v52))
      {
        v37 = a3;
        v38 = 16 * HIDWORD(v52);
        v39 = (WTF::StringImpl **)((char *)v51 + 8);
        do
        {
          v40 = *v39;
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        v36 = v51;
        a3 = v37;
      }
      if (v36)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v36, v18);
      }
      v41 = v74[0];
      v74[0] = 0;
      if (!v41)
        goto LABEL_82;
      if (*(_DWORD *)v41 != 2)
        break;
      WTF::StringImpl::destroy(v41, v18);
      v42 = v72;
      v72 = 0;
      if (!v42)
        goto LABEL_87;
LABEL_85:
      if (*(_DWORD *)v42 != 2)
      {
        *(_DWORD *)v42 -= 2;
LABEL_87:
        v43 = v70;
        v70 = 0;
        if (!v43)
          goto LABEL_92;
        goto LABEL_90;
      }
      WTF::StringImpl::destroy(v42, v18);
      v43 = v70;
      v70 = 0;
      if (!v43)
        goto LABEL_92;
LABEL_90:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_92:
        v44 = v68;
        v68 = 0;
        if (!v44)
          goto LABEL_97;
        goto LABEL_95;
      }
      WTF::StringImpl::destroy(v43, v18);
      v44 = v68;
      v68 = 0;
      if (!v44)
        goto LABEL_97;
LABEL_95:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_97:
        v45 = v66;
        v66 = 0;
        if (!v45)
          goto LABEL_102;
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v44, v18);
      v45 = v66;
      v66 = 0;
      if (!v45)
        goto LABEL_102;
LABEL_100:
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
LABEL_102:
        v46 = v64;
        v64 = 0;
        if (!v46)
          goto LABEL_107;
        goto LABEL_105;
      }
      WTF::StringImpl::destroy(v45, v18);
      v46 = v64;
      v64 = 0;
      if (!v46)
        goto LABEL_107;
LABEL_105:
      if (*(_DWORD *)v46 != 2)
      {
        *(_DWORD *)v46 -= 2;
LABEL_107:
        v47 = *(WTF::StringImpl **)&v62[4];
        *(_QWORD *)&v62[4] = 0;
        if (v47)
          goto LABEL_110;
        goto LABEL_54;
      }
      WTF::StringImpl::destroy(v46, v18);
      v47 = *(WTF::StringImpl **)&v62[4];
      *(_QWORD *)&v62[4] = 0;
      if (v47)
      {
LABEL_110:
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v18);
        else
          *(_DWORD *)v47 -= 2;
      }
LABEL_54:
      if (++v25 == (uint64_t *)v49)
        goto LABEL_114;
    }
    *(_DWORD *)v41 -= 2;
LABEL_82:
    v42 = v72;
    v72 = 0;
    if (!v42)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_114:
  v48 = __ldxr(v20);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, v20))
LABEL_118:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_119:
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D808DC48(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  unsigned __int8 *v44;
  int v46;

  v46 = __ldxr(v44);
  if (v46 == 1)
  {
    if (!__stlxr(0, v44))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_7:
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
    {
      WTF::StringImpl::destroy(a30, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a30 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E9D6C098;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v6)
    return a1;
LABEL_6:
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v6 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;

  *(_QWORD *)this = &off_1E9D6C098;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  v8 = v7 + 2;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    v11 = this;
    return WTF::fastFree(v11, a2);
  }
LABEL_9:
  v11 = this;
  return WTF::fastFree(v11, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  int v17;
  __int16 v18;
  _BYTE v19[2];
  uint64_t v20;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (!v1[56])
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x1D82A3914](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 64);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
        v10 = *((_QWORD *)a1 + 3);
        if (v8 == 2)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    v10 = *((_QWORD *)a1 + 3);
    if (v8 == 2)
    {
LABEL_15:
      v11 = (unsigned __int8 *)(v10 + 48);
      if (__ldaxr((unsigned __int8 *)(v10 + 48)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_23;
      }
      MEMORY[0x1D82A3914](v10 + 48);
LABEL_23:
      if (*(_DWORD *)(v10 + 64) == 2)
      {
        v15 = *(_QWORD *)(v10 + 56);
        *(_QWORD *)(v10 + 56) = 0;
        v16 = __ldxr(v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, v11))
            goto LABEL_29;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_29:
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v19, v15);
        (*(void (**)(_BYTE *, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
LABEL_39:
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
LABEL_19:
    v13 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_32;
    }
    MEMORY[0x1D82A3914](v10 + 48);
LABEL_32:
    if (*(_DWORD *)(v10 + 64) != 1)
      goto LABEL_39;
    v18 = *(_WORD *)(v10 + 56);
    v17 = __ldxr(v13);
    if (v17 == 1)
    {
      if (!__stlxr(0, v13))
        return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, __int16 *))(*(_QWORD *)v1 + 24))(v1, v10, &v18);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
    return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, __int16 *))(*(_QWORD *)v1 + 24))(v1, v10, &v18);
  }
  v20 = *((_QWORD *)a1 + 1);
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v20, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  return result;
}

void sub_1D808E330(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_1D808E364(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6C070[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, _BYTE *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6C070[v5])(&v8, v4);
LABEL_8:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (unsigned __int16)*a3;
  v7 = *a3;
  if (v6 > 0xFF != (a2[1] != 0))
  {
    if (v6 < 0x100)
    {
      if (a2[1])
        a2[1] = 0;
    }
    else
    {
      *a2 = v7;
      a2[1] = 1;
    }
  }
  else if (v6 >= 0x100)
  {
    *a2 = v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6C070[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 116);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 104);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (__stlxr(0, v2))
      return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  else
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return result;
}

void sub_1D808E618(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  WTF::StringImpl *result;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 v12;
  StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v16)
  {
    v6 = *((_DWORD *)v16 + 1);
    if (v15)
    {
LABEL_3:
      v7 = *((_DWORD *)v15 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        v4 = __OFADD__(v7, 1);
        v8 = v7 + 1;
        if (!v4)
          goto LABEL_9;
      }
LABEL_33:
      *a1 = 0;
LABEL_34:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
    if (v15)
      goto LABEL_3;
  }
  v8 = 1;
  if (v4)
    goto LABEL_33;
LABEL_9:
  v4 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v4;
  if (v6 < 0)
    goto LABEL_33;
  if ((v10 & 1) != 0)
    goto LABEL_33;
  v4 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v4 || __OFADD__(v11, 13))
    goto LABEL_33;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v17, v11 + 13, v12, (uint64_t)v16, (uint64_t)v15);
  v14 = v17;
  *a1 = v17;
  if (!v14)
    goto LABEL_34;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      result = v16;
      if (!v16)
        return result;
      goto LABEL_29;
    }
    *(_DWORD *)v15 -= 2;
  }
  result = v16;
  if (!v16)
    return result;
LABEL_29:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D808E79C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1D808E8AC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (!v6)
    goto LABEL_5;
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
LABEL_7:
      _Unwind_Resume(exception_object);
  }
  else
  {
LABEL_5:
    v10 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_7;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v10, a2);
  goto LABEL_7;
}

uint64_t *WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (!v3)
      return a1;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else
  {
    *a1 = 0;
    return a1;
  }
}

void sub_1D808E9A4(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6C108[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SC_EEEEEEDcSG_DpT0_(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromise(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  StringImpl *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v51, "destroying ");
    result = (unint64_t)WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v50, a1);
    v5 = (WTF::StringImpl *)v50;
    if (v51)
    {
      v6 = *((_DWORD *)v51 + 1);
      if (v50)
        goto LABEL_8;
    }
    else
    {
      v6 = 0;
      if (v50)
      {
LABEL_8:
        v7 = *(_DWORD *)(v50 + 4);
        if ((v7 | v6) < 0)
          goto LABEL_98;
        goto LABEL_12;
      }
    }
    v7 = 0;
    if (v6 < 0)
      goto LABEL_98;
LABEL_12:
    result = (v6 + v7);
    if (__OFADD__(v6, v7))
      goto LABEL_98;
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 4);
      v9 = (v8 >> 2) & 1;
      if (!v50 || (v8 & 4) == 0)
      {
LABEL_20:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v51, v50, &buf);
        v52 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v50 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
            {
              WTF::StringImpl::destroy(v5, v10);
              v11 = v51;
              v51 = 0;
              if (!v11)
                goto LABEL_29;
LABEL_27:
              if (*(_DWORD *)v11 == 2)
              {
                WTF::StringImpl::destroy(v11, v10);
                v12 = *(NSObject **)(v2 + 32);
                v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v13)
                  goto LABEL_38;
LABEL_32:
                WTF::String::utf8();
                if (v48)
                  v15 = (char *)v48 + 16;
                else
                  v15 = 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v15;
                _os_log_impl(&dword_1D7FB9000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v13 = (uint64_t)v48;
                v48 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 1)
                  {
                    v13 = WTF::fastFree((WTF *)v13, v14);
                    if (!*(_BYTE *)v2)
                      goto LABEL_78;
LABEL_39:
                    if (*(unsigned __int8 *)(v2 + 16) < 4u)
                      goto LABEL_78;
                    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    do
                    {
                      while (1)
                      {
                        v17 = *v16;
                        if ((v17 & 1) != 0)
                          goto LABEL_78;
                        v18 = __ldaxr(v16);
                        if (v18 == v17)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v17 | 1, v16));
                    v19 = WTF::Logger::observers((WTF::Logger *)v13);
                    v20 = *(unsigned int *)(v19 + 12);
                    if ((_DWORD)v20)
                    {
                      v21 = *(uint64_t **)v19;
                      v22 = *(_QWORD *)v19 + 8 * v20;
                      while (1)
                      {
                        v23 = *v21;
                        LODWORD(buf) = 0;
                        WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                        v54 = 0;
                        WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(v55, a1);
                        v48 = 0;
                        v49 = 0;
                        v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                        LODWORD(v49) = 2;
                        v48 = v24;
                        v25 = HIDWORD(v49);
                        *((_DWORD *)v24 + 4 * HIDWORD(v49)) = buf;
                        v26 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                        *((_DWORD *)v24 + 4 * (v25 + 1)) = v54;
                        v27 = v55[0];
                        if (v55[0])
                          *(_DWORD *)v55[0] += 2;
                        *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                        HIDWORD(v49) = v25 + 2;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, v2, 4, &v48);
                        v28 = v48;
                        if (HIDWORD(v49))
                        {
                          v29 = 16 * HIDWORD(v49);
                          v30 = (WTF::StringImpl **)((char *)v48 + 8);
                          do
                          {
                            v31 = *v30;
                            *v30 = 0;
                            if (v31)
                            {
                              if (*(_DWORD *)v31 == 2)
                                WTF::StringImpl::destroy(v31, v14);
                              else
                                *(_DWORD *)v31 -= 2;
                            }
                            v30 += 2;
                            v29 -= 16;
                          }
                          while (v29);
                          v28 = v48;
                        }
                        if (v28)
                        {
                          v48 = 0;
                          LODWORD(v49) = 0;
                          WTF::fastFree(v28, v14);
                        }
                        v32 = v55[0];
                        v55[0] = 0;
                        if (!v32)
                          goto LABEL_66;
                        if (*(_DWORD *)v32 != 2)
                          break;
                        WTF::StringImpl::destroy(v32, v14);
                        v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v33)
                        {
LABEL_69:
                          if (*(_DWORD *)v33 == 2)
                            WTF::StringImpl::destroy(v33, v14);
                          else
                            *(_DWORD *)v33 -= 2;
                        }
LABEL_48:
                        if (++v21 == (uint64_t *)v22)
                          goto LABEL_73;
                      }
                      *(_DWORD *)v32 -= 2;
LABEL_66:
                      v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v33)
                        goto LABEL_69;
                      goto LABEL_48;
                    }
LABEL_73:
                    v34 = __ldxr(v16);
                    if (v34 == 1)
                    {
                      if (!__stlxr(0, v16))
                      {
LABEL_78:
                        v35 = v52;
                        v52 = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, v14);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        goto LABEL_82;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_78;
                  }
                  --*(_DWORD *)v13;
                }
LABEL_38:
                if (!*(_BYTE *)v2)
                  goto LABEL_78;
                goto LABEL_39;
              }
              *(_DWORD *)v11 -= 2;
LABEL_29:
              v12 = *(NSObject **)(v2 + 32);
              v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
              if (!(_DWORD)v13)
                goto LABEL_38;
              goto LABEL_32;
            }
            *(_DWORD *)v5 -= 2;
          }
          v11 = v51;
          v51 = 0;
          if (!v11)
            goto LABEL_29;
          goto LABEL_27;
        }
LABEL_98:
        __break(0xC471u);
        return result;
      }
    }
    else if (!v50)
    {
      v9 = 1;
      goto LABEL_20;
    }
    v9 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
    goto LABEL_20;
  }
LABEL_82:
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 104, v36);
  v38 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v38)
  {
    v39 = *(unsigned int ***)(a1 + 80);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 80);
  if ((WTF *)(a1 + 96) != v45 && v45 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v45, v37);
  }
  v47 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v47 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E9D6C0F0[v47])(&buf, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  return a1;
}

void sub_1D808EFA4(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_8:
      v22 = a14;
      a14 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 104, a2);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 + 80, v23);
      v24 = *(unsigned int *)(v18 + 72);
      if ((_DWORD)v24 != -1)
        ((void (*)(WTF **, uint64_t))off_1E9D6C0F0[v24])(&a10, v18 + 56);
      *(_DWORD *)(v18 + 72) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF *WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  _BYTE *v34;
  _BYTE *v35;
  WTF *result;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  char v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  uint64_t v52;
  StringImpl *v53;
  WTF::StringImpl **v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::Lock *v79;
  int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  WTF *v89;
  WTF *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[4];
  unsigned int *v104;
  __int128 v105;
  __int128 v106;
  WTF::Lock *v107;
  char v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  __int128 buf;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  _QWORD v119[3];

  v119[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&buf = &v116;
  *((_QWORD *)&buf + 1) = 1;
  v100 = (WTF *)&v102;
  v101 = 1;
  v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 96))
  {
    v6 = *(unsigned int *)(a1 + 92);
    memcpy(&v102, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = a1 + 96;
    v100 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 88);
    LODWORD(v6) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a1 + 88) = 1;
    LODWORD(v101) = v5;
  }
  HIDWORD(v101) = v6;
  *(_QWORD *)(a1 + 88) = 1;
  v7 = *(_DWORD *)(a1 + 112);
  v8 = *(_DWORD *)(a1 + 116);
  v9 = *(_QWORD *)(a1 + 104);
  v97 = v9;
  v98 = v7;
  v99 = v8;
  *(_QWORD *)&buf = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *((_QWORD *)&buf + 1) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v4);
  if (HIDWORD(v101))
  {
    v11 = v100;
    v12 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    v13 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v14 = *(_QWORD *)v11;
      if (*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        v15 = atomic_load((unsigned __int8 *)(a1 + 121));
        if (v15 != 1
          || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 24))(*(_QWORD *)(v14 + 16)))
        {
          v16 = *(_QWORD *)(v14 + 16);
          *(_QWORD *)&buf = v14;
          v17 = (unsigned int *)(v14 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          *((_QWORD *)&buf + 1) = v14;
          do
            v19 = __ldaxr(v13);
          while (__stlxr(v19 + 1, v13));
          v116 = a1;
          v20 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = &off_1E9D6C138;
          *(_OWORD *)(v20 + 8) = buf;
          *(_QWORD *)(v20 + 24) = a1;
          *((_QWORD *)&buf + 1) = 0;
          v116 = 0;
          v104 = (unsigned int *)v20;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v16 + 16))(v16, &v104);
          v21 = v104;
          v104 = 0;
          if (v21)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_8;
        }
      }
      if (*(_BYTE *)(v14 + 56))
      {
        *(_QWORD *)&buf = v14;
        WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((WTF::NativePromiseBase *)a1, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v14 + 24));
        goto LABEL_8;
      }
      v22 = *a2;
      v23 = __ldxr(*a2);
      if (v23 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_23:
      if (WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a1))
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v104, a1);
        v24 = v104;
        (*(void (**)(__int128 *__return_ptr, unsigned int *))(*(_QWORD *)v104 + 16))(&buf, v104);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        if (DWORD2(buf) != -1)
          ((void (*)(_QWORD *, __int128 *))off_1E9D6C108[DWORD2(buf)])(v103, &buf);
        DWORD2(buf) = -1;
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&buf, a1);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, a1, &buf);
        if (DWORD2(buf) != -1)
          ((void (*)(unsigned int **, __int128 *))off_1E9D6C108[DWORD2(buf)])(&v104, &buf);
      }
      if (__ldaxr(*a2))
      {
        __clrex();
LABEL_32:
        MEMORY[0x1D82A3914]();
        goto LABEL_8;
      }
      if (__stxr(1u, *a2))
        goto LABEL_32;
LABEL_8:
      v11 = (WTF *)((char *)v11 + 8);
      if (v11 == v12)
      {
        v9 = v97;
        v8 = v99;
        break;
      }
    }
  }
  if (v8)
  {
    v26 = v9 + 40 * v8;
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    v96 = v26;
    while (1)
    {
      v28 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      v104 = v28;
      v29 = *(_OWORD *)(v9 + 24);
      v105 = *(_OWORD *)(v9 + 8);
      v106 = v29;
      if (v28)
      {
        v30 = v28 + 2;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      v103[0] = 0;
      v103[1] = 0;
      v103[2] = "<chained promise>";
      v103[3] = 0;
      v32 = (unsigned __int8 *)(v28 + 12);
      v107 = (WTF::Lock *)(v28 + 12);
      v108 = 1;
      if (__ldaxr((unsigned __int8 *)v28 + 48))
        break;
      if (__stxr(1u, v32))
        goto LABEL_44;
LABEL_45:
      v34 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v32);
      v35 = v34;
      if (!*v34 || v34[16] < 4u)
        goto LABEL_144;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
      WTF::String::String((WTF::String *)&v112, " settling chained promise ");
      result = WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v111, (uint64_t)v28);
      if (v113)
      {
        v37 = *(_DWORD *)(v113 + 4);
        v38 = (uint64_t)v112;
        if (v112)
          goto LABEL_49;
      }
      else
      {
        v37 = 0;
        v38 = (uint64_t)v112;
        if (v112)
        {
LABEL_49:
          v39 = *(_DWORD *)(v38 + 4);
          v40 = v111;
          if (v111)
            goto LABEL_50;
          goto LABEL_54;
        }
      }
      v39 = 0;
      v40 = v111;
      if (v111)
      {
LABEL_50:
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 | v39) < 0)
          goto LABEL_180;
        goto LABEL_55;
      }
LABEL_54:
      v41 = 0;
      if (v39 < 0)
        goto LABEL_180;
LABEL_55:
      v42 = __OFADD__(v39, v41);
      v43 = v39 + v41;
      v44 = v42;
      if (v37 < 0 || (v44 & 1) != 0 || (v45 = v37 + v43, __OFADD__(v37, v43)))
      {
LABEL_180:
        __break(0xC471u);
        return result;
      }
      if (v113 && (*(_BYTE *)(v113 + 16) & 4) == 0)
      {
        v46 = 0;
        goto LABEL_71;
      }
      if (v38)
      {
        v47 = *(_DWORD *)(v38 + 16);
        v46 = (v47 >> 2) & 1;
        if (v40 && (v47 & 4) != 0)
LABEL_69:
          v46 = (*(unsigned __int8 *)(v40 + 16) >> 2) & 1;
      }
      else
      {
        if (v40)
          goto LABEL_69;
        v46 = 1;
      }
LABEL_71:
      result = (WTF *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, v45, v46, v113, v38, v40);
      v114 = (WTF::StringImpl *)buf;
      if (!(_QWORD)buf)
        goto LABEL_180;
      v111 = 0;
      if (!v40)
        goto LABEL_75;
      if (*(_DWORD *)v40 != 2)
      {
        *(_DWORD *)v40 -= 2;
LABEL_75:
        v49 = v112;
        v112 = 0;
        if (!v49)
          goto LABEL_80;
        goto LABEL_78;
      }
      WTF::StringImpl::destroy((WTF::StringImpl *)v40, v48);
      v49 = v112;
      v112 = 0;
      if (!v49)
        goto LABEL_80;
LABEL_78:
      if (*(_DWORD *)v49 != 2)
      {
        *(_DWORD *)v49 -= 2;
LABEL_80:
        v50 = (WTF::StringImpl *)v113;
        v113 = 0;
        if (!v50)
          goto LABEL_85;
        goto LABEL_83;
      }
      WTF::StringImpl::destroy(v49, v48);
      v50 = (WTF::StringImpl *)v113;
      v113 = 0;
      if (!v50)
        goto LABEL_85;
LABEL_83:
      if (*(_DWORD *)v50 != 2)
      {
        *(_DWORD *)v50 -= 2;
LABEL_85:
        v51 = *((_QWORD *)v35 + 4);
        v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v52)
          goto LABEL_94;
        goto LABEL_88;
      }
      WTF::StringImpl::destroy(v50, v48);
      v51 = *((_QWORD *)v35 + 4);
      v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)v52)
        goto LABEL_94;
LABEL_88:
      WTF::String::utf8();
      if (v109)
        v54 = v109 + 2;
      else
        v54 = 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v54;
      _os_log_impl(&dword_1D7FB9000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v52 = (uint64_t)v109;
      v109 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          v52 = WTF::fastFree((WTF *)v52, v53);
          if (!*v35)
            goto LABEL_141;
          goto LABEL_95;
        }
        --*(_DWORD *)v52;
      }
LABEL_94:
      if (!*v35)
        goto LABEL_141;
LABEL_95:
      if (v35[16] < 4u)
        goto LABEL_141;
      do
      {
        while (1)
        {
          v55 = *v27;
          if ((v55 & 1) != 0)
            goto LABEL_141;
          v56 = __ldaxr(v27);
          if (v56 == v55)
            break;
          __clrex();
        }
      }
      while (__stxr(v55 | 1, v27));
      v57 = WTF::Logger::observers((WTF::Logger *)v52);
      v58 = *(unsigned int *)(v57 + 12);
      if ((_DWORD)v58)
      {
        v59 = *(uint64_t **)v57;
        v60 = *(_QWORD *)v57 + 8 * v58;
        while (1)
        {
          v61 = *v59;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
          LODWORD(v116) = 0;
          WTF::String::String((WTF::String *)&v117, " settling chained promise ");
          v118 = 0;
          WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(v119, (uint64_t)v28);
          v109 = 0;
          v110 = 0;
          v62 = WTF::fastMalloc((WTF *)0x30);
          LODWORD(v110) = 3;
          v109 = (WTF::StringImpl **)v62;
          v63 = HIDWORD(v110);
          *(_DWORD *)(v62 + 16 * HIDWORD(v110)) = buf;
          v64 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *(_QWORD *)(v62 + 16 * v63 + 8) = v64;
          *(_DWORD *)(v62 + 16 * (v63 + 1)) = v116;
          v65 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 1) + 8) = v65;
          *(_DWORD *)(v62 + 16 * (v63 + 2)) = v118;
          v66 = v119[0];
          if (v119[0])
            *(_DWORD *)v119[0] += 2;
          *(_QWORD *)(v62 + 16 * (v63 + 2) + 8) = v66;
          HIDWORD(v110) = v63 + 3;
          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl ***))(*(_QWORD *)v61 + 16))(v61, v35, 4, &v109);
          v67 = (WTF *)v109;
          if (HIDWORD(v110))
          {
            v68 = 16 * HIDWORD(v110);
            v69 = v109 + 1;
            do
            {
              v70 = *v69;
              *v69 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, v53);
                else
                  *(_DWORD *)v70 -= 2;
              }
              v69 += 2;
              v68 -= 16;
            }
            while (v68);
            v67 = (WTF *)v109;
          }
          if (v67)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree(v67, v53);
          }
          v71 = (WTF::StringImpl *)v119[0];
          v119[0] = 0;
          if (!v71)
            goto LABEL_124;
          if (*(_DWORD *)v71 != 2)
            break;
          WTF::StringImpl::destroy(v71, v53);
          v72 = v117;
          v117 = 0;
          if (!v72)
            goto LABEL_129;
LABEL_127:
          if (*(_DWORD *)v72 != 2)
          {
            *(_DWORD *)v72 -= 2;
LABEL_129:
            v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v73)
              goto LABEL_132;
            goto LABEL_104;
          }
          WTF::StringImpl::destroy(v72, v53);
          v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v73)
          {
LABEL_132:
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v53);
            else
              *(_DWORD *)v73 -= 2;
          }
LABEL_104:
          if (++v59 == (uint64_t *)v60)
            goto LABEL_136;
        }
        *(_DWORD *)v71 -= 2;
LABEL_124:
        v72 = v117;
        v117 = 0;
        if (!v72)
          goto LABEL_129;
        goto LABEL_127;
      }
LABEL_136:
      v74 = __ldxr(v27);
      if (v74 != 1)
      {
        __clrex();
        v26 = v96;
LABEL_140:
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        goto LABEL_141;
      }
      v26 = v96;
      if (__stlxr(0, v27))
        goto LABEL_140;
LABEL_141:
      v75 = v114;
      v114 = 0;
      if (!v75)
        goto LABEL_144;
      if (*(_DWORD *)v75 != 2)
      {
        *(_DWORD *)v75 -= 2;
LABEL_144:
        v76 = v28 + 14;
        v77 = v28[18];
        v78 = *(unsigned int *)(a1 + 72);
        if ((_DWORD)v77 == -1)
          goto LABEL_148;
        goto LABEL_145;
      }
      WTF::StringImpl::destroy(v75, v53);
      v76 = v28 + 14;
      v77 = v28[18];
      v78 = *(unsigned int *)(a1 + 72);
      if ((_DWORD)v77 == -1)
      {
LABEL_148:
        if ((_DWORD)v78 == -1)
          goto LABEL_150;
        goto LABEL_149;
      }
LABEL_145:
      if ((_DWORD)v78 == -1)
      {
        ((void (*)(__int128 *, unsigned int *))off_1E9D6C0F0[v77])(&buf, v76);
        v28[18] = -1;
        goto LABEL_150;
      }
LABEL_149:
      *(_QWORD *)&buf = v76;
      ((void (*)(__int128 *))off_1E9D6C150[v78])(&buf);
LABEL_150:
      WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::dispatchAll(v28, &v107);
      if (v108)
      {
        v79 = v107;
        v80 = __ldxr((unsigned __int8 *)v107);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v107))
            goto LABEL_156;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v79);
      }
LABEL_156:
      v81 = v28 + 2;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (v83)
      {
        v84 = v104;
        if (v104)
          goto LABEL_160;
      }
      else
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        v84 = v104;
        if (v104)
        {
LABEL_160:
          WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::assertIsDead((uint64_t)v84);
          v104 = 0;
          v85 = v84 + 2;
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            atomic_store(1u, v84 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
          }
        }
      }
      v9 += 40;
      if (v9 == v26)
        goto LABEL_166;
    }
    __clrex();
LABEL_44:
    v32 = (unsigned __int8 *)MEMORY[0x1D82A3914]();
    goto LABEL_45;
  }
LABEL_166:
  WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v10);
  if (HIDWORD(v101))
  {
    v89 = v100;
    v90 = (WTF *)((char *)v100 + 8 * HIDWORD(v101));
    do
    {
      v91 = *(unsigned int **)v89;
      *(_QWORD *)v89 = 0;
      if (v91)
      {
        v92 = v91 + 2;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v91 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
      }
      v89 = (WTF *)((char *)v89 + 8);
    }
    while (v89 != v90);
  }
  result = v100;
  if (&v102 != (uint64_t *)v100 && v100 != 0)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    return (WTF *)WTF::fastFree(result, v88);
  }
  return result;
}

void sub_1D808FBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  void *v33;

  v30 = *(unsigned int *)(v28 - 152);
  if ((_DWORD)v30 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6C108[v30])(&a26, v28 - 160);
  *(_DWORD *)(v28 - 152) = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (__ldaxr(*v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v26))
  {
LABEL_8:
    WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v31);
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1D82A3914]();
  goto LABEL_8;
}

void sub_1D808FC70(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::Lock *a35,char a36)
{
  unsigned int *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v40;
  WTF::StringImpl *v41;
  WTF::Lock *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  void *v48;

  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_8:
      v41 = *(WTF::StringImpl **)(v38 - 168);
      *(_QWORD *)(v38 - 168) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (a36)
      {
        v42 = a35;
        v43 = __ldxr((unsigned __int8 *)a35);
        if (v43 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a35))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v42);
      }
LABEL_17:
      if (v36)
      {
        v44 = v36 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
      WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>::~NativePromiseProducer(&a30);
      WTF::Vector<WTF::NativePromiseProducer<WTF::String,WebCore::DOMCacheEngine::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v47);
      WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_8;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(WTF::NativePromiseBase *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::StringImpl *result;
  BOOL v7;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, (uint64_t)a1, a2, a3);
  return result;
}

BOOL WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x1D82A3914](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 72);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 72) == 2)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *v3 = v6;
    LODWORD(v6) = __ldxr(v4);
    if ((_DWORD)v6 == 1)
    {
      if (__stlxr(0, v4))
        return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    else
    {
      __clrex();
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1D80900E0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _BYTE v8[2];

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x1D82A3914](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 72) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 8) = -1;
  v6 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6C118[v6])(v8, v3, a2 + 56);
    *(_DWORD *)(v3 + 8) = v6;
  }
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_1D80901E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  v16 = *(unsigned int *)(v14 + 8);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6C108[v16])(&a13, v14);
  *(_DWORD *)(v14 + 8) = -1;
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  StringImpl *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74[3];

  v74[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v59, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v58, a2);
  WTF::String::String((WTF::String *)&v57, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v53, "]");
  v7 = v58;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v53);
  if (!v60)
  {
    __break(0xC471u);
    return result;
  }
  v10 = v53;
  v53 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      v11 = v54;
      v54 = 0;
      if (!v11)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  v11 = v54;
  v54 = 0;
  if (!v11)
  {
LABEL_10:
    v12 = v55;
    v55 = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_8:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v11, v9);
  v12 = v55;
  v55 = 0;
  if (!v12)
    goto LABEL_15;
LABEL_13:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy(v12, v9);
    v13 = v56;
    v56 = 0;
    if (!v13)
      goto LABEL_20;
    goto LABEL_18;
  }
  *(_DWORD *)v12 -= 2;
LABEL_15:
  v13 = v56;
  v56 = 0;
  if (!v13)
  {
LABEL_20:
    v14 = v57;
    v57 = 0;
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_18:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v13, v9);
  v14 = v57;
  v57 = 0;
  if (!v14)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v9);
    v58 = 0;
    if (!v7)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)v14 -= 2;
LABEL_25:
  v58 = 0;
  if (!v7)
  {
LABEL_30:
    v15 = v59;
    v59 = 0;
    if (!v15)
      goto LABEL_35;
    goto LABEL_33;
  }
LABEL_28:
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v7, v9);
  v15 = v59;
  v59 = 0;
  if (!v15)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::destroy(v15, v9);
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)v17)
      goto LABEL_44;
    goto LABEL_38;
  }
  *(_DWORD *)v15 -= 2;
LABEL_35:
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v17)
    goto LABEL_44;
LABEL_38:
  WTF::String::utf8();
  if (v51)
    v19 = (char *)v51 + 16;
  else
    v19 = 0;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v62 = v19;
  _os_log_impl(&dword_1D7FB9000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  v17 = (uint64_t)v51;
  v51 = 0;
  if (!v17)
  {
LABEL_44:
    if (!*(_BYTE *)a1)
      goto LABEL_119;
    goto LABEL_45;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_44;
  }
  v17 = WTF::fastFree((WTF *)v17, v18);
  if (!*(_BYTE *)a1)
    goto LABEL_119;
LABEL_45:
  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    goto LABEL_119;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  do
  {
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        goto LABEL_119;
      v22 = __ldaxr(v20);
      if (v22 == v21)
        break;
      __clrex();
    }
  }
  while (__stxr(v21 | 1, v20));
  v23 = WTF::Logger::observers((WTF::Logger *)v17);
  v24 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)v23;
    v49 = *(_QWORD *)v23 + 8 * v24;
    while (1)
    {
      v26 = *v25;
      *(_DWORD *)buf = 0;
      WTF::String::String((WTF::String *)&v62[4], "ThenCallback disconnected from ");
      v63 = 0;
      WTF::LogArgument<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>>::toString(&v64, a2);
      v65 = 0;
      WTF::String::String((WTF::String *)&v66, " aborting [callback:");
      v67 = 0;
      WTF::LogArgument<void const*>::toString();
      v69 = 0;
      WTF::String::String((WTF::String *)&v70, " callSite:");
      v71 = 0;
      WTF::Logger::LogSiteIdentifier::toString(a4);
      v73 = 0;
      WTF::String::String((WTF::String *)v74, "]");
      v51 = 0;
      v52 = 0;
      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
      LODWORD(v52) = 7;
      v51 = v27;
      v28 = HIDWORD(v52);
      *((_DWORD *)v27 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
      v29 = *(_QWORD *)&v62[4];
      if (*(_QWORD *)&v62[4])
        **(_DWORD **)&v62[4] += 2;
      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
      *((_DWORD *)v27 + 4 * (v28 + 1)) = v63;
      v30 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
      *((_DWORD *)v27 + 4 * (v28 + 2)) = v65;
      v31 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
      *((_DWORD *)v27 + 4 * (v28 + 3)) = v67;
      v32 = v68;
      if (v68)
        *(_DWORD *)v68 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
      *((_DWORD *)v27 + 4 * (v28 + 4)) = v69;
      v33 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
      *((_DWORD *)v27 + 4 * (v28 + 5)) = v71;
      v34 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *((_QWORD *)v27 + 2 * (v28 + 5) + 1) = v34;
      *((_DWORD *)v27 + 4 * (v28 + 6)) = v73;
      v35 = v74[0];
      if (v74[0])
        *(_DWORD *)v74[0] += 2;
      *((_QWORD *)v27 + 2 * (v28 + 6) + 1) = v35;
      HIDWORD(v52) = v28 + 7;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 4, &v51);
      v36 = v51;
      if (HIDWORD(v52))
      {
        v37 = a3;
        v38 = 16 * HIDWORD(v52);
        v39 = (WTF::StringImpl **)((char *)v51 + 8);
        do
        {
          v40 = *v39;
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v18);
            else
              *(_DWORD *)v40 -= 2;
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        v36 = v51;
        a3 = v37;
      }
      if (v36)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v36, v18);
      }
      v41 = v74[0];
      v74[0] = 0;
      if (!v41)
        goto LABEL_82;
      if (*(_DWORD *)v41 != 2)
        break;
      WTF::StringImpl::destroy(v41, v18);
      v42 = v72;
      v72 = 0;
      if (!v42)
        goto LABEL_87;
LABEL_85:
      if (*(_DWORD *)v42 != 2)
      {
        *(_DWORD *)v42 -= 2;
LABEL_87:
        v43 = v70;
        v70 = 0;
        if (!v43)
          goto LABEL_92;
        goto LABEL_90;
      }
      WTF::StringImpl::destroy(v42, v18);
      v43 = v70;
      v70 = 0;
      if (!v43)
        goto LABEL_92;
LABEL_90:
      if (*(_DWORD *)v43 != 2)
      {
        *(_DWORD *)v43 -= 2;
LABEL_92:
        v44 = v68;
        v68 = 0;
        if (!v44)
          goto LABEL_97;
        goto LABEL_95;
      }
      WTF::StringImpl::destroy(v43, v18);
      v44 = v68;
      v68 = 0;
      if (!v44)
        goto LABEL_97;
LABEL_95:
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
LABEL_97:
        v45 = v66;
        v66 = 0;
        if (!v45)
          goto LABEL_102;
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v44, v18);
      v45 = v66;
      v66 = 0;
      if (!v45)
        goto LABEL_102;
LABEL_100:
      if (*(_DWORD *)v45 != 2)
      {
        *(_DWORD *)v45 -= 2;
LABEL_102:
        v46 = v64;
        v64 = 0;
        if (!v46)
          goto LABEL_107;
        goto LABEL_105;
      }
      WTF::StringImpl::destroy(v45, v18);
      v46 = v64;
      v64 = 0;
      if (!v46)
        goto LABEL_107;
LABEL_105:
      if (*(_DWORD *)v46 != 2)
      {
        *(_DWORD *)v46 -= 2;
LABEL_107:
        v47 = *(WTF::StringImpl **)&v62[4];
        *(_QWORD *)&v62[4] = 0;
        if (v47)
          goto LABEL_110;
        goto LABEL_54;
      }
      WTF::StringImpl::destroy(v46, v18);
      v47 = *(WTF::StringImpl **)&v62[4];
      *(_QWORD *)&v62[4] = 0;
      if (v47)
      {
LABEL_110:
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v18);
        else
          *(_DWORD *)v47 -= 2;
      }
LABEL_54:
      if (++v25 == (uint64_t *)v49)
        goto LABEL_114;
    }
    *(_DWORD *)v41 -= 2;
LABEL_82:
    v42 = v72;
    v72 = 0;
    if (!v42)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_114:
  v48 = __ldxr(v20);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, v20))
LABEL_118:
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_119:
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1D80909F8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,WTF::StringImpl *a42,uint64_t a43,WTF::StringImpl *a44)
{
  unsigned __int8 *v44;
  int v46;

  v46 = __ldxr(v44);
  if (v46 == 1)
  {
    if (!__stlxr(0, v44))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
LABEL_7:
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
    {
      WTF::StringImpl::destroy(a30, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a30 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E9D6C138;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = (unsigned int *)a1[2];
      a1[2] = 0;
      if (v6)
        goto LABEL_6;
      return a1;
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (!v6)
    return a1;
LABEL_6:
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
    return a1;
  atomic_store(1u, v6 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;

  *(_QWORD *)this = &off_1E9D6C138;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = v3 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_9;
  }
  v8 = v7 + 2;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    v11 = this;
    return WTF::fastFree(v11, a2);
  }
LABEL_9:
  v11 = this;
  return WTF::fastFree(v11, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v15 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v15, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_13;
  }
  MEMORY[0x1D82A3914](v2 + 48);
LABEL_13:
  v8 = *(_DWORD *)(v2 + 72);
  v9 = __ldxr(v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, v6))
    {
      v10 = *((_QWORD *)a1 + 3);
      if (v8 == 2)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
LABEL_16:
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x1D82A3914](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 72) != 2)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(&v15, v13);
    (*(void (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v15);
    if (v16 != -1)
      ((void (*)(char *, uint64_t *))off_1E9D6C108[v16])(&v17, &v15);
    v16 = -1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
LABEL_20:
  WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResult((uint64_t)&v15, v10);
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v15);
  if (v16 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E9D6C108[v16])(&v17, &v15);
  return result;
}

void sub_1D8091100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a12 != -1)
    ((void (*)(char *, char *))off_1E9D6C108[a12])(&a17, &a10);
  a12 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void sub_1D8091148(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1D8091164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  unsigned __int8 *v17;
  int v19;

  v19 = __ldxr(v17);
  if (v19 == 1)
  {
    if (!__stlxr(0, v17))
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v17);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6C0F0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v19[0] = 0;
      v20 = -1;
      v7 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v7 == -1)
      {
        v8 = *(_DWORD *)(a2 + 8);
        if (v8 == -1)
        {
LABEL_42:
          if (v20 != -1)
            return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E9D6C108[v20])(v21, v19);
          return result;
        }
      }
      else
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E9D6C118[v7])(&v24, v19, a3);
        v20 = v7;
        v8 = *((_DWORD *)v6 + 2);
        if (v8 != -1 && (_DWORD)v7 == v8)
        {
          result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E9D6C168[v7])(v21, v19, v6);
          goto LABEL_42;
        }
        if ((_DWORD)v7 != 1)
        {
          v14 = v19;
          v21[0] = 0;
          v22 = -1;
          if (v8 == -1)
          {
LABEL_36:
            *((_DWORD *)v6 + 2) = -1;
            v16 = *((unsigned int *)v14 + 2);
            if ((_DWORD)v16 != -1)
            {
              result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6C178[v16])(&v23, v6, v14);
              *((_DWORD *)v6 + 2) = v16;
              v17 = *((unsigned int *)v14 + 2);
              if ((_DWORD)v17 != -1)
                result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6C108[v17])(&v24, v14);
            }
            *((_DWORD *)v14 + 2) = -1;
            v18 = v22;
            if (v22 != -1)
            {
              result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6C178[v22])(&v23, v14, v21);
              *((_DWORD *)v14 + 2) = v18;
              if (v22 != -1)
                result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6C108[v22])(&v24, v21);
            }
            goto LABEL_42;
          }
LABEL_34:
          result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E9D6C118[v8])(&v23, v21, v6);
          v22 = v8;
          v15 = *((unsigned int *)v6 + 2);
          if ((_DWORD)v15 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))off_1E9D6C108[v15])(&v24, v6);
          goto LABEL_36;
        }
      }
      v10 = v19;
      if (v8 == 1)
        v11 = 1;
      else
        v11 = v7;
      if (v8 == 1)
        v12 = v19;
      else
        v12 = v6;
      if (v8 == 1)
        v10 = v6;
      v13 = v8 == -1;
      if (v8 == -1)
        v8 = -1;
      else
        v8 = v11;
      if (v13)
        v14 = v19;
      else
        v14 = v12;
      if (!v13)
        v6 = v10;
      v21[0] = 0;
      v22 = -1;
      if (v8 == -1)
        goto LABEL_36;
      goto LABEL_34;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E9D6C0F0[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6C118[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 8) = v9;
  }
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

void sub_1D80914CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  uint64_t v16;

  if (a16 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6C108[a16])(v16 - 33, &a14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E9D6C108[a12])(v16 - 33, &a10);
  _Unwind_Resume(exception_object);
}

void sub_1D8091550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 8);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6C108[v14])(&a12, v12);
  *(_DWORD *)(v12 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6StringEN7WebCore14DOMCacheEngine5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SD_EENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6C0F0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore14DOMCacheEngine5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void WebCore::DummyStorageProvider::~DummyStorageProvider(WebCore::DummyStorageProvider *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v4)
        return;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    return;
LABEL_7:
  v5 = v4 + 2;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
}

{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (unsigned int *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v4)
        goto LABEL_10;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    goto LABEL_10;
LABEL_7:
  v5 = v4 + 2;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    v8 = this;
    goto LABEL_11;
  }
LABEL_10:
  v8 = this;
LABEL_11:
  WTF::fastFree(v8, a2);
}

void WebCore::DummySpeechRecognitionProvider::~DummySpeechRecognitionProvider(WebCore::DummySpeechRecognitionProvider *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::ApplicationCacheStorage::create(WebCore::ApplicationCacheStorage *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x88);
  result = MEMORY[0x1D82A5DEC](v4, MEMORY[0x1E0CBF738], MEMORY[0x1E0CBF738]);
  *(_QWORD *)this = v4;
  return result;
}

void sub_1D80917D8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::ApplicationCacheStorage **WTF::Ref<WebCore::ApplicationCacheStorage,WTF::RawPtrTraits<WebCore::ApplicationCacheStorage>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheStorage>>::~Ref(WebCore::ApplicationCacheStorage **a1, StringImpl *a2)
{
  WebCore::ApplicationCacheStorage *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebCore::ApplicationCacheStorage::~ApplicationCacheStorage(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

WTF::StringImpl *std::__call_once_proxy[abi:sn180100]<std::tuple<webApplicationCacheStorage(void)::$_0 &&>>()
{
  void *v0;
  uint64_t v1;
  const WTF::String *v2;
  const WTF::String *v3;
  StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v0 = (void *)MEMORY[0x1E0CB3940];
  v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  if (!v1)
    v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
  MEMORY[0x1D82A3998](&v10, objc_msgSend(v0, "_webkit_localCacheDirectoryWithBundleIdentifier:", v1));
  WTF::FileSystemImpl::pathByAppendingComponent();
  WebCore::SQLiteFileSystem::deleteDatabaseFile((WebCore::SQLiteFileSystem *)&v9, v2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)&v8, v3);
  v5 = v8;
  v8 = 0;
  if (!v5)
  {
LABEL_6:
    v6 = v9;
    v9 = 0;
    if (!v6)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v5, v4);
  v6 = v9;
  v9 = 0;
  if (!v6)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v4);
    result = v10;
    v10 = 0;
    if (!result)
      return result;
    goto LABEL_14;
  }
  *(_DWORD *)v6 -= 2;
LABEL_11:
  result = v10;
  v10 = 0;
  if (!result)
    return result;
LABEL_14:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D80919CC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ApplicationCacheStorage::~ApplicationCacheStorage(WebCore::ApplicationCacheStorage *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 16);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 15);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  WebCore::SQLiteDatabase::~SQLiteDatabase((WebCore::ApplicationCacheStorage *)((char *)this + 56));
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v9)
  {
LABEL_16:
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v10)
      goto LABEL_21;
    goto LABEL_19;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v9, v8);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v10)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v8);
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v11)
      return;
    goto LABEL_24;
  }
  *(_DWORD *)v10 -= 2;
LABEL_21:
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v11)
    return;
LABEL_24:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v8);
  else
    *(_DWORD *)v11 -= 2;
}

uint64_t WebCore::TextIndicatorData::TextIndicatorData(uint64_t this, const WebCore::TextIndicatorData *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = this;
  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(this + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(this + 32) = v5;
  *(_OWORD *)this = v4;
  v6 = *((unsigned int *)a2 + 15);
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_DWORD *)(this + 60) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 28)
    {
      __break(0xC471u);
      return this;
    }
    v7 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(v3 + 56) = v6;
    *(_QWORD *)(v3 + 48) = v7;
    v8 = *((unsigned int *)a2 + 15);
    if ((_DWORD)v8)
    {
      v9 = (__int128 *)*((_QWORD *)a2 + 6);
      v10 = 16 * v8;
      do
      {
        v11 = *v9++;
        *v7++ = v11;
        v10 -= 16;
      }
      while (v10);
    }
  }
  *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 16);
  v12 = *((_QWORD *)a2 + 9);
  if (v12)
    ++*(_DWORD *)(v12 + 8);
  *(_QWORD *)(v3 + 72) = v12;
  v13 = *((_QWORD *)a2 + 10);
  if (v13)
    ++*(_DWORD *)(v13 + 8);
  *(_QWORD *)(v3 + 80) = v13;
  v14 = *((_QWORD *)a2 + 11);
  if (v14)
    ++*(_DWORD *)(v14 + 8);
  *(_QWORD *)(v3 + 88) = v14;
  WebCore::Color::Color();
  *(_DWORD *)(v3 + 104) = *((_DWORD *)a2 + 26);
  return v3;
}

void sub_1D8091C7C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;

  v5 = *(_DWORD **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *(_DWORD **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(_DWORD **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  WTF *v10;

  if (!*(_BYTE *)(a1 + 112))
    return a1;
  v3 = *(_QWORD *)(a1 + 96);
  if ((v3 & 0x8000000000000) == 0)
    goto LABEL_6;
  v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
    v7 = *(_DWORD **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (!v7)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    v7 = *(_DWORD **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (!v7)
      goto LABEL_10;
  }
  if (v7[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  else
    --v7[2];
LABEL_10:
  v8 = *(_DWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v8)
  {
    if (v8[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      v9 = *(_DWORD **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v9)
        goto LABEL_18;
LABEL_16:
      if (v9[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        v10 = *(WTF **)(a1 + 48);
        if (!v10)
          return a1;
        goto LABEL_19;
      }
      --v9[2];
      goto LABEL_18;
    }
    --v8[2];
  }
  v9 = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v9)
    goto LABEL_16;
LABEL_18:
  v10 = *(WTF **)(a1 + 48);
  if (v10)
  {
LABEL_19:
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

uint64_t std::__throw_bad_optional_access[abi:sn180100]()
{
  WTF *v0;

  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return WebViewRenderingUpdateScheduler::operator delete(v0);
}

double WebViewRenderingUpdateScheduler::operator delete(WTF *this, void *a2)
{
  WebCore::RunLoopObserver *v3;
  WTF *v4;
  void *v5;
  WebCore::RunLoopObserver *v6;
  WTF *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  double result;

  v3 = (WebCore::RunLoopObserver *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v3);
    WTF::fastFree(v4, v5);
  }
  v6 = (WebCore::RunLoopObserver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(v6);
    WTF::fastFree(v7, v8);
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v9 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  if (*((_DWORD *)this + 2))
  {
    result = 0.0;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
  return result;
}

uint64_t PAL::TextEncoding::encodeForURLParsing()
{
  return PAL::TextEncoding::encode();
}

void PAL::TextEncoding::~TextEncoding(PAL::TextEncoding *this)
{
  JUMPOUT(0x1D82A8D20);
}

void WebCore::FontAttributes::~FontAttributes(WebCore::FontAttributes *this, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  WTF *v21;
  void *v22;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 3);
  if ((v8 & 0x8000000000000) == 0)
    goto LABEL_14;
  v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
    v12 = *((_QWORD *)this + 2);
    if ((v12 & 0x8000000000000) == 0)
      goto LABEL_19;
  }
  else
  {
LABEL_14:
    v12 = *((_QWORD *)this + 2);
    if ((v12 & 0x8000000000000) == 0)
      goto LABEL_19;
  }
  v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, a2);
  }
LABEL_19:
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 0x8000000000000) == 0)
    goto LABEL_23;
  v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, a2);
    v20 = *(_DWORD **)this;
    *(_QWORD *)this = 0;
    if (!v20)
      return;
  }
  else
  {
LABEL_23:
    v20 = *(_DWORD **)this;
    *(_QWORD *)this = 0;
    if (!v20)
      return;
  }
  if (*v20 == 1)
  {
    v21 = (WTF *)MEMORY[0x1D82A62D8]();
    WTF::fastFree(v21, v22);
  }
  else
  {
    --*v20;
  }
}

const char **WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(const char **a1, const char **a2)
{
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  const char **v16;
  const char *v17;
  const char *v18;
  int v19;
  int i;
  const char *v22;

  if (!a1)
    return 0;
  v3 = *((_DWORD *)a1 - 2);
  v4 = (unsigned __int8 *)a2[1];
  if (!v4)
  {
    v15 = 0;
    v16 = a1;
    v17 = *a1;
    if (*a1)
      goto LABEL_15;
    return 0;
  }
  v5 = -1640531527;
  v6 = (_DWORD)v4 - 1;
  if ((_DWORD)v4 == 1)
    goto LABEL_10;
  v7 = *a2;
  if (v6 == 1)
    goto LABEL_9;
  v8 = v6 >> 1;
  v9 = *a2;
  do
  {
    v10 = v5 + *(unsigned __int8 *)v9;
    v11 = (v10 << 16) ^ (*((unsigned __int8 *)v9 + 1) << 11);
    v5 = (v11 ^ v10) + ((v11 ^ v10) >> 11);
    v9 += 2;
    --v8;
  }
  while (v8);
  if ((v6 & 1) != 0)
  {
    v7 += 2 * (v6 >> 1);
LABEL_9:
    v5 = ((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11))
       + (((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11)) >> 17);
  }
LABEL_10:
  v12 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = v13 ^ (v13 << 10);
  if (!v14)
    v14 = 0x800000;
  v15 = v14 & v3;
  v16 = &a1[3 * (v14 & v3)];
  v17 = *v16;
  if (!*v16)
    return 0;
LABEL_15:
  v18 = *a2;
  if (*a2)
  {
    v19 = 1;
    while (v17 == (const char *)-1 || strcmp(v17, v18))
    {
      v15 = (v15 + v19) & v3;
      v16 = &a1[3 * v15];
      v17 = *v16;
      ++v19;
      if (!*v16)
        return 0;
    }
  }
  else if (v17 == (const char *)-1 || v17 != 0)
  {
    for (i = 1; ; ++i)
    {
      v15 = (v15 + i) & v3;
      v16 = &a1[3 * v15];
      v22 = *v16;
      if (!*v16)
        break;
      if (v22 != (const char *)-1 && v22 == 0)
        return v16;
    }
    return 0;
  }
  return v16;
}

_QWORD *WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E9D6C200;
  a1[1] = 0;
  if (!v3)
    return a1;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v3);
  WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6C200;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
    v6 = this;
  }
  else
  {
LABEL_4:
    v6 = this;
  }
  return WTF::fastFree(v6, a2);
}

void WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v10[5];
  _QWORD v11[5];

  v2 = WebThreadLock();
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      v5 = *(_BYTE *)(v4 + 40);
      *(_WORD *)(v4 + 40) = 1;
      v6 = (void *)MEMORY[0x1D82A8E64](v2);
      objc_msgSend(*(id *)(v4 + 16), "_updateRendering");
      objc_autoreleasePoolPop(v6);
      if (*(_BYTE *)(v4 + 42))
      {
        if (*(_BYTE *)(v4 + 41))
          goto LABEL_8;
      }
      else
      {
        v7 = *(_QWORD *)(v4 + 16);
        v8 = MEMORY[0x1E0C809B0];
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3221225472;
        v11[2] = ___ZN31WebViewRenderingUpdateScheduler24registerCACommitHandlersEv_block_invoke;
        v11[3] = &unk_1E9D6B978;
        v11[4] = v7;
        objc_msgSend(MEMORY[0x1E0CD28B0], "addCommitHandler:forPhase:", v11, 0);
        v10[0] = v8;
        v10[1] = 3221225472;
        v10[2] = ___ZN31WebViewRenderingUpdateScheduler24registerCACommitHandlersEv_block_invoke_2;
        v10[3] = &unk_1E9D6B978;
        v10[4] = v7;
        objc_msgSend(MEMORY[0x1E0CD28B0], "addCommitHandler:forPhase:", v10, 2);
        *(_BYTE *)(v4 + 42) = 1;
        if (*(_BYTE *)(v4 + 41))
          goto LABEL_8;
      }
      WebCore::RunLoopObserver::invalidate(*(WebCore::RunLoopObserver **)(v4 + 24));
LABEL_8:
      *(_BYTE *)(v4 + 40) = v5;
      v9 = *(_DWORD *)(v4 + 8);
      if (v9)
        *(_DWORD *)(v4 + 8) = v9 - 1;
      else
        __break(0xC471u);
    }
  }
}

void sub_1D8092414(_Unwind_Exception *a1)
{
  uint64_t v1;
  char v2;
  int v3;

  *(_BYTE *)(v1 + 40) = v2;
  v3 = *(_DWORD *)(v1 + 8);
  if (v3)
  {
    *(_DWORD *)(v1 + 8) = v3 - 1;
    _Unwind_Resume(a1);
  }
  __break(0xC471u);
}

_QWORD *WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E9D6C228;
  a1[1] = 0;
  if (!v3)
    return a1;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (v5)
    return a1;
  atomic_store(1u, v3);
  WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6C228;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
    v6 = this;
  }
  else
  {
LABEL_4:
    v6 = this;
  }
  return WTF::fastFree(v6, a2);
}

void WTF::Detail::CallableWrapper<WebViewRenderingUpdateScheduler::WebViewRenderingUpdateScheduler(WebView *)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = WebThreadLock();
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      v5 = (void *)MEMORY[0x1D82A8E64](v2);
      objc_msgSend(*(id *)(v4 + 16), "_didCompleteRenderingFrame");
      WebCore::RunLoopObserver::invalidate(*(WebCore::RunLoopObserver **)(v4 + 32));
      objc_autoreleasePoolPop(v5);
      v6 = *(_DWORD *)(v4 + 8);
      if (v6)
        *(_DWORD *)(v4 + 8) = v6 - 1;
      else
        __break(0xC471u);
    }
  }
}

void sub_1D80925A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 8);
  if (v2)
  {
    *(_DWORD *)(v1 + 8) = v2 - 1;
    _Unwind_Resume(a1);
  }
  __break(0xC471u);
}

void WebCore::DummySpeechRecognitionProvider::~DummySpeechRecognitionProvider(WebCore::DummySpeechRecognitionProvider *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v4 = this;
      goto LABEL_5;
    }
    --v3[2];
  }
  v4 = this;
LABEL_5:
  WTF::fastFree(v4, a2);
}

_QWORD *WebCore::DummySpeechRecognitionProvider::speechRecognitionConnection(WebCore::DummySpeechRecognitionProvider *this)
{
  _QWORD *result;
  _DWORD *v3;

  result = (_QWORD *)*((_QWORD *)this + 1);
  if (!result)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *result = off_1E9D6C2B0;
    result[1] = 1;
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v3)
    {
      if (v3[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        return (_QWORD *)*((_QWORD *)this + 1);
      }
      else
      {
        --v3[2];
      }
    }
  }
  return result;
}

uint64_t WebCore::DummyStorageProvider::storageConnection(WebCore::DummyStorageProvider *this)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (*((_QWORD *)this + 1))
    return *((_QWORD *)this + 1);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E9D6C338;
  v3[1] = 1;
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v3;
  if (!v4)
    return *((_QWORD *)this + 1);
  v5 = v4 + 2;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (v7)
    return *((_QWORD *)this + 1);
  atomic_store(1u, v4 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  return *((_QWORD *)this + 1);
}

uint64_t WebCore::DummyStorageProvider::ensureMediaKeysStorageDirectoryForOrigin@<X0>(uint64_t this@<X0>, const WebCore::SecurityOriginData *a2@<X1>, WTF::FileSystemImpl *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = *(_QWORD *)(this + 16);
  if (v4 && *(_DWORD *)(v4 + 4))
  {
    WebCore::SecurityOriginData::databaseIdentifier(a2);
    WTF::FileSystemImpl::pathByAppendingComponent();
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    return WTF::FileSystemImpl::makeAllDirectories(a3, (const WTF::String *)v6);
  }
  else
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *(_QWORD *)a3 = v5;
  }
  return this;
}

void sub_1D809292C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF::StringImpl **v10;
  WTF::StringImpl *v12;

  v12 = *v10;
  *v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::DummyStorageProvider::setMediaKeysStorageDirectory(WebCore::DummyStorageProvider *this, StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::getPersisted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_1D8092A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::persist(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_1D8092A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::fileSystemGetDirectory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  char v5[8];
  uint64_t v6;
  int v7;
  char v8;

  v5[0] = 6;
  v6 = 0;
  v7 = 1;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7 != -1)
    return ((uint64_t (*)(char *, char *))off_1E9D6C368[v7])(&v8, v5);
  return result;
}

void sub_1D8092AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E9D6C368[a11])(v12 - 17, &a9);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DummyStorageProvider::DummyStorageConnection::getEstimate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  char v5[8];
  uint64_t v6;
  int v7;
  char v8;

  v5[0] = 6;
  v6 = 0;
  v7 = 1;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7 != -1)
    return ((uint64_t (*)(char *, char *))off_1E9D6C378[v7])(&v8, v5);
  return result;
}

void sub_1D8092BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E9D6C378[a11])(v12 - 17, &a9);
  _Unwind_Resume(a1);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15StorageEstimateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::Page>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x1D82A65B4]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ64__WebView_WebPrivate__willEnterBackgroundWithCompletionHandler__EUb_E3__2vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9D6C3C0;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ64__WebView_WebPrivate__willEnterBackgroundWithCompletionHandler__EUb_E3__2vJEED0Ev(const void **a1)
{
  void *v2;

  *a1 = off_1E9D6C3C0;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ64__WebView_WebPrivate__willEnterBackgroundWithCompletionHandler__EUb_E3__2vJEE4callEv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

WebCore::EditingStyle *WTF::RefCounted<WebCore::EditingStyle>::deref(WebCore::EditingStyle *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::EditingStyle::~EditingStyle(result);
    return (WebCore::EditingStyle *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, StringImpl *a2)
{
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  WTF *v7;

  if (result[2] > (unint64_t)a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > (unint64_t)a2)
    {
      v5 = (unsigned int **)(*(_QWORD *)result + 8 * (_QWORD)a2);
      v6 = 8 * v4 - 8 * (_QWORD)a2;
      do
      {
        result = *v5;
        *v5 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v3[3] = a2;
      LODWORD(v4) = (_DWORD)a2;
    }
    v7 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v7, (void *)(8 * (_QWORD)a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if ((unint64_t)a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * (_QWORD)a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v7)
        result = (unsigned int *)memcpy(result, v7, 8 * v4);
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v7, a2);
    }
  }
  return result;
}

WTF::ASCIICaseInsensitiveHash **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  WTF::ASCIICaseInsensitiveHash **v12;
  WTF::ASCIICaseInsensitiveHash **v13;
  WTF::ASCIICaseInsensitiveHash *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::ASCIICaseInsensitiveHash **v20;
  WTF::ASCIICaseInsensitiveHash *v21;
  WTF::StringImpl *v22;
  WTF::ASCIICaseInsensitiveHash **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::ASCIICaseInsensitiveHash **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::ASCIICaseInsensitiveHash::hash(v14, v10);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v15 + 8 * v19));
          v20 = (WTF::ASCIICaseInsensitiveHash **)(v15 + 8 * v19);
          *v20 = 0;
          v21 = *v13;
          *v13 = 0;
          *v20 = v21;
          v22 = *v13;
          *v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v10);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v13 == a3)
            v12 = v20;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::ASCIICaseInsensitiveHash::hash(WTF::ASCIICaseInsensitiveHash *this, const StringImpl *a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v2 = -1640531527;
  v3 = *((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    if (v4 >= 2)
    {
      v12 = 0;
      do
      {
        v13 = v2 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v3 + v12));
        v14 = (v13 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v3 + v12 + 1)) << 11) ^ v13;
        v2 = v14 + (v14 >> 11);
        v15 = v12 + 3;
        v12 += 2;
      }
      while (v15 < v4);
    }
    if ((v4 & 1) != 0)
    {
      v11 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v4 + v3 - 1));
      goto LABEL_12;
    }
  }
  else
  {
    if (v4 >= 2)
    {
      v5 = 0;
      do
      {
        v6 = (unsigned __int16 *)(v3 + 2 * v5);
        v7 = *v6 | (32 * (*v6 - 65 < 0x1A));
        v8 = (((v6[1] - 65 < 0x1A) << 16) | (v6[1] << 11)) ^ ((v2 + v7) << 16) ^ (v2 + v7);
        v2 = v8 + (v8 >> 11);
        v9 = v5 + 3;
        v5 += 2;
      }
      while (v9 < v4);
    }
    if ((v4 & 1) != 0)
    {
      v10 = *(unsigned __int16 *)(v3 + 2 * v4 - 2);
      v11 = v10 | (32 * ((v10 - 65) < 0x1A));
LABEL_12:
      v2 = ((v2 + v11) ^ ((v2 + v11) << 11)) + (((v2 + v11) ^ ((v2 + v11) << 11)) >> 17);
    }
  }
  v16 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v17 = (v16 ^ (4 * v16)) + ((v16 ^ (4 * v16)) >> 15);
  v18 = (v17 ^ (v17 << 10)) & 0xFFFFFF;
  if (v18)
    return v18;
  else
    return 0x800000;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 4))
    return 0;
  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 **)(a2 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    if ((v3 & 4) != 0)
    {
      if (!(_DWORD)v2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v4) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5))
        return 0;
      v17 = 1;
      do
      {
        v12 = v17;
        if (v2 == v17)
          break;
        v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v4[v17]);
        v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[v17++]);
      }
      while (v18 == v19);
    }
    else
    {
      if (!(_DWORD)v2)
        return 1;
      if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v4))
        return 0;
      v11 = 1;
      do
      {
        v12 = v11;
        if (v2 == v11)
          break;
        v13 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v4[v11]);
        v14 = *(unsigned __int16 *)&v5[2 * v11] | (32 * (*(unsigned __int16 *)&v5[2 * v11] - 65 < 0x1A));
        ++v11;
      }
      while (v14 == v13);
    }
    return v12 >= v2;
  }
  if ((v3 & 4) != 0)
  {
    if (!(_DWORD)v2)
      return 1;
    if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5))
      return 0;
    v15 = 1;
    do
    {
      v12 = v15;
      if (v2 == v15)
        break;
      v16 = *(unsigned __int16 *)&v4[2 * v15] | (32 * (*(unsigned __int16 *)&v4[2 * v15] - 65 < 0x1A));
      ++v15;
    }
    while (v16 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[v12]));
    return v12 >= v2;
  }
  if (!(_DWORD)v2)
    return 1;
  if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) != (*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))))
    return 0;
  v6 = 1;
  do
  {
    v7 = v6;
    if (v2 == v6)
      break;
    v8 = *(unsigned __int16 *)&v4[2 * v6] | (32 * (*(unsigned __int16 *)&v4[2 * v6] - 65 < 0x1A));
    v9 = *(unsigned __int16 *)&v5[2 * v6] | (32 * (*(unsigned __int16 *)&v5[2 * v6] - 65 < 0x1A));
    ++v6;
  }
  while (v8 == v9);
  return v7 >= v2;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v6;
  int v7;
  WTF::ASCIICaseInsensitiveHash *v8;
  unsigned int v9;
  StringImpl *v10;
  WTF::ASCIICaseInsensitiveHash **v11;
  int i;
  unsigned int v13;
  WTF::ASCIICaseInsensitiveHash **v14;
  WTF::ASCIICaseInsensitiveHash *v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *a3;
  v9 = WTF::ASCIICaseInsensitiveHash::hash(*a3, (const StringImpl *)a2);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v9 & v7;
    v14 = (WTF::ASCIICaseInsensitiveHash **)(v6 + 8 * (v9 & v7));
    v15 = *v14;
    if (*v14 == (WTF::ASCIICaseInsensitiveHash *)-1)
    {
      v11 = (WTF::ASCIICaseInsensitiveHash **)(v6 + 8 * v13);
      goto LABEL_6;
    }
    if (!v15)
      break;
    result = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>((uint64_t)v15, (uint64_t)v8);
    if ((_DWORD)result)
    {
      v17 = 0;
      v18 = v6 + 8 * *(unsigned int *)(v6 - 4);
      goto LABEL_30;
    }
LABEL_6:
    v9 = i + v13;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*a2 - 16);
    v8 = *a3;
    v14 = v11;
  }
  *a3 = 0;
  result = (uint64_t)*v14;
  *v14 = v8;
  if (!result)
  {
LABEL_16:
    v19 = *a2;
    if (!*a2)
      goto LABEL_24;
LABEL_17:
    ++*(_DWORD *)(v19 - 12);
    v20 = *a2;
    if (!*a2)
      goto LABEL_25;
LABEL_18:
    v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
    v22 = *(unsigned int *)(v20 - 4);
    if (v22 > 0x400)
      goto LABEL_26;
    goto LABEL_19;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_16;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
  v19 = *a2;
  if (*a2)
    goto LABEL_17;
LABEL_24:
  *(_DWORD *)(v19 - 12) = 1;
  v20 = *a2;
  if (*a2)
    goto LABEL_18;
LABEL_25:
  v21 = *(unsigned int *)(v20 - 16);
  v22 = *(unsigned int *)(v20 - 4);
  if (v22 > 0x400)
  {
LABEL_26:
    if (v22 <= 2 * v21)
    {
LABEL_27:
      result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v14);
      v14 = (WTF::ASCIICaseInsensitiveHash **)result;
      v20 = *a2;
      if (*a2)
        goto LABEL_28;
LABEL_22:
      v22 = 0;
    }
    goto LABEL_29;
  }
LABEL_19:
  if (3 * v22 <= 4 * v21)
  {
    if ((_DWORD)v22)
      goto LABEL_27;
    result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
    v14 = (WTF::ASCIICaseInsensitiveHash **)result;
    v20 = *a2;
    if (!*a2)
      goto LABEL_22;
LABEL_28:
    v22 = *(unsigned int *)(v20 - 4);
  }
LABEL_29:
  v18 = v20 + 8 * v22;
  v17 = 1;
LABEL_30:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RetainPtr<objc_object *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RetainPtr<objc_object *>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RetainPtr<objc_object *>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RetainPtr<objc_object *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (const void *)v23[1];
          v23[1] = 0;
          if (v24)
            CFRelease(v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(const void **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_6;
LABEL_10:
          CFRelease(v13);
          goto LABEL_6;
        }
        v12 = v4 + 16 * v9;
        v13 = *(const void **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_10;
      }
LABEL_6:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

char *WTF::Vector<WTF::RetainPtr<WebVideoFullscreenController>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF *v26;
  const void *v27;
  const void *v28;
  WTF *v29;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v29 = *(WTF **)a1;
        return (char *)v29 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v12 = WTF::fastMalloc((WTF *)(8 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        v14 = 8 * v6;
        do
        {
          v15 = *(_QWORD *)((char *)v5 + v13);
          *(_QWORD *)((char *)v5 + v13) = 0;
          *(_QWORD *)(v12 + v13) = v15;
          v16 = *(const void **)((char *)v5 + v13);
          *(_QWORD *)((char *)v5 + v13) = 0;
          if (v16)
            CFRelease(v16);
          v13 += 8;
        }
        while (v14 != v13);
        v29 = *(WTF **)a1;
        if (v5)
        {
          if (v29 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v29 = *(WTF **)a1;
        }
        return (char *)v29 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x1D8093948);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v20 = a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    if (v20 >> 29)
      goto LABEL_39;
    v21 = *(unsigned int *)(a1 + 12);
    v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + 8) = v20;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v21)
    {
      v24 = (_QWORD *)v22;
      v25 = 8 * v21;
      v26 = v5;
      do
      {
        v27 = *(const void **)v26;
        *(_QWORD *)v26 = 0;
        *v24 = v27;
        v28 = *(const void **)v26;
        *(_QWORD *)v26 = 0;
        if (v28)
          CFRelease(v28);
        ++v24;
        v26 = (WTF *)((char *)v26 + 8);
        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WebCore::DictationAlternative,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  __int128 v26;

  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 24 * v6 <= a3))
  {
    v17 = *(unsigned int *)(a1 + 8);
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= a2)
      v19 = a2;
    if (v19 > v17)
    {
      if (v19 >= 0xAAAAAAB)
        goto LABEL_33;
      v20 = *(unsigned int *)(a1 + 12);
      v21 = 24 * v19;
      v22 = WTF::fastMalloc((WTF *)(24 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v22;
      if ((_DWORD)v20)
      {
        v24 = 24 * v20;
        v25 = v5;
        do
        {
          v26 = *(_OWORD *)v25;
          *(_QWORD *)(v22 + 16) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v22 = v26;
          v22 += 24;
          v25 = (WTF *)((char *)v25 + 24);
          v24 -= 24;
        }
        while (v24);
      }
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v23);
      }
    }
    return (char *)a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v9 = a2;
  if (v9 > v7)
  {
    if (v9 < 0xAAAAAAB)
    {
      v10 = 24 * v9;
      v11 = WTF::fastMalloc((WTF *)(24 * v9));
      v13 = 0;
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v11;
      do
      {
        v14 = v11 + v13;
        v15 = *(_OWORD *)((char *)v5 + v13);
        *(_QWORD *)(v14 + 16) = *(_QWORD *)((char *)v5 + v13 + 16);
        *(_OWORD *)v14 = v15;
        v13 += 24;
      }
      while (24 * v6 != v13);
      v16 = *(WTF **)a1;
      if (v5)
      {
        if (v16 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v16 = *(WTF **)a1;
      }
      return (char *)v16 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1D8093B4CLL);
  }
  v16 = *(WTF **)a1;
  return (char *)v16 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebInstallMemoryPressureHandler::$_0 &&>>(WTF::MemoryPressureHandler *a1)
{
  WTF::MemoryPressureHandler *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(a1);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E9D6C410;
  v3 = *((_QWORD *)v1 + 6);
  *((_QWORD *)v1 + 6) = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::MemoryPressureHandler::install(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebInstallMemoryPressureHandler::$_0::operator() const(void)::{lambda(WTF::Critical,WTF::Synchronous)#1},void,WTF::Critical,WTF::Synchronous>::call()
{
  return WebThreadRun();
}

uint64_t ___ZZZ31WebInstallMemoryPressureHandlerENK3__0clEvENKUlN3WTF8CriticalENS0_11SynchronousEE_clES1_S2__block_invoke()
{
  return WebCore::releaseMemory();
}

void WebAlternativeTextClient::~WebAlternativeTextClient(WTF *this, void *a2)
{
  if (*((_DWORD *)this + 2))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WebAlternativeTextClient::removeDictationAlternatives(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 16), "_removeDictationAlternatives:", a2);
}

uint64_t WebAlternativeTextClient::showDictationAlternativeUI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 16), "_showDictationAlternativeUI:forDictationContext:", a2, a3);
}

void *WebAlternativeTextClient::dictationAlternatives@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *result;

  result = *(void **)(a1 + 16);
  if (result)
    return (void *)objc_msgSend(result, "_dictationAlternatives:", a2);
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void sub_1D8094580(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (a12)
  {
    if (a12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
    else
      --a12[2];
  }
  if (a11)
  {
    if (a11[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
      WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v32);
      WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a31, v33);
      _Unwind_Resume(a1);
    }
    --a11[2];
    WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
    WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a31, v34);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a31, v35);
  _Unwind_Resume(a1);
}

void sub_1D80947E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _DWORD *a11)
{
  if (a11)
  {
    if (a11[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
      _Unwind_Resume(exception_object);
    }
    --a11[2];
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D8094A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  objc_begin_catch(exception_object);

  objc_end_catch();
  return 0;
}

void sub_1D8094BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D8094D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  CFRelease(v11);
  if (!v10)
    _Unwind_Resume(a1);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1D8094F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1D8095000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D80955E0(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a9)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(a9 + 1, a2);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&a14, a2);
  _Unwind_Resume(a1);
}

float WebChromeClient::windowRect(WebChromeClient *this)
{
  return 0.0;
}

float WebChromeClient::pageRect(id *this)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGRect v6;
  float v7;

  objc_msgSend(objc_loadWeak(this + 2), "frame");
  v6.origin.x = v1;
  v6.origin.y = v2;
  v6.size.width = v3;
  v6.size.height = v4;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v7, &v6);
  return v7;
}

uint64_t WebChromeClient::focus(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v2, "webViewFocus:", objc_loadWeak(v1));
}

uint64_t WebChromeClient::unfocus(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v2, "webViewUnfocus:", objc_loadWeak(v1));
}

uint64_t WebChromeClient::canTakeFocus()
{
  return 1;
}

id WebChromeClient::focusedElementChanged(id this, WebCore::Element *a2)
{
  uint64_t v3;
  WebView *Weak;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  objc_object *v9;

  if (a2)
  {
    if ((*((_WORD *)a2 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      v3 = (uint64_t)this;
      this = (id)WebCore::HTMLInputElement::isText(a2);
      if ((_DWORD)this)
      {
        Weak = (WebView *)objc_loadWeak((id *)(v3 + 16));
        v5 = kit(a2);
        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
        if (v6
          && (v7 = *(_QWORD *)(v6 + 8)) != 0
          && (v8 = *(_QWORD **)(*(_QWORD *)(v7 + 280) + 16),
              ((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) == 0))
        {
          v9 = (objc_object *)v8[2];
        }
        else
        {
          v9 = 0;
        }
        return CallFormDelegate(Weak, (objc_selector *)sel_didFocusTextField_inFrame_, (objc_object *)v5, v9);
      }
    }
  }
  return this;
}

uint64_t WebChromeClient::createWindow(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  id *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  id v11;
  _BOOL8 v12;
  WebView *v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  double v18;
  objc_object *v19;
  WebView *Weak;
  id v21;
  BOOL v22;
  void *v23;
  _DWORD *v24;

  v5 = (id *)(a1 + 16);
  objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "UIDelegate");
  v6 = *(_QWORD *)(a2 + 296);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 24) + 2;
    *(_DWORD *)(v6 + 24) = v7;
    v8 = *(_QWORD *)(v6 + 1992);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 8) + 1;
      *(_DWORD *)(v8 + 8) = v9;
      if (*(_QWORD *)(v8 + 56))
      {
        WebCore::FullscreenManager::cancelFullscreen((WebCore::FullscreenManager *)v8);
        v9 = *(_DWORD *)(v8 + 8);
      }
      if (!v9)
      {
        result = 286;
        __break(0xC471u);
        goto LABEL_90;
      }
      *(_DWORD *)(v8 + 8) = v9 - 1;
      v7 = *(_DWORD *)(v6 + 24);
    }
    v10 = v7 - 2;
    if (v10)
    {
      *(_DWORD *)(v6 + 24) = v10;
    }
    else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v11 = objc_alloc(MEMORY[0x1E0C99E08]);
    if (!*a3
      && !a3[8]
      && !a3[16]
      && !a3[24]
      && !a3[32]
      && !a3[37]
      && !a3[39]
      && !a3[41]
      && !a3[43]
      && !a3[45]
      && !a3[47]
      && !a3[49])
    {
      v12 = 0;
LABEL_32:
      v16 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v12);
      result = objc_msgSend(v11, "initWithObjectsAndKeys:", v16, CFSTR("wantsPopup"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *a3), CFSTR("hasAdditionalFeatures"), 0);
      v19 = (objc_object *)result;
      if (a3[8])
      {
        LODWORD(v18) = *((_DWORD *)a3 + 1);
        result = objc_msgSend((id)result, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v18), CFSTR("x"));
      }
      if (a3[16])
      {
        LODWORD(v18) = *((_DWORD *)a3 + 3);
        result = -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v18), CFSTR("y"));
      }
      if (a3[24])
      {
        LODWORD(v18) = *((_DWORD *)a3 + 5);
        result = -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v18), CFSTR("width"));
      }
      if (a3[32])
      {
        LODWORD(v18) = *((_DWORD *)a3 + 7);
        result = -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v18), CFSTR("height"));
      }
      if (!a3[37])
        goto LABEL_43;
      if (a3[53])
      {
        -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3[52]), CFSTR("popup"));
LABEL_43:
        if (a3[39])
          -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3[38]), CFSTR("menuBarVisible"));
        if (a3[41])
          -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3[40]), CFSTR("statusBarVisible"));
        if (a3[43])
          -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3[42]), CFSTR("toolBarVisible"));
        if (a3[47])
          -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3[46]), CFSTR("scrollbarsVisible"));
        if (a3[49])
          -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3[48]), CFSTR("resizable"));
        if (a3[51])
          -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3[50]), CFSTR("fullscreen"));
        if (a3[53])
          -[objc_object setObject:forKey:](v19, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3[52]), CFSTR("dialog"));
        Weak = (WebView *)objc_loadWeak(v5);
        v15 = CallUIDelegate(Weak, (objc_selector *)sel_webView_createWebViewWithRequest_windowFeatures_, 0, v19);
        if (v19)
          CFRelease(v19);
        goto LABEL_59;
      }
LABEL_90:
      __break(1u);
      return result;
    }
    if (a3[37])
    {
      v12 = a3[36] != 0;
      goto LABEL_32;
    }
    if (a3[45] && a3[44])
    {
      if (!a3[39])
      {
LABEL_84:
        v12 = 1;
        goto LABEL_32;
      }
    }
    else
    {
      v12 = 1;
      if (!a3[43] || !a3[42] || !a3[39])
        goto LABEL_32;
    }
    if (a3[38])
    {
      if (a3[48])
        v22 = 1;
      else
        v22 = a3[49] == 0;
      v12 = 1;
      if (v22 && a3[47] && a3[46] && a3[41])
        v12 = a3[40] == 0;
      goto LABEL_32;
    }
    goto LABEL_84;
  }
  if (a3[53] && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v13 = (WebView *)objc_loadWeak(v5);
    v14 = sel_webView_createWebViewModalDialogWithRequest_;
  }
  else
  {
    v13 = (WebView *)objc_loadWeak(v5);
    v14 = sel_webView_createWebViewWithRequest_;
  }
  v15 = CallUIDelegate(v13, (objc_selector *)v14, 0);
LABEL_59:
  if (v15)
  {
    objc_msgSend(v15, "page");
    v15 = v24;
    if (v24)
    {
      if ((!a3[55] || !a3[54]) && (!a3[57] || !a3[56]))
      {
        v21 = objc_loadWeak(v5);
        if (v21)
        {
          objc_msgSend(v21, "page");
          v21 = v23;
        }
        WebCore::Page::protectedStorageNamespaceProvider((WebCore::Page *)v21);
        objc_msgSend(objc_loadWeak(v5), "page");
        (*(void (**)())(*(_QWORD *)v24 + 24))();
        if (v24[2] == 1)
          (*(void (**)())(*(_QWORD *)v24 + 8))();
        else
          --v24[2];
      }
    }
  }
  return (uint64_t)v15;
}

void sub_1D8095EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a16)
  {
    if (a16[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a16 + 8))(a16);
      _Unwind_Resume(exception_object);
    }
    --a16[2];
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebChromeClient::show(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v2, "webViewShow:", objc_loadWeak(v1));
}

uint64_t WebChromeClient::canRunModal(id *this)
{
  objc_msgSend(objc_loadWeak(this + 2), "UIDelegate");
  return objc_opt_respondsToSelector() & 1;
}

id WebChromeClient::runModal(id *this)
{
  WebView *Weak;

  Weak = (WebView *)objc_loadWeak(this + 2);
  return CallUIDelegate(Weak, (objc_selector *)sel_webViewRunModal_);
}

uint64_t WebChromeClient::setToolbarsVisible(id *this, uint64_t a2)
{
  id *v3;
  void *v4;

  v3 = this + 2;
  v4 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v4, "webView:setToolbarsVisible:", objc_loadWeak(v3), a2);
}

BOOL WebChromeClient::toolbarsVisible(id *this)
{
  WebView *Weak;

  Weak = (WebView *)objc_loadWeak(this + 2);
  return CallUIDelegateReturningBoolean(0, Weak, (objc_selector *)sel_webViewAreToolbarsVisible_);
}

uint64_t WebChromeClient::setStatusbarVisible(id *this, uint64_t a2)
{
  id *v3;
  void *v4;

  v3 = this + 2;
  v4 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v4, "webView:setStatusBarVisible:", objc_loadWeak(v3), a2);
}

BOOL WebChromeClient::statusbarVisible(id *this)
{
  WebView *Weak;

  Weak = (WebView *)objc_loadWeak(this + 2);
  return CallUIDelegateReturningBoolean(0, Weak, (objc_selector *)sel_webViewIsStatusBarVisible_);
}

uint64_t WebChromeClient::setScrollbarsVisible(id *this, uint64_t a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "mainFrame"), "frameView"), "setAllowsScrolling:", a2);
}

uint64_t WebChromeClient::scrollbarsVisible(id *this)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "mainFrame"), "frameView"), "allowsScrolling");
}

uint64_t WebChromeClient::menubarVisible(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::setResizable(id *this, uint64_t a2)
{
  id *v3;
  void *v4;

  v3 = this + 2;
  v4 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v4, "webView:setResizable:", objc_loadWeak(v3), a2);
}

uint64_t WebChromeClient::addMessageToConsole(uint64_t a1, int a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  id *v13;
  uint64_t result;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  v13 = (id *)(a1 + 16);
  result = objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_allowsMessaging");
  if ((_DWORD)result)
  {
    result = objc_msgSend(objc_loadWeak(v13), "_UIKitDelegate");
    if (result)
    {
      result = objc_opt_respondsToSelector();
      if ((result & 1) != 0)
      {
        switch(a2)
        {
          case 0:
            v15 = (const __CFString *)WebConsoleMessageXMLMessageSource;
            break;
          case 1:
            goto LABEL_8;
          case 2:
            v15 = (const __CFString *)WebConsoleMessageNetworkMessageSource;
            break;
          case 3:
            v15 = (const __CFString *)WebConsoleMessageConsoleAPIMessageSource;
            break;
          case 4:
            v15 = (const __CFString *)WebConsoleMessageStorageMessageSource;
            break;
          case 5:
            v15 = (const __CFString *)WebConsoleMessageAppCacheMessageSource;
            break;
          case 6:
            v15 = (const __CFString *)WebConsoleMessageRenderingMessageSource;
            break;
          case 7:
            v15 = (const __CFString *)WebConsoleMessageCSSMessageSource;
            break;
          case 8:
            v15 = (const __CFString *)WebConsoleMessageSecurityMessageSource;
            break;
          case 9:
            v15 = (const __CFString *)WebConsoleMessageContentBlockerMessageSource;
            break;
          case 10:
            v15 = CFSTR("MediaMessageSource");
            break;
          case 11:
            v15 = CFSTR("MediaSourceMessageSource");
            break;
          case 12:
            v15 = CFSTR("WebRTCMessageSource");
            break;
          case 13:
            v15 = CFSTR("ITPDebugMessageSource");
            break;
          case 14:
            v15 = CFSTR("PrivateClickMeasurementMessageSource");
            break;
          case 15:
            v15 = CFSTR("PaymentRequestMessageSource");
            break;
          case 16:
            v15 = (const __CFString *)WebConsoleMessageOtherMessageSource;
            break;
          default:
            v15 = &stru_1E9D6EC48;
            break;
        }
      }
      else
      {
        if (a2 != 1)
          return result;
        result = objc_opt_respondsToSelector();
        if ((result & 1) == 0)
          return result;
LABEL_8:
        v15 = (const __CFString *)WebConsoleMessageJSMessageSource;
      }
      v21[0] = CFSTR("message");
      if (*a4)
        v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v16 = &stru_1E9D6EC48;
      v22[0] = v16;
      v21[1] = CFSTR("lineNumber");
      v22[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a5);
      v21[2] = CFSTR("columnNumber");
      v22[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a6);
      v21[3] = CFSTR("sourceURL");
      if (*a7)
        v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v17 = &stru_1E9D6EC48;
      v22[3] = v17;
      v22[4] = v15;
      v21[4] = CFSTR("MessageSource");
      v21[5] = CFSTR("MessageLevel");
      switch(a3)
      {
        case 0:
          v18 = (const __CFString *)WebConsoleMessageLogMessageLevel;
          break;
        case 1:
          v18 = (const __CFString *)WebConsoleMessageWarningMessageLevel;
          break;
        case 2:
          v18 = (const __CFString *)WebConsoleMessageErrorMessageLevel;
          break;
        case 3:
          v18 = (const __CFString *)WebConsoleMessageDebugMessageLevel;
          break;
        case 4:
          v18 = (const __CFString *)WebConsoleMessageInfoMessageLevel;
          break;
        default:
          v18 = &stru_1E9D6EC48;
          break;
      }
      v22[5] = v18;
      v19 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 6);
      v20 = (void *)objc_msgSend((id)objc_msgSend(objc_loadWeak(v13), "_UIKitDelegateForwarder"), "asyncForwarder");
      return objc_msgSend(v20, "webView:addMessageToConsole:withSource:", objc_loadWeak(v13), v19, v15);
    }
  }
  return result;
}

uint64_t WebChromeClient::canRunBeforeUnloadConfirmPanel(id *this)
{
  objc_msgSend(objc_loadWeak(this + 2), "UIDelegate");
  return objc_opt_respondsToSelector() & 1;
}

BOOL WebChromeClient::runBeforeUnloadConfirmPanel(id *this, const WTF::String *a2, WebCore::LocalFrame *a3)
{
  WebView *Weak;
  objc_object *v6;
  _QWORD *v7;
  objc_object *v8;

  Weak = (WebView *)objc_loadWeak(this + 2);
  if (*(_QWORD *)a2)
    v6 = (objc_object *)WTF::StringImpl::operator NSString *();
  else
    v6 = (objc_object *)&stru_1E9D6EC48;
  v7 = *(_QWORD **)(*((_QWORD *)a3 + 35) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v7 + 1072))(v7) & 1) != 0)
    v8 = 0;
  else
    v8 = (objc_object *)v7[2];
  return CallUIDelegateReturningBoolean(1, Weak, (objc_selector *)sel_webView_runBeforeUnloadConfirmPanelWithMessage_initiatedByFrame_, v6, v8);
}

uint64_t WebChromeClient::closeWindow(id *this)
{
  id *v1;

  v1 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "setGroupName:", 0);
  objc_msgSend(objc_loadWeak(v1), "stopLoading:", 0);
  return objc_msgSend(objc_loadWeak(v1), "_closeWindow");
}

uint64_t WebChromeClient::runJavaScriptAlert(id *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  id *v5;
  WebView *Weak;
  objc_object *v7;
  uint64_t result;
  WebView *v9;
  objc_object *v10;
  _QWORD *v11;
  objc_object *v12;

  v5 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    Weak = (WebView *)objc_loadWeak(v5);
    if (*(_QWORD *)a3)
      v7 = (objc_object *)WTF::StringImpl::operator NSString *();
    else
      v7 = (objc_object *)&stru_1E9D6EC48;
    v11 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v11 + 1072))(v11) & 1) != 0)
      v12 = 0;
    else
      v12 = (objc_object *)v11[2];
    return (uint64_t)CallUIDelegate(Weak, (objc_selector *)sel_webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_, v7, v12);
  }
  else
  {
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      v9 = (WebView *)objc_loadWeak(v5);
      if (*(_QWORD *)a3)
        v10 = (objc_object *)WTF::StringImpl::operator NSString *();
      else
        v10 = (objc_object *)&stru_1E9D6EC48;
      return (uint64_t)CallUIDelegate(v9, (objc_selector *)sel_webView_runJavaScriptAlertPanelWithMessage_, v10);
    }
  }
  return result;
}

BOOL WebChromeClient::runJavaScriptConfirm(id *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  id *v5;
  WebView *Weak;
  objc_object *v7;
  WebView *v8;
  objc_object *v9;
  _QWORD *v11;
  objc_object *v12;

  v5 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    Weak = (WebView *)objc_loadWeak(v5);
    if (*(_QWORD *)a3)
      v7 = (objc_object *)WTF::StringImpl::operator NSString *();
    else
      v7 = (objc_object *)&stru_1E9D6EC48;
    v11 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v11 + 1072))(v11) & 1) != 0)
      v12 = 0;
    else
      v12 = (objc_object *)v11[2];
    return CallUIDelegateReturningBoolean(0, Weak, (objc_selector *)sel_webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_, v7, v12);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v8 = (WebView *)objc_loadWeak(v5);
    if (*(_QWORD *)a3)
      v9 = (objc_object *)WTF::StringImpl::operator NSString *();
    else
      v9 = (objc_object *)&stru_1E9D6EC48;
    return CallUIDelegateReturningBoolean(0, v8, (objc_selector *)sel_webView_runJavaScriptConfirmPanelWithMessage_, v9);
  }
  else
  {
    return 0;
  }
}

BOOL WebChromeClient::runJavaScriptPrompt(id *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, WTF::StringImpl **a5)
{
  id *v9;
  objc_object *v10;
  WebView *Weak;
  objc_object *v12;
  WebView *v13;
  objc_object *v14;
  id v15;
  id v16;
  const __CFString *v17;
  _QWORD *v18;
  objc_object *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  StringImpl *v27;
  WTF::StringImpl *v29;

  v9 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "UIDelegate");
  if (*(_QWORD *)a4)
  {
    v10 = (objc_object *)WTF::StringImpl::operator NSString *();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
LABEL_3:
      Weak = (WebView *)objc_loadWeak(v9);
      if (*(_QWORD *)a3)
        v12 = (objc_object *)WTF::StringImpl::operator NSString *();
      else
        v12 = (objc_object *)&stru_1E9D6EC48;
      v18 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
      if (((*(uint64_t (**)(_QWORD *))(*v18 + 1072))(v18) & 1) != 0)
        v19 = 0;
      else
        v19 = (objc_object *)v18[2];
      v20 = CallUIDelegate(Weak, (objc_selector *)sel_webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_, v12, v10, v19);
      goto LABEL_23;
    }
  }
  else
  {
    v10 = (objc_object *)&stru_1E9D6EC48;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      goto LABEL_3;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v13 = (WebView *)objc_loadWeak(v9);
    if (*(_QWORD *)a3)
      v14 = (objc_object *)WTF::StringImpl::operator NSString *();
    else
      v14 = (objc_object *)&stru_1E9D6EC48;
    v20 = CallUIDelegate(v13, (objc_selector *)sel_webView_runJavaScriptTextInputPanelWithPrompt_defaultText_, v14, v10);
  }
  else
  {
    v15 = +[WebDefaultUIDelegate sharedUIDelegate](WebDefaultUIDelegate, "sharedUIDelegate");
    v16 = objc_loadWeak(v9);
    if (*(_QWORD *)a3)
      v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v17 = &stru_1E9D6EC48;
    v21 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v21 + 1072))(v21) & 1) != 0)
      v22 = 0;
    else
      v22 = v21[2];
    v20 = (id)objc_msgSend(v15, "webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:", v16, v17, v10, v22);
  }
LABEL_23:
  MEMORY[0x1D82A3998](&v29, v20);
  v24 = v29;
  v29 = 0;
  v25 = *a5;
  *a5 = v24;
  if (v25)
  {
    v26 = *(_DWORD *)v25 - 2;
    if (*(_DWORD *)v25 != 2)
    {
LABEL_27:
      *(_DWORD *)v25 = v26;
      return *a5 != 0;
    }
    WTF::StringImpl::destroy(v25, v23);
    v25 = v29;
    v29 = 0;
    if (v25)
    {
      v26 = *(_DWORD *)v25 - 2;
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v27);
        return *a5 != 0;
      }
      goto LABEL_27;
    }
  }
  return *a5 != 0;
}

void WebChromeClient::setStatusbarText(id *this, const WTF::String *a2)
{
  void *v4;
  WebView *Weak;
  objc_object *v6;

  v4 = (void *)MEMORY[0x1D82A8E64]();
  Weak = (WebView *)objc_loadWeak(this + 2);
  if (*(_QWORD *)a2)
    v6 = (objc_object *)WTF::StringImpl::operator NSString *();
  else
    v6 = (objc_object *)&stru_1E9D6EC48;
  CallUIDelegate(Weak, (objc_selector *)sel_webView_setStatusText_, v6);
  objc_autoreleasePoolPop(v4);
}

uint64_t WebChromeClient::screenToRootView(WebChromeClient *this, const IntPoint *a2)
{
  return (uint64_t)*a2;
}

uint64_t WebChromeClient::rootViewToScreen(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t WebChromeClient::accessibilityScreenToRootView(WebChromeClient *this, const IntPoint *a2)
{
  return (uint64_t)*a2;
}

uint64_t WebChromeClient::rootViewToAccessibilityScreen(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t WebChromeClient::platformPageClient(WebChromeClient *this)
{
  return 0;
}

id WebChromeClient::scrollContainingScrollViewsToRevealRect(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id result;
  void *v12;
  void *v13;

  v1 = (id *)(a1 + 16);
  v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "mainFrame"), "frameView"), "documentView");
  WebCore::IntRect::operator CGRect();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  result = objc_loadWeak(v1);
  if (result)
  {
    v12 = result;
    do
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v13 = (void *)objc_msgSend(v12, "documentView");
        objc_msgSend(v13, "convertRect:fromView:", v2, v4, v6, v8, v10);
        objc_msgSend(v13, "scrollRectToVisible:");
      }
      result = (id)objc_msgSend(v12, "superview");
      v12 = result;
    }
    while (result);
  }
  return result;
}

uint64_t WebChromeClient::shouldUnavailablePluginMessageBeButton(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    return 0;
  objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "UIDelegate", v2, v3);
  return objc_opt_respondsToSelector() & 1;
}

id WebChromeClient::unavailablePluginButtonClicked(uint64_t a1, WebCore::Node *a2)
{
  WebView *Weak;
  WebCore::Node *v4;

  Weak = (WebView *)objc_loadWeak((id *)(a1 + 16));
  v4 = kit(a2);
  return CallUIDelegate(Weak, (objc_selector *)sel_webView_didPressMissingPluginButton_, (objc_object *)v4);
}

void WebChromeClient::mouseDidMoveOverElement(id *a1, uint64_t a2, unsigned __int8 a3, _QWORD *a4)
{
  WebElementDictionary *v7;
  void *v8;
  const __CFString *v9;

  v7 = -[WebElementDictionary initWithHitTestResult:]([WebElementDictionary alloc], "initWithHitTestResult:", a2);
  a1 += 2;
  objc_msgSend(objc_loadWeak(a1), "_mouseDidMoveOverElement:modifierFlags:", v7, a3);
  v8 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(objc_loadWeak(a1), "_selectedOrMainFrame"), "frameView"), "documentView");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (*a4)
      v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v9 = &stru_1E9D6EC48;
    objc_msgSend(v8, "_setToolTip:", v9);
  }
  if (v7)
    CFRelease(v7);
}

void sub_1D8096D44(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

id WebChromeClient::print(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  objc_object *v4;
  char v5;
  WebView *Weak;

  v3 = *(_QWORD **)(*(_QWORD *)(a2 + 280) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v3 + 1072))(v3) & 1) != 0)
    v4 = 0;
  else
    v4 = (objc_object *)v3[2];
  objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "UIDelegate");
  v5 = objc_opt_respondsToSelector();
  Weak = (WebView *)objc_loadWeak((id *)(a1 + 16));
  if ((v5 & 1) != 0)
    return CallUIDelegate(Weak, (objc_selector *)sel_webView_printFrame_, v4);
  else
    return CallUIDelegate(Weak, (objc_selector *)sel_webView_printFrameView_, (objc_object *)-[objc_object frameView](v4, "frameView"));
}

void WebChromeClient::exceededDatabaseQuota(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  objc_object *v6;
  WebView *Weak;
  _QWORD *v8;
  objc_object *v9;
  objc_object *v10;

  v6 = -[WebSecurityOrigin _initWithWebCoreSecurityOrigin:]([WebSecurityOrigin alloc], "_initWithWebCoreSecurityOrigin:", WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(a2 + 296) + 192)));
  Weak = (WebView *)objc_loadWeak((id *)(a1 + 16));
  v8 = *(_QWORD **)(*(_QWORD *)(a2 + 280) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) != 0)
  {
    v9 = 0;
    if (*a3)
    {
LABEL_3:
      v10 = (objc_object *)WTF::StringImpl::operator NSString *();
      goto LABEL_6;
    }
  }
  else
  {
    v9 = (objc_object *)v8[2];
    if (*a3)
      goto LABEL_3;
  }
  v10 = (objc_object *)&stru_1E9D6EC48;
LABEL_6:
  CallUIDelegate(Weak, (objc_selector *)sel_webView_frame_exceededDatabaseQuotaForSecurityOrigin_database_, v9, v6, v10);
  if (v6)
    CFRelease(v6);
}

void sub_1D8096EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  const void *v14;
  NSException *v17;

  if (v14)
    CFRelease(v14);
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v17 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v17);
  objc_end_catch();
}

void WebChromeClient::createColorChooser(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebChromeClient::createDataListSuggestionPicker(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebChromeClient::createDateTimeChooser(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebChromeClient::runOpenPanel(WebChromeClient *this, WebCore::LocalFrame *a2, WebCore::FileChooser *a3)
{
  int v4;
  WebOpenPanelResultListener *v5;
  id *v6;
  WebView *Weak;
  WebView *v8;

  v4 = *((unsigned __int8 *)a3 + 17);
  v5 = -[WebOpenPanelResultListener initWithChooser:]([WebOpenPanelResultListener alloc], "initWithChooser:", a3);
  v6 = (id *)((char *)this + 16);
  objc_msgSend(objc_loadWeak(v6), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    Weak = (WebView *)objc_loadWeak(v6);
    CallUIDelegate(Weak, (objc_selector *)sel_webView_runOpenPanelForFileButtonWithResultListener_allowMultipleFiles_, (objc_object *)v5, v4 != 0);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v8 = (WebView *)objc_loadWeak(v6);
    CallUIDelegate(v8, (objc_selector *)sel_webView_runOpenPanelForFileButtonWithResultListener_, (objc_object *)v5);
  }
  else
  {
    -[WebOpenPanelResultListener cancel](v5, "cancel");
  }
  if (v5)
    CFRelease(v5);
}

void sub_1D809704C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  NSException *v16;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v16 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v16);
  objc_end_catch();
}

WebCore::Icon *WebChromeClient::loadIconForFiles(uint64_t a1)
{
  WebCore::Icon *result;
  WTF *v2;
  void *v3;
  WebCore::Icon *v4;

  (*(void (**)(WebCore::Icon **__return_ptr))(*(_QWORD *)a1 + 1608))(&v4);
  WebCore::FileIconLoader::iconLoaded();
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Icon::~Icon(result);
      return (WebCore::Icon *)WTF::fastFree(v2, v3);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void sub_1D809711C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Icon *a10)
{
  if (a10)
    WTF::RefCounted<WebCore::Icon>::deref(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebChromeClient::createIconForFiles()
{
  return WebCore::Icon::createIconForFiles();
}

uint64_t WebChromeClient::keyboardUIMode(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "_keyboardUIMode");
}

void sub_1D8097190(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::firstResponder(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v2, "webViewFirstResponder:", objc_loadWeak(v1));
}

void sub_1D809720C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::makeFirstResponder(id *this, WAKResponder *a2)
{
  id *v3;
  void *v4;

  v3 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "_pushPerformingProgrammaticFocus");
  v4 = (void *)objc_msgSend(objc_loadWeak(v3), "_UIDelegateForwarder");
  objc_msgSend(v4, "webView:makeFirstResponder:", objc_loadWeak(v3), a2);
  return objc_msgSend(objc_loadWeak(v3), "_popPerformingProgrammaticFocus");
}

uint64_t WebChromeClient::selectItemWritingDirectionIsNatural(WebChromeClient *this)
{
  return 0;
}

uint64_t WebChromeClient::selectItemAlignmentFollowsMenuWritingDirection(WebChromeClient *this)
{
  return 1;
}

void WebChromeClient::createPopupMenu(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebChromeClient::createSearchPopupMenu(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebChromeClient::shouldPaintEntireContents(WebChromeClient *this)
{
  return 0;
}

uint64_t WebChromeClient::setNeedsOneShotDrawingSynchronization(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "_setNeedsOneShotDrawingSynchronization:", 1);
}

uint64_t WebChromeClient::triggerRenderingUpdate(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "_scheduleUpdateRendering");
}

uint64_t WebChromeClient::canEnterVideoFullscreen(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::supportsVideoFullscreen(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::setMockVideoPresentationModeEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t WebChromeClient::enterVideoFullscreenForVideoElement(WebChromeClient *this, WebCore::HTMLVideoElement *a2, uint64_t a3)
{
  WebCore::HTMLVideoElement *v4;

  if (*((_BYTE *)this + 8))
    return WebCore::HTMLMediaElement::didBecomeFullscreenElement(a2);
  v4 = a2;
  return objc_msgSend(objc_loadWeak((id *)this + 2), "_enterVideoFullscreenForVideoElement:mode:", &v4, a3);
}

void sub_1D8097440(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::exitVideoFullscreenForVideoElement(uint64_t a1, WebCore::HTMLMediaElement *this, uint64_t *a3)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 8))
    WebCore::HTMLMediaElement::didStopBeingFullscreenElement(this);
  else
    objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_exitVideoFullscreen");
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1D80974B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::exitVideoFullscreenToModeWithoutAnimation(id *this, WebCore::HTMLVideoElement *a2)
{
  if (*((_BYTE *)this + 8))
    return WebCore::HTMLMediaElement::didStopBeingFullscreenElement(a2);
  else
    return objc_msgSend(objc_loadWeak(this + 2), "_exitVideoFullscreen");
}

BOOL WebChromeClient::supportsFullScreenForElement(id *this, const WebCore::Element *a2, char a3)
{
  id *v5;
  WebView *Weak;
  WebCore::Node *v7;

  v5 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 0;
  Weak = (WebView *)objc_loadWeak(v5);
  v7 = kit(a2);
  return CallUIDelegateReturningBoolean(0, Weak, (objc_selector *)sel_webView_supportsFullScreenForElement_withKeyboard_, (objc_object *)v7, a3);
}

void WebChromeClient::enterFullScreenForElement(id *this, WebCore::Element *a2)
{
  id *v3;
  WebKitFullScreenListener *v4;
  WebView *Weak;
  WebCore::Node *v6;

  v3 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = -[WebKitFullScreenListener initWithElement:]([WebKitFullScreenListener alloc], "initWithElement:", a2);
    Weak = (WebView *)objc_loadWeak(v3);
    v6 = kit(a2);
    CallUIDelegate(Weak, (objc_selector *)sel_webView_enterFullScreenForElement_listener_, (objc_object *)v6, (objc_object *)v4);
    if (v4)
      CFRelease(v4);
  }
}

void sub_1D8097698(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebChromeClient::exitFullScreenForElement(id *this, WebCore::Element *a2)
{
  id *v3;
  WebKitFullScreenListener *v4;
  WebView *Weak;
  WebCore::Node *v6;

  v3 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = -[WebKitFullScreenListener initWithElement:]([WebKitFullScreenListener alloc], "initWithElement:", a2);
    Weak = (WebView *)objc_loadWeak(v3);
    v6 = kit(a2);
    CallUIDelegate(Weak, (objc_selector *)sel_webView_exitFullScreenForElement_listener_, (objc_object *)v6, (objc_object *)v4);
    if (v4)
      CFRelease(v4);
  }
}

void sub_1D8097750(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebChromeClient::createGPUForWebGPU(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebChromeClient::createBarcodeDetector@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = MEMORY[0x1D82A4A3C](v4, a1);
  *a2 = v4;
  return result;
}

void sub_1D80977B0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::getBarcodeDetectorSupportedFormats()
{
  return WebCore::ShapeDetection::BarcodeDetectorImpl::getSupportedFormats();
}

uint64_t WebChromeClient::createFaceDetector@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = WTF::fastMalloc((WTF *)0x10);
  result = WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl();
  *a1 = v2;
  return result;
}

void sub_1D809780C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::createTextDetector@<X0>(WebCore::ShapeDetection::TextDetectorImpl **a1@<X8>)
{
  WebCore::ShapeDetection::TextDetectorImpl *v3;
  uint64_t result;

  v3 = (WebCore::ShapeDetection::TextDetectorImpl *)WTF::fastMalloc((WTF *)0x10);
  result = WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(v3);
  *a1 = v3;
  return result;
}

void sub_1D8097850(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1D80978A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebChromeClient::hoverSupportedByPrimaryPointingDevice(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::hoverSupportedByAnyAvailablePointingDevice(WebChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::pointerCharacteristicsOfPrimaryPointingDevice(WebChromeClient *this)
{
  return 258;
}

uint64_t WebChromeClient::pointerCharacteristicsOfAllAvailablePointingDevices(WebChromeClient *this)
{
  return 2;
}

uint64_t WebCore::ChromeClient::supportsSettingCursor(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::shouldUseMouseEventForSelection()
{
  return 1;
}

float WebCore::ChromeClient::screenSize(WebCore::ChromeClient *this)
{
  float v1;

  (*(void (**)(WebCore::ChromeClient *))(*(_QWORD *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::availableScreenSize(WebCore::ChromeClient *this)
{
  float v1;

  (*(void (**)(WebCore::ChromeClient *))(*(_QWORD *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::overrideScreenSize(WebCore::ChromeClient *this)
{
  float v1;

  (*(void (**)(WebCore::ChromeClient *))(*(_QWORD *)this + 16))(this);
  return v1;
}

float WebCore::ChromeClient::overrideAvailableScreenSize(WebCore::ChromeClient *this)
{
  float v1;

  (*(void (**)(WebCore::ChromeClient *))(*(_QWORD *)this + 16))(this);
  return v1;
}

void WebCore::ChromeClient::underlayColor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::appHighlightsVisiblility(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createWorkerClient(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double WebCore::ChromeClient::eventThrottlingDelay(WebCore::ChromeClient *this)
{
  return 0.0;
}

uint64_t WebCore::ChromeClient::fetchCustomFixedPositionLayoutRect()
{
  return 0;
}

uint64_t WebChromeClient::canShowDataListSuggestionLabels(WebChromeClient *this)
{
  return 0;
}

WTF *WebCore::ChromeClient::showContactPicker(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WTF *result;
  StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  unsigned int v11;
  char v12;

  LOBYTE(v9) = 0;
  v12 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v9);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v12)
  {
    if (v11)
    {
      v6 = v9;
      v7 = 48 * v11;
      do
      {
        WebCore::ContactInfo::~ContactInfo(v6, v5);
        v6 = (WTF *)(v8 + 48);
        v7 -= 48;
      }
      while (v7);
    }
    result = v9;
    if (v9)
    {
      v9 = 0;
      v10 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_1D8097A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  StringImpl *v4;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::hasStablePageScaleFactor(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::graphicsLayerFactory(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::displayRefreshMonitorFactory(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createImageBuffer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::shouldTriggerRenderingUpdate(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::scheduleRenderingUpdate(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::remoteImagesCountForTesting(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::allowsAcceleratedCompositing(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebChromeClient::allowedCompositingTriggers(WebChromeClient *this)
{
  return 159;
}

uint64_t WebCore::ChromeClient::layerTreeStateIsFrozen(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::createScrollingCoordinator(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::supportsVideoFullscreenStandby(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::requiresFullscreenForVideoPlayback(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::preferredScrollbarOverlayStyle(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::isSVGImageChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

float WebCore::ChromeClient::minimumWindowSize(WebCore::ChromeClient *this)
{
  return 100.0;
}

uint64_t WebCore::ChromeClient::isEmptyChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::plugInStartLabelTitle(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInStartLabelSubtitle(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInExtraStyleSheet(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ChromeClient::plugInExtraScript(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ChromeClient::shouldNotifyOnFormChanges(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::shouldUseTiledBackingForFrameView()
{
  return 0;
}

__n128 WebCore::ChromeClient::applyLinkDecorationFilteringWithResult@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  __n128 result;

  v2 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

__n128 WebCore::ChromeClient::allowedQueryParametersForAdvancedPrivacyProtections@<Q0>(const URL *a1@<X1>, uint64_t a2@<X8>)
{
  StringImpl *m_ptr;
  __n128 result;

  m_ptr = a1->m_string.m_impl.m_ptr;
  if (a1->m_string.m_impl.m_ptr)
    *(_DWORD *)m_ptr += 2;
  *(_QWORD *)a2 = m_ptr;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)a1 + 8);
  result = *(__n128 *)&a1->m_hostEnd;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t WebCore::ChromeClient::shouldDispatchFakeMouseMoveEvents(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::hasStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1D8097CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::ChromeClient::requestStorageAccess(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  __int16 v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v11 = 0;
  v12 = a5;
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = 0;
  v13 = v6;
  v14 = v7;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(a6, &v11);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v8);
      result = v13;
      v13 = 0;
      if (!result)
        return result;
      goto LABEL_7;
    }
    *(_DWORD *)v9 -= 2;
  }
  result = v13;
  v13 = 0;
  if (!result)
    return result;
LABEL_7:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  *(_DWORD *)result -= 2;
  return result;
}

void sub_1D8097D64(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::RequestStorageAccessResult::~RequestStorageAccessResult((WebCore::RequestStorageAccessResult *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::hasPageLevelStorageAccess()
{
  return 0;
}

uint64_t WebCore::ChromeClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1D8097DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::userIsInteracting(WebCore::ChromeClient *this)
{
  return 0;
}

void WebCore::ChromeClient::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  WebCore::Node *v5;
  WebCore::Node *v6;

  v4 = *a4;
  if (*a4)
  {
    v6 = 0;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v4 + 16))(v4, &v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
  }
}

void sub_1D8097E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  uint64_t v10;
  uint64_t v11;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::needsImageOverlayControllerForSelectionPainting(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1D8097F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::startApplePayAMSUISession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  __int16 v6;

  v6 = 0;
  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v4 + 16))(v4, &v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1D8097F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ChromeClient::isUsingUISideCompositing(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::isInStableState(WebCore::ChromeClient *this)
{
  return 1;
}

double WebCore::ChromeClient::baseViewportLayoutSizeScaleFactor(WebCore::ChromeClient *this)
{
  return 1.0;
}

uint64_t WebCore::ChromeClient::getImageBufferResourceLimitsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v4[72];

  v2 = *a2;
  *a2 = 0;
  v4[0] = 0;
  v4[64] = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1D8098050(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  WebCore::ContactInfo *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v3)
    {
      v4 = *(WebCore::ContactInfo **)a1;
      v5 = 48 * v3;
      do
      {
        WebCore::ContactInfo::~ContactInfo(v4, a2);
        v4 = (WebCore::ContactInfo *)(v6 + 48);
        v5 -= 48;
      }
      while (v5);
    }
    v7 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  return a1;
}

void WebCore::ContactInfo::~ContactInfo(WebCore::ContactInfo *this, StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *v17;

  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 4);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 7);
  if ((_DWORD)v8)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((unsigned int *)this + 3);
  if ((_DWORD)v13)
  {
    v14 = *(WTF::StringImpl ***)this;
    v15 = 8 * v13;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v17 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v17, a2);
  }
}

uint64_t WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(uint64_t *a1, __int16 *a2)
{
  uint64_t v2;
  __int128 v3;
  StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int16 v8;
  char v9;
  WTF::StringImpl *v10[2];

  v2 = *a1;
  *a1 = 0;
  v8 = *a2;
  v9 = *((_BYTE *)a2 + 2);
  v3 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a2 + 4) = 0u;
  *(_OWORD *)v10 = v3;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 16))(v2, &v8);
  v5 = v10[1];
  v10[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v4);
      v6 = v10[0];
      v10[0] = 0;
      if (!v6)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      goto LABEL_7;
    }
    *(_DWORD *)v5 -= 2;
  }
  v6 = v10[0];
  v10[0] = 0;
  if (!v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
LABEL_7:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v4);
  else
    *(_DWORD *)v6 -= 2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1D80982D8(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  StringImpl *v14;

  WebCore::RequestStorageAccessResult::~RequestStorageAccessResult((WebCore::RequestStorageAccessResult *)&a12, a2);
  WebCore::RequestStorageAccessResult::~RequestStorageAccessResult((WebCore::RequestStorageAccessResult *)&a9, v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void WebCore::RequestStorageAccessResult::~RequestStorageAccessResult(WebCore::RequestStorageAccessResult *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v4)
        return;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    return;
LABEL_7:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, a2);
  else
    *(_DWORD *)v4 -= 2;
}

WebCore::Icon *WTF::RefCounted<WebCore::Icon>::deref(WebCore::Icon *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::Icon::~Icon(result);
    return (WebCore::Icon *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebChromeClientIOS::setWindowRect(id *this, const WebCore::FloatRect *a2)
{
  id *v2;
  void *v3;
  id Weak;

  v2 = this + 2;
  v3 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  Weak = objc_loadWeak(v2);
  WebCore::FloatRect::operator CGRect();
  return objc_msgSend(v3, "webView:setFrame:", Weak);
}

float WebChromeClientIOS::windowRect(id *this)
{
  id *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CGRect *v7;
  _QWORD v9[4];
  float v10;

  v1 = this + 2;
  v2 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  objc_msgSend(v2, "webViewFrame:", objc_loadWeak(v1));
  v9[0] = v3;
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  WebCore::enclosingIntRect((WebCore *)v9, v7);
  WebCore::FloatRect::FloatRect();
  return v10;
}

uint64_t WebChromeClientIOS::focus(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v2, "webViewFocus:", objc_loadWeak(v1));
}

uint64_t WebChromeClientIOS::runJavaScriptAlert(id *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  id *v6;
  void *v7;
  id Weak;
  const __CFString *v9;
  _QWORD *v10;
  uint64_t v11;

  WebThreadLockPushModal();
  v6 = this + 2;
  v7 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  Weak = objc_loadWeak(v6);
  if (*(_QWORD *)a3)
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E9D6EC48;
  v10 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v10 + 1072))(v10) & 1) != 0)
    v11 = 0;
  else
    v11 = v10[2];
  objc_msgSend(v7, "webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:", Weak, v9, v11);
  return WebThreadLockPopModal();
}

uint64_t WebChromeClientIOS::runJavaScriptConfirm(id *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  id *v6;
  void *v7;
  id Weak;
  const __CFString *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  WebThreadLockPushModal();
  v6 = this + 2;
  v7 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  Weak = objc_loadWeak(v6);
  if (*(_QWORD *)a3)
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E9D6EC48;
  v10 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v10 + 1072))(v10) & 1) != 0)
    v11 = 0;
  else
    v11 = v10[2];
  v12 = objc_msgSend(v7, "webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:", Weak, v9, v11);
  WebThreadLockPopModal();
  return v12;
}

BOOL WebChromeClientIOS::runJavaScriptPrompt(id *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, WTF::StringImpl **a5)
{
  id *v10;
  void *v11;
  id Weak;
  const __CFString *v13;
  const __CFString *v14;
  _QWORD *v15;
  uint64_t v16;
  StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  StringImpl *v21;
  WTF::StringImpl *v23;

  WebThreadLockPushModal();
  v10 = this + 2;
  v11 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  Weak = objc_loadWeak(v10);
  if (*(_QWORD *)a3)
  {
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    if (*(_QWORD *)a4)
    {
LABEL_3:
      v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
      goto LABEL_6;
    }
  }
  else
  {
    v13 = &stru_1E9D6EC48;
    if (*(_QWORD *)a4)
      goto LABEL_3;
  }
  v14 = &stru_1E9D6EC48;
LABEL_6:
  v15 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v15 + 1072))(v15) & 1) != 0)
    v16 = 0;
  else
    v16 = v15[2];
  MEMORY[0x1D82A3998](&v23, objc_msgSend(v11, "webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:", Weak, v13, v14, v16));
  v18 = v23;
  v23 = 0;
  v19 = *a5;
  *a5 = v18;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 != 2)
    {
LABEL_13:
      *(_DWORD *)v19 = v20;
      goto LABEL_14;
    }
    WTF::StringImpl::destroy(v19, v17);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v21);
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
LABEL_14:
  WebThreadLockPopModal();
  return *a5 != 0;
}

void WebChromeClientIOS::runOpenPanel(WebChromeClientIOS *this, WebCore::LocalFrame *a2, WebCore::FileChooser *a3)
{
  uint64_t v5;
  WebOpenPanelResultListener *v6;
  int v7;
  uint64_t v8;
  const void *v9;
  CFTypeRef v10;
  WTF::RunLoop *IsCurrent;
  _QWORD *v12;
  _QWORD *v13;
  id *v14;
  void *v15;
  CFTypeRef cf;
  WebOpenPanelResultListener *v17;
  const void *v18;
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)a3 + 17);
  v6 = -[WebOpenPanelResultListener initWithChooser:]([WebOpenPanelResultListener alloc], "initWithChooser:", a3);
  v7 = *((unsigned __int8 *)a3 + 72);
  if (v7 == 2)
    v8 = 2;
  else
    v8 = v7 == 1;
  v20[0] = CFSTR("WebOpenPanelConfigurationAllowMultipleFilesKey");
  v21[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5);
  v20[1] = CFSTR("WebOpenPanelConfigurationMimeTypesKey");
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)a3 + 24, (uint64_t *)&cf);
  v21[1] = cf;
  v20[2] = CFSTR("WebOpenPanelConfigurationMediaCaptureTypeKey");
  v21[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v8);
  v9 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 3);
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  IsCurrent = (WTF::RunLoop *)WebThreadIsCurrent();
  if ((_DWORD)IsCurrent)
  {
    WTF::RunLoop::main(IsCurrent);
    cf = this;
    v17 = v6;
    v18 = v9;
    if (v9)
      CFRetain(v9);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v12 = &off_1E9D6D408;
    v12[1] = this;
    v12[2] = v6;
    v12[3] = v9;
    v17 = 0;
    v18 = 0;
    v19 = v12;
    WTF::RunLoop::dispatch();
    v13 = v19;
    v19 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  else
  {
    v14 = (id *)((char *)this + 16);
    v15 = (void *)objc_msgSend(objc_loadWeak(v14), "_UIKitDelegateForwarder");
    objc_msgSend(v15, "webView:runOpenPanelForFileButtonWithResultListener:configuration:", objc_loadWeak(v14), v6, v9);
    if (v6)
      CFRelease(v6);
  }
}

void sub_1D8098910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13)
{
  const void *v13;

  if (v13)
  {
    CFRelease(v13);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef cf;

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  *a2 = v4;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = (void *)v4;
    v8 = *(WTF **)a1;
    v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement(v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        v10 = cf;
        cf = 0;
        CFRelease(v10);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_1D8098A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  const void *v11;

  if (cf)
  {
    CFRelease(cf);
    *v10 = 0;
    if (!v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    *v10 = 0;
    if (!v11)
      goto LABEL_3;
  }
  CFRelease(v11);
  _Unwind_Resume(exception_object);
}

uint64_t WebChromeClientIOS::runOpenPanel(WebCore::LocalFrame &,WebCore::FileChooser &)::$_0::~$_0(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WebChromeClientIOS::didPreventDefaultForEvent(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder");
  return objc_msgSend(v2, "webViewDidPreventDefaultForEvent:", objc_loadWeak(v1));
}

uint64_t WebChromeClientIOS::didReceiveMobileDocType(uint64_t this, int a2)
{
  id *v2;
  void *v3;

  if (a2)
  {
    v2 = (id *)(this + 16);
    v3 = (void *)objc_msgSend(objc_loadWeak((id *)(this + 16)), "_UIKitDelegateForwarder");
    return objc_msgSend(v3, "webViewDidReceiveMobileDocType:", objc_loadWeak(v2));
  }
  return this;
}

uint64_t WebChromeClientIOS::setNeedsScrollNotifications(id *this, WebCore::LocalFrame *a2, uint64_t a3)
{
  id *v5;
  void *v6;
  id Weak;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = this + 2;
  v6 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder");
  Weak = objc_loadWeak(v5);
  v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v9 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v9 + 1072))(v9) & 1) != 0)
    v10 = 0;
  else
    v10 = v9[2];
  return objc_msgSend(v6, "webView:needsScrollNotifications:forFrame:", Weak, v8, v10);
}

uint64_t WebChromeClientIOS::didFinishContentChangeObserving(uint64_t result, uint64_t a2, uint64_t a3)
{
  id *v5;
  void *v6;
  id Weak;
  _QWORD *v8;
  uint64_t v9;

  if (*(_QWORD *)(a2 + 296))
  {
    v5 = (id *)(result + 16);
    v6 = (void *)objc_msgSend(objc_loadWeak((id *)(result + 16)), "_UIKitDelegateForwarder");
    Weak = objc_loadWeak(v5);
    v8 = *(_QWORD **)(*(_QWORD *)(a2 + 280) + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) != 0)
      v9 = 0;
    else
      v9 = v8[2];
    return objc_msgSend(v6, "webView:didObserveDeferredContentChange:forFrame:", Weak, a3, v9);
  }
  return result;
}

float WebChromeClientIOS::availableScreenSize(WebChromeClientIOS *this)
{
  return 0.0;
}

float WebChromeClientIOS::overrideAvailableScreenSize(WebChromeClientIOS *this)
{
  return 0.0;
}

uint64_t WebChromeClientIOS::dispatchViewportPropertiesDidChange(uint64_t a1, uint64_t a2)
{
  id *v3;
  void *v4;
  id Weak;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  __CFString **v12;
  __CFString **v13;
  double v14;
  _QWORD v16[8];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v3 = (id *)(a1 + 16);
  v4 = (void *)objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_UIKitDelegateForwarder");
  Weak = objc_loadWeak(v3);
  v16[0] = WebViewportInitialScaleKey;
  LODWORD(v6) = *(_DWORD *)(a2 + 28);
  v17[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
  v16[1] = WebViewportMinimumScaleKey;
  LODWORD(v7) = *(_DWORD *)(a2 + 32);
  v17[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7);
  v16[2] = WebViewportMaximumScaleKey;
  LODWORD(v8) = *(_DWORD *)(a2 + 36);
  v17[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
  v16[3] = WebViewportUserScalableKey;
  LODWORD(v9) = *(_DWORD *)(a2 + 40);
  v17[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
  v17[4] = &unk_1E9D95908;
  v16[4] = WebViewportShrinkToFitKey;
  v16[5] = WebViewportFitKey;
  v11 = *(unsigned __int8 *)(a2 + 52);
  v12 = &WebViewportFitContainValue;
  if (v11 != 1)
    v12 = &WebViewportFitAutoValue;
  if (v11 == 2)
    v13 = &WebViewportFitCoverValue;
  else
    v13 = v12;
  v17[5] = *v13;
  v16[6] = WebViewportWidthKey;
  LODWORD(v10) = *(_DWORD *)(a2 + 4);
  v17[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10);
  v16[7] = WebViewportHeightKey;
  LODWORD(v14) = *(_DWORD *)(a2 + 16);
  v17[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v14);
  return objc_msgSend(v4, "webView:didReceiveViewportArguments:", Weak, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 8));
}

uint64_t WebChromeClientIOS::notifyRevealedSelectionByScrollingFrame(id *this, WebCore::LocalFrame *a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder");
  v4 = *(_QWORD **)(*((_QWORD *)a2 + 35) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 1072))(v4) & 1) != 0)
    v5 = 0;
  else
    v5 = v4[2];
  return objc_msgSend(v3, "revealedSelectionByScrollingWebFrame:", v5);
}

uint64_t WebChromeClientIOS::isStopping(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "_isStopping");
}

uint64_t WebChromeClientIOS::didLayout(uint64_t a1, int a2)
{
  id *v3;
  void *v4;

  v3 = (id *)(a1 + 16);
  v4 = (void *)objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_UIKitDelegate");
  return objc_msgSend(v4, "webThreadWebViewDidLayout:byScrolling:", objc_loadWeak(v3), a2 == 1);
}

uint64_t WebChromeClientIOS::didStartOverflowScroll(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder"), "asyncForwarder");
  return objc_msgSend(v2, "webViewDidStartOverflowScroll:", objc_loadWeak(v1));
}

uint64_t WebChromeClientIOS::didEndOverflowScroll(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder"), "asyncForwarder");
  return objc_msgSend(v2, "webViewDidEndOverflowScroll:", objc_loadWeak(v1));
}

uint64_t WebChromeClientIOS::suppressFormNotifications(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebChromeClientIOS::restoreFormNotifications(uint64_t this)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(this + 24);
  if (v1 <= 0)
    v2 = 0;
  else
    v2 = v1 - 1;
  *(_DWORD *)(this + 24) = v2;
  return this;
}

uint64_t WebChromeClientIOS::elementDidFocus(uint64_t result, WebCore::Node *a2)
{
  id *v3;
  void *v4;
  id Weak;

  if (*(int *)(result + 24) <= 0)
  {
    v3 = (id *)(result + 16);
    v4 = (void *)objc_msgSend(objc_loadWeak((id *)(result + 16)), "_UIKitDelegateForwarder");
    Weak = objc_loadWeak(v3);
    return objc_msgSend(v4, "webView:elementDidFocusNode:", Weak, kit(a2));
  }
  return result;
}

uint64_t WebChromeClientIOS::elementDidBlur(uint64_t this, WebCore::Element *a2)
{
  id *v3;
  void *v4;
  id Weak;

  if (*(int *)(this + 24) <= 0)
  {
    v3 = (id *)(this + 16);
    v4 = (void *)objc_msgSend(objc_loadWeak((id *)(this + 16)), "_UIKitDelegateForwarder");
    Weak = objc_loadWeak(v3);
    return objc_msgSend(v4, "webView:elementDidBlurNode:", Weak, kit(a2));
  }
  return this;
}

uint64_t WebChromeClientIOS::selectItemWritingDirectionIsNatural(WebChromeClientIOS *this)
{
  return 0;
}

uint64_t WebChromeClientIOS::selectItemAlignmentFollowsMenuWritingDirection(WebChromeClientIOS *this)
{
  return 1;
}

uint64_t WebChromeClientIOS::createPopupMenu@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &unk_1E9D69FA0;
  *(_QWORD *)(result + 16) = a1;
  *a2 = result;
  return result;
}

uint64_t WebChromeClientIOS::createSearchPopupMenu@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E9D69FE0;
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &unk_1E9D69FA0;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(v4 + 16) = result;
  *a2 = v4;
  return result;
}

uint64_t WebChromeClientIOS::attachRootGraphicsLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;
  void *v5;
  id Weak;
  uint64_t v7;

  v4 = (id *)(a1 + 16);
  v5 = (void *)objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_UIKitDelegate");
  Weak = objc_loadWeak(v4);
  if (a3)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 584))(a3);
  else
    v7 = 0;
  return objc_msgSend(v5, "_webthread_webView:attachRootLayer:", Weak, v7);
}

uint64_t WebChromeClientIOS::didFlushCompositingLayers(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend((id)objc_msgSend(objc_loadWeak(this + 2), "_UIKitDelegateForwarder"), "asyncForwarder");
  return objc_msgSend(v2, "webViewDidCommitCompositingLayerChanges:", objc_loadWeak(v1));
}

uint64_t WebChromeClientIOS::fetchCustomFixedPositionLayoutRect(uint64_t a1, uint64_t *a2)
{
  const CGRect *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[32];

  v4 = objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_fetchCustomFixedPositionLayoutRect:", v7);
  if ((_DWORD)v4)
  {
    *a2 = WebCore::enclosingIntRect((WebCore *)v7, v3);
    a2[1] = v5;
  }
  return v4;
}

uint64_t WebChromeClientIOS::updateViewportConstrainedLayers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend((id)objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_fixedPositionContent"), "setViewportConstrainedLayers:stickyContainerMap:", a2, a3);
}

uint64_t WebChromeClientIOS::addOrUpdateScrollingLayer(id *this, WebCore::Node *a2, CALayer *a3, CALayer *a4, const WebCore::IntSize *a5, uint64_t a6, char a7)
{
  WebCore::Node *v12;
  void *v13;
  id Weak;
  void *v15;
  uint64_t v17;

  v12 = kit(a2);
  this += 2;
  v13 = (void *)objc_msgSend((id)objc_msgSend(objc_loadWeak(this), "_UIKitDelegateForwarder"), "asyncForwarder");
  Weak = objc_loadWeak(this);
  v15 = (void *)MEMORY[0x1E0CB3B18];
  WebCore::IntSize::operator CGSize();
  LOBYTE(v17) = a7;
  return objc_msgSend(v13, "webView:didCreateOrUpdateScrollingLayer:withContentsLayer:scrollSize:forNode:allowHorizontalScrollbar:allowVerticalScrollbar:", Weak, a3, a4, objc_msgSend(v15, "valueWithSize:"), v12, a6, v17);
}

uint64_t WebChromeClientIOS::removeScrollingLayer(id *this, WebCore::Node *a2, CALayer *a3, CALayer *a4)
{
  WebCore::Node *v7;
  void *v8;

  v7 = kit(a2);
  this += 2;
  v8 = (void *)objc_msgSend((id)objc_msgSend(objc_loadWeak(this), "_UIKitDelegateForwarder"), "asyncForwarder");
  return objc_msgSend(v8, "webView:willRemoveScrollingLayer:withContentsLayer:forNode:", objc_loadWeak(this), a3, a4, v7);
}

uint64_t WebChromeClientIOS::webAppOrientationsUpdated(id *this)
{
  id *v1;
  void *v2;

  v1 = this + 2;
  v2 = (void *)objc_msgSend(objc_loadWeak(this + 2), "_UIDelegateForwarder");
  return objc_msgSend(v2, "webViewSupportedOrientationsUpdated:", objc_loadWeak(v1));
}

id WebChromeClientIOS::focusedElementChanged(id this, WebCore::Element *a2)
{
  uint64_t v3;
  WebView *Weak;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  objc_object *v9;

  if (a2)
  {
    if ((*((_WORD *)a2 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      v3 = (uint64_t)this;
      this = (id)WebCore::HTMLInputElement::isText(a2);
      if ((_DWORD)this)
      {
        Weak = (WebView *)objc_loadWeak((id *)(v3 + 16));
        v5 = kit(a2);
        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
        if (v6
          && (v7 = *(_QWORD *)(v6 + 8)) != 0
          && (v8 = *(_QWORD **)(*(_QWORD *)(v7 + 280) + 16),
              ((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) == 0))
        {
          v9 = (objc_object *)v8[2];
        }
        else
        {
          v9 = 0;
        }
        return CallFormDelegate(Weak, (objc_selector *)sel_didFocusTextField_inFrame_, (objc_object *)v5, v9);
      }
    }
  }
  return this;
}

uint64_t WebChromeClientIOS::showPlaybackTargetPicker(uint64_t a1, uint64_t a2)
{
  id *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = (id *)(a1 + 16);
  objc_msgSend((id)objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_UIKitDelegateForwarder"), "interactionLocation");
  objc_msgSend((id)objc_msgSend(objc_loadWeak(v3), "mainFrame"), "elementRectAtPoint:", v4, v5);
  return objc_msgSend((id)objc_msgSend(objc_loadWeak(v3), "_UIKitDelegateForwarder"), "showPlaybackTargetPicker:fromRect:", a2, v6, v7, v8, v9);
}

uint64_t WebChromeClientIOS::createIconForFiles()
{
  return WebCore::Icon::createIconForFiles();
}

uint64_t WebChromeClientIOS::deviceOrientation(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "_deviceOrientation");
}

uint64_t WebChromeClientIOS::hoverSupportedByPrimaryPointingDevice(WebChromeClientIOS *this)
{
  return 0;
}

uint64_t WebChromeClientIOS::hoverSupportedByAnyAvailablePointingDevice(WebChromeClientIOS *this)
{
  return 0;
}

uint64_t WebChromeClientIOS::pointerCharacteristicsOfPrimaryPointingDevice(WebChromeClientIOS *this)
{
  return 257;
}

uint64_t WebChromeClientIOS::pointerCharacteristicsOfAllAvailablePointingDevices(WebChromeClientIOS *this)
{
  return 1;
}

uint64_t WebChromeClientIOS::showDataDetectorsUIForElement()
{
  return 0;
}

void WebChromeClientIOS::~WebChromeClientIOS(id *this)
{
  objc_destroyWeak(this + 2);
  WebCore::ChromeClient::~ChromeClient((WebCore::ChromeClient *)this);
}

{
  WTF *v2;
  void *v3;

  objc_destroyWeak(this + 2);
  WebCore::ChromeClient::~ChromeClient((WebCore::ChromeClient *)this);
  WTF::fastFree(v2, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebChromeClientIOS::runOpenPanel(WebCore::LocalFrame &,WebCore::FileChooser &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E9D6D408;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebChromeClientIOS::runOpenPanel(WebCore::LocalFrame &,WebCore::FileChooser &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E9D6D408;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebChromeClientIOS::runOpenPanel(WebCore::LocalFrame &,WebCore::FileChooser &)::$_0,void>::call(_QWORD *a1)
{
  id *v2;
  void *v3;

  v2 = (id *)(a1[1] + 16);
  v3 = (void *)objc_msgSend(objc_loadWeak(v2), "_UIKitDelegateForwarder");
  return objc_msgSend(v3, "webView:runOpenPanelForFileButtonWithResultListener:configuration:", objc_loadWeak(v2), a1[2], a1[3]);
}

void sub_1D8099A24(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  WTF *v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, WTF *);
  v6 = va_arg(va1, _QWORD);
  std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100]((WTF **)va, a2);
  MEMORY[0x1D82A33C8](va1);
  _Unwind_Resume(a1);
}

uint64_t createNSCountedSet(uint64_t *a1, uint64_t *a2)
{
  id v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v4 = objc_alloc(MEMORY[0x1E0CB3550]);
  if (*a2)
  {
    result = objc_msgSend(v4, "initWithCapacity:", *(unsigned int *)(*a2 - 12));
    v6 = (void *)result;
    *a1 = result;
    v7 = *a2;
    if (*a2)
      goto LABEL_3;
LABEL_11:
    v10 = 0;
    v9 = v7;
    goto LABEL_12;
  }
  result = objc_msgSend(v4, "initWithCapacity:", 0);
  v6 = (void *)result;
  *a1 = result;
  v7 = *a2;
  if (!*a2)
    goto LABEL_11;
LABEL_3:
  v8 = *(unsigned int *)(v7 - 4);
  v9 = v7 + 16 * v8;
  if (*(_DWORD *)(v7 - 12))
  {
    v10 = v7;
    if ((_DWORD)v8)
    {
      v11 = 16 * v8;
      v10 = v7;
      while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
      {
        v10 += 16;
        v11 -= 16;
        if (!v11)
        {
          v10 = v9;
          if (v7)
            goto LABEL_13;
          goto LABEL_16;
        }
      }
    }
LABEL_12:
    if (v7)
      goto LABEL_13;
    goto LABEL_16;
  }
  v10 = v7 + 16 * v8;
  v9 = v10;
  if (v7)
  {
LABEL_13:
    v12 = v7 + 16 * *(unsigned int *)(v7 - 4);
    if (v12 == v10)
      return result;
    goto LABEL_19;
  }
LABEL_16:
  v12 = 0;
  if (!v10)
    return result;
  do
  {
LABEL_19:
    result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)v10);
    if (*(_DWORD *)(v10 + 8))
    {
      v13 = result;
      v14 = 0;
      do
      {
        result = objc_msgSend(v6, "addObject:", v13);
        ++v14;
      }
      while (v14 < *(_DWORD *)(v10 + 8));
    }
    v15 = v10 + 16;
    v10 = v9;
    if (v15 != v9)
    {
      v10 = v15;
      while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
      {
        v10 += 16;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  while (v10 != v12);
  return result;
}

void sub_1D8099BD8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

WTF **std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_QWORD *)v3)
      WTF::fastFree((WTF *)(*(_QWORD *)v3 - 16), a2);
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void sub_1D8099CF4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  WTF *v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, WTF *);
  v6 = va_arg(va1, _QWORD);
  std::unique_ptr<WTF::HashCountedSet<char const*,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>>>::~unique_ptr[abi:sn180100]((WTF **)va, a2);
  MEMORY[0x1D82A33C8](va1);
  _Unwind_Resume(a1);
}

void sub_1D809A260(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D809A32C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D809A438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)va);
  _Unwind_Resume(a1);
}

unint64_t WebCryptoClient::wrapCryptoKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id *v3;
  uint64_t v4;
  WebView *Weak;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  void *v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  WTF *v25;
  char v26;

  v3 = (id *)(a1 + 8);
  objc_msgSend(objc_loadWeak((id *)(a1 + 8)), "UIDelegate");
  v4 = objc_opt_respondsToSelector();
  if ((v4 & 1) == 0)
  {
    WebCore::defaultWebCryptoMasterKey((WebCore *)v4);
    if (!v26)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      return 0;
    }
    if ((WebCore::wrapSerializedCryptoKey() & 1) != 0)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
    }
LABEL_30:
    if (v25)
      WTF::fastFree(v25, v14);
    return 0;
  }
  Weak = (WebView *)objc_loadWeak(v3);
  v6 = CallUIDelegate(Weak, (objc_selector *)sel_webCryptoMasterKeyForWebView_);
  v7 = v6;
  if (!v6)
  {
    v25 = 0;
    goto LABEL_26;
  }
  v8 = objc_msgSend(v6, "bytes");
  result = objc_msgSend(v7, "length");
  v10 = result;
  v25 = 0;
  if (!result)
    goto LABEL_26;
  if (!HIDWORD(result))
  {
    v11 = (_BYTE *)WTF::fastMalloc((WTF *)result);
    v25 = (WTF *)v11;
    if (v10 < 8)
    {
      v12 = (char *)v8;
      goto LABEL_25;
    }
    v12 = (char *)v8;
    if ((unint64_t)&v11[-v8] < 0x20)
      goto LABEL_25;
    if (v10 < 0x20)
    {
      v13 = 0;
      goto LABEL_20;
    }
    v13 = v10 & 0xFFFFFFFFFFFFFFE0;
    v15 = (__int128 *)(v8 + 16);
    v16 = v11 + 16;
    v17 = v10 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v18 = *v15;
      *(v16 - 1) = *(v15 - 1);
      *v16 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 32;
    }
    while (v17);
    if (v10 != v13)
    {
      if ((v10 & 0x18) == 0)
      {
        v12 = (char *)(v8 + v13);
        v11 += v13;
        goto LABEL_25;
      }
LABEL_20:
      v12 = (char *)(v8 + (v10 & 0xFFFFFFFFFFFFFFF8));
      v19 = (uint64_t *)(v8 + v13);
      v20 = &v11[v13];
      v21 = v13 - (v10 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v22 = *v19++;
        *v20++ = v22;
        v21 += 8;
      }
      while (v21);
      v11 += v10 & 0xFFFFFFFFFFFFFFF8;
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_26;
      do
      {
LABEL_25:
        v23 = *v12++;
        *v11++ = v23;
      }
      while (v12 != (char *)(v8 + v10));
    }
LABEL_26:
    if ((WebCore::wrapSerializedCryptoKey() & 1) != 0)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v24 = 1;
    }
    else
    {
      v24 = 0;
      *(_BYTE *)a2 = 0;
    }
    *(_BYTE *)(a2 + 16) = v24;
    goto LABEL_30;
  }
  __break(0xC471u);
  return result;
}

void sub_1D809A69C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13, WTF *a14, int a15)
{
  if (a13 && a10)
    WTF::fastFree(a10, a2);
  if (a14)
    WTF::fastFree(a14, a2);
  _Unwind_Resume(exception_object);
}

unint64_t WebCryptoClient::unwrapCryptoKey@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  void *v5;
  id *v6;
  uint64_t v7;
  WebView *Weak;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  WTF *v25;
  char v26;
  WTF *v27;
  char v28;

  result = WebCore::readSerializedCryptoKey();
  if (v28)
  {
    v6 = (id *)(a1 + 8);
    objc_msgSend(objc_loadWeak(v6), "UIDelegate");
    v7 = objc_opt_respondsToSelector();
    if ((v7 & 1) != 0)
    {
      Weak = (WebView *)objc_loadWeak(v6);
      v9 = CallUIDelegate(Weak, (objc_selector *)sel_webCryptoMasterKeyForWebView_);
      v10 = v9;
      if (!v9)
      {
        v25 = 0;
        goto LABEL_24;
      }
      v11 = objc_msgSend(v9, "bytes");
      result = objc_msgSend(v10, "length");
      v12 = result;
      v25 = 0;
      if (!result)
        goto LABEL_24;
      if (HIDWORD(result))
      {
        __break(0xC471u);
        __break(1u);
        return result;
      }
      v13 = (_BYTE *)WTF::fastMalloc((WTF *)result);
      v25 = (WTF *)v13;
      if (v12 < 8)
      {
        v14 = (char *)v11;
        goto LABEL_23;
      }
      v14 = (char *)v11;
      if ((unint64_t)&v13[-v11] < 0x20)
        goto LABEL_23;
      if (v12 >= 0x20)
      {
        v15 = v12 & 0xFFFFFFFFFFFFFFE0;
        v16 = (__int128 *)(v11 + 16);
        v17 = v13 + 16;
        v18 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 32;
        }
        while (v18);
        if (v12 == v15)
        {
LABEL_24:
          WebCore::unwrapCryptoKey();
          result = (unint64_t)v25;
          if (v25)
            result = WTF::fastFree(v25, v5);
          goto LABEL_26;
        }
        if ((v12 & 0x18) == 0)
        {
          v14 = (char *)(v11 + v15);
          v13 += v15;
          goto LABEL_23;
        }
      }
      else
      {
        v15 = 0;
      }
      v14 = (char *)(v11 + (v12 & 0xFFFFFFFFFFFFFFF8));
      v20 = (uint64_t *)(v11 + v15);
      v21 = &v13[v15];
      v22 = v15 - (v12 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v23 = *v20++;
        *v21++ = v23;
        v22 += 8;
      }
      while (v22);
      v13 += v12 & 0xFFFFFFFFFFFFFFF8;
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_24;
      do
      {
LABEL_23:
        v24 = *v14++;
        *v13++ = v24;
      }
      while (v14 != (char *)(v11 + v12));
      goto LABEL_24;
    }
    result = WebCore::defaultWebCryptoMasterKey((WebCore *)v7);
    if (v26)
      goto LABEL_24;
  }
  *a2 = 0;
  a2[16] = 0;
LABEL_26:
  if (v28)
  {
    result = (unint64_t)v27;
    if (v27)
      return WTF::fastFree(v27, v5);
  }
  return result;
}

void sub_1D809A92C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a12 && a9)
    WTF::fastFree(a9, a2);
  if (a20)
  {
    if (a16)
    {
      WTF::fastFree(a16, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCryptoClient::~WebCryptoClient(id *this)
{
  objc_destroyWeak(this + 1);
}

{
  void *v2;

  objc_destroyWeak(this + 1);
  WTF::fastFree((WTF *)this, v2);
}

void sub_1D809ABA4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D809ADC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D809ADDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;
  const void *v12;
  void *v14;

  CFRelease(v12);
  if (v11)
    CFRelease(v11);
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(unsigned int **)a1;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    do
    {
      v6 = v4[6];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E9D6D470[v6])(&v8, v4);
      v4[6] = -1;
      v4 += 8;
      v5 -= 32;
    }
    while (v5);
    v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void sub_1D809AFE0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D809AFF8(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;
  CFTypeRef v14;
  StringImpl *v15;

  v14 = cf;
  cf = 0;
  if (v14)
  {
    CFRelease(v14);
    if (!v12)
    {
LABEL_3:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  CFRelease(v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v15);
  _Unwind_Resume(a1);
}

void sub_1D809B228(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1D809B234(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WebCore::KeypressCommand::~KeypressCommand((WebCore::KeypressCommand *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D809B248(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1D809B22CLL);
}

void sub_1D809B404(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_WORD *WTF::NeverDestroyed<WebKit::WebDatabaseManagerClient,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>(_WORD *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  *(_QWORD *)a1 = &off_1E9D6D490;
  a1[4] = 0;
  *((_BYTE *)a1 + 10) = 0;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)WebKit::onNewDatabaseOriginAdded, CFSTR("com.apple.MobileSafariSettings.WebDatabaseOriginWasAddedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)WebKit::onDatabaseDeleted, CFSTR("com.apple.MobileSafariSettings.WebDatabaseWasDeletedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)WebKit::onDatabaseOriginDeleted, CFSTR("com.apple.MobileSafariSettings.WebDatabaseOriginWasDeletedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void WebKit::onNewDatabaseOriginAdded(WebKit *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  __CFNotificationCenter *LocalCenter;

  WebThreadLock();
  if (*((_BYTE *)a2 + 8))
  {
    *((_BYTE *)a2 + 8) = 0;
  }
  else
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, WebDatabaseOriginsDidChangeNotification, 0, 0, 1u);
  }
}

WebCore::DatabaseTracker *WebKit::onDatabaseDeleted(WebKit *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  WebCore::DatabaseTracker *result;
  WebCore::DatabaseTracker *v8;

  result = (WebCore::DatabaseTracker *)WebThreadLock();
  if (*((_BYTE *)a2 + 9))
  {
    *((_BYTE *)a2 + 9) = 0;
  }
  else
  {
    v8 = (WebCore::DatabaseTracker *)WebCore::DatabaseTracker::singleton(result);
    return (WebCore::DatabaseTracker *)WebCore::DatabaseTracker::removeDeletedOpenedDatabases(v8);
  }
  return result;
}

void WebKit::onDatabaseOriginDeleted(WebKit *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  __CFNotificationCenter *LocalCenter;

  WebThreadLock();
  if (*((_BYTE *)a2 + 10))
  {
    *((_BYTE *)a2 + 10) = 0;
  }
  else
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, WebDatabaseOriginsDidChangeNotification, 0, 0, 1u);
  }
}

void WebKit::WebDatabaseManagerClient::~WebDatabaseManagerClient(WebKit::WebDatabaseManagerClient *this)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, this, 0, 0);
}

{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, this, 0, 0);
  JUMPOUT(0x1D82A8D20);
}

void WebKit::WebDatabaseManagerClient::dispatchDidModifyOrigin(WebKit::WebDatabaseManagerClient *this, const WebCore::SecurityOriginData *a2)
{
  const WebCore::SecurityOriginData *v4;
  WebSecurityOrigin *v5;
  StringImpl *v6;
  id v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  char v15;

  if ((WTF::isMainThread(this) & 1) != 0)
  {
    v5 = [WebSecurityOrigin alloc];
    WebCore::SecurityOriginData::securityOrigin(a2);
    v7 = -[WebSecurityOrigin _initWithWebCoreSecurityOrigin:](v5, "_initWithWebCoreSecurityOrigin:", v14);
    if (v14)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v14);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v14));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v14);
        v11 = (WTF::StringImpl *)*((_QWORD *)v14 + 6);
        *((_QWORD *)v14 + 6) = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v6);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = (WTF::StringImpl *)*((_QWORD *)v14 + 5);
        *((_QWORD *)v14 + 5) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v6);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = *((unsigned int *)v14 + 8);
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, char *))off_1E9D6D4F0[v13])(&v15, (char *)v14 + 8);
        *((_DWORD *)v14 + 8) = -1;
        WTF::fastFree(v14, v6);
      }
    }
    v10 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter", 0);
    objc_msgSend(v10, "postNotificationName:object:", WebDatabaseDidModifyOriginNotification, v7);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    WebKit::DidModifyOriginData::dispatchToMainThread(this, a2, v4);
  }
}

void sub_1D809B7F0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D809B804(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::DidModifyOriginData *this, WebKit::WebDatabaseManagerClient *a2, const WebCore::SecurityOriginData *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v4 = this;
  WebCore::SecurityOriginData::isolatedCopy();
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E9D6D4D8;
  v5[1] = v4;
  v7 = (uint64_t)v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_1D809B8A8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int *v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, unsigned int *);
  v10 = va_arg(va1, _QWORD);
  v4 = v10;
  v10 = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData((unsigned int **)va, v5);
    WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData((unsigned int **)va1, v6);
    _Unwind_Resume(a1);
  }
  WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData((unsigned int **)va, a2);
  WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData((unsigned int **)va1, v7);
  _Unwind_Resume(a1);
}

void sub_1D809B8F8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  WTF *v3;

  v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebDatabaseManagerClient::dispatchDidModifyDatabase(WebKit::WebDatabaseManagerClient *this, const WebCore::SecurityOriginData *a2, const WTF::String *a3)
{
  const WebCore::SecurityOriginData *v6;
  WebSecurityOrigin *v7;
  StringImpl *v8;
  id v9;
  unsigned int v10;
  unsigned int v11;
  id v12;
  const __CFString *v13;
  const void *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  char v20;

  if ((WTF::isMainThread(this) & 1) != 0)
  {
    v7 = [WebSecurityOrigin alloc];
    WebCore::SecurityOriginData::securityOrigin(a2);
    v9 = -[WebSecurityOrigin _initWithWebCoreSecurityOrigin:](v7, "_initWithWebCoreSecurityOrigin:", v19);
    if (v19)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)v19);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v19));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)v19);
        v16 = (WTF::StringImpl *)*((_QWORD *)v19 + 6);
        *((_QWORD *)v19 + 6) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v8);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = (WTF::StringImpl *)*((_QWORD *)v19 + 5);
        *((_QWORD *)v19 + 5) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v8);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = *((unsigned int *)v19 + 8);
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, char *))off_1E9D6D4F0[v18])(&v20, (char *)v19 + 8);
        *((_DWORD *)v19 + 8) = -1;
        WTF::fastFree(v19, v8);
      }
    }
    v12 = objc_alloc(MEMORY[0x1E0C99D80]);
    if (*(_QWORD *)a3)
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E9D6EC48;
    v14 = (const void *)objc_msgSend(v12, "initWithObjectsAndKeys:", v13, WebDatabaseIdentifierKey, 0, 0);
    v15 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    objc_msgSend(v15, "postNotificationName:object:userInfo:", WebDatabaseDidModifyDatabaseNotification, v9, v14);
    if (v14)
      CFRelease(v14);
    if (v9)
      CFRelease(v9);
  }
  else
  {
    WebKit::DidModifyOriginData::dispatchToMainThread(this, a2, v6);
  }
}

void sub_1D809BAC0(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D809BAD4(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
  {
    CFRelease(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::WebDatabaseManagerClient::dispatchDidAddNewOrigin(WebKit::WebDatabaseManagerClient *this)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  *((_BYTE *)this + 8) = 1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.MobileSafariSettings.WebDatabaseOriginWasAddedNotification"), 0, 0, 1u);
}

void WebKit::WebDatabaseManagerClient::dispatchDidDeleteDatabase(WebKit::WebDatabaseManagerClient *this)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  *((_BYTE *)this + 9) = 1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.MobileSafariSettings.WebDatabaseWasDeletedNotification"), 0, 0, 1u);
}

void WebKit::WebDatabaseManagerClient::dispatchDidDeleteDatabaseOrigin(WebKit::WebDatabaseManagerClient *this)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  *((_BYTE *)this + 10) = 1;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.MobileSafariSettings.WebDatabaseOriginWasDeletedNotification"), 0, 0, 1u);
}

unsigned int **WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1}::~SecurityOriginData(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = v3[8];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))off_1E9D6D4F0[v4])(&v6, v3 + 2);
    v3[8] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v6;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E9D6D4D8;
  a1[1] = 0;
  if (v3)
  {
    v4 = v3[8];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))off_1E9D6D4F0[v4])(&v6, v3 + 2);
    v3[8] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6D4D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3[8];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))off_1E9D6D4F0[v4])(&v6, v3 + 2);
    v3[8] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::DidModifyOriginData::dispatchToMainThread(WebKit::WebDatabaseManagerClient &,WebCore::SecurityOriginData const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::WebDatabaseManagerClient::dispatchDidModifyOrigin(**(WebKit::WebDatabaseManagerClient ***)(a1 + 8), (const WebCore::SecurityOriginData *)(*(_QWORD *)(a1 + 8) + 8));
}

void WebDatabaseProvider::~WebDatabaseProvider(WebDatabaseProvider *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 16 * i) != -1)
        {
          v6 = v3 + 16 * i;
          v7 = *(unsigned int **)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v7)
          {
            v8 = v7 + 6;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v7 + 6);
              InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v7);
              WTF::fastFree(v11, v12);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::DatabaseProvider::~DatabaseProvider(this);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 16 * i) != -1)
        {
          v6 = v3 + 16 * i;
          v7 = *(unsigned int **)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v7)
          {
            v8 = v7 + 6;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v7 + 6);
              InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v7);
              WTF::fastFree(v11, v12);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WebCore::DatabaseProvider::~DatabaseProvider(this);
  WTF::fastFree(v13, v14);
}

uint64_t WebDatabaseProvider::idbConnectionToServerForSession(WebDatabaseProvider *this, SessionID sessionid)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  SessionID v11;
  uint64_t *v12;
  int v13;
  InProcessIDBServer *v14;
  unsigned int *v15;
  InProcessIDBServer *v16;
  StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  WTF *v27;
  void *v28;
  WTF::StringImpl *v29;
  SessionID v30;
  SessionID v31;

  v4 = (uint64_t *)((char *)this + 16);
  v3 = *((_QWORD *)this + 2);
  if (v3
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash((uint64_t *)this + 2, 8u, 0), (v3 = *v4) != 0))
  {
    v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = (~(sessionid.m_identifier << 32) + sessionid.m_identifier) ^ ((~(sessionid.m_identifier << 32)
                                                                    + sessionid.m_identifier) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (uint64_t *)(v3 + 16 * v9);
  v11.m_identifier = *v10;
  if (!*v10)
  {
LABEL_12:
    *v10 = sessionid.m_identifier;
    if ((uint64_t)sessionid.m_identifier > -2)
    {
      WebDatabaseProvider::indexedDatabaseDirectoryPath((uint64_t)&v29);
      v16 = (InProcessIDBServer *)WTF::fastMalloc((WTF *)0x40);
      InProcessIDBServer::InProcessIDBServer(v16, v31, (const WTF::String *)&v29);
      v18 = v29;
      v29 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v17);
          v15 = (unsigned int *)v10[1];
          v10[1] = (uint64_t)v16;
          if (!v15)
            goto LABEL_23;
          goto LABEL_19;
        }
        *(_DWORD *)v18 -= 2;
      }
      v15 = (unsigned int *)v10[1];
      v10[1] = (uint64_t)v16;
      if (!v15)
        goto LABEL_23;
    }
    else
    {
      v14 = (InProcessIDBServer *)WTF::fastMalloc((WTF *)0x40);
      InProcessIDBServer::InProcessIDBServer(v14, v30, MEMORY[0x1E0CBF6F0]);
      v15 = (unsigned int *)v10[1];
      v10[1] = (uint64_t)v14;
      if (!v15)
        goto LABEL_23;
    }
LABEL_19:
    v19 = v15 + 6;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v15 + 6);
      InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v15);
      WTF::fastFree(v27, v28);
    }
LABEL_23:
    if (*v4)
    {
      ++*(_DWORD *)(*v4 - 12);
      v22 = *v4;
      if (*v4)
        goto LABEL_25;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v22 = *v4;
      if (*v4)
      {
LABEL_25:
        v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
        v24 = *(unsigned int *)(v22 - 4);
        if (v24 <= 0x400)
          goto LABEL_26;
        goto LABEL_31;
      }
    }
    v23 = *(unsigned int *)(v22 - 16);
    v24 = *(unsigned int *)(v22 - 4);
    if (v24 <= 0x400)
    {
LABEL_26:
      if (3 * v24 > 4 * v23)
        return *(_QWORD *)(v10[1] + 40);
      if (!(_DWORD)v24)
      {
        v25 = 8;
LABEL_33:
        v10 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v4, v25, v10);
        return *(_QWORD *)(v10[1] + 40);
      }
LABEL_32:
      v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24));
      goto LABEL_33;
    }
LABEL_31:
    if (v24 > 2 * v23)
      return *(_QWORD *)(v10[1] + 40);
    goto LABEL_32;
  }
  v12 = 0;
  v13 = 1;
  while (v11.m_identifier != sessionid.m_identifier)
  {
    if (v11.m_identifier == -1)
      v12 = v10;
    v9 = (v9 + v13) & v5;
    v10 = (uint64_t *)(v3 + 16 * v9);
    v11.m_identifier = *v10;
    ++v13;
    if (!*v10)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = v12;
      }
      goto LABEL_12;
    }
  }
  return *(_QWORD *)(v10[1] + 40);
}

_QWORD *WebDatabaseProvider::deleteAllDatabases(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = this[2];
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = (_QWORD *)(v1 + 16 * v2);
    if (!*(_DWORD *)(v1 - 12))
    {
      v4 = (_QWORD *)(v1 + 16 * v2);
      v3 = v4;
LABEL_10:
      v6 = (_QWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4));
      if (v6 == v4)
        return this;
      goto LABEL_16;
    }
    v4 = (_QWORD *)this[2];
    if ((_DWORD)v2)
    {
      v5 = 16 * v2;
      v4 = (_QWORD *)this[2];
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        v5 -= 16;
        if (!v5)
        {
          v4 = v3;
          goto LABEL_10;
        }
      }
    }
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  if (v1)
    goto LABEL_10;
  v6 = 0;
  if (!v4)
    return this;
  do
  {
LABEL_16:
    v7 = v4[1];
    v8 = (unsigned int *)(v7 + 24);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v10 = &off_1E9D69F50;
    v10[1] = v7;
    v10[2] = v7;
    v10[3] = 0xFFF0000000000000;
    v12 = v10;
    (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v7 + 56) + 32))(*(_QWORD *)(v7 + 56), &v12);
    this = v12;
    v12 = 0;
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    v11 = v4 + 2;
    v4 = v3;
    if (v11 != v3)
    {
      v4 = v11;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  while (v4 != v6);
  return this;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::RefPtr<InProcessIDBServer,WTF::RawPtrTraits<InProcessIDBServer>,WTF::DefaultRefDerefTraits<InProcessIDBServer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
    v9 = 16 * a2;
    v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    v12 = (void *)(v11 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = 0;
  v9 = 16 * a2;
  v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  v12 = (void *)(v11 + 16);
  if (a2)
LABEL_3:
    bzero(v12, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v25 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v32 = *(_QWORD *)(v24 + 16 * v29);
            v29 = (v29 + v30++) & v25;
          }
          while (v32);
          v33 = (uint64_t *)(v24 + 16 * v31);
          v34 = (unsigned int *)v33[1];
          v33[1] = 0;
          if (v34)
          {
            v35 = v34 + 6;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v34 + 6);
              InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v34);
              WTF::fastFree(v46, v47);
            }
          }
          *v33 = *v15;
          v38 = v6 + 16 * v13;
          v39 = *(_QWORD *)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          v33[1] = v39;
          v40 = *(unsigned int **)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          if (v40)
          {
            v41 = v40 + 6;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              atomic_store(1u, v40 + 6);
              InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v40);
              WTF::fastFree(v44, v45);
            }
          }
          if (v15 == a3)
            v14 = v33;
        }
        else
        {
          v17 = v6 + 16 * v13;
          v18 = *(unsigned int **)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v18)
          {
            v19 = v18 + 6;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v18 + 6);
              InProcessIDBServer::~InProcessIDBServer((InProcessIDBServer *)v18);
              WTF::fastFree(v22, v23);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WebDatabaseProvider::indexedDatabaseDirectoryPath@<X0>(uint64_t a1@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  StringImpl *v6;
  __CFString *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v4 = objc_msgSend(v3, "objectForKey:", WebDatabaseDirectoryDefaultsKey);
  if (v4)
  {
    v5 = v4;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      MEMORY[0x1D82A3998](&v13, v5);
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (v14)
      {
        v7 = (__CFString *)WTF::StringImpl::operator NSString *();
        v11 = v14;
        v14 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, v6);
            v9 = v13;
            v13 = 0;
            if (!v9)
              return MEMORY[0x1D82A3998](a1, -[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath", v13, v14));
          }
          else
          {
            *(_DWORD *)v11 -= 2;
            v9 = v13;
            v13 = 0;
            if (!v9)
              return MEMORY[0x1D82A3998](a1, -[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath", v13, v14));
          }
LABEL_22:
          v10 = *(_DWORD *)v9 - 2;
          if (*(_DWORD *)v9 == 2)
            goto LABEL_23;
LABEL_12:
          *(_DWORD *)v9 = v10;
          return MEMORY[0x1D82A3998](a1, -[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath", v13, v14));
        }
      }
      else
      {
        v14 = 0;
        v7 = &stru_1E9D6EC48;
      }
      v9 = v13;
      v13 = 0;
      if (!v9)
        return MEMORY[0x1D82A3998](a1, -[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath", v13, v14));
      goto LABEL_22;
    }
  }
  MEMORY[0x1D82A3998](&v13, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"));
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v14)
  {
    v7 = (__CFString *)WTF::StringImpl::operator NSString *();
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        v9 = v13;
        v13 = 0;
        if (!v9)
          return MEMORY[0x1D82A3998](a1, -[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath", v13, v14));
      }
      else
      {
        *(_DWORD *)v8 -= 2;
        v9 = v13;
        v13 = 0;
        if (!v9)
          return MEMORY[0x1D82A3998](a1, -[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath", v13, v14));
      }
LABEL_11:
      v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 == 2)
      {
LABEL_23:
        WTF::StringImpl::destroy(v9, v6);
        return MEMORY[0x1D82A3998](a1, -[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath", v13, v14));
      }
      goto LABEL_12;
    }
  }
  else
  {
    v14 = 0;
    v7 = &stru_1E9D6EC48;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
    goto LABEL_11;
  return MEMORY[0x1D82A3998](a1, -[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath", v13, v14));
}

void sub_1D809C67C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id CallUIDelegate(WebView *a1, objc_selector *a2)
{
  id result;
  void *NSInvocation;
  uint64_t v5;
  WebView *v6;

  result = -[WebView _UIDelegateForSelector:](a1, "_UIDelegateForSelector:", a2);
  v6 = a1;
  if (result)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v6, 2);
      v5 = 0;
      WebThreadCallDelegate();
      result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        objc_msgSend(NSInvocation, "getReturnValue:", &v5);
        return (id)v5;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1D809D0C8()
{
  objc_end_catch();
  JUMPOUT(0x1D809D0D0);
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3)
{
  id result;
  void *NSInvocation;
  uint64_t v7;
  objc_object *v8;
  WebView *v9;

  result = -[WebView _UIDelegateForSelector:](a1, "_UIDelegateForSelector:", a2);
  v8 = a3;
  v9 = a1;
  if (result)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v9, 2);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v8, 3);
      v7 = 0;
      WebThreadCallDelegate();
      result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        objc_msgSend(NSInvocation, "getReturnValue:", &v7);
        return (id)v7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1D809D1C0()
{
  objc_end_catch();
  JUMPOUT(0x1D809D1C8);
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3, char a4)
{
  id result;
  void *NSInvocation;
  uint64_t v9;
  char v10;
  objc_object *v11;
  WebView *v12;

  result = -[WebView _UIDelegateForSelector:](a1, "_UIDelegateForSelector:", a2);
  v11 = a3;
  v12 = a1;
  v10 = a4;
  if (result)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v12, 2);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 3);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 4);
      v9 = 0;
      WebThreadCallDelegate();
      result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        objc_msgSend(NSInvocation, "getReturnValue:", &v9);
        return (id)v9;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1D809D2DC()
{
  objc_end_catch();
  JUMPOUT(0x1D809D2E4);
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4)
{
  id result;
  void *NSInvocation;
  uint64_t v9;
  objc_object *v10;
  objc_object *v11;
  WebView *v12;

  result = -[WebView _UIDelegateForSelector:](a1, "_UIDelegateForSelector:", a2);
  v11 = a3;
  v12 = a1;
  v10 = a4;
  if (result)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v12, 2);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 3);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 4);
      v9 = 0;
      WebThreadCallDelegate();
      result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        objc_msgSend(NSInvocation, "getReturnValue:", &v9);
        return (id)v9;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1D809D3F8()
{
  objc_end_catch();
  JUMPOUT(0x1D809D400);
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4, objc_object *a5)
{
  id result;
  void *NSInvocation;
  uint64_t v11;
  objc_object *v12;
  objc_object *v13;
  objc_object *v14;
  WebView *v15;

  result = -[WebView _UIDelegateForSelector:](a1, "_UIDelegateForSelector:", a2);
  v14 = a3;
  v15 = a1;
  v12 = a5;
  v13 = a4;
  if (result)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v15, 2);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v14, 3);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v13, 4);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v12, 5);
      v11 = 0;
      WebThreadCallDelegate();
      result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        objc_msgSend(NSInvocation, "getReturnValue:", &v11);
        return (id)v11;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1D809D528()
{
  objc_end_catch();
  JUMPOUT(0x1D809D530);
}

id CallUIDelegate(WebView *a1, objc_selector *a2, objc_object *a3, uint64_t a4)
{
  id result;
  void *NSInvocation;
  uint64_t v9;
  uint64_t v10;
  objc_object *v11;
  WebView *v12;

  result = -[WebView _UIDelegateForSelector:](a1, "_UIDelegateForSelector:", a2);
  v11 = a3;
  v12 = a1;
  v10 = a4;
  if (result)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      NSInvocation = (void *)WebThreadMakeNSInvocation();
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v12, 2);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 3);
      objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 4);
      v9 = 0;
      WebThreadCallDelegate();
      result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
      if (result)
      {
        objc_msgSend(NSInvocation, "getReturnValue:", &v9);
        return (id)v9;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1D809D644()
{
  objc_end_catch();
  JUMPOUT(0x1D809D64CLL);
}

BOOL CallUIDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3)
{
  void *NSInvocation;
  char v6;
  WebView *v7;

  v7 = a2;
  if (-[WebView _UIDelegateForSelector:](a2, "_UIDelegateForSelector:") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v7, 2);
    v6 = 0;
    WebThreadCallDelegate();
    objc_msgSend(NSInvocation, "getReturnValue:", &v6);
    return v6 != 0;
  }
  return a1;
}

void sub_1D809D728(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

BOOL CallUIDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3, objc_object *a4)
{
  void *NSInvocation;
  char v7;
  objc_object *v8;
  WebView *v9;

  v8 = a4;
  v9 = a2;
  if (-[WebView _UIDelegateForSelector:](a2, "_UIDelegateForSelector:") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v9, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v8, 3);
    v7 = 0;
    WebThreadCallDelegate();
    objc_msgSend(NSInvocation, "getReturnValue:", &v7);
    return v7 != 0;
  }
  return a1;
}

BOOL CallUIDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3, objc_object *a4, char a5)
{
  void *NSInvocation;
  char v8;
  char v9;
  objc_object *v10;
  WebView *v11;

  v10 = a4;
  v11 = a2;
  v9 = a5;
  if (-[WebView _UIDelegateForSelector:](a2, "_UIDelegateForSelector:") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 3);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v9, 4);
    v8 = 0;
    WebThreadCallDelegate();
    objc_msgSend(NSInvocation, "getReturnValue:", &v8);
    return v8 != 0;
  }
  return a1;
}

BOOL CallUIDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3, objc_object *a4, objc_object *a5)
{
  void *NSInvocation;
  char v8;
  objc_object *v9;
  objc_object *v10;
  WebView *v11;

  v10 = a4;
  v11 = a2;
  v9 = a5;
  if (-[WebView _UIDelegateForSelector:](a2, "_UIDelegateForSelector:") && (objc_opt_respondsToSelector() & 1) != 0)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 3);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v9, 4);
    v8 = 0;
    WebThreadCallDelegate();
    objc_msgSend(NSInvocation, "getReturnValue:", &v8);
    return v8 != 0;
  }
  return a1;
}

id CallFrameLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3)
{
  id result;
  void *NSInvocation;
  uint64_t v6;
  WebView *v7;

  result = -[WebView _frameLoadDelegateForwarder](a2, "_frameLoadDelegateForwarder");
  v7 = a2;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v7, 2);
    v6 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v6);
      return (id)v6;
    }
  }
  return result;
}

void sub_1D809DAE0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id CallFrameLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3, objc_object *a4)
{
  id result;
  void *NSInvocation;
  uint64_t v8;
  objc_object *v9;
  WebView *v10;

  result = -[WebView _frameLoadDelegateForwarder](a2, "_frameLoadDelegateForwarder");
  v9 = a4;
  v10 = a2;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v9, 3);
    v8 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v8);
      return (id)v8;
    }
  }
  return result;
}

void sub_1D809DBC4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t CallDelegate(void (*a1)(void), WebView *a2, objc_object *a3, objc_selector *a4, objc_object *a5, objc_object *a6)
{
  void *NSInvocation;
  uint64_t result;
  uint64_t v8;
  objc_object *v9;
  objc_selector *v10;
  void (*v11)(void);

  v10 = a4;
  v11 = a1;
  v9 = a5;
  if (!a2)
    return 0;
  NSInvocation = (void *)WebThreadMakeNSInvocation();
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 2);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 3);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v9, 4);
  v8 = 0;
  WebThreadCallDelegate();
  result = objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
  if (result)
  {
    objc_msgSend(NSInvocation, "getReturnValue:", &v8);
    return v8;
  }
  return result;
}

void sub_1D809DCA4()
{
  objc_end_catch();
  JUMPOUT(0x1D809DCACLL);
}

uint64_t CallDelegate(void (*a1)(void), WebView *a2, objc_object *a3, objc_selector *a4, objc_object *a5, objc_object *a6, objc_object *a7)
{
  void *NSInvocation;
  uint64_t result;
  uint64_t v9;
  objc_object *v10;
  objc_object *v11;
  objc_selector *v12;
  void (*v13)(void);

  v13 = a1;
  v11 = a5;
  v12 = a4;
  v10 = a6;
  if (!a2)
    return 0;
  NSInvocation = (void *)WebThreadMakeNSInvocation();
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v13, 2);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v12, 3);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 4);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 5);
  v9 = 0;
  WebThreadCallDelegate();
  result = objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
  if (result)
  {
    objc_msgSend(NSInvocation, "getReturnValue:", &v9);
    return v9;
  }
  return result;
}

void sub_1D809DD98()
{
  objc_end_catch();
  JUMPOUT(0x1D809DDA0);
}

uint64_t CallDelegate(void (*a1)(void), WebView *a2, objc_object *a3, objc_selector *a4, objc_object *a5, objc_object *a6, objc_object *a7, objc_object *a8)
{
  void *NSInvocation;
  uint64_t result;
  uint64_t v10;
  objc_object *v11;
  objc_object *v12;
  objc_object *v13;
  objc_selector *v14;
  void (*v15)(void);

  v15 = a1;
  v13 = a5;
  v14 = a4;
  v11 = a7;
  v12 = a6;
  if (!a2)
    return 0;
  NSInvocation = (void *)WebThreadMakeNSInvocation();
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v15, 2);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v14, 3);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v13, 4);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v12, 5);
  objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 6);
  v10 = 0;
  WebThreadCallDelegate();
  result = objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
  if (result)
  {
    objc_msgSend(NSInvocation, "getReturnValue:", &v10);
    return v10;
  }
  return result;
}

void sub_1D809DE9C()
{
  objc_end_catch();
  JUMPOUT(0x1D809DEA4);
}

id CallFrameLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3, objc_object *a4, double a5, objc_object *a6, objc_object *a7)
{
  id result;
  void *NSInvocation;
  uint64_t v14;
  objc_object *v15;
  objc_object *v16;
  double v17;
  objc_object *v18;
  WebView *v19;

  result = -[WebView _frameLoadDelegateForwarder](a2, "_frameLoadDelegateForwarder");
  v18 = a4;
  v19 = a2;
  v17 = a5;
  v15 = a7;
  v16 = a6;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v19, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v18, 3);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v17, 4);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v16, 5);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v15, 6);
    v14 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v14);
      return (id)v14;
    }
  }
  return result;
}

id CallResourceLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3, objc_object *a4, uint64_t a5, objc_object *a6)
{
  id result;
  void *NSInvocation;
  uint64_t v12;
  objc_object *v13;
  uint64_t v14;
  objc_object *v15;
  WebView *v16;

  result = -[WebView _resourceLoadDelegateForwarder](a2, "_resourceLoadDelegateForwarder");
  v15 = a4;
  v16 = a2;
  v13 = a6;
  v14 = a5;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v16, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v15, 3);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v14, 4);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v13, 5);
    v12 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v12);
      return (id)v12;
    }
  }
  return result;
}

void sub_1D809E0E0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id CallResourceLoadDelegate(void (*a1)(void), WebView *a2, objc_selector *a3, objc_object *a4, objc_object *a5, uint64_t a6, objc_object *a7)
{
  id result;
  void *NSInvocation;
  uint64_t v14;
  objc_object *v15;
  uint64_t v16;
  objc_object *v17;
  objc_object *v18;
  WebView *v19;

  result = -[WebView _resourceLoadDelegateForwarder](a2, "_resourceLoadDelegateForwarder");
  v18 = a4;
  v19 = a2;
  v16 = a6;
  v17 = a5;
  v15 = a7;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v19, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v18, 3);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v17, 4);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v16, 5);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v15, 6);
    v14 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v14);
      return (id)v14;
    }
  }
  return result;
}

void sub_1D809E214(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id CallHistoryDelegate(void (*a1)(void), WebView *a2, objc_selector *a3)
{
  id result;
  void *NSInvocation;
  uint64_t v5;
  WebView *v6;

  result = a2->_private->historyDelegate;
  v6 = a2;
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v6, 2);
    v5 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v5);
      return (id)v5;
    }
  }
  return result;
}

void sub_1D809E2DC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id CallFormDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4)
{
  id result;
  void *NSInvocation;
  uint64_t v6;
  objc_object *v7;
  objc_object *v8;

  v7 = a4;
  v8 = a3;
  result = -[WebView _formDelegateForSelector:](a1, "_formDelegateForSelector:", a2);
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v8, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v7, 3);
    v6 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v6);
      return (id)v6;
    }
  }
  return result;
}

void sub_1D809E3AC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id CallFormDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4, objc_object *a5)
{
  id result;
  void *NSInvocation;
  uint64_t v7;
  objc_object *v8;
  objc_object *v9;
  objc_object *v10;

  v9 = a4;
  v10 = a3;
  v8 = a5;
  result = -[WebView _formDelegateForSelector:](a1, "_formDelegateForSelector:", a2);
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v9, 3);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v8, 4);
    v7 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v7);
      return (id)v7;
    }
  }
  return result;
}

void sub_1D809E490(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id CallFormDelegate(WebView *a1, objc_selector *a2, objc_object *a3, objc_object *a4, objc_object *a5, objc_object *a6, objc_object *a7)
{
  id result;
  void *NSInvocation;
  uint64_t v9;
  objc_object *v10;
  objc_object *v11;
  objc_object *v12;
  objc_object *v13;
  objc_object *v14;

  v14 = a3;
  v12 = a5;
  v13 = a4;
  v10 = a7;
  v11 = a6;
  result = -[WebView _formDelegateForSelector:](a1, "_formDelegateForSelector:", a2);
  if (result)
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v14, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v13, 3);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v12, 4);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 5);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 6);
    v9 = 0;
    WebThreadCallDelegate();
    result = (id)objc_msgSend((id)objc_msgSend(NSInvocation, "methodSignature"), "methodReturnLength");
    if (result)
    {
      objc_msgSend(NSInvocation, "getReturnValue:", &v9);
      return (id)v9;
    }
  }
  return result;
}

void sub_1D809E598(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

BOOL CallFormDelegateReturningBoolean(uint64_t a1, WebView *a2, objc_selector *a3, objc_object *a4, objc_selector *a5, objc_object *a6)
{
  void *NSInvocation;
  char v9;
  objc_object *v10;
  objc_selector *v11;
  objc_object *v12;

  v11 = a5;
  v12 = a4;
  v10 = a6;
  if (-[WebView _formDelegateForSelector:](a2, "_formDelegateForSelector:"))
  {
    NSInvocation = (void *)WebThreadMakeNSInvocation();
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v12, 2);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v11, 3);
    objc_msgSend(NSInvocation, "setArgument:atIndex:", &v10, 4);
    v9 = 0;
    WebThreadCallDelegate();
    objc_msgSend(NSInvocation, "getReturnValue:", &v9);
    return v9 != 0;
  }
  return a1;
}

void sub_1D809E688(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D809E8F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 != 1)
    {
      --*(_DWORD *)a11;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D809EA04(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D809EA9C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D809EBAC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebDocumentLoaderMac::WebDocumentLoaderMac(WebDocumentLoaderMac *this, const WebCore::ResourceRequest *a2, const WebCore::SubstituteData *a3)
{
  uint64_t v3;

  v3 = WebCore::DocumentLoader::DocumentLoader();
  *(_QWORD *)v3 = &unk_1E9D6D538;
  *(_QWORD *)(v3 + 32) = &unk_1E9D6D5E0;
  *(_QWORD *)(v3 + 40) = &unk_1E9D6D610;
  *(_QWORD *)(v3 + 56) = &unk_1E9D6D660;
  *(_QWORD *)(v3 + 3560) = 0;
  *(_BYTE *)(v3 + 3568) = 0;
  *(_QWORD *)(v3 + 3576) = 0;
  *(_QWORD *)(v3 + 3592) = 0;
  *(_QWORD *)(v3 + 3584) = 0;
}

void WebDocumentLoaderMac::setDataSource(WebDocumentLoaderMac *this, CFTypeRef cf, WebView *a3)
{
  id v5;
  id v6;
  const void *v7;
  id v8;
  id v9;
  const void *v10;

  *((_QWORD *)this + 445) = cf;
  if (cf && !*((_BYTE *)this + 3568))
  {
    *((_BYTE *)this + 3568) = 1;
    CFRetain(cf);
  }
  v5 = -[WebView resourceLoadDelegate](a3, "resourceLoadDelegate");
  v6 = v5;
  if (v5)
    CFRetain(v5);
  v7 = (const void *)*((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = v6;
  if (v7)
    CFRelease(v7);
  v8 = -[WebView downloadDelegate](a3, "downloadDelegate");
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v10 = (const void *)*((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = v9;
  if (v10)
    CFRelease(v10);
}

CFTypeRef WebDocumentLoaderMac::attachToFrame(WebDocumentLoaderMac *this)
{
  CFTypeRef result;

  result = (CFTypeRef)WebCore::DocumentLoader::attachToFrame(this);
  if (!*((_BYTE *)this + 3568))
  {
    result = (CFTypeRef)*((_QWORD *)this + 445);
    if (result)
    {
      *((_BYTE *)this + 3568) = 1;
      return CFRetain(result);
    }
  }
  return result;
}

void WebDocumentLoaderMac::detachFromFrame(uint64_t a1)
{
  uint64_t v2;

  WebCore::DocumentLoader::detachFromFrame();
  v2 = *(_QWORD *)(a1 + 3592);
  if (!v2 || !*(_DWORD *)(v2 - 12))
  {
    if (*(_BYTE *)(a1 + 3568))
    {
      *(_BYTE *)(a1 + 3568) = 0;
      CFRelease(*(CFTypeRef *)(a1 + 3560));
    }
  }
}

uint64_t *WebDocumentLoaderMac::increaseLoadCount(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result;
  v12 = a2;
  v3 = result[449];
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 8 * v8);
    if (v9 == a2)
      return result;
    v10 = 1;
    while (v9)
    {
      v8 = (v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 8 * v8);
      ++v10;
      if (v9 == a2)
        return result;
    }
  }
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add(result + 449, &v12, (uint64_t)&v11);
  if (!*((_BYTE *)v2 + 3568))
  {
    result = (uint64_t *)v2[445];
    if (result)
    {
      *((_BYTE *)v2 + 3568) = 1;
      return (uint64_t *)CFRetain(result);
    }
  }
  return result;
}

void WebDocumentLoaderMac::decreaseLoadCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  const void *v17;
  const void *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 3592);
  if (!v2)
    return;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v2 + 8 * v8);
  if (v9 == a2)
  {
LABEL_6:
    if (v8 == *(_DWORD *)(v2 - 4))
      return;
    *(_QWORD *)(v2 + 8 * v8) = -1;
    v11 = (uint64_t *)(a1 + 3592);
    ++*(_DWORD *)(*(_QWORD *)(a1 + 3592) - 16);
    v12 = *(_QWORD *)(a1 + 3592);
    if (v12)
    {
      --*(_DWORD *)(v12 - 12);
      v13 = *v11;
      if (!*v11)
        goto LABEL_20;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      v13 = *v11;
      if (!*v11)
        goto LABEL_20;
    }
    v14 = *(_DWORD *)(v13 - 12);
    v15 = *(_DWORD *)(v13 - 4);
    if (6 * v14 >= v15 || v15 < 9)
    {
LABEL_19:
      if (v14)
        return;
      goto LABEL_20;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 3592), v15 >> 1, 0);
    if (*v11)
    {
      v14 = *(_DWORD *)(*v11 - 12);
      goto LABEL_19;
    }
LABEL_20:
    v17 = *(const void **)(a1 + 3576);
    *(_QWORD *)(a1 + 3576) = 0;
    if (v17)
      CFRelease(v17);
    v18 = *(const void **)(a1 + 3584);
    *(_QWORD *)(a1 + 3584) = 0;
    if (v18)
      CFRelease(v18);
    v19 = *(_QWORD *)(a1 + 16);
    if (!v19 || !*(_QWORD *)(v19 + 8))
    {
      if (*(_BYTE *)(a1 + 3568))
      {
        *(_BYTE *)(a1 + 3568) = 0;
        CFRelease(*(CFTypeRef *)(a1 + 3560));
      }
    }
    return;
  }
  v10 = 1;
  while (v9)
  {
    v8 = ((_DWORD)v8 + v10) & v4;
    v9 = *(_QWORD *)(v2 + 8 * v8);
    ++v10;
    if (v9 == a2)
      goto LABEL_6;
  }
}

void WebDocumentLoaderMac::~WebDocumentLoaderMac(WebDocumentLoaderMac *this, void *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;

  *(_QWORD *)this = &unk_1E9D6D538;
  *((_QWORD *)this + 4) = &unk_1E9D6D5E0;
  *((_QWORD *)this + 5) = &unk_1E9D6D610;
  *((_QWORD *)this + 7) = &unk_1E9D6D660;
  v3 = *((_QWORD *)this + 449);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = (const void *)*((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::DocumentLoader::~DocumentLoader(this);
}

{
  uint64_t v3;
  const void *v4;
  const void *v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = &unk_1E9D6D538;
  *((_QWORD *)this + 4) = &unk_1E9D6D5E0;
  *((_QWORD *)this + 5) = &unk_1E9D6D610;
  *((_QWORD *)this + 7) = &unk_1E9D6D660;
  v3 = *((_QWORD *)this + 449);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = (const void *)*((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::DocumentLoader::~DocumentLoader(this);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::DocumentLoader::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::DocumentLoader::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 24))(this);
  --this[6];
  return this;
}

void `non-virtual thunk to'WebDocumentLoaderMac::~WebDocumentLoaderMac(WebDocumentLoaderMac *this, void *a2)
{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  *((_QWORD *)this - 4) = &unk_1E9D6D538;
  v3 = (WebDocumentLoaderMac *)((char *)this - 32);
  *(_QWORD *)this = &unk_1E9D6D5E0;
  *((_QWORD *)this + 1) = &unk_1E9D6D610;
  *((_QWORD *)this + 3) = &unk_1E9D6D660;
  v4 = *((_QWORD *)this + 445);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (const void *)*((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::DocumentLoader::~DocumentLoader(v3);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this - 4) = &unk_1E9D6D538;
  v3 = (WebDocumentLoaderMac *)((char *)this - 32);
  *(_QWORD *)this = &unk_1E9D6D5E0;
  *((_QWORD *)this + 1) = &unk_1E9D6D610;
  *((_QWORD *)this + 3) = &unk_1E9D6D660;
  v4 = *((_QWORD *)this + 445);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (const void *)*((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::DocumentLoader::~DocumentLoader(v3);
  WTF::fastFree(v7, v8);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  *((_QWORD *)this - 5) = &unk_1E9D6D538;
  v3 = (WebDocumentLoaderMac *)((char *)this - 40);
  *((_QWORD *)this - 1) = &unk_1E9D6D5E0;
  *(_QWORD *)this = &unk_1E9D6D610;
  *((_QWORD *)this + 2) = &unk_1E9D6D660;
  v4 = *((_QWORD *)this + 444);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (const void *)*((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::DocumentLoader::~DocumentLoader(v3);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this - 5) = &unk_1E9D6D538;
  v3 = (WebDocumentLoaderMac *)((char *)this - 40);
  *((_QWORD *)this - 1) = &unk_1E9D6D5E0;
  *(_QWORD *)this = &unk_1E9D6D610;
  *((_QWORD *)this + 2) = &unk_1E9D6D660;
  v4 = *((_QWORD *)this + 444);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (const void *)*((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::DocumentLoader::~DocumentLoader(v3);
  WTF::fastFree(v7, v8);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  *((_QWORD *)this - 7) = &unk_1E9D6D538;
  v3 = (WebDocumentLoaderMac *)((char *)this - 56);
  *((_QWORD *)this - 3) = &unk_1E9D6D5E0;
  *((_QWORD *)this - 2) = &unk_1E9D6D610;
  *(_QWORD *)this = &unk_1E9D6D660;
  v4 = *((_QWORD *)this + 442);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (const void *)*((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::DocumentLoader::~DocumentLoader(v3);
}

{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this - 7) = &unk_1E9D6D538;
  v3 = (WebDocumentLoaderMac *)((char *)this - 56);
  *((_QWORD *)this - 3) = &unk_1E9D6D5E0;
  *((_QWORD *)this - 2) = &unk_1E9D6D610;
  *(_QWORD *)this = &unk_1E9D6D660;
  v4 = *((_QWORD *)this + 442);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (const void *)*((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::DocumentLoader::~DocumentLoader(v3);
  WTF::fastFree(v7, v8);
}

uint64_t `non-virtual thunk to'WebCore::DocumentLoader::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 16);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::DocumentLoader::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 40) + 24))(this - 40);
  --*(_DWORD *)(this - 16);
  return this;
}

uint64_t WebCore::CachedRawResourceClient::resourceClientType(WebCore::CachedRawResourceClient *this)
{
  return 5;
}

uint64_t WebCore::CachedRawResourceClient::shouldCacheResponse()
{
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_12:
    *v14 = v9;
    if (*v4)
    {
      ++*(_DWORD *)(*v4 - 12);
      v18 = *v4;
      if (*v4)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v18 = *v4;
      if (*v4)
      {
LABEL_14:
        v19 = (*(_DWORD *)(v18 - 16) + *(_DWORD *)(v18 - 12));
        v20 = *(unsigned int *)(v18 - 4);
        if (v20 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v19 = *(unsigned int *)(v18 - 16);
    v20 = *(unsigned int *)(v18 - 4);
    if (v20 <= 0x400)
    {
LABEL_15:
      if (3 * v20 > 4 * v19)
      {
LABEL_26:
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v18 + 8 * v20;
        *(_BYTE *)(a3 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v20)
      {
        result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4, 8u, v14);
        v14 = result;
        v18 = *v4;
        if (!*v4)
        {
LABEL_18:
          v20 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v20 = *(unsigned int *)(v18 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4, (_DWORD)v20 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v20)), v14);
      v14 = result;
      v18 = *v4;
      if (!*v4)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v20 > 2 * v19)
      goto LABEL_26;
    goto LABEL_24;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -1)
      v16 = v14;
    v13 = (v13 + v17) & v8;
    v14 = (uint64_t *)(v6 + 8 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        --*(_DWORD *)(*v4 - 16);
        v9 = *a2;
        v14 = v16;
      }
      goto LABEL_12;
    }
  }
  if ((v7 & 1) != 0)
    v21 = 0;
  else
    v21 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v6 + 8 * v21;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void sub_1D809FA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D809FB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  CFTypeRef v15;

  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
    v15 = cf;
    if (!cf)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = cf;
    if (!cf)
      goto LABEL_3;
  }
  CFRelease(v15);
  _Unwind_Resume(exception_object);
}

void sub_1D809FC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  const void *v13;

  if (v13)
    CFRelease(v13);
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D809FDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D809FEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void sub_1D809FFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  const void *v13;

  if (v13)
    CFRelease(v13);
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A00B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  const void *v13;

  if (v13)
    CFRelease(v13);
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A0198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A0288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  const void *v13;

  if (v13)
    CFRelease(v13);
  if (v12)
  {
    CFRelease(v12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebDragClient::useLegacyDragClient(WebDragClient *this)
{
  return 1;
}

uint64_t WebDragClient::dragSourceActionMaskForPoint(WebDragClient *this, const IntPoint *a2)
{
  return 127;
}

uint64_t WebDragClient::startDrag(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "_startDrag:", a2);
}

void WebDragClient::declareAndWriteDragImage(WebDragClient *this, const WTF::String *a2, WebCore::Element *a3, const WTF::URL *a4, const WTF::String *a5, WebCore::LocalFrame *a6)
{
  uint64_t v6;
  WebCore::Document **v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 8) + 528);
  if (v6)
  {
    v7 = *(WebCore::Document ***)(v6 + 8);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 1);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      WebCore::Document::editor(v7[37]);
      v10 = WebCore::Frame::pageID((WebCore::Frame *)v7);
      v12 = v11;
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v13 = off_1E9D6D8A8;
      v13[1] = v10;
      v13[2] = v12;
      v17 = v13;
      WebCore::Pasteboard::createForDragAndDrop();
      WebCore::Editor::writeImageToPasteboard();
      if (v18)
        (*(void (**)())(*(_QWORD *)v18 + 8))();
      if (v17)
        (*(void (**)(_QWORD *))(*v17 + 8))(v17);
      do
      {
        v14 = __ldaxr(v8);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v8));
      if (!v15)
      {
        atomic_store(1u, v8);
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v16 = off_1E9D6A4D8;
        v16[1] = v8;
        v19 = v16;
        WTF::ensureOnMainThread();
        if (v19)
          (*(void (**)(_QWORD *))(*v19 + 8))(v19);
      }
    }
  }
}

void sub_1D80A0CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebDragClient::didConcludeEditDrag(id *this)
{
  return objc_msgSend(this[1], "_didConcludeEditDrag");
}

uint64_t WebCore::PagePasteboardContext::isPagePasteboardContext(WebCore::PagePasteboardContext *this)
{
  return 1;
}

void WebEditorClient::WebEditorClient(WebEditorClient *this, WebView *a2)
{
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E9D6D8D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = &unk_1E9D6DBC8;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = objc_alloc_init(WebEditorUndoTarget);
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_WORD *)this + 32) = 0;
  WebCore::VisibleSelection::VisibleSelection((WebEditorClient *)((char *)this + 72));
  *((_DWORD *)this + 44) = 2;
}

void sub_1D80A0F74(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v4 = v2[7];
  if (v4)
  {
    v7 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v7)
    {
      v8 = (_DWORD **)(v4 + 8);
      do
      {
        if (*(v8 - 1) != (_DWORD *)-1)
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (v9[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
            else
              --v9[2];
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
    v5 = (const void *)v2[5];
    v2[5] = 0;
    if (!v5)
    {
LABEL_3:
      v6 = v2[1];
      if (!v6)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else
  {
    v5 = (const void *)v2[5];
    v2[5] = 0;
    if (!v5)
      goto LABEL_3;
  }
  CFRelease(v5);
  v6 = v2[1];
  if (!v6)
  {
LABEL_4:
    v2[1] = 0;
    _Unwind_Resume(exception_object);
  }
LABEL_16:
  *(_QWORD *)(v6 + 8) = 0;
  v10 = (unsigned int *)v2[1];
  v2[1] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebEditorClient::~WebEditorClient(WebEditorClient *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  const void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  WebCore::VisibleSelection::~VisibleSelection((WebEditorClient *)((char *)this + 72));
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_DWORD **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (_DWORD *)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (v6[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
            else
              --v6[2];
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  v7 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebEditorClient::~WebEditorClient(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebEditorClient::~WebEditorClient(WebEditorClient *this)
{
  WebEditorClient::~WebEditorClient((WebEditorClient *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;

  WebEditorClient::~WebEditorClient((WebEditorClient *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

uint64_t WebEditorClient::isContinuousSpellCheckingEnabled(id *this)
{
  return objc_msgSend(this[4], "isContinuousSpellCheckingEnabled");
}

uint64_t WebEditorClient::toggleContinuousSpellChecking(id *this)
{
  return objc_msgSend(this[4], "toggleContinuousSpellChecking:", 0);
}

uint64_t WebEditorClient::shouldDeleteRange(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  DOMObjectInternal *v4;
  WebCore::Range *v6;

  v2 = (void *)objc_msgSend(*(id *)(a1 + 32), "_editingDelegateForwarder");
  v3 = *(_QWORD *)(a1 + 32);
  WebCore::createLiveRange();
  v4 = kit(v6);
  if (v6)
  {
    if (*((_DWORD *)v6 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v6 + 8))();
    else
      --*((_DWORD *)v6 + 2);
  }
  return objc_msgSend(v2, "webView:shouldDeleteDOMRange:", v3, v4);
}

void sub_1D80A1248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WebEditorClient::smartInsertDeleteEnabled(WebEditorClient *this)
{
  void *result;
  uint64_t v2;

  result = (void *)*((_QWORD *)this + 4);
  if (result)
  {
    objc_msgSend(result, "page");
    if (v2)
      return (void *)((*(_QWORD *)(*(_QWORD *)(v2 + 112) + 696) >> 38) & 1);
    else
      return 0;
  }
  return result;
}

void *WebEditorClient::isSelectTrailingWhitespaceEnabled(WebEditorClient *this)
{
  void *result;
  uint64_t v2;

  result = (void *)*((_QWORD *)this + 4);
  if (result)
  {
    objc_msgSend(result, "page");
    if (v2)
      return (void *)((*(_QWORD *)(*(_QWORD *)(v2 + 112) + 696) >> 3) & 1);
    else
      return 0;
  }
  return result;
}

uint64_t WebEditorClient::shouldApplyStyle(uint64_t a1, WebCore::StyleProperties *a2)
{
  void *v4;
  uint64_t v5;
  DOMObjectInternal *v6;
  DOMObjectInternal *v7;
  DOMObjectInternal *v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  WebCore::MutableStyleProperties *v13;
  WebCore::Range *v14;

  v4 = (void *)objc_msgSend(*(id *)(a1 + 32), "_editingDelegateForwarder");
  v5 = *(_QWORD *)(a1 + 32);
  WebCore::StyleProperties::mutableCopy(a2);
  v6 = (DOMObjectInternal *)WebCore::MutableStyleProperties::ensureCSSStyleDeclaration(v13);
  v7 = kit(v6);
  WebCore::createLiveRange();
  v8 = kit(v14);
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v14 + 8))();
    else
      --*((_DWORD *)v14 + 2);
  }
  v9 = objc_msgSend(v4, "webView:shouldApplyStyle:toElementsInDOMRange:", v5, v7, v8);
  if (!v13)
    return v9;
  if (*(_DWORD *)v13 != 1)
  {
    --*(_DWORD *)v13;
    return v9;
  }
  WebCore::MutableStyleProperties::~MutableStyleProperties(v13);
  WTF::fastFree(v11, v12);
  return v9;
}

void sub_1D80A1418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebCore::MutableStyleProperties *a9, _DWORD *a10)
{
  _DWORD *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
  {
    if (v11[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(&a9);
      _Unwind_Resume(a1);
    }
    --v11[2];
    WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(&a9);
    _Unwind_Resume(a1);
  }
  WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::shouldMoveRangeAfterDelete(id *this, WebCore::Node **a2, WebCore::Node **a3)
{
  void *v6;
  id v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  DOMObjectInternal *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  DOMObjectInternal *v13;
  uint64_t v14;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  DOMObjectInternal *v21;

  v6 = (void *)objc_msgSend(this[4], "_editingDelegateForwarder");
  v7 = this[4];
  v8 = *a2;
  *((_DWORD *)v8 + 6) = *((_DWORD *)*a2 + 6) + 2;
  v19 = v8;
  v9 = a2[2];
  *((_DWORD *)v9 + 6) += 2;
  v20 = v9;
  WebCore::createLiveRange();
  v10 = kit(v16);
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v16 + 8))();
    else
      --*((_DWORD *)v16 + 2);
  }
  v11 = *a3;
  *((_DWORD *)v11 + 6) = *((_DWORD *)*a3 + 6) + 2;
  v17 = v11;
  v12 = a3[2];
  *((_DWORD *)v12 + 6) += 2;
  v18 = v12;
  WebCore::createLiveRange();
  v13 = kit(v21);
  if (v21)
  {
    if (*((_DWORD *)v21 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v21 + 8))();
    else
      --*((_DWORD *)v21 + 2);
  }
  v14 = objc_msgSend(v6, "webView:shouldMoveRangeAfterDelete:replacingRange:", v7, v10, v13);
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  if (!v19)
    return v14;
  if (*((_DWORD *)v19 + 6) != 2)
  {
    *((_DWORD *)v19 + 6) -= 2;
    return v14;
  }
  if ((*((_WORD *)v19 + 15) & 0x400) != 0)
    return v14;
  WebCore::Node::removedLastRef(v19);
  return v14;
}

void sub_1D80A16B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v4 = *(_DWORD **)(v2 - 40);
  *(_QWORD *)(v2 - 40) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::shouldBeginEditing(id *this, WebCore::Node **a2)
{
  void *v4;
  id v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  DOMObjectInternal *v8;
  uint64_t v9;
  WebCore::Node *v11;
  WebCore::Node *v12;
  uint64_t v13;
  WebCore::Node *v14;
  WebCore::Range *v15;

  v4 = (void *)objc_msgSend(this[4], "_editingDelegateForwarder");
  v5 = this[4];
  v6 = *a2;
  *((_DWORD *)v6 + 6) = *((_DWORD *)*a2 + 6) + 2;
  v11 = v6;
  LODWORD(v13) = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  *((_DWORD *)v7 + 6) += 2;
  v14 = v7;
  WebCore::createLiveRange();
  v8 = kit(v15);
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v15 + 8))();
    else
      --*((_DWORD *)v15 + 2);
  }
  v9 = objc_msgSend(v4, "webView:shouldBeginEditingInDOMRange:", v5, v8, v11, v13);
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  if (!v12)
    return v9;
  if (*((_DWORD *)v12 + 6) != 2)
  {
    *((_DWORD *)v12 + 6) -= 2;
    return v9;
  }
  if ((*((_WORD *)v12 + 15) & 0x400) != 0)
    return v9;
  WebCore::Node::removedLastRef(v12);
  return v9;
}

void sub_1D80A18B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  _DWORD *v15;

  v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      std::optional<WebCore::SimpleRange>::~optional(&a9);
      _Unwind_Resume(a1);
    }
    --v15[2];
    std::optional<WebCore::SimpleRange>::~optional(&a9);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::shouldEndEditing(id *this, WebCore::Node **a2)
{
  void *v4;
  id v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  DOMObjectInternal *v8;
  uint64_t v9;
  WebCore::Node *v11;
  WebCore::Node *v12;
  uint64_t v13;
  WebCore::Node *v14;
  WebCore::Range *v15;

  v4 = (void *)objc_msgSend(this[4], "_editingDelegateForwarder");
  v5 = this[4];
  v6 = *a2;
  *((_DWORD *)v6 + 6) = *((_DWORD *)*a2 + 6) + 2;
  v11 = v6;
  LODWORD(v13) = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  *((_DWORD *)v7 + 6) += 2;
  v14 = v7;
  WebCore::createLiveRange();
  v8 = kit(v15);
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v15 + 8))();
    else
      --*((_DWORD *)v15 + 2);
  }
  v9 = objc_msgSend(v4, "webView:shouldEndEditingInDOMRange:", v5, v8, v11, v13);
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  if (!v12)
    return v9;
  if (*((_DWORD *)v12 + 6) != 2)
  {
    *((_DWORD *)v12 + 6) -= 2;
    return v9;
  }
  if ((*((_WORD *)v12 + 15) & 0x400) != 0)
    return v9;
  WebCore::Node::removedLastRef(v12);
  return v9;
}

void sub_1D80A1A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  _DWORD *v15;

  v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      std::optional<WebCore::SimpleRange>::~optional(&a9);
      _Unwind_Resume(a1);
    }
    --v15[2];
    std::optional<WebCore::SimpleRange>::~optional(&a9);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::shouldInsertText(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  void *v6;
  void *v7;
  const __CFString *v8;
  DOMObjectInternal *v9;
  uint64_t v10;
  WebCore::Range *v12;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend(v6, "_editingDelegateForwarder");
  if (*a2)
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E9D6EC48;
  WebCore::createLiveRange();
  v9 = kit(v12);
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    else
      --*((_DWORD *)v12 + 2);
  }
  if (a4 == 2)
    v10 = 2;
  else
    v10 = a4 == 1;
  return objc_msgSend(v7, "webView:shouldInsertText:replacingDOMRange:givenAction:", v6, v8, v9, v10);
}

void sub_1D80A1B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebEditorClient::shouldChangeSelectedRange(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  void *v7;
  DOMObjectInternal *v8;
  WebCore::Range *v10;

  v7 = *(void **)(a1 + 32);
  WebCore::createLiveRange();
  v8 = kit(v10);
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v10 + 8))();
    else
      --*((_DWORD *)v10 + 2);
  }
  WebCore::createLiveRange();
  return objc_msgSend(v7, "_shouldChangeSelectedDOMRange:toDOMRange:affinity:stillSelecting:", v8, kit(0), a4, a5);
}

void sub_1D80A1CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebEditorClient::didBeginEditing(WebEditorClient *this)
{
  return WebThreadPostNotification();
}

uint64_t WebEditorClient::startDelayingAndCoalescingContentChangeNotifications(uint64_t this)
{
  *(_BYTE *)(this + 64) = 1;
  return this;
}

uint64_t WebEditorClient::stopDelayingAndCoalescingContentChangeNotifications(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  *(_BYTE *)(this + 64) = 0;
  if (*(_BYTE *)(this + 65))
    this = WebThreadPostNotification();
  *(_BYTE *)(v1 + 65) = 0;
  return this;
}

uint64_t WebEditorClient::respondToChangedContents(uint64_t this)
{
  if (!*(_BYTE *)(this + 64))
    return WebThreadPostNotification();
  *(_BYTE *)(this + 65) = 1;
  return this;
}

uint64_t WebEditorClient::respondToChangedSelection(uint64_t this, WebCore::Document **a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  if (a2)
  {
    v3 = this;
    this = WebCore::Document::editor(a2[37]);
    if (!*(_BYTE *)(this + 488))
    {
      v4 = (_QWORD *)*((_QWORD *)a2[35] + 2);
      if (((*(uint64_t (**)(_QWORD *))(*v4 + 1072))(v4) & 1) != 0)
        v5 = 0;
      else
        v5 = (void *)v4[2];
      v6 = (void *)objc_msgSend((id)objc_msgSend(v5, "frameView"), "documentView");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v6, "_selectionChanged");
        objc_msgSend(*(id *)(v3 + 32), "updateTouchBar");
        *(_DWORD *)(v3 + 176) = objc_msgSend(v6, "_isEditable");
      }
      this = objc_msgSend(*(id *)(v3 + 32), "_isClosing");
      if ((this & 1) == 0)
        return WebThreadPostNotification();
    }
  }
  return this;
}

uint64_t WebEditorClient::didEndEditing(WebEditorClient *this)
{
  return WebThreadPostNotification();
}

void _WebCreateFragment()
{
  __break(0xC471u);
}

uint64_t WebEditorClient::shouldInsertNode(uint64_t a1, WebCore::Node *a2, uint64_t a3, int a4)
{
  void *v7;
  uint64_t v8;
  WebCore::Node *v9;
  DOMObjectInternal *v10;
  WebCore::Range *v12;

  v7 = (void *)objc_msgSend(*(id *)(a1 + 32), "_editingDelegateForwarder");
  v8 = *(_QWORD *)(a1 + 32);
  v9 = kit(a2);
  WebCore::createLiveRange();
  v10 = kit(v12);
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    else
      --*((_DWORD *)v12 + 2);
  }
  return objc_msgSend(v7, "webView:shouldInsertNode:replacingDOMRange:givenAction:", v8, v9, v10, a4);
}

void sub_1D80A1F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] != 1)
    {
      --a10[2];
      _Unwind_Resume(exception_object);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebEditorClient::registerUndoOrRedoStep(id *this, UndoStep *a2, int a3)
{
  void *v6;
  WTF::StringImpl *result;
  BOOL v8;
  StringImpl *v9;
  const __CFString *v10;
  WTF::StringImpl *v11;
  id v12;
  WebUndoStep *v13;
  char *v14;
  WTF::StringImpl *v15;

  v6 = (void *)objc_msgSend(this[4], "undoManager");
  result = (WTF::StringImpl *)objc_msgSend(v6, "isUndoing");
  if ((_DWORD)result)
    v8 = a3 == 0;
  else
    v8 = 0;
  if (!v8)
  {
    result = (WTF::StringImpl *)objc_msgSend(v6, "isRedoing");
    if (!(_DWORD)result || (a3 & 1) == 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, UndoStep *))(*(_QWORD *)a2 + 40))(&v15, a2);
      if (v15)
      {
        v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
        v11 = v15;
        v15 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v9);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
      else
      {
        v10 = &stru_1E9D6EC48;
      }
      v12 = this[5];
      ++*((_DWORD *)a2 + 2);
      v15 = (WTF::StringImpl *)a2;
      v13 = +[WebUndoStep stepWithUndoStep:](WebUndoStep, "stepWithUndoStep:", &v15);
      if (a3)
        v14 = sel_redoEditing_;
      else
        v14 = sel_undoEditing_;
      objc_msgSend(v6, "registerUndoWithTarget:selector:object:", v12, v14, v13);
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
        {
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
          if (!v10)
            goto LABEL_21;
          goto LABEL_20;
        }
        --*((_DWORD *)result + 2);
      }
      if (!v10)
      {
LABEL_21:
        *((_BYTE *)this + 48) = 1;
        return result;
      }
LABEL_20:
      result = (WTF::StringImpl *)objc_msgSend(v6, "setActionName:", v10);
      goto LABEL_21;
    }
  }
  return result;
}

void sub_1D80A210C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebEditorClient::updateEditorStateAfterLayoutIfEditabilityChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  if (*(_DWORD *)(this + 176) != 2)
  {
    v1 = this;
    this = objc_msgSend(*(id *)(this + 32), "_selectedOrMainFrame");
    if (this)
    {
      v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
      if (v2)
      {
        v3 = *(_QWORD **)(*(_QWORD *)(v2 + 280) + 16);
        if (((*(uint64_t (**)(_QWORD *))(*v3 + 1072))(v3) & 1) != 0)
          v4 = 0;
        else
          v4 = (void *)v3[2];
        v5 = (void *)objc_msgSend((id)objc_msgSend(v4, "frameView"), "documentView");
        objc_opt_class();
        this = objc_opt_isKindOfClass();
        if ((this & 1) != 0)
        {
          this = objc_msgSend(v5, "_isEditable");
          if (*(_DWORD *)(v1 + 176) != (_DWORD)this)
            return objc_msgSend(*(id *)(v1 + 32), "updateTouchBar");
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebEditorClient::registerUndoStep(id *this, UndoStep *a2)
{
  return WebEditorClient::registerUndoOrRedoStep(this, a2, 0);
}

WTF::StringImpl *WebEditorClient::registerRedoStep(id *this, UndoStep *a2)
{
  return WebEditorClient::registerUndoOrRedoStep(this, a2, 1);
}

uint64_t WebEditorClient::clearUndoRedoOperations(uint64_t this)
{
  uint64_t v1;
  void *v2;
  int v3;
  int v4;
  int v5;

  if (*(_BYTE *)(this + 48))
  {
    v1 = this;
    v2 = (void *)objc_msgSend(*(id *)(this + 32), "undoManager");
    v3 = objc_msgSend(v2, "groupingLevel");
    v4 = v3;
    if (v3 < 1)
    {
      this = objc_msgSend(v2, "removeAllActionsWithTarget:", *(_QWORD *)(v1 + 40));
    }
    else
    {
      v5 = v3;
      do
      {
        objc_msgSend(v2, "endUndoGrouping");
        --v5;
      }
      while (v5);
      objc_msgSend(v2, "removeAllActionsWithTarget:", *(_QWORD *)(v1 + 40));
      do
      {
        this = objc_msgSend(v2, "beginUndoGrouping");
        --v4;
      }
      while (v4);
    }
    *(_BYTE *)(v1 + 48) = 0;
  }
  return this;
}

uint64_t WebEditorClient::canCopyCut(WebEditorClient *this, LocalFrame *a2, uint64_t a3)
{
  return a3;
}

uint64_t WebEditorClient::canPaste(WebEditorClient *this, LocalFrame *a2, uint64_t a3)
{
  return a3;
}

uint64_t WebEditorClient::canUndo(id *this)
{
  return objc_msgSend((id)objc_msgSend(this[4], "undoManager"), "canUndo");
}

uint64_t WebEditorClient::canRedo(id *this)
{
  return objc_msgSend((id)objc_msgSend(this[4], "undoManager"), "canRedo");
}

uint64_t WebEditorClient::undo(id *this)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(this[4], "undoManager"), "canUndo");
  if ((_DWORD)result)
    return objc_msgSend((id)objc_msgSend(this[4], "undoManager"), "undo");
  return result;
}

uint64_t WebEditorClient::redo(id *this)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(this[4], "undoManager"), "canRedo");
  if ((_DWORD)result)
    return objc_msgSend((id)objc_msgSend(this[4], "undoManager"), "redo");
  return result;
}

uint64_t WebEditorClient::handleKeyboardEvent(WebEditorClient *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t result;

  v3 = *((_QWORD *)a2 + 6);
  if (v3 && (*(_BYTE *)(v3 + 22) & 2) == 0)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528);
  if (!v4
    || (v5 = *(_QWORD *)(v4 + 8)) == 0
    || (v6 = *(id **)(*(_QWORD *)(v5 + 280) + 16), ((*((uint64_t (**)(id *))*v6 + 134))(v6) & 1) != 0))
  {
    result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(0, "frameView"), "documentView"), "_handleEditingKeyEvent:", a2);
    if (!(_DWORD)result)
      return result;
    goto LABEL_7;
  }
  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6[2], "frameView"), "documentView"), "_handleEditingKeyEvent:", a2);
  if ((_DWORD)result)
LABEL_7:
    *((_DWORD *)a2 + 5) |= 0x80u;
  return result;
}

WebCore::Node *WebEditorClient::textFieldDidBeginEditing(WebCore::Node *this, WebCore::Element *a2)
{
  uint64_t v3;
  objc_object *v4;
  WebView *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  objc_object *v9;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      v4 = (objc_object *)this;
      v5 = *(WebView **)(v3 + 32);
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
      if (v6
        && (v7 = *(_QWORD *)(v6 + 8)) != 0
        && (v8 = *(_QWORD **)(*(_QWORD *)(v7 + 280) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) == 0))
      {
        v9 = (objc_object *)v8[2];
      }
      else
      {
        v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegate(v5, (objc_selector *)sel_textFieldDidBeginEditing_inFrame_, v4, v9);
    }
  }
  return this;
}

WebCore::Node *WebEditorClient::textFieldDidEndEditing(WebCore::Node *this, WebCore::Element *a2)
{
  uint64_t v3;
  objc_object *v4;
  WebView *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  objc_object *v9;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      v4 = (objc_object *)this;
      v5 = *(WebView **)(v3 + 32);
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
      if (v6
        && (v7 = *(_QWORD *)(v6 + 8)) != 0
        && (v8 = *(_QWORD **)(*(_QWORD *)(v7 + 280) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) == 0))
      {
        v9 = (objc_object *)v8[2];
      }
      else
      {
        v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegate(v5, (objc_selector *)sel_textFieldDidEndEditing_inFrame_, v4, v9);
    }
  }
  return this;
}

WebCore::Node *WebEditorClient::textDidChangeInTextField(WebCore::Node *this, WebCore::Element *a2)
{
  uint64_t v3;
  objc_object *v4;
  WebView *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  objc_object *v9;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      v4 = (objc_object *)this;
      v5 = *(WebView **)(v3 + 32);
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
      if (v6
        && (v7 = *(_QWORD *)(v6 + 8)) != 0
        && (v8 = *(_QWORD **)(*(_QWORD *)(v7 + 280) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) == 0))
      {
        v9 = (objc_object *)v8[2];
      }
      else
      {
        v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegate(v5, (objc_selector *)sel_textDidChangeInTextField_inFrame_, v4, v9);
    }
  }
  return this;
}

BOOL WebEditorClient::doTextFieldCommandFromEvent(WebEditorClient *this, WebCore::Element *a2, WebCore::KeyboardEvent *a3)
{
  WebCore::Node *v6;
  objc_object *v7;
  char **v8;
  objc_selector *v9;
  WebView *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  objc_object *v14;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    return 0;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    return 0;
  v6 = kit(a2);
  if (!v6)
    return 0;
  v7 = (objc_object *)v6;
  if ((MEMORY[0x1D82A392C](*((_QWORD *)a3 + 14), "Up", 2) & 1) != 0)
  {
    v8 = &selRef_moveUp_;
  }
  else if ((MEMORY[0x1D82A392C](*((_QWORD *)a3 + 14), "Down", 4) & 1) != 0)
  {
    v8 = &selRef_moveDown_;
  }
  else if ((MEMORY[0x1D82A392C](*((_QWORD *)a3 + 14), "U+001B", 6) & 1) != 0)
  {
    v8 = &selRef_cancel_;
  }
  else if (MEMORY[0x1D82A392C](*((_QWORD *)a3 + 14), "U+0009", 6))
  {
    if ((*((_BYTE *)a3 + 84) & 8) != 0)
      v8 = &selRef_insertBacktab_;
    else
      v8 = &selRef_insertTab_;
  }
  else
  {
    if (!MEMORY[0x1D82A392C](*((_QWORD *)a3 + 14), "Enter", 5))
      return 0;
    v8 = &selRef_insertNewline_;
  }
  v9 = (objc_selector *)*v8;
  if (!*v8)
    return 0;
  v10 = (WebView *)*((_QWORD *)this + 4);
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
  if (v11
    && (v12 = *(_QWORD *)(v11 + 8)) != 0
    && (v13 = *(_QWORD **)(*(_QWORD *)(v12 + 280) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v13 + 1072))(v13) & 1) == 0))
  {
    v14 = (objc_object *)v13[2];
  }
  else
  {
    v14 = 0;
  }
  return CallFormDelegateReturningBoolean(0, v10, (objc_selector *)sel_textField_doCommandBySelector_inFrame_, v7, v9, v14);
}

WebCore::Node *WebEditorClient::textWillBeDeletedInTextField(WebCore::Node *this, WebCore::Element *a2)
{
  uint64_t v3;
  objc_object *v4;
  WebView *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  objc_object *v9;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      v4 = (objc_object *)this;
      v5 = *(WebView **)(v3 + 32);
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
      if (v6
        && (v7 = *(_QWORD *)(v6 + 8)) != 0
        && (v8 = *(_QWORD **)(*(_QWORD *)(v7 + 280) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) == 0))
      {
        v9 = (objc_object *)v8[2];
      }
      else
      {
        v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegateReturningBoolean(0, v5, (objc_selector *)sel_textField_doCommandBySelector_inFrame_, v4, (objc_selector *)sel_deleteBackward_, v9);
    }
  }
  return this;
}

WebCore::Node *WebEditorClient::textDidChangeInTextArea(WebCore::Node *this, WebCore::Element *a2)
{
  uint64_t v3;
  objc_object *v4;
  WebView *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  objc_object *v9;

  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD5D90] + 24))
  {
    v3 = (uint64_t)this;
    this = kit(a2);
    if (this)
    {
      v4 = (objc_object *)this;
      v5 = *(WebView **)(v3 + 32);
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
      if (v6
        && (v7 = *(_QWORD *)(v6 + 8)) != 0
        && (v8 = *(_QWORD **)(*(_QWORD *)(v7 + 280) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v8 + 1072))(v8) & 1) == 0))
      {
        v9 = (objc_object *)v8[2];
      }
      else
      {
        v9 = 0;
      }
      return (WebCore::Node *)CallFormDelegate(v5, (objc_selector *)sel_textDidChangeInTextArea_inFrame_, v4, v9);
    }
  }
  return this;
}

uint64_t WebEditorClient::hasRichlyEditableSelection(id *this)
{
  objc_msgSend(this[4], "_UIKitDelegateForwarder");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend((id)objc_msgSend(this[4], "_UIKitDelegateForwarder"), "hasRichlyEditableSelection");
  else
    return 0;
}

uint64_t WebEditorClient::getPasteboardItemsCount(id *this)
{
  objc_msgSend(this[4], "_UIKitDelegateForwarder");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend((id)objc_msgSend(this[4], "_UIKitDelegateForwarder"), "getPasteboardItemsCount");
  else
    return 0;
}

uint64_t WebEditorClient::shouldRevealCurrentSelectionAfterInsertion(id *this)
{
  objc_msgSend(this[4], "_UIKitDelegateForwarder");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend((id)objc_msgSend(this[4], "_UIKitDelegateForwarder"), "shouldRevealCurrentSelectionAfterInsertion");
  else
    return 1;
}

uint64_t WebEditorClient::shouldSuppressPasswordEcho(id *this)
{
  objc_msgSend(this[4], "_UIKitDelegateForwarder");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend((id)objc_msgSend(this[4], "_UIKitDelegateForwarder"), "shouldSuppressPasswordEcho");
  else
    return 0;
}

uint64_t WebEditorClient::documentFragmentFromDelegate@<X0>(id *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  objc_msgSend(this[4], "_editingDelegateForwarder");
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0
    && (result = objc_msgSend((id)objc_msgSend(this[4], "_editingDelegateForwarder"), "documentFragmentForPasteboardItemAtIndex:", a2)) != 0)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
    *a3 = v7;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebEditorClient::performsTwoStepPaste(uint64_t a1, WebCore::Node *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "_UIKitDelegateForwarder");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "_UIKitDelegateForwarder"), "performsTwoStepPaste:", kit(a2));
  else
    return 0;
}

uint64_t WebEditorClient::performTwoStepDrop(uint64_t a1, WebCore::Node *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  DOMObjectInternal *v12;
  uint64_t v13;
  WebCore::Node *v15;
  WebCore::Node *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::Range *v19;

  objc_msgSend(*(id *)(a1 + 32), "_UIKitDelegateForwarder");
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 0;
  v8 = (void *)objc_msgSend(*(id *)(a1 + 32), "_UIKitDelegateForwarder");
  v9 = kit(a2);
  v10 = *(WebCore::Node **)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
  v15 = v10;
  LODWORD(v17) = *(_DWORD *)(a3 + 8);
  v11 = *(WebCore::Node **)(a3 + 16);
  *((_DWORD *)v11 + 6) += 2;
  v18 = v11;
  WebCore::createLiveRange();
  v12 = kit(v19);
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1)
      (*(void (**)())(*(_QWORD *)v19 + 8))();
    else
      --*((_DWORD *)v19 + 2);
  }
  v13 = objc_msgSend(v8, "performTwoStepDrop:atDestination:isMove:", v9, v12, a4, v15, v17);
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  if (!v16)
    return v13;
  if (*((_DWORD *)v16 + 6) != 2)
  {
    *((_DWORD *)v16 + 6) -= 2;
    return v13;
  }
  if ((*((_WORD *)v16 + 15) & 0x400) != 0)
    return v13;
  WebCore::Node::removedLastRef(v16);
  return v13;
}

void sub_1D80A2DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  _DWORD *v15;

  v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      std::optional<WebCore::SimpleRange>::~optional(&a9);
      _Unwind_Resume(a1);
    }
    --v15[2];
    std::optional<WebCore::SimpleRange>::~optional(&a9);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a9);
  _Unwind_Resume(a1);
}

uint64_t WebEditorClient::checkTextOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v5;
  const void *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  StringImpl *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _DWORD **v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF *v58;
  id obj;
  id obja;
  uint64_t v61;
  uint64_t v62;
  _BYTE cf[24];
  __int128 v64;
  WTF::StringImpl *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[2];
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v70[0] = a2;
  v70[1] = a3;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v5 = (void *)objc_msgSend(*(id *)(a1 + 32), "_UIKitDelegateForwarder");
  WTF::StringView::createNSStringWithoutCopying((WTF::StringView *)v70);
  obj = (id)objc_msgSend(v5, "checkSpellingOfString:", *(_QWORD *)cf);
  v6 = *(const void **)cf;
  *(_QWORD *)cf = 0;
  if (v6)
    CFRelease(v6);
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v71, 16, obj);
  v8 = result;
  if (result)
  {
    v9 = 0;
    v61 = *(_QWORD *)v67;
    v62 = 0;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v67 != v61)
          objc_enumerationMutation(obja);
        v11 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * v10);
        v65 = 0;
        *(_OWORD *)&cf[8] = 0u;
        v64 = 0u;
        cf[0] = 1;
        *(_QWORD *)&cf[8] = objc_msgSend(v11, "rangeValue");
        *(_QWORD *)&cf[16] = v12;
        v13 = v9;
        if (v9 == *(_DWORD *)(a4 + 8))
        {
          v14 = WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v9 + 1, (unint64_t)cf);
          v15 = *(_DWORD *)(a4 + 12);
          v62 = *(_QWORD *)a4;
          v16 = *(_QWORD *)a4 + 48 * v15;
          v17 = *(_OWORD *)v14;
          *(_QWORD *)(v16 + 16) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v16 = v17;
          v18 = *(unsigned int *)(v14 + 36);
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          v19 = v16 + 24;
          *(_DWORD *)(v19 + 12) = v18;
          if ((_DWORD)v18)
          {
            if (v18 >= 0x6666667)
            {
              __break(0xC471u);
              JUMPOUT(0x1D80A334CLL);
            }
            v20 = 40 * v18;
            v21 = WTF::fastMalloc((WTF *)(40 * v18));
            *(_DWORD *)(v19 + 8) = v20 / 0x28;
            *(_QWORD *)v19 = v21;
            v22 = *(_DWORD *)(v14 + 36);
            if (v22)
            {
              v23 = *(_QWORD *)(v14 + 24);
              v24 = v23 + 40 * v22;
              do
              {
                *(_OWORD *)v21 = *(_OWORD *)v23;
                v25 = *(unsigned int *)(v23 + 28);
                *(_QWORD *)(v21 + 16) = 0;
                *(_QWORD *)(v21 + 24) = 0;
                *(_DWORD *)(v21 + 28) = v25;
                if ((_DWORD)v25)
                {
                  if (v25 >> 29)
                    goto LABEL_74;
                  v26 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v25));
                  *(_DWORD *)(v21 + 24) = v25;
                  *(_QWORD *)(v21 + 16) = v26;
                  v27 = *(unsigned int *)(v23 + 28);
                  if ((_DWORD)v27)
                  {
                    v28 = *(_DWORD ***)(v23 + 16);
                    v29 = 8 * v27;
                    do
                    {
                      v30 = *v28;
                      if (*v28)
                        *v30 += 2;
                      *v26++ = v30;
                      ++v28;
                      v29 -= 8;
                    }
                    while (v29);
                  }
                }
                v31 = *(_DWORD **)(v23 + 32);
                if (v31)
                  *v31 += 2;
                *(_QWORD *)(v21 + 32) = v31;
                v21 += 40;
                v23 += 40;
              }
              while (v23 != v24);
            }
          }
          v32 = *(_DWORD **)(v14 + 40);
          if (v32)
            *v32 += 2;
          *(_QWORD *)(v62 + 48 * v15 + 40) = v32;
          v9 = v15 + 1;
          *(_DWORD *)(a4 + 12) = v15 + 1;
          v33 = v65;
          v65 = 0;
          if (!v33)
            goto LABEL_47;
        }
        else
        {
          v34 = v62 + 48 * v9;
          v35 = *(_OWORD *)cf;
          *(_QWORD *)(v34 + 16) = *(_QWORD *)&cf[16];
          *(_OWORD *)v34 = v35;
          v36 = HIDWORD(v64);
          *(_QWORD *)(v34 + 24) = 0;
          *(_QWORD *)(v34 + 32) = 0;
          v37 = v34 + 24;
          *(_DWORD *)(v37 + 12) = v36;
          if ((_DWORD)v36)
          {
            if (v36 >= 0x6666667)
            {
LABEL_74:
              __break(0xC471u);
              JUMPOUT(0x1D80A3338);
            }
            v38 = 40 * v36;
            v39 = WTF::fastMalloc((WTF *)(40 * v36));
            *(_DWORD *)(v37 + 8) = v38 / 0x28;
            *(_QWORD *)v37 = v39;
            if (HIDWORD(v64))
            {
              v40 = v64;
              v41 = v64 + 40 * HIDWORD(v64);
              do
              {
                *(_OWORD *)v39 = *(_OWORD *)v40;
                v42 = *(unsigned int *)(v40 + 28);
                *(_QWORD *)(v39 + 16) = 0;
                *(_QWORD *)(v39 + 24) = 0;
                *(_DWORD *)(v39 + 28) = v42;
                if ((_DWORD)v42)
                {
                  if (v42 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1D80A3340);
                  }
                  v43 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v42));
                  *(_DWORD *)(v39 + 24) = v42;
                  *(_QWORD *)(v39 + 16) = v43;
                  v44 = *(unsigned int *)(v40 + 28);
                  if ((_DWORD)v44)
                  {
                    v45 = *(_DWORD ***)(v40 + 16);
                    v46 = 8 * v44;
                    do
                    {
                      v47 = *v45;
                      if (*v45)
                        *v47 += 2;
                      *v43++ = v47;
                      ++v45;
                      v46 -= 8;
                    }
                    while (v46);
                  }
                }
                v48 = *(_DWORD **)(v40 + 32);
                if (v48)
                  *v48 += 2;
                *(_QWORD *)(v39 + 32) = v48;
                v39 += 40;
                v40 += 40;
              }
              while (v40 != v41);
            }
          }
          v49 = v65;
          if (v65)
            *(_DWORD *)v65 += 2;
          *(_QWORD *)(v62 + 48 * v13 + 40) = v49;
          v9 = *(_DWORD *)(a4 + 12) + 1;
          *(_DWORD *)(a4 + 12) = v9;
          v33 = v65;
          v65 = 0;
          if (!v33)
            goto LABEL_47;
        }
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::destroy(v33, v12);
          v50 = HIDWORD(v64);
          v51 = v64;
          if (!HIDWORD(v64))
          {
LABEL_67:
            if (!v51)
              goto LABEL_6;
LABEL_68:
            *(_QWORD *)&v64 = 0;
            DWORD2(v64) = 0;
            WTF::fastFree((WTF *)v51, v12);
            goto LABEL_6;
          }
          goto LABEL_48;
        }
        *(_DWORD *)v33 -= 2;
LABEL_47:
        v50 = HIDWORD(v64);
        v51 = v64;
        if (!HIDWORD(v64))
          goto LABEL_67;
LABEL_48:
        v52 = v51 + 40 * v50;
        do
        {
          v53 = *(WTF::StringImpl **)(v51 + 32);
          *(_QWORD *)(v51 + 32) = 0;
          if (!v53)
            goto LABEL_53;
          if (*(_DWORD *)v53 != 2)
          {
            *(_DWORD *)v53 -= 2;
LABEL_53:
            v54 = *(unsigned int *)(v51 + 28);
            if (!(_DWORD)v54)
              goto LABEL_62;
            goto LABEL_56;
          }
          WTF::StringImpl::destroy(v53, v12);
          v54 = *(unsigned int *)(v51 + 28);
          if (!(_DWORD)v54)
            goto LABEL_62;
LABEL_56:
          v55 = *(WTF::StringImpl ***)(v51 + 16);
          v56 = 8 * v54;
          do
          {
            v57 = *v55;
            *v55 = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, v12);
              else
                *(_DWORD *)v57 -= 2;
            }
            ++v55;
            v56 -= 8;
          }
          while (v56);
LABEL_62:
          v58 = *(WTF **)(v51 + 16);
          if (v58)
          {
            *(_QWORD *)(v51 + 16) = 0;
            *(_DWORD *)(v51 + 24) = 0;
            WTF::fastFree(v58, v12);
          }
          v51 += 40;
        }
        while (v51 != v52);
        v51 = v64;
        if ((_QWORD)v64)
          goto LABEL_68;
LABEL_6:
        ++v10;
      }
      while (v10 != v8);
      result = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v66, v71, 16);
      v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_1D80A3358(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D80A336C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  uint64_t v13;
  StringImpl *v15;

  if (cf)
  {
    CFRelease(cf);
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13, v15);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13, a2);
  _Unwind_Resume(a1);
}

void WebCore::TextCheckingResult::~TextCheckingResult(WebCore::TextCheckingResult *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v3)
    goto LABEL_4;
  if (*(_DWORD *)v3 != 2)
  {
    *(_DWORD *)v3 -= 2;
LABEL_4:
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
    return;
  }
  WTF::StringImpl::destroy(v3, a2);
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v4);
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    v5 = *(_QWORD *)a1 + 24;
    do
    {
      v6 = *(WTF::StringImpl **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t `non-virtual thunk to'WebEditorClient::checkTextOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WebEditorClient::checkTextOfParagraph(a1 - 24, a2, a3, a4);
}

BOOL WebEditorClient::shouldAllowSingleClickToChangeSelection(WebEditorClient *this, WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  uint64_t v4;

  v4 = WebCore::VisibleSelection::rootEditableElement(a3);
  return !v4 || v4 != WebCore::Node::rootEditableElement(a2);
}

uint64_t WebEditorClient::isGrammarCheckingEnabled(WebEditorClient *this)
{
  return 0;
}

uint64_t WebEditorClient::spellCheckerDocumentTag(WebEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EditorClient::shouldRemoveDictationAlternativesAfterEditing(WebCore::EditorClient *this)
{
  return 1;
}

uint64_t WebCore::EditorClient::supportsClientSideAttachmentData(WebCore::EditorClient *this)
{
  return 0;
}

void WebCore::EditorClient::serializedAttachmentDataForIdentifiers(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebEditorClient::requestDOMPasteAccess()
{
  return 0;
}

uint64_t WebEditorClient::textChecker(WebEditorClient *this)
{
  return (uint64_t)this + 24;
}

uint64_t WebEditorClient::spellingUIIsShowing(WebEditorClient *this)
{
  return 0;
}

uint64_t WebCore::EditorClient::supportsGlobalSelection(WebCore::EditorClient *this)
{
  return 0;
}

uint64_t WebEditorClient::shouldEraseMarkersAfterChangeSelection()
{
  return 1;
}

uint64_t `non-virtual thunk to'WebEditorClient::shouldEraseMarkersAfterChangeSelection()
{
  return 1;
}

uint64_t WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF *v12;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    while (1)
    {
      v6 = (WTF::StringImpl *)*((_QWORD *)v4 + 4);
      *((_QWORD *)v4 + 4) = 0;
      if (!v6)
        goto LABEL_7;
      if (*(_DWORD *)v6 != 2)
        break;
      WTF::StringImpl::destroy(v6, a2);
      v7 = *((unsigned int *)v4 + 7);
      if ((_DWORD)v7)
      {
LABEL_10:
        v8 = (WTF::StringImpl **)*((_QWORD *)v4 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
LABEL_16:
      v11 = (WTF *)*((_QWORD *)v4 + 2);
      if (v11)
      {
        *((_QWORD *)v4 + 2) = 0;
        *((_DWORD *)v4 + 6) = 0;
        WTF::fastFree(v11, a2);
      }
      v4 = (WTF *)((char *)v4 + 40);
      if (v4 == (WTF *)v5)
        goto LABEL_18;
    }
    *(_DWORD *)v6 -= 2;
LABEL_7:
    v7 = *((unsigned int *)v4 + 7);
    if ((_DWORD)v7)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_18:
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  StringImpl *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (char *)v3 + 48 * v4;
        v9 = (uint64_t)v3 + 24;
        do
        {
          v11 = *(_QWORD *)(v9 - 8);
          *(_OWORD *)v7 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          *(_QWORD *)(v7 + 16) = v11;
          v12 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v7 + 24) = v12;
          LODWORD(v12) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v7 + 32) = v12;
          LODWORD(v12) = *(_DWORD *)(v9 + 12);
          *(_DWORD *)(v9 + 12) = 0;
          *(_DWORD *)(v7 + 36) = v12;
          v13 = *(_QWORD *)(v9 + 16);
          *(_QWORD *)(v9 + 16) = 0;
          *(_QWORD *)(v7 + 40) = v13;
          v14 = *(WTF::StringImpl **)(v9 + 16);
          *(_QWORD *)(v9 + 16) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v6);
            else
              *(_DWORD *)v14 -= 2;
          }
          v10 = v9 - 24;
          result = WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v6);
          v9 += 48;
          v7 += 48;
        }
        while ((char *)(v10 + 48) != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void sub_1D80A3E9C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t cacheValueForKey(const void *a1, const void *a2, void *a3)
{
  return objc_msgSend(a3, "objectForKey:", a1);
}

void sub_1D80A42C8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A4398(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A4444(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A44F0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A45F8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A46A4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A47C8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A4890(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80A4EF4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)webFixedPositionContentDataLock);
  goto LABEL_6;
}

void sub_1D80A5148(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)webFixedPositionContentDataLock);
  goto LABEL_6;
}

void sub_1D80A56C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  int v11;

  v11 = __ldxr(webFixedPositionContentDataLock);
  if (v11 == 1)
  {
    if (!__stlxr(0, webFixedPositionContentDataLock))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)webFixedPositionContentDataLock);
  goto LABEL_6;
}

WTF **std::unique_ptr<ViewportConstrainedLayerData>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RetainPtr<CALayer>,WTF::KeyValuePair<WTF::RetainPtr<CALayer>,std::unique_ptr<ViewportConstrainedLayerData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<CALayer>,std::unique_ptr<ViewportConstrainedLayerData>>>,WTF::DefaultHash<WTF::RetainPtr<CALayer>>,WTF::HashMap<WTF::RetainPtr<CALayer>,std::unique_ptr<ViewportConstrainedLayerData>,WTF::DefaultHash<WTF::RetainPtr<CALayer>>,WTF::HashTraits<WTF::RetainPtr<CALayer>>,WTF::HashTraits<std::unique_ptr<ViewportConstrainedLayerData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<CALayer>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  const void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (const void **)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != (const void *)-1)
      {
        if (v12)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = v16 + 16 * v23;
          v26 = *(WTF **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            v27 = *((_QWORD *)v26 + 1);
            *((_QWORD *)v26 + 1) = 0;
            if (v27)
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            WTF::fastFree(v26, v8);
            v28 = *(const void **)v25;
            *(_QWORD *)v25 = 0;
            if (v28)
              CFRelease(v28);
          }
          else
          {
            *(_QWORD *)v25 = 0;
          }
          v29 = *v11;
          *v11 = 0;
          *(_QWORD *)v25 = v29;
          v30 = v4 + 16 * v9;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v25 + 8) = v31;
          v32 = *(WTF **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
          {
            v33 = *((_QWORD *)v32 + 1);
            *((_QWORD *)v32 + 1) = 0;
            if (v33)
              (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            WTF::fastFree(v32, v8);
          }
          v12 = *v11;
          *v11 = 0;
          if (!v12)
            goto LABEL_6;
        }
        else
        {
          v13 = v4 + 16 * v9;
          v14 = *(WTF **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            v15 = *((_QWORD *)v14 + 1);
            *((_QWORD *)v14 + 1) = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            WTF::fastFree(v14, v8);
            v12 = *v11;
          }
          *v11 = 0;
          if (!v12)
            goto LABEL_6;
        }
        CFRelease(v12);
      }
LABEL_6:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

void sub_1D80A5E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a16);
  _Unwind_Resume(a1);
}

void sub_1D80A5E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A5FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A65DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v26;
  WTF *v27;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a15);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a21);
  v27 = a18;
  if (a18)
  {
    a18 = 0;
    a19 = 0;
    WTF::fastFree(v27, v26);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a24);
    std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v24 - 120));
    _Unwind_Resume(a1);
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a24);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v24 - 120));
  _Unwind_Resume(a1);
}

void sub_1D80A66A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1D80A6750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A6978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

void sub_1D80A69AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A69C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80A69D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80A6B28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (!a9)
    _Unwind_Resume(exception_object);
  WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D80A6C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A6D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A6F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v4 = *(_DWORD **)(v2 - 24);
  *(_QWORD *)(v2 - 24) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1D80A6F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1D80A7034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1D80A7BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a16);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a19);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a22);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a25);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a28);
  _Unwind_Resume(a1);
}

void sub_1D80A7F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D80A8044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A8058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

void sub_1D80A8374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a14);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a17);
  _Unwind_Resume(a1);
}

void sub_1D80A83B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A83CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D80A88AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_1D80A8A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1D80A8AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1D80A8C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A8CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A8D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80A9F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v30 - 136));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v30 - 112));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a30);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a27);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v30 - 256));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v30 - 232));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v30 - 208));
  _Unwind_Resume(a1);
}

uint64_t *WebCore::VisibleSelection::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_DWORD *)a2 + 2);
  *((_BYTE *)a1 + 12) = *((_BYTE *)a2 + 12);
  *((_DWORD *)a1 + 2) = v6;
  v7 = a2[2];
  a2[2] = 0;
  v8 = a1[2];
  a1[2] = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_DWORD *)a2 + 6);
  *((_BYTE *)a1 + 28) = *((_BYTE *)a2 + 28);
  *((_DWORD *)a1 + 6) = v9;
  v10 = a2[4];
  a2[4] = 0;
  v11 = a1[4];
  a1[4] = v10;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *((_DWORD *)a2 + 10);
  *((_BYTE *)a1 + 44) = *((_BYTE *)a2 + 44);
  *((_DWORD *)a1 + 10) = v12;
  v13 = a2[6];
  a2[6] = 0;
  v14 = a1[6];
  a1[6] = v13;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  v15 = *((_DWORD *)a2 + 14);
  *((_BYTE *)a1 + 60) = *((_BYTE *)a2 + 60);
  *((_DWORD *)a1 + 14) = v15;
  v16 = a2[8];
  a2[8] = 0;
  v17 = a1[8];
  a1[8] = v16;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  v18 = *((_DWORD *)a2 + 18);
  *((_BYTE *)a1 + 76) = *((_BYTE *)a2 + 76);
  *((_DWORD *)a1 + 18) = v18;
  v19 = a2[10];
  a2[10] = 0;
  v20 = a1[10];
  a1[10] = v19;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  v21 = *((_DWORD *)a2 + 22);
  *((_BYTE *)a1 + 92) = *((_BYTE *)a2 + 92);
  *((_DWORD *)a1 + 22) = v21;
  LOWORD(v21) = *((_WORD *)a2 + 48);
  *((_BYTE *)a1 + 98) = *((_BYTE *)a2 + 98);
  *((_WORD *)a1 + 48) = v21;
  return a1;
}

void sub_1D80AA334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80AA3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t WebFrameNetworkingContext::ensurePrivateBrowsingSession(WebFrameNetworkingContext *this)
{
  SessionID v1;
  const WTF::String *v2;
  StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  WTF::StringImpl *v10;

  MEMORY[0x1D82A3998](&v10, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"));
  v1.m_identifier = (unint64_t)&v10;
  NetworkStorageSessionMap::ensureSession(0x8000000000000001, v1, v2);
  v4 = v10;
  v10 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v3);
        goto LABEL_5;
LABEL_13:
      result = 0;
      globalSessionMap(void)::map = 0;
      return result;
    }
    *(_DWORD *)v4 -= 2;
  }
    goto LABEL_13;
LABEL_5:
  if (globalSessionMap(void)::map)
  {
    v5 = *(_DWORD *)(globalSessionMap(void)::map - 8);
    v6 = v5 & 0xA6721BA;
    v7 = *(_QWORD *)(globalSessionMap(void)::map + 16 * v6);
    if (v7 == 0x8000000000000001)
      return *(_QWORD *)(globalSessionMap(void)::map + 16 * v6 + 8);
    v8 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v8) & v5;
      v7 = *(_QWORD *)(globalSessionMap(void)::map + 16 * v6);
      ++v8;
      if (v7 == 0x8000000000000001)
        return *(_QWORD *)(globalSessionMap(void)::map + 16 * v6 + 8);
    }
  }
  return 0;
}

void sub_1D80AA6EC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebFrameNetworkingContext::localFileContentSniffingEnabled(WebFrameNetworkingContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(v2 + 136) + 680) >> 62) & 1;
  else
    return 0;
}

uint64_t WebFrameNetworkingContext::scheduledRunLoopPairs(WebFrameNetworkingContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 24)) != 0 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    return *(_QWORD *)(v4 + 24);
  else
    return 0;
}

uint64_t WebFrameNetworkingContext::sourceApplicationAuditData@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(this + 16);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 24)) != 0 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16));
    if ((this & 1) != 0
      || (this = (uint64_t)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16) + 16))) == 0)
    {
      *a2 = 0;
    }
    else
    {
      this = objc_msgSend((id)this, "_sourceApplicationAuditData");
      *a2 = this;
      if (this)
        return (uint64_t)CFRetain((CFTypeRef)this);
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void WebFrameNetworkingContext::sourceApplicationIdentifier(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebFrameNetworkingContext::blockedError(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 576))(v1);
}

uint64_t WebFrameNetworkingContext::storageSession(WebFrameNetworkingContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::Page *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  WebCore::NetworkStorageSession *v10;
  SessionID v11;
  uint64_t v12;
  void *v13;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    goto LABEL_13;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_13;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    goto LABEL_13;
  v4 = *(WebCore::Page **)(v3 + 8);
  if (!v4 || WebCore::Page::sessionID(v4) > -2)
    goto LABEL_13;
  {
    if (globalSessionMap(void)::map)
    {
      v5 = *(_DWORD *)(globalSessionMap(void)::map - 8);
      v6 = v5 & 0xA6721BA;
      v7 = *(_QWORD *)(globalSessionMap(void)::map + 16 * v6);
      if (v7 == 0x8000000000000001)
      {
LABEL_12:
        result = *(_QWORD *)(globalSessionMap(void)::map + 16 * v6 + 8);
        if (result)
          return result;
      }
      else
      {
        v8 = 1;
        while (v7)
        {
          v6 = ((_DWORD)v6 + v8) & v5;
          v7 = *(_QWORD *)(globalSessionMap(void)::map + 16 * v6);
          ++v8;
          if (v7 == 0x8000000000000001)
            goto LABEL_12;
        }
      }
    }
LABEL_13:
      goto LABEL_14;
LABEL_17:
    defaultNetworkStorageSession(void)::session = 0;
    goto LABEL_18;
  }
  globalSessionMap(void)::map = 0;
    goto LABEL_17;
LABEL_14:
  result = defaultNetworkStorageSession(void)::session;
  if (defaultNetworkStorageSession(void)::session)
    return result;
LABEL_18:
  v10 = (WebCore::NetworkStorageSession *)WTF::fastMalloc((WTF *)0x128);
  v11.m_identifier = 1;
  result = WebCore::NetworkStorageSession::NetworkStorageSession(v10, v11);
  {
    defaultNetworkStorageSession(void)::session = result;
    return result;
  }
  v12 = defaultNetworkStorageSession(void)::session;
  defaultNetworkStorageSession(void)::session = result;
  if (v12)
  {
    MEMORY[0x1D82A5C18](v12);
    if (*(_DWORD *)(v12 + 8))
    {
      *(_QWORD *)(v12 + 288) = 0;
      *(_OWORD *)(v12 + 256) = 0u;
      *(_OWORD *)(v12 + 272) = 0u;
      *(_OWORD *)(v12 + 224) = 0u;
      *(_OWORD *)(v12 + 240) = 0u;
      *(_OWORD *)(v12 + 192) = 0u;
      *(_OWORD *)(v12 + 208) = 0u;
      *(_OWORD *)(v12 + 160) = 0u;
      *(_OWORD *)(v12 + 176) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_OWORD *)(v12 + 144) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
        return defaultNetworkStorageSession(void)::session;
    }
    else
    {
      WTF::fastFree((WTF *)v12, v13);
        return defaultNetworkStorageSession(void)::session;
    }
    result = 0;
    defaultNetworkStorageSession(void)::session = 0;
  }
  return result;
}

void WebFrameNetworkingContext::~WebFrameNetworkingContext(WebFrameNetworkingContext *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &unk_1E9D6B9A8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)this = &unk_1E9D6B9A8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
    v6 = this;
  }
  else
  {
LABEL_4:
    v6 = this;
  }
  WTF::fastFree(v6, a2);
}

void sub_1D80AAC04(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebGeolocationClient::geolocationDestroyed(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 72))(this);
  return this;
}

uint64_t WebGeolocationClient::startUpdating(id *this, const WTF::String *a2, int a3)
{
  if (a3)
    (*((void (**)(id *, uint64_t))*this + 4))(this, 1);
  return objc_msgSend((id)objc_msgSend(this[1], "_geolocationProvider"), "registerWebView:", this[1]);
}

uint64_t WebGeolocationClient::stopUpdating(id *this)
{
  return objc_msgSend((id)objc_msgSend(this[1], "_geolocationProvider"), "unregisterWebView:", this[1]);
}

uint64_t WebGeolocationClient::setEnableHighAccuracy(id *this, uint64_t a2)
{
  return objc_msgSend((id)objc_msgSend(this[1], "_geolocationProvider"), "setEnableHighAccuracy:", a2);
}

void WebGeolocationClient::requestPermission(id *this, WebCore::Geolocation *a2)
{
  WebGeolocationProviderInitializationListener *v4;
  StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  objc_msgSend(this[1], "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = -[WebGeolocationProviderInitializationListener initWithGeolocation:]([WebGeolocationProviderInitializationListener alloc], "initWithGeolocation:", a2);
    objc_msgSend((id)objc_msgSend(this[1], "_geolocationProvider"), "initializeGeolocationForWebView:listener:", this[1], v4);
    if (v4)
      CFRelease(v4);
  }
  else
  {
    v7 = 0;
    WebCore::Geolocation::setIsAllowed(a2, 0, (const WTF::String *)&v7);
    v6 = v7;
    v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
}

void sub_1D80AAE40(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  NSException *v16;
  WTF::StringImpl *v17;

  v14 = (int)a2;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v14 != 1)
    _Unwind_Resume(exception_object);
  v16 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v16);
  objc_end_catch();
}

uint64_t WebGeolocationClient::lastPosition@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = objc_msgSend((id)objc_msgSend(this[1], "_geolocationProvider"), "lastPosition");
  if (result)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = *(_OWORD *)(v4 + 56);
    v6 = *(_OWORD *)(v4 + 88);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v4 + 72);
    *(_OWORD *)(a2 + 80) = v6;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v4 + 104);
    v7 = *(_OWORD *)(v4 + 24);
    *(_OWORD *)a2 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v4 + 40);
    *(_OWORD *)(a2 + 48) = v5;
    *(_BYTE *)(a2 + 112) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 112) = 0;
  }
  return result;
}

void sub_1D80AB0B8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80AB1A4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80AB458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  NSException *v16;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v16 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v16);
  objc_end_catch();
}

void sub_1D80AB534(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t initCLLocationManager(void)
{
  uint64_t result;

  if ((_MergedGlobals_2 & 1) != 0)
  {
    result = (uint64_t)objc_getClass("CLLocationManager");
    qword_1F0166028 = result;
    if (result)
    {
LABEL_3:
      getCLLocationManagerClass = CLLocationManagerFunction;
      return result;
    }
  }
  else
  {
    qword_1F0166030 = ___ZL19CoreLocationLibraryv_block_invoke();
    _MergedGlobals_2 = 1;
    result = (uint64_t)objc_getClass("CLLocationManager");
    qword_1F0166028 = result;
    if (result)
      goto LABEL_3;
  }
  result = 42;
  __break(0xC471u);
  return result;
}

uint64_t CLLocationManagerFunction(void)
{
  return qword_1F0166028;
}

uint64_t ___ZL19CoreLocationLibraryv_block_invoke()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
  if (!result)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t initkCLLocationAccuracyBest(void)
{
  uint64_t result;

  if (_MergedGlobals_2 == 1)
  {
    result = (uint64_t)dlsym((void *)qword_1F0166030, "kCLLocationAccuracyBest");
    if (result)
    {
LABEL_3:
      qword_1F0166038 = *(_QWORD *)result;
      _MergedGlobals_5 = (uint64_t)kCLLocationAccuracyBestFunction;
      return result;
    }
  }
  else
  {
    qword_1F0166030 = ___ZL19CoreLocationLibraryv_block_invoke();
    _MergedGlobals_2 = 1;
    result = (uint64_t)dlsym((void *)qword_1F0166030, "kCLLocationAccuracyBest");
    if (result)
      goto LABEL_3;
  }
  result = 45;
  __break(0xC471u);
  return result;
}

double kCLLocationAccuracyBestFunction(void)
{
  return *(double *)&qword_1F0166038;
}

uint64_t initkCLLocationAccuracyHundredMeters(void)
{
  uint64_t result;

  if (_MergedGlobals_2 == 1)
  {
    result = (uint64_t)dlsym((void *)qword_1F0166030, "kCLLocationAccuracyHundredMeters");
    if (result)
    {
LABEL_3:
      qword_1F0166040 = *(_QWORD *)result;
      qword_1ECEC9758 = (uint64_t)kCLLocationAccuracyHundredMetersFunction;
      return result;
    }
  }
  else
  {
    qword_1F0166030 = ___ZL19CoreLocationLibraryv_block_invoke();
    _MergedGlobals_2 = 1;
    result = (uint64_t)dlsym((void *)qword_1F0166030, "kCLLocationAccuracyHundredMeters");
    if (result)
      goto LABEL_3;
  }
  result = 46;
  __break(0xC471u);
  return result;
}

double kCLLocationAccuracyHundredMetersFunction(void)
{
  return *(double *)&qword_1F0166040;
}

void sub_1D80AC238(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D80AC3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80AC6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80AC798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80ACA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;

  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void sub_1D80ACBE0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::HashMap<WTF::RetainPtr<WebView>,WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::DefaultHash<WTF::RetainPtr<WebView>>,WTF::HashTraits<WTF::RetainPtr<WebView>>,WTF::DefaultHash<WTF::RetainPtr<WebView>><objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<WTF::RetainPtr<WebView>,WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::DefaultHash<WTF::RetainPtr<WebView>>,WTF::HashTraits<WTF::RetainPtr<WebView>>,WTF::DefaultHash<WTF::RetainPtr<WebView>><objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *(const void **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(const void **)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
          {
            CFRelease(v7);
            v6 = *(const void **)v5;
          }
          *(_QWORD *)v5 = 0;
          if (v6)
            CFRelease(v6);
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

void sub_1D80ACDEC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::HashMap<WTF::RetainPtr<WebView>,WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::DefaultHash<WTF::RetainPtr<WebView>>,WTF::HashTraits<WTF::RetainPtr<WebView>>,WTF::DefaultHash<WTF::RetainPtr<WebView>><objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80AD068(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D80AD1A8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D80AD384(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D80AD64C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80AD660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
  {
    CFRelease(cf);
    if (!v14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  CFRelease(v14);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c46_ZTSN3WTF9RetainPtrI22WebGeolocationPositionEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSN3WTF9RetainPtrI22WebGeolocationPositionEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t *WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_12:
    *v14 = v9;
    if (*v4)
    {
      ++*(_DWORD *)(*v4 - 12);
      v18 = *v4;
      if (*v4)
        goto LABEL_14;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v18 = *v4;
      if (*v4)
      {
LABEL_14:
        v19 = (*(_DWORD *)(v18 - 16) + *(_DWORD *)(v18 - 12));
        v20 = *(unsigned int *)(v18 - 4);
        if (v20 <= 0x400)
          goto LABEL_15;
        goto LABEL_23;
      }
    }
    v19 = *(unsigned int *)(v18 - 16);
    v20 = *(unsigned int *)(v18 - 4);
    if (v20 <= 0x400)
    {
LABEL_15:
      if (3 * v20 > 4 * v19)
      {
LABEL_26:
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v18 + 8 * v20;
        *(_BYTE *)(a3 + 16) = 1;
        return result;
      }
      if (!(_DWORD)v20)
      {
        result = WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(v4, 8u, v14);
        v14 = result;
        v18 = *v4;
        if (!*v4)
        {
LABEL_18:
          v20 = 0;
          goto LABEL_26;
        }
LABEL_25:
        v20 = *(unsigned int *)(v18 - 4);
        goto LABEL_26;
      }
LABEL_24:
      result = WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(v4, (_DWORD)v20 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v20)), v14);
      v14 = result;
      v18 = *v4;
      if (!*v4)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_23:
    if (v20 > 2 * v19)
      goto LABEL_26;
    goto LABEL_24;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -1)
      v16 = v14;
    v13 = (v13 + v17) & v8;
    v14 = (uint64_t *)(v6 + 8 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        --*(_DWORD *)(*v4 - 16);
        v9 = *a2;
        v14 = v16;
      }
      goto LABEL_12;
    }
  }
  if ((v7 & 1) != 0)
    v21 = 0;
  else
    v21 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v6 + 8 * v21;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

_QWORD *WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::RetainPtr<WebView>,WTF::KeyValuePair<WTF::RetainPtr<WebView>,WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>>,WTF::KeyValuePairKeyExtractor<WTF::RetainPtr<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>>,WTF::DefaultHash<WTF::RetainPtr<WebView>>,WTF::HashMap<WTF::RetainPtr<WebView>,objc_object  {objcproto44WebGeolocationProviderInitializationListener}*,WTF::DefaultHash,WTF::HashTraits<WTF::RetainPtr<WebView>>,WTF::HashMap<objc_object  {objcproto44WebGeolocationProviderInitializationListener}*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (const void **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (const void *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = v14 + 16 * v21;
          v24 = *(const void **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            CFRelease(v24);
            v25 = *(const void **)v23;
            *(_QWORD *)v23 = 0;
            if (v25)
              CFRelease(v25);
          }
          else
          {
            *(_QWORD *)v23 = 0;
          }
          v26 = *v10;
          *v10 = 0;
          *(_QWORD *)v23 = v26;
          v27 = v4 + 16 * v9;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v28;
          v29 = *(const void **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            CFRelease(v29);
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_6;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(const void **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(v13);
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_6;
        }
        CFRelease(v11);
      }
LABEL_6:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

void sub_1D80AE874(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80AE95C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D80AEA60(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80AEDF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  WTF::Vector<WTF::RetainPtr<NSMutableArray>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80AEE04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  WTF::Vector<WTF::RetainPtr<NSMutableArray>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80AEE18(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, int a20,int a21)
{
  const void *v21;

  if (v21)
    CFRelease(v21);
  WTF::Vector<WTF::RetainPtr<NSMutableArray>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::RetainPtr<NSMutableArray>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(const void ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        CFRelease(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1D80AF330(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D80AF91C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
  {
    CFRelease(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80AFC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21)
{
  const void *v21;
  StringImpl *v23;

  CFRelease(v21);
  WebHistoryWriter::~WebHistoryWriter((WebHistoryWriter *)&a10, v23);
  _Unwind_Resume(a1);
}

void WebHistoryWriter::~WebHistoryWriter(WebHistoryWriter *this, StringImpl *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E9D6DDE0;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  HistoryPropertyListWriter::~HistoryPropertyListWriter(this, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = &off_1E9D6DDE0;
  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  HistoryPropertyListWriter::~HistoryPropertyListWriter(this, a2);
  JUMPOUT(0x1D82A8D20);
}

void sub_1D80B0310(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void HistoryPropertyListWriter::~HistoryPropertyListWriter(HistoryPropertyListWriter *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = off_1E9D69340;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = 0;
      if (!v4)
        goto LABEL_9;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v4)
  {
LABEL_9:
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v5)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v5)
    goto LABEL_14;
LABEL_12:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (!v6)
      goto LABEL_19;
    goto LABEL_17;
  }
  *(_DWORD *)v5 -= 2;
LABEL_14:
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v6)
  {
LABEL_19:
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (!v7)
      goto LABEL_24;
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v6, a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v7)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, a2);
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v8)
      return;
    goto LABEL_27;
  }
  *(_DWORD *)v7 -= 2;
LABEL_24:
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v8)
    return;
LABEL_27:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, a2);
  else
    *(_DWORD *)v8 -= 2;
}

uint64_t WebHistoryWriter::writeHistoryItems(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t i;

  v2 = *(_DWORD *)(result + 92);
  v3 = (v2 - 1);
  if (v2 - 1 >= 0)
  {
    v5 = result;
    do
    {
      if (v3 >= *(unsigned int *)(v5 + 92))
      {
        __break(0xC471u);
        return result;
      }
      v7 = **(_QWORD **)(v5 + 72);
      if (v7)
      {
        v8 = *(int *)(*(_QWORD *)(v5 + 80) + 4 * v3);
        v9 = *(_DWORD *)(v7 - 8);
        v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = *(_QWORD *)(v7 + 16 * v13);
        if (v14 != v8)
        {
          v15 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v15) & v9;
            v14 = *(_QWORD *)(v7 + 16 * v13);
            ++v15;
            if (v14 == v8)
              goto LABEL_10;
          }
          v17 = 0;
          result = objc_msgSend(0, "count");
          if (!result)
            continue;
LABEL_15:
          v18 = result;
          for (i = 0; i != v18; ++i)
            result = HistoryPropertyListWriter::writeHistoryItem(v5, a2, objc_msgSend(v17, "objectAtIndex:", i));
          continue;
        }
LABEL_10:
        v16 = v7 + 16 * v13;
        v17 = *(void **)(v16 + 8);
        if (v17)
        {
          CFRetain(*(CFTypeRef *)(v16 + 8));
          CFRelease(v17);
          result = objc_msgSend(v17, "count");
          if (result)
            goto LABEL_15;
          continue;
        }
      }
      else
      {
        v17 = 0;
      }
      result = objc_msgSend(v17, "count");
      if (result)
        goto LABEL_15;
    }
    while ((uint64_t)v3-- > 0);
  }
  return result;
}

void sub_1D80B0A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, _DWORD *a13)
{
  StringImpl *v14;

  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&a13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D80B0CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, _DWORD *a13)
{
  StringImpl *v14;

  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&a13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D80B1220(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80B1234(_Unwind_Exception *a1, void *a2)
{
  const void *v2;
  unsigned int *v3;
  unsigned int v5;
  unsigned int v6;

  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
      CFRelease(v2);
      _Unwind_Resume(a1);
    }
  }
  CFRelease(v2);
  _Unwind_Resume(a1);
}

void sub_1D80B1284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1D80B13B0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::HistoryItem *kit(WebCore::HistoryItem *a1)
{
  WebCore::HistoryItem *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  WebHistoryItem *v13;
  WebCore::HistoryItem *v14;
  WTF *v15;
  void *v16;
  WebCore::HistoryItem *v17;

  v1 = a1;
  if (!a1)
    return v1;
  if ((_MergedGlobals_18 & 1) != 0)
  {
    if (qword_1ECEC98B8)
    {
      v2 = *(_DWORD *)(qword_1ECEC98B8 - 8);
      v3 = ((unint64_t)a1 + ~((_QWORD)a1 << 32)) ^ (((unint64_t)a1 + ~((_QWORD)a1 << 32)) >> 22);
      v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
      v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
      v6 = v2 & ((v5 >> 31) ^ v5);
      for (i = 1; ; ++i)
      {
        v8 = v6;
        v9 = *(_QWORD *)(qword_1ECEC98B8 + 16 * v6);
        if (v9 != -1)
        {
          if (!v9)
            goto LABEL_12;
          if (*(WebCore::HistoryItem **)(v9 + 8) == a1)
            break;
        }
        v6 = (v8 + i) & v2;
      }
      v10 = qword_1ECEC98B8 + 16 * v8;
      v11 = *(const void **)(v10 + 8);
      if (v11)
      {
        CFRetain(*(CFTypeRef *)(v10 + 8));
        return (WebCore::HistoryItem *)(id)CFMakeCollectable(v11);
      }
    }
  }
  else
  {
    qword_1ECEC98B8 = 0;
    _MergedGlobals_18 = 1;
  }
LABEL_12:
  v13 = [WebHistoryItem alloc];
  ++*(_DWORD *)v1;
  v17 = v1;
  v1 = (id)CFMakeCollectable(-[WebHistoryItem initWithWebCoreHistoryItem:](v13, "initWithWebCoreHistoryItem:", &v17));
  v14 = v17;
  v17 = 0;
  if (!v14)
    return v1;
  if (*(_DWORD *)v14 != 1)
  {
    --*(_DWORD *)v14;
    return v1;
  }
  v15 = (WTF *)MEMORY[0x1D82A3F20]();
  WTF::fastFree(v15, v16);
  return v1;
}

void sub_1D80B1814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1D80B1828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref((_DWORD **)va);
  _Unwind_Resume(a1);
}

void sub_1D80B1A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, _DWORD *a13)
{
  StringImpl *v14;

  WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::~Ref(&a13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D80B1E18(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B1EC4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B23BC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
  if (a18)
  {
    if (*(_DWORD *)a18 != 2)
    {
      *(_DWORD *)a18 -= 2;
      _Unwind_Resume(exception_object);
    }
    WTF::StringImpl::destroy(a18, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B24E0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B2878(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef cf;

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  *a1 = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = (void *)v4;
    v8 = *(WTF **)a2;
    v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement(v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        v10 = cf;
        cf = 0;
        CFRelease(v10);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_1D80B292C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  const void *v11;

  if (cf)
  {
    CFRelease(cf);
    *v10 = 0;
    if (!v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    *v10 = 0;
    if (!v11)
      goto LABEL_3;
  }
  CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void sub_1D80B2A64(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B2B40(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D80B2C08(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>,WebHistoryItem *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>,WebHistoryItem *>>,WTF::DefaultHash<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>,WebHistoryItem *,WTF::DefaultHash<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WebHistoryItem *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::HistoryItem,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t i;
  unsigned int **v8;
  unsigned int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v2 = qword_1ECEC98B8;
  if (qword_1ECEC98B8)
  {
    v3 = *(_DWORD *)(qword_1ECEC98B8 - 4);
    v4 = *(_DWORD *)(qword_1ECEC98B8 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECEC98B8 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECEC98B8 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = (unsigned int **)(v2 + 16 * i);
      v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (qword_1ECEC98B8)
            v10 = *(_DWORD *)(qword_1ECEC98B8 - 8);
          else
            v10 = 0;
          v11 = ~(*((_QWORD *)v9 + 1) << 32) + *((_QWORD *)v9 + 1);
          v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
          v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
          v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
          v15 = 1;
          do
          {
            v16 = v14;
            v17 = *(_QWORD *)(qword_1ECEC98B8 + 16 * v14);
            v14 = (v14 + v15++) & v10;
          }
          while (v17);
          v18 = (_QWORD *)(qword_1ECEC98B8 + 16 * v16);
          *v18 = 0;
          v19 = *(_OWORD *)v8;
          *v8 = 0;
          *(_OWORD *)v18 = v19;
          v20 = *v8;
          *v8 = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v6);
            }
          }
        }
        else
        {
          *v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

void WTF::createNSArray<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>(void **a1, WTF **a2)
{
  id v4;
  const WTF::String *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  const void *v13;
  WTF *v14;
  CFTypeRef cf;

  v4 = objc_alloc(MEMORY[0x1E0C99DE8]);
  if (*a2)
  {
    *a1 = (void *)objc_msgSend(v4, "initWithCapacity:", *((unsigned int *)*a2 - 3));
    v6 = *a2;
    if (*a2)
      goto LABEL_3;
LABEL_11:
    v9 = 0;
    v8 = v6;
    goto LABEL_12;
  }
  *a1 = (void *)objc_msgSend(v4, "initWithCapacity:", 0);
  v6 = *a2;
  if (!*a2)
    goto LABEL_11;
LABEL_3:
  v7 = *((unsigned int *)v6 - 1);
  v8 = (WTF *)((char *)v6 + 8 * v7);
  if (*((_DWORD *)v6 - 3))
  {
    v9 = v6;
    if ((_DWORD)v7)
    {
      v10 = 8 * v7;
      v9 = v6;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
        if (!v10)
        {
          v9 = v8;
          if (v6)
            goto LABEL_13;
          goto LABEL_16;
        }
      }
    }
LABEL_12:
    if (v6)
      goto LABEL_13;
LABEL_16:
    v11 = 0;
    if (!v9)
      return;
    goto LABEL_19;
  }
  v9 = (WTF *)((char *)v6 + 8 * v7);
  v8 = v9;
  if (!v6)
    goto LABEL_16;
LABEL_13:
  v11 = (WTF *)((char *)v6 + 8 * *((unsigned int *)v6 - 1));
  if (v11 == v9)
    return;
  do
  {
LABEL_19:
    v12 = *a1;
    WTF::makeNSArrayElement(v9, v5);
    if (cf)
    {
      objc_msgSend(v12, "addObject:");
      v13 = cf;
      cf = 0;
      CFRelease(v13);
    }
    v14 = (WTF *)((char *)v9 + 8);
    v9 = v8;
    if (v14 != v8)
    {
      v9 = v14;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 = (WTF *)((char *)v9 + 8);
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
}

void sub_1D80B33A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void **v10;
  const void *v12;

  if (cf)
  {
    CFRelease(cf);
    v12 = *v10;
    *v10 = 0;
    if (!v12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v12 = *v10;
    *v10 = 0;
    if (!v12)
      goto LABEL_3;
  }
  CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &>(void **a1, WTF **a2)
{
  id v4;
  const WTF::String *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  const void *v13;
  WTF *v14;
  CFTypeRef cf;

  v4 = objc_alloc(MEMORY[0x1E0C99DE8]);
  if (*a2)
  {
    *a1 = (void *)objc_msgSend(v4, "initWithCapacity:", *((unsigned int *)*a2 - 3));
    v6 = *a2;
    if (*a2)
      goto LABEL_3;
LABEL_11:
    v9 = 0;
    v8 = v6;
    goto LABEL_12;
  }
  *a1 = (void *)objc_msgSend(v4, "initWithCapacity:", 0);
  v6 = *a2;
  if (!*a2)
    goto LABEL_11;
LABEL_3:
  v7 = *((unsigned int *)v6 - 1);
  v8 = (WTF *)((char *)v6 + 8 * v7);
  if (*((_DWORD *)v6 - 3))
  {
    v9 = v6;
    if ((_DWORD)v7)
    {
      v10 = 8 * v7;
      v9 = v6;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
        if (!v10)
        {
          v9 = v8;
          if (v6)
            goto LABEL_13;
          goto LABEL_16;
        }
      }
    }
LABEL_12:
    if (v6)
      goto LABEL_13;
LABEL_16:
    v11 = 0;
    if (!v9)
      return;
    goto LABEL_19;
  }
  v9 = (WTF *)((char *)v6 + 8 * v7);
  v8 = v9;
  if (!v6)
    goto LABEL_16;
LABEL_13:
  v11 = (WTF *)((char *)v6 + 8 * *((unsigned int *)v6 - 1));
  if (v11 == v9)
    return;
  do
  {
LABEL_19:
    v12 = *a1;
    WTF::makeNSArrayElement(v9, v5);
    if (cf)
    {
      objc_msgSend(v12, "addObject:");
      v13 = cf;
      cf = 0;
      CFRelease(v13);
    }
    v14 = (WTF *)((char *)v9 + 8);
    v9 = v8;
    if (v14 != v8)
    {
      v9 = v14;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 = (WTF *)((char *)v9 + 8);
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
}

void sub_1D80B35C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void **v10;
  const void *v12;

  if (cf)
  {
    CFRelease(cf);
    v12 = *v10;
    *v10 = 0;
    if (!v12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v12 = *v10;
    *v10 = 0;
    if (!v12)
      goto LABEL_3;
  }
  CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void sub_1D80B3698(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::createNSArray<WTF::FixedVector<WTF::ASCIILiteral>>(WTF::StringImpl **a1, unsigned int **a2)
{
  id v4;
  uint64_t v5;
  WTF::StringImpl *result;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  CFTypeRef cf;
  WTF::StringImpl *v19;

  v4 = objc_alloc(MEMORY[0x1E0C99DE8]);
  if (*a2)
    v5 = **a2;
  else
    v5 = 0;
  result = (WTF::StringImpl *)objc_msgSend(v4, "initWithCapacity:", v5);
  v8 = result;
  *a1 = result;
  v9 = *a2;
  v10 = (uint64_t)(*a2 + 2);
  if (*a2)
    v11 = (uint64_t)(*a2 + 2);
  else
    v11 = 0;
  if (!v9)
  {
    v12 = 0;
    if (!v11)
      return result;
    goto LABEL_11;
  }
  v12 = v10 + 16 * *v9;
  if (v11 != v12)
  {
LABEL_11:
    v13 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    while (1)
    {
      v14 = *(_QWORD *)(v11 + 8);
      if (v14)
      {
        v7 = (const WTF::String *)(v14 - 1);
        if (v14 == 1)
        {
          *(_DWORD *)v13 += 2;
          v15 = v13;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v15 = v19;
        }
        v17 = v15;
      }
      else
      {
        v17 = 0;
      }
      WTF::makeNSArrayElement((WTF *)&v17, v7);
      if (cf)
        break;
      result = v17;
      v17 = 0;
      cf = 0;
      if (result)
        goto LABEL_26;
LABEL_13:
      v11 += 16;
      if (v11 == v12)
        return result;
    }
    -[WTF::StringImpl addObject:](v8, "addObject:");
    v16 = cf;
    cf = 0;
    if (v16)
      CFRelease(v16);
    result = v17;
    v17 = 0;
    if (!result)
      goto LABEL_13;
LABEL_26:
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (StringImpl *)v7);
    else
      *(_DWORD *)result -= 2;
    goto LABEL_13;
  }
  return result;
}

void sub_1D80B3804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, CFTypeRef cf)
{
  _QWORD *v11;
  const void *v12;

  *v11 = 0;
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void sub_1D80B38E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1D80B3C34(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;

  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&a9, a2);
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void sub_1D80B3F18(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *cf)
{
  if (cf)
  {
    if (*(_DWORD *)cf == 2)
    {
      WTF::StringImpl::destroy(cf, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)cf -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B4174(_Unwind_Exception *exception_object, StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  _DWORD *v4;

  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      --*v4;
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v2 -= 2;
  }
  --*v4;
  _Unwind_Resume(exception_object);
}

void sub_1D80B43C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B45A4(_Unwind_Exception *exception_object)
{
  const void *v1;
  _DWORD *v2;

  if (v1)
    CFRelease(v1);
  --*v2;
  _Unwind_Resume(exception_object);
}

void sub_1D80B4B24(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t regExpForLabels(NSArray *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  const char *v5;
  int v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  int v11;
  unint64_t v12;
  StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  char *v24;
  _QWORD *v25;
  JSC::Yarr::RegularExpression *v26;
  WTF *v27;
  void *v28;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  int v37;
  StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  NSArray *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  const char *v49;
  int v50;
  WTF::StringImpl *v51;
  const char *v52;
  int v53;
  const char *v54;
  int v55;

  if ((byte_1ECEC98C5 & 1) != 0)
  {
    if ((byte_1ECEC98C6 & 1) != 0)
      goto LABEL_3;
LABEL_75:
    *(_QWORD *)&dword_1ECEC9908 = 0;
    qword_1ECEC9900 = 0;
    byte_1ECEC98C6 = 1;
    v42 = a1;
    if ((byte_1ECEC98C7 & 1) != 0)
      goto LABEL_4;
    goto LABEL_76;
  }
  qword_1ECEC98F0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 4);
  byte_1ECEC98C5 = 1;
  if ((byte_1ECEC98C6 & 1) == 0)
    goto LABEL_75;
LABEL_3:
  v42 = a1;
  if ((byte_1ECEC98C7 & 1) != 0)
    goto LABEL_4;
LABEL_76:
  JSC::Yarr::RegularExpression::RegularExpression();
  byte_1ECEC98C7 = 1;
  a1 = v42;
LABEL_4:
  v48 = 0;
  v2 = objc_msgSend((id)qword_1ECEC98F0, "indexOfObject:", a1);
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 1;
    LOBYTE(v54) = 40;
    WTF::StringBuilder::append();
    v3 = -[NSArray count](a1, "count");
    if (!v3)
      goto LABEL_25;
    MEMORY[0x1D82A3998](&v43, -[NSArray objectAtIndex:](a1, "objectAtIndex:", 0));
    v4 = v43;
    if (v43)
    {
      v5 = "";
      if (*((_DWORD *)v43 + 1))
      {
        v6 = JSC::Yarr::RegularExpression::match();
        v7 = JSC::Yarr::RegularExpression::match();
        v4 = v43;
        v8 = "\\b";
        if (v6 < 0)
          v9 = "";
        else
          v9 = "\\b";
        v10 = ~(v6 >> 30) & 2;
        v11 = ~(v7 >> 30) & 2;
        if (v7 < 0)
          v8 = "";
        v5 = v9;
      }
      else
      {
        v11 = 0;
        v10 = 0;
        v8 = "";
      }
    }
    else
    {
      v11 = 0;
      v10 = 0;
      v5 = "";
      v8 = "";
    }
    v54 = "";
    v55 = 0;
    v51 = v4;
    v52 = v5;
    v53 = v10;
    v49 = v8;
    v50 = v11;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v44, (unint64_t *)&v54, (uint64_t)&v52, (uint64_t *)&v51, (uint64_t)&v49);
    v14 = v43;
    v43 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v13);
        if (v3 == 1)
          goto LABEL_25;
LABEL_56:
        for (i = 1; i != v3; ++i)
        {
          MEMORY[0x1D82A3998](&v43, -[NSArray objectAtIndex:](a1, "objectAtIndex:", i));
          v31 = v43;
          if (v43 && *((_DWORD *)v43 + 1))
          {
            v32 = JSC::Yarr::RegularExpression::match();
            v33 = JSC::Yarr::RegularExpression::match();
            a1 = v42;
            v31 = v43;
            v34 = "\\b";
            if (v32 < 0)
              v35 = "";
            else
              v35 = "\\b";
            v36 = ~(v32 >> 30) & 2;
            v37 = ~(v33 >> 30) & 2;
            if (v33 < 0)
              v34 = "";
          }
          else
          {
            v37 = 0;
            v36 = 0;
            v35 = "";
            v34 = "";
          }
          v54 = "|";
          v55 = 1;
          v51 = v31;
          v52 = v35;
          v53 = v36;
          v49 = v34;
          v50 = v37;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v44, (unint64_t *)&v54, (uint64_t)&v52, (uint64_t *)&v51, (uint64_t)&v49);
          v39 = v43;
          v43 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v38);
            else
              *(_DWORD *)v39 -= 2;
          }
        }
LABEL_25:
        LOBYTE(v54) = 41;
        if (v45 && ((v15 = v46, v46 < *((_DWORD *)v45 + 1)) ? (v16 = v44 == 0) : (v16 = 0), v16))
        {
          v40 = *((_DWORD *)v45 + 4);
          v41 = *((_QWORD *)v45 + 1);
          ++v46;
          if ((v40 & 4) != 0)
            *(_BYTE *)(v41 + v15) = 41;
          else
            *(_WORD *)(v41 + 2 * v15) = 41;
        }
        else
        {
          WTF::StringBuilder::append();
        }
        v17 = WTF::fastMalloc((WTF *)8);
        v18 = v44;
        if (v44
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v44),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v44),
              (v18 = v44) != 0))
        {
          v19 = 0;
          *(_DWORD *)v18 += 2;
        }
        else
        {
          v19 = 1;
        }
        JSC::Yarr::RegularExpression::RegularExpression();
        v48 = v17;
        if ((v19 & 1) == 0)
        {
          if (*(_DWORD *)v18 == 2)
          {
            WTF::StringImpl::destroy(v18, v20);
            v21 = v45;
            v45 = 0;
            if (!v21)
              goto LABEL_42;
LABEL_40:
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::destroy(v21, v20);
              v22 = v44;
              v44 = 0;
              if (!v22)
                goto LABEL_48;
              goto LABEL_45;
            }
            *(_DWORD *)v21 -= 2;
LABEL_42:
            v22 = v44;
            v44 = 0;
            if (!v22)
            {
LABEL_48:
              objc_msgSend((id)qword_1ECEC98F0, "insertObject:atIndex:", a1, 0);
              v23 = dword_1ECEC990C;
              if (dword_1ECEC990C == dword_1ECEC9908)
              {
                v24 = WTF::Vector<JSC::Yarr::RegularExpression *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1ECEC990C + 1, (unint64_t)&v48);
                v23 = dword_1ECEC990C;
              }
              else
              {
                v24 = (char *)&v48;
              }
              v25 = (_QWORD *)qword_1ECEC9900;
              memmove((void *)(qword_1ECEC9900 + 8), (const void *)qword_1ECEC9900, 8 * v23);
              *v25 = *(_QWORD *)v24;
              ++dword_1ECEC990C;
              if ((unint64_t)objc_msgSend((id)qword_1ECEC98F0, "count") >= 5)
              {
                objc_msgSend((id)qword_1ECEC98F0, "removeObjectAtIndex:", 4);
                if (!dword_1ECEC990C)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1D80B5470);
                }
                v26 = *(JSC::Yarr::RegularExpression **)(qword_1ECEC9900 + 8 * dword_1ECEC990C-- - 8);
                if (v26)
                {
                  JSC::Yarr::RegularExpression::~RegularExpression(v26);
                  WTF::fastFree(v27, v28);
                }
              }
              return v48;
            }
LABEL_45:
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v20);
            else
              *(_DWORD *)v22 -= 2;
            goto LABEL_48;
          }
          *(_DWORD *)v18 -= 2;
        }
        v21 = v45;
        v45 = 0;
        if (!v21)
          goto LABEL_42;
        goto LABEL_40;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (v3 == 1)
      goto LABEL_25;
    goto LABEL_56;
  }
  v12 = v2;
  if (v2 >= dword_1ECEC990C)
  {
    __break(0xC471u);
    JUMPOUT(0x1D80B5468);
  }
  v48 = *(_QWORD *)(qword_1ECEC9900 + 8 * v2);
  if (v2)
  {
    objc_msgSend((id)qword_1ECEC98F0, "removeObjectAtIndex:", v2);
    memmove((void *)(qword_1ECEC9900 + 8 * v12), (const void *)(qword_1ECEC9900 + 8 * v12 + 8), qword_1ECEC9900 + 8 * dword_1ECEC990C - (qword_1ECEC9900 + 8 * v12 + 8));
    --dword_1ECEC990C;
    goto LABEL_48;
  }
  return v48;
}

void sub_1D80B5484(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  StringImpl *v13;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
    {
      WTF::StringImpl::destroy(a11, a2);
      WebCore::KeypressCommand::~KeypressCommand((WebCore::KeypressCommand *)&a12, v13);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a11 -= 2;
    WebCore::KeypressCommand::~KeypressCommand((WebCore::KeypressCommand *)&a12, a2);
    _Unwind_Resume(a1);
  }
  WebCore::KeypressCommand::~KeypressCommand((WebCore::KeypressCommand *)&a12, a2);
  _Unwind_Resume(a1);
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, unint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *result;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  _BYTE *v37;
  size_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  _WORD *v45;
  unsigned __int8 *v46;
  __int16 v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  int8x16_t v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  unsigned __int8 *v59;
  __int16 v60;
  int8x16_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  __int128 v69;
  char *v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  char *v74;
  char *v75;
  char *v76;
  _BYTE *v77;
  int8x16_t *v78;
  size_t v79;
  _BYTE *v80;
  unint64_t v81;
  unsigned __int128 *v82;
  unsigned __int128 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  int8x16_t *v92;
  __int16 v93;
  unint64_t v94;
  __int128 v95;
  int8x16_t v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  BOOL v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  unsigned __int8 *v107;
  __int16 v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  _BYTE *v112;
  int8x16_t *v113;
  char v114;
  uint8x8_t *v115;
  uint16x8_t *v116;
  unint64_t v117;
  uint8x16_t v118;
  uint16x8_t v119;
  uint16x8_t v120;
  uint8x8_t *v121;
  uint16x8_t *v122;
  unint64_t v123;
  uint8x8_t v124;
  uint8x8_t *v125;
  uint16x8_t *v126;
  unint64_t v127;
  uint8x16_t v128;
  uint16x8_t v129;
  uint16x8_t v130;
  uint8x8_t *v131;
  uint16x8_t *v132;
  unint64_t v133;
  uint8x8_t v134;
  uint8x8_t *v135;
  uint16x8_t *v136;
  unint64_t v137;
  uint8x16_t v138;
  uint16x8_t v139;
  uint16x8_t v140;
  uint8x8_t *v141;
  uint16x8_t *v142;
  unint64_t v143;
  uint8x8_t v144;
  uint8x8_t *v145;
  uint16x8_t *v146;
  unint64_t v147;
  uint8x16_t v148;
  uint16x8_t v149;
  uint16x8_t v150;
  uint8x8_t *v151;
  uint16x8_t *v152;
  unint64_t v153;
  uint8x8_t v154;
  int8x16_t *v155;
  int8x16_t *v156;
  unint64_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int16x8_t *v162;
  int8x8_t *v163;
  unint64_t v164;
  int16x8_t v165;
  int8x16x2_t v166;
  int8x16x2_t v167;
  int8x16x2_t v168;
  int8x16x2_t v169;
  int8x16x2_t v170;
  int8x16x2_t v171;
  int8x16x2_t v172;
  int8x16x2_t v173;
  int8x16x2_t v174;
  int8x16x2_t v175;
  int8x16x2_t v176;
  int8x16x2_t v177;

  v9 = *a4;
  v10 = *((_QWORD *)a1 + 1);
  if ((!v10 && (v10 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v10 + 16) & 4) != 0)
    && (!v9 || (*(_BYTE *)(v9 + 16) & 4) != 0))
  {
    result = (_BYTE *)MEMORY[0x1D82A3638]();
    if (!result)
      return result;
    v31 = result;
    v32 = a2[1];
    v33 = v32;
    v34 = *(_BYTE **)a3;
    v35 = *(unsigned int *)(a3 + 8);
    v36 = *a4;
    v37 = *(_BYTE **)a5;
    v38 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v32)
    {
      v39 = (_BYTE *)*a2;
      if ((_DWORD)v32 != 1)
      {
        result = memcpy(result, v39, a2[1]);
        v40 = &v31[v33];
        if (!(_DWORD)v35)
          goto LABEL_54;
LABEL_52:
        if ((_DWORD)v35 != 1)
        {
          result = memcpy(v40, v34, v35);
          v77 = &v40[v35];
          if (v36)
          {
LABEL_55:
            v78 = *(int8x16_t **)(v36 + 8);
            v79 = *(unsigned int *)(v36 + 4);
            if ((*(_BYTE *)(v36 + 16) & 4) != 0)
            {
              if ((_DWORD)v79)
              {
                if ((_DWORD)v79 == 1)
                  *v77 = v78->i8[0];
                else
                  result = memcpy(v77, v78, v79);
              }
            }
            else
            {
              v80 = &v77[v79];
              if (v79 < 0x10)
              {
                v81 = (unint64_t)v77;
              }
              else
              {
                v81 = (unint64_t)&v77[v79 & 0xFFFFFFF0];
                v82 = (unsigned __int128 *)v77;
                do
                {
                  v83 = (unsigned __int128)vld2q_s8(v78->i8);
                  v78 += 2;
                  *v82++ = v83;
                }
                while (v82 != (unsigned __int128 *)v81);
              }
              if ((_BYTE *)v81 != v80)
              {
                v109 = (unint64_t)&v31[v79 + v33 + v35 - v81];
                if (v109 < 8
                  || (v81 < (unint64_t)v78 + 2 * v109
                    ? (v110 = v78 >= (int8x16_t *)&v31[v79 + v35 + v33])
                    : (v110 = 1),
                      !v110))
                {
                  v112 = (_BYTE *)v81;
                  v113 = v78;
                  goto LABEL_108;
                }
                if (v109 >= 0x20)
                {
                  v111 = v109 & 0xFFFFFFFFFFFFFFE0;
                  v155 = v78 + 2;
                  v156 = (int8x16_t *)(v81 + 16);
                  v157 = v109 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v159 = v155[-2];
                    v158 = v155[-1];
                    v161 = *v155;
                    v160 = v155[1];
                    v155 += 4;
                    v156[-1] = vuzp1q_s8(v159, v158);
                    *v156 = vuzp1q_s8(v161, v160);
                    v156 += 2;
                    v157 -= 32;
                  }
                  while (v157);
                  if (v109 == v111)
                    goto LABEL_135;
                  if ((v109 & 0x18) == 0)
                  {
                    v113 = (int8x16_t *)((char *)v78 + 2 * v111);
                    v112 = (_BYTE *)(v81 + v111);
                    do
                    {
LABEL_108:
                      v114 = v113->i8[0];
                      v113 = (int8x16_t *)((char *)v113 + 2);
                      *v112++ = v114;
                    }
                    while (v112 != v80);
                    goto LABEL_135;
                  }
                }
                else
                {
                  v111 = 0;
                }
                v112 = (_BYTE *)(v81 + (v109 & 0xFFFFFFFFFFFFFFF8));
                v113 = (int8x16_t *)((char *)v78 + 2 * (v109 & 0xFFFFFFFFFFFFFFF8));
                v162 = (int16x8_t *)((char *)v78 + 2 * v111);
                v163 = (int8x8_t *)(v81 + v111);
                v164 = v111 - (v109 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v165 = *v162++;
                  *v163++ = vmovn_s16(v165);
                  v164 += 8;
                }
                while (v164);
                if (v109 != (v109 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_108;
              }
            }
LABEL_135:
            v84 = *(unsigned int *)(v36 + 4);
            if (!(_DWORD)v38)
              return result;
            goto LABEL_136;
          }
LABEL_61:
          v84 = 0;
          if (!(_DWORD)v38)
            return result;
LABEL_136:
          result = &v77[v84];
          if ((_DWORD)v38 != 1)
            return memcpy(result, v37, v38);
          *result = *v37;
          return result;
        }
        *v40 = *v34;
LABEL_54:
        v77 = &v40[v35];
        if (v36)
          goto LABEL_55;
        goto LABEL_61;
      }
      *result = *v39;
    }
    v40 = &result[v32];
    if (!(_DWORD)v35)
      goto LABEL_54;
    goto LABEL_52;
  }
  result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result)
    return result;
  v12 = result;
  v13 = *a2;
  v14 = a2[1];
  v15 = *(_QWORD *)a3;
  v16 = *(unsigned int *)(a3 + 8);
  v17 = *a4;
  v18 = *(_QWORD *)a5;
  v19 = *(unsigned int *)(a5 + 8);
  v20 = (unint64_t)&result[2 * v14];
  if ((v14 & 0xFFFFFFC0) == 0)
  {
    v21 = (unint64_t)result;
    v30 = v14;
    if (result == (_BYTE *)v20)
      goto LABEL_29;
LABEL_19:
    v41 = (unint64_t)&result[2 * v30 - v21 - 2];
    if (v41 < 0xE
      || (v21 < v13 + (v41 >> 1) + 1 ? (v42 = v13 >= (v41 & 0xFFFFFFFFFFFFFFFELL) + v21 + 2) : (v42 = 1), !v42))
    {
      v45 = (_WORD *)v21;
      v46 = (unsigned __int8 *)v13;
      goto LABEL_28;
    }
    v43 = (v41 >> 1) + 1;
    if (v41 >= 0x3E)
    {
      v44 = v43 & 0xFFFFFFFFFFFFFFE0;
      v115 = (uint8x8_t *)(v13 + 16);
      v116 = (uint16x8_t *)(v21 + 32);
      v117 = v43 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v118 = *(uint8x16_t *)v115[-2].i8;
        v119 = vmovl_u8(*v115);
        v120 = vmovl_high_u8(*(uint8x16_t *)v115->i8);
        v116[-2] = vmovl_u8(*(uint8x8_t *)v118.i8);
        v116[-1] = vmovl_high_u8(v118);
        *v116 = v119;
        v116[1] = v120;
        v116 += 4;
        v115 += 4;
        v117 -= 32;
      }
      while (v117);
      if (v43 == v44)
        goto LABEL_29;
      if ((v43 & 0x18) == 0)
      {
        v46 = (unsigned __int8 *)(v13 + v44);
        v45 = (_WORD *)(v21 + 2 * v44);
        goto LABEL_28;
      }
    }
    else
    {
      v44 = 0;
    }
    v45 = (_WORD *)(v21 + 2 * (v43 & 0xFFFFFFFFFFFFFFF8));
    v46 = (unsigned __int8 *)(v13 + (v43 & 0xFFFFFFFFFFFFFFF8));
    v121 = (uint8x8_t *)(v13 + v44);
    v122 = (uint16x8_t *)(v21 + 2 * v44);
    v123 = v44 - (v43 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v124 = *v121++;
      *v122++ = vmovl_u8(v124);
      v123 += 8;
    }
    while (v123);
    if (v43 == (v43 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_29;
    do
    {
LABEL_28:
      v47 = *v46++;
      *v45++ = v47;
    }
    while (v45 != (_WORD *)v20);
    goto LABEL_29;
  }
  v21 = (unint64_t)&result[2 * (v14 & 0xFFFFFFC0)];
  v22 = 0uLL;
  v23 = result;
  do
  {
    v166.val[0] = *(int8x16_t *)v13;
    v24 = *(int8x16_t *)(v13 + 16);
    v170.val[0] = *(int8x16_t *)(v13 + 32);
    v25 = *(_OWORD *)(v13 + 48);
    v13 += 64;
    v26 = v25;
    v170.val[1] = 0uLL;
    v174.val[0] = v24;
    v166.val[1] = 0uLL;
    v27 = v23;
    vst2q_s8(v27, v166);
    v27 += 32;
    v174.val[1] = 0uLL;
    vst2q_s8(v27, v174);
    v28 = v23 + 64;
    vst2q_s8(v28, v170);
    v29 = v23 + 96;
    vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
    v23 += 128;
  }
  while (v23 != (char *)v21);
  v30 = v14;
  if (v21 != v20)
    goto LABEL_19;
LABEL_29:
  v48 = (char *)(v20 + 2 * v16);
  if ((v16 & 0xFFFFFFC0) != 0)
  {
    v49 = v20 + 2 * (v16 & 0xFFFFFFC0);
    v50 = 0uLL;
    do
    {
      v167.val[0] = *(int8x16_t *)v15;
      v51 = *(int8x16_t *)(v15 + 16);
      v171.val[0] = *(int8x16_t *)(v15 + 32);
      v52 = *(_OWORD *)(v15 + 48);
      v15 += 64;
      v53 = v52;
      v171.val[1] = 0uLL;
      v175.val[0] = v51;
      v167.val[1] = 0uLL;
      v54 = (char *)v20;
      vst2q_s8(v54, v167);
      v54 += 32;
      v175.val[1] = 0uLL;
      vst2q_s8(v54, v175);
      v55 = (char *)(v20 + 64);
      vst2q_s8(v55, v171);
      v56 = (char *)(v20 + 96);
      vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
      v20 += 128;
    }
    while (v20 != v49);
    v20 = v49;
  }
  if ((char *)v20 != v48)
  {
    v57 = (unint64_t)&result[2 * v30 + 2 * v16 - v20 - 2];
    if (v57 < 0xE || v20 < v15 + (v57 >> 1) + 1 && v15 < (v57 & 0xFFFFFFFFFFFFFFFELL) + v20 + 2)
    {
      v58 = (char *)v20;
      v59 = (unsigned __int8 *)v15;
      goto LABEL_38;
    }
    v85 = (v57 >> 1) + 1;
    if (v57 >= 0x3E)
    {
      v86 = v85 & 0xFFFFFFFFFFFFFFE0;
      v125 = (uint8x8_t *)(v15 + 16);
      v126 = (uint16x8_t *)(v20 + 32);
      v127 = v85 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v128 = *(uint8x16_t *)v125[-2].i8;
        v129 = vmovl_u8(*v125);
        v130 = vmovl_high_u8(*(uint8x16_t *)v125->i8);
        v126[-2] = vmovl_u8(*(uint8x8_t *)v128.i8);
        v126[-1] = vmovl_high_u8(v128);
        *v126 = v129;
        v126[1] = v130;
        v126 += 4;
        v125 += 4;
        v127 -= 32;
      }
      while (v127);
      if (v85 == v86)
        goto LABEL_39;
      if ((v85 & 0x18) == 0)
      {
        v59 = (unsigned __int8 *)(v15 + v86);
        v58 = (char *)(v20 + 2 * v86);
        do
        {
LABEL_38:
          v60 = *v59++;
          *(_WORD *)v58 = v60;
          v58 += 2;
        }
        while (v58 != v48);
        goto LABEL_39;
      }
    }
    else
    {
      v86 = 0;
    }
    v58 = (char *)(v20 + 2 * (v85 & 0xFFFFFFFFFFFFFFF8));
    v59 = (unsigned __int8 *)(v15 + (v85 & 0xFFFFFFFFFFFFFFF8));
    v131 = (uint8x8_t *)(v15 + v86);
    v132 = (uint16x8_t *)(v20 + 2 * v86);
    v133 = v86 - (v85 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v134 = *v131++;
      *v132++ = vmovl_u8(v134);
      v133 += 8;
    }
    while (v133);
    if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_38;
  }
LABEL_39:
  if (!v17)
  {
    v63 = 0;
    v64 = (unint64_t)v48;
    v65 = &v48[2 * v19];
    v66 = v19 & 0xFFFFFFC0;
    if ((v19 & 0xFFFFFFC0) != 0)
      goto LABEL_82;
    goto LABEL_85;
  }
  v61 = *(int8x16_t **)(v17 + 8);
  v62 = *(unsigned int *)(v17 + 4);
  if ((*(_BYTE *)(v17 + 16) & 4) != 0)
  {
    v67 = &v48[2 * v62];
    if (v62 < 0x40)
    {
      v68 = (unint64_t)v48;
      if (v48 == v67)
        goto LABEL_81;
    }
    else
    {
      v68 = (unint64_t)&v48[2 * (v62 & 0xFFFFFFC0)];
      v69 = 0uLL;
      v70 = v48;
      do
      {
        v168.val[0] = *v61;
        v71 = v61[1];
        v172.val[0] = v61[2];
        v72 = v61[3];
        v61 += 4;
        v73 = v72;
        v172.val[1] = 0uLL;
        v176.val[0] = v71;
        v168.val[1] = 0uLL;
        v74 = v70;
        vst2q_s8(v74, v168);
        v74 += 32;
        v176.val[1] = 0uLL;
        vst2q_s8(v74, v176);
        v75 = v70 + 64;
        vst2q_s8(v75, v172);
        v76 = v70 + 96;
        vst2q_s8(v76, *(int8x16x2_t *)(&v69 - 1));
        v70 += 128;
      }
      while (v70 != (char *)v68);
      if ((char *)v68 == v67)
        goto LABEL_81;
    }
    v87 = (unint64_t)&result[2 * v30 + 2 * v62 + 2 * v16 - v68 - 2];
    if (v87 < 0xE
      || (v68 < (unint64_t)v61->u64 + (v87 >> 1) + 1
        ? (v88 = (unint64_t)v61 >= (v87 & 0xFFFFFFFFFFFFFFFELL) + v68 + 2)
        : (v88 = 1),
          !v88))
    {
      v91 = (char *)v68;
      v92 = v61;
      goto LABEL_78;
    }
    v89 = (v87 >> 1) + 1;
    if (v87 >= 0x3E)
    {
      v90 = v89 & 0xFFFFFFFFFFFFFFE0;
      v145 = (uint8x8_t *)&v61[1];
      v146 = (uint16x8_t *)(v68 + 32);
      v147 = v89 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v148 = *(uint8x16_t *)v145[-2].i8;
        v149 = vmovl_u8(*v145);
        v150 = vmovl_high_u8(*(uint8x16_t *)v145->i8);
        v146[-2] = vmovl_u8(*(uint8x8_t *)v148.i8);
        v146[-1] = vmovl_high_u8(v148);
        *v146 = v149;
        v146[1] = v150;
        v146 += 4;
        v145 += 4;
        v147 -= 32;
      }
      while (v147);
      if (v89 == v90)
        goto LABEL_81;
      if ((v89 & 0x18) == 0)
      {
        v92 = (int8x16_t *)((char *)v61 + v90);
        v91 = (char *)(v68 + 2 * v90);
        goto LABEL_78;
      }
    }
    else
    {
      v90 = 0;
    }
    v91 = (char *)(v68 + 2 * (v89 & 0xFFFFFFFFFFFFFFF8));
    v92 = (int8x16_t *)((char *)v61 + (v89 & 0xFFFFFFFFFFFFFFF8));
    v151 = (uint8x8_t *)&v61->i8[v90];
    v152 = (uint16x8_t *)(v68 + 2 * v90);
    v153 = v90 - (v89 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v154 = *v151++;
      *v152++ = vmovl_u8(v154);
      v153 += 8;
    }
    while (v153);
    if (v89 == (v89 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_81;
    do
    {
LABEL_78:
      v93 = v92->u8[0];
      v92 = (int8x16_t *)((char *)v92 + 1);
      *(_WORD *)v91 = v93;
      v91 += 2;
    }
    while (v91 != v67);
    goto LABEL_81;
  }
  if ((_DWORD)v62)
  {
    if ((_DWORD)v62 == 1)
      *(_WORD *)v48 = v61->i16[0];
    else
      result = memcpy(v48, v61, 2 * v62);
  }
LABEL_81:
  v63 = *(unsigned int *)(v17 + 4);
  v64 = (unint64_t)&v48[2 * v63];
  v65 = (char *)(v64 + 2 * v19);
  v66 = v19 & 0xFFFFFFC0;
  if ((v19 & 0xFFFFFFC0) != 0)
  {
LABEL_82:
    v94 = v64 + 2 * v66;
    v95 = 0uLL;
    do
    {
      v169.val[0] = *(int8x16_t *)v18;
      v96 = *(int8x16_t *)(v18 + 16);
      v173.val[0] = *(int8x16_t *)(v18 + 32);
      v97 = *(_OWORD *)(v18 + 48);
      v18 += 64;
      v98 = v97;
      v173.val[1] = 0uLL;
      v177.val[0] = v96;
      v169.val[1] = 0uLL;
      v99 = (char *)v64;
      vst2q_s8(v99, v169);
      v99 += 32;
      v177.val[1] = 0uLL;
      vst2q_s8(v99, v177);
      v100 = (char *)(v64 + 64);
      vst2q_s8(v100, v173);
      v101 = (char *)(v64 + 96);
      vst2q_s8(v101, *(int8x16x2_t *)(&v95 - 1));
      v64 += 128;
    }
    while (v64 != v94);
    v64 = v94;
  }
LABEL_85:
  if ((char *)v64 == v65)
    return result;
  v102 = (unint64_t)&v12[2 * v63 + 2 * v30 + 2 * v16 + 2 * v19 - v64 - 2];
  if (v102 < 0xE
    || (v64 < v18 + (v102 >> 1) + 1 ? (v103 = v18 >= (v102 & 0xFFFFFFFFFFFFFFFELL) + v64 + 2) : (v103 = 1), !v103))
  {
    v106 = (char *)v64;
    v107 = (unsigned __int8 *)v18;
    goto LABEL_95;
  }
  v104 = (v102 >> 1) + 1;
  if (v102 >= 0x3E)
  {
    v105 = v104 & 0xFFFFFFFFFFFFFFE0;
    v135 = (uint8x8_t *)(v18 + 16);
    v136 = (uint16x8_t *)(v64 + 32);
    v137 = v104 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v138 = *(uint8x16_t *)v135[-2].i8;
      v139 = vmovl_u8(*v135);
      v140 = vmovl_high_u8(*(uint8x16_t *)v135->i8);
      v136[-2] = vmovl_u8(*(uint8x8_t *)v138.i8);
      v136[-1] = vmovl_high_u8(v138);
      *v136 = v139;
      v136[1] = v140;
      v136 += 4;
      v135 += 4;
      v137 -= 32;
    }
    while (v137);
    if (v104 == v105)
      return result;
    if ((v104 & 0x18) == 0)
    {
      v107 = (unsigned __int8 *)(v18 + v105);
      v106 = (char *)(v64 + 2 * v105);
      do
      {
LABEL_95:
        v108 = *v107++;
        *(_WORD *)v106 = v108;
        v106 += 2;
      }
      while (v106 != v65);
      return result;
    }
  }
  else
  {
    v105 = 0;
  }
  v106 = (char *)(v64 + 2 * (v104 & 0xFFFFFFFFFFFFFFF8));
  v107 = (unsigned __int8 *)(v18 + (v104 & 0xFFFFFFFFFFFFFFF8));
  v141 = (uint8x8_t *)(v18 + v105);
  v142 = (uint16x8_t *)(v64 + 2 * v105);
  v143 = v105 - (v104 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v144 = *v141++;
    *v142++ = vmovl_u8(v144);
    v143 += 8;
  }
  while (v143);
  if (v104 != (v104 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_95;
  return result;
}

char *WTF::Vector<JSC::Yarr::RegularExpression *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v2 = a2;
  v3 = (char *)qword_1ECEC9900;
  if (qword_1ECEC9900 <= a2)
  {
    v4 = dword_1ECEC990C;
    if (qword_1ECEC9900 + 8 * (unint64_t)dword_1ECEC990C > a2)
    {
      v5 = dword_1ECEC9908 + ((unint64_t)dword_1ECEC9908 >> 2);
      if (v5 >= 0x10)
        v6 = v5 + 1;
      else
        v6 = 16;
      if (v6 <= a1)
        v7 = a1;
      else
        v7 = v6;
      if (v7 <= dword_1ECEC9908)
      {
        v8 = (char *)qword_1ECEC9900;
        return &v8[8 * ((uint64_t)(v2 - (_QWORD)v3) >> 3)];
      }
      if (!(v7 >> 29))
      {
        v8 = (char *)WTF::fastMalloc((WTF *)(8 * v7));
        dword_1ECEC9908 = v7;
        qword_1ECEC9900 = (uint64_t)v8;
        memcpy(v8, v3, 8 * v4);
        if (v3)
        {
          if (v8 == v3)
          {
            qword_1ECEC9900 = 0;
            dword_1ECEC9908 = 0;
          }
          WTF::fastFree((WTF *)v3, v9);
          v8 = (char *)qword_1ECEC9900;
        }
        return &v8[8 * ((uint64_t)(v2 - (_QWORD)v3) >> 3)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1D80B5FCCLL);
    }
  }
  v10 = dword_1ECEC9908 + ((unint64_t)dword_1ECEC9908 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= a1)
    v12 = a1;
  else
    v12 = v11;
  if (v12 > dword_1ECEC9908)
  {
    if (v12 >> 29)
      goto LABEL_30;
    v13 = dword_1ECEC990C;
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    dword_1ECEC9908 = v12;
    qword_1ECEC9900 = (uint64_t)v14;
    memcpy(v14, v3, 8 * v13);
    if (v3)
    {
      if ((char *)qword_1ECEC9900 == v3)
      {
        qword_1ECEC9900 = 0;
        dword_1ECEC9908 = 0;
      }
      WTF::fastFree((WTF *)v3, v15);
    }
  }
  return (char *)v2;
}

const __CFString *matchLabelsAgainstString(NSArray *a1, const WTF::String *a2)
{
  StringImpl *v3;
  WTF::StringImpl *v4;
  JSC::Yarr::RegularExpression *v6;
  int v7;
  int v8;
  StringImpl *v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  const __CFString *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (!a2 || !*((_DWORD *)a2 + 1))
    return 0;
  *(_DWORD *)a2 += 2;
  JSC::Yarr::RegularExpression::RegularExpression();
  JSC::Yarr::replace();
  JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)&v17);
  WTF::StringImpl::replace();
  v4 = a2;
  v16 = v17;
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  v6 = (JSC::Yarr::RegularExpression *)regExpForLabels(a1);
  v7 = -1;
  v8 = -1;
  while (1)
  {
    v10 = JSC::Yarr::RegularExpression::match();
    if (v10 == -1)
      break;
    v11 = JSC::Yarr::RegularExpression::matchedLength(v6);
    if (v11 >= v8)
      v7 = v10;
    if (v11 > v8)
      v8 = v11;
  }
  if (v7 == -1)
  {
    v13 = 0;
    v14 = v16;
    if (v16)
      goto LABEL_27;
    return 0;
  }
  v12 = v16;
  if (!v16)
    return &stru_1E9D6EC48;
  if (!v7 && *((_DWORD *)v16 + 1) <= v8)
  {
    *(_DWORD *)v16 += 2;
    goto LABEL_23;
  }
  WTF::StringImpl::substring(v16);
  v12 = v17;
  if (v17)
  {
LABEL_23:
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
    v14 = v16;
    goto LABEL_27;
  }
  v13 = &stru_1E9D6EC48;
  v14 = v16;
LABEL_27:
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v9);
  else
    *(_DWORD *)v14 -= 2;
  return v13;
}

void sub_1D80B623C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  WTF::StringImpl *v10;

  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1D80B63B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebInspectorClient::sendMessageToFrontend(WebInspectorClient *this, const WTF::String *a2)
{
  return WebCore::InspectorFrontendAPIDispatcher::dispatchMessageAsync(*(WebCore::InspectorFrontendAPIDispatcher **)(*((_QWORD *)this + 5) + 64), a2);
}

uint64_t `non-virtual thunk to'WebInspectorClient::sendMessageToFrontend(WebInspectorClient *this, const WTF::String *a2)
{
  return WebCore::InspectorFrontendAPIDispatcher::dispatchMessageAsync(*(WebCore::InspectorFrontendAPIDispatcher **)(*((_QWORD *)this + 4) + 64), a2);
}

void WebInspectorClient::WebInspectorClient(WebInspectorClient *this, WebView *a2)
{
  WebNodeHighlighter *v4;

  *(_QWORD *)this = off_1E9D6DE18;
  *((_QWORD *)this + 1) = &unk_1E9D6DED8;
  *((_QWORD *)this + 2) = 0;
  objc_initWeak((id *)this + 2, a2);
  v4 = -[WebNodeHighlighter initWithInspectedWebView:]([WebNodeHighlighter alloc], "initWithInspectedWebView:", a2);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = v4;
}

void sub_1D80B64FC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t WebInspectorClient::openLocalFrontend(WebInspectorClient *this, InspectorController *a2)
{
  return 0;
}

uint64_t WebInspectorClient::highlight(id *this)
{
  return objc_msgSend(this[3], "highlight");
}

uint64_t WebInspectorClient::hideHighlight(id *this)
{
  return objc_msgSend(this[3], "hideHighlight");
}

void WebInspectorClient::showInspectorIndication(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "setShowingInspectorIndication:", 1);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1D80B6574(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebInspectorClient::hideInspectorIndication(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "setShowingInspectorIndication:", 0);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1D80B65CC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebInspectorClient::didSetSearchingForNode(id *this, int a2)
{
  __CFString **v3;
  __CFString *v4;
  id WeakRetained;
  const void *v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = &WebInspectorDidStartSearchingForNode;
  if (!a2)
    v3 = &WebInspectorDidStopSearchingForNode;
  v4 = *v3;
  WTF::RunLoop::main((WTF::RunLoop *)this);
  if (v4)
    CFRetain(v4);
  WeakRetained = objc_loadWeakRetained(this + 2);
  v6 = (const void *)objc_msgSend(WeakRetained, "inspector", v4);
  v7 = v6;
  if (v6)
    CFRetain(v6);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E9D6DF08;
  v8[1] = v4;
  v8[2] = v7;
  v9 = v8;
  WTF::RunLoop::dispatch();
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1D80B66C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  uint64_t v14;

  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  -[_WebSafeAsyncForwarder forwardInvocation:]::$_5::~$_5((uint64_t)&a9);
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(a1);
}

void WebInspectorClient::~WebInspectorClient(WebInspectorClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      v7 = (const void *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (!v7)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  v7 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
LABEL_7:
    CFRelease(v7);
LABEL_8:
  objc_destroyWeak((id *)this + 2);
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;
  void *v8;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      v7 = (const void *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (!v7)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  v7 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
LABEL_7:
    CFRelease(v7);
LABEL_8:
  objc_destroyWeak((id *)this + 2);
  WTF::fastFree(this, v8);
}

uint64_t WebInspectorClient::overridesShowPaintRects(WebInspectorClient *this)
{
  return 1;
}

uint64_t WebCore::InspectorClient::paintRectCount(WebCore::InspectorClient *this)
{
  return 0;
}

uint64_t WebInspectorClient::allowRemoteInspectionToPageDirectly(WebInspectorClient *this)
{
  return 1;
}

uint64_t WebInspectorClient::connectionType(WebInspectorClient *this)
{
  return 1;
}

void `non-virtual thunk to'WebInspectorClient::~WebInspectorClient(WebInspectorClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      v7 = (const void *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v7)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
LABEL_7:
    CFRelease(v7);
LABEL_8:
  objc_destroyWeak((id *)this + 1);
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;
  void *v8;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      v7 = (const void *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v7)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
LABEL_7:
    CFRelease(v7);
LABEL_8:
  objc_destroyWeak((id *)this + 1);
  WTF::fastFree((WebInspectorClient *)((char *)this - 8), v8);
}

uint64_t `non-virtual thunk to'WebInspectorClient::connectionType(WebInspectorClient *this)
{
  return 1;
}

_QWORD *WTF::Detail::CallableWrapper<WebInspectorClient::didSetSearchingForNode(BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E9D6DF08;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebInspectorClient::didSetSearchingForNode(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E9D6DF08;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebInspectorClient::didSetSearchingForNode(BOOL)::$_0,void>::call(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotificationName:object:", *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

JSValueRef jsPDFDocPrint(JSContextRef ctx, OpaqueJSValue *a2, JSValueRef value, unint64_t a4, const OpaqueJSValue *const *a5, const OpaqueJSValue **a6)
{
  void *Private;

  {
    jsPDFDocClass(void)::jsPDFDocClass = (uint64_t)JSClassCreate(&jsPDFDocClass(void)::jsPDFDocClassDefinition);
    if (!JSValueIsObjectOfClass(ctx, value, (JSClassRef)jsPDFDocClass(void)::jsPDFDocClass))
      return JSValueMakeUndefined(ctx);
    goto LABEL_3;
  }
  if (JSValueIsObjectOfClass(ctx, value, (JSClassRef)jsPDFDocClass(void)::jsPDFDocClass))
  {
LABEL_3:
    Private = JSObjectGetPrivate(value);
    CallUIDelegate((WebView *)objc_msgSend((id)objc_msgSend(Private, "webFrame"), "webView"), (objc_selector *)sel_webView_printFrameView_, (objc_object *)objc_msgSend((id)objc_msgSend(Private, "webFrame"), "frameView"));
  }
  return JSValueMakeUndefined(ctx);
}

CFTypeRef jsPDFDocInitialize(const OpaqueJSContext *a1, JSObjectRef object)
{
  void *Private;

  Private = JSObjectGetPrivate(object);
  return CFRetain(Private);
}

void jsPDFDocFinalize(OpaqueJSValue *a1)
{
  void *Private;

  Private = JSObjectGetPrivate(a1);
  CFRelease(Private);
}

uint64_t WTF::NeverDestroyed<WebKit::LogChannels,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>(uint64_t a1)
{
  WTF **v2;
  void *v3;
  _OWORD *v4;
  WTF *v5;

  *(_QWORD *)(a1 + 8) = 0;
  v2 = (WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E9D6DF68;
  v4 = (_OWORD *)WTF::fastMalloc((WTF *)0xC0);
  v4[6] = xmmword_1E9D6DFE0;
  v4[7] = *(_OWORD *)&off_1E9D6DFF0;
  v4[4] = xmmword_1E9D6DFC0;
  v4[5] = *(_OWORD *)&off_1E9D6DFD0;
  v4[10] = xmmword_1E9D6E020;
  v4[11] = *(_OWORD *)&off_1E9D6E030;
  v4[8] = xmmword_1E9D6E000;
  v4[9] = *(_OWORD *)&off_1E9D6E010;
  *v4 = constinit;
  v4[1] = *(_OWORD *)&off_1E9D6DF90;
  v4[2] = xmmword_1E9D6DFA0;
  v4[3] = *(_OWORD *)&off_1E9D6DFB0;
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v5, v3);
  }
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0x1800000018;
  return a1;
}

void sub_1D80B740C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v3;
  void *v5;
  WTF *v6;

  WTF::fastFree(v3, a2);
  *(_QWORD *)v2 = off_1E9D6E050;
  v6 = *(WTF **)(v2 + 8);
  if (v6)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v6, v5);
  }
  _Unwind_Resume(a1);
}

void ReportDiscardedDelegateException(objc_selector *a1, objc_object *a2)
{
  char isKindOfClass;
  const char *Name;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  Name = sel_getName((SEL)a1);
  if ((isKindOfClass & 1) != 0)
    NSLog(CFSTR("*** WebKit discarded an uncaught exception in the %s delegate: <%@> %@"), Name, -[objc_object name](a2, "name"), -[objc_object reason](a2, "reason"));
  else
    NSLog(CFSTR("*** WebKit discarded an uncaught exception in the %s delegate: %@"), Name, a2);
}

void WebKit::LogChannels::~LogChannels(WebKit::LogChannels *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E9D6E050;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E9D6E050;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  JUMPOUT(0x1D82A8D20);
}

void WebKit::LogChannels::logLevelString(WebKit::LogChannels *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "stringForKey:", CFSTR("WebKitLogging"));
  JUMPOUT(0x1D82A3998);
}

void sub_1D80B76C0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef std::__call_once_proxy[abi:sn180100]<std::tuple<WebLocalizedString::$_0 &&>>()
{
  CFTypeRef result;

  result = (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  _MergedGlobals_20 = (uint64_t)result;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef WebLocalizedStringInternal(char *cStr)
{
  WebCore *v1;
  const __CFString *v2;
  CFTypeRef v3;
  CFTypeRef arg;

  v1 = (WebCore *)CFStringCreateWithCStringNoCopy(0, cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  WebCore::copyLocalizedString(v1, v2);
  if (!arg)
  {
    v3 = 0;
    if (!v1)
      return v3;
    goto LABEL_3;
  }
  CFAutorelease(arg);
  v3 = arg;
  if (v1)
LABEL_3:
    CFRelease(v1);
  return v3;
}

void sub_1D80B7838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
  {
    CFRelease(cf);
    if (!v10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebMediaKeySystemClient::requestMediaKeySystem(WebMediaKeySystemClient *this, WebCore::MediaKeySystemRequest *a2)
{
  return WebCore::MediaKeySystemRequest::allow(a2);
}

void WebMediaKeySystemClient::~WebMediaKeySystemClient(WebMediaKeySystemClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebMediaKeySystemClient::~WebMediaKeySystemClient(unsigned int **this, void *a2)
{
  WebMediaKeySystemClient *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (WebMediaKeySystemClient *)this;
  v3 = this[1];
  if (v3)
  {
    *((_QWORD *)v3 + 1) = 0;
    v4 = this[1];
    *((_QWORD *)v2 + 1) = 0;
    if (!v4)
      goto LABEL_5;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      this = (unsigned int **)v2;
    }
    else
    {
LABEL_5:
      this = (unsigned int **)v2;
    }
  }
  else
  {
    this[1] = 0;
  }
  WTF::fastFree((WTF *)this, a2);
}

void sub_1D80B7ABC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B7BE8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B7CB8(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B7D5C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80B870C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D80B8918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void layerPathWithHole(CAShapeLayer *a1, const WebCore::FloatQuad *a2, const WebCore::FloatQuad *this)
{
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __int128 v18;
  __int128 v19;
  WebCore::FloatPoint *v20;
  int v21;
  int v22;
  WebCore::FloatPoint *v23;
  int v24;
  WebCore::FloatPoint *v25;
  int v26;
  int v27;
  CAShapeLayer *v28;
  int v29;
  int v30;
  int v31;
  WebCore::FloatPoint *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int Intersection;
  CGPath *Mutable;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49[4];

  v6 = *(float *)a2 == *(float *)this && *((float *)a2 + 1) == *((float *)this + 1);
  if (v6
    && (*((float *)a2 + 2) == *((float *)this + 2) ? (v7 = *((float *)a2 + 3) == *((float *)this + 3)) : (v7 = 0),
        v7
     && (*((float *)a2 + 4) == *((float *)this + 4) ? (v8 = *((float *)a2 + 5) == *((float *)this + 5)) : (v8 = 0),
         v8
      && (*((float *)a2 + 6) == *((float *)this + 6) ? (v9 = *((float *)a2 + 7) == *((float *)this + 7)) : (v9 = 0), v9)))
    || WebCore::FloatQuad::containsQuad(this, a2))
  {
    -[CAShapeLayer setPath:](a1, "setPath:", 0);
    return;
  }
  if (WebCore::FloatQuad::containsQuad(a2, this))
  {
    v10 = *(float *)this;
    v11 = *((float *)this + 1);
    v12 = *((float *)this + 2);
    v13 = *((float *)this + 3);
    v14 = *((float *)this + 4);
    v15 = *((float *)this + 5);
    v16 = *((float *)this + 6);
    v17 = *((float *)this + 7);
    goto LABEL_158;
  }
  v18 = *((_OWORD *)a2 + 1);
  v43 = *(_OWORD *)a2;
  v44 = v18;
  v19 = *((_OWORD *)this + 1);
  v41 = *(_OWORD *)this;
  v42 = v19;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v21 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v43, (const WebCore::FloatPoint *)&v41);
  if (v21)
    goto LABEL_39;
  *(_QWORD *)v49 = 0;
  if (!WebCore::findIntersection((WebCore *)&v43, (const WebCore::FloatPoint *)((char *)&v43 + 8), (const WebCore::FloatPoint *)&v41, (const WebCore::FloatPoint *)((char *)&v42 + 8), (const WebCore::FloatPoint *)v49, v20))goto LABEL_39;
  if (*(float *)&v43 >= *((float *)&v43 + 2))
  {
    if (v49[0] > *(float *)&v43 || v49[0] < *((float *)&v43 + 2))
      goto LABEL_39;
  }
  else if (v49[0] > *((float *)&v43 + 2) || v49[0] < *(float *)&v43)
  {
    goto LABEL_39;
  }
  if (*((float *)&v43 + 1) >= *((float *)&v43 + 3))
  {
    if (v49[1] > *((float *)&v43 + 1) || v49[1] < *((float *)&v43 + 3))
      goto LABEL_39;
  }
  else if (v49[1] > *((float *)&v43 + 3) || v49[1] < *((float *)&v43 + 1))
  {
LABEL_39:
    v22 = 0;
    v48 = v41;
    goto LABEL_40;
  }
  v48 = *(_QWORD *)v49;
  v22 = 1;
LABEL_40:
  v24 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v43, (const WebCore::FloatPoint *)((char *)&v41 + 8));
  if (v24)
    goto LABEL_55;
  *(_QWORD *)v49 = 0;
  if (!WebCore::findIntersection((WebCore *)&v43, (const WebCore::FloatPoint *)((char *)&v43 + 8), (const WebCore::FloatPoint *)((char *)&v41 + 8), (const WebCore::FloatPoint *)&v42, (const WebCore::FloatPoint *)v49, v23))goto LABEL_55;
  if (*(float *)&v43 >= *((float *)&v43 + 2))
  {
    if (v49[0] > *(float *)&v43 || v49[0] < *((float *)&v43 + 2))
      goto LABEL_55;
  }
  else if (v49[0] > *((float *)&v43 + 2) || v49[0] < *(float *)&v43)
  {
    goto LABEL_55;
  }
  if (*((float *)&v43 + 1) >= *((float *)&v43 + 3))
  {
    if (v49[1] > *((float *)&v43 + 1) || v49[1] < *((float *)&v43 + 3))
      goto LABEL_55;
  }
  else if (v49[1] > *((float *)&v43 + 3) || v49[1] < *((float *)&v43 + 1))
  {
LABEL_55:
    v40 = 0;
    v47 = *((_QWORD *)&v41 + 1);
    goto LABEL_56;
  }
  v47 = *(_QWORD *)v49;
  v40 = 1;
LABEL_56:
  v26 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v43, (const WebCore::FloatPoint *)&v42);
  if (v26)
    goto LABEL_71;
  *(_QWORD *)v49 = 0;
  if (!WebCore::findIntersection((WebCore *)((char *)&v44 + 8), (const WebCore::FloatPoint *)&v44, (const WebCore::FloatPoint *)((char *)&v41 + 8), (const WebCore::FloatPoint *)&v42, (const WebCore::FloatPoint *)v49, v25))goto LABEL_71;
  if (*((float *)&v44 + 2) >= *(float *)&v44)
  {
    if (v49[0] > *((float *)&v44 + 2) || v49[0] < *(float *)&v44)
      goto LABEL_71;
  }
  else if (v49[0] > *(float *)&v44 || v49[0] < *((float *)&v44 + 2))
  {
    goto LABEL_71;
  }
  if (*((float *)&v44 + 3) >= *((float *)&v44 + 1))
  {
    if (v49[1] > *((float *)&v44 + 3) || v49[1] < *((float *)&v44 + 1))
      goto LABEL_71;
LABEL_70:
    v27 = v24;
    v28 = a1;
    v29 = v21;
    v30 = v22;
    v46 = *(_QWORD *)v49;
    v31 = 1;
    goto LABEL_72;
  }
  if (v49[1] <= *((float *)&v44 + 1) && v49[1] >= *((float *)&v44 + 3))
    goto LABEL_70;
LABEL_71:
  v27 = v24;
  v28 = a1;
  v29 = v21;
  v30 = v22;
  v31 = 0;
  v46 = v42;
LABEL_72:
  v33 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v43, (const WebCore::FloatPoint *)((char *)&v42 + 8));
  if (v33)
  {
    v34 = 0;
    v45 = *((_QWORD *)&v42 + 1);
    v35 = v30;
    v36 = v29;
    a1 = v28;
    v37 = v40;
    goto LABEL_89;
  }
  *(_QWORD *)v49 = 0;
  Intersection = WebCore::findIntersection((WebCore *)((char *)&v44 + 8), (const WebCore::FloatPoint *)&v44, (const WebCore::FloatPoint *)&v41, (const WebCore::FloatPoint *)((char *)&v42 + 8), (const WebCore::FloatPoint *)v49, v32);
  v35 = v30;
  v36 = v29;
  a1 = v28;
  v37 = v40;
  if (!Intersection)
    goto LABEL_88;
  if (*((float *)&v44 + 2) >= *(float *)&v44)
  {
    if (v49[0] > *((float *)&v44 + 2) || v49[0] < *(float *)&v44)
      goto LABEL_88;
  }
  else if (v49[0] > *(float *)&v44 || v49[0] < *((float *)&v44 + 2))
  {
    goto LABEL_88;
  }
  if (*((float *)&v44 + 3) >= *((float *)&v44 + 1))
  {
    if (v49[1] > *((float *)&v44 + 3) || v49[1] < *((float *)&v44 + 1))
      goto LABEL_88;
LABEL_87:
    v45 = *(_QWORD *)v49;
    v34 = 1;
    goto LABEL_89;
  }
  if (v49[1] <= *((float *)&v44 + 1) && v49[1] >= *((float *)&v44 + 3))
    goto LABEL_87;
LABEL_88:
  v34 = 0;
  v45 = *((_QWORD *)&v42 + 1);
LABEL_89:
  if (((v35 | v37 ^ 1 | v36) & 1) != 0)
  {
    if (((v27 | v35 ^ 1 | v37) & 1) == 0)
    {
      v47 = *((_QWORD *)&v43 + 1);
      v27 = 1;
    }
    if (((v33 | v31 ^ 1 | v34) & 1) != 0)
      goto LABEL_93;
LABEL_96:
    v45 = *((_QWORD *)&v44 + 1);
    v33 = 1;
    goto LABEL_97;
  }
  v48 = v43;
  v36 = 1;
  if (((v33 | v31 ^ 1 | v34) & 1) == 0)
    goto LABEL_96;
LABEL_93:
  if (((v31 | v34 ^ 1 | v26) & 1) == 0)
  {
    v46 = v44;
    v26 = 1;
  }
LABEL_97:
  if (((v37 | v27) & 1) == 0)
  {
    *(_QWORD *)v49 = 0;
    if (WebCore::findIntersection((WebCore *)((char *)&v43 + 8), (const WebCore::FloatPoint *)&v44, (const WebCore::FloatPoint *)&v48, (const WebCore::FloatPoint *)&v47, (const WebCore::FloatPoint *)v49, v32))
    {
      if (*((float *)&v43 + 2) < *(float *)&v44)
      {
        if (v49[0] > *(float *)&v44 || v49[0] < *((float *)&v43 + 2))
          goto LABEL_112;
LABEL_105:
        if (*((float *)&v43 + 3) >= *((float *)&v44 + 1))
        {
          if (v49[1] > *((float *)&v43 + 3) || v49[1] < *((float *)&v44 + 1))
            goto LABEL_112;
        }
        else if (v49[1] > *((float *)&v44 + 1) || v49[1] < *((float *)&v43 + 3))
        {
          goto LABEL_112;
        }
        v47 = *(_QWORD *)v49;
        goto LABEL_112;
      }
      if (v49[0] <= *((float *)&v43 + 2) && v49[0] >= *(float *)&v44)
        goto LABEL_105;
    }
  }
LABEL_112:
  if (((v31 | v26) & 1) == 0)
  {
    *(_QWORD *)v49 = 0;
    if (WebCore::findIntersection((WebCore *)((char *)&v43 + 8), (const WebCore::FloatPoint *)&v44, (const WebCore::FloatPoint *)&v45, (const WebCore::FloatPoint *)&v46, (const WebCore::FloatPoint *)v49, v32))
    {
      if (*((float *)&v43 + 2) < *(float *)&v44)
      {
        if (v49[0] > *(float *)&v44 || v49[0] < *((float *)&v43 + 2))
          goto LABEL_127;
LABEL_120:
        if (*((float *)&v43 + 3) >= *((float *)&v44 + 1))
        {
          if (v49[1] > *((float *)&v43 + 3) || v49[1] < *((float *)&v44 + 1))
            goto LABEL_127;
        }
        else if (v49[1] > *((float *)&v44 + 1) || v49[1] < *((float *)&v43 + 3))
        {
          goto LABEL_127;
        }
        v46 = *(_QWORD *)v49;
        goto LABEL_127;
      }
      if (v49[0] <= *((float *)&v43 + 2) && v49[0] >= *(float *)&v44)
        goto LABEL_120;
    }
  }
LABEL_127:
  if (((v35 | v36) & 1) == 0)
  {
    *(_QWORD *)v49 = 0;
    if (WebCore::findIntersection((WebCore *)&v43, (const WebCore::FloatPoint *)((char *)&v44 + 8), (const WebCore::FloatPoint *)&v48, (const WebCore::FloatPoint *)&v47, (const WebCore::FloatPoint *)v49, v32))
    {
      if (*(float *)&v43 < *((float *)&v44 + 2))
      {
        if (v49[0] > *((float *)&v44 + 2) || v49[0] < *(float *)&v43)
          goto LABEL_142;
LABEL_135:
        if (*((float *)&v43 + 1) >= *((float *)&v44 + 3))
        {
          if (v49[1] > *((float *)&v43 + 1) || v49[1] < *((float *)&v44 + 3))
            goto LABEL_142;
        }
        else if (v49[1] > *((float *)&v44 + 3) || v49[1] < *((float *)&v43 + 1))
        {
          goto LABEL_142;
        }
        v48 = *(_QWORD *)v49;
        goto LABEL_142;
      }
      if (v49[0] <= *(float *)&v43 && v49[0] >= *((float *)&v44 + 2))
        goto LABEL_135;
    }
  }
LABEL_142:
  if (((v34 | v33) & 1) != 0)
    goto LABEL_157;
  *(_QWORD *)v49 = 0;
  if (!WebCore::findIntersection((WebCore *)&v43, (const WebCore::FloatPoint *)((char *)&v44 + 8), (const WebCore::FloatPoint *)&v45, (const WebCore::FloatPoint *)&v46, (const WebCore::FloatPoint *)v49, v32))goto LABEL_157;
  if (*(float *)&v43 >= *((float *)&v44 + 2))
  {
    if (v49[0] > *(float *)&v43 || v49[0] < *((float *)&v44 + 2))
      goto LABEL_157;
  }
  else if (v49[0] > *((float *)&v44 + 2) || v49[0] < *(float *)&v43)
  {
    goto LABEL_157;
  }
  if (*((float *)&v43 + 1) >= *((float *)&v44 + 3))
  {
    if (v49[1] > *((float *)&v43 + 1) || v49[1] < *((float *)&v44 + 3))
      goto LABEL_157;
  }
  else if (v49[1] > *((float *)&v44 + 3) || v49[1] < *((float *)&v43 + 1))
  {
    goto LABEL_157;
  }
  v45 = *(_QWORD *)v49;
LABEL_157:
  v11 = *((float *)&v48 + 1);
  v10 = *(float *)&v48;
  v13 = *((float *)&v47 + 1);
  v12 = *(float *)&v47;
  v15 = *((float *)&v46 + 1);
  v14 = *(float *)&v46;
  v17 = *((float *)&v45 + 1);
  v16 = *(float *)&v45;
LABEL_158:
  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, v10, v11);
  CGPathAddLineToPoint(Mutable, 0, v12, v13);
  CGPathAddLineToPoint(Mutable, 0, v14, v15);
  CGPathAddLineToPoint(Mutable, 0, v16, v17);
  CGPathMoveToPoint(Mutable, 0, *(float *)a2, *((float *)a2 + 1));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 6), *((float *)a2 + 7));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 4), *((float *)a2 + 5));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 2), *((float *)a2 + 3));
  -[CAShapeLayer setPath:](a1, "setPath:", Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1D80B91F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void layerPath(CAShapeLayer *a1, const WebCore::FloatQuad *a2)
{
  CGPath *Mutable;

  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, *(float *)a2, *((float *)a2 + 1));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 6), *((float *)a2 + 7));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 4), *((float *)a2 + 5));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 2), *((float *)a2 + 3));
  -[CAShapeLayer setPath:](a1, "setPath:", Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1D80B92BC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D80B93C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D80B94C8(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1D80B94DC(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)va, a2);
  _Unwind_Resume(a1);
}

void WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight(WebCore::InspectorOverlayHighlight *this, StringImpl *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  WTF *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;

  v3 = *((_DWORD *)this + 23);
  v4 = *((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_51;
  v5 = v4 + 136 * v3;
  while (2)
  {
    v6 = *(_DWORD *)(v4 + 132);
    v7 = *(_QWORD *)(v4 + 120);
    if (!v6)
      goto LABEL_33;
    v8 = v7 + 40 * v6;
    do
    {
      v9 = *(_QWORD *)(v7 + 24);
      if ((v9 & 0x8000000000000) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
          v13 = *(unsigned int *)(v7 + 12);
          if (!(_DWORD)v13)
            goto LABEL_30;
LABEL_12:
          v14 = *(WTF **)v7;
          v15 = *(_QWORD *)v7 + 32 * v13;
          while (1)
          {
            v16 = *((_QWORD *)v14 + 3);
            if ((v16 & 0x8000000000000) == 0)
              goto LABEL_19;
            v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, a2);
              v20 = *((_QWORD *)v14 + 1);
              if ((v20 & 0x8000000000000) != 0)
              {
LABEL_20:
                v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v22 = __ldaxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                {
                  atomic_store(1u, v21);
                  WTF::fastFree((WTF *)v21, a2);
                }
              }
            }
            else
            {
LABEL_19:
              v20 = *((_QWORD *)v14 + 1);
              if ((v20 & 0x8000000000000) != 0)
                goto LABEL_20;
            }
            v24 = *(WTF::StringImpl **)v14;
            *(_QWORD *)v14 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, a2);
              else
                *(_DWORD *)v24 -= 2;
            }
            v14 = (WTF *)((char *)v14 + 32);
            if (v14 == (WTF *)v15)
              goto LABEL_30;
          }
        }
      }
      v13 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v13)
        goto LABEL_12;
LABEL_30:
      v25 = *(WTF **)v7;
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        WTF::fastFree(v25, a2);
      }
      v7 += 40;
    }
    while (v7 != v8);
    v7 = *(_QWORD *)(v4 + 120);
LABEL_33:
    if (v7)
    {
      *(_QWORD *)(v4 + 120) = 0;
      *(_DWORD *)(v4 + 128) = 0;
      WTF::fastFree((WTF *)v7, a2);
    }
    v26 = *(WTF **)(v4 + 104);
    if (v26)
    {
      *(_QWORD *)(v4 + 104) = 0;
      *(_DWORD *)(v4 + 112) = 0;
      WTF::fastFree(v26, a2);
    }
    v27 = *(WTF **)(v4 + 88);
    if (v27)
    {
      *(_QWORD *)(v4 + 88) = 0;
      *(_DWORD *)(v4 + 96) = 0;
      WTF::fastFree(v27, a2);
    }
    v28 = *(WTF **)(v4 + 72);
    if (v28)
    {
      *(_QWORD *)(v4 + 72) = 0;
      *(_DWORD *)(v4 + 80) = 0;
      WTF::fastFree(v28, a2);
    }
    v29 = *(WTF **)(v4 + 56);
    if (v29)
    {
      *(_QWORD *)(v4 + 56) = 0;
      *(_DWORD *)(v4 + 64) = 0;
      WTF::fastFree(v29, a2);
    }
    v30 = *(WTF **)(v4 + 40);
    if (v30)
    {
      *(_QWORD *)(v4 + 40) = 0;
      *(_DWORD *)(v4 + 48) = 0;
      WTF::fastFree(v30, a2);
    }
    if ((*(_QWORD *)v4 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, a2);
      }
    }
    v4 += 136;
    if (v4 != v5)
      continue;
    break;
  }
  v4 = *((_QWORD *)this + 10);
LABEL_51:
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  v34 = *((_DWORD *)this + 19);
  v35 = *((_QWORD *)this + 8);
  if (!v34)
    goto LABEL_106;
  v36 = v35 + 72 * v34;
  while (2)
  {
    v37 = *(_DWORD *)(v35 + 68);
    v38 = *(_QWORD *)(v35 + 56);
    if (!v37)
      goto LABEL_85;
    v39 = v38 + 40 * v37;
    while (2)
    {
      v40 = *(_QWORD *)(v38 + 24);
      if ((v40 & 0x8000000000000) != 0)
      {
        v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v41);
          WTF::fastFree((WTF *)v41, a2);
          v44 = *(unsigned int *)(v38 + 12);
          if (!(_DWORD)v44)
            goto LABEL_82;
LABEL_64:
          v45 = *(WTF **)v38;
          v46 = *(_QWORD *)v38 + 32 * v44;
          while (1)
          {
            v47 = *((_QWORD *)v45 + 3);
            if ((v47 & 0x8000000000000) == 0)
              goto LABEL_71;
            v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              atomic_store(1u, v48);
              WTF::fastFree((WTF *)v48, a2);
              v51 = *((_QWORD *)v45 + 1);
              if ((v51 & 0x8000000000000) != 0)
              {
LABEL_72:
                v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v53 = __ldaxr(v52);
                  v54 = v53 - 1;
                }
                while (__stlxr(v54, v52));
                if (!v54)
                {
                  atomic_store(1u, v52);
                  WTF::fastFree((WTF *)v52, a2);
                }
              }
            }
            else
            {
LABEL_71:
              v51 = *((_QWORD *)v45 + 1);
              if ((v51 & 0x8000000000000) != 0)
                goto LABEL_72;
            }
            v55 = *(WTF::StringImpl **)v45;
            *(_QWORD *)v45 = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, a2);
              else
                *(_DWORD *)v55 -= 2;
            }
            v45 = (WTF *)((char *)v45 + 32);
            if (v45 == (WTF *)v46)
              goto LABEL_82;
          }
        }
      }
      v44 = *(unsigned int *)(v38 + 12);
      if ((_DWORD)v44)
        goto LABEL_64;
LABEL_82:
      v56 = *(WTF **)v38;
      if (*(_QWORD *)v38)
      {
        *(_QWORD *)v38 = 0;
        *(_DWORD *)(v38 + 8) = 0;
        WTF::fastFree(v56, a2);
      }
      v38 += 40;
      if (v38 != v39)
        continue;
      break;
    }
    v38 = *(_QWORD *)(v35 + 56);
LABEL_85:
    if (v38)
    {
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      WTF::fastFree((WTF *)v38, a2);
    }
    v57 = *(unsigned int *)(v35 + 52);
    if ((_DWORD)v57)
    {
      v58 = *(WTF::StringImpl ***)(v35 + 40);
      v59 = 40 * v57;
      do
      {
        v60 = *v58;
        *v58 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, a2);
          else
            *(_DWORD *)v60 -= 2;
        }
        v58 += 5;
        v59 -= 40;
      }
      while (v59);
    }
    v61 = *(WTF **)(v35 + 40);
    if (v61)
    {
      *(_QWORD *)(v35 + 40) = 0;
      *(_DWORD *)(v35 + 48) = 0;
      WTF::fastFree(v61, a2);
    }
    v62 = *(WTF **)(v35 + 24);
    if (v62)
    {
      *(_QWORD *)(v35 + 24) = 0;
      *(_DWORD *)(v35 + 32) = 0;
      WTF::fastFree(v62, a2);
    }
    v63 = *(WTF **)(v35 + 8);
    if (v63)
    {
      *(_QWORD *)(v35 + 8) = 0;
      *(_DWORD *)(v35 + 16) = 0;
      WTF::fastFree(v63, a2);
    }
    if ((*(_QWORD *)v35 & 0x8000000000000) != 0)
    {
      v64 = (unsigned int *)(*(_QWORD *)v35 & 0xFFFFFFFFFFFFLL);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        atomic_store(1u, v64);
        WTF::fastFree((WTF *)v64, a2);
      }
    }
    v35 += 72;
    if (v35 != v36)
      continue;
    break;
  }
  v35 = *((_QWORD *)this + 8);
LABEL_106:
  if (v35)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree((WTF *)v35, a2);
  }
  v67 = (WTF *)*((_QWORD *)this + 6);
  if (v67)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v67, a2);
  }
  v68 = *((_QWORD *)this + 4);
  if ((v68 & 0x8000000000000) == 0)
    goto LABEL_114;
  v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
  do
  {
    v70 = __ldaxr(v69);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, v69));
  if (!v71)
  {
    atomic_store(1u, v69);
    WTF::fastFree((WTF *)v69, a2);
    v72 = *((_QWORD *)this + 3);
    if ((v72 & 0x8000000000000) != 0)
    {
LABEL_115:
      v73 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        atomic_store(1u, v73);
        WTF::fastFree((WTF *)v73, a2);
      }
    }
  }
  else
  {
LABEL_114:
    v72 = *((_QWORD *)this + 3);
    if ((v72 & 0x8000000000000) != 0)
      goto LABEL_115;
  }
  v76 = *((_QWORD *)this + 2);
  if ((v76 & 0x8000000000000) == 0)
    goto LABEL_123;
  v77 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
  do
  {
    v78 = __ldaxr(v77);
    v79 = v78 - 1;
  }
  while (__stlxr(v79, v77));
  if (!v79)
  {
    atomic_store(1u, v77);
    WTF::fastFree((WTF *)v77, a2);
    v80 = *((_QWORD *)this + 1);
    if ((v80 & 0x8000000000000) != 0)
    {
LABEL_124:
      v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFLL);
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        atomic_store(1u, v81);
        WTF::fastFree((WTF *)v81, a2);
      }
    }
  }
  else
  {
LABEL_123:
    v80 = *((_QWORD *)this + 1);
    if ((v80 & 0x8000000000000) != 0)
      goto LABEL_124;
  }
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v84 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v85 = __ldaxr(v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, v84));
    if (!v86)
    {
      atomic_store(1u, v84);
      WTF::fastFree((WTF *)v84, a2);
    }
  }
}

void sub_1D80BA270(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80BA314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80BA3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80BA43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80BA4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D80BA564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

BOOL WebNotificationClient::show(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WebNotification *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  int v27;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  const void *v34;
  uint64_t v35;
  uint64_t v37;

  LOBYTE(v37) = 1;
  v8 = objc_msgSend(*(id *)(a1 + 8), "_notificationProvider", a5, v37);
  if (!v8)
    goto LABEL_39;
  v10 = *(_QWORD *)(a3 + 144);
  v9 = *(_QWORD *)(a3 + 152);
  v11 = -[WebNotification initWithCoreNotification:]([WebNotification alloc], "initWithCoreNotification:", a3);
  v13 = (uint64_t *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash((uint64_t *)(a1 + 16), 8u), (v12 = *v13) != 0))
  {
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (v9 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v9 - 1640531527) << 16) ^ ((unsigned __int16)v9
                                                                                           - 1640531527);
  v16 = (v9 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v9) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v9) + (v15 >> 11));
  v17 = (v10 >> 5) & 0x7FFF800 ^ ((v16 + (unsigned __int16)v10 + (v16 >> 11)) << 16) ^ (v16 + (unsigned __int16)v10 + (v16 >> 11));
  v18 = (v10 >> 37) & 0x7FFF800 ^ ((v17 + WORD2(v10) + (v17 >> 11)) << 16) ^ (v17 + WORD2(v10) + (v17 >> 11));
  v19 = (v18 + (v18 >> 11)) ^ (8 * (v18 + (v18 >> 11)));
  v20 = (v19 + (v19 >> 5)) ^ (4 * (v19 + (v19 >> 5)));
  v21 = (v20 + (v20 >> 15)) ^ ((v20 + (v20 >> 15)) << 10);
  if (!v21)
    v21 = 0x800000;
  v22 = v14 & v21;
  v23 = (unint64_t *)(v12 + 32 * v22);
  v25 = *v23;
  v24 = v23[1];
  if (*(_OWORD *)v23 != 0)
  {
    v26 = 0;
    v27 = 1;
    while (v24 != v9 || v25 != v10)
    {
      if (!(v25 ^ 1 | v24))
        v26 = v23;
      v22 = ((_DWORD)v22 + v27) & v14;
      v23 = (unint64_t *)(v12 + 32 * v22);
      v25 = *v23;
      v24 = v23[1];
      ++v27;
      if (*(_OWORD *)v23 == 0)
      {
        if (v26)
        {
          *v26 = 0;
          v26[1] = 0;
          v26[2] = 0;
          --*(_DWORD *)(*v13 - 16);
          v23 = v26;
        }
        goto LABEL_18;
      }
    }
    if (v11)
      CFRetain(v11);
    v34 = (const void *)v23[2];
    v23[2] = (unint64_t)v11;
    if (v34)
      CFRelease(v34);
    goto LABEL_37;
  }
LABEL_18:
  *v23 = v10;
  v23[1] = v9;
  if (v11)
    CFRetain(v11);
  v29 = (const void *)v23[2];
  v23[2] = (unint64_t)v11;
  if (v29)
    CFRelease(v29);
  if (*v13)
  {
    ++*(_DWORD *)(*v13 - 12);
    v30 = *v13;
    if (*v13)
      goto LABEL_24;
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v30 = *v13;
    if (*v13)
    {
LABEL_24:
      v31 = (*(_DWORD *)(v30 - 16) + *(_DWORD *)(v30 - 12));
      v32 = *(unsigned int *)(v30 - 4);
      if (v32 <= 0x400)
        goto LABEL_25;
LABEL_34:
      if (v32 > 2 * v31)
        goto LABEL_37;
      goto LABEL_35;
    }
  }
  v31 = *(unsigned int *)(v30 - 16);
  v32 = *(unsigned int *)(v30 - 4);
  if (v32 > 0x400)
    goto LABEL_34;
LABEL_25:
  if (3 * v32 > 4 * v31)
    goto LABEL_37;
  if ((_DWORD)v32)
  {
LABEL_35:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v32));
    goto LABEL_36;
  }
  v33 = 8;
LABEL_36:
  WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash((uint64_t *)(a1 + 16), v33);
LABEL_37:
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "_notificationProvider"), "showNotification:fromWebView:", v11, *(_QWORD *)(a1 + 8));
  if (v11)
    CFRelease(v11);
LABEL_39:
  v35 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  return v8 != 0;
}

void sub_1D80BA8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  const void *v9;

  if (v9)
  {
    CFRelease(v9);
    WTF::ScopeExit<WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~ScopeExit(&a9);
    _Unwind_Resume(a1);
  }
  WTF::ScopeExit<WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~ScopeExit(&a9);
  _Unwind_Resume(a1);
}

uint64_t **WTF::ScopeExit<WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~ScopeExit(uint64_t **a1)
{
  uint64_t v2;

  if (*((_BYTE *)a1 + 8))
  {
    v2 = **a1;
    **a1 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1D80BA98C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebNotificationClient::cancel(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  const void *v23;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = result;
    v5 = *(_QWORD *)(a2 + 144);
    v4 = *(_QWORD *)(a2 + 152);
    v6 = *(_DWORD *)(v2 - 8);
    v7 = (v4 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v4 - 1640531527) << 16) ^ ((unsigned __int16)v4
                                                                                            - 1640531527);
    v8 = (v4 >> 37) & 0x7FFF800 ^ ((v7 + WORD2(v4) + (v7 >> 11)) << 16) ^ (v7 + WORD2(v4) + (v7 >> 11));
    v9 = (v5 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v5 + (v8 >> 11)) << 16) ^ (v8
                                                                                                 + (unsigned __int16)v5
                                                                                                 + (v8 >> 11));
    v10 = (v5 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v5) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v5) + (v9 >> 11));
    v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
    v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
    v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
    if (!v13)
      v13 = 0x800000;
    v14 = v6 & v13;
    v15 = (uint64_t *)(v2 + 32 * v14);
    v16 = *v15;
    v17 = v15[1];
    if (v17 == v4 && v16 == v5)
    {
LABEL_15:
      v22 = v2 + 32 * v14;
      v23 = *(const void **)(v22 + 16);
      if (v23)
      {
        CFRetain(*(CFTypeRef *)(v22 + 16));
        CFRelease(v23);
        return objc_msgSend((id)objc_msgSend(*(id *)(v3 + 8), "_notificationProvider"), "cancelNotification:", v23);
      }
    }
    else
    {
      v19 = 1;
      while (v16 | v17)
      {
        v14 = ((_DWORD)v14 + v19) & v6;
        v20 = (uint64_t *)(v2 + 32 * v14);
        v16 = *v20;
        v17 = v20[1];
        v21 = v17 == v4 && v16 == v5;
        ++v19;
        if (v21)
          goto LABEL_15;
      }
    }
  }
  return result;
}

void WebNotificationClient::notificationObjectDestroyed(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t *v22;
  BOOL v23;
  _QWORD *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;

  v5 = *(_QWORD *)(a1 + 16);
  v3 = (uint64_t *)(a1 + 16);
  v4 = v5;
  if (!v5)
    return;
  v7 = *(_QWORD *)(a2 + 144);
  v6 = *(_QWORD *)(a2 + 152);
  v8 = *(_DWORD *)(v4 - 8);
  v9 = (v6 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v6 - 1640531527) << 16) ^ ((unsigned __int16)v6
                                                                                          - 1640531527);
  v10 = (v6 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v6) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v6) + (v9 >> 11));
  v11 = (v7 >> 5) & 0x7FFF800 ^ ((v10 + (unsigned __int16)v7 + (v10 >> 11)) << 16) ^ (v10
                                                                                                  + (unsigned __int16)v7
                                                                                                  + (v10 >> 11));
  v12 = (v7 >> 37) & 0x7FFF800 ^ ((v11 + WORD2(v7) + (v11 >> 11)) << 16) ^ (v11 + WORD2(v7) + (v11 >> 11));
  v13 = (v12 + (v12 >> 11)) ^ (8 * (v12 + (v12 >> 11)));
  v14 = (v13 + (v13 >> 5)) ^ (4 * (v13 + (v13 >> 5)));
  v15 = (v14 + (v14 >> 15)) ^ ((v14 + (v14 >> 15)) << 10);
  if (!v15)
    v15 = 0x800000;
  v16 = v8 & v15;
  v17 = (uint64_t *)(v4 + 32 * v16);
  v18 = *v17;
  v19 = v17[1];
  if (v19 == v6 && v18 == v7)
  {
LABEL_15:
    if (v16 == *(_DWORD *)(v4 - 4))
      return;
    v24 = (_QWORD *)(v4 + 32 * v16);
    v25 = (const void *)v24[2];
    v24[2] = 0;
    v26 = *v3;
    if (*v3)
    {
      v26 += 32 * *(unsigned int *)(v26 - 4);
      if ((_QWORD *)v26 == v24)
        goto LABEL_31;
    }
    if ((_QWORD *)v26 == v24)
      goto LABEL_31;
    *v24 = 1;
    v24[1] = 0;
    v24[2] = 0;
    ++*(_DWORD *)(*v3 - 16);
    if (*v3)
    {
      --*(_DWORD *)(*v3 - 12);
      v27 = *v3;
      if (!*v3)
      {
LABEL_31:
        if (v25)
        {
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "_notificationProvider"), "notificationDestroyed:", v25);
          CFRelease(v25);
        }
        return;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      v27 = *v3;
      if (!*v3)
        goto LABEL_31;
    }
    v28 = 6 * *(_DWORD *)(v27 - 12);
    v29 = *(_DWORD *)(v27 - 4);
    if (v28 < v29 && v29 >= 9)
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v3, v29 >> 1);
    goto LABEL_31;
  }
  v21 = 1;
  while (v18 | v19)
  {
    v16 = ((_DWORD)v16 + v21) & v8;
    v22 = (uint64_t *)(v4 + 32 * v16);
    v18 = *v22;
    v19 = v22[1];
    v23 = v19 == v6 && v18 == v7;
    ++v21;
    if (v23)
      goto LABEL_15;
  }
}

void sub_1D80BACC4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebNotificationClient *WebNotificationClient::notificationControllerDestroyed(WebNotificationClient *this, void *a2)
{
  WTF *v2;
  void *v3;

  if (this)
  {
    WebNotificationClient::~WebNotificationClient(this, a2);
    return (WebNotificationClient *)WTF::fastFree(v2, v3);
  }
  return this;
}

void WebNotificationClient::requestPermission(uint64_t a1, WebCore::SecurityContext *a2, uint64_t a3)
{
  WebNotificationPolicyListener *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  _OWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  objc_object *v24;
  objc_object *v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  char *v29;

  v5 = -[WebNotificationPolicyListener initWithPermissionHandler:]([WebNotificationPolicyListener alloc], "initWithPermissionHandler:", a3);
  objc_msgSend(*(id *)(a1 + 8), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    *(_BYTE *)(a1 + 32) = 1;
    v24 = -[WebSecurityOrigin _initWithWebCoreSecurityOrigin:]([WebSecurityOrigin alloc], "_initWithWebCoreSecurityOrigin:", WebCore::SecurityContext::securityOrigin(a2));
    v25 = (objc_object *)v5;
    v6 = WebCore::SecurityContext::securityOrigin(a2);
    v7 = *(_QWORD *)(a1 + 24);
    v26 = (uint64_t *)(a1 + 24);
    if (v7
      || (v8 = v6,
          WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v26, 8u, 0), v7 = *v26, v6 = v8, *v26))
    {
      v9 = *(_DWORD *)(v7 - 8);
    }
    else
    {
      v9 = 0;
    }
    v23 = v6;
    v27 = v6 + 8;
    v10 = WTF::computeHash<WebCore::SecurityOriginData>(v6 + 8) & v9;
    v11 = v7 + 32 * v10;
    v13 = (unsigned int *)(v11 + 24);
    v12 = *(unsigned int *)(v11 + 24);
    if (*(_DWORD *)(v11 + 24) == -1)
    {
LABEL_38:
      std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return;
    }
    v14 = 0;
    v15 = 1;
    while (1)
    {
      v29 = &v28;
      if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E1E8[v12])(&v29, v11) & 1) != 0)
        break;
      v16 = *v13;
      if ((_DWORD)v16 == -1)
        goto LABEL_38;
      v29 = &v28;
      if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v16])(&v29, v11) & 1) != 0)
      {
        v14 = (_OWORD *)v11;
      }
      else if ((WebCore::operator==() & 1) != 0)
      {
        goto LABEL_32;
      }
      v10 = ((_DWORD)v10 + v15) & v9;
      v11 = v7 + 32 * v10;
      v13 = (unsigned int *)(v11 + 24);
      v12 = *(unsigned int *)(v11 + 24);
      ++v15;
      if (*(_DWORD *)(v11 + 24) == -1)
        goto LABEL_38;
    }
    if (v14)
    {
      *v14 = 0u;
      v14[1] = 0u;
      --*(_DWORD *)(*v26 - 16);
      v11 = (uint64_t)v14;
    }
    v17 = *(unsigned int *)(v11 + 24);
    v18 = *(unsigned int *)(v23 + 32);
    if ((_DWORD)v17 == -1)
    {
      if ((_DWORD)v18 == -1)
        goto LABEL_21;
    }
    else if ((_DWORD)v18 == -1)
    {
      ((void (*)(char **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                              + v17))(&v29, v11);
      *(_DWORD *)(v11 + 24) = -1;
      goto LABEL_21;
    }
    v29 = (char *)v11;
    ((void (*)(char **, uint64_t, uint64_t))off_1E9D6E1F8[v18])(&v29, v11, v27);
LABEL_21:
    if (*v26)
    {
      ++*(_DWORD *)(*v26 - 12);
      v19 = *v26;
      if (*v26)
        goto LABEL_23;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v19 = *v26;
      if (*v26)
      {
LABEL_23:
        v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
        v21 = *(unsigned int *)(v19 - 4);
        if (v21 <= 0x400)
          goto LABEL_24;
        goto LABEL_29;
      }
    }
    v20 = *(unsigned int *)(v19 - 16);
    v21 = *(unsigned int *)(v19 - 4);
    if (v21 <= 0x400)
    {
LABEL_24:
      if (3 * v21 > 4 * v20)
        goto LABEL_32;
      if (!(_DWORD)v21)
      {
        v22 = 8;
LABEL_31:
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v26, v22, v11);
LABEL_32:
        v5 = (WebNotificationPolicyListener *)v25;
        CallUIDelegate(*(WebView **)(a1 + 8), (objc_selector *)sel_webView_decidePolicyForNotificationRequestFromOrigin_listener_, v24, v25);
        if (v24)
          CFRelease(v24);
        goto LABEL_34;
      }
LABEL_30:
      v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
      goto LABEL_31;
    }
LABEL_29:
    if (v21 > 2 * v20)
      goto LABEL_32;
    goto LABEL_30;
  }
LABEL_34:
  if (v5)
    CFRelease(v5);
}

void sub_1D80BB048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, CFTypeRef a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  NSException *v32;
  const void *v33;
  const void *v34;

  if (v33)
    CFRelease(v33);
  if (v34)
    CFRelease(v34);
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v32 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v32);
  objc_end_catch();
}

uint64_t WebNotificationClient::checkPermission(id *this, WebCore::ScriptExecutionContext *a2)
{
  id v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  CFTypeRef cf;
  char v19;
  char *v20;

  if (!a2
    || *((_BYTE *)a2 + 274)
    || !objc_msgSend((id)objc_msgSend(this[1], "preferences"), "notificationsEnabled"))
  {
    return 1;
  }
  v4 = -[WebSecurityOrigin _initWithWebCoreSecurityOrigin:]([WebSecurityOrigin alloc], "_initWithWebCoreSecurityOrigin:", WebCore::SecurityContext::securityOrigin(a2));
  v5 = objc_msgSend((id)objc_msgSend(this[1], "_notificationProvider"), "policyForOrigin:", v4);
  if (!v5)
  {
    v14 = 2;
    if (v4)
LABEL_21:
      CFRelease(v4);
    return v14;
  }
  if (v5 != 2 || (v6 = WebCore::SecurityContext::securityOrigin(a2), (v7 = this[3]) == 0))
  {
    v14 = 0;
    if (!v4)
      return v14;
    goto LABEL_21;
  }
  v8 = *(v7 - 2);
  cf = v4;
  v9 = WTF::computeHash<WebCore::SecurityOriginData>(v6 + 8) & v8;
  v10 = (char *)&v7[8 * v9];
  v12 = (unsigned int *)(v10 + 24);
  v11 = *((unsigned int *)v10 + 6);
  if (*((_DWORD *)v10 + 6) != -1)
  {
    v13 = 1;
    while (1)
    {
      v20 = &v19;
      v16 = ((uint64_t (*)(char **, char *))off_1E9D6E1E8[v11])(&v20, v10);
      if ((v16 & 1) != 0)
        break;
      v17 = *v12;
      if ((_DWORD)v17 == -1)
        goto LABEL_22;
      v20 = &v19;
      if ((((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v17])(&v20, v10) & 1) == 0&& (WebCore::operator==() & 1) != 0)
      {
        break;
      }
      v9 = ((_DWORD)v9 + v13) & v8;
      v10 = (char *)&v7[8 * v9];
      v12 = (unsigned int *)(v10 + 24);
      v11 = *((unsigned int *)v10 + 6);
      ++v13;
      if (*((_DWORD *)v10 + 6) == -1)
        goto LABEL_22;
    }
    v14 = v16 ^ 1u;
    v4 = (id)cf;
    if (!cf)
      return v14;
    goto LABEL_21;
  }
LABEL_22:
  result = std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
  return result;
}

void sub_1D80BB294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D80BB374(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BB3E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebNotificationClient::~WebNotificationClient(WebNotificationClient *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebNotificationClient::~WebNotificationClient(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t *v12;
  unsigned int v13;
  char v14;
  char *v15;
  char v16;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
  {
LABEL_11:
    v8 = *((_QWORD *)this + 2);
    if (v8)
    {
      v9 = *(unsigned int *)(v8 - 4);
      if ((_DWORD)v9)
      {
        v10 = (const void **)(v8 + 16);
        do
        {
          if ((unint64_t)*(v10 - 2) ^ 1 | (unint64_t)*(v10 - 1))
          {
            v11 = *v10;
            *v10 = 0;
            if (v11)
              CFRelease(v11);
          }
          v10 += 4;
          --v9;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)(v8 - 16), a2);
    }
    return;
  }
  v4 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v4)
  {
LABEL_10:
    WTF::fastFree((WTF *)(v3 - 16), a2);
    goto LABEL_11;
  }
  v5 = *((_QWORD *)this + 3);
  while (1)
  {
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
      break;
    v15 = &v14;
    if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v6])(&v15, v5) & 1) == 0)
    {
      v7 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                               + v7))(&v16, v5);
      *(_DWORD *)(v5 + 24) = -1;
    }
    v5 += 32;
    if (!--v4)
      goto LABEL_10;
  }
  v12 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v12, v13);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RetainPtr<WebNotification>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RetainPtr<WebNotification>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RetainPtr<WebNotification>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = a2;
    result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    v10 = (_QWORD *)(result + 16);
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = a2;
    result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    v10 = (_QWORD *)(result + 16);
    if (!a2)
      goto LABEL_7;
  }
  v11 = v10;
  do
  {
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    v11 += 4;
    --v7;
  }
  while (v7);
LABEL_7:
  *a1 = (uint64_t)v10;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    while (1)
    {
      v13 = (unint64_t *)(v4 + 32 * v12);
      v14 = *v13;
      v15 = v13[1];
      if (*v13 ^ 1 | v15)
      {
        if (v14 | v15)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = 0;
          v21 = (v15 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v15 - 1640531527) << 16) ^ ((unsigned __int16)v15 - 1640531527);
          v22 = (v15 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v15) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v15) + (v21 >> 11));
          v23 = (v14 >> 5) & 0x7FFF800 ^ ((v22 + (unsigned __int16)v14 + (v22 >> 11)) << 16) ^ (v22 + (unsigned __int16)v14 + (v22 >> 11));
          v24 = (v14 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v14) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v14) + (v23 >> 11));
          v25 = (v24 + (v24 >> 11)) ^ (8 * (v24 + (v24 >> 11)));
          v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
          v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
          if (!v27)
            v27 = 0x800000;
          do
          {
            v28 = v27 & v19;
            v29 = v18 + 32 * v28;
            v27 = ++v20 + v28;
          }
          while (*(_OWORD *)v29 != 0);
          v30 = *(const void **)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          if (v30)
            CFRelease(v30);
          *(_OWORD *)v29 = *(_OWORD *)v13;
          v31 = v4 + 32 * v12;
          v32 = *(_QWORD *)(v31 + 16);
          *(_QWORD *)(v31 + 16) = 0;
          *(_QWORD *)(v29 + 16) = v32;
          v17 = *(const void **)(v31 + 16);
          *(_QWORD *)(v31 + 16) = 0;
          if (!v17)
            goto LABEL_9;
LABEL_13:
          CFRelease(v17);
          goto LABEL_9;
        }
        v16 = v4 + 32 * v12;
        v17 = *(const void **)(v16 + 16);
        *(_QWORD *)(v16 + 16) = 0;
        if (v17)
          goto LABEL_13;
      }
LABEL_9:
      if (++v12 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v9);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v9);
  return result;
}

void WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _Unwind_Exception *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v33)();
  char *v34;
  char v35;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 32 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0;
    v30 = v4;
    while (1)
    {
      v14 = v4 + 32 * v11;
      v15 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v15 == -1)
        break;
      v34 = &v35;
      if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v15])(&v34, v4 + 32 * v11) & 1) == 0)
      {
        v16 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v16 == -1)
          break;
        v34 = &v35;
        if (((unsigned int (*)(char **, uint64_t))off_1E9D6E1E8[v16])(&v34, v4 + 32 * v11))
        {
          v17 = *(unsigned int *)(v14 + 24);
          if ((_DWORD)v17 != -1)
            ((void (*)(char **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                    + v17))(&v34, v4 + 32 * v11);
          *(_DWORD *)(v14 + 24) = -1;
        }
        else
        {
          v33 = v12;
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::computeHash<WebCore::SecurityOriginData>(v4 + 32 * v11);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v13 = (uint64_t (**)())(v18 + 32 * v22);
            v23 = *((unsigned int *)v13 + 6);
            if ((_DWORD)v23 == -1)
              goto LABEL_33;
            v34 = &v35;
            v24 = ((uint64_t (*)(char **, uint64_t))off_1E9D6E1E8[v23])(&v34, v18 + 32 * v22);
            v20 = ++v21 + v22;
          }
          while (!v24);
          v25 = *((unsigned int *)v13 + 6);
          if ((_DWORD)v25 != -1)
            ((void (*)(char **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                    + v25))(&v34, v18 + 32 * v22);
          *(_BYTE *)v13 = 0;
          *((_DWORD *)v13 + 6) = -1;
          v26 = *(unsigned int *)(v14 + 24);
          v4 = v30;
          if ((_DWORD)v26 != -1)
          {
            ((void (*)(char *, uint64_t (**)(), uint64_t))off_1E9D6E1D8[v26])(&v35, v13, v14);
            *((_DWORD *)v13 + 6) = v26;
            v27 = *(unsigned int *)(v14 + 24);
            if ((_DWORD)v27 != -1)
              ((void (*)(char **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                      + v27))(&v34, v14);
          }
          *(_DWORD *)(v14 + 24) = -1;
          v12 = v33;
          if (v14 == a3)
            v12 = v13;
          v13 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0;
        }
      }
      if (++v11 == v5)
        goto LABEL_31;
    }
LABEL_33:
    v28 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    v29 = *((unsigned int *)v13 + 6);
    if ((_DWORD)v29 != -1)
      ((void (*)(char **, uint64_t (**)()))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                                + v29))(&v34, v13);
    *((_DWORD *)v13 + 6) = -1;
    _Unwind_Resume(v28);
  }
  if (v4)
LABEL_31:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void sub_1D80BCA14(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80BCBB0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80BCD8C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80BD0A0(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80BD364(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80BD4D4(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  StringImpl *v12;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v12);
  _Unwind_Resume(a1);
}

void sub_1D80BD700(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  StringImpl *v14;

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
    {
      WTF::StringImpl::destroy(a12, a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a12 -= 2;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
    _Unwind_Resume(a1);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  _Unwind_Resume(a1);
}

void WebPaymentCoordinatorClient::validatedPaymentNetwork(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t WebPaymentCoordinatorClient::canMakePayments(WebPaymentCoordinatorClient *this)
{
  return 0;
}

uint64_t WebPaymentCoordinatorClient::canMakePaymentsWithActiveCard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *a4;
  *a4 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E9D6E2C8;
  v5[1] = v4;
  v7 = v5;
  WTF::callOnMainThread();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_1D80BD848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebPaymentCoordinatorClient::openPaymentSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *a4;
  *a4 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E9D6E2F0;
  v5[1] = v4;
  v7 = v5;
  WTF::callOnMainThread();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_1D80BD8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebPaymentCoordinatorClient::showPaymentUI()
{
  return 0;
}

uint64_t WebCore::PaymentCoordinatorClient::isMockPaymentCoordinator(WebCore::PaymentCoordinatorClient *this)
{
  return 0;
}

uint64_t WebCore::PaymentCoordinatorClient::isWebPaymentCoordinator(WebCore::PaymentCoordinatorClient *this)
{
  return 0;
}

WTF *WebCore::PaymentCoordinatorClient::getSetupFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *result;
  WTF *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v4 + 16))(v4, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (HIDWORD(v11))
  {
    v6 = v10;
    v7 = 8 * HIDWORD(v11);
    do
    {
      v8 = *(_DWORD **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  result = v10;
  if (v10)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_1D80BDA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PaymentCoordinatorClient::beginApplePaySetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1D80BDA64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E9D6E2C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6E2C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::canMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1D80BDB44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E9D6E2F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E9D6E2F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPaymentCoordinatorClient::openPaymentSetup(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1D80BDC20(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *allScriptsInPDFDocument(CGPDFDocument *a1)
{
  void *v2;
  CGPDFDictionary *Catalog;
  void *v4;
  uint64_t v5;
  WTF *v6;
  CGPDFObjectRef *v7;
  const char *v8;
  const __CFData *v9;
  const __CFData *v10;
  const UInt8 *BytePtr;
  uint64_t Length;
  WTF *v13;
  const char *v14;
  _BOOL4 v15;
  id v16;
  uint64_t v17;
  const void *v18;
  CGPDFDataFormat format;
  CGPDFStringRef string;
  CGPDFStreamRef stream;
  char *__s1;
  CGPDFDictionaryRef dict;
  WTF *v25;
  uint64_t v26;
  CGPDFDictionaryRef v27;
  CGPDFDictionaryRef value;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (a1)
  {
    Catalog = CGPDFDocumentGetCatalog(a1);
    if (Catalog)
    {
      value = 0;
      if (CGPDFDictionaryGetDictionary(Catalog, "Names", &value))
      {
        v27 = 0;
        if (CGPDFDictionaryGetDictionary(value, "JavaScript", &v27))
        {
          v25 = 0;
          v26 = 0;
          appendValuesInPDFNameSubtreeToVector(v27, (uint64_t)&v25);
          v5 = HIDWORD(v26);
          v6 = v25;
          if (HIDWORD(v26))
          {
            v7 = (CGPDFObjectRef *)v25;
            v8 = "JS";
            while (1)
            {
              dict = 0;
              if (CGPDFObjectGetValue(*v7, kCGPDFObjectTypeDictionary, &dict))
              {
                __s1 = 0;
                if (CGPDFDictionaryGetName(dict, "S", (const char **)&__s1) && !strcmp(__s1, "JavaScript"))
                {
                  string = 0;
                  stream = 0;
                  if (CGPDFDictionaryGetStream(dict, v8, &stream))
                  {
                    format = CGPDFDataFormatRaw;
                    v9 = CGPDFStreamCopyData(stream, &format);
                    v10 = v9;
                    if (v9)
                    {
                      BytePtr = CFDataGetBytePtr(v9);
                      Length = CFDataGetLength(v10);
                      if (BytePtr)
                      {
LABEL_17:
                        if (Length)
                        {
                          v13 = v6;
                          v14 = v8;
                          v15 = Length >= 2 && *BytePtr == 254 && BytePtr[1] == 255;
                          v16 = objc_alloc(MEMORY[0x1E0CB3940]);
                          if (v15)
                            v17 = 10;
                          else
                            v17 = 4;
                          v18 = (const void *)objc_msgSend(v16, "initWithBytes:length:encoding:", BytePtr, Length, v17);
                          v8 = v14;
                          v6 = v13;
                          if (v18)
                          {
                            objc_msgSend(v2, "addObject:", v18);
                            CFRelease(v18);
                          }
                        }
                      }
LABEL_27:
                      if (v10)
                        CFRelease(v10);
                    }
                  }
                  else if (CGPDFDictionaryGetString(dict, v8, &string))
                  {
                    BytePtr = CGPDFStringGetBytePtr(string);
                    Length = CGPDFStringGetLength(string);
                    v10 = 0;
                    if (BytePtr)
                      goto LABEL_17;
                    goto LABEL_27;
                  }
                }
              }
              ++v7;
              if (!--v5)
                goto LABEL_30;
            }
          }
          if (v25)
LABEL_30:
            WTF::fastFree(v6, v4);
        }
      }
    }
  }
  return v2;
}

void sub_1D80BDE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15)
{
  const void *v15;
  const void *v16;
  void *v18;
  WTF *v19;

  CFRelease(v16);
  if (v15)
  {
    CFRelease(v15);
    v19 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v19 = a15;
    if (!a15)
      goto LABEL_3;
  }
  WTF::fastFree(v19, v18);
  _Unwind_Resume(a1);
}

unint64_t appendValuesInPDFNameSubtreeToVector(CGPDFDictionary *a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t i;
  CGPDFDictionaryRef v11;
  CGPDFObjectRef array;
  CGPDFArrayRef value;

  value = 0;
  if (CGPDFDictionaryGetArray(a1, "Names", &value))
  {
    result = CGPDFArrayGetCount(value);
    if (result >= 2)
    {
      v5 = result >> 1;
      v6 = 1;
      do
      {
        while (1)
        {
          array = 0;
          result = CGPDFArrayGetObject(value, v6, &array);
          v8 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v8 != *(_DWORD *)(a2 + 8))
            break;
          result = WTF::Vector<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v8 + 1, (unint64_t)&array);
          v7 = *(unsigned int *)(a2 + 12);
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = *(_QWORD *)result;
          *(_DWORD *)(a2 + 12) = v7 + 1;
          v6 += 2;
          if (!--v5)
            return result;
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = array;
        *(_DWORD *)(a2 + 12) = v8 + 1;
        v6 += 2;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    array = 0;
    result = CGPDFDictionaryGetArray(a1, "Kids", &array);
    if ((_DWORD)result)
    {
      result = CGPDFArrayGetCount(array);
      if (result)
      {
        v9 = result;
        for (i = 0; i != v9; ++i)
        {
          v11 = 0;
          result = CGPDFArrayGetDictionary(array, i, &v11);
          if ((_DWORD)result)
            result = appendValuesInPDFNameSubtreeToVector(v11, a2);
        }
      }
    }
  }
  return result;
}

CGColorRef createCGColorWithDeviceWhite(CGFloat a1, CGFloat a2, CGColorRef *a3)
{
  CGColorSpace *DeviceGray;
  CGColorRef result;
  double v6;
  double v7;
  CGFloat components[3];

  components[2] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (byte_1F0166062 == 1)
  {
    DeviceGray = (CGColorSpace *)qword_1F0166078;
  }
  else
  {
    v6 = a1;
    v7 = a2;
    DeviceGray = CGColorSpaceCreateDeviceGray();
    a1 = v6;
    a2 = v7;
    qword_1F0166078 = (uint64_t)DeviceGray;
    byte_1F0166062 = 1;
  }
  components[0] = a1;
  components[1] = a2;
  result = CGColorCreate(DeviceGray, components);
  *a3 = result;
  return result;
}

void sub_1D80BE4A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if (cf)
    CFRelease(cf);
  if ((a15 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t comparePageRects(CGRect *a1, CGRect *a2)
{
  double MinY;

  if (CGRectIntersectsRect(*a2, *a1))
    return 0;
  MinY = CGRectGetMinY(*a1);
  if (MinY > CGRectGetMaxY(*a2))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

void sub_1D80BEC1C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      CFRelease(v10);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a10 -= 2;
    CFRelease(v10);
    _Unwind_Resume(a1);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1D80BEEBC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BEED0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BEEE4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BEEF8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BEF0C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BEF20(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BEF34(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BEF48(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, unsigned int *a10)
{
  const void *v10;

  if (a10)
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      CFRelease(v10);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)a9 -= 2;
    CFRelease(v10);
    _Unwind_Resume(a1);
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

unsigned int *WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    OpaqueJSString::~OpaqueJSString((OpaqueJSString *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

void sub_1D80BF2DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BF654(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BF88C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, unsigned int *a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80BF9F4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1D80BFDFC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D80C021C(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,WTF::StringImpl *a53,WTF::StringImpl *a54,WTF::StringImpl *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,__int16 a61)
{
  uint64_t v61;
  WTF::StringImpl *v63;
  _DWORD *v64;

  if (a52)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&a13, a2);
  v63 = a55;
  a55 = 0;
  if (v63)
  {
    if (*((_DWORD *)v63 + 6) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v63 + 24))(v63);
    else
      --*((_DWORD *)v63 + 6);
  }
  MEMORY[0x1D82A4FF4](&a61);
  v64 = *(_DWORD **)(v61 - 40);
  *(_QWORD *)(v61 - 40) = 0;
  if (v64)
  {
    if (v64[4] != 1)
    {
      --v64[4];
      _Unwind_Resume(a1);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1D80C033C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,WebCore::WindowProxy *a61)
{
  if (a61)
  {
    WTF::RefCounted<WebCore::WindowProxy>::deref(a61);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1D80C0328);
}

void WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(WebCore::PrivateClickMeasurement *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      if (!*((_BYTE *)this + 296))
        goto LABEL_20;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  if (!*((_BYTE *)this + 296))
    goto LABEL_20;
LABEL_7:
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      v5 = (WTF::StringImpl *)*((_QWORD *)this + 35);
      *((_QWORD *)this + 35) = 0;
      if (!v5)
        goto LABEL_15;
      goto LABEL_13;
    }
    *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (!v5)
  {
LABEL_15:
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    if (!v6)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_13:
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v5, a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (!v6)
    goto LABEL_20;
LABEL_18:
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, a2);
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = 0;
    if (!v7)
      goto LABEL_24;
    goto LABEL_21;
  }
  *(_DWORD *)v6 -= 2;
LABEL_20:
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (!v7)
    goto LABEL_24;
LABEL_21:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, a2);
  else
    *(_DWORD *)v7 -= 2;
LABEL_24:
  v8 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v10)
    CFRelease(v10);
  if (!*((_BYTE *)this + 232) || (v11 = (WTF::StringImpl *)*((_QWORD *)this + 28), *((_QWORD *)this + 28) = 0, !v11))
  {
LABEL_34:
    if (!*((_BYTE *)this + 184))
      goto LABEL_81;
    goto LABEL_35;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_34;
  }
  WTF::StringImpl::destroy(v11, a2);
  if (!*((_BYTE *)this + 184))
    goto LABEL_81;
LABEL_35:
  if (!*((_BYTE *)this + 176))
    goto LABEL_53;
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, a2);
      v13 = (WTF::StringImpl *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = 0;
      if (!v13)
        goto LABEL_48;
      goto LABEL_46;
    }
    *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (!v13)
  {
LABEL_48:
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (!v14)
      goto LABEL_53;
    goto LABEL_51;
  }
LABEL_46:
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_48;
  }
  WTF::StringImpl::destroy(v13, a2);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (!v14)
    goto LABEL_53;
LABEL_51:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, a2);
    if (!*((_BYTE *)this + 144))
      goto LABEL_64;
    goto LABEL_54;
  }
  *(_DWORD *)v14 -= 2;
LABEL_53:
  if (!*((_BYTE *)this + 144))
    goto LABEL_64;
LABEL_54:
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, a2);
      v16 = (const void *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = 0;
      if (!v16)
        goto LABEL_59;
      goto LABEL_58;
    }
    *(_DWORD *)v15 -= 2;
  }
  v16 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v16)
LABEL_58:
    CFRelease(v16);
LABEL_59:
  v17 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v17)
    CFRelease(v17);
  v18 = (const void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v18)
    CFRelease(v18);
LABEL_64:
  if (!*((_BYTE *)this + 104) || (v19 = (WTF::StringImpl *)*((_QWORD *)this + 12), *((_QWORD *)this + 12) = 0, !v19))
  {
LABEL_68:
    if (!*((_BYTE *)this + 88))
      goto LABEL_77;
    goto LABEL_69;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_68;
  }
  WTF::StringImpl::destroy(v19, a2);
  if (!*((_BYTE *)this + 88))
    goto LABEL_77;
LABEL_69:
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
LABEL_77:
  if (*((_BYTE *)this + 72))
  {
    v21 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, a2);
        v22 = (WTF::StringImpl *)*((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = 0;
        if (!v22)
          goto LABEL_85;
        goto LABEL_82;
      }
      *(_DWORD *)v21 -= 2;
    }
  }
LABEL_81:
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v22)
    goto LABEL_85;
LABEL_82:
  if (*(_DWORD *)v22 == 2)
    WTF::StringImpl::destroy(v22, a2);
  else
    *(_DWORD *)v22 -= 2;
LABEL_85:
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
}

unint64_t WTF::Vector<CGRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 32 * v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
        goto LABEL_30;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = (void *)WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      memcpy(v19, v5, 32 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 27))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 32 * v6);
      v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 32 * ((uint64_t)(a3 - (_QWORD)v5) >> 5);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1D80C0944);
  }
  v13 = *(void **)a1;
  return (unint64_t)v13 + 32 * ((uint64_t)(a3 - (_QWORD)v5) >> 5);
}

void sub_1D80C09F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::initializeIfNecessary(WebPlatformStrategies *this)
{
  uint64_t v1;

  if (!WebPlatformStrategies::initializeIfNecessary(void)::platformStrategies)
  {
    v1 = operator new();
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_QWORD *)v1 = &off_1E9D6E318;
    *(_QWORD *)(v1 + 56) = &unk_1E9D6E458;
    WebPlatformStrategies::initializeIfNecessary(void)::platformStrategies = v1;
    WebCore::setPlatformStrategies();
  }
}

uint64_t WebPlatformStrategies::createLoaderStrategy(WebPlatformStrategies *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore *v3;

  v1 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v1 = &unk_1E9D6A5B8;
  *(_QWORD *)(v1 + 8) = 0;
  v2 = WTF::fastMalloc((WTF *)0xC8);
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_DWORD *)(v2 + 192) = 10000;
  *(_QWORD *)(v1 + 16) = v2;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = &unk_1E9D6A108;
  v3 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v3 = &unk_1E9D6AB40;
  *((_QWORD *)v3 + 1) = WebResourceLoadScheduler::requestTimerFired;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v1;
  *(_QWORD *)(v1 + 72) = v3;
  *(_DWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 84) = 0;
  maxRequestsInFlightPerHost = WebCore::initializeMaximumHTTPConnectionCountPerHost(v3);
  return v1;
}

uint64_t WebPlatformStrategies::createPasteboardStrategy(WebPlatformStrategies *this)
{
  return (uint64_t)this + 56;
}

WebCore::MediaStrategy *WebPlatformStrategies::createMediaStrategy(WebPlatformStrategies *this)
{
  WebCore::MediaStrategy *v1;

  v1 = (WebCore::MediaStrategy *)operator new();
  WebCore::MediaStrategy::MediaStrategy(v1);
  *(_QWORD *)v1 = &off_1E9D6E570;
  return v1;
}

void sub_1D80C0BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D82A8D20](v1, 0x1081C40C20BADFCLL);
  _Unwind_Resume(a1);
}

uint64_t WebPlatformStrategies::createBlobRegistry(WebPlatformStrategies *this)
{
  uint64_t result;
  uint64_t v2;

  result = operator new();
  v2 = MEMORY[0x1E0DD8F90] + 16;
  *(_QWORD *)result = off_1E9D6E5B0;
  *(_QWORD *)(result + 8) = v2;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 37) = 0;
  return result;
}

void WebPlatformStrategies::getTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::getTypes();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1D80C0CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::getTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::getTypes();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1D80C0D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::bufferForType(const WTF::String *a1@<X1>, uint64_t a2@<X2>, unsigned int **a3@<X8>)
{
  StringImpl *v5;
  CFTypeRef v6;
  unsigned int *v7;
  unsigned int v8;
  CFTypeRef cf;
  _BYTE v10[16];
  unsigned int *v11;

  MEMORY[0x1D82A5870](&cf, a2);
  WebCore::PlatformPasteboard::bufferForType((WebCore::PlatformPasteboard *)&cf, a1);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  v7 = v11;
  if (v11)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *a3 = v7;
  WebCore::PasteboardBuffer::~PasteboardBuffer((WebCore::PasteboardBuffer *)v10, v5);
}

void sub_1D80C0DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::bufferForType(const WTF::String *a1@<X1>, uint64_t a2@<X2>, unsigned int **a3@<X8>)
{
  StringImpl *v5;
  CFTypeRef v6;
  unsigned int *v7;
  unsigned int v8;
  CFTypeRef cf;
  _BYTE v10[16];
  unsigned int *v11;

  MEMORY[0x1D82A5870](&cf, a2);
  WebCore::PlatformPasteboard::bufferForType((WebCore::PlatformPasteboard *)&cf, a1);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  v7 = v11;
  if (v11)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *a3 = v7;
  WebCore::PasteboardBuffer::~PasteboardBuffer((WebCore::PasteboardBuffer *)v10, v5);
}

void sub_1D80C0E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::getPathnamesForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  WebCore::PlatformPasteboard::getPathnamesForType();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C0EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::getPathnamesForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  WebCore::PlatformPasteboard::getPathnamesForType();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C0F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::allStringsForType(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::allStringsForType((WebCore::PlatformPasteboard *)&cf, a2);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C0FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::allStringsForType(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::allStringsForType((WebCore::PlatformPasteboard *)&cf, a2);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C1010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::stringForType(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::stringForType((WebCore::PlatformPasteboard *)&cf, a2);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C1080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::stringForType(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::stringForType((WebCore::PlatformPasteboard *)&cf, a2);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C10F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::changeCount()
{
  uint64_t v0;
  CFTypeRef v1;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v0 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
  return v0;
}

void sub_1D80C1154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::changeCount()
{
  uint64_t v0;
  CFTypeRef v1;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v0 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
  return v0;
}

void sub_1D80C11B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::color()
{
  CFTypeRef v0;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::color((WebCore::PlatformPasteboard *)&cf);
  v0 = cf;
  cf = 0;
  if (v0)
    CFRelease(v0);
}

void sub_1D80C121C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::color()
{
  CFTypeRef v0;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::color((WebCore::PlatformPasteboard *)&cf);
  v0 = cf;
  cf = 0;
  if (v0)
    CFRelease(v0);
}

void sub_1D80C1280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::url()
{
  CFTypeRef v0;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::url((WebCore::PlatformPasteboard *)&cf);
  v0 = cf;
  cf = 0;
  if (v0)
    CFRelease(v0);
}

void sub_1D80C12E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::url()
{
  CFTypeRef v0;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::url((WebCore::PlatformPasteboard *)&cf);
  v0 = cf;
  cf = 0;
  if (v0)
    CFRelease(v0);
}

void sub_1D80C1348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::addTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::addTypes();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C13B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::addTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::addTypes();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C1428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::setTypes();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C1498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::setTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::setTypes();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C1508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setBufferForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  v4 = WebCore::PlatformPasteboard::setBufferForType();
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  return v4;
}

void sub_1D80C1580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::setBufferForType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  v4 = WebCore::PlatformPasteboard::setBufferForType();
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  return v4;
}

void sub_1D80C15F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::setURL();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C1668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::setURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::setURL();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C16D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::setColor();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C1748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::setColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::setColor();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C17B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::setStringForType(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t a4)
{
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  v6 = WebCore::PlatformPasteboard::setStringForType((WebCore::PlatformPasteboard *)&cf, a2, a3);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  return v6;
}

void sub_1D80C1830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::setStringForType(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t a4)
{
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  v6 = WebCore::PlatformPasteboard::setStringForType((WebCore::PlatformPasteboard *)&cf, a2, a3);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  return v6;
}

void sub_1D80C18A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::getNumberOfFiles()
{
  uint64_t v0;
  CFTypeRef v1;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v0 = WebCore::PlatformPasteboard::numberOfFiles((WebCore::PlatformPasteboard *)&cf);
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
  return v0;
}

void sub_1D80C190C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::getNumberOfFiles()
{
  uint64_t v0;
  CFTypeRef v1;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v0 = WebCore::PlatformPasteboard::numberOfFiles((WebCore::PlatformPasteboard *)&cf);
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
  return v0;
}

void sub_1D80C1970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::typesSafeForDOMToReadAndWrite(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite((WebCore::PlatformPasteboard *)&cf, a3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C19DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::typesSafeForDOMToReadAndWrite(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite((WebCore::PlatformPasteboard *)&cf, a3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C1A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::writeCustomData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::write();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C1AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::writeCustomData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  v3 = WebCore::PlatformPasteboard::write();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return v3;
}

void sub_1D80C1B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::containsStringSafeForDOMToReadForType(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v4 = WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType((WebCore::PlatformPasteboard *)&cf, a3);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  return v4;
}

void sub_1D80C1B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::containsStringSafeForDOMToReadForType(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v4 = WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType((WebCore::PlatformPasteboard *)&cf, a3);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  return v4;
}

void sub_1D80C1C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::informationForItemAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::informationForItemAtIndex((WebCore::PlatformPasteboard *)&cf);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1D80C1C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::informationForItemAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::informationForItemAtIndex((WebCore::PlatformPasteboard *)&cf);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1D80C1D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::allPasteboardItemInfo()
{
  CFTypeRef v0;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::allPasteboardItemInfo((WebCore::PlatformPasteboard *)&cf);
  v0 = cf;
  cf = 0;
  if (v0)
    CFRelease(v0);
}

void sub_1D80C1D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::allPasteboardItemInfo()
{
  CFTypeRef v0;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::allPasteboardItemInfo((WebCore::PlatformPasteboard *)&cf);
  v0 = cf;
  cf = 0;
  if (v0)
    CFRelease(v0);
}

void sub_1D80C1DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::getPasteboardItemsCount()
{
  uint64_t v0;
  CFTypeRef v1;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v0 = WebCore::PlatformPasteboard::count((WebCore::PlatformPasteboard *)&cf);
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
  return v0;
}

void sub_1D80C1E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::getPasteboardItemsCount()
{
  uint64_t v0;
  CFTypeRef v1;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v0 = WebCore::PlatformPasteboard::count((WebCore::PlatformPasteboard *)&cf);
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
  return v0;
}

void sub_1D80C1EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::readBufferFromPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v5;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a5);
  WebCore::PlatformPasteboard::readBuffer();
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_1D80C1F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::readBufferFromPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v5;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a5);
  WebCore::PlatformPasteboard::readBuffer();
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_1D80C1FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::readURLFromPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::readURL((WebCore::PlatformPasteboard *)&cf, a2, a4);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void sub_1D80C2030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::readURLFromPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::readURL((WebCore::PlatformPasteboard *)&cf, a2, a4);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void sub_1D80C20B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::readStringFromPasteboard(uint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t a4)
{
  CFTypeRef v6;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  WebCore::PlatformPasteboard::readString((WebCore::PlatformPasteboard *)&cf, a2, a3);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void sub_1D80C2130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::readStringFromPasteboard(uint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t a4)
{
  CFTypeRef v6;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  WebCore::PlatformPasteboard::readString((WebCore::PlatformPasteboard *)&cf, a2, a3);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void sub_1D80C21B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebPlatformStrategies::containsURLStringSuitableForLoading()
{
  uint64_t v0;
  CFTypeRef v1;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v0 = WebCore::PlatformPasteboard::containsURLStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf);
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
  return v0;
}

void sub_1D80C2214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebPlatformStrategies::containsURLStringSuitableForLoading()
{
  uint64_t v0;
  CFTypeRef v1;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  v0 = WebCore::PlatformPasteboard::containsURLStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf);
  v1 = cf;
  cf = 0;
  if (v1)
    CFRelease(v1);
  return v0;
}

void sub_1D80C2278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::urlStringSuitableForLoading(uint64_t a1, uint64_t a2, WTF::String *a3)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::urlStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf, a3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C22E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::urlStringSuitableForLoading(uint64_t a1, uint64_t a2, WTF::String *a3)
{
  CFTypeRef v4;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf);
  WebCore::PlatformPasteboard::urlStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf, a3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1D80C2350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::write();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::write();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::write();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1D80C23B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::write();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::write();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::write();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1D80C2420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D80C2488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D80C24F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D80C2558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D80C25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::writeToPasteboard(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t a4)
{
  CFTypeRef v6;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  WebCore::PlatformPasteboard::write((WebCore::PlatformPasteboard *)&cf, a2, a3);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void sub_1D80C2630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::writeToPasteboard(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t a4)
{
  CFTypeRef v6;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a4);
  WebCore::PlatformPasteboard::write((WebCore::PlatformPasteboard *)&cf, a2, a3);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void sub_1D80C26A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::updateSupportedTypeIdentifiers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1D80C2708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebPlatformStrategies::updateSupportedTypeIdentifiers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x1D82A5870](&cf, a3);
  WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1D80C2770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPlatformStrategies::~WebPlatformStrategies(WebPlatformStrategies *this)
{
  JUMPOUT(0x1D82A8D20);
}

uint64_t WebPlatformStrategies::createPushStrategy(WebPlatformStrategies *this)
{
  return 0;
}

void `non-virtual thunk to'WebPlatformStrategies::~WebPlatformStrategies(WebPlatformStrategies *this)
{
  JUMPOUT(0x1D82A8D20);
}

uint64_t WebMediaStrategy::createAudioDestination()
{
  return WebCore::AudioDestination::create();
}

void WebMediaStrategy::~WebMediaStrategy(WebMediaStrategy *this)
{
  WebCore::MediaStrategy::~MediaStrategy(this);
  JUMPOUT(0x1D82A8D20);
}

uint64_t WebBlobRegistry::registerInternalFileBlobURL()
{
  return WebCore::BlobRegistryImpl::registerInternalFileBlobURL();
}

uint64_t WebBlobRegistry::registerInternalBlobURL()
{
  return WebCore::BlobRegistryImpl::registerInternalBlobURL();
}

uint64_t WebBlobRegistry::registerBlobURL()
{
  return WebCore::BlobRegistryImpl::registerBlobURL();
}

void WebBlobRegistry::registerInternalBlobURLOptionallyFileBacked()
{
  StringImpl *v0;
  _QWORD v1[3];
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  memset(v1, 0, sizeof(v1));
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 7;
  WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked();
  WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)v1, v0);
}

void sub_1D80C2874(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebBlobRegistry::registerInternalBlobURLForSlice(WebBlobRegistry *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  return WebCore::BlobRegistryImpl::registerInternalBlobURLForSlice((WebBlobRegistry *)((char *)this + 8), a2, a3, a4, a5, a6);
}

uint64_t WebBlobRegistry::unregisterBlobURL()
{
  return WebCore::BlobRegistryImpl::unregisterBlobURL();
}

uint64_t WebBlobRegistry::registerBlobURLHandle()
{
  return WebCore::BlobRegistryImpl::registerBlobURLHandle();
}

uint64_t WebBlobRegistry::unregisterBlobURLHandle()
{
  return WebCore::BlobRegistryImpl::unregisterBlobURLHandle();
}

uint64_t WebBlobRegistry::blobType(WebBlobRegistry *this, const WTF::URL *a2)
{
  return WebCore::BlobRegistryImpl::blobType((WebBlobRegistry *)((char *)this + 8), a2);
}

uint64_t WebBlobRegistry::blobSize(WebBlobRegistry *this, const WTF::URL *a2)
{
  return WebCore::BlobRegistryImpl::blobSize((WebBlobRegistry *)((char *)this + 8), a2);
}

uint64_t WebBlobRegistry::writeBlobsToTemporaryFilesForIndexedDB()
{
  return WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB();
}

uint64_t WebBlobRegistry::blobRegistryImpl(WebBlobRegistry *this)
{
  return (uint64_t)this + 8;
}

void WebBlobRegistry::~WebBlobRegistry(WebBlobRegistry *this)
{
  MEMORY[0x1D82A4F64]((char *)this + 8);
  WebCore::BlobRegistry::~BlobRegistry(this);
}

{
  MEMORY[0x1D82A4F64]((char *)this + 8);
  WebCore::BlobRegistry::~BlobRegistry(this);
  JUMPOUT(0x1D82A8D20);
}

void WebCore::PolicyContainer::~PolicyContainer(WebCore::PolicyContainer *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = 0;
      if (!v4)
        goto LABEL_9;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v4)
  {
LABEL_9:
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v5)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_7:
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v5)
    goto LABEL_14;
LABEL_12:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v6)
      goto LABEL_19;
    goto LABEL_17;
  }
  *(_DWORD *)v5 -= 2;
LABEL_14:
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v6)
  {
LABEL_19:
    v7 = *((unsigned int *)this + 3);
    if (!(_DWORD)v7)
      goto LABEL_28;
    goto LABEL_22;
  }
LABEL_17:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v6, a2);
  v7 = *((unsigned int *)this + 3);
  if (!(_DWORD)v7)
    goto LABEL_28;
LABEL_22:
  v8 = *(WTF::StringImpl ***)this;
  v9 = 16 * v7;
  do
  {
    v10 = *v8;
    *v8 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
LABEL_28:
  v11 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v11, a2);
  }
}

void WebCore::PasteboardBuffer::~PasteboardBuffer(WebCore::PasteboardBuffer *this, StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  char v20;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_4;
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (v5)
  {
LABEL_4:
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v6)
      goto LABEL_8;
    goto LABEL_5;
  }
  atomic_store(1u, (unsigned int *)v3);
  v8 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(v3 + 8);
    v10 = v9 + 16 * v8;
    do
    {
      v11 = *(unsigned int **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v17 = v9;
          v18 = v10;
          atomic_store(1u, v11);
          v19 = (WTF *)v11;
          v14 = v11[6];
          if ((_DWORD)v14 != -1)
            ((void (*)(char *, unsigned int *))off_1E9D6E620[v14])(&v20, v11 + 2);
          *((_DWORD *)v19 + 6) = -1;
          WTF::fastFree(v19, a2);
          v9 = v17;
          v10 = v18;
        }
      }
      v9 += 16;
    }
    while (v9 != v10);
  }
  v15 = *(WTF **)(v3 + 8);
  if ((WTF *)(v3 + 24) != v15 && v15 != 0)
  {
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    WTF::fastFree(v15, a2);
  }
  WTF::fastFree((WTF *)v3, a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
LABEL_5:
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
LABEL_8:
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

void WebPluginInfoProvider::~WebPluginInfoProvider(WebPluginInfoProvider *this)
{
  WTF *v1;
  void *v2;

  WebCore::PluginInfoProvider::~PluginInfoProvider(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebPluginInfoProvider::refreshPlugins(WebPluginInfoProvider *this)
{
  return objc_msgSend(+[WebPluginDatabase sharedDatabaseIfExists](WebPluginDatabase, "sharedDatabaseIfExists"), "refresh");
}

void WebPluginInfoProvider::pluginInfo(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebPluginInfoProvider::webVisiblePluginInfo(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1D80C33C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  objc_begin_catch(exception_object);

  objc_end_catch();
  return 0;
}

void sub_1D80C6C50(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v8 = *(WTF::StringImpl **)(v7 - 112);
  *(_QWORD *)(v7 - 136) = a1;
  if (**(_DWORD **)(v7 - 128) == 2)
    WTF::StringImpl::destroy(*(WTF::StringImpl **)(v7 - 128), a2);
  else
    **(_DWORD **)(v7 - 128) -= 2;
  if (*(_QWORD *)(v7 - 120))
  {
    if (**(_DWORD **)(v7 - 120) == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)(v7 - 120), a2);
    else
      **(_DWORD **)(v7 - 120) -= 2;
  }
  if (*(_QWORD *)(v7 - 104))
  {
    if (**(_DWORD **)(v7 - 104) == 2)
    {
      WTF::StringImpl::destroy(*(WTF::StringImpl **)(v7 - 104), a2);
      if (!v5)
        goto LABEL_18;
      goto LABEL_14;
    }
    **(_DWORD **)(v7 - 104) -= 2;
  }
  if (!v5)
    goto LABEL_18;
LABEL_14:
  if (*(_DWORD *)v5 == 2)
  {
    WTF::StringImpl::destroy(v5, a2);
    if (!v2)
      goto LABEL_22;
    goto LABEL_19;
  }
  *(_DWORD *)v5 -= 2;
LABEL_18:
  if (!v2)
    goto LABEL_22;
LABEL_19:
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
LABEL_22:
  if (*v6 == 2)
  {
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEF70], a2);
    if (!v4)
      goto LABEL_30;
  }
  else
  {
    *v6 -= 2;
    if (!v4)
      goto LABEL_30;
  }
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, a2);
    if (!v3)
      goto LABEL_35;
    goto LABEL_31;
  }
  *(_DWORD *)v4 -= 2;
LABEL_30:
  if (!v3)
    goto LABEL_35;
LABEL_31:
  if (*(_DWORD *)v3 == 2)
  {
    WTF::StringImpl::destroy(v3, a2);
    if (!v8)
    {
LABEL_39:
      if (*v6 == 2)
      {
        WTF::StringImpl::destroy(MEMORY[0x1E0CBEF70], a2);
        _Unwind_Resume(*(_Unwind_Exception **)(v7 - 136));
      }
      *v6 -= 2;
      _Unwind_Resume(*(_Unwind_Exception **)(v7 - 136));
    }
LABEL_36:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
    goto LABEL_39;
  }
  *(_DWORD *)v3 -= 2;
LABEL_35:
  if (!v8)
    goto LABEL_39;
  goto LABEL_36;
}

void sub_1D80C7150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_1D80C8AC8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1D80C8AD4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1D80C8ACCLL);
}

void sub_1D80C9A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1D80C9B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1D80C9BC8(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1D80CDA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef a22,CFTypeRef a23,CFTypeRef a24,CFTypeRef a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,CFTypeRef a32,CFTypeRef a33,CFTypeRef a34,CFTypeRef a35,CFTypeRef a36,CFTypeRef a37,CFTypeRef a38,CFTypeRef a39,CFTypeRef a40,CFTypeRef a41,CFTypeRef a42,CFTypeRef a43,CFTypeRef a44,CFTypeRef a45,CFTypeRef a46,CFTypeRef a47,CFTypeRef a48,CFTypeRef a49,CFTypeRef a50,CFTypeRef a51,CFTypeRef a52,CFTypeRef a53,CFTypeRef a54,CFTypeRef a55,CFTypeRef a56,CFTypeRef a57,CFTypeRef a58,CFTypeRef a59,CFTypeRef a60,CFTypeRef a61,CFTypeRef a62,CFTypeRef a63)
{
  CFTypeRef a64;
  CFTypeRef a65;
  CFTypeRef a66;
  CFTypeRef a67;
  CFTypeRef a68;
  CFTypeRef a69;
  CFTypeRef a70;
  CFTypeRef a71;
  CFTypeRef a72;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;

  if (v74)
  {
    CFRelease(v74);
    if (!v73)
    {
LABEL_3:
      if (!v72)
        goto LABEL_4;
      goto LABEL_177;
    }
  }
  else if (!v73)
  {
    goto LABEL_3;
  }
  CFRelease(v73);
  if (!v72)
  {
LABEL_4:
    if (!v79)
      goto LABEL_5;
    goto LABEL_178;
  }
LABEL_177:
  CFRelease(v72);
  if (!v79)
  {
LABEL_5:
    if (!v78)
      goto LABEL_6;
    goto LABEL_179;
  }
LABEL_178:
  CFRelease(v79);
  if (!v78)
  {
LABEL_6:
    if (!v77)
      goto LABEL_7;
    goto LABEL_180;
  }
LABEL_179:
  CFRelease(v78);
  if (!v77)
  {
LABEL_7:
    if (!v76)
      goto LABEL_8;
    goto LABEL_181;
  }
LABEL_180:
  CFRelease(v77);
  if (!v76)
  {
LABEL_8:
    if (!v75)
      goto LABEL_9;
    goto LABEL_182;
  }
LABEL_181:
  CFRelease(v76);
  if (!v75)
  {
LABEL_9:
    if (!cf)
      goto LABEL_10;
    goto LABEL_183;
  }
LABEL_182:
  CFRelease(v75);
  if (!cf)
  {
LABEL_10:
    if (!a13)
      goto LABEL_11;
    goto LABEL_184;
  }
LABEL_183:
  CFRelease(cf);
  if (!a13)
  {
LABEL_11:
    if (!a14)
      goto LABEL_12;
    goto LABEL_185;
  }
LABEL_184:
  CFRelease(a13);
  if (!a14)
  {
LABEL_12:
    if (!a15)
      goto LABEL_13;
    goto LABEL_186;
  }
LABEL_185:
  CFRelease(a14);
  if (!a15)
  {
LABEL_13:
    if (!a16)
      goto LABEL_14;
    goto LABEL_187;
  }
LABEL_186:
  CFRelease(a15);
  if (!a16)
  {
LABEL_14:
    if (!a17)
      goto LABEL_15;
    goto LABEL_188;
  }
LABEL_187:
  CFRelease(a16);
  if (!a17)
  {
LABEL_15:
    if (!a18)
      goto LABEL_16;
    goto LABEL_189;
  }
LABEL_188:
  CFRelease(a17);
  if (!a18)
  {
LABEL_16:
    if (!a19)
      goto LABEL_17;
    goto LABEL_190;
  }
LABEL_189:
  CFRelease(a18);
  if (!a19)
  {
LABEL_17:
    if (!a20)
      goto LABEL_18;
    goto LABEL_191;
  }
LABEL_190:
  CFRelease(a19);
  if (!a20)
  {
LABEL_18:
    if (!a21)
      goto LABEL_19;
    goto LABEL_192;
  }
LABEL_191:
  CFRelease(a20);
  if (!a21)
  {
LABEL_19:
    if (!a22)
      goto LABEL_20;
    goto LABEL_193;
  }
LABEL_192:
  CFRelease(a21);
  if (!a22)
  {
LABEL_20:
    if (!a23)
      goto LABEL_21;
    goto LABEL_194;
  }
LABEL_193:
  CFRelease(a22);
  if (!a23)
  {
LABEL_21:
    if (!a24)
      goto LABEL_22;
    goto LABEL_195;
  }
LABEL_194:
  CFRelease(a23);
  if (!a24)
  {
LABEL_22:
    if (!a25)
      goto LABEL_23;
    goto LABEL_196;
  }
LABEL_195:
  CFRelease(a24);
  if (!a25)
  {
LABEL_23:
    if (!a26)
      goto LABEL_24;
    goto LABEL_197;
  }
LABEL_196:
  CFRelease(a25);
  if (!a26)
  {
LABEL_24:
    if (!a27)
      goto LABEL_25;
    goto LABEL_198;
  }
LABEL_197:
  CFRelease(a26);
  if (!a27)
  {
LABEL_25:
    if (!a28)
      goto LABEL_26;
    goto LABEL_199;
  }
LABEL_198:
  CFRelease(a27);
  if (!a28)
  {
LABEL_26:
    if (!a29)
      goto LABEL_27;
    goto LABEL_200;
  }
LABEL_199:
  CFRelease(a28);
  if (!a29)
  {
LABEL_27:
    if (!a30)
      goto LABEL_28;
    goto LABEL_201;
  }
LABEL_200:
  CFRelease(a29);
  if (!a30)
  {
LABEL_28:
    if (!a31)
      goto LABEL_29;
    goto LABEL_202;
  }
LABEL_201:
  CFRelease(a30);
  if (!a31)
  {
LABEL_29:
    if (!a32)
      goto LABEL_30;
    goto LABEL_203;
  }
LABEL_202:
  CFRelease(a31);
  if (!a32)
  {
LABEL_30:
    if (!a33)
      goto LABEL_31;
    goto LABEL_204;
  }
LABEL_203:
  CFRelease(a32);
  if (!a33)
  {
LABEL_31:
    if (!a34)
      goto LABEL_32;
    goto LABEL_205;
  }
LABEL_204:
  CFRelease(a33);
  if (!a34)
  {
LABEL_32:
    if (!a35)
      goto LABEL_33;
    goto LABEL_206;
  }
LABEL_205:
  CFRelease(a34);
  if (!a35)
  {
LABEL_33:
    if (!a36)
      goto LABEL_34;
    goto LABEL_207;
  }
LABEL_206:
  CFRelease(a35);
  if (!a36)
  {
LABEL_34:
    if (!a37)
      goto LABEL_35;
    goto LABEL_208;
  }
LABEL_207:
  CFRelease(a36);
  if (!a37)
  {
LABEL_35:
    if (!a38)
      goto LABEL_36;
    goto LABEL_209;
  }
LABEL_208:
  CFRelease(a37);
  if (!a38)
  {
LABEL_36:
    if (!a39)
      goto LABEL_37;
    goto LABEL_210;
  }
LABEL_209:
  CFRelease(a38);
  if (!a39)
  {
LABEL_37:
    if (!a40)
      goto LABEL_38;
    goto LABEL_211;
  }
LABEL_210:
  CFRelease(a39);
  if (!a40)
  {
LABEL_38:
    if (!a41)
      goto LABEL_39;
    goto LABEL_212;
  }
LABEL_211:
  CFRelease(a40);
  if (!a41)
  {
LABEL_39:
    if (!a42)
      goto LABEL_40;
    goto LABEL_213;
  }
LABEL_212:
  CFRelease(a41);
  if (!a42)
  {
LABEL_40:
    if (!a43)
      goto LABEL_41;
    goto LABEL_214;
  }
LABEL_213:
  CFRelease(a42);
  if (!a43)
  {
LABEL_41:
    if (!a44)
      goto LABEL_42;
    goto LABEL_215;
  }
LABEL_214:
  CFRelease(a43);
  if (!a44)
  {
LABEL_42:
    if (!a45)
      goto LABEL_43;
    goto LABEL_216;
  }
LABEL_215:
  CFRelease(a44);
  if (!a45)
  {
LABEL_43:
    if (!a46)
      goto LABEL_44;
    goto LABEL_217;
  }
LABEL_216:
  CFRelease(a45);
  if (!a46)
  {
LABEL_44:
    if (!a47)
      goto LABEL_45;
    goto LABEL_218;
  }
LABEL_217:
  CFRelease(a46);
  if (!a47)
  {
LABEL_45:
    if (!a48)
      goto LABEL_46;
    goto LABEL_219;
  }
LABEL_218:
  CFRelease(a47);
  if (!a48)
  {
LABEL_46:
    if (!a49)
      goto LABEL_47;
    goto LABEL_220;
  }
LABEL_219:
  CFRelease(a48);
  if (!a49)
  {
LABEL_47:
    if (!a50)
      goto LABEL_48;
    goto LABEL_221;
  }
LABEL_220:
  CFRelease(a49);
  if (!a50)
  {
LABEL_48:
    if (!a51)
      goto LABEL_49;
    goto LABEL_222;
  }
LABEL_221:
  CFRelease(a50);
  if (!a51)
  {
LABEL_49:
    if (!a52)
      goto LABEL_50;
    goto LABEL_223;
  }
LABEL_222:
  CFRelease(a51);
  if (!a52)
  {
LABEL_50:
    if (!a53)
      goto LABEL_51;
    goto LABEL_224;
  }
LABEL_223:
  CFRelease(a52);
  if (!a53)
  {
LABEL_51:
    if (!a54)
      goto LABEL_52;
    goto LABEL_225;
  }
LABEL_224:
  CFRelease(a53);
  if (!a54)
  {
LABEL_52:
    if (!a55)
      goto LABEL_53;
    goto LABEL_226;
  }
LABEL_225:
  CFRelease(a54);
  if (!a55)
  {
LABEL_53:
    if (!a56)
      goto LABEL_54;
    goto LABEL_227;
  }
LABEL_226:
  CFRelease(a55);
  if (!a56)
  {
LABEL_54:
    if (!a57)
      goto LABEL_55;
    goto LABEL_228;
  }
LABEL_227:
  CFRelease(a56);
  if (!a57)
  {
LABEL_55:
    if (!a58)
      goto LABEL_56;
    goto LABEL_229;
  }
LABEL_228:
  CFRelease(a57);
  if (!a58)
  {
LABEL_56:
    if (!a59)
      goto LABEL_57;
    goto LABEL_230;
  }
LABEL_229:
  CFRelease(a58);
  if (!a59)
  {
LABEL_57:
    if (!a60)
      goto LABEL_58;
    goto LABEL_231;
  }
LABEL_230:
  CFRelease(a59);
  if (!a60)
  {
LABEL_58:
    if (!a61)
      goto LABEL_59;
    goto LABEL_232;
  }
LABEL_231:
  CFRelease(a60);
  if (!a61)
  {
LABEL_59:
    if (!a62)
      goto LABEL_60;
    goto LABEL_233;
  }
LABEL_232:
  CFRelease(a61);
  if (!a62)
  {
LABEL_60:
    if (!a63)
      goto LABEL_61;
    goto LABEL_234;
  }
LABEL_233:
  CFRelease(a62);
  if (!a63)
  {
LABEL_61:
    if (!a64)
      goto LABEL_62;
    goto LABEL_235;
  }
LABEL_234:
  CFRelease(a63);
  if (!a64)
  {
LABEL_62:
    if (!a65)
      goto LABEL_63;
    goto LABEL_236;
  }
LABEL_235:
  CFRelease(a64);
  if (!a65)
  {
LABEL_63:
    if (!a66)
      goto LABEL_64;
    goto LABEL_237;
  }
LABEL_236:
  CFRelease(a65);
  if (!a66)
  {
LABEL_64:
    if (!a67)
      goto LABEL_65;
    goto LABEL_238;
  }
LABEL_237:
  CFRelease(a66);
  if (!a67)
  {
LABEL_65:
    if (!a68)
      goto LABEL_66;
    goto LABEL_239;
  }
LABEL_238:
  CFRelease(a67);
  if (!a68)
  {
LABEL_66:
    if (!a69)
      goto LABEL_67;
    goto LABEL_240;
  }
LABEL_239:
  CFRelease(a68);
  if (!a69)
  {
LABEL_67:
    if (!a70)
      goto LABEL_68;
    goto LABEL_241;
  }
LABEL_240:
  CFRelease(a69);
  if (!a70)
  {
LABEL_68:
    if (!a71)
      goto LABEL_69;
    goto LABEL_242;
  }
LABEL_241:
  CFRelease(a70);
  if (!a71)
  {
LABEL_69:
    if (!a72)
      goto LABEL_70;
    goto LABEL_243;
  }
LABEL_242:
  CFRelease(a71);
  if (!a72)
  {
LABEL_70:
    if (!STACK[0x200])
      goto LABEL_71;
    goto LABEL_244;
  }
LABEL_243:
  CFRelease(a72);
  if (!STACK[0x200])
  {
LABEL_71:
    if (!STACK[0x208])
      goto LABEL_72;
    goto LABEL_245;
  }
LABEL_244:
  CFRelease((CFTypeRef)STACK[0x200]);
  if (!STACK[0x208])
  {
LABEL_72:
    if (!STACK[0x210])
      goto LABEL_73;
    goto LABEL_246;
  }
LABEL_245:
  CFRelease((CFTypeRef)STACK[0x208]);
  if (!STACK[0x210])
  {
LABEL_73:
    if (!STACK[0x218])
      goto LABEL_74;
    goto LABEL_247;
  }
LABEL_246:
  CFRelease((CFTypeRef)STACK[0x210]);
  if (!STACK[0x218])
  {
LABEL_74:
    if (!STACK[0x220])
      goto LABEL_75;
    goto LABEL_248;
  }
LABEL_247:
  CFRelease((CFTypeRef)STACK[0x218]);
  if (!STACK[0x220])
  {
LABEL_75:
    if (!STACK[0x228])
      goto LABEL_76;
    goto LABEL_249;
  }
LABEL_248:
  CFRelease((CFTypeRef)STACK[0x220]);
  if (!STACK[0x228])
  {
LABEL_76:
    if (!STACK[0x230])
      goto LABEL_77;
    goto LABEL_250;
  }
LABEL_249:
  CFRelease((CFTypeRef)STACK[0x228]);
  if (!STACK[0x230])
  {
LABEL_77:
    if (!STACK[0x238])
      goto LABEL_78;
    goto LABEL_251;
  }
LABEL_250:
  CFRelease((CFTypeRef)STACK[0x230]);
  if (!STACK[0x238])
  {
LABEL_78:
    if (!STACK[0x240])
      goto LABEL_79;
    goto LABEL_252;
  }
LABEL_251:
  CFRelease((CFTypeRef)STACK[0x238]);
  if (!STACK[0x240])
  {
LABEL_79:
    if (!STACK[0x248])
      goto LABEL_80;
    goto LABEL_253;
  }
LABEL_252:
  CFRelease((CFTypeRef)STACK[0x240]);
  if (!STACK[0x248])
  {
LABEL_80:
    if (!STACK[0x250])
      goto LABEL_81;
    goto LABEL_254;
  }
LABEL_253:
  CFRelease((CFTypeRef)STACK[0x248]);
  if (!STACK[0x250])
  {
LABEL_81:
    if (!STACK[0x258])
      goto LABEL_82;
    goto LABEL_255;
  }
LABEL_254:
  CFRelease((CFTypeRef)STACK[0x250]);
  if (!STACK[0x258])
  {
LABEL_82:
    if (!STACK[0x260])
      goto LABEL_83;
    goto LABEL_256;
  }
LABEL_255:
  CFRelease((CFTypeRef)STACK[0x258]);
  if (!STACK[0x260])
  {
LABEL_83:
    if (!STACK[0x268])
      goto LABEL_84;
    goto LABEL_257;
  }
LABEL_256:
  CFRelease((CFTypeRef)STACK[0x260]);
  if (!STACK[0x268])
  {
LABEL_84:
    if (!STACK[0x270])
      goto LABEL_85;
    goto LABEL_258;
  }
LABEL_257:
  CFRelease((CFTypeRef)STACK[0x268]);
  if (!STACK[0x270])
  {
LABEL_85:
    if (!STACK[0x278])
      goto LABEL_86;
    goto LABEL_259;
  }
LABEL_258:
  CFRelease((CFTypeRef)STACK[0x270]);
  if (!STACK[0x278])
  {
LABEL_86:
    if (!STACK[0x280])
      goto LABEL_87;
    goto LABEL_260;
  }
LABEL_259:
  CFRelease((CFTypeRef)STACK[0x278]);
  if (!STACK[0x280])
  {
LABEL_87:
    if (!STACK[0x288])
      goto LABEL_88;
    goto LABEL_261;
  }
LABEL_260:
  CFRelease((CFTypeRef)STACK[0x280]);
  if (!STACK[0x288])
  {
LABEL_88:
    if (!STACK[0x290])
      goto LABEL_89;
    goto LABEL_262;
  }
LABEL_261:
  CFRelease((CFTypeRef)STACK[0x288]);
  if (!STACK[0x290])
  {
LABEL_89:
    if (!STACK[0x298])
      goto LABEL_90;
    goto LABEL_263;
  }
LABEL_262:
  CFRelease((CFTypeRef)STACK[0x290]);
  if (!STACK[0x298])
  {
LABEL_90:
    if (!STACK[0x2A0])
      goto LABEL_91;
    goto LABEL_264;
  }
LABEL_263:
  CFRelease((CFTypeRef)STACK[0x298]);
  if (!STACK[0x2A0])
  {
LABEL_91:
    if (!STACK[0x2A8])
      goto LABEL_92;
    goto LABEL_265;
  }
LABEL_264:
  CFRelease((CFTypeRef)STACK[0x2A0]);
  if (!STACK[0x2A8])
  {
LABEL_92:
    if (!STACK[0x2B0])
      goto LABEL_93;
    goto LABEL_266;
  }
LABEL_265:
  CFRelease((CFTypeRef)STACK[0x2A8]);
  if (!STACK[0x2B0])
  {
LABEL_93:
    if (!STACK[0x2B8])
      goto LABEL_94;
    goto LABEL_267;
  }
LABEL_266:
  CFRelease((CFTypeRef)STACK[0x2B0]);
  if (!STACK[0x2B8])
  {
LABEL_94:
    if (!STACK[0x2C0])
      goto LABEL_95;
    goto LABEL_268;
  }
LABEL_267:
  CFRelease((CFTypeRef)STACK[0x2B8]);
  if (!STACK[0x2C0])
  {
LABEL_95:
    if (!STACK[0x2C8])
      goto LABEL_96;
    goto LABEL_269;
  }
LABEL_268:
  CFRelease((CFTypeRef)STACK[0x2C0]);
  if (!STACK[0x2C8])
  {
LABEL_96:
    if (!STACK[0x2D0])
      goto LABEL_97;
    goto LABEL_270;
  }
LABEL_269:
  CFRelease((CFTypeRef)STACK[0x2C8]);
  if (!STACK[0x2D0])
  {
LABEL_97:
    if (!STACK[0x2D8])
      goto LABEL_98;
    goto LABEL_271;
  }
LABEL_270:
  CFRelease((CFTypeRef)STACK[0x2D0]);
  if (!STACK[0x2D8])
  {
LABEL_98:
    if (!STACK[0x2E0])
      goto LABEL_99;
    goto LABEL_272;
  }
LABEL_271:
  CFRelease((CFTypeRef)STACK[0x2D8]);
  if (!STACK[0x2E0])
  {
LABEL_99:
    if (!STACK[0x2E8])
      goto LABEL_100;
    goto LABEL_273;
  }
LABEL_272:
  CFRelease((CFTypeRef)STACK[0x2E0]);
  if (!STACK[0x2E8])
  {
LABEL_100:
    if (!STACK[0x2F0])
      goto LABEL_101;
    goto LABEL_274;
  }
LABEL_273:
  CFRelease((CFTypeRef)STACK[0x2E8]);
  if (!STACK[0x2F0])
  {
LABEL_101:
    if (!STACK[0x2F8])
      goto LABEL_102;
    goto LABEL_275;
  }
LABEL_274:
  CFRelease((CFTypeRef)STACK[0x2F0]);
  if (!STACK[0x2F8])
  {
LABEL_102:
    if (!STACK[0x300])
      goto LABEL_103;
    goto LABEL_276;
  }
LABEL_275:
  CFRelease((CFTypeRef)STACK[0x2F8]);
  if (!STACK[0x300])
  {
LABEL_103:
    if (!STACK[0x308])
      goto LABEL_104;
    goto LABEL_277;
  }
LABEL_276:
  CFRelease((CFTypeRef)STACK[0x300]);
  if (!STACK[0x308])
  {
LABEL_104:
    if (!STACK[0x310])
      goto LABEL_105;
    goto LABEL_278;
  }
LABEL_277:
  CFRelease((CFTypeRef)STACK[0x308]);
  if (!STACK[0x310])
  {
LABEL_105:
    if (!STACK[0x318])
      goto LABEL_106;
    goto LABEL_279;
  }
LABEL_278:
  CFRelease((CFTypeRef)STACK[0x310]);
  if (!STACK[0x318])
  {
LABEL_106:
    if (!STACK[0x320])
      goto LABEL_107;
    goto LABEL_280;
  }
LABEL_279:
  CFRelease((CFTypeRef)STACK[0x318]);
  if (!STACK[0x320])
  {
LABEL_107:
    if (!STACK[0x328])
      goto LABEL_108;
    goto LABEL_281;
  }
LABEL_280:
  CFRelease((CFTypeRef)STACK[0x320]);
  if (!STACK[0x328])
  {
LABEL_108:
    if (!STACK[0x330])
      goto LABEL_109;
    goto LABEL_282;
  }
LABEL_281:
  CFRelease((CFTypeRef)STACK[0x328]);
  if (!STACK[0x330])
  {
LABEL_109:
    if (!STACK[0x338])
      goto LABEL_110;
    goto LABEL_283;
  }
LABEL_282:
  CFRelease((CFTypeRef)STACK[0x330]);
  if (!STACK[0x338])
  {
LABEL_110:
    if (!STACK[0x340])
      goto LABEL_111;
    goto LABEL_284;
  }
LABEL_283:
  CFRelease((CFTypeRef)STACK[0x338]);
  if (!STACK[0x340])
  {
LABEL_111:
    if (!STACK[0x348])
      goto LABEL_112;
    goto LABEL_285;
  }
LABEL_284:
  CFRelease((CFTypeRef)STACK[0x340]);
  if (!STACK[0x348])
  {
LABEL_112:
    if (!STACK[0x350])
      goto LABEL_113;
    goto LABEL_286;
  }
LABEL_285:
  CFRelease((CFTypeRef)STACK[0x348]);
  if (!STACK[0x350])
  {
LABEL_113:
    if (!STACK[0x358])
      goto LABEL_114;
    goto LABEL_287;
  }
LABEL_286:
  CFRelease((CFTypeRef)STACK[0x350]);
  if (!STACK[0x358])
  {
LABEL_114:
    if (!STACK[0x360])
      goto LABEL_115;
    goto LABEL_288;
  }
LABEL_287:
  CFRelease((CFTypeRef)STACK[0x358]);
  if (!STACK[0x360])
  {
LABEL_115:
    if (!STACK[0x368])
      goto LABEL_116;
    goto LABEL_289;
  }
LABEL_288:
  CFRelease((CFTypeRef)STACK[0x360]);
  if (!STACK[0x368])
  {
LABEL_116:
    if (!STACK[0x370])
      goto LABEL_117;
    goto LABEL_290;
  }
LABEL_289:
  CFRelease((CFTypeRef)STACK[0x368]);
  if (!STACK[0x370])
  {
LABEL_117:
    if (!STACK[0x378])
      goto LABEL_118;
    goto LABEL_291;
  }
LABEL_290:
  CFRelease((CFTypeRef)STACK[0x370]);
  if (!STACK[0x378])
  {
LABEL_118:
    if (!STACK[0x380])
      goto LABEL_119;
    goto LABEL_292;
  }
LABEL_291:
  CFRelease((CFTypeRef)STACK[0x378]);
  if (!STACK[0x380])
  {
LABEL_119:
    if (!STACK[0x388])
      goto LABEL_120;
    goto LABEL_293;
  }
LABEL_292:
  CFRelease((CFTypeRef)STACK[0x380]);
  if (!STACK[0x388])
  {
LABEL_120:
    if (!STACK[0x390])
      goto LABEL_121;
    goto LABEL_294;
  }
LABEL_293:
  CFRelease((CFTypeRef)STACK[0x388]);
  if (!STACK[0x390])
  {
LABEL_121:
    if (!STACK[0x398])
      goto LABEL_122;
    goto LABEL_295;
  }
LABEL_294:
  CFRelease((CFTypeRef)STACK[0x390]);
  if (!STACK[0x398])
  {
LABEL_122:
    if (!STACK[0x3A0])
      goto LABEL_123;
    goto LABEL_296;
  }
LABEL_295:
  CFRelease((CFTypeRef)STACK[0x398]);
  if (!STACK[0x3A0])
  {
LABEL_123:
    if (!STACK[0x3A8])
      goto LABEL_124;
    goto LABEL_297;
  }
LABEL_296:
  CFRelease((CFTypeRef)STACK[0x3A0]);
  if (!STACK[0x3A8])
  {
LABEL_124:
    if (!STACK[0x3B0])
      goto LABEL_125;
    goto LABEL_298;
  }
LABEL_297:
  CFRelease((CFTypeRef)STACK[0x3A8]);
  if (!STACK[0x3B0])
  {
LABEL_125:
    if (!STACK[0x3B8])
      goto LABEL_126;
    goto LABEL_299;
  }
LABEL_298:
  CFRelease((CFTypeRef)STACK[0x3B0]);
  if (!STACK[0x3B8])
  {
LABEL_126:
    if (!STACK[0x3C0])
      goto LABEL_127;
    goto LABEL_300;
  }
LABEL_299:
  CFRelease((CFTypeRef)STACK[0x3B8]);
  if (!STACK[0x3C0])
  {
LABEL_127:
    if (!STACK[0x3C8])
      goto LABEL_128;
    goto LABEL_301;
  }
LABEL_300:
  CFRelease((CFTypeRef)STACK[0x3C0]);
  if (!STACK[0x3C8])
  {
LABEL_128:
    if (!STACK[0x3D0])
      goto LABEL_129;
    goto LABEL_302;
  }
LABEL_301:
  CFRelease((CFTypeRef)STACK[0x3C8]);
  if (!STACK[0x3D0])
  {
LABEL_129:
    if (!STACK[0x3D8])
      goto LABEL_130;
    goto LABEL_303;
  }
LABEL_302:
  CFRelease((CFTypeRef)STACK[0x3D0]);
  if (!STACK[0x3D8])
  {
LABEL_130:
    if (!STACK[0x3E0])
      goto LABEL_131;
    goto LABEL_304;
  }
LABEL_303:
  CFRelease((CFTypeRef)STACK[0x3D8]);
  if (!STACK[0x3E0])
  {
LABEL_131:
    if (!STACK[0x3E8])
      goto LABEL_132;
    goto LABEL_305;
  }
LABEL_304:
  CFRelease((CFTypeRef)STACK[0x3E0]);
  if (!STACK[0x3E8])
  {
LABEL_132:
    if (!STACK[0x3F0])
      goto LABEL_133;
    goto LABEL_306;
  }
LABEL_305:
  CFRelease((CFTypeRef)STACK[0x3E8]);
  if (!STACK[0x3F0])
  {
LABEL_133:
    if (!STACK[0x3F8])
      goto LABEL_134;
    goto LABEL_307;
  }
LABEL_306:
  CFRelease((CFTypeRef)STACK[0x3F0]);
  if (!STACK[0x3F8])
  {
LABEL_134:
    if (!STACK[0x400])
      goto LABEL_135;
    goto LABEL_308;
  }
LABEL_307:
  CFRelease((CFTypeRef)STACK[0x3F8]);
  if (!STACK[0x400])
  {
LABEL_135:
    if (!STACK[0x408])
      goto LABEL_136;
    goto LABEL_309;
  }
LABEL_308:
  CFRelease((CFTypeRef)STACK[0x400]);
  if (!STACK[0x408])
  {
LABEL_136:
    if (!STACK[0x410])
      goto LABEL_137;
    goto LABEL_310;
  }
LABEL_309:
  CFRelease((CFTypeRef)STACK[0x408]);
  if (!STACK[0x410])
  {
LABEL_137:
    if (!STACK[0x418])
      goto LABEL_138;
    goto LABEL_311;
  }
LABEL_310:
  CFRelease((CFTypeRef)STACK[0x410]);
  if (!STACK[0x418])
  {
LABEL_138:
    if (!STACK[0x420])
      goto LABEL_139;
    goto LABEL_312;
  }
LABEL_311:
  CFRelease((CFTypeRef)STACK[0x418]);
  if (!STACK[0x420])
  {
LABEL_139:
    if (!STACK[0x428])
      goto LABEL_140;
    goto LABEL_313;
  }
LABEL_312:
  CFRelease((CFTypeRef)STACK[0x420]);
  if (!STACK[0x428])
  {
LABEL_140:
    if (!STACK[0x430])
      goto LABEL_141;
    goto LABEL_314;
  }
LABEL_313:
  CFRelease((CFTypeRef)STACK[0x428]);
  if (!STACK[0x430])
  {
LABEL_141:
    if (!STACK[0x438])
      goto LABEL_142;
    goto LABEL_315;
  }
LABEL_314:
  CFRelease((CFTypeRef)STACK[0x430]);
  if (!STACK[0x438])
  {
LABEL_142:
    if (!STACK[0x440])
      goto LABEL_143;
    goto LABEL_316;
  }
LABEL_315:
  CFRelease((CFTypeRef)STACK[0x438]);
  if (!STACK[0x440])
  {
LABEL_143:
    if (!STACK[0x448])
      goto LABEL_144;
    goto LABEL_317;
  }
LABEL_316:
  CFRelease((CFTypeRef)STACK[0x440]);
  if (!STACK[0x448])
  {
LABEL_144:
    if (!STACK[0x450])
      goto LABEL_145;
    goto LABEL_318;
  }
LABEL_317:
  CFRelease((CFTypeRef)STACK[0x448]);
  if (!STACK[0x450])
  {
LABEL_145:
    if (!STACK[0x458])
      goto LABEL_146;
    goto LABEL_319;
  }
LABEL_318:
  CFRelease((CFTypeRef)STACK[0x450]);
  if (!STACK[0x458])
  {
LABEL_146:
    if (!STACK[0x460])
      goto LABEL_147;
    goto LABEL_320;
  }
LABEL_319:
  CFRelease((CFTypeRef)STACK[0x458]);
  if (!STACK[0x460])
  {
LABEL_147:
    if (!STACK[0x468])
      goto LABEL_148;
    goto LABEL_321;
  }
LABEL_320:
  CFRelease((CFTypeRef)STACK[0x460]);
  if (!STACK[0x468])
  {
LABEL_148:
    if (!STACK[0x470])
      goto LABEL_149;
    goto LABEL_322;
  }
LABEL_321:
  CFRelease((CFTypeRef)STACK[0x468]);
  if (!STACK[0x470])
  {
LABEL_149:
    if (!STACK[0x478])
      goto LABEL_150;
    goto LABEL_323;
  }
LABEL_322:
  CFRelease((CFTypeRef)STACK[0x470]);
  if (!STACK[0x478])
  {
LABEL_150:
    if (!STACK[0x480])
      goto LABEL_151;
    goto LABEL_324;
  }
LABEL_323:
  CFRelease((CFTypeRef)STACK[0x478]);
  if (!STACK[0x480])
  {
LABEL_151:
    if (!STACK[0x488])
      goto LABEL_152;
    goto LABEL_325;
  }
LABEL_324:
  CFRelease((CFTypeRef)STACK[0x480]);
  if (!STACK[0x488])
  {
LABEL_152:
    if (!STACK[0x490])
      goto LABEL_153;
    goto LABEL_326;
  }
LABEL_325:
  CFRelease((CFTypeRef)STACK[0x488]);
  if (!STACK[0x490])
  {
LABEL_153:
    if (!STACK[0x498])
      goto LABEL_154;
    goto LABEL_327;
  }
LABEL_326:
  CFRelease((CFTypeRef)STACK[0x490]);
  if (!STACK[0x498])
  {
LABEL_154:
    if (!STACK[0x4A0])
      goto LABEL_155;
    goto LABEL_328;
  }
LABEL_327:
  CFRelease((CFTypeRef)STACK[0x498]);
  if (!STACK[0x4A0])
  {
LABEL_155:
    if (!STACK[0x4A8])
      goto LABEL_156;
    goto LABEL_329;
  }
LABEL_328:
  CFRelease((CFTypeRef)STACK[0x4A0]);
  if (!STACK[0x4A8])
  {
LABEL_156:
    if (!STACK[0x4B0])
      goto LABEL_157;
    goto LABEL_330;
  }
LABEL_329:
  CFRelease((CFTypeRef)STACK[0x4A8]);
  if (!STACK[0x4B0])
  {
LABEL_157:
    if (!STACK[0x4B8])
      goto LABEL_158;
    goto LABEL_331;
  }
LABEL_330:
  CFRelease((CFTypeRef)STACK[0x4B0]);
  if (!STACK[0x4B8])
  {
LABEL_158:
    if (!STACK[0x4C0])
      goto LABEL_159;
    goto LABEL_332;
  }
LABEL_331:
  CFRelease((CFTypeRef)STACK[0x4B8]);
  if (!STACK[0x4C0])
  {
LABEL_159:
    if (!STACK[0x4C8])
      goto LABEL_160;
    goto LABEL_333;
  }
LABEL_332:
  CFRelease((CFTypeRef)STACK[0x4C0]);
  if (!STACK[0x4C8])
  {
LABEL_160:
    if (!STACK[0x4D0])
      goto LABEL_161;
    goto LABEL_334;
  }
LABEL_333:
  CFRelease((CFTypeRef)STACK[0x4C8]);
  if (!STACK[0x4D0])
  {
LABEL_161:
    if (!STACK[0x4D8])
      goto LABEL_162;
    goto LABEL_335;
  }
LABEL_334:
  CFRelease((CFTypeRef)STACK[0x4D0]);
  if (!STACK[0x4D8])
  {
LABEL_162:
    if (!STACK[0x4E0])
      goto LABEL_163;
    goto LABEL_336;
  }
LABEL_335:
  CFRelease((CFTypeRef)STACK[0x4D8]);
  if (!STACK[0x4E0])
  {
LABEL_163:
    if (!STACK[0x4E8])
      goto LABEL_164;
    goto LABEL_337;
  }
LABEL_336:
  CFRelease((CFTypeRef)STACK[0x4E0]);
  if (!STACK[0x4E8])
  {
LABEL_164:
    if (!STACK[0x4F0])
      goto LABEL_165;
    goto LABEL_338;
  }
LABEL_337:
  CFRelease((CFTypeRef)STACK[0x4E8]);
  if (!STACK[0x4F0])
  {
LABEL_165:
    if (!STACK[0x4F8])
      goto LABEL_166;
    goto LABEL_339;
  }
LABEL_338:
  CFRelease((CFTypeRef)STACK[0x4F0]);
  if (!STACK[0x4F8])
  {
LABEL_166:
    if (!STACK[0x500])
      goto LABEL_167;
    goto LABEL_340;
  }
LABEL_339:
  CFRelease((CFTypeRef)STACK[0x4F8]);
  if (!STACK[0x500])
  {
LABEL_167:
    if (!STACK[0x508])
      goto LABEL_168;
    goto LABEL_341;
  }
LABEL_340:
  CFRelease((CFTypeRef)STACK[0x500]);
  if (!STACK[0x508])
  {
LABEL_168:
    if (!STACK[0x510])
      goto LABEL_169;
    goto LABEL_342;
  }
LABEL_341:
  CFRelease((CFTypeRef)STACK[0x508]);
  if (!STACK[0x510])
  {
LABEL_169:
    if (!STACK[0x518])
      goto LABEL_170;
    goto LABEL_343;
  }
LABEL_342:
  CFRelease((CFTypeRef)STACK[0x510]);
  if (!STACK[0x518])
  {
LABEL_170:
    if (!STACK[0x520])
      goto LABEL_171;
    goto LABEL_344;
  }
LABEL_343:
  CFRelease((CFTypeRef)STACK[0x518]);
  if (!STACK[0x520])
  {
LABEL_171:
    if (!STACK[0x528])
      goto LABEL_172;
    goto LABEL_345;
  }
LABEL_344:
  CFRelease((CFTypeRef)STACK[0x520]);
  if (!STACK[0x528])
  {
LABEL_172:
    if (!STACK[0x530])
      goto LABEL_173;
    goto LABEL_346;
  }
LABEL_345:
  CFRelease((CFTypeRef)STACK[0x528]);
  if (!STACK[0x530])
  {
LABEL_173:
    if (!a11)
      goto LABEL_174;
    goto LABEL_347;
  }
LABEL_346:
  CFRelease((CFTypeRef)STACK[0x530]);
  if (!a11)
LABEL_174:
    _Unwind_Resume(a1);
LABEL_347:
  CFRelease(a11);
  _Unwind_Resume(a1);
}

void sub_1D80CEACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    JUMPOUT(0x1D80CE08CLL);
  JUMPOUT(0x1D80CDA74);
}

void sub_1D80CEADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    JUMPOUT(0x1D80CE09CLL);
  JUMPOUT(0x1D80CDA7CLL);
}

void sub_1D80CEAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    JUMPOUT(0x1D80CE0ACLL);
  JUMPOUT(0x1D80CDA84);
}

void sub_1D80CEAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    JUMPOUT(0x1D80CE0BCLL);
  JUMPOUT(0x1D80CDA8CLL);
}

void sub_1D80CEB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    JUMPOUT(0x1D80CE0CCLL);
  JUMPOUT(0x1D80CDA94);
}

void sub_1D80CEB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    JUMPOUT(0x1D80CE0DCLL);
  JUMPOUT(0x1D80CDA9CLL);
}

void sub_1D80CEB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    JUMPOUT(0x1D80CE0ECLL);
  JUMPOUT(0x1D80CDAA4);
}

void sub_1D80CEB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    JUMPOUT(0x1D80CE0FCLL);
  JUMPOUT(0x1D80CDAACLL);
}

void sub_1D80CEB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1D80CE10CLL);
  JUMPOUT(0x1D80CDAB4);
}

void sub_1D80CEB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    JUMPOUT(0x1D80CE11CLL);
  JUMPOUT(0x1D80CDABCLL);
}

void sub_1D80CEB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23)
    JUMPOUT(0x1D80CE12CLL);
  JUMPOUT(0x1D80CDAC4);
}

void sub_1D80CEB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1D80CE13CLL);
  JUMPOUT(0x1D80CDACCLL);
}

void sub_1D80CEB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25)
    JUMPOUT(0x1D80CE14CLL);
  JUMPOUT(0x1D80CDAD4);
}

void sub_1D80CEB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26)
    JUMPOUT(0x1D80CE15CLL);
  JUMPOUT(0x1D80CDADCLL);
}

void sub_1D80CEBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27)
    JUMPOUT(0x1D80CE16CLL);
  JUMPOUT(0x1D80CDAE4);
}

void sub_1D80CEBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a28)
    JUMPOUT(0x1D80CE17CLL);
  JUMPOUT(0x1D80CDAECLL);
}

void sub_1D80CEBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a29)
    JUMPOUT(0x1D80CE18CLL);
  JUMPOUT(0x1D80CDAF4);
}

void sub_1D80CEBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30)
    JUMPOUT(0x1D80CE19CLL);
  JUMPOUT(0x1D80CDAFCLL);
}

void sub_1D80CEBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31)
    JUMPOUT(0x1D80CE1ACLL);
  JUMPOUT(0x1D80CDB04);
}

void sub_1D80CEBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32)
    JUMPOUT(0x1D80CE1BCLL);
  JUMPOUT(0x1D80CDB0CLL);
}

void sub_1D80CEC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a33)
    JUMPOUT(0x1D80CE1CCLL);
  JUMPOUT(0x1D80CDB14);
}

void sub_1D80CEC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a34)
    JUMPOUT(0x1D80CE1DCLL);
  JUMPOUT(0x1D80CDB1CLL);
}

void sub_1D80CEC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35)
    JUMPOUT(0x1D80CE1ECLL);
  JUMPOUT(0x1D80CDB24);
}

void sub_1D80CEC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36)
    JUMPOUT(0x1D80CE1FCLL);
  JUMPOUT(0x1D80CDB2CLL);
}

void sub_1D80CEC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a37)
    JUMPOUT(0x1D80CE20CLL);
  JUMPOUT(0x1D80CDB34);
}

void sub_1D80CEC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a38)
    JUMPOUT(0x1D80CE21CLL);
  JUMPOUT(0x1D80CDB3CLL);
}

void sub_1D80CEC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a39)
    JUMPOUT(0x1D80CE22CLL);
  JUMPOUT(0x1D80CDB44);
}

void sub_1D80CEC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40)
    JUMPOUT(0x1D80CE23CLL);
  JUMPOUT(0x1D80CDB4CLL);
}

void sub_1D80CEC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a41)
    JUMPOUT(0x1D80CE24CLL);
  JUMPOUT(0x1D80CDB54);
}

void sub_1D80CEC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a42)
    JUMPOUT(0x1D80CE25CLL);
  JUMPOUT(0x1D80CDB5CLL);
}

void sub_1D80CECAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43)
    JUMPOUT(0x1D80CE26CLL);
  JUMPOUT(0x1D80CDB64);
}

void sub_1D80CECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a44)
    JUMPOUT(0x1D80CE27CLL);
  JUMPOUT(0x1D80CDB6CLL);
}

void sub_1D80CECCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a45)
    JUMPOUT(0x1D80CE28CLL);
  JUMPOUT(0x1D80CDB74);
}

void sub_1D80CECDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a46)
    JUMPOUT(0x1D80CE29CLL);
  JUMPOUT(0x1D80CDB7CLL);
}

void sub_1D80CECEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47)
    JUMPOUT(0x1D80CE2ACLL);
  JUMPOUT(0x1D80CDB84);
}

void sub_1D80CECFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a48)
    JUMPOUT(0x1D80CE2BCLL);
  JUMPOUT(0x1D80CDB8CLL);
}

void sub_1D80CED0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a49)
    JUMPOUT(0x1D80CE2CCLL);
  JUMPOUT(0x1D80CDB94);
}

void sub_1D80CED1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a50)
    JUMPOUT(0x1D80CE2DCLL);
  JUMPOUT(0x1D80CDB9CLL);
}

void sub_1D80CED2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51)
    JUMPOUT(0x1D80CE2ECLL);
  JUMPOUT(0x1D80CDBA4);
}

void sub_1D80CED3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a52)
    JUMPOUT(0x1D80CE2FCLL);
  JUMPOUT(0x1D80CDBACLL);
}

void sub_1D80CED4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a53)
    JUMPOUT(0x1D80CE30CLL);
  JUMPOUT(0x1D80CDBB4);
}

void sub_1D80CED5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a54)
    JUMPOUT(0x1D80CE31CLL);
  JUMPOUT(0x1D80CDBBCLL);
}

void sub_1D80CED6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a55)
    JUMPOUT(0x1D80CE32CLL);
  JUMPOUT(0x1D80CDBC4);
}

void sub_1D80CED7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a56)
    JUMPOUT(0x1D80CE33CLL);
  JUMPOUT(0x1D80CDBCCLL);
}

void sub_1D80CED8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a57)
    JUMPOUT(0x1D80CE34CLL);
  JUMPOUT(0x1D80CDBD4);
}

void sub_1D80CED9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (a58)
    JUMPOUT(0x1D80CE35CLL);
  JUMPOUT(0x1D80CDBDCLL);
}

void sub_1D80CEDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a59)
    JUMPOUT(0x1D80CE36CLL);
  JUMPOUT(0x1D80CDBE4);
}

void sub_1D80CEDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a60)
    JUMPOUT(0x1D80CE37CLL);
  JUMPOUT(0x1D80CDBECLL);
}

void sub_1D80CEDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a61)
    JUMPOUT(0x1D80CE38CLL);
  JUMPOUT(0x1D80CDBF4);
}

void sub_1D80CEDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a62)
    JUMPOUT(0x1D80CE39CLL);
  JUMPOUT(0x1D80CDBFCLL);
}

void sub_1D80CEDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a63)
    JUMPOUT(0x1D80CE3ACLL);
  JUMPOUT(0x1D80CDC04);
}

void sub_1D80CEDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  if (a64)
    JUMPOUT(0x1D80CE3BCLL);
  JUMPOUT(0x1D80CDC0CLL);
}

void sub_1D80CEE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  if (a65)
    JUMPOUT(0x1D80CE3CCLL);
  JUMPOUT(0x1D80CDC14);
}

void sub_1D80CEE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;

  if (a66)
    JUMPOUT(0x1D80CE3DCLL);
  JUMPOUT(0x1D80CDC1CLL);
}

void sub_1D80CEE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;

  if (a67)
    JUMPOUT(0x1D80CE3ECLL);
  JUMPOUT(0x1D80CDC24);
}

void sub_1D80CEE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  if (a68)
    JUMPOUT(0x1D80CE3FCLL);
  JUMPOUT(0x1D80CDC2CLL);
}

void sub_1D80CEE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (a69)
    JUMPOUT(0x1D80CE40CLL);
  JUMPOUT(0x1D80CDC34);
}

void sub_1D80CEE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;

  if (a70)
    JUMPOUT(0x1D80CE41CLL);
  JUMPOUT(0x1D80CDC3CLL);
}

void sub_1D80CEE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a71)
    JUMPOUT(0x1D80CE42CLL);
  JUMPOUT(0x1D80CDC44);
}

void sub_1D80CEE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  if (a72)
    JUMPOUT(0x1D80CE43CLL);
  JUMPOUT(0x1D80CDC4CLL);
}

void sub_1D80CEE8C()
{
  if (STACK[0x200])
    JUMPOUT(0x1D80CE44CLL);
  JUMPOUT(0x1D80CDC54);
}

void sub_1D80CEE9C()
{
  if (STACK[0x208])
    JUMPOUT(0x1D80CE45CLL);
  JUMPOUT(0x1D80CDC5CLL);
}

void sub_1D80CEEAC()
{
  if (STACK[0x210])
    JUMPOUT(0x1D80CE46CLL);
  JUMPOUT(0x1D80CDC64);
}

void sub_1D80CEEBC()
{
  if (STACK[0x218])
    JUMPOUT(0x1D80CE47CLL);
  JUMPOUT(0x1D80CDC6CLL);
}

void sub_1D80CEECC()
{
  if (STACK[0x220])
    JUMPOUT(0x1D80CE48CLL);
  JUMPOUT(0x1D80CDC74);
}

void sub_1D80CEEDC()
{
  if (STACK[0x228])
    JUMPOUT(0x1D80CE49CLL);
  JUMPOUT(0x1D80CDC7CLL);
}

void sub_1D80CEEEC()
{
  if (STACK[0x230])
    JUMPOUT(0x1D80CE4ACLL);
  JUMPOUT(0x1D80CDC84);
}

void sub_1D80CEEFC()
{
  if (STACK[0x238])
    JUMPOUT(0x1D80CE4BCLL);
  JUMPOUT(0x1D80CDC8CLL);
}

void sub_1D80CEF0C()
{
  if (STACK[0x248])
    JUMPOUT(0x1D80CE4DCLL);
  JUMPOUT(0x1D80CDC9CLL);
}

void sub_1D80CEF1C()
{
  if (STACK[0x250])
    JUMPOUT(0x1D80CE4ECLL);
  JUMPOUT(0x1D80CDCA4);
}

void sub_1D80CEF2C()
{
  if (STACK[0x258])
    JUMPOUT(0x1D80CE4FCLL);
  JUMPOUT(0x1D80CDCACLL);
}

void sub_1D80CEF3C()
{
  if (STACK[0x260])
    JUMPOUT(0x1D80CE50CLL);
  JUMPOUT(0x1D80CDCB4);
}

void sub_1D80CEF4C()
{
  if (STACK[0x268])
    JUMPOUT(0x1D80CE51CLL);
  JUMPOUT(0x1D80CDCBCLL);
}

void sub_1D80CEF5C()
{
  if (STACK[0x270])
    JUMPOUT(0x1D80CE52CLL);
  JUMPOUT(0x1D80CDCC4);
}

void sub_1D80CEF6C()
{
  if (STACK[0x278])
    JUMPOUT(0x1D80CE53CLL);
  JUMPOUT(0x1D80CDCCCLL);
}

void sub_1D80CEF7C()
{
  if (STACK[0x288])
    JUMPOUT(0x1D80CE55CLL);
  JUMPOUT(0x1D80CDCDCLL);
}

void sub_1D80CEF8C()
{
  if (STACK[0x290])
    JUMPOUT(0x1D80CE56CLL);
  JUMPOUT(0x1D80CDCE4);
}

void sub_1D80CEF9C()
{
  if (STACK[0x298])
    JUMPOUT(0x1D80CE57CLL);
  JUMPOUT(0x1D80CDCECLL);
}

void sub_1D80CEFAC()
{
  if (STACK[0x2A0])
    JUMPOUT(0x1D80CE58CLL);
  JUMPOUT(0x1D80CDCF4);
}

void sub_1D80CEFBC()
{
  if (STACK[0x2A8])
    JUMPOUT(0x1D80CE59CLL);
  JUMPOUT(0x1D80CDCFCLL);
}

void sub_1D80CEFCC()
{
  if (STACK[0x2B0])
    JUMPOUT(0x1D80CE5ACLL);
  JUMPOUT(0x1D80CDD04);
}

void sub_1D80CEFDC()
{
  if (STACK[0x2B8])
    JUMPOUT(0x1D80CE5BCLL);
  JUMPOUT(0x1D80CDD0CLL);
}

void sub_1D80CEFEC()
{
  if (STACK[0x2C0])
    JUMPOUT(0x1D80CE5CCLL);
  JUMPOUT(0x1D80CDD14);
}

void sub_1D80CEFFC()
{
  if (STACK[0x2C8])
    JUMPOUT(0x1D80CE5DCLL);
  JUMPOUT(0x1D80CDD1CLL);
}

void sub_1D80CF00C()
{
  if (STACK[0x2D0])
    JUMPOUT(0x1D80CE5ECLL);
  JUMPOUT(0x1D80CDD24);
}

void sub_1D80CF01C()
{
  if (STACK[0x2D8])
    JUMPOUT(0x1D80CE5FCLL);
  JUMPOUT(0x1D80CDD2CLL);
}

void sub_1D80CF02C()
{
  if (STACK[0x2E0])
    JUMPOUT(0x1D80CE60CLL);
  JUMPOUT(0x1D80CDD34);
}

void sub_1D80CF03C()
{
  if (STACK[0x2E8])
    JUMPOUT(0x1D80CE61CLL);
  JUMPOUT(0x1D80CDD3CLL);
}

void sub_1D80CF04C()
{
  if (STACK[0x2F0])
    JUMPOUT(0x1D80CE62CLL);
  JUMPOUT(0x1D80CDD44);
}

void sub_1D80CF05C()
{
  if (STACK[0x2F8])
    JUMPOUT(0x1D80CE63CLL);
  JUMPOUT(0x1D80CDD4CLL);
}

void sub_1D80CF06C()
{
  if (STACK[0x300])
    JUMPOUT(0x1D80CE64CLL);
  JUMPOUT(0x1D80CDD54);
}

void sub_1D80CF07C()
{
  if (STACK[0x308])
    JUMPOUT(0x1D80CE65CLL);
  JUMPOUT(0x1D80CDD5CLL);
}

void sub_1D80CF08C()
{
  if (STACK[0x310])
    JUMPOUT(0x1D80CE66CLL);
  JUMPOUT(0x1D80CDD64);
}

void sub_1D80CF09C()
{
  if (STACK[0x318])
    JUMPOUT(0x1D80CE67CLL);
  JUMPOUT(0x1D80CDD6CLL);
}

void sub_1D80CF0AC()
{
  if (STACK[0x320])
    JUMPOUT(0x1D80CE68CLL);
  JUMPOUT(0x1D80CDD74);
}

void sub_1D80CF0BC()
{
  if (STACK[0x328])
    JUMPOUT(0x1D80CE69CLL);
  JUMPOUT(0x1D80CDD7CLL);
}

void sub_1D80CF0CC()
{
  if (STACK[0x330])
    JUMPOUT(0x1D80CE6ACLL);
  JUMPOUT(0x1D80CDD84);
}

void sub_1D80CF0DC()
{
  if (STACK[0x338])
    JUMPOUT(0x1D80CE6BCLL);
  JUMPOUT(0x1D80CDD8CLL);
}

void sub_1D80CF0EC()
{
  if (STACK[0x340])
    JUMPOUT(0x1D80CE6CCLL);
  JUMPOUT(0x1D80CDD94);
}

void sub_1D80CF0FC()
{
  if (STACK[0x348])
    JUMPOUT(0x1D80CE6DCLL);
  JUMPOUT(0x1D80CDD9CLL);
}

void sub_1D80CF10C()
{
  if (STACK[0x350])
    JUMPOUT(0x1D80CE6ECLL);
  JUMPOUT(0x1D80CDDA4);
}

void sub_1D80CF11C()
{
  if (STACK[0x358])
    JUMPOUT(0x1D80CE6FCLL);
  JUMPOUT(0x1D80CDDACLL);
}

void sub_1D80CF12C()
{
  if (STACK[0x360])
    JUMPOUT(0x1D80CE70CLL);
  JUMPOUT(0x1D80CDDB4);
}

void sub_1D80CF13C()
{
  if (STACK[0x368])
    JUMPOUT(0x1D80CE71CLL);
  JUMPOUT(0x1D80CDDBCLL);
}

void sub_1D80CF14C()
{
  if (STACK[0x370])
    JUMPOUT(0x1D80CE72CLL);
  JUMPOUT(0x1D80CDDC4);
}

void sub_1D80CF15C()
{
  if (STACK[0x378])
    JUMPOUT(0x1D80CE73CLL);
  JUMPOUT(0x1D80CDDCCLL);
}

void sub_1D80CF16C()
{
  if (STACK[0x380])
    JUMPOUT(0x1D80CE74CLL);
  JUMPOUT(0x1D80CDDD4);
}

void sub_1D80CF17C()
{
  if (STACK[0x388])
    JUMPOUT(0x1D80CE75CLL);
  JUMPOUT(0x1D80CDDDCLL);
}

void sub_1D80CF18C()
{
  if (STACK[0x390])
    JUMPOUT(0x1D80CE76CLL);
  JUMPOUT(0x1D80CDDE4);
}

void sub_1D80CF19C()
{
  if (STACK[0x398])
    JUMPOUT(0x1D80CE77CLL);
  JUMPOUT(0x1D80CDDECLL);
}

void sub_1D80CF1AC()
{
  if (STACK[0x3A0])
    JUMPOUT(0x1D80CE78CLL);
  JUMPOUT(0x1D80CDDF4);
}

void sub_1D80CF1BC()
{
  if (STACK[0x3A8])
    JUMPOUT(0x1D80CE79CLL);
  JUMPOUT(0x1D80CDDFCLL);
}

void sub_1D80CF1CC()
{
  if (STACK[0x3B0])
    JUMPOUT(0x1D80CE7ACLL);
  JUMPOUT(0x1D80CDE04);
}

void sub_1D80CF1DC()
{
  if (STACK[0x3B8])
    JUMPOUT(0x1D80CE7BCLL);
  JUMPOUT(0x1D80CDE0CLL);
}

void sub_1D80CF1EC()
{
  if (STACK[0x3C0])
    JUMPOUT(0x1D80CE7CCLL);
  JUMPOUT(0x1D80CDE14);
}

void sub_1D80CF1FC()
{
  if (STACK[0x3C8])
    JUMPOUT(0x1D80CE7DCLL);
  JUMPOUT(0x1D80CDE1CLL);
}

void sub_1D80CF20C()
{
  if (STACK[0x3D0])
    JUMPOUT(0x1D80CE7ECLL);
  JUMPOUT(0x1D80CDE24);
}

void sub_1D80CF21C()
{
  if (STACK[0x3D8])
    JUMPOUT(0x1D80CE7FCLL);
  JUMPOUT(0x1D80CDE2CLL);
}

void sub_1D80CF22C()
{
  if (STACK[0x3E0])
    JUMPOUT(0x1D80CE80CLL);
  JUMPOUT(0x1D80CDE34);
}

void sub_1D80CF23C()
{
  if (STACK[0x3E8])
    JUMPOUT(0x1D80CE81CLL);
  JUMPOUT(0x1D80CDE3CLL);
}

void sub_1D80CF24C()
{
  if (STACK[0x3F0])
    JUMPOUT(0x1D80CE82CLL);
  JUMPOUT(0x1D80CDE44);
}

void sub_1D80CF25C()
{
  if (STACK[0x3F8])
    JUMPOUT(0x1D80CE83CLL);
  JUMPOUT(0x1D80CDE4CLL);
}

void sub_1D80CF26C()
{
  if (STACK[0x400])
    JUMPOUT(0x1D80CE84CLL);
  JUMPOUT(0x1D80CDE54);
}

void sub_1D80CF27C()
{
  if (STACK[0x408])
    JUMPOUT(0x1D80CE85CLL);
  JUMPOUT(0x1D80CDE5CLL);
}

void sub_1D80CF28C()
{
  if (STACK[0x410])
    JUMPOUT(0x1D80CE86CLL);
  JUMPOUT(0x1D80CDE64);
}

void sub_1D80CF29C()
{
  if (STACK[0x418])
    JUMPOUT(0x1D80CE87CLL);
  JUMPOUT(0x1D80CDE6CLL);
}

void sub_1D80CF2AC()
{
  if (STACK[0x420])
    JUMPOUT(0x1D80CE88CLL);
  JUMPOUT(0x1D80CDE74);
}

void sub_1D80CF2BC()
{
  if (STACK[0x428])
    JUMPOUT(0x1D80CE89CLL);
  JUMPOUT(0x1D80CDE7CLL);
}

void sub_1D80CF2CC()
{
  if (STACK[0x430])
    JUMPOUT(0x1D80CE8ACLL);
  JUMPOUT(0x1D80CDE84);
}

void sub_1D80CF2DC()
{
  if (STACK[0x438])
    JUMPOUT(0x1D80CE8BCLL);
  JUMPOUT(0x1D80CDE8CLL);
}

void sub_1D80CF2EC()
{
  if (STACK[0x440])
    JUMPOUT(0x1D80CE8CCLL);
  JUMPOUT(0x1D80CDE94);
}

void sub_1D80CF2FC()
{
  if (STACK[0x448])
    JUMPOUT(0x1D80CE8DCLL);
  JUMPOUT(0x1D80CDE9CLL);
}

void sub_1D80CF30C()
{
  if (STACK[0x450])
    JUMPOUT(0x1D80CE8ECLL);
  JUMPOUT(0x1D80CDEA4);
}

void sub_1D80CF31C()
{
  if (STACK[0x458])
    JUMPOUT(0x1D80CE8FCLL);
  JUMPOUT(0x1D80CDEACLL);
}

void sub_1D80CF32C()
{
  if (STACK[0x460])
    JUMPOUT(0x1D80CE90CLL);
  JUMPOUT(0x1D80CDEB4);
}

void sub_1D80CF33C()
{
  if (STACK[0x468])
    JUMPOUT(0x1D80CE91CLL);
  JUMPOUT(0x1D80CDEBCLL);
}

void sub_1D80CF34C()
{
  if (STACK[0x470])
    JUMPOUT(0x1D80CE92CLL);
  JUMPOUT(0x1D80CDEC4);
}

void sub_1D80CF35C()
{
  if (STACK[0x478])
    JUMPOUT(0x1D80CE93CLL);
  JUMPOUT(0x1D80CDECCLL);
}

void sub_1D80CF36C()
{
  if (STACK[0x480])
    JUMPOUT(0x1D80CE94CLL);
  JUMPOUT(0x1D80CDED4);
}

void sub_1D80CF37C()
{
  if (STACK[0x488])
    JUMPOUT(0x1D80CE95CLL);
  JUMPOUT(0x1D80CDEDCLL);
}

void sub_1D80CF38C()
{
  if (STACK[0x490])
    JUMPOUT(0x1D80CE96CLL);
  JUMPOUT(0x1D80CDEE4);
}

void sub_1D80CF39C()
{
  if (STACK[0x498])
    JUMPOUT(0x1D80CE97CLL);
  JUMPOUT(0x1D80CDEECLL);
}

void sub_1D80CF3AC()
{
  if (STACK[0x4A0])
    JUMPOUT(0x1D80CE98CLL);
  JUMPOUT(0x1D80CDEF4);
}

void sub_1D80CF3BC()
{
  if (STACK[0x4A8])
    JUMPOUT(0x1D80CE99CLL);
  JUMPOUT(0x1D80CDEFCLL);
}

void sub_1D80CF3CC()
{
  if (STACK[0x4B0])
    JUMPOUT(0x1D80CE9ACLL);
  JUMPOUT(0x1D80CDF04);
}

void sub_1D80CF3DC()
{
  if (STACK[0x4B8])
    JUMPOUT(0x1D80CE9BCLL);
  JUMPOUT(0x1D80CDF0CLL);
}

void sub_1D80CF3EC()
{
  if (STACK[0x4C0])
    JUMPOUT(0x1D80CE9CCLL);
  JUMPOUT(0x1D80CDF14);
}

void sub_1D80CF3FC()
{
  if (STACK[0x4C8])
    JUMPOUT(0x1D80CE9DCLL);
  JUMPOUT(0x1D80CDF1CLL);
}

void sub_1D80CF40C()
{
  if (STACK[0x4D0])
    JUMPOUT(0x1D80CE9ECLL);
  JUMPOUT(0x1D80CDF24);
}

void sub_1D80CF41C()
{
  if (STACK[0x4D8])
    JUMPOUT(0x1D80CE9FCLL);
  JUMPOUT(0x1D80CDF2CLL);
}

void sub_1D80CF42C()
{
  if (STACK[0x4E0])
    JUMPOUT(0x1D80CEA0CLL);
  JUMPOUT(0x1D80CDF34);
}

void sub_1D80CF43C()
{
  if (STACK[0x4E8])
    JUMPOUT(0x1D80CEA1CLL);
  JUMPOUT(0x1D80CDF3CLL);
}

void sub_1D80CF44C()
{
  if (STACK[0x4F0])
    JUMPOUT(0x1D80CEA2CLL);
  JUMPOUT(0x1D80CDF44);
}

void sub_1D80CF45C()
{
  if (STACK[0x4F8])
    JUMPOUT(0x1D80CEA3CLL);
  JUMPOUT(0x1D80CDF4CLL);
}

void sub_1D80CF46C()
{
  if (STACK[0x500])
    JUMPOUT(0x1D80CEA4CLL);
  JUMPOUT(0x1D80CDF54);
}

void sub_1D80CF47C()
{
  if (STACK[0x508])
    JUMPOUT(0x1D80CEA5CLL);
  JUMPOUT(0x1D80CDF5CLL);
}

void sub_1D80CF48C()
{
  if (STACK[0x510])
    JUMPOUT(0x1D80CEA6CLL);
  JUMPOUT(0x1D80CDF64);
}

void sub_1D80CF49C()
{
  if (STACK[0x518])
    JUMPOUT(0x1D80CEA7CLL);
  JUMPOUT(0x1D80CDF6CLL);
}

void sub_1D80CF4AC()
{
  if (STACK[0x520])
    JUMPOUT(0x1D80CEA8CLL);
  JUMPOUT(0x1D80CDF74);
}

void sub_1D80CF4BC()
{
  if (STACK[0x528])
    JUMPOUT(0x1D80CEA9CLL);
  JUMPOUT(0x1D80CDF7CLL);
}

void sub_1D80CF4CC()
{
  if (STACK[0x530])
    JUMPOUT(0x1D80CEAACLL);
  JUMPOUT(0x1D80CDF84);
}

void sub_1D80CF4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    JUMPOUT(0x1D80CEABCLL);
  JUMPOUT(0x1D80CDF8CLL);
}

void sub_1D80D0E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef a22,CFTypeRef a23,CFTypeRef a24,CFTypeRef a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,CFTypeRef a32,CFTypeRef a33,CFTypeRef a34,CFTypeRef a35,CFTypeRef a36,CFTypeRef a37,CFTypeRef a38,CFTypeRef a39,CFTypeRef a40,CFTypeRef a41,CFTypeRef a42,CFTypeRef a43,CFTypeRef a44,CFTypeRef a45,CFTypeRef a46,CFTypeRef a47,CFTypeRef a48,CFTypeRef a49,CFTypeRef a50,CFTypeRef a51,CFTypeRef a52,CFTypeRef a53,CFTypeRef a54,CFTypeRef a55,CFTypeRef a56,CFTypeRef a57,CFTypeRef a58,CFTypeRef a59,CFTypeRef a60,CFTypeRef a61,CFTypeRef a62,CFTypeRef a63)
{
  CFTypeRef a64;
  CFTypeRef a65;
  CFTypeRef a66;
  CFTypeRef a67;
  CFTypeRef a68;
  CFTypeRef a69;
  CFTypeRef a70;
  CFTypeRef a71;
  CFTypeRef a72;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;

  if (v76)
  {
    CFRelease(v76);
    if (!v75)
    {
LABEL_3:
      if (!v74)
        goto LABEL_4;
      goto LABEL_79;
    }
  }
  else if (!v75)
  {
    goto LABEL_3;
  }
  CFRelease(v75);
  if (!v74)
  {
LABEL_4:
    if (!v73)
      goto LABEL_5;
    goto LABEL_80;
  }
LABEL_79:
  CFRelease(v74);
  if (!v73)
  {
LABEL_5:
    if (!v72)
      goto LABEL_6;
    goto LABEL_81;
  }
LABEL_80:
  CFRelease(v73);
  if (!v72)
  {
LABEL_6:
    if (!v79)
      goto LABEL_7;
    goto LABEL_82;
  }
LABEL_81:
  CFRelease(v72);
  if (!v79)
  {
LABEL_7:
    if (!v78)
      goto LABEL_8;
    goto LABEL_83;
  }
LABEL_82:
  CFRelease(v79);
  if (!v78)
  {
LABEL_8:
    if (!v77)
      goto LABEL_9;
    goto LABEL_84;
  }
LABEL_83:
  CFRelease(v78);
  if (!v77)
  {
LABEL_9:
    if (!cf)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  CFRelease(v77);
  if (!cf)
  {
LABEL_10:
    if (!a13)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  CFRelease(cf);
  if (!a13)
  {
LABEL_11:
    if (!a14)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  CFRelease(a13);
  if (!a14)
  {
LABEL_12:
    if (!a15)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  CFRelease(a14);
  if (!a15)
  {
LABEL_13:
    if (!a16)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  CFRelease(a15);
  if (!a16)
  {
LABEL_14:
    if (!a17)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  CFRelease(a16);
  if (!a17)
  {
LABEL_15:
    if (!a18)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  CFRelease(a17);
  if (!a18)
  {
LABEL_16:
    if (!a19)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  CFRelease(a18);
  if (!a19)
  {
LABEL_17:
    if (!a20)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  CFRelease(a19);
  if (!a20)
  {
LABEL_18:
    if (!a21)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  CFRelease(a20);
  if (!a21)
  {
LABEL_19:
    if (!a22)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  CFRelease(a21);
  if (!a22)
  {
LABEL_20:
    if (!a23)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  CFRelease(a22);
  if (!a23)
  {
LABEL_21:
    if (!a24)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  CFRelease(a23);
  if (!a24)
  {
LABEL_22:
    if (!a25)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  CFRelease(a24);
  if (!a25)
  {
LABEL_23:
    if (!a26)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  CFRelease(a25);
  if (!a26)
  {
LABEL_24:
    if (!a27)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  CFRelease(a26);
  if (!a27)
  {
LABEL_25:
    if (!a28)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  CFRelease(a27);
  if (!a28)
  {
LABEL_26:
    if (!a29)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  CFRelease(a28);
  if (!a29)
  {
LABEL_27:
    if (!a30)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  CFRelease(a29);
  if (!a30)
  {
LABEL_28:
    if (!a31)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  CFRelease(a30);
  if (!a31)
  {
LABEL_29:
    if (!a32)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  CFRelease(a31);
  if (!a32)
  {
LABEL_30:
    if (!a33)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  CFRelease(a32);
  if (!a33)
  {
LABEL_31:
    if (!a34)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  CFRelease(a33);
  if (!a34)
  {
LABEL_32:
    if (!a35)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  CFRelease(a34);
  if (!a35)
  {
LABEL_33:
    if (!a36)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  CFRelease(a35);
  if (!a36)
  {
LABEL_34:
    if (!a37)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  CFRelease(a36);
  if (!a37)
  {
LABEL_35:
    if (!a38)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  CFRelease(a37);
  if (!a38)
  {
LABEL_36:
    if (!a39)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  CFRelease(a38);
  if (!a39)
  {
LABEL_37:
    if (!a40)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  CFRelease(a39);
  if (!a40)
  {
LABEL_38:
    if (!a41)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  CFRelease(a40);
  if (!a41)
  {
LABEL_39:
    if (!a42)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  CFRelease(a41);
  if (!a42)
  {
LABEL_40:
    if (!a43)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  CFRelease(a42);
  if (!a43)
  {
LABEL_41:
    if (!a44)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  CFRelease(a43);
  if (!a44)
  {
LABEL_42:
    if (!a45)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  CFRelease(a44);
  if (!a45)
  {
LABEL_43:
    if (!a46)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  CFRelease(a45);
  if (!a46)
  {
LABEL_44:
    if (!a47)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  CFRelease(a46);
  if (!a47)
  {
LABEL_45:
    if (!a48)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  CFRelease(a47);
  if (!a48)
  {
LABEL_46:
    if (!a49)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  CFRelease(a48);
  if (!a49)
  {
LABEL_47:
    if (!a50)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  CFRelease(a49);
  if (!a50)
  {
LABEL_48:
    if (!a51)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  CFRelease(a50);
  if (!a51)
  {
LABEL_49:
    if (!a52)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  CFRelease(a51);
  if (!a52)
  {
LABEL_50:
    if (!a53)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  CFRelease(a52);
  if (!a53)
  {
LABEL_51:
    if (!a54)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  CFRelease(a53);
  if (!a54)
  {
LABEL_52:
    if (!a55)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  CFRelease(a54);
  if (!a55)
  {
LABEL_53:
    if (!a56)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  CFRelease(a55);
  if (!a56)
  {
LABEL_54:
    if (!a57)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  CFRelease(a56);
  if (!a57)
  {
LABEL_55:
    if (!a58)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  CFRelease(a57);
  if (!a58)
  {
LABEL_56:
    if (!a59)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  CFRelease(a58);
  if (!a59)
  {
LABEL_57:
    if (!a60)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  CFRelease(a59);
  if (!a60)
  {
LABEL_58:
    if (!a61)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  CFRelease(a60);
  if (!a61)
  {
LABEL_59:
    if (!a62)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  CFRelease(a61);
  if (!a62)
  {
LABEL_60:
    if (!a63)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  CFRelease(a62);
  if (!a63)
  {
LABEL_61:
    if (!a64)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  CFRelease(a63);
  if (!a64)
  {
LABEL_62:
    if (!a65)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  CFRelease(a64);
  if (!a65)
  {
LABEL_63:
    if (!a66)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  CFRelease(a65);
  if (!a66)
  {
LABEL_64:
    if (!a67)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  CFRelease(a66);
  if (!a67)
  {
LABEL_65:
    if (!a68)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  CFRelease(a67);
  if (!a68)
  {
LABEL_66:
    if (!a69)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  CFRelease(a68);
  if (!a69)
  {
LABEL_67:
    if (!a70)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  CFRelease(a69);
  if (!a70)
  {
LABEL_68:
    if (!a71)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  CFRelease(a70);
  if (!a71)
  {
LABEL_69:
    if (!a72)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  CFRelease(a71);
  if (!a72)
  {
LABEL_70:
    if (!STACK[0x200])
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  CFRelease(a72);
  if (!STACK[0x200])
  {
LABEL_71:
    if (!STACK[0x208])
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  CFRelease((CFTypeRef)STACK[0x200]);
  if (!STACK[0x208])
  {
LABEL_72:
    if (!STACK[0x210])
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  CFRelease((CFTypeRef)STACK[0x208]);
  if (!STACK[0x210])
  {
LABEL_73:
    if (!STACK[0x218])
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  CFRelease((CFTypeRef)STACK[0x210]);
  if (!STACK[0x218])
  {
LABEL_74:
    if (!STACK[0x220])
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  CFRelease((CFTypeRef)STACK[0x218]);
  if (!STACK[0x220])
  {
LABEL_75:
    if (!a11)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  CFRelease((CFTypeRef)STACK[0x220]);
  if (!a11)
LABEL_76:
    _Unwind_Resume(a1);
LABEL_151:
  CFRelease(a11);
  _Unwind_Resume(a1);
}

void sub_1D80D1548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    JUMPOUT(0x1D80D1128);
  JUMPOUT(0x1D80D0E40);
}

void sub_1D80D1558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    JUMPOUT(0x1D80D1138);
  JUMPOUT(0x1D80D0E48);
}

void sub_1D80D1568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    JUMPOUT(0x1D80D1148);
  JUMPOUT(0x1D80D0E50);
}

void sub_1D80D1578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    JUMPOUT(0x1D80D1158);
  JUMPOUT(0x1D80D0E58);
}

void sub_1D80D1588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    JUMPOUT(0x1D80D1168);
  JUMPOUT(0x1D80D0E60);
}

void sub_1D80D1598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    JUMPOUT(0x1D80D1178);
  JUMPOUT(0x1D80D0E68);
}

void sub_1D80D15A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    JUMPOUT(0x1D80D1188);
  JUMPOUT(0x1D80D0E70);
}

void sub_1D80D15B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    JUMPOUT(0x1D80D1198);
  JUMPOUT(0x1D80D0E78);
}

void sub_1D80D15C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1D80D11A8);
  JUMPOUT(0x1D80D0E80);
}

void sub_1D80D15D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    JUMPOUT(0x1D80D11B8);
  JUMPOUT(0x1D80D0E88);
}

void sub_1D80D15E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23)
    JUMPOUT(0x1D80D11C8);
  JUMPOUT(0x1D80D0E90);
}

void sub_1D80D15F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1D80D11D8);
  JUMPOUT(0x1D80D0E98);
}

void sub_1D80D1608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25)
    JUMPOUT(0x1D80D11E8);
  JUMPOUT(0x1D80D0EA0);
}

void sub_1D80D1618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26)
    JUMPOUT(0x1D80D11F8);
  JUMPOUT(0x1D80D0EA8);
}

void sub_1D80D1628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27)
    JUMPOUT(0x1D80D1208);
  JUMPOUT(0x1D80D0EB0);
}

void sub_1D80D1638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a28)
    JUMPOUT(0x1D80D1218);
  JUMPOUT(0x1D80D0EB8);
}

void sub_1D80D1648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a29)
    JUMPOUT(0x1D80D1228);
  JUMPOUT(0x1D80D0EC0);
}

void sub_1D80D1658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30)
    JUMPOUT(0x1D80D1238);
  JUMPOUT(0x1D80D0EC8);
}

void sub_1D80D1668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31)
    JUMPOUT(0x1D80D1248);
  JUMPOUT(0x1D80D0ED0);
}

void sub_1D80D1678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32)
    JUMPOUT(0x1D80D1258);
  JUMPOUT(0x1D80D0ED8);
}

void sub_1D80D1688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a33)
    JUMPOUT(0x1D80D1268);
  JUMPOUT(0x1D80D0EE0);
}

void sub_1D80D1698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a34)
    JUMPOUT(0x1D80D1278);
  JUMPOUT(0x1D80D0EE8);
}

void sub_1D80D16A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35)
    JUMPOUT(0x1D80D1288);
  JUMPOUT(0x1D80D0EF0);
}

void sub_1D80D16B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36)
    JUMPOUT(0x1D80D1298);
  JUMPOUT(0x1D80D0EF8);
}

void sub_1D80D16C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a37)
    JUMPOUT(0x1D80D12A8);
  JUMPOUT(0x1D80D0F00);
}

void sub_1D80D16D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a38)
    JUMPOUT(0x1D80D12B8);
  JUMPOUT(0x1D80D0F08);
}

void sub_1D80D16E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a39)
    JUMPOUT(0x1D80D12C8);
  JUMPOUT(0x1D80D0F10);
}

void sub_1D80D16F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40)
    JUMPOUT(0x1D80D12D8);
  JUMPOUT(0x1D80D0F18);
}

void sub_1D80D1708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a41)
    JUMPOUT(0x1D80D12E8);
  JUMPOUT(0x1D80D0F20);
}

void sub_1D80D1718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a42)
    JUMPOUT(0x1D80D12F8);
  JUMPOUT(0x1D80D0F28);
}

void sub_1D80D1728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43)
    JUMPOUT(0x1D80D1308);
  JUMPOUT(0x1D80D0F30);
}

void sub_1D80D1738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a44)
    JUMPOUT(0x1D80D1318);
  JUMPOUT(0x1D80D0F38);
}

void sub_1D80D1748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a45)
    JUMPOUT(0x1D80D1328);
  JUMPOUT(0x1D80D0F40);
}

void sub_1D80D1758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a46)
    JUMPOUT(0x1D80D1338);
  JUMPOUT(0x1D80D0F48);
}

void sub_1D80D1768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47)
    JUMPOUT(0x1D80D1348);
  JUMPOUT(0x1D80D0F50);
}

void sub_1D80D1778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a48)
    JUMPOUT(0x1D80D1358);
  JUMPOUT(0x1D80D0F58);
}

void sub_1D80D1788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a49)
    JUMPOUT(0x1D80D1368);
  JUMPOUT(0x1D80D0F60);
}

void sub_1D80D1798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a50)
    JUMPOUT(0x1D80D1378);
  JUMPOUT(0x1D80D0F68);
}

void sub_1D80D17A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51)
    JUMPOUT(0x1D80D1388);
  JUMPOUT(0x1D80D0F70);
}

void sub_1D80D17B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a52)
    JUMPOUT(0x1D80D1398);
  JUMPOUT(0x1D80D0F78);
}

void sub_1D80D17C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a53)
    JUMPOUT(0x1D80D13A8);
  JUMPOUT(0x1D80D0F80);
}

void sub_1D80D17D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a54)
    JUMPOUT(0x1D80D13B8);
  JUMPOUT(0x1D80D0F88);
}

void sub_1D80D17E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a55)
    JUMPOUT(0x1D80D13C8);
  JUMPOUT(0x1D80D0F90);
}

void sub_1D80D17F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a56)
    JUMPOUT(0x1D80D13D8);
  JUMPOUT(0x1D80D0F98);
}

void sub_1D80D1808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a57)
    JUMPOUT(0x1D80D13E8);
  JUMPOUT(0x1D80D0FA0);
}

void sub_1D80D1818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (a58)
    JUMPOUT(0x1D80D13F8);
  JUMPOUT(0x1D80D0FA8);
}

void sub_1D80D1828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a59)
    JUMPOUT(0x1D80D1408);
  JUMPOUT(0x1D80D0FB0);
}

void sub_1D80D1838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a60)
    JUMPOUT(0x1D80D1418);
  JUMPOUT(0x1D80D0FB8);
}

void sub_1D80D1848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a61)
    JUMPOUT(0x1D80D1428);
  JUMPOUT(0x1D80D0FC0);
}

void sub_1D80D1858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a62)
    JUMPOUT(0x1D80D1438);
  JUMPOUT(0x1D80D0FC8);
}

void sub_1D80D1868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a63)
    JUMPOUT(0x1D80D1448);
  JUMPOUT(0x1D80D0FD0);
}

void sub_1D80D1878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  if (a64)
    JUMPOUT(0x1D80D1458);
  JUMPOUT(0x1D80D0FD8);
}

void sub_1D80D1888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  if (a65)
    JUMPOUT(0x1D80D1468);
  JUMPOUT(0x1D80D0FE0);
}

void sub_1D80D1898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;

  if (a66)
    JUMPOUT(0x1D80D1478);
  JUMPOUT(0x1D80D0FE8);
}

void sub_1D80D18A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;

  if (a67)
    JUMPOUT(0x1D80D1488);
  JUMPOUT(0x1D80D0FF0);
}

void sub_1D80D18B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  if (a68)
    JUMPOUT(0x1D80D1498);
  JUMPOUT(0x1D80D0FF8);
}

void sub_1D80D18C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (a69)
    JUMPOUT(0x1D80D14A8);
  JUMPOUT(0x1D80D1000);
}

void sub_1D80D18D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;

  if (a70)
    JUMPOUT(0x1D80D14B8);
  JUMPOUT(0x1D80D1008);
}

void sub_1D80D18E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a71)
    JUMPOUT(0x1D80D14C8);
  JUMPOUT(0x1D80D1010);
}

void sub_1D80D18F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  if (a72)
    JUMPOUT(0x1D80D14D8);
  JUMPOUT(0x1D80D1018);
}

void sub_1D80D1908()
{
  if (STACK[0x200])
    JUMPOUT(0x1D80D14E8);
  JUMPOUT(0x1D80D1020);
}

void sub_1D80D1918()
{
  if (STACK[0x208])
    JUMPOUT(0x1D80D14F8);
  JUMPOUT(0x1D80D1028);
}

void sub_1D80D1928()
{
  if (STACK[0x210])
    JUMPOUT(0x1D80D1508);
  JUMPOUT(0x1D80D1030);
}

void sub_1D80D1938()
{
  if (STACK[0x218])
    JUMPOUT(0x1D80D1518);
  JUMPOUT(0x1D80D1038);
}

void sub_1D80D1948()
{
  if (STACK[0x220])
    JUMPOUT(0x1D80D1528);
  JUMPOUT(0x1D80D1040);
}

void sub_1D80D1958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    JUMPOUT(0x1D80D1538);
  JUMPOUT(0x1D80D1048);
}

uint64_t WebProgressTrackerClient::progressStarted(WebProgressTrackerClient *this, WebCore::LocalFrame *a2)
{
  return WebThreadPostNotification();
}

void WebProgressTrackerClient::progressEstimateChanged(id *this, WebCore::LocalFrame *a2)
{
  void *v3;
  double v4;
  const void *v5;
  const void *v6;
  __CFDictionary *Mutable;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(this[1], "estimatedProgress");
  *(float *)&v4 = v4;
  v5 = (const void *)objc_msgSend(v3, "numberWithFloat:", v4);
  v6 = (const void *)objc_msgSend((id)objc_msgSend(this[1], "mainFrame"), "_bodyBackgroundColor");
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, CFSTR("WebProgressEstimatedProgressKey"), v5);
  if (v6)
    CFDictionaryAddValue(Mutable, CFSTR("WebProgressBackgroundColorKey"), v6);
  WebThreadPostNotification();
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1D80D1A60(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D80D213C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, _DWORD *a10)
{
  uint64_t v10;
  _DWORD *v12;

  if (a10)
  {
    if (a10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
    else
      --a10[2];
  }
  v12 = *(_DWORD **)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
  {
    if (v12[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      _Unwind_Resume(exception_object);
    }
    --v12[2];
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80D2320(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D80D24B4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80D24CC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::SubstituteResource::data(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  char v18;

  v2 = this;
  if (this)
  {
    do
      v3 = __ldaxr((unsigned int *)this);
    while (__stlxr(v3 + 1, (unsigned int *)this));
    do
    {
      v4 = __ldaxr((unsigned int *)this);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)this));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)this);
      v6 = *(unsigned int *)(this + 20);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(this + 8);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v15 = v7;
              v16 = v8;
              atomic_store(1u, v9);
              v17 = (WTF *)v9;
              v12 = v9[6];
              if ((_DWORD)v12 != -1)
                ((void (*)(char *, unsigned int *))off_1E9D6E8C0[v12])(&v18, v9 + 2);
              *((_DWORD *)v17 + 6) = -1;
              WTF::fastFree(v17, a2);
              v7 = v15;
              v8 = v16;
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v13 = *(WTF **)(v2 + 8);
      if ((WTF *)(v2 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v13, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
      return v2;
    }
  }
  return this;
}

void sub_1D80D26E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80D26F8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80D2CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, _DWORD *a11)
{
  uint64_t v11;
  _DWORD *v13;

  if (a11)
  {
    if (a11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[2];
  }
  v13 = *(_DWORD **)(v11 - 112);
  *(_QWORD *)(v11 - 112) = 0;
  if (v13)
  {
    if (v13[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      _Unwind_Resume(exception_object);
    }
    --v13[2];
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80D2F9C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80D323C(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  uint64_t v14;
  WTF::StringImpl *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, a2);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a13, v17);
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v18);
      _Unwind_Resume(a1);
    }
    *(_DWORD *)v16 -= 2;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a13, a2);
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v19);
    _Unwind_Resume(a1);
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a13, a2);
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v20);
  _Unwind_Resume(a1);
}

void sub_1D80D34AC(_Unwind_Exception *a1, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16)
{
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a9, a2);
  if (a16)
  {
    if (a14 != -1)
    {
      ((void (*)(WTF::StringImpl **, char *))off_1E9D6E8E0[a14])(&a9, &a11);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1D80D35F4(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80D3794(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80D3858(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80D391C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80D3C94(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
    {
      WTF::StringImpl::destroy(a9, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a9 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return MEMORY[0x1E0CBF738];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::host(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::host(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::host(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::host(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return MEMORY[0x1E0CBF738];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::port(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::port(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::port(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::port(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

void WebKitInitializeStorageIfNecessary(void)
{
  id v0;
  StringImpl *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF::StringImpl *v7;

  if ((WebKitInitializeStorageIfNecessary(void)::initialized & 1) != 0)
    return;
  v0 = +[WebStorageManager _storageDirectoryPath](WebStorageManager, "_storageDirectoryPath");
  MEMORY[0x1D82A3998](&v7, v0);
  {
    v2 = (_QWORD *)operator new();
    *v2 = &unk_1E9D6EA00;
    WebStorageTrackerClient::sharedWebStorageTrackerClient(void)::sharedClient = (uint64_t)v2;
    v3 = WebKit::storageTracker;
    if (WebKit::storageTracker)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = (_QWORD *)WebStorageTrackerClient::sharedWebStorageTrackerClient(void)::sharedClient;
  v3 = WebKit::storageTracker;
  if (!WebKit::storageTracker)
  {
LABEL_4:
    v3 = WTF::fastMalloc((WTF *)0x90);
    *(_BYTE *)v3 = 0;
    WebCore::SQLiteDatabase::SQLiteDatabase((WebCore::SQLiteDatabase *)(v3 + 8));
    WTF::String::isolatedCopy();
    *(_BYTE *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *(_BYTE *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 112) = 0;
    v4 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    *(_WORD *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_BYTE *)(v4 + 64) = 0;
    *(_QWORD *)(v3 + 120) = v4;
    *(_WORD *)(v3 + 128) = 0;
    *(_QWORD *)(v3 + 136) = 0x4072C00000000000;
    WebKit::storageTracker = v3;
  }
LABEL_5:
  *(_QWORD *)(v3 + 88) = v2;
  *(_BYTE *)(v3 + 129) = 1;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v1);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v0);
  objc_msgSend(v6, "setResourceValue:forKey:error:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0C999D8], 0);
  WebKitInitializeStorageIfNecessary(void)::initialized = 1;
}

void sub_1D80D4760(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80D4980(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1D80D4998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;
  const void *v12;
  void *v14;

  CFRelease(v12);
  if (v11)
    CFRelease(v11);
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

void sub_1D80D4BFC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::WebStorageNamespaceProvider *WebKit::WebStorageNamespaceProvider::WebStorageNamespaceProvider(unsigned int **this, unsigned int **a2)
{
  _QWORD *v4;
  unsigned int *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  WTF *v19;

  v4 = (_QWORD *)WebCore::StorageNamespaceProvider::StorageNamespaceProvider((WebCore::StorageNamespaceProvider *)this);
  v4[5] = 0;
  *v4 = off_1E9D6E970;
  v5 = *a2;
  if (*a2 || (v5 = (unsigned int *)*MEMORY[0x1E0CBF738]) != 0)
    *v5 += 2;
  this[7] = 0;
  this[8] = 0;
  this[6] = v5;
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = this;
  v8 = this[5];
  this[5] = (unsigned int *)v7;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
  }
  v11 = this[5];
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v19 = (WTF *)v11;
  WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::add(&WebKit::storageNamespaceProviders(void)::storageNamespaceProviders, (unsigned int **)&v19, (uint64_t)&v18);
  v14 = (unsigned int *)v19;
  v19 = 0;
  if (!v14)
    return (WebKit::WebStorageNamespaceProvider *)this;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (v16)
    return (WebKit::WebStorageNamespaceProvider *)this;
  atomic_store(1u, v14);
  WTF::fastFree((WTF *)v14, v13);
  return (WebKit::WebStorageNamespaceProvider *)this;
}

void WebKit::WebStorageNamespaceProvider::~WebStorageNamespaceProvider(WebKit::WebStorageNamespaceProvider *this, StringImpl *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
    v16 = *((_QWORD *)this + 7);
    if (!v16)
      goto LABEL_33;
    goto LABEL_24;
  }
  v3 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
  if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders)
  {
    v4 = *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 8);
    v5 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = v8;
      v11 = *(_QWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v8);
      if (v11 != -1)
      {
        if (!v11)
          goto LABEL_23;
        if (*(WebKit::WebStorageNamespaceProvider **)(v11 + 8) == this)
          break;
      }
      v8 = (v8 + i) & v4;
    }
    if (v8 != *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4))
    {
      *(_QWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v8) = 0;
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v28 = v3;
        WTF::fastFree((WTF *)v11, a2);
        v3 = v28;
      }
      *(_QWORD *)(v3 + 8 * v10) = -1;
      ++*(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 16);
      if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders)
      {
        --*(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12);
        if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders)
        {
          v14 = *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
          if (6 * *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12) < v14
            && v14 >= 9)
          {
            WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(&WebKit::storageNamespaceProviders(void)::storageNamespaceProviders, v14 >> 1, 0);
          }
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      }
    }
  }
LABEL_23:
  v16 = *((_QWORD *)this + 7);
  if (v16)
  {
LABEL_24:
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      for (j = 0; j != v17; ++j)
      {
        v19 = v16 + 16 * j;
        if (*(_QWORD *)v19 != -1)
        {
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)(v19 + 8), a2);
          v20 = *(unsigned int **)v19;
          *(_QWORD *)v19 = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
LABEL_33:
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, a2);
      v24 = *((_QWORD *)this + 5);
      if (v24)
        goto LABEL_37;
LABEL_42:
      *((_QWORD *)this + 5) = 0;
      WebCore::StorageNamespaceProvider::~StorageNamespaceProvider(this);
      return;
    }
    *(_DWORD *)v23 -= 2;
  }
  v24 = *((_QWORD *)this + 5);
  if (!v24)
    goto LABEL_42;
LABEL_37:
  *(_QWORD *)(v24 + 8) = 0;
  v25 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v25)
    goto LABEL_40;
  do
  {
    v26 = __ldaxr(v25);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v25));
  if (!v27)
  {
    atomic_store(1u, v25);
    WTF::fastFree((WTF *)v25, a2);
    WebCore::StorageNamespaceProvider::~StorageNamespaceProvider(this);
  }
  else
  {
LABEL_40:
    WebCore::StorageNamespaceProvider::~StorageNamespaceProvider(this);
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebStorageNamespaceProvider::~WebStorageNamespaceProvider(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebStorageNamespaceProvider::clearLocalStorageForAllOrigins(WebKit::WebStorageNamespaceProvider *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  {
    if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders
      && *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12))
    {
      v1 = *(unsigned int *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
      if ((_DWORD)v1)
      {
        v2 = 8 * v1;
        for (i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v2 -= 8;
          if (!v2)
            return result;
        }
      }
      else
      {
        i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
      }
      v4 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v1;
      if (i != (uint64_t *)v4)
      {
        v5 = *i;
LABEL_12:
        v6 = *(_DWORD **)(*(_QWORD *)(v5 + 8) + 16);
        if (v6)
        {
          ++v6[2];
          result = WebKit::StorageNamespaceImpl::clearAllOriginsForDeletion((uint64_t)v6);
          if (v6[2] == 1)
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[2];
        }
        while (++i != (uint64_t *)v4)
        {
          v5 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v4)
              goto LABEL_12;
            return result;
          }
        }
      }
    }
  }
  else
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  return result;
}

void WebKit::WebStorageNamespaceProvider::clearLocalStorageForOrigin(WebKit::WebStorageNamespaceProvider *this, const WebCore::SecurityOriginData *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;

  {
    if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders
      && *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12))
    {
      v3 = *(unsigned int *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
      if ((_DWORD)v3)
      {
        v4 = 8 * v3;
        for (i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v4 -= 8;
          if (!v4)
            return;
        }
      }
      else
      {
        i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
      }
      v6 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v3;
      if (i != (uint64_t *)v6)
      {
        v7 = *i;
        do
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 16);
          if (!v8)
            goto LABEL_20;
          ++*(_DWORD *)(v8 + 8);
          WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebKit::StorageAreaImpl,WTF::RawPtrTraits<WebKit::StorageAreaImpl>,WTF::DefaultRefDerefTraits<WebKit::StorageAreaImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)(v8 + 24), (uint64_t)this);
          if (v9)
          {
            v10 = v9;
            ++v9[2];
            WebKit::StorageAreaImpl::clearForOriginDeletion((WebKit::StorageAreaImpl *)v9);
            if (v10[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
              v11 = *(_DWORD *)(v8 + 8) - 1;
              if (*(_DWORD *)(v8 + 8) != 1)
              {
LABEL_17:
                *(_DWORD *)(v8 + 8) = v11;
                goto LABEL_20;
              }
              goto LABEL_19;
            }
            --v10[2];
          }
          v11 = *(_DWORD *)(v8 + 8) - 1;
          if (*(_DWORD *)(v8 + 8) != 1)
            goto LABEL_17;
LABEL_19:
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          do
          {
LABEL_20:
            if (++i == (uint64_t *)v6)
              return;
            v7 = *i;
          }
          while ((unint64_t)(*i + 1) <= 1);
        }
        while (i != (uint64_t *)v6);
      }
    }
  }
  else
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
}

uint64_t WebKit::WebStorageNamespaceProvider::closeIdleLocalStorageDatabases(WebKit::WebStorageNamespaceProvider *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  {
    if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders
      && *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12))
    {
      v1 = *(unsigned int *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
      if ((_DWORD)v1)
      {
        v2 = 8 * v1;
        for (i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v2 -= 8;
          if (!v2)
            return result;
        }
      }
      else
      {
        i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
      }
      v4 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v1;
      if (i != (uint64_t *)v4)
      {
        v5 = *i;
LABEL_12:
        v6 = *(_DWORD **)(*(_QWORD *)(v5 + 8) + 16);
        if (v6)
        {
          ++v6[2];
          result = WebKit::StorageNamespaceImpl::closeIdleLocalStorageDatabases((uint64_t)v6);
          if (v6[2] == 1)
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[2];
        }
        while (++i != (uint64_t *)v4)
        {
          v5 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v4)
              goto LABEL_12;
            return result;
          }
        }
      }
    }
  }
  else
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  return result;
}

uint64_t WebKit::WebStorageNamespaceProvider::syncLocalStorage(WebKit::WebStorageNamespaceProvider *this, StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t result;

  {
    if (WebKit::storageNamespaceProviders(void)::storageNamespaceProviders
      && *(_DWORD *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 12))
    {
      v3 = *(unsigned int *)(WebKit::storageNamespaceProviders(void)::storageNamespaceProviders - 4);
      if ((_DWORD)v3)
      {
        v4 = 8 * v3;
        for (i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
              (unint64_t)(*i + 1) <= 1;
              ++i)
        {
          v4 -= 8;
          if (!v4)
            return result;
        }
      }
      else
      {
        i = (uint64_t *)WebKit::storageNamespaceProviders(void)::storageNamespaceProviders;
      }
      v6 = WebKit::storageNamespaceProviders(void)::storageNamespaceProviders + 8 * v3;
      if (i != (uint64_t *)v6)
      {
        v7 = *i;
LABEL_12:
        v8 = *(_DWORD **)(*(_QWORD *)(v7 + 8) + 16);
        if (v8)
        {
          ++v8[2];
          result = WebKit::StorageNamespaceImpl::sync((uint64_t)v8, a2, a3);
          if (v8[2] == 1)
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          else
            --v8[2];
        }
        while (++i != (uint64_t *)v6)
        {
          v7 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v6)
              goto LABEL_12;
            return result;
          }
        }
      }
    }
  }
  else
  {
    WebKit::storageNamespaceProviders(void)::storageNamespaceProviders = 0;
  }
  return result;
}

unsigned int *WebKit::WebStorageNamespaceProvider::createLocalStorageNamespace@<X0>(const WTF::StringImpl **this@<X0>, SessionID a2@<0:X2>, const WTF::String *a3@<X1>, SessionID a4@<X3>, uint64_t *a5@<X8>)
{
  return WebKit::StorageNamespaceImpl::getOrCreateLocalStorageNamespace(this + 6, a3, a4, (const WTF::StringImpl *)a2.m_identifier, a5);
}

WTF::StringImpl *WebKit::WebStorageNamespaceProvider::createTransientLocalStorageNamespace@<X0>(SessionID a1@<0:X3>, int a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v8;
  StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  v8 = WTF::fastMalloc((WTF *)0x48);
  v11 = 0;
  WebKit::StorageNamespaceImpl::StorageNamespaceImpl(v8, 0, (uint64_t)&v11, a2, a1.m_identifier);
  result = v11;
  v11 = 0;
  if (!result)
    goto LABEL_4;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_4:
    *a3 = v8;
    return result;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  *a3 = v8;
  return result;
}

uint64_t WebKit::WebStorageNamespaceProvider::sessionStorageNamespace@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  void *v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  StringImpl *v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  void *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t *v78;
  uint64_t *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;

  LOBYTE(v5) = a4;
  v6 = a3;
  v8 = a1;
  v10 = a1 + 56;
  result = WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v83, (uint64_t *)(a1 + 56), a3[2]);
  v13 = *(_QWORD *)(v8 + 56);
  if (v13)
    v13 += 16 * *(unsigned int *)(v13 - 4);
  if (v84 != v13)
    goto LABEL_50;
  if ((v5 & 1) == 0)
  {
LABEL_72:
    *(_QWORD *)a5 = 0;
    return result;
  }
  v82 = 0;
  v14 = *(_DWORD *)(v8 + 64);
  v15 = *(_DWORD *)(v8 + 68);
  *(_DWORD *)(v8 + 64) = v14 + 1;
  if (v14 > v15)
    WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v10, v12);
  v16 = v6[2];
  if (v16
    || (v16 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v16 = 1,
        *(_QWORD *)(v16 + 8) = v6,
        v19 = (unsigned int *)v6[2],
        v6[2] = v16,
        !v19))
  {
    do
      v17 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v17 + 1, (unsigned int *)v16));
    do
      v18 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v18 + 1, (unsigned int *)v16));
  }
  else
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v12);
    }
    v16 = v6[2];
    do
      v22 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v22 + 1, (unsigned int *)v16));
    do
      v23 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v23 + 1, (unsigned int *)v16));
    if (!v16)
    {
LABEL_21:
      v26 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  do
  {
    v24 = __ldaxr((unsigned int *)v16);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v16));
  if (v25)
    goto LABEL_21;
  atomic_store(1u, (unsigned int *)v16);
  WTF::fastFree((WTF *)v16, v12);
  v26 = *(_QWORD *)v10;
  if (*(_QWORD *)v10)
    goto LABEL_23;
LABEL_22:
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v10, 8u);
  v26 = *(_QWORD *)v10;
  if (!*(_QWORD *)v10)
  {
    v27 = 0;
    goto LABEL_24;
  }
LABEL_23:
  v27 = *(_DWORD *)(v26 - 8);
LABEL_24:
  v28 = 0;
  v29 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
  v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
  v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
  v32 = (v31 >> 31) ^ v31;
  for (i = 1; ; ++i)
  {
    v34 = v32 & v27;
    v35 = v26 + 16 * v34;
    v36 = *(_QWORD *)v35;
    if (*(_QWORD *)v35 == -1)
    {
      v28 = (uint64_t *)(v26 + 16 * v34);
      goto LABEL_26;
    }
    if (!v36)
    {
      if (v28)
      {
        *v28 = 0;
        v28[1] = 0;
        --*(_DWORD *)(*(_QWORD *)v10 - 16);
        *v28 = v16;
        goto LABEL_38;
      }
      *(_QWORD *)v35 = v16;
      goto LABEL_37;
    }
    if (v36 == v16)
      break;
LABEL_26:
    v32 = i + v34;
  }
  v37 = v26 + 16 * v34;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)&v83, &v82);
  v38 = *(WTF::StringImpl **)(v37 + 8);
  *(_QWORD *)(v37 + 8) = v83;
  v83 = v38;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)&v83, v39);
  if (v16)
  {
    do
    {
      v41 = __ldaxr((unsigned int *)v16);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)v16));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)v16);
      WTF::fastFree((WTF *)v16, v40);
    }
  }
  while (1)
  {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v82, v40);
LABEL_50:
    v77 = v5;
    result = WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v83, (uint64_t *)v10, v6[2]);
    v35 = v84 + 8;
    v49 = *(_QWORD *)(v84 + 8);
    v74 = a2;
    v80 = (_QWORD *)a5;
    v81 = (uint64_t)(a2 + 1);
    v79 = (uint64_t *)(v84 + 8);
    if (v49)
    {
      v75 = v8;
      v76 = v6;
      v35 = *(unsigned int *)(v49 - 8);
      a5 = WTF::computeHash<WebCore::SecurityOriginData>(v81) & v35;
      v8 = 40;
      v5 = v49 + 40 * a5;
      v51 = (unsigned int *)(v5 + 24);
      v50 = *(unsigned int *)(v5 + 24);
      if (*(_DWORD *)(v5 + 24) == -1)
        goto LABEL_119;
      v10 = 1;
      v6 = (uint64_t *)off_1E9D6E9C0;
      a2 = (uint64_t *)off_1E9D6E9A0;
      while (1)
      {
        v83 = (WTF::StringImpl *)&v82;
        result = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E9D6E9C0[v50])(&v83, v5);
        if ((result & 1) != 0)
        {
          v35 = (uint64_t)v79;
          a5 = (uint64_t)v80;
          v8 = v75;
          v6 = v76;
          goto LABEL_66;
        }
        v52 = *v51;
        if ((_DWORD)v52 == -1)
          goto LABEL_119;
        v83 = (WTF::StringImpl *)&v82;
        if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E9D6E9A0[v52])(&v83, v5) & 1) == 0)
        {
          result = WebCore::operator==();
          if ((result & 1) != 0)
            break;
        }
        a5 = ((_DWORD)a5 + (_DWORD)v10) & v35;
        v5 = v49 + 40 * a5;
        v51 = (unsigned int *)(v5 + 24);
        v50 = *(unsigned int *)(v5 + 24);
        v10 = (v10 + 1);
        if (*(_DWORD *)(v5 + 24) == -1)
          goto LABEL_119;
      }
      v35 = (uint64_t)v79;
      if (*v79)
      {
        a5 = (uint64_t)v80;
        v8 = v75;
        v6 = v76;
        if (*v79 + 40 * *(unsigned int *)(*v79 - 4) == v5)
          goto LABEL_66;
LABEL_62:
        v53 = *(_QWORD *)(v5 + 32);
        if (v53)
          ++*(_DWORD *)(v53 + 8);
        *(_QWORD *)a5 = v53;
        return result;
      }
      a5 = (uint64_t)v80;
      v8 = v75;
      v6 = v76;
      if (v5)
        goto LABEL_62;
    }
LABEL_66:
    if ((v77 & 1) == 0)
      goto LABEL_72;
    v54 = *(_DWORD *)(v8 + 32);
    v55 = WebCore::Page::sessionID((WebCore::Page *)v6);
    a2 = (uint64_t *)WTF::fastMalloc((WTF *)0x48);
    v83 = 0;
    WebKit::StorageNamespaceImpl::StorageNamespaceImpl((uint64_t)a2, 0, (uint64_t)&v83, v54, v55);
    v57 = v83;
    v83 = 0;
    if (!v57)
      goto LABEL_70;
    if (*(_DWORD *)v57 != 2)
    {
      *(_DWORD *)v57 -= 2;
LABEL_70:
      v6 = *(uint64_t **)v35;
      v78 = a2;
      if (*(_QWORD *)v35)
        goto LABEL_76;
      goto LABEL_75;
    }
    WTF::StringImpl::destroy(v57, v56);
    v6 = *(uint64_t **)v35;
    v78 = a2;
    if (*(_QWORD *)v35)
      goto LABEL_76;
LABEL_75:
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)v35, 8u, 0);
    v6 = *(uint64_t **)v35;
    if (*(_QWORD *)v35)
    {
LABEL_76:
      v58 = *((_DWORD *)v6 - 2);
      goto LABEL_77;
    }
    v58 = 0;
LABEL_77:
    v8 = WTF::computeHash<WebCore::SecurityOriginData>(v81) & v58;
    v59 = (uint64_t)&v6[5 * v8];
    v5 = v59 + 24;
    v60 = *(unsigned int *)(v59 + 24);
    if (*(_DWORD *)(v59 + 24) != -1)
      break;
LABEL_119:
    v72 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    atomic_store(1u, v72);
    WTF::fastFree((WTF *)v72, v73);
LABEL_37:
    v28 = (uint64_t *)v35;
LABEL_38:
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)&v83, &v82);
    v43 = (WTF::StringImpl *)v28[1];
    v28[1] = (uint64_t)v83;
    v83 = v43;
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)&v83, v44);
    if (*(_QWORD *)v10)
    {
      ++*(_DWORD *)(*(_QWORD *)v10 - 12);
      v45 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
        goto LABEL_40;
LABEL_45:
      v46 = *(unsigned int *)(v45 - 16);
      v47 = *(unsigned int *)(v45 - 4);
      if (v47 <= 0x400)
        goto LABEL_41;
LABEL_46:
      if (v47 <= 2 * v46)
        goto LABEL_47;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v45 = *(_QWORD *)v10;
      if (!*(_QWORD *)v10)
        goto LABEL_45;
LABEL_40:
      v46 = (*(_DWORD *)(v45 - 16) + *(_DWORD *)(v45 - 12));
      v47 = *(unsigned int *)(v45 - 4);
      if (v47 > 0x400)
        goto LABEL_46;
LABEL_41:
      if (3 * v47 <= 4 * v46)
      {
        if (!(_DWORD)v47)
        {
          v48 = 8;
          goto LABEL_48;
        }
LABEL_47:
        v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v47));
LABEL_48:
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v10, v48);
      }
    }
  }
  v35 = 0;
  a5 = 1;
  a2 = &v82;
  v10 = (uint64_t)off_1E9D6E9C0;
  while (1)
  {
    v83 = (WTF::StringImpl *)&v82;
    if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E9D6E9C0[v60])(&v83, v59) & 1) != 0)
      break;
    v61 = *(unsigned int *)v5;
    if ((_DWORD)v61 == -1)
      goto LABEL_119;
    v83 = (WTF::StringImpl *)&v82;
    if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E9D6E9A0[v61])(&v83, v59) & 1) != 0)
    {
      v35 = v59;
    }
    else if ((WebCore::operator==() & 1) != 0)
    {
      v62 = v80;
      result = (uint64_t)v78;
      goto LABEL_109;
    }
    v8 = ((_DWORD)v8 + (_DWORD)a5) & v58;
    v59 = (uint64_t)&v6[5 * v8];
    v5 = v59 + 24;
    v60 = *(unsigned int *)(v59 + 24);
    a5 = (a5 + 1);
    if (*(_DWORD *)(v59 + 24) == -1)
      goto LABEL_119;
  }
  if (v35)
  {
    *(_QWORD *)(v35 + 32) = 0;
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
    --*(_DWORD *)(*v79 - 16);
    v59 = v35;
  }
  v63 = *(unsigned int *)(v59 + 24);
  v64 = *((unsigned int *)v74 + 8);
  v62 = v80;
  if ((_DWORD)v63 == -1)
  {
    if ((_DWORD)v64 != -1)
      goto LABEL_92;
  }
  else
  {
    if ((_DWORD)v64 == -1)
    {
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E9D6E9B0[v63])(&v83, v59);
      *(_DWORD *)(v59 + 24) = -1;
      goto LABEL_93;
    }
LABEL_92:
    v83 = (WTF::StringImpl *)v59;
    ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1E9D6E9D0[v64])(&v83, v59, v81);
  }
LABEL_93:
  v65 = *(_DWORD **)(v59 + 32);
  *(_QWORD *)(v59 + 32) = v78;
  if (!v65)
  {
LABEL_96:
    v66 = *v79;
    if (!*v79)
      goto LABEL_103;
LABEL_97:
    ++*(_DWORD *)(v66 - 12);
    v67 = *v79;
    if (!*v79)
      goto LABEL_104;
LABEL_98:
    v68 = (*(_DWORD *)(v67 - 16) + *(_DWORD *)(v67 - 12));
    v69 = *(unsigned int *)(v67 - 4);
    if (v69 > 0x400)
      goto LABEL_105;
    goto LABEL_99;
  }
  if (v65[2] != 1)
  {
    --v65[2];
    goto LABEL_96;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 8))(v65);
  v66 = *v79;
  if (*v79)
    goto LABEL_97;
LABEL_103:
  *(_DWORD *)(v66 - 12) = 1;
  v67 = *v79;
  if (*v79)
    goto LABEL_98;
LABEL_104:
  v68 = *(unsigned int *)(v67 - 16);
  v69 = *(unsigned int *)(v67 - 4);
  if (v69 > 0x400)
  {
LABEL_105:
    if (v69 <= 2 * v68)
    {
LABEL_106:
      v70 = (_DWORD)v69 << (6 * *(_DWORD *)(v67 - 12) >= (2 * v69));
      goto LABEL_107;
    }
    goto LABEL_108;
  }
LABEL_99:
  if (3 * v69 <= 4 * v68)
  {
    if ((_DWORD)v69)
      goto LABEL_106;
    v70 = 8;
LABEL_107:
    v59 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v79, v70, v59);
  }
LABEL_108:
  result = 0;
LABEL_109:
  v71 = *(_QWORD *)(v59 + 32);
  if (v71)
    ++*(_DWORD *)(v71 + 8);
  *v62 = v71;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  ++*((_DWORD *)a2 + 2);
  if (!a3 || !*(_QWORD *)(a3 + 8))
  {
    if (*a2)
    {
      v15 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = v15;
      *(_QWORD *)(result + 16) = v15;
      *(_QWORD *)(result + 24) = v15;
      *(_QWORD *)(result + 32) = v15;
    }
    else
    {
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
    }
    *(_DWORD *)(result + 40) = 0;
    return result;
  }
  v3 = *a2;
  if (!*a2)
  {
    v12 = 0;
    v14 = 0;
    v16 = 0;
    v13 = 0;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
    v17 = (_QWORD *)(result + 8);
    *(_QWORD *)(result + 16) = 0;
    goto LABEL_17;
  }
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = v8;
    v11 = *(_QWORD *)(v3 + 16 * v8);
    if (v11 == -1)
      goto LABEL_5;
    if (!v11)
      break;
    if (v11 == a3)
    {
      v12 = v3 + 16 * v10;
      v13 = *(unsigned int *)(v3 - 4);
      v14 = v3 + 16 * v13;
      goto LABEL_16;
    }
LABEL_5:
    v8 = (v10 + i) & v4;
  }
  v13 = *(unsigned int *)(v3 - 4);
  v12 = v3 + 16 * v13;
  v14 = v12;
LABEL_16:
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = v12;
  v17 = (_QWORD *)(result + 8);
  *(_QWORD *)(result + 16) = v14;
  v16 = v3 + 16 * v13;
LABEL_17:
  *(_QWORD *)(result + 24) = v16;
  *(_QWORD *)(result + 32) = v3 + 16 * v13;
  *(_DWORD *)(result + 40) = 0;
LABEL_18:
  while (v12 != v16 && !*(_QWORD *)(*(_QWORD *)v12 + 8))
  {
    v18 = v12 + 16;
    *v17 = v12 + 16;
    v12 = v14;
    if (v18 != v14)
    {
      v12 = v18;
      while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
      {
        v12 += 16;
        *v17 = v12;
        if (v12 == v14)
        {
          v12 = v14;
          goto LABEL_18;
        }
      }
    }
  }
  return result;
}

uint64_t *WebKit::WebStorageNamespaceProvider::cloneSessionStorageNamespaceForPage(WebKit::WebStorageNamespaceProvider *this, WebCore::Page *a2, WebCore::Page *a3)
{
  uint64_t v4;
  uint64_t *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  WebCore::Page *v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  char v81[8];
  uint64_t v82;
  char v83;
  char *v84;

  v4 = *((_QWORD *)a2 + 116);
  result = (uint64_t *)WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)v81, (uint64_t *)(v4 + 56), *((_QWORD *)a2 + 2));
  v7 = *(_QWORD *)(v4 + 56);
  if (v7)
    v7 += 16 * *(unsigned int *)(v7 - 4);
  v8 = v82;
  if (v82 == v7)
    return result;
  v80 = 0;
  v9 = *(_QWORD *)(v82 + 8);
  if (!v9)
  {
    v12 = 0;
    LODWORD(v10) = 0;
    goto LABEL_16;
  }
  v10 = *(unsigned int *)(v9 - 4);
  v11 = v9 + 40 * v10;
  if (!*(_DWORD *)(v9 - 12))
  {
    v12 = v9 + 40 * v10;
LABEL_16:
    v11 = v9 + 40 * v10;
    if (v9)
      goto LABEL_20;
    goto LABEL_23;
  }
  if (!(_DWORD)v10)
  {
    v12 = *(_QWORD *)(v82 + 8);
    goto LABEL_20;
  }
  v12 = 40 * v10;
  while (1)
  {
    v13 = *(unsigned int *)(v9 + 24);
    if ((_DWORD)v13 == -1)
      goto LABEL_123;
    v84 = (char *)&v79;
    if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E9C0[v13])(&v84, v9) & 1) == 0)
    {
      v14 = *(unsigned int *)(v9 + 24);
      if ((_DWORD)v14 == -1)
        goto LABEL_123;
      v84 = (char *)&v79;
      if (!((unsigned int (*)(char **, uint64_t))off_1E9D6E9A0[v14])(&v84, v9))
        break;
    }
    v9 += 40;
    v12 -= 40;
    if (!v12)
    {
      v9 = v11;
      break;
    }
  }
  v12 = v9;
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
LABEL_20:
    v15 = v9 + 40 * *(unsigned int *)(v9 - 4);
    if (v15 == v12)
    {
LABEL_77:
      v41 = *((_QWORD *)a3 + 116);
      v12 = v41 + 56;
      v42 = *(_DWORD *)(v41 + 64);
      v43 = *(_DWORD *)(v41 + 68);
      *(_DWORD *)(v41 + 64) = v42 + 1;
      if (v42 > v43)
        WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v41 + 56, v6);
      v9 = *((_QWORD *)a3 + 2);
      if (v9
        || (v9 = WTF::fastCompactMalloc((WTF *)0x10),
            *(_DWORD *)v9 = 1,
            *(_QWORD *)(v9 + 8) = a3,
            v46 = (unsigned int *)*((_QWORD *)a3 + 2),
            *((_QWORD *)a3 + 2) = v9,
            !v46))
      {
        do
          v44 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v44 + 1, (unsigned int *)v9));
        do
          v45 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v45 + 1, (unsigned int *)v9));
      }
      else
      {
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          atomic_store(1u, v46);
          WTF::fastFree((WTF *)v46, v6);
        }
        v9 = *((_QWORD *)a3 + 2);
        do
          v49 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v49 + 1, (unsigned int *)v9));
        do
          v50 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v50 + 1, (unsigned int *)v9));
        if (!v9)
          goto LABEL_93;
      }
      do
      {
        v51 = __ldaxr((unsigned int *)v9);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, (unsigned int *)v9));
      if (!v52)
        goto LABEL_124;
LABEL_93:
      v53 = *(_QWORD *)v12;
      if (!*(_QWORD *)v12)
        goto LABEL_94;
      goto LABEL_95;
    }
    goto LABEL_24;
  }
LABEL_23:
  v15 = 0;
  if (!v12)
    goto LABEL_77;
LABEL_24:
  v77 = a3;
  v78 = v11;
  v76 = v15;
  while (1)
  {
    (*(void (**)(_DWORD **__return_ptr, _QWORD, WebCore::Page *))(**(_QWORD **)(v12 + 32) + 32))(&v79, *(_QWORD *)(v12 + 32), a3);
    v16 = v80;
    if (v80
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(&v80, 8u, 0), (v16 = v80) != 0))
    {
      v17 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = WTF::computeHash<WebCore::SecurityOriginData>(v12) & v17;
    v19 = v16 + 40 * v18;
    v9 = v19 + 24;
    v20 = *(unsigned int *)(v19 + 24);
    if (*(_DWORD *)(v19 + 24) == -1)
      goto LABEL_123;
    v21 = 0;
    v22 = 1;
    while (1)
    {
      v84 = &v83;
      if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E9C0[v20])(&v84, v19) & 1) != 0)
      {
        if (v21)
        {
          *(_QWORD *)(v21 + 32) = 0;
          *(_OWORD *)v21 = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          --*(_DWORD *)(v80 - 16);
          v19 = v21;
        }
        v28 = *(unsigned int *)(v19 + 24);
        v29 = *(unsigned int *)(v12 + 24);
        a3 = v77;
        v9 = (uint64_t)&v79;
        if ((_DWORD)v28 == -1)
        {
          v25 = v78;
          if ((_DWORD)v29 == -1)
            goto LABEL_49;
        }
        else
        {
          v25 = v78;
          if ((_DWORD)v29 == -1)
          {
            ((void (*)(char **, uint64_t))off_1E9D6E9B0[v28])(&v84, v19);
            *(_DWORD *)(v19 + 24) = -1;
            goto LABEL_49;
          }
        }
        v84 = (char *)v19;
        ((void (*)(char **, uint64_t, uint64_t))off_1E9D6E9D0[v29])(&v84, v19, v12);
LABEL_49:
        v30 = v79;
        v79 = 0;
        v31 = *(_DWORD **)(v19 + 32);
        *(_QWORD *)(v19 + 32) = v30;
        if (v31)
        {
          if (v31[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
            v32 = v80;
            if (v80)
            {
LABEL_53:
              v33 = *(_DWORD *)(v32 - 16);
              v34 = *(_DWORD *)(v32 - 12) + 1;
              *(_DWORD *)(v32 - 12) = v34;
              v35 = (v33 + v34);
              v36 = *(unsigned int *)(v32 - 4);
              if (v36 <= 0x400)
                goto LABEL_54;
              goto LABEL_59;
            }
LABEL_58:
            v34 = 1;
            *(_DWORD *)(v32 - 12) = 1;
            v35 = (*(_DWORD *)(v32 - 16) + 1);
            v36 = *(unsigned int *)(v32 - 4);
            if (v36 <= 0x400)
            {
LABEL_54:
              if (3 * v36 > 4 * v35)
                goto LABEL_62;
              if (!(_DWORD)v36)
              {
                v37 = 8;
LABEL_61:
                WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(&v80, v37, v19);
LABEL_62:
                v27 = v79;
                v79 = 0;
                if (!v27)
                  goto LABEL_66;
                goto LABEL_63;
              }
LABEL_60:
              v37 = (_DWORD)v36 << (6 * v34 >= (2 * v36));
              goto LABEL_61;
            }
LABEL_59:
            if (v36 > 2 * v35)
              goto LABEL_62;
            goto LABEL_60;
          }
          --v31[2];
        }
        v32 = v80;
        if (v80)
          goto LABEL_53;
        goto LABEL_58;
      }
      v23 = *(unsigned int *)v9;
      if ((_DWORD)v23 == -1)
        goto LABEL_123;
      v84 = &v83;
      if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E9A0[v23])(&v84, v19) & 1) == 0)
        break;
      v21 = v19;
LABEL_33:
      v18 = (v18 + v22) & v17;
      v19 = v16 + 40 * v18;
      v9 = v19 + 24;
      v20 = *(unsigned int *)(v19 + 24);
      ++v22;
      if (*(_DWORD *)(v19 + 24) == -1)
        goto LABEL_123;
    }
    if (!WebCore::operator==())
      goto LABEL_33;
    v25 = v78;
    v24 = v79;
    v79 = 0;
    v26 = *(_DWORD **)(v19 + 32);
    *(_QWORD *)(v19 + 32) = v24;
    a3 = v77;
    v9 = (uint64_t)&v79;
    if (!v26)
      goto LABEL_66;
    if (v26[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
      v27 = v79;
      v79 = 0;
      if (!v27)
        goto LABEL_66;
    }
    else
    {
      --v26[2];
      v27 = v79;
      v79 = 0;
      if (!v27)
        goto LABEL_66;
    }
LABEL_63:
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
LABEL_66:
    v38 = v12 + 40;
    v12 = v25;
    if (v38 != v25)
      break;
LABEL_26:
    if (v12 == v76)
      goto LABEL_77;
  }
  v12 = v38;
  while (1)
  {
    v39 = *(unsigned int *)(v12 + 24);
    if ((_DWORD)v39 == -1)
      break;
    v84 = (char *)&v79;
    if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E9C0[v39])(&v84, v12) & 1) == 0)
    {
      v40 = *(unsigned int *)(v12 + 24);
      if ((_DWORD)v40 == -1)
        break;
      v84 = (char *)&v79;
      if (!((unsigned int (*)(char **, uint64_t))off_1E9D6E9A0[v40])(&v84, v12))
        goto LABEL_26;
    }
    v12 += 40;
    if (v12 == v25)
    {
      v12 = v25;
      goto LABEL_26;
    }
  }
LABEL_123:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_124:
  atomic_store(1u, (unsigned int *)v9);
  WTF::fastFree((WTF *)v9, v6);
  v53 = *(_QWORD *)v12;
  if (*(_QWORD *)v12)
  {
LABEL_95:
    v54 = *(_DWORD *)(v53 - 8);
    goto LABEL_96;
  }
LABEL_94:
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v12, 8u);
  v53 = *(_QWORD *)v12;
  if (*(_QWORD *)v12)
    goto LABEL_95;
  v54 = 0;
LABEL_96:
  v55 = 0;
  v56 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
  v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
  v59 = (v58 >> 31) ^ v58;
  v60 = 1;
  while (2)
  {
    v61 = v59 & v54;
    v62 = (uint64_t *)(v53 + 16 * v61);
    v63 = *v62;
    if (*v62 == -1)
    {
      v55 = (uint64_t *)(v53 + 16 * v61);
LABEL_98:
      v59 = v60 + v61;
      ++v60;
      continue;
    }
    break;
  }
  if (!v63)
  {
    if (v55)
    {
      *v55 = 0;
      v55[1] = 0;
      --*(_DWORD *)(*(_QWORD *)v12 - 16);
      *v55 = v9;
    }
    else
    {
      *v62 = v9;
      v55 = (uint64_t *)(v53 + 16 * v61);
    }
    v70 = v80;
    v80 = 0;
    v71 = v55[1];
    v55[1] = v70;
    v84 = (char *)v71;
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)&v84, v6);
    if (*(_QWORD *)v12)
    {
      ++*(_DWORD *)(*(_QWORD *)v12 - 12);
      v72 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
        goto LABEL_111;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v72 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
LABEL_111:
        v73 = (*(_DWORD *)(v72 - 16) + *(_DWORD *)(v72 - 12));
        v74 = *(unsigned int *)(v72 - 4);
        if (v74 <= 0x400)
          goto LABEL_112;
        goto LABEL_117;
      }
    }
    v73 = *(unsigned int *)(v72 - 16);
    v74 = *(unsigned int *)(v72 - 4);
    if (v74 <= 0x400)
    {
LABEL_112:
      if (3 * v74 > 4 * v73)
        return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v80, v67);
      if (!(_DWORD)v74)
      {
        v75 = 8;
LABEL_119:
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v12, v75);
        return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v80, v67);
      }
LABEL_118:
      v75 = (_DWORD)v74 << (6 * *(_DWORD *)(v72 - 12) >= (2 * v74));
      goto LABEL_119;
    }
LABEL_117:
    if (v74 > 2 * v73)
      return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v80, v67);
    goto LABEL_118;
  }
  if (v63 != v9)
    goto LABEL_98;
  v64 = v53 + 16 * v61;
  v65 = v80;
  v80 = 0;
  v66 = *(_QWORD *)(v64 + 8);
  *(_QWORD *)(v64 + 8) = v65;
  v84 = (char *)v66;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)&v84, v6);
  if (v9)
  {
    do
    {
      v68 = __ldaxr((unsigned int *)v9);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, (unsigned int *)v9));
    if (!v69)
    {
      atomic_store(1u, (unsigned int *)v9);
      WTF::fastFree((WTF *)v9, v67);
    }
  }
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(&v80, v67);
}

uint64_t *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v10;
  unsigned int **v11;
  uint64_t v12;
  char v13;
  char *v14;
  char v15;

  v3 = *a1;
  if (!*a1)
    return a1;
  v4 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v4)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
    return a1;
  }
  v5 = *a1;
  while (1)
  {
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
      break;
    v14 = &v13;
    if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E9A0[v6])(&v14, v5) & 1) != 0)
      goto LABEL_5;
    v7 = *(_DWORD **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = 0;
    if (!v7)
      goto LABEL_11;
    if (v7[2] != 1)
    {
      --v7[2];
LABEL_11:
      v8 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v8 == -1)
        goto LABEL_4;
LABEL_14:
      ((void (*)(char *, uint64_t))off_1E9D6E9B0[v8])(&v15, v5);
      goto LABEL_4;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    v8 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v8 != -1)
      goto LABEL_14;
LABEL_4:
    *(_DWORD *)(v5 + 24) = -1;
LABEL_5:
    v5 += 40;
    if (!--v4)
      goto LABEL_15;
  }
  v10 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::add(v10, v11, v12);
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::add@<X0>(uint64_t *result@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int **v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  unsigned int **v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = *((_QWORD *)*a2 + 1);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v8;
    v18 = (unsigned int **)(v6 + 8 * v17);
    v19 = *v18;
    if (*v18 == (unsigned int *)-1)
    {
      v9 = (unsigned int **)(v6 + 8 * v17);
      goto LABEL_6;
    }
    if (!v19)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = *a2;
        v18 = v9;
      }
      *a2 = 0;
      result = (uint64_t *)*v18;
      *v18 = v10;
      if (!result)
        goto LABEL_17;
      do
      {
        v21 = __ldaxr((unsigned int *)result);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)result));
      if (!v22)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        v23 = *v4;
        if (*v4)
        {
LABEL_18:
          ++*(_DWORD *)(v23 - 12);
          v24 = *v4;
          if (*v4)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else
      {
LABEL_17:
        v23 = *v4;
        if (*v4)
          goto LABEL_18;
      }
      *(_DWORD *)(v23 - 12) = 1;
      v24 = *v4;
      if (*v4)
      {
LABEL_19:
        v25 = (*(_DWORD *)(v24 - 16) + *(_DWORD *)(v24 - 12));
        v26 = *(unsigned int *)(v24 - 4);
        if (v26 <= 0x400)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      v25 = *(unsigned int *)(v24 - 16);
      v26 = *(unsigned int *)(v24 - 4);
      if (v26 <= 0x400)
      {
LABEL_20:
        if (3 * v26 > 4 * v25)
        {
LABEL_33:
          *(_QWORD *)a3 = v18;
          *(_QWORD *)(a3 + 8) = v24 + 8 * v26;
          *(_BYTE *)(a3 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v26)
        {
          result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(v4, 8u, v18);
          v18 = (unsigned int **)result;
          v24 = *v4;
          if (!*v4)
          {
LABEL_23:
            v26 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v26 = *(unsigned int *)(v24 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(v4, (_DWORD)v26 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v26)), v18);
        v18 = (unsigned int **)result;
        v24 = *v4;
        if (!*v4)
          goto LABEL_23;
        goto LABEL_32;
      }
LABEL_30:
      if (v26 > 2 * v25)
        goto LABEL_33;
      goto LABEL_31;
    }
    if (*((_QWORD *)v19 + 1) == v11)
      break;
LABEL_6:
    v15 = i + v17;
  }
  if ((v7 & 1) != 0)
    v20 = 0;
  else
    v20 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v6 + 8 * v20;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebStorageNamespaceProvider,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (unsigned int **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::WeakHashMap<WebCore::Page,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_23;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      v7 = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
      {
        *v6 = 0;
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          WTF::fastFree((WTF *)v7, a2);
        }
        *v6 = -1;
        WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)(v3 + 16 * v4 + 8), a2);
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v17 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
        v19 = (v18 | HIWORD(v18)) + 1;
        if (v19 > 0x400)
        {
          if (v19 > 2 * v13)
            goto LABEL_36;
        }
        else if (3 * v19 > 4 * v13)
        {
LABEL_34:
          if ((double)v19 * 0.604166667 > (double)v13)
          {
LABEL_38:
            if (v19 <= 8)
              v20 = 8;
            else
              v20 = v19;
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v20);
            v3 = *(_QWORD *)a1;
            *(_DWORD *)(a1 + 8) = 0;
            if (!v3)
            {
              v15 = 0;
              goto LABEL_27;
            }
LABEL_24:
            v15 = *(_DWORD *)(v3 - 12);
            v16 = 0x7FFFFFFF;
            if (v15 >= 0x7FFFFFFF)
              goto LABEL_28;
            goto LABEL_27;
          }
LABEL_37:
          LODWORD(v19) = 2 * v19;
          goto LABEL_38;
        }
        LODWORD(v19) = 2 * v19;
        if (v19 <= 0x400)
          goto LABEL_34;
LABEL_36:
        if ((double)v19 * 0.416666667 > (double)v13)
          goto LABEL_38;
        goto LABEL_37;
      }
LABEL_23:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_24;
    }
  }
  v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_27:
  v16 = v15;
LABEL_28:
  *(_DWORD *)(a1 + 12) = 2 * v16;
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    v7 = 16 * a2;
    v9 = WTF::fastMalloc((WTF *)(v7 + 16));
    v10 = (void *)(v9 + 16);
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  v6 = 0;
  v7 = 16 * a2;
  v9 = WTF::fastMalloc((WTF *)(v7 + 16));
  v10 = (void *)(v9 + 16);
  if (a2)
LABEL_3:
    bzero(v10, v7);
LABEL_4:
  *a1 = (uint64_t)v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (unsigned int **)(v4 + 16 * v11);
      v13 = *v12;
      if (*v12 != (unsigned int *)-1)
      {
        if (v13)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          v27 = (uint64_t *)(v26 + 8);
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)(v26 + 8), v8);
          v29 = *(unsigned int **)v26;
          *(_QWORD *)v26 = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, v28);
            }
          }
          v32 = *v12;
          *v12 = 0;
          *(_QWORD *)v26 = v32;
          v33 = (uint64_t *)(v4 + 16 * v11);
          *v27 = 0;
          v34 = v33[1];
          *++v33 = 0;
          *v27 = v34;
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(v33, v28);
          v14 = *v12;
          *v12 = 0;
          if (!v14)
            goto LABEL_6;
          do
          {
            v35 = __ldaxr(v14);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v14));
          if (v36)
            goto LABEL_6;
        }
        else
        {
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)(v4 + 16 * v11 + 8), v8);
          v14 = *v12;
          *v12 = 0;
          if (!v14)
            goto LABEL_6;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (v16)
            goto LABEL_6;
        }
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v8);
      }
LABEL_6:
      if (++v11 == v5)
        goto LABEL_29;
    }
  }
  if (v4)
LABEL_29:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char v37;
  char *v38;

  *a1 = 0;
  if (!*a2)
    return (uint64_t)a1;
  v2 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v2)
    return (uint64_t)a1;
  v4 = (v2 - 1) | ((v2 - 1) >> 1) | ((((_DWORD)v2 - 1) | ((v2 - 1) >> 1)) >> 2);
  v5 = v4 | (v4 >> 4) | ((v4 | (v4 >> 4)) >> 8);
  v6 = (v5 | HIWORD(v5)) + 1;
  if (v6 > 0x400)
  {
    if (v6 > 2 * v2)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (3 * v6 <= 4 * v2)
  {
LABEL_7:
    LODWORD(v6) = 2 * v6;
    if (v6 <= 0x400)
      goto LABEL_8;
LABEL_10:
    if ((double)v6 * 0.416666667 > (double)v2)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v6 * 0.604166667 <= (double)v2)
LABEL_11:
    LODWORD(v6) = 2 * v6;
LABEL_12:
  if (v6 <= 8)
    v7 = 8;
  else
    v7 = v6;
  v8 = WTF::fastMalloc((WTF *)(40 * v7 + 16));
  bzero((void *)(v8 + 16), 40 * v7);
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 12) = v2;
  *(_DWORD *)(*a1 - 16) = 0;
  v9 = *a2;
  if (!*a2)
  {
    v15 = 0;
    LODWORD(v10) = 0;
    goto LABEL_27;
  }
  v10 = *(unsigned int *)(v9 - 4);
  v11 = v9 + 40 * v10;
  if (!*(_DWORD *)(v9 - 12))
  {
    v15 = v9 + 40 * v10;
LABEL_27:
    v11 = v9 + 40 * v10;
    if (v9)
      goto LABEL_31;
    goto LABEL_34;
  }
  if (!(_DWORD)v10)
  {
    v15 = *a2;
    if (v9)
      goto LABEL_31;
    goto LABEL_34;
  }
  v12 = 40 * v10;
  while (1)
  {
    v13 = *(unsigned int *)(v9 + 24);
    if ((_DWORD)v13 == -1)
      break;
    v38 = &v37;
    if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E9C0[v13])(&v38, v9) & 1) == 0)
    {
      v14 = *(unsigned int *)(v9 + 24);
      if ((_DWORD)v14 == -1)
        break;
      v38 = &v37;
      if (!((unsigned int (*)(char **, uint64_t))off_1E9D6E9A0[v14])(&v38, v9))
        goto LABEL_30;
    }
    v9 += 40;
    v12 -= 40;
    if (!v12)
    {
      v9 = v11;
LABEL_30:
      v15 = v9;
      v9 = *a2;
      if (*a2)
      {
LABEL_31:
        v16 = v9 + 40 * *(unsigned int *)(v9 - 4);
        if (v16 == v15)
          return (uint64_t)a1;
LABEL_35:
        v35 = v16;
        while (2)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::computeHash<WebCore::SecurityOriginData>(v15);
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v22 = v17 + 40 * (v19 & v18);
            v23 = *(unsigned int *)(v22 + 24);
            if ((_DWORD)v23 == -1)
              goto LABEL_65;
            v38 = &v37;
            v24 = ((uint64_t (*)(char **, uint64_t))off_1E9D6E9C0[v23])(&v38, v17 + 40 * v21);
            v19 = ++v20 + v21;
          }
          while (!v24);
          v25 = *(unsigned int *)(v22 + 24);
          v26 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v25 == -1)
          {
            if ((_DWORD)v26 != -1)
              goto LABEL_48;
          }
          else
          {
            if ((_DWORD)v26 == -1)
            {
              ((void (*)(char **, uint64_t))off_1E9D6E9B0[v25])(&v38, v17 + 40 * v21);
              *(_DWORD *)(v22 + 24) = -1;
              goto LABEL_49;
            }
LABEL_48:
            v38 = (char *)(v17 + 40 * v21);
            ((void (*)(char **, char *, uint64_t))off_1E9D6E9D0[v26])(&v38, v38, v15);
          }
LABEL_49:
          v27 = *(_QWORD *)(v15 + 32);
          if (v27)
            ++*(_DWORD *)(v27 + 8);
          v28 = v17 + 40 * v21;
          v29 = *(_DWORD **)(v28 + 32);
          *(_QWORD *)(v28 + 32) = v27;
          if (v29)
          {
            if (v29[2] != 1)
            {
              --v29[2];
              goto LABEL_54;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            v30 = v15 + 40;
            v15 = v11;
            if (v30 != v11)
            {
LABEL_57:
              v15 = v30;
              while (1)
              {
                v31 = *(unsigned int *)(v15 + 24);
                if ((_DWORD)v31 == -1)
                  goto LABEL_65;
                v38 = &v37;
                if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E9C0[v31])(&v38, v15) & 1) == 0)
                {
                  v32 = *(unsigned int *)(v15 + 24);
                  if ((_DWORD)v32 == -1)
                    goto LABEL_65;
                  v38 = &v37;
                  if (!((unsigned int (*)(char **, uint64_t))off_1E9D6E9A0[v32])(&v38, v15))
                    break;
                }
                v15 += 40;
                if (v15 == v11)
                {
                  v15 = v11;
                  break;
                }
              }
            }
          }
          else
          {
LABEL_54:
            v30 = v15 + 40;
            v15 = v11;
            if (v30 != v11)
              goto LABEL_57;
          }
          if (v15 == v35)
            return (uint64_t)a1;
          continue;
        }
      }
LABEL_34:
      v16 = 0;
      if (!v15)
        return (uint64_t)a1;
      goto LABEL_35;
    }
  }
LABEL_65:
  v34 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v34);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v41;
  char v42;
  char *v43;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v38 = v4;
    while (1)
    {
      v14 = v4 + 40 * v11;
      v15 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v15 == -1)
      {
LABEL_49:
        std::__throw_bad_variant_access[abi:sn180100]();
        JUMPOUT(0x1D80D779CLL);
      }
      v43 = &v42;
      if ((((uint64_t (*)(char **, uint64_t))off_1E9D6E9A0[v15])(&v43, v4 + 40 * v11) & 1) == 0)
        break;
LABEL_9:
      if (++v11 == v13)
        goto LABEL_47;
    }
    v16 = *(unsigned int *)(v14 + 24);
    if ((_DWORD)v16 == -1)
      goto LABEL_49;
    v43 = &v42;
    if (!((unsigned int (*)(char **, uint64_t))off_1E9D6E9C0[v16])(&v43, v4 + 40 * v11))
    {
      v20 = *a1;
      v41 = v12;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 8);
      else
        v21 = 0;
      v22 = WTF::computeHash<WebCore::SecurityOriginData>(v4 + 40 * v11);
      v23 = 0;
      do
      {
        v24 = v22 & v21;
        v12 = v20 + 40 * (v22 & v21);
        v25 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v25 == -1)
          goto LABEL_49;
        v43 = &v42;
        v26 = ((uint64_t (*)(char **, uint64_t))off_1E9D6E9C0[v25])(&v43, v20 + 40 * v24);
        v22 = ++v23 + v24;
      }
      while (!v26);
      v27 = v20 + 40 * v24;
      v30 = *(_DWORD **)(v27 + 32);
      v29 = (_QWORD *)(v27 + 32);
      v28 = v30;
      *v29 = 0;
      v4 = v38;
      if (v30)
      {
        if (v28[2] != 1)
        {
          --v28[2];
          goto LABEL_28;
        }
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
        v31 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v31 == -1)
        {
LABEL_30:
          *(_BYTE *)v12 = 0;
          *(_DWORD *)(v12 + 24) = -1;
          v32 = *(unsigned int *)(v14 + 24);
          if ((_DWORD)v32 != -1)
          {
            ((void (*)(char **, uint64_t, uint64_t))off_1E9D6E9E0[v32])(&v43, v12, v14);
            *(_DWORD *)(v12 + 24) = v32;
          }
          v33 = v38 + 40 * v11;
          v34 = *(_QWORD *)(v33 + 32);
          *(_QWORD *)(v33 + 32) = 0;
          *v29 = v34;
          v35 = *(_DWORD **)(v33 + 32);
          *(_QWORD *)(v33 + 32) = 0;
          v13 = v5;
          if (v35)
          {
            if (v35[2] != 1)
            {
              --v35[2];
              goto LABEL_35;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
            v36 = *(unsigned int *)(v14 + 24);
            if ((_DWORD)v36 == -1)
            {
LABEL_37:
              *(_DWORD *)(v14 + 24) = -1;
              if (v14 != a3)
                v12 = v41;
              goto LABEL_9;
            }
          }
          else
          {
LABEL_35:
            v36 = *(unsigned int *)(v14 + 24);
            if ((_DWORD)v36 == -1)
              goto LABEL_37;
          }
          ((void (*)(char **, uint64_t))off_1E9D6E9B0[v36])(&v43, v14);
          goto LABEL_37;
        }
      }
      else
      {
LABEL_28:
        v31 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v31 == -1)
          goto LABEL_30;
      }
      ((void (*)(char **, uint64_t))off_1E9D6E9B0[v31])(&v43, v12);
      goto LABEL_30;
    }
    v17 = v4 + 40 * v11;
    v18 = *(_DWORD **)(v17 + 32);
    *(_QWORD *)(v17 + 32) = 0;
    if (v18)
    {
      if (v18[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        v19 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v19 == -1)
        {
LABEL_8:
          *(_DWORD *)(v14 + 24) = -1;
          goto LABEL_9;
        }
LABEL_41:
        ((void (*)(char **, uint64_t))off_1E9D6E9B0[v19])(&v43, v4 + 40 * v11);
        goto LABEL_8;
      }
      --v18[2];
    }
    v19 = *(unsigned int *)(v14 + 24);
    if ((_DWORD)v19 == -1)
      goto LABEL_8;
    goto LABEL_41;
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_47:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

void WebStorageTrackerClient::~WebStorageTrackerClient(WebStorageTrackerClient *this)
{
  JUMPOUT(0x1D82A8D20);
}

void WebStorageTrackerClient::dispatchDidModifyOrigin(WebStorageTrackerClient *this, WebCore::SecurityOrigin *a2)
{
  id v2;

  v2 = -[WebSecurityOrigin _initWithWebCoreSecurityOrigin:]([WebSecurityOrigin alloc], "_initWithWebCoreSecurityOrigin:", a2);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotificationName:object:", CFSTR("WebStorageDidModifyOriginNotification"), v2);
  if (v2)
    CFRelease(v2);
}

void sub_1D80D781C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF *WebStorageTrackerClient::dispatchDidModifyOrigin(WebStorageTrackerClient *this, const WTF::String *a2)
{
  WTF *result;
  StringImpl *v4;
  WTF *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::SecurityOrigin *v24;
  WTF *v25;
  WTF *v26;
  char v27;
  _BYTE v28[24];
  int v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WebCore::SecurityOriginData::fromDatabaseIdentifier();
  if (!v30)
    return result;
  if (WTF::isMainThread(result))
  {
    WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)v28);
    result = (WTF *)(*(uint64_t (**)(WebStorageTrackerClient *, WTF *))(*(_QWORD *)this + 32))(this, v26);
    v5 = v26;
    v26 = 0;
    if (!v5)
      goto LABEL_17;
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (v7)
      goto LABEL_17;
    atomic_store(1u, (unsigned int *)v5);
    v8 = (WTF::StringImpl *)*((_QWORD *)v5 + 6);
    *((_QWORD *)v5 + 6) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
    v18 = (WTF::StringImpl *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v4);
      else
        *(_DWORD *)v18 -= 2;
    }
    v21 = *((unsigned int *)v5 + 8);
    if ((_DWORD)v21 != -1)
      ((void (*)(WTF **, char *))off_1E9D6EA28[v21])(&v25, (char *)v5 + 8);
  }
  else
  {
    WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)v28);
    WebCore::SecurityOrigin::isolatedCopy(v24);
    v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v9 = off_1E9D6EA48;
    v10 = v25;
    v25 = 0;
    v26 = v9;
    *((_QWORD *)v9 + 1) = v10;
    WTF::callOnMainThread();
    result = v26;
    v26 = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    v11 = v25;
    v25 = 0;
    if (!v11)
      goto LABEL_14;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v16 = (WTF::StringImpl *)*((_QWORD *)v11 + 6);
      *((_QWORD *)v11 + 6) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v4);
        else
          *(_DWORD *)v16 -= 2;
      }
      v19 = (WTF::StringImpl *)*((_QWORD *)v11 + 5);
      *((_QWORD *)v11 + 5) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v4);
        else
          *(_DWORD *)v19 -= 2;
      }
      v22 = *((unsigned int *)v11 + 8);
      if ((_DWORD)v22 != -1)
        ((void (*)(char *, char *))off_1E9D6EA28[v22])(&v27, (char *)v11 + 8);
      *((_DWORD *)v11 + 8) = -1;
      result = (WTF *)WTF::fastFree(v11, v4);
      v5 = v24;
      if (!v24)
        goto LABEL_17;
    }
    else
    {
LABEL_14:
      v5 = v24;
      if (!v24)
        goto LABEL_17;
    }
    do
    {
      v14 = __ldaxr((unsigned int *)v5);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v5));
    if (v15)
      goto LABEL_17;
    atomic_store(1u, (unsigned int *)v5);
    v17 = (WTF::StringImpl *)*((_QWORD *)v5 + 6);
    *((_QWORD *)v5 + 6) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v4);
      else
        *(_DWORD *)v17 -= 2;
    }
    v20 = (WTF::StringImpl *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v4);
      else
        *(_DWORD *)v20 -= 2;
    }
    v23 = *((unsigned int *)v5 + 8);
    if ((_DWORD)v23 != -1)
      ((void (*)(char *, char *))off_1E9D6EA28[v23])(&v27, (char *)v5 + 8);
  }
  *((_DWORD *)v5 + 8) = -1;
  result = (WTF *)WTF::fastFree(v5, v4);
LABEL_17:
  if (v30)
  {
    if (v29 != -1)
      return (WTF *)((uint64_t (*)(WTF **, _BYTE *))off_1E9D6EA28[v29])(&v26, v28);
  }
  return result;
}

void sub_1D80D7B70(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  uint64_t v19;
  StringImpl *v20;

  v19 = a11;
  a11 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a10, a2);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a9, v20);
  if (a18)
  {
    if (a16 != -1)
    {
      ((void (*)(uint64_t *, char *))off_1E9D6EA28[a16])(&a11, &a13);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebStorageTrackerClient::dispatchDidModifyOrigin(WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, StringImpl *a2)
{
  *a1 = off_1E9D6EA48;
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebStorageTrackerClient::dispatchDidModifyOrigin(WTF::String const&)::$_0,void>::~CallableWrapper(WTF *a1, StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E9D6EA48;
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebStorageTrackerClient::dispatchDidModifyOrigin(WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v4;

  {
    v1 = (_QWORD *)WebStorageTrackerClient::sharedWebStorageTrackerClient(void)::sharedClient;
    v2 = *(void **)WebStorageTrackerClient::sharedWebStorageTrackerClient(void)::sharedClient;
  }
  else
  {
    v4 = a1;
    v1 = (_QWORD *)operator new();
    a1 = v4;
    v2 = &unk_1E9D6EA00;
    *v1 = &unk_1E9D6EA00;
    WebStorageTrackerClient::sharedWebStorageTrackerClient(void)::sharedClient = (uint64_t)v1;
  }
  return (*((uint64_t (**)(_QWORD *, _QWORD))v2 + 4))(v1, *(_QWORD *)(a1 + 8));
}

void sub_1D80D7EAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF *v9;

  WTF::fastFree(v9, a2);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1D80D7EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1D80D80D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _DWORD *v15;

  v15 = *(_DWORD **)(v13 - 24);
  *(_QWORD *)(v13 - 24) = 0;
  if (v15)
  {
    if (v15[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      std::optional<WebCore::SimpleRange>::~optional(&a13);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
      _Unwind_Resume(a1);
    }
    --v15[2];
    std::optional<WebCore::SimpleRange>::~optional(&a13);
    WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
    _Unwind_Resume(a1);
  }
  std::optional<WebCore::SimpleRange>::~optional(&a13);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&a9);
  _Unwind_Resume(a1);
}

void sub_1D80D8430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKitInitialize()
{
  uint64_t v0;
  const __CFAllocator *v1;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v3;
  __CFRunLoop *v4;
  WebCore *v5;

  if ((WebKitInitialize::webkitInitialized & 1) == 0)
  {
    WebKitInitialize::webkitInitialized = 1;
    InitWebCoreThreadSystemInterface();
    +[WebView enableWebThread](WebView, "enableWebThread");
    if (!WebPlatformStrategies::initializeIfNecessary(void)::platformStrategies)
    {
      v0 = operator new();
      *(_OWORD *)(v0 + 8) = 0u;
      *(_OWORD *)(v0 + 24) = 0u;
      *(_OWORD *)(v0 + 40) = 0u;
      *(_QWORD *)v0 = &off_1E9D6E318;
      *(_QWORD *)(v0 + 56) = &unk_1E9D6E458;
      WebPlatformStrategies::initializeIfNecessary(void)::platformStrategies = v0;
      WebCore::setPlatformStrategies();
    }
    v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Current = CFAbsoluteTimeGetCurrent();
    v3 = CFRunLoopTimerCreate(v1, Current, 0.0, 0, 0, (CFRunLoopTimerCallBack)LoadWebLocalizedStringsTimerCallback, 0);
    v4 = CFRunLoopGetCurrent();
    CFRunLoopAddTimer(v4, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    if (v3)
      CFRelease(v3);
    WebCore::initializeHTTPConnectionSettingsOnStartup(v5);
  }
}

void sub_1D80D8540(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

float WebKitGetMinimumZoomFontSize()
{
  return 15.0;
}

void WebKitGetLastLineBreakInBuffer(uint64_t a1, StringImpl *a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int16 v20;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  _BYTE *v26;
  char v27;
  char v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::TextBreakIteratorCache *isMainThread;
  uint64_t v34;
  StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v40;
  _BOOL4 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  _QWORD v83[2];
  _QWORD v84[2];
  WTF::StringImpl ***v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  int v91;
  char v92;
  char v93;
  _BYTE *v94;
  __int16 v95;
  unsigned int v96;
  _BYTE v97[2];
  WTF::StringImpl *v98;
  _BYTE v99[40];
  unsigned int v100;
  uint64_t v101;
  char v102;
  WTF::StringImpl *v103;
  char v104;
  WTF::StringImpl **v105;
  _QWORD *v106;
  unsigned int v107;
  WTF::StringImpl *v108;
  char v109;
  WTF::StringImpl ***v110;
  _BYTE v111[40];
  unsigned int v112;
  uint64_t v113;
  char v114;
  WTF::StringImpl *v115;
  char v116;
  uint64_t v117;

  v3 = (int)a2;
  v4 = 0;
  v117 = *MEMORY[0x1E0C80C00];
  v86 = a1;
  v87 = a3;
  v88 = 0;
  LOBYTE(v89) = 0;
  v93 = 0;
  v94 = 0;
  v95 = 256;
  v96 = 0;
  v5 = MEMORY[0x1E0DCE5A8];
  v78 = (int)a2;
  while (1)
  {
    v7 = v4;
    v16 = v4 == 0;
    v8 = v86;
    v6 = v87;
    LOBYTE(v4) = BYTE2(v96);
    v9 = !v16;
    if (HIWORD(v96))
      v9 = 1;
    if ((v87 & 0xFF00000000) != 0)
    {
      if ((v9 & 1) != 0)
      {
        v10 = v7 - 2;
        if (v7 >= 2)
        {
          if (v87 <= v10)
            goto LABEL_227;
          v11 = *(_BYTE *)(v86 + v10);
          goto LABEL_25;
        }
        v11 = v96;
        if (!v7)
          goto LABEL_27;
LABEL_24:
        v7 = 1;
LABEL_25:
        if (v87 <= v7 - 1)
          goto LABEL_227;
        LOBYTE(v4) = *(_BYTE *)(v86 + v7 - 1);
LABEL_27:
        if (v7 >= v87)
          goto LABEL_3;
        while (1)
        {
          v15 = v4;
          v4 = *(unsigned __int8 *)(v86 + v7);
          v16 = v4 > 0x20 || ((1 << v4) & 0x100000600) == 0;
          if (!v16)
          {
LABEL_2:
            LODWORD(v6) = v7;
            goto LABEL_3;
          }
          if (v15 != 45)
            break;
          if (v4 - 48 > 9)
          {
            if (v4 < 0x21)
              goto LABEL_30;
            goto LABEL_29;
          }
          if ((v11 - 48) < 0xAu || ((v11 | 0x20) - 97) < 0x1Au)
            goto LABEL_2;
LABEL_30:
          ++v7;
          v11 = v15;
          if (v87 == v7)
            goto LABEL_3;
        }
        if (v15 < 0x21u || v4 <= 0x20)
          goto LABEL_30;
LABEL_29:
        if (((*(unsigned __int8 *)(v5 + 28 * (v15 - 33) + ((v4 - 33) >> 3)) >> ((v4 - 33) & 7)) & 1) != 0)
          goto LABEL_2;
        goto LABEL_30;
      }
      if (v87 >= 2uLL)
      {
        v11 = v96;
        goto LABEL_24;
      }
      goto LABEL_3;
    }
    if ((v9 & 1) == 0)
    {
      if (v87 < 2uLL)
        goto LABEL_3;
      v7 = 1;
      v13 = v96;
      v14 = 0;
      goto LABEL_48;
    }
    v12 = v7 - 2;
    if (v7 < 2)
      break;
    if (v87 <= v12)
      goto LABEL_227;
    v13 = *(_WORD *)(v86 + 2 * v12);
    v14 = v7 - 1;
    if (v87 <= v7 - 1)
      goto LABEL_227;
LABEL_48:
    v17 = (_WORD *)(v86 + 2 * v14);
    if (v7 < v87)
      goto LABEL_49;
LABEL_3:
    v4 = v6 + 1;
    if ((int)v6 >= v3)
    {
      if (v93)
        WTF::CachedTextBreakIterator::~CachedTextBreakIterator(&v89);
      v70 = v88;
      v88 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, a2);
        else
          *(_DWORD *)v70 -= 2;
      }
      return;
    }
  }
  v13 = v96;
  if (v7)
  {
    v7 = 1;
    v14 = 0;
    if (!(_DWORD)v87)
      goto LABEL_227;
    goto LABEL_48;
  }
  v17 = (_WORD *)&v96 + 1;
  if (!(_DWORD)v87)
    goto LABEL_3;
LABEL_49:
  v18 = 0;
  v81 = 0;
  LOWORD(v19) = *v17;
  v79 = v86 + 4;
  v80 = 0;
  while (2)
  {
    v20 = v19;
    v19 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v19 <= 0x20 && ((1 << v19) & 0x100000600) != 0)
    {
LABEL_216:
      LODWORD(v6) = v7;
LABEL_217:
      v3 = v78;
      v5 = MEMORY[0x1E0DCE5A8];
      goto LABEL_3;
    }
    if (v20 == 45)
    {
      if (v19 - 48 <= 9)
      {
        if ((unsigned __int16)(v13 - 48) < 0xAu || (unsigned __int16)((v13 | 0x20) - 97) < 0x1Au)
          goto LABEL_216;
LABEL_81:
        v22 = 0;
        v20 = 45;
LABEL_54:
        ++v7;
        v13 = v20;
        v18 = v22;
        if (v7 >= v6)
          goto LABEL_217;
        continue;
      }
      if (v19 < 0x100)
      {
        if (v19 < 0x21)
          goto LABEL_81;
        goto LABEL_71;
      }
    }
    else if ((unsigned __int16)(v19 | v20) < 0x100u)
    {
      v22 = 0;
      if (v20 < 0x21u || v19 <= 0x20)
        goto LABEL_54;
LABEL_71:
      if (((*(unsigned __int8 *)(MEMORY[0x1E0DCE5A8] + 28 * (v20 - 33) + ((v19 - 33) >> 3)) >> ((v19 - 33) & 7)) & 1) != 0)
        goto LABEL_216;
      v22 = 0;
      goto LABEL_54;
    }
    break;
  }
  if (!(_WORD)v18)
    v18 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v20);
  v23 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v19);
  v22 = v23;
  v24 = v18 | v23;
  if ((((unsigned __int16)v18 | (unsigned __int16)v23) & 0xFE7E) == 0)
    goto LABEL_54;
  if ((v24 & 0xFFFE) == 2)
    goto LABEL_216;
  if ((((unsigned __int16)v18 | (unsigned __int16)v23) & 0x8000) == 0 && (v24 & 0xC0) != 0)
    goto LABEL_54;
  if ((_DWORD)v23 == 4)
  {
    v22 = v18;
    goto LABEL_54;
  }
  if ((((unsigned __int16)v18 | (unsigned __int16)v23) & 0x8000) == 0 && (v24 & 0x38) != 0)
  {
    if ((unsigned __int16)v18 == 8 || (_DWORD)v23 == 16 || (_DWORD)v23 == 32)
      goto LABEL_54;
    if ((v24 & 2) != 0)
      goto LABEL_216;
  }
  v25 = v80;
  if (v81 && v80 >= v7)
  {
    if (v7 < v80)
    {
LABEL_189:
      v64 = v6 - 1;
      if (v6 - 1 >= v25)
        v64 = v25;
      if (v7 < v64)
      {
        v65 = v25;
        v66 = v7 + 1;
        if (v6 <= v7 + 1)
          goto LABEL_227;
        v67 = *(unsigned __int16 *)(v8 + 2 * v66);
        if (v67 > 0xFF || (v67 | 0x20) - 97 <= 0x19)
        {
          if (v66 == v64)
          {
LABEL_196:
            v7 = v64;
          }
          else
          {
            while (1)
            {
              if (v6 <= v7 + 2)
                goto LABEL_227;
              v68 = *(unsigned __int16 *)(v79 + 2 * v7);
              if (v68 <= 0xFF && (v68 | 0x20) - 97 > 0x19)
                break;
              if (v64 - 1 == ++v7)
                goto LABEL_196;
            }
            ++v7;
          }
          v20 = v19;
        }
        v25 = v65;
      }
    }
LABEL_199:
    v80 = v25;
    if (v7 == v25)
    {
      if (v20 > 0x20u || ((1 << v20) & 0x100000600) == 0)
      {
        LODWORD(v6) = v25;
        goto LABEL_217;
      }
      v81 = 1;
      v7 = v25;
    }
    else
    {
      v81 = 1;
    }
    goto LABEL_54;
  }
  while (2)
  {
    if (!HIWORD(v96))
    {
      v26 = v97;
      if (!v93)
      {
        v75 = 0;
        v26 = v97;
        goto LABEL_109;
      }
LABEL_99:
      if (v26 == v94)
        goto LABEL_184;
      v27 = v95;
      v28 = HIBYTE(v95);
      v29 = v88;
      if (v88)
      {
        v30 = *(_DWORD *)v88;
        *(_DWORD *)v88 += 2;
        if (v30)
        {
          *(_DWORD *)v29 = v30;
        }
        else
        {
          v23 = WTF::StringImpl::destroy(v29, a2);
          if (!v93)
            goto LABEL_94;
        }
      }
      WTF::CachedTextBreakIterator::~CachedTextBreakIterator(&v89);
      v93 = 0;
LABEL_94:
      v94 = 0;
      LOBYTE(v95) = v27;
      HIBYTE(v95) = v28;
      continue;
    }
    break;
  }
  v26 = &v97[2 * ((_WORD)v96 == 0) - 4];
  if (v93)
    goto LABEL_99;
  if ((_WORD)v96)
    v31 = 2;
  else
    v31 = 1;
  v75 = v31;
LABEL_109:
  v73 = v86;
  v74 = v87;
  v32 = v95;
  v76 = HIBYTE(v95);
  isMainThread = (WTF::TextBreakIteratorCache *)WTF::isMainThread((WTF *)v23);
  if (!(_DWORD)isMainThread
    || (v34 = WTF::TextBreakIteratorCache::singleton(isMainThread),
        v82 = v32,
        v36 = *(_QWORD *)v34,
        v72 = v34,
        v37 = *(unsigned int *)(v34 + 12),
        !(_DWORD)v37))
  {
LABEL_145:
    WTF::TextBreakIterator::TextBreakIterator();
LABEL_146:
    v99[0] = 0;
    v100 = -1;
    v51 = v112;
    if (v112 == -1)
    {
      v52 = 0xFFFFFFFFLL;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _BYTE *))off_1E9D6EAA0[v112])(v84, v99, v111);
      v100 = v51;
      v52 = v112;
    }
    v101 = v113;
    v102 = v114;
    v103 = v115;
    v104 = 1;
    v115 = 0;
    if (v52 != 0xFFFFFFFFLL)
      ((void (*)(WTF::StringImpl ***, _BYTE *))off_1E9D6EA80[v52])(&v105, v111);
    if (v93)
    {
      LOBYTE(v105) = 0;
      v109 = 0;
      std::__optional_copy_assign_base<WTF::TextBreakIterator,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v110, (uint64_t)&v98);
      std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>((uint64_t)&v98, (uint64_t)&v105);
      std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>((uint64_t)&v89, (uint64_t)&v110);
      if (!v116)
        goto LABEL_159;
      v54 = v115;
      v115 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::destroy(v54, v53);
          v55 = v112;
          if (v112 == -1)
            goto LABEL_158;
          goto LABEL_157;
        }
        *(_DWORD *)v54 -= 2;
      }
      v55 = v112;
      if (v112 == -1)
      {
LABEL_158:
        v112 = -1;
LABEL_159:
        if (!v109)
          goto LABEL_183;
        v56 = v108;
        v108 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::destroy(v56, v53);
            v57 = v107;
            if (v107 == -1)
              goto LABEL_183;
            goto LABEL_182;
          }
          *(_DWORD *)v56 -= 2;
        }
        v57 = v107;
        if (v107 == -1)
        {
LABEL_183:
          WTF::CachedTextBreakIterator::~CachedTextBreakIterator(&v98);
          v94 = v26;
          if (!v93)
            goto LABEL_227;
LABEL_184:
          if (!v92)
            goto LABEL_227;
          LODWORD(v98) = v7 - 1;
          v105 = &v98;
          if (v91 == -1)
            goto LABEL_226;
          v110 = &v105;
          v63 = ((uint64_t (*)(WTF::StringImpl ****, uint64_t *))off_1E9D6EB20[v91])(&v110, &v90);
          if (v81 == BYTE4(v63))
          {
            if (v81)
            {
LABEL_188:
              v25 = v63;
              if (v7 >= v63)
                goto LABEL_199;
              goto LABEL_189;
            }
          }
          else if (!v81)
          {
            goto LABEL_188;
          }
          v81 = 0;
          goto LABEL_54;
        }
LABEL_182:
        ((void (*)(_QWORD *, _QWORD **))off_1E9D6EA80[v57])(v84, &v106);
        goto LABEL_183;
      }
LABEL_157:
      ((void (*)(_QWORD *, _BYTE *))off_1E9D6EA80[v55])(v84, v111);
      goto LABEL_158;
    }
    LOBYTE(v110) = 0;
    v116 = 0;
    std::__optional_copy_assign_base<WTF::TextBreakIterator,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v89, (uint64_t)&v98);
    std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>((uint64_t)&v98, (uint64_t)&v110);
    if (v116)
    {
      v59 = v115;
      v115 = 0;
      if (!v59)
        goto LABEL_169;
      if (*(_DWORD *)v59 != 2)
      {
        *(_DWORD *)v59 -= 2;
LABEL_169:
        v60 = v112;
        if (v112 == -1)
          goto LABEL_171;
        goto LABEL_170;
      }
      WTF::StringImpl::destroy(v59, v58);
      v60 = v112;
      if (v112 != -1)
LABEL_170:
        ((void (*)(WTF::StringImpl ***, _BYTE *))off_1E9D6EA80[v60])(&v105, v111);
    }
LABEL_171:
    if (!v104)
    {
LABEL_178:
      v93 = 1;
      goto LABEL_183;
    }
    v61 = v103;
    v103 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::destroy(v61, v58);
        v62 = v100;
        if (v100 == -1)
          goto LABEL_177;
        goto LABEL_176;
      }
      *(_DWORD *)v61 -= 2;
    }
    v62 = v100;
    if (v100 == -1)
    {
LABEL_177:
      v100 = -1;
      v104 = 0;
      goto LABEL_178;
    }
LABEL_176:
    ((void (*)(WTF::StringImpl ****, _BYTE *))off_1E9D6EA80[v62])(&v110, v99);
    goto LABEL_177;
  }
  v71 = v36 + 80 * v37;
  v38 = 80 * v37;
  do
  {
    v84[0] = *(_QWORD *)(v36 + 56);
    v40 = HIDWORD(v82) == HIDWORD(v84[0]) && HIDWORD(v82) != -1;
    if (HIDWORD(v84[0]) == -1 || !v40)
    {
      if (HIDWORD(v84[0]) == -1)
        v42 = HIDWORD(v82) == -1;
      else
        v42 = v40;
      if (!v42)
        goto LABEL_112;
    }
    else
    {
      v105 = (WTF::StringImpl **)v83;
      v43 = ((uint64_t (*)(WTF::StringImpl ***, _QWORD *, uint64_t *))off_1E9D6EAC0[HIDWORD(v84[0])])(&v105, v84, &v82);
      if ((v43 & 1) == 0)
        goto LABEL_112;
    }
    if ((v76 != 0) != (*(_BYTE *)(v36 + 64) == 0) && *(WTF::StringImpl **)(v36 + 72) == v88)
      goto LABEL_135;
LABEL_112:
    v36 += 80;
    v38 -= 80;
  }
  while (v38);
  v36 = v71;
LABEL_135:
  v44 = v36;
  if (v36 == *(_QWORD *)v72 + 80 * *(unsigned int *)(v72 + 12))
    goto LABEL_145;
  v111[0] = 0;
  v112 = -1;
  v45 = *(unsigned int *)(v36 + 48);
  if ((_DWORD)v45 != -1)
  {
    v77 = v44;
    ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E9D6EAA0[v45])(v84, v111, v44 + 8);
    v112 = v45;
    v44 = v77;
  }
  v46 = *(_QWORD *)(v44 + 56);
  v114 = *(_BYTE *)(v44 + 64);
  v113 = v46;
  v47 = *(WTF::StringImpl **)(v44 + 72);
  *(_QWORD *)(v44 + 72) = 0;
  v115 = v47;
  v48 = *(WTF::StringImpl **)(v44 + 72);
  *(_QWORD *)(v44 + 72) = 0;
  if (!v48)
  {
LABEL_141:
    v49 = *(unsigned int *)(v44 + 48);
    if ((_DWORD)v49 == -1)
      goto LABEL_143;
    goto LABEL_142;
  }
  if (*(_DWORD *)v48 != 2)
  {
    *(_DWORD *)v48 -= 2;
    goto LABEL_141;
  }
  v69 = v44;
  WTF::StringImpl::destroy(v48, v35);
  v44 = v69;
  v49 = *(unsigned int *)(v69 + 48);
  if ((_DWORD)v49 != -1)
  {
LABEL_142:
    v50 = v44;
    ((void (*)(WTF::StringImpl ***, uint64_t))off_1E9D6EA80[v49])(&v105, v44 + 8);
    v44 = v50;
  }
LABEL_143:
  *(_DWORD *)(v44 + 48) = -1;
  WTF::VectorMover<false,WTF::TextBreakIterator>::move((WTF::StringImpl *)(v44 + 80), (WTF::StringImpl *)(*(_QWORD *)v72 + 80 * *(unsigned int *)(v72 + 12)), v44);
  --*(_DWORD *)(v72 + 12);
  v84[0] = v73;
  v84[1] = v74;
  v83[0] = v26;
  v83[1] = v75;
  v105 = (WTF::StringImpl **)v84;
  v106 = v83;
  if (v112 != -1)
  {
    v85 = &v105;
    ((void (*)(WTF::StringImpl ****, _BYTE *))off_1E9D6EAE0[v112])(&v85, v111);
    goto LABEL_146;
  }
LABEL_226:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_227:
  __break(1u);
}

void sub_1D80D91DC(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;
  uint64_t v69;
  StringImpl *v70;

  v69 = *(unsigned int *)(v67 - 136);
  if ((_DWORD)v69 != -1)
  {
    ((void (*)(char *, uint64_t))off_1E9D6EA80[v69])(&a67, a22);
    WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory(&a39, v70);
    _Unwind_Resume(a1);
  }
  WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory(&a39, a2);
  _Unwind_Resume(a1);
}

void WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory(WTF::StringImpl **this, StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*((_BYTE *)this + 112))
    WTF::CachedTextBreakIterator::~CachedTextBreakIterator(this + 3);
  v3 = this[2];
  this[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

const char *WebKitPlatformSystemRootDirectory()
{
  return "/";
}

uint64_t WebKitSetInvalidWebBackgroundTaskIdentifier(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DCDD80], "sharedController"), "setInvalidBackgroundTaskIdentifier:", a1);
}

uint64_t WebKitSetStartBackgroundTaskBlock(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DCDD80], "sharedController"), "setBackgroundTaskStartBlock:", a1);
}

uint64_t WebKitSetEndBackgroundTaskBlock(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DCDD80], "sharedController"), "setBackgroundTaskEndBlock:", a1);
}

CGPathRef WebKitCreatePathWithShrinkWrappedRects(void *a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  __int128 v19;
  const CGPath *v20;
  CGPathRef v21;
  WTF *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  WTF *v28;
  uint64_t v29;
  char v30;
  CGRect v31;
  int v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v29 = 0;
  v2 = objc_msgSend(a1, "count");
  if (v2)
  {
    if (v2 >> 28)
    {
      __break(0xC471u);
LABEL_36:
      JUMPOUT(0x1D80D9668);
    }
    LODWORD(v29) = v2;
    v28 = (WTF *)WTF::fastMalloc((WTF *)(16 * v2));
  }
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        while (1)
        {
          if (*(_QWORD *)v25 != v5)
            objc_enumerationMutation(a1);
          v7 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          objc_msgSend(v7, "getValue:", &v31);
          if (strcmp("{CGRect={CGPoint=dd}{CGSize=dd}}", (const char *)objc_msgSend(v7, "objCType")))
          {
            v21 = 0;
            goto LABEL_31;
          }
          if (v4 == (_DWORD)v29)
            break;
          WebCore::FloatRect::FloatRect((WTF *)((char *)v28 + 16 * v4++), &v31);
          HIDWORD(v29) = v4;
          if (++i == v3)
            goto LABEL_27;
        }
        v9 = v4 + ((unint64_t)v4 >> 2);
        if (v9 >= 0x10)
          v10 = v9 + 1;
        else
          v10 = 16;
        if (v10 <= (unint64_t)v4 + 1)
          v11 = v4 + 1;
        else
          v11 = v10;
        if (v11 >> 28)
        {
          __break(0xC471u);
          goto LABEL_36;
        }
        v12 = v28;
        v13 = (WTF *)WTF::fastMalloc((WTF *)(16 * v11));
        v15 = v13;
        LODWORD(v29) = v11;
        v28 = v13;
        if (v4)
        {
          v16 = 16 * v4;
          v17 = v13;
          v18 = v12;
          do
          {
            v19 = *(_OWORD *)v18;
            v18 = (WTF *)((char *)v18 + 16);
            *(_OWORD *)v17 = v19;
            v17 = (WTF *)((char *)v17 + 16);
            v16 -= 16;
          }
          while (v16);
        }
        if (v12)
        {
          if (v13 == v12)
          {
            v15 = 0;
            v28 = 0;
            LODWORD(v29) = 0;
          }
          WTF::fastFree(v12, v14);
        }
        WebCore::FloatRect::FloatRect((WTF *)((char *)v15 + 16 * v4), &v31);
        v4 = ++HIDWORD(v29);
      }
LABEL_27:
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
    }
    while (v3);
  }
  WebCore::PathUtilities::pathWithShrinkWrappedRects();
  v20 = (const CGPath *)WebCore::Path::platformPath((WebCore::Path *)&v31);
  v21 = CGPathRetain(v20);
  if (v32 != -1)
    ((void (*)(char *, CGFloat *))off_1E9D6EB40[v32])(&v30, &v31.origin.y);
LABEL_31:
  v22 = v28;
  if (v28)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v22, v8);
  }
  return v21;
}

void sub_1D80D9674(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  if (a17)
  {
    WTF::fastFree(a17, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void LoadWebLocalizedStringsTimerCallback(__CFRunLoopTimer *a1, void *a2)
{
  NSObject *global_queue;

  global_queue = dispatch_get_global_queue(-2, 0);
  dispatch_async(global_queue, &__block_literal_global_6);
}

CFTypeRef ___ZL36LoadWebLocalizedStringsTimerCallbackP16__CFRunLoopTimerPv_block_invoke()
{
  return WebLocalizedStringInternal("Typing (Undo action name)");
}

void WTF::CachedTextBreakIterator::~CachedTextBreakIterator(WTF::StringImpl **this)
{
  WTF::TextBreakIteratorCache *isMainThread;
  StringImpl *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  WTF::CachedTextBreakIterator *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  char v30;
  char v31[2];
  char v32[2];
  char v33;

  if (*((_BYTE *)this + 80))
  {
    isMainThread = (WTF::TextBreakIteratorCache *)WTF::isMainThread((WTF *)this);
    if (!(_DWORD)isMainThread)
      goto LABEL_18;
    v4 = WTF::TextBreakIteratorCache::singleton(isMainThread);
    if (!*((_BYTE *)this + 80))
    {
      __break(1u);
      return;
    }
    v5 = (_DWORD *)v4;
    v6 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v6 == *(_DWORD *)(v4 + 8))
    {
      v7 = WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v6 + 1, (unint64_t)this);
      v8 = (WTF::CachedTextBreakIterator *)v7;
      v9 = v5[3];
      v10 = *(_QWORD *)v5;
      v11 = *(_QWORD *)v5 + 80 * v9;
      *(_BYTE *)(v11 + 8) = 0;
      v12 = v11 + 8;
      *(_DWORD *)(v12 + 40) = -1;
      v13 = *((unsigned int *)v7 + 12);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(char *, uint64_t, char *))off_1E9D6EAA0[v13])(v32, v12, v7 + 8);
        *(_DWORD *)(v12 + 40) = v13;
      }
      v14 = *((_QWORD *)v8 + 7);
      v15 = v10 + 80 * v9;
      *(_BYTE *)(v15 + 64) = *((_BYTE *)v8 + 64);
      *(_QWORD *)(v15 + 56) = v14;
      v16 = (_QWORD *)(v15 + 72);
    }
    else
    {
      v17 = *(_QWORD *)v4;
      v18 = *(_QWORD *)v4 + 80 * v6;
      *(_BYTE *)(v18 + 8) = 0;
      v19 = v18 + 8;
      *(_DWORD *)(v19 + 40) = -1;
      v20 = *((unsigned int *)this + 12);
      if ((_DWORD)v20 != -1)
      {
        ((void (*)(char *, uint64_t, WTF::StringImpl **))off_1E9D6EAA0[v20])(v31, v19, this + 1);
        *(_DWORD *)(v19 + 40) = v20;
      }
      v21 = this[7];
      v22 = v17 + 80 * v6;
      *(_BYTE *)(v22 + 64) = *((_BYTE *)this + 64);
      *(_QWORD *)(v22 + 56) = v21;
      v16 = (_QWORD *)(v22 + 72);
      v8 = (WTF::CachedTextBreakIterator *)this;
    }
    v23 = *((_QWORD *)v8 + 9);
    *((_QWORD *)v8 + 9) = 0;
    *v16 = v23;
    v24 = v5[3] + 1;
    v5[3] = v24;
    if (v24 < 3)
    {
LABEL_18:
      if (!*((_BYTE *)this + 80))
        return;
      v28 = this[9];
      this[9] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, v3);
          v29 = *((unsigned int *)this + 12);
          if ((_DWORD)v29 == -1)
            goto LABEL_24;
          goto LABEL_23;
        }
        *(_DWORD *)v28 -= 2;
      }
      v29 = *((unsigned int *)this + 12);
      if ((_DWORD)v29 == -1)
      {
LABEL_24:
        *((_DWORD *)this + 12) = -1;
        return;
      }
LABEL_23:
      ((void (*)(char *, WTF::StringImpl **))off_1E9D6EA80[v29])(&v30, this + 1);
      goto LABEL_24;
    }
    v25 = *(_QWORD *)v5;
    v26 = *(WTF::StringImpl **)(*(_QWORD *)v5 + 72);
    *(_QWORD *)(*(_QWORD *)v5 + 72) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v3);
        v27 = *(unsigned int *)(v25 + 48);
        if ((_DWORD)v27 == -1)
          goto LABEL_17;
        goto LABEL_16;
      }
      *(_DWORD *)v26 -= 2;
    }
    v27 = *(unsigned int *)(v25 + 48);
    if ((_DWORD)v27 == -1)
    {
LABEL_17:
      *(_DWORD *)(v25 + 48) = -1;
      WTF::VectorMover<false,WTF::TextBreakIterator>::move((WTF::StringImpl *)(v25 + 80), (WTF::StringImpl *)(*(_QWORD *)v5 + 80 * v5[3]--), v25);
      goto LABEL_18;
    }
LABEL_16:
    ((void (*)(char *, uint64_t))off_1E9D6EA80[v27])(&v33, v25 + 8);
    goto LABEL_17;
  }
}

void sub_1D80D9984(_Unwind_Exception *a1, StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v15;

  v15 = *v13;
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6EA80[v15])(&a11, v12);
  *v13 = -1;
  std::optional<WTF::TextBreakIterator>::~optional(v11, a2);
  _Unwind_Resume(a1);
}

void sub_1D80D99EC(_Unwind_Exception *a1, StringImpl *a2)
{
  uint64_t v2;

  std::optional<WTF::TextBreakIterator>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::TextBreakIterator>::~optional(uint64_t a1, StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v6;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF::StringImpl **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, a2);
        v4 = *(unsigned int *)(a1 + 48);
        if ((_DWORD)v4 == -1)
          goto LABEL_7;
        goto LABEL_6;
      }
      *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v4 == -1)
    {
LABEL_7:
      *(_DWORD *)(a1 + 48) = -1;
      return a1;
    }
LABEL_6:
    ((void (*)(char *, uint64_t))off_1E9D6EA80[v4])(&v6, a1 + 8);
    goto LABEL_7;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
    return ubrk_close();
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6EA90[v3])(&v5, a2);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v6[2];

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  v3 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(_BYTE *))off_1E9D6EAB0[v3])(v6);
    *(_DWORD *)(a2 + 32) = v3;
  }
  return result;
}

void sub_1D80D9B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 32);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6EA90[v15])(&a13, v13);
  *(_DWORD *)(v13 + 32) = -1;
  _Unwind_Resume(exception_object);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_QWORD *)(a2 + 24) = a3[3];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

char *WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  void *v18;
  WTF::StringImpl *v20;
  void *v21;

  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 80 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= a2)
      v14 = a2;
    if (v14 > v12)
    {
      v15 = *(_DWORD *)(a1 + 12);
      if (v14 < 3)
      {
        v17 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
      }
      else
      {
        if (v14 >= 0x3333334)
          goto LABEL_36;
        v16 = 80 * v14;
        v17 = WTF::fastMalloc((WTF *)(80 * v14));
        *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF0) / 0x50;
        *(_QWORD *)a1 = v17;
      }
      WTF::VectorMover<false,WTF::TextBreakIterator>::move(v5, (WTF::StringImpl *)((char *)v5 + 80 * v15), v17);
      if ((WTF::StringImpl *)(a1 + 16) != v5 && v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v18);
      }
    }
    return (char *)a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v9 = a2;
  if (v9 > v7)
  {
    if (v9 < 3)
    {
      v11 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
      goto LABEL_30;
    }
    if (v9 < 0x3333334)
    {
      v10 = 80 * v9;
      v11 = WTF::fastMalloc((WTF *)(80 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)a1 = v11;
LABEL_30:
      WTF::VectorMover<false,WTF::TextBreakIterator>::move(v5, v6, v11);
      v20 = *(WTF::StringImpl **)a1;
      if ((WTF::StringImpl *)(a1 + 16) != v5 && v5)
      {
        if (v20 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v21);
        v20 = *(WTF::StringImpl **)a1;
      }
      return (char *)v20 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1D80D9E00);
  }
  v20 = *(WTF::StringImpl **)a1;
  return (char *)v20 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
}

WTF::StringImpl *WTF::VectorMover<false,WTF::TextBreakIterator>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  StringImpl *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14[2];
  char v15;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    while (1)
    {
      v7 = a3 + v6;
      *(_BYTE *)(a3 + v6 + 8) = 0;
      v8 = (StringImpl *)(a3 + v6 + 8);
      *(_DWORD *)(a3 + v6 + 48) = -1;
      v9 = (char *)v5 + v6;
      v10 = *(unsigned int *)((char *)v5 + v6 + 48);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(char *, StringImpl *, char *))off_1E9D6EAA0[v10])(v14, v8, v9 + 8);
        *(_DWORD *)(v7 + 48) = v10;
      }
      v11 = *((_QWORD *)v9 + 7);
      *(_BYTE *)(v7 + 64) = v9[64];
      *(_QWORD *)(v7 + 56) = v11;
      v12 = *((_QWORD *)v9 + 9);
      *((_QWORD *)v9 + 9) = 0;
      *(_QWORD *)(v7 + 72) = v12;
      result = (WTF::StringImpl *)*((_QWORD *)v9 + 9);
      *((_QWORD *)v9 + 9) = 0;
      if (!result)
        goto LABEL_9;
      if (*(_DWORD *)result != 2)
        break;
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      v13 = *((unsigned int *)v9 + 12);
      if ((_DWORD)v13 != -1)
        goto LABEL_12;
LABEL_3:
      *((_DWORD *)v9 + 12) = -1;
      v6 += 80;
      if ((WTF::StringImpl *)((char *)v5 + v6) == a2)
        return result;
    }
    *(_DWORD *)result -= 2;
LABEL_9:
    v13 = *((unsigned int *)v9 + 12);
    if ((_DWORD)v13 == -1)
      goto LABEL_3;
LABEL_12:
    result = (WTF::StringImpl *)((uint64_t (*)(char *, char *))off_1E9D6EA80[v13])(&v15, (char *)v5 + v6 + 8);
    goto LABEL_3;
  }
  return result;
}

void sub_1D80D9F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = v12 + v14;
  v17 = *(unsigned int *)(v16 + 48);
  if ((_DWORD)v17 != -1)
    (*(void (**)(char *, uint64_t))(v13 + 8 * v17))(&a12, v16 + 8);
  *(_DWORD *)(v16 + 48) = -1;
  _Unwind_Resume(exception_object);
}

void WTF::TextBreakIterator::~TextBreakIterator(WTF::TextBreakIterator *this, StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = *((unsigned int *)this + 12);
      if ((_DWORD)v4 == -1)
        goto LABEL_6;
      goto LABEL_5;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
LABEL_5:
    ((void (*)(char *, char *))off_1E9D6EA80[v4])(&v5, (char *)this + 8);
LABEL_6:
  *((_DWORD *)this + 12) = -1;
}

uint64_t WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(unsigned int a1)
{
  unsigned __int16 v1;
  uint64_t v3;
  unsigned __int16 *v4;
  __int16 v5;
  __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v9;
  unsigned __int16 v13;
  unsigned __int16 v17;
  unsigned __int16 v19;

  v1 = 1;
  switch(a1 >> 7)
  {
    case 0u:
      switch(a1 >> 4)
      {
        case 1u:
          return 4;
        case 2u:
          LOWORD(v3) = a1 - 32;
          if (a1 - 32 >= 0xA)
            return 0x8000;
          v3 = (__int16)v3;
          v4 = (unsigned __int16 *)&unk_1D80FBD58;
          return v4[v3];
        case 3u:
          if (a1 < 0x3A)
            return 1;
          else
            return (unsigned __int16)0x8000;
        case 4u:
        case 6u:
          return 1;
        case 5u:
          if (a1 == 93)
            v17 = 16;
          else
            v17 = 0x8000;
          if (a1 == 91)
            v17 = 8;
          if (a1 >= 0x5B)
            return v17;
          else
            return 1;
        case 7u:
          if (a1 == 125)
            v19 = 32;
          else
            v19 = 0x8000;
          if (a1 == 123)
            v19 = 8;
          if (a1 >= 0x7B)
            return v19;
          else
            return 1;
        default:
          return 0x8000;
      }
    case 1u:
      if ((a1 & 0xFFFFFFEF) == 0xAB)
        v5 = 128;
      else
        v5 = 0x8000;
      if (a1 == 191)
        v5 = 8;
      if (a1 == 161)
        v6 = 8;
      else
        v6 = v5;
      if (a1 <= 0xC0)
        v7 = v6;
      else
        v7 = 1;
      if (a1 == 160)
        return 64;
      else
        return v7;
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 0xAu:
      return v1;
    case 5u:
      if (a1 - 712 > 0x17 || ((1 << (a1 + 56)) & 0x800011) == 0)
        return 1;
      return 0x8000;
    case 6u:
      if (a1 - 847 < 0x14 && ((0xFE001u >> (a1 - 79)) & 1) != 0)
        return 64;
      if (a1 == 894)
        v9 = 0x8000;
      else
        v9 = 1;
      if (a1 >= 0x370)
        return v9;
      else
        return 4;
    case 9u:
      if (a1 - 1155 >= 7)
        return 1;
      else
        return 4;
    case 0xBu:
      if ((unsigned __int16)(a1 - 1480) < 0xFFC1u)
        return 1;
      if (a1 - 1425 < 0x2D)
        return 4;
      LOWORD(v3) = a1 - 1471;
      if (a1 - 1471 >= 9)
        return 0x8000;
      v3 = (__int16)v3;
      v4 = (unsigned __int16 *)&unk_1D80FBD6C;
      return v4[v3];
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
      return 0x8000;
    case 0x40u:
      if (a1 >> 1 == 4108)
        return 128;
      else
        return (unsigned __int16)0x8000;
    default:
      if ((unsigned __int16)((unsigned __int16)(a1 - 11904) >> 4) > 0x764u)
      {
        if ((((_WORD)a1 + 1792) & 0xFE00) != 0)
          v13 = 0x8000;
        else
          v13 = 2;
        if ((unsigned __int16)((unsigned __int16)(a1 + 21504) >> 4) >= 0x2BBu)
          return v13;
        else
          return 2;
      }
      else
      {
        if ((a1 & 0xFF00) == 0x3000)
        {
          if (a1 >> 6 <= 0xC0)
          {
            v3 = (a1 & 0x1F) - 1;
            if (v3 < 0x1F)
            {
              v4 = (unsigned __int16 *)&unk_1D80FBD7E;
              return v4[v3];
            }
          }
          return 0x8000;
        }
        if ((a1 & 0xFFF0) == 0x31F0)
          return 0x8000;
        v1 = 1;
        if ((a1 & 0xFFF8) == 0x3248 || (a1 & 0xFFC0) == 0x4DC0)
          return v1;
        if (a1 == 40981)
          return (unsigned __int16)0x8000;
        else
          return 2;
      }
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_17TextBreakIterator7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  UText *v5;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 8);
  if ((*(_QWORD *)(**(_QWORD **)a1 + 8) & 0xFF00000000) != 0)
  {
    result = WTF::openLatin1ContextAwareUTextProvider();
    v5 = (UText *)result;
    if (!result)
    {
LABEL_3:
      *(_DWORD *)(a2 + 8) = 0;
      return result;
    }
  }
  else
  {
    result = WTF::openUTF16ContextAwareUTextProvider();
    v5 = (UText *)result;
    if (!result)
      goto LABEL_3;
  }
  ubrk_setUText();
  result = (uint64_t)utext_close(v5);
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_17TextBreakIterator7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSF_DpT0_(__int128 ***a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = ***a1;
  v6 = *(*a1)[1];
  v7 = v2;
  v8[0] = &v7;
  v8[1] = &v6;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_19TextBreakIteratorCF7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSF_DpT0_(v5);
  }
  else
  {
    v9 = v8;
    return ((uint64_t (*)(_QWORD **))off_1E9D6EAF0[v3])(&v9);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_19TextBreakIteratorCF7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSF_DpT0_(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  CFTypeRef cf;
  uint64_t v9;
  uint64_t v10;

  v3 = **a1;
  v4 = v3[1];
  v5 = *((unsigned int *)(*a1)[1] + 2);
  v9 = *v3;
  v10 = v4;
  if (v5)
  {
    WTF::createContextualizedCFString();
    v6 = *(const void **)a2;
    *(_QWORD *)a2 = cf;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    WTF::StringView::createCFStringWithoutCopying((WTF::StringView *)&v9);
    v7 = *(const void **)a2;
    *(_QWORD *)a2 = cf;
    if (v7)
      CFRelease(v7);
    LODWORD(v4) = v10;
  }
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_19TextBreakIteratorCF7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSF_DpT0_(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex v6;
  const __CFString *string;
  _QWORD v8[2];
  CFRange v9;

  v3 = (_QWORD *)**a1;
  v4 = v3[1];
  v5 = *(unsigned int *)((*a1)[1] + 8);
  v6 = v4;
  v8[0] = *v3;
  v8[1] = v4;
  if (v5)
    WTF::createContextualizedCFString();
  else
    WTF::StringView::createCFStringWithoutCopying((WTF::StringView *)v8);
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v9.location = 0;
  v9.length = v6;
  CFStringTokenizerSetString(*(CFStringTokenizerRef *)a2, string, v9);
  if (string)
    CFRelease(string);
}

void sub_1D80DA5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_assign_base<WTF::TextBreakIterator,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[3];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 48) = -1;
    v4 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6EAA0[v4])(v8, a1 + 8, a2 + 8);
      *(_DWORD *)(a1 + 48) = v4;
    }
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a1 + 72) = v6;
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

void sub_1D80DA66C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  v16 = *(unsigned int *)(v13 + 48);
  if ((_DWORD)v16 == -1)
  {
    *(_DWORD *)(v13 + 48) = -1;
    if (!*(_BYTE *)(v13 + 80))
      goto LABEL_3;
  }
  else
  {
    ((void (*)(char *, uint64_t))off_1E9D6EA80[v16])(&a12, v14);
    *(_DWORD *)(v13 + 48) = -1;
    if (!*(_BYTE *)(v13 + 80))
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  v17 = *(WTF::StringImpl **)(v13 + 72);
  *(_QWORD *)(v13 + 72) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, a2);
      v18 = *(unsigned int *)(v13 + 48);
      if ((_DWORD)v18 != -1)
      {
        ((void (*)(char *, uint64_t))off_1E9D6EA80[v18])(&a13, v14);
        *(_DWORD *)(v13 + 48) = -1;
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  *(_DWORD *)(v13 + 48) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  _BYTE v16[2];

  v3 = result;
  if (*(unsigned __int8 *)(result + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (!*(_BYTE *)(result + 80))
      return result;
    v4 = (StringImpl *)(result + 8);
    v5 = *(unsigned int *)(result + 48);
    v6 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v5 == -1)
    {
      if ((_DWORD)v6 == -1)
        goto LABEL_19;
    }
    else if ((_DWORD)v6 == -1)
    {
      ((void (*)(char *, StringImpl *))off_1E9D6EA80[v5])(&v14, v4);
      *(_DWORD *)(v3 + 48) = -1;
      goto LABEL_19;
    }
    v13 = result + 8;
    ((void (*)(uint64_t *))off_1E9D6EB00[v6])(&v13);
LABEL_19:
    v11 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(v3 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(v3 + 56) = v11;
    v12 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    result = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v3 + 72) = v12;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (*(_BYTE *)(result + 80))
  {
    result = *(_QWORD *)(result + 72);
    *(_QWORD *)(v3 + 72) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (StringImpl *)a2);
        v7 = *(unsigned int *)(v3 + 48);
        if ((_DWORD)v7 == -1)
          goto LABEL_12;
        goto LABEL_11;
      }
      *(_DWORD *)result -= 2;
    }
    v7 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v7 == -1)
    {
LABEL_12:
      *(_DWORD *)(v3 + 48) = -1;
      *(_BYTE *)(v3 + 80) = 0;
      return result;
    }
LABEL_11:
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6EA80[v7])(&v15, v3 + 8);
    goto LABEL_12;
  }
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 48) = -1;
  v8 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6EAA0[v8])(v16, result + 8, a2 + 8);
    *(_DWORD *)(v3 + 48) = v8;
  }
  v9 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(v3 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(v3 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v3 + 72) = v10;
  *(_BYTE *)(v3 + 80) = 1;
  return result;
}

void sub_1D80DA8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 48);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6EA80[v16])(&a13, v14);
  *(_DWORD *)(v13 + 48) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6EA80[v5])(&v9, v4);
LABEL_7:
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(v4 + 40) = 0;
    return result;
  }
  result = *a2;
  if (*a2)
    result = ubrk_close();
  v7 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *a2 = v7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  _BYTE v13[2];

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    *(_DWORD *)(v4 + 40) = -1;
    *(_BYTE *)v4 = 0;
    *(_DWORD *)(v4 + 32) = -1;
    v9 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E9D6EAB0[v9])(v13, v4, a3);
      *(_DWORD *)(v4 + 32) = v9;
    }
    *(_DWORD *)(v4 + 40) = 1;
    return result;
  }
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E9D6EA80[v5])(&v12, v4);
    goto LABEL_8;
  }
  v7 = *(unsigned int *)(a2 + 32);
  v8 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))off_1E9D6EA90[v7])(&v11, a2);
      *(_DWORD *)(a2 + 32) = -1;
      return result;
    }
LABEL_12:
    v10 = a2;
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E9D6EB10[v8])(&v10, a2, a3);
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_12;
  return result;
}

void sub_1D80DAB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 32);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E9D6EA90[v15])(&a13, v13);
  *(_DWORD *)(v13 + 32) = -1;
  _Unwind_Resume(exception_object);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  __n128 result;
  uint64_t v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_1E9D6EA90[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    result = *(__n128 *)(a3 + 1);
    *(_QWORD *)(v4 + 24) = a3[3];
    *(__n128 *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *(const void **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
    CFRelease(v8);
  result = *(__n128 *)(a3 + 1);
  *(_QWORD *)(a2 + 24) = a3[3];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  __n128 result;
  uint64_t v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E9D6EA90[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    result = *(__n128 *)(a3 + 1);
    *(__n128 *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *(const void **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
    CFRelease(v8);
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = ubrk_following();
  if (v3 == -1)
    return 0;
  else
    return (v3 - *(_DWORD *)(a2 + 8)) | 0x100000000;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_(int ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int *v6;
  int **v7;

  v5 = ***a1;
  v6 = &v5;
  v2 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(v4);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(int ***))off_1E9D6EB30[v2])(&v7);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  int RangeOfCharacterClusterAtIndex;
  int v4;

  if (*(_QWORD *)(a2 + 16) <= (unint64_t)***a1)
    return 0;
  RangeOfCharacterClusterAtIndex = CFStringGetRangeOfCharacterClusterAtIndex();
  return (RangeOfCharacterClusterAtIndex + v4 - *(_DWORD *)(a2 + 24)) | 0x100000000;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  unint64_t v2;
  CFRange CurrentTokenRange;

  v2 = ***a1;
  if (*(_QWORD *)(a2 + 8) <= v2)
    return 0;
  CFStringTokenizerGoToTokenAtIndex(*(CFStringTokenizerRef *)a2, *(_QWORD *)(a2 + 16) + v2);
  CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)a2);
  if (CurrentTokenRange.location == -1)
    return 0;
  else
    return (LOBYTE(CurrentTokenRange.location) + LOBYTE(CurrentTokenRange.length) - *(_QWORD *)(a2 + 16)) | 0x100000000 | (LODWORD(CurrentTokenRange.location) + LODWORD(CurrentTokenRange.length) - *(_QWORD *)(a2 + 16)) & 0xFFFFFF00;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SA_SE_EEEEEEDcSI_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_1D80DB188(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80DB524(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  uint64_t v20;
  WTF::StringImpl *v22;

  v22 = *(WTF::StringImpl **)(v20 - 48);
  *(_QWORD *)(v20 - 48) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
    {
      WTF::StringImpl::destroy(a20, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<WebCore::AlternativeTextUIController>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  const void *v10;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (const void **)*((_QWORD *)this + 1);
      do
      {
        v6 = *v5;
        if (*v5 != (const void *)-1)
        {
          *v5 = 0;
          if (v6)
            CFRelease(v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (const void **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (const void *)-1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
            CFRelease(v10);
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  return WTF::fastFree(this, a2);
}

void WebViewGroup::getOrCreate(WebViewGroup *this@<X0>, const WTF::String *a2@<X1>, WebViewGroup **a3@<X8>)
{
  StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebViewGroup *v10;
  WebViewGroup *v11;
  WebViewGroup *v12;
  StringImpl *v13;
  WebViewGroup *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[3];

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    {
      webViewGroups(void)::webViewGroups = 0;
    }
    v19 = 0;
    WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&webViewGroups(void)::webViewGroups, (StringImpl *)this, (const WTF::StringImpl *)&v19, (uint64_t)v20);
    v8 = v20[0];
    v9 = *(_QWORD *)(v20[0] + 8);
    if (v9)
    {
      if (!*(_QWORD *)(v9 + 32))
      {
        v15 = *(WTF::StringImpl **)(v9 + 24);
        if (!v15 || !*((_DWORD *)v15 + 1))
        {
          v16 = *(_DWORD **)a2;
          if (*(_QWORD *)a2)
          {
            if (v16[1])
            {
              *v16 += 2;
              *(_QWORD *)(v9 + 24) = v16;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2)
                  WTF::StringImpl::destroy(v15, v7);
                else
                  *(_DWORD *)v15 -= 2;
              }
            }
          }
        }
      }
      v10 = *(WebViewGroup **)(v8 + 8);
      ++*(_DWORD *)v10;
      *a3 = v10;
    }
    else
    {
      v12 = (WebViewGroup *)WTF::fastMalloc((WTF *)0x38);
      WebViewGroup::WebViewGroup(v12, (const WTF::String *)this, a2);
      *a3 = v12;
      ++*(_DWORD *)v12;
      v14 = *(WebViewGroup **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v12;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebViewGroup::~WebViewGroup(v14, v13);
          WTF::fastFree(v17, v18);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
    }
  }
  else
  {
    v11 = (WebViewGroup *)WTF::fastMalloc((WTF *)0x38);
    v20[0] = 0;
    WebViewGroup::WebViewGroup(v11, (const WTF::String *)v20, a2);
    *a3 = v11;
  }
}

void sub_1D80DBD14(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1D80DBD28(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebViewGroup *WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *a1@<X0>, StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  WebViewGroup *v12;
  int i;
  unsigned int v14;
  WebViewGroup *v15;
  WTF *v16;
  WebViewGroup *result;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF *v27;
  void *v28;

  v7 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    v7 = *a1;
    if (!*a1)
    {
      v8 = 0;
      v9 = *(WTF::StringImpl **)a2;
      v10 = *(_DWORD *)(*(_QWORD *)a2 + 16);
      if (v10 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v11 = WTF::StringImpl::hashSlowCase(v9);
      goto LABEL_7;
    }
  }
  v8 = *(_DWORD *)(v7 - 8);
  v9 = *(WTF::StringImpl **)a2;
  v10 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v10 < 0x100)
    goto LABEL_6;
LABEL_4:
  v11 = v10 >> 8;
LABEL_7:
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v8;
    v15 = (WebViewGroup *)(v7 + 16 * (v11 & v8));
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      v12 = (WebViewGroup *)(v7 + 16 * v14);
      goto LABEL_9;
    }
    if (!v16)
    {
      if (v12)
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        v15 = v12;
      }
      v20 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v20 += 2;
      *(_QWORD *)v15 = v20;
      result = (WebViewGroup *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebViewGroup::~WebViewGroup(result, a2);
          result = (WebViewGroup *)WTF::fastFree(v27, v28);
          v23 = *a1;
          if (*a1)
          {
LABEL_26:
            ++*(_DWORD *)(v23 - 12);
            v24 = *a1;
            if (*a1)
              goto LABEL_27;
            goto LABEL_34;
          }
LABEL_33:
          *(_DWORD *)(v23 - 12) = 1;
          v24 = *a1;
          if (*a1)
          {
LABEL_27:
            v25 = (*(_DWORD *)(v24 - 16) + *(_DWORD *)(v24 - 12));
            v26 = *(unsigned int *)(v24 - 4);
            if (v26 <= 0x400)
              goto LABEL_28;
            goto LABEL_35;
          }
LABEL_34:
          v25 = *(unsigned int *)(v24 - 16);
          v26 = *(unsigned int *)(v24 - 4);
          if (v26 <= 0x400)
          {
LABEL_28:
            if (3 * v26 > 4 * v25)
            {
LABEL_38:
              v22 = v24 + 16 * v26;
              v21 = 1;
              goto LABEL_39;
            }
            if (!(_DWORD)v26)
            {
              result = (WebViewGroup *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, (WTF::StringImpl **)v15);
              v15 = result;
              v24 = *a1;
              if (!*a1)
              {
LABEL_31:
                v26 = 0;
                goto LABEL_38;
              }
LABEL_37:
              v26 = *(unsigned int *)(v24 - 4);
              goto LABEL_38;
            }
LABEL_36:
            result = (WebViewGroup *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, (_DWORD)v26 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v26)), (WTF::StringImpl **)v15);
            v15 = result;
            v24 = *a1;
            if (!*a1)
              goto LABEL_31;
            goto LABEL_37;
          }
LABEL_35:
          if (v26 > 2 * v25)
            goto LABEL_38;
          goto LABEL_36;
        }
        --*(_DWORD *)result;
      }
      v23 = *a1;
      if (*a1)
        goto LABEL_26;
      goto LABEL_33;
    }
    result = (WebViewGroup *)WTF::equal(v16, *(const WTF::StringImpl **)a2, a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v11 = i + v14;
  }
  v18 = *a1;
  if (*a1)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v21 = 0;
  v22 = v18 + 16 * v19;
LABEL_39:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v22;
  *(_BYTE *)(a4 + 16) = v21;
  return result;
}

void WebViewGroup::WebViewGroup(WebViewGroup *this, const WTF::String *a2, const WTF::String *a3)
{
  _DWORD *v4;
  _DWORD *v5;

  *(_DWORD *)this = 1;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = 0;
  v5 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v5 += 2;
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = 0;
  WebCore::UserContentController::create((WebCore::UserContentController *)this);
  WebVisitedLinkStore::create((WebVisitedLinkStore **)this + 6);
}

void sub_1D80DC000(_Unwind_Exception *exception_object, StringImpl *a2)
{
  _QWORD *v2;
  _DWORD **v3;
  _DWORD **v4;
  _DWORD *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)v2[4];
  v2[4] = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (WTF::StringImpl *)v2[3];
  v2[3] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v2[2];
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = (WTF::StringImpl *)v2[1];
  v2[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebViewGroup::~WebViewGroup(WebViewGroup *this, StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v4 = (_DWORD *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = 0;
      if (!v4)
        goto LABEL_10;
      goto LABEL_5;
    }
    --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v4)
    goto LABEL_10;
LABEL_5:
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
LABEL_10:
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (!v6)
        goto LABEL_18;
      goto LABEL_16;
    }
    --v5[2];
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v6)
  {
LABEL_18:
    v7 = *((_QWORD *)this + 2);
    if (!v7)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_16:
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v6, a2);
  v7 = *((_QWORD *)this + 2);
  if (v7)
LABEL_19:
    WTF::fastFree((WTF *)(v7 - 16), a2);
LABEL_20:
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t *WebViewGroup::removeWebView(WebViewGroup *this, WebView *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebView *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = *((_QWORD *)this + 2);
  result = (uint64_t *)((char *)this + 16);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebView **)(v3 + 8 * v9);
    if (v10 == a2)
    {
LABEL_6:
      if (v9 == *(_DWORD *)(v3 - 4))
        return result;
      *(_QWORD *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      if (*result)
      {
        --*(_DWORD *)(*result - 12);
        v12 = *result;
        if (!*result)
          return result;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        v12 = *result;
        if (!*result)
          return result;
      }
      v13 = 6 * *(_DWORD *)(v12 - 12);
      v14 = *(_DWORD *)(v12 - 4);
      if (v13 < v14 && v14 >= 9)
        return WTF::HashTable<WebView *,WebView *,WTF::IdentityExtractor,WTF::DefaultHash<WebView *>,WTF::HashTraits<WebView *>,WTF::HashTraits<WebView *>>::rehash(result, v14 >> 1, 0);
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WebView **)(v3 + 8 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  return result;
}

WebKit::WebStorageNamespaceProvider *WebViewGroup::storageNamespaceProvider(WebViewGroup *this)
{
  WebKit::WebStorageNamespaceProvider *result;
  unsigned int **v3;
  _DWORD *v4;

  result = (WebKit::WebStorageNamespaceProvider *)*((_QWORD *)this + 4);
  if (!result)
  {
    v3 = (unsigned int **)WTF::fastMalloc((WTF *)0x48);
    result = WebKit::WebStorageNamespaceProvider::WebStorageNamespaceProvider(v3, (unsigned int **)this + 3);
    v4 = (_DWORD *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = result;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        return (WebKit::WebStorageNamespaceProvider *)*((_QWORD *)this + 4);
      }
      else
      {
        --v4[2];
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebViewGroup,WTF::RawPtrTraits<WebViewGroup>,WTF::DefaultRefDerefTraits<WebViewGroup>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebViewGroup *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  WebViewGroup *v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WebViewGroup *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  void *v37;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
          {
            v18 = *(_DWORD *)(v17 - 8);
            v19 = *((_DWORD *)v14 + 4);
            if (v19 >= 0x100)
              goto LABEL_18;
LABEL_23:
            v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            v18 = 0;
            v19 = *((_DWORD *)v14 + 4);
            if (v19 < 0x100)
              goto LABEL_23;
LABEL_18:
            v20 = v19 >> 8;
          }
          v24 = 0;
          do
          {
            v25 = v20 & v18;
            v20 = ++v24 + v25;
          }
          while (*(_QWORD *)(v17 + 16 * v25));
          v26 = v17 + 16 * v25;
          v27 = *(WebViewGroup **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 != 1)
            {
              --*(_DWORD *)v27;
              goto LABEL_29;
            }
            WebViewGroup::~WebViewGroup(v27, v10);
            WTF::fastFree(v28, v29);
            v30 = *(WTF::StringImpl **)v26;
            *(_QWORD *)v26 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v10);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          else
          {
LABEL_29:
            *(_QWORD *)v26 = 0;
          }
          v31 = *v13;
          *v13 = 0;
          *(_QWORD *)v26 = v31;
          v32 = v6 + 16 * v11;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v26 + 8) = v33;
          v34 = *(WebViewGroup **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 != 1)
            {
              --*(_DWORD *)v34;
              goto LABEL_38;
            }
            WebViewGroup::~WebViewGroup(v34, v10);
            WTF::fastFree(v36, v37);
            v35 = *v13;
            *v13 = 0;
            if (v35)
            {
LABEL_41:
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v10);
              else
                *(_DWORD *)v35 -= 2;
            }
          }
          else
          {
LABEL_38:
            v35 = *v13;
            *v13 = 0;
            if (v35)
              goto LABEL_41;
          }
          if (v13 == a3)
            v12 = v26;
          goto LABEL_9;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WebViewGroup **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebViewGroup::~WebViewGroup(v16, v10);
            WTF::fastFree(v21, v22);
            v23 = *v13;
            *v13 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v10);
              else
                *(_DWORD *)v23 -= 2;
            }
            goto LABEL_9;
          }
          --*(_DWORD *)v16;
        }
        *v13 = 0;
      }
LABEL_9:
      if (++v11 == v7)
        goto LABEL_44;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

void sub_1D80E1654(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1D80E1794(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D80E187C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E1A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E1A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

void sub_1D80E1B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E1BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

void sub_1D80E1C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E1CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

void sub_1D80E1E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v7 - 72));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E1EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E2540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E2554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E2568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D80E2584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E2598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E25AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E25C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E25D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E25E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E26D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E2800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E281C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E28FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E2A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v4 = *(_DWORD **)(v2 - 24);
  *(_QWORD *)(v2 - 24) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E2AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E3478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v14 - 112));
  _Unwind_Resume(a1);
}

void sub_1D80E3610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E3764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E3780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E38F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E3920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E3950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1D80E3D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v4 = *(_DWORD **)(v2 - 56);
  *(_QWORD *)(v2 - 56) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va2, v5);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1D80E3D84(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v19 - 80));
  _Unwind_Resume(a1);
}

void sub_1D80E3DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v6 - 80));
  _Unwind_Resume(a1);
}

void sub_1D80E3DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_1D80E418C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v4 = *(_DWORD **)(v2 - 40);
  *(_QWORD *)(v2 - 40) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  std::optional<WebCore::SimpleRange>::~optional((uint64_t *)va1);
  WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)va);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va2, v5);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_1D80E41EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v12 - 64));
  _Unwind_Resume(a1);
}

void sub_1D80E4208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v6 - 64));
  _Unwind_Resume(a1);
}

void sub_1D80E4224(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1D80E43E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1D80E4558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a10);
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a9);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1D80E4798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_1D80E47C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1D80E47D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)va);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v8 - 136));
  _Unwind_Resume(a1);
}

void sub_1D80E47F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1D80E4804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a29);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a16);
  _Unwind_Resume(a1);
}

void sub_1D80E4820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D80E4834(_Unwind_Exception *a1)
{
  uint64_t v1;

  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1D80E4AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)va2);
  std::optional<WebCore::BoundaryPoint>::~optional((uint64_t *)(v6 - 72));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D80E4B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D80E4D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v13 - 40));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1D80E4F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)(v13 - 40));
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a13);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a11);
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a10);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_1D80E514C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

void sub_1D80E5318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D80E5334(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a13 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1D80E532CLL);
}

void sub_1D80E54D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a9);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

void sub_1D80E56C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va);
  WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::~Ref((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D80E56DC(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
    {
      WTF::StringImpl::destroy(a13, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a13 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1D80E56D4);
}

void WebVisitedLinkStore::create(WebVisitedLinkStore **a1@<X8>)
{
  WebVisitedLinkStore *v3;

  v3 = (WebVisitedLinkStore *)WTF::fastMalloc((WTF *)0x38);
  WebVisitedLinkStore::WebVisitedLinkStore(v3);
  *a1 = v3;
}

void sub_1D80E5740(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebVisitedLinkStore::WebVisitedLinkStore(WebVisitedLinkStore *this)
{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;

  v2 = WebCore::VisitedLinkStore::VisitedLinkStore(this);
  *(_QWORD *)(v2 + 32) = 0;
  v3 = (uint64_t *)(v2 + 32);
  *(_QWORD *)v2 = off_1E9D6EB68;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  {
    visitedLinkStores(void)::visitedLinkStores = 0;
  }
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = this;
  v6 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
    v5 = *v3;
  }
  do
    v9 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v9 + 1, (unsigned int *)v5));
  v10 = visitedLinkStores(void)::visitedLinkStores;
  if (visitedLinkStores(void)::visitedLinkStores
    || (WTF::HashTable<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>>::rehash(8u),
        (v10 = visitedLinkStores(void)::visitedLinkStores) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
  v13 = *(_QWORD *)(v5 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v11;
    v20 = (uint64_t *)(v10 + 8 * (v17 & v11));
    v21 = *v20;
    if (*v20 == -1)
    {
      v12 = (uint64_t *)(v10 + 8 * v19);
      goto LABEL_14;
    }
    if (!v21)
    {
      if (v12)
      {
        *v12 = 0;
        --*(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 16);
        *v12 = v5;
        v24 = visitedLinkStores(void)::visitedLinkStores;
        if (visitedLinkStores(void)::visitedLinkStores)
          goto LABEL_24;
      }
      else
      {
        *v20 = v5;
        v24 = visitedLinkStores(void)::visitedLinkStores;
        if (visitedLinkStores(void)::visitedLinkStores)
        {
LABEL_24:
          ++*(_DWORD *)(v24 - 12);
          v25 = visitedLinkStores(void)::visitedLinkStores;
          if (visitedLinkStores(void)::visitedLinkStores)
            goto LABEL_25;
          goto LABEL_31;
        }
      }
      *(_DWORD *)(v24 - 12) = 1;
      v25 = visitedLinkStores(void)::visitedLinkStores;
      if (visitedLinkStores(void)::visitedLinkStores)
      {
LABEL_25:
        v26 = (*(_DWORD *)(v25 - 16) + *(_DWORD *)(v25 - 12));
        v27 = *(unsigned int *)(v25 - 4);
        if (v27 <= 0x400)
          goto LABEL_26;
        goto LABEL_32;
      }
LABEL_31:
      v26 = *(unsigned int *)(v25 - 16);
      v27 = *(unsigned int *)(v25 - 4);
      if (v27 <= 0x400)
      {
LABEL_26:
        if (3 * v27 > 4 * v26)
          return;
        if (!(_DWORD)v27)
        {
          v28 = 8;
LABEL_34:
          WTF::HashTable<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>>::rehash(v28);
          return;
        }
LABEL_33:
        v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v27));
        goto LABEL_34;
      }
LABEL_32:
      if (v27 > 2 * v26)
        return;
      goto LABEL_33;
    }
    if (*(_QWORD *)(v21 + 8) == v13)
      break;
LABEL_14:
    v17 = i + v19;
  }
  if (v5)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v5);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v5));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v5);
      WTF::fastFree((WTF *)v5, v12);
    }
  }
}

void sub_1D80E59E8(_Unwind_Exception *a1, void *a2)
{
  WebCore::VisitedLinkStore *v2;
  _QWORD *v3;
  uint64_t v5;

  v5 = *((_QWORD *)v2 + 5);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, a2);
  WebCore::VisitedLinkStore::~VisitedLinkStore(v2);
  _Unwind_Resume(a1);
}

void WebVisitedLinkStore::~WebVisitedLinkStore(WebVisitedLinkStore *this, void *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;

  {
    v3 = visitedLinkStores(void)::visitedLinkStores;
    if (visitedLinkStores(void)::visitedLinkStores)
    {
      v4 = *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 8);
      v5 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      for (i = 1; ; ++i)
      {
        v10 = v8;
        v11 = *(_QWORD *)(visitedLinkStores(void)::visitedLinkStores + 8 * v8);
        if (v11 != -1)
        {
          if (!v11)
            goto LABEL_23;
          if (*(WebVisitedLinkStore **)(v11 + 8) == this)
            break;
        }
        v8 = (v8 + i) & v4;
      }
      if (v8 != *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 4))
      {
        *(_QWORD *)(visitedLinkStores(void)::visitedLinkStores + 8 * v8) = 0;
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          v21 = v8;
          v22 = v3;
          WTF::fastFree((WTF *)v11, a2);
          v10 = v21;
          v3 = v22;
        }
        *(_QWORD *)(v3 + 8 * v10) = -1;
        ++*(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 16);
        if (visitedLinkStores(void)::visitedLinkStores)
        {
          --*(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 12);
          if (visitedLinkStores(void)::visitedLinkStores)
          {
            v14 = *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 4);
            if (6 * *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 12) < v14 && v14 >= 9)
              WTF::HashTable<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>>::rehash(v14 >> 1);
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        }
      }
    }
LABEL_23:
    v16 = *((_QWORD *)this + 5);
    if (v16)
      goto LABEL_24;
  }
  else
  {
    visitedLinkStores(void)::visitedLinkStores = 0;
    v16 = *((_QWORD *)this + 5);
    if (v16)
LABEL_24:
      WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  v17 = *((_QWORD *)this + 4);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v18)
      goto LABEL_29;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
      WebCore::VisitedLinkStore::~VisitedLinkStore(this);
    }
    else
    {
LABEL_29:
      WebCore::VisitedLinkStore::~VisitedLinkStore(this);
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
    WebCore::VisitedLinkStore::~VisitedLinkStore(this);
  }
}

{
  WTF *v2;
  void *v3;

  WebVisitedLinkStore::~WebVisitedLinkStore(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_1D80E5C34(_Unwind_Exception *a1, void *a2)
{
  WebCore::VisitedLinkStore *v2;
  uint64_t v4;

  v4 = *((_QWORD *)v2 + 5);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebFrameLoaderClient,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((_QWORD *)v2 + 4, a2);
  WebCore::VisitedLinkStore::~VisitedLinkStore(v2);
  _Unwind_Resume(a1);
}

uint64_t WebVisitedLinkStore::removeAllVisitedLinks(WebVisitedLinkStore *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;

  {
    if (visitedLinkStores(void)::visitedLinkStores && *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 12))
    {
      v2 = *(unsigned int *)(visitedLinkStores(void)::visitedLinkStores - 4);
      if ((_DWORD)v2)
      {
        v3 = 8 * v2;
        for (i = (uint64_t *)visitedLinkStores(void)::visitedLinkStores; (unint64_t)(*i + 1) <= 1; ++i)
        {
          v3 -= 8;
          if (!v3)
            return result;
        }
      }
      else
      {
        i = (uint64_t *)visitedLinkStores(void)::visitedLinkStores;
      }
      v5 = visitedLinkStores(void)::visitedLinkStores + 8 * v2;
      if (i != (uint64_t *)v5)
      {
        v6 = *i;
LABEL_12:
        v7 = *(_QWORD *)(v6 + 8);
        v8 = *(_DWORD *)(v7 + 8) + 1;
        *(_DWORD *)(v7 + 8) = v8;
        *(_BYTE *)(v7 + 48) = 0;
        v9 = *(_QWORD *)(v7 + 40);
        if (v9 && *(_DWORD *)(v9 - 12))
        {
          *(_QWORD *)(v7 + 40) = 0;
          WTF::fastFree((WTF *)(v9 - 16), a2);
          result = WebCore::VisitedLinkStore::invalidateStylesForAllLinks((WebCore::VisitedLinkStore *)v7);
          v8 = *(_DWORD *)(v7 + 8);
        }
        v11 = v8 - 1;
        if (v11)
          *(_DWORD *)(v7 + 8) = v11;
        else
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        while (++i != (uint64_t *)v5)
        {
          v6 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != (uint64_t *)v5)
              goto LABEL_12;
            return result;
          }
        }
      }
    }
  }
  else
  {
    visitedLinkStores(void)::visitedLinkStores = 0;
  }
  return result;
}

void sub_1D80E5D9C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    _Unwind_Resume(exception_object);
  }
  --v1[2];
  _Unwind_Resume(exception_object);
}

WTF *WebVisitedLinkStore::addVisitedLink(WTF *this, __CFString *a2)
{
  uint64_t *v3;
  NSUInteger v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  _BYTE v9[1024];
  int v10[7];
  int v11;

  if (s_shouldTrackVisitedLinks)
  {
    v3 = (uint64_t *)this;
    v4 = -[__CFString length](a2, "length");
    this = (WTF *)CFStringGetCharactersPtr(a2);
    if (this)
    {
      v10[0] = WebCore::computeSharedStringHash();
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((int *)&v7, v3 + 5, v10);
      return (WTF *)WebCore::VisitedLinkStore::invalidateStylesForLink((WebCore::VisitedLinkStore *)v3);
    }
    else
    {
      v7 = (WTF *)v9;
      LODWORD(v8) = 512;
      HIDWORD(v8) = v4;
      v5 = (WTF *)v9;
      if (v4 >= 0x201)
      {
        if (v4 >> 31)
        {
          __break(0xC471u);
          return this;
        }
        v5 = (WTF *)WTF::fastMalloc((WTF *)(2 * v4));
        LODWORD(v8) = v4;
        v7 = v5;
      }
      -[__CFString getCharacters:](a2, "getCharacters:", v5, v7, v8);
      v11 = WebCore::computeSharedStringHash();
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(v10, v3 + 5, &v11);
      WebCore::VisitedLinkStore::invalidateStylesForLink((WebCore::VisitedLinkStore *)v3);
      this = v7;
      if (v9 != (_BYTE *)v7)
      {
        if (v7)
        {
          v7 = 0;
          LODWORD(v8) = 0;
          return (WTF *)WTF::fastFree(this, v6);
        }
      }
    }
  }
  return this;
}

void sub_1D80E5F08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  WTF *v10;

  if (v10 != a9)
  {
    if (a9)
      WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebVisitedLinkStore::removeVisitedLink(WebVisitedLinkStore *this, NSString *a2)
{
  const WTF::String *v3;
  StringImpl *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  WTF::StringImpl *v14;

  MEMORY[0x1D82A3998](&v14, a2);
  v5 = WebCore::computeSharedStringHash((WebCore *)&v14, v3);
  v6 = v14;
  v14 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      v7 = (uint64_t *)((char *)this + 40);
      v8 = *((_QWORD *)this + 5);
      if (!v8)
        return WebCore::VisitedLinkStore::invalidateStylesForLink(this);
      goto LABEL_7;
    }
    *(_DWORD *)v6 -= 2;
  }
  v7 = (uint64_t *)((char *)this + 40);
  v8 = *((_QWORD *)this + 5);
  if (!v8)
    return WebCore::VisitedLinkStore::invalidateStylesForLink(this);
LABEL_7:
  v9 = *(_DWORD *)(v8 - 8);
  v10 = v9 & v5;
  v11 = *(_DWORD *)(v8 + 4 * v10);
  if (v11 == v5)
  {
LABEL_11:
    if (v10 != *(_DWORD *)(v8 - 4))
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::remove(v7, (_DWORD *)(v8 + 4 * v10));
  }
  else
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v9;
      v11 = *(_DWORD *)(v8 + 4 * v10);
      ++v12;
      if (v11 == v5)
        goto LABEL_11;
    }
  }
  return WebCore::VisitedLinkStore::invalidateStylesForLink(this);
}

void sub_1D80E600C(_Unwind_Exception *exception_object, StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
    {
      WTF::StringImpl::destroy(a10, a2);
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebVisitedLinkStore::isLinkVisited(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  _BOOL8 result;
  WebView *Weak;
  void (*populateVisitedLinksFunc)(void);
  int v13;

  if (!*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 1;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 48) + 16) + 1368))(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16)) & 1) != 0)
    {
      if (objc_msgSend(0, "historyDelegate"))
      {
        Weak = 0;
        populateVisitedLinksFunc = (void (*)(void))qword_1F0165EB8;
        if (!qword_1F0165EB8)
          goto LABEL_2;
        goto LABEL_21;
      }
    }
    else
    {
      Weak = (WebView *)objc_loadWeak((id *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16) + 16));
      if (-[WebView historyDelegate](Weak, "historyDelegate"))
      {
        if (Weak)
        {
          populateVisitedLinksFunc = (void (*)(void))Weak->_private->historyDelegateImplementations.populateVisitedLinksFunc;
          if (!populateVisitedLinksFunc)
            goto LABEL_2;
        }
        else
        {
          populateVisitedLinksFunc = (void (*)(void))qword_1F0165EB8;
          if (!qword_1F0165EB8)
            goto LABEL_2;
        }
LABEL_21:
        CallHistoryDelegate(populateVisitedLinksFunc, Weak, (objc_selector *)sel_populateVisitedLinksForWebView_);
        goto LABEL_2;
      }
    }
    -[WebHistory _addVisitedLinksToVisitedLinkStore:](+[WebHistory optionalSharedHistory](WebHistory, "optionalSharedHistory"), "_addVisitedLinksToVisitedLinkStore:", a1);
  }
LABEL_2:
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = v6 & a3;
  v8 = *(_DWORD *)(v5 + 4 * (v6 & a3));
  if (v8 == a3)
    return 1;
  v13 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v13) & v6;
    v8 = *(_DWORD *)(v5 + 4 * v7);
    ++v13;
  }
  while (v8 != a3);
  return result;
}

uint64_t *WebVisitedLinkStore::addVisitedLink(uint64_t *this, WebCore::Page *a2, int a3)
{
  WebCore::VisitedLinkStore *v3;
  int v4[7];
  int v5;

  if (s_shouldTrackVisitedLinks)
  {
    v3 = (WebCore::VisitedLinkStore *)this;
    v5 = a3;
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(v4, this + 5, &v5);
    return (uint64_t *)WebCore::VisitedLinkStore::invalidateStylesForLink(v3);
  }
  return this;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebVisitedLinkStore,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t i;
  unsigned int **v8;
  unsigned int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v2 = visitedLinkStores(void)::visitedLinkStores;
  if (visitedLinkStores(void)::visitedLinkStores)
  {
    v3 = *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 4);
    v4 = *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  visitedLinkStores(void)::visitedLinkStores = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = (unsigned int **)(v2 + 8 * i);
      v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (visitedLinkStores(void)::visitedLinkStores)
            v10 = *(_DWORD *)(visitedLinkStores(void)::visitedLinkStores - 8);
          else
            v10 = 0;
          v11 = ~(*((_QWORD *)v9 + 1) << 32) + *((_QWORD *)v9 + 1);
          v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
          v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
          v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
          v15 = 1;
          do
          {
            v16 = v14;
            v17 = *(_QWORD *)(visitedLinkStores(void)::visitedLinkStores + 8 * v14);
            v14 = (v14 + v15++) & v10;
          }
          while (v17);
          v18 = (unsigned int **)(visitedLinkStores(void)::visitedLinkStores + 8 * v16);
          *v18 = 0;
          v19 = *v8;
          *v8 = 0;
          *v18 = v19;
          v20 = *v8;
          *v8 = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v6);
            }
          }
        }
        else
        {
          *v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::remove(uint64_t *result, _DWORD *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;

  v2 = result;
  v3 = -1;
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v4 = *result;
  if (*result)
    v3 = *(_DWORD *)(v4 - 12) - 1;
  *(_DWORD *)(v4 - 12) = v3;
  v5 = *result;
  if (*result)
  {
    v6 = *(_DWORD *)(v5 - 12);
    v7 = *(unsigned int *)(v5 - 4);
    if (6 * v6 < v7 && v7 >= 9)
    {
      v9 = WTF::fastZeroedMalloc((WTF *)(4 * (v7 >> 1) + 16));
      v11 = 0;
      *v2 = v9 + 16;
      *(_DWORD *)(v9 + 12) = v7 >> 1;
      *(_DWORD *)(*v2 - 8) = (v7 >> 1) - 1;
      *(_DWORD *)(*v2 - 16) = 0;
      *(_DWORD *)(*v2 - 12) = v6;
      do
      {
        v12 = *(_DWORD *)(v5 + 4 * v11);
        if ((v12 + 1) >= 2)
        {
          v13 = *v2;
          if (*v2)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = 0;
          v16 = *(_DWORD *)(v5 + 4 * v11);
          do
          {
            v17 = v16 & v14;
            v16 = ++v15 + v17;
          }
          while (*(_DWORD *)(v13 + 4 * v17));
          *(_DWORD *)(v13 + 4 * v17) = v12;
        }
        ++v11;
      }
      while (v11 != v7);
      return (uint64_t *)WTF::fastFree((WTF *)(v5 - 16), v10);
    }
  }
  return result;
}

int *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(int *result, uint64_t *a2, int *a3)
{
  int *v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
    v9 = *a3;
    v10 = *a3 & v8;
    v11 = (int *)(v6 + 4 * v10);
    v12 = *v11;
    if (*v11)
      goto LABEL_4;
LABEL_16:
    *v11 = v9;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      v16 = *a2;
      if (*a2)
        goto LABEL_18;
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      v16 = *a2;
      if (*a2)
      {
LABEL_18:
        v17 = (*(_DWORD *)(v16 - 16) + *(_DWORD *)(v16 - 12));
        v18 = *(unsigned int *)(v16 - 4);
        if (v18 <= 0x400)
          goto LABEL_19;
        goto LABEL_23;
      }
    }
    v17 = *(unsigned int *)(v16 - 16);
    v18 = *(unsigned int *)(v16 - 4);
    if (v18 <= 0x400)
    {
LABEL_19:
      if (3 * v18 > 4 * v17)
        goto LABEL_27;
      goto LABEL_24;
    }
LABEL_23:
    if (v18 > 2 * v17)
    {
LABEL_27:
      *(_QWORD *)v5 = v11;
      *((_QWORD *)v5 + 1) = v16 + 4 * v18;
      *((_BYTE *)v5 + 16) = 1;
      return result;
    }
LABEL_24:
    result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(a2, v11);
    v11 = result;
    v16 = *a2;
    if (*a2)
      v18 = *(unsigned int *)(v16 - 4);
    else
      v18 = 0;
    goto LABEL_27;
  }
  v8 = 0;
  v7 = 1;
  v9 = *a3;
  v10 = 0;
  v11 = 0;
  v12 = MEMORY[0];
  if (!MEMORY[0])
    goto LABEL_16;
LABEL_4:
  v13 = 0;
  v14 = 1;
  while (v12 != v9)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v8;
    v11 = (int *)(v6 + 4 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        --*(_DWORD *)(*a2 - 16);
        v9 = *a3;
        v11 = v13;
      }
      goto LABEL_16;
    }
  }
  if ((v7 & 1) != 0)
    v15 = 0;
  else
    v15 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)v5 = v11;
  *((_QWORD *)v5 + 1) = v6 + 4 * v15;
  *((_BYTE *)v5 + 16) = 0;
  return result;
}

int *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(4 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (int *)(v4 + 4 * v10);
      if ((*v12 + 1) >= 2)
      {
        v13 = *a1;
        v14 = *a1 ? *(_DWORD *)(v13 - 8) : 0;
        v15 = 0;
        v16 = *v12;
        do
        {
          v17 = v16 & v14;
          v16 = ++v15 + v17;
        }
        while (*(_DWORD *)(v13 + 4 * v17));
        v18 = (int *)(v13 + 4 * v17);
        *v18 = *v12;
        if (v12 == a2)
          v11 = v18;
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
  }
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2640](retstr, sx, sy, sz);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

void *__cdecl CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
{
  return (void *)MEMORY[0x1E0C98108](bundle, functionName);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98130](bundle);
}

void CFBundleGetPackageInfo(CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator)
{
  MEMORY[0x1E0C98158](bundle, packageType, packageCreator);
}

UInt32 CFBundleGetVersionNumber(CFBundleRef bundle)
{
  return MEMORY[0x1E0C98188](bundle);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1E0C98320](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x1E0C98328](theSet, *(_QWORD *)&theChar);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98630](err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFStringRef CFHTTPAuthenticationCopyMethod(CFHTTPAuthenticationRef auth)
{
  return (CFStringRef)MEMORY[0x1E0C92750](auth);
}

CFStringRef CFHTTPAuthenticationCopyRealm(CFHTTPAuthenticationRef auth)
{
  return (CFStringRef)MEMORY[0x1E0C92758](auth);
}

CFHTTPAuthenticationRef CFHTTPAuthenticationCreateFromResponse(CFAllocatorRef alloc, CFHTTPMessageRef response)
{
  return (CFHTTPAuthenticationRef)MEMORY[0x1E0C92760](alloc, response);
}

Boolean CFHTTPAuthenticationRequiresUserNameAndPassword(CFHTTPAuthenticationRef auth)
{
  return MEMORY[0x1E0C92770](auth);
}

uint64_t CFHTTPCookieStorageSetCookieAcceptPolicy()
{
  return MEMORY[0x1E0C927C8]();
}

Boolean CFHTTPMessageApplyCredentials(CFHTTPMessageRef request, CFHTTPAuthenticationRef auth, CFStringRef username, CFStringRef password, CFStreamError *error)
{
  return MEMORY[0x1E0C927E0](request, auth, username, password, error);
}

CFStringRef CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField)
{
  return (CFStringRef)MEMORY[0x1E0C927F8](message, headerField);
}

CFHTTPMessageRef CFHTTPMessageCreateRequest(CFAllocatorRef alloc, CFStringRef requestMethod, CFURLRef url, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x1E0C92838](alloc, requestMethod, url, httpVersion);
}

CFIndex CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef response)
{
  return MEMORY[0x1E0C92848](response);
}

CFTypeID CFHTTPMessageGetTypeID(void)
{
  return MEMORY[0x1E0C92850]();
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98858](cf);
}

CFArrayRef CFNetworkCopyProxiesForURL(CFURLRef url, CFDictionaryRef proxySettings)
{
  return (CFArrayRef)MEMORY[0x1E0C928C0](url, proxySettings);
}

CFDictionaryRef CFNetworkCopySystemProxySettings(void)
{
  return (CFDictionaryRef)MEMORY[0x1E0C928C8]();
}

CFRunLoopSourceRef CFNetworkExecuteProxyAutoConfigurationURL(CFURLRef proxyAutoConfigURL, CFURLRef targetURL, CFProxyAutoConfigurationResultCallback cb, CFStreamClientContext *clientContext)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C928D8](proxyAutoConfigURL, targetURL, cb, clientContext);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1E0C98B20](stream);
}

CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1E0C98B28](stream, propertyName);
}

const UInt8 *__cdecl CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex *numBytesRead)
{
  return (const UInt8 *)MEMORY[0x1E0C98B50](stream, maxBytesToRead, numBytesRead);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C98B88](stream, buffer, bufferLength);
}

void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x1E0C98B90](stream, runLoop, runLoopMode);
}

Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1E0C98B98](stream, streamEvents, clientCB, clientContext);
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0C98BA8](stream, propertyName, propertyValue);
}

void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x1E0C98BB8](stream, runLoop, runLoopMode);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C00](rl, timer, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CE0](source);
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1E0C98D08](allocator, flags, order, callout, context, fireDate, interval);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1E0C98DC0](theSet, value);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DF0](theSet, value);
}

void CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc, CFStringRef host, UInt32 port, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream)
{
  MEMORY[0x1E0C98ED0](alloc, host, *(_QWORD *)&port, readStream, writeStream);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C99058](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

uint64_t CFStringGetRangeOfCharacterClusterAtIndex()
{
  return MEMORY[0x1E0C99158]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1E0C99238](tokenizer, index);
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
  MEMORY[0x1E0C99240](tokenizer, string, range.location, range.length);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

uint64_t CFURLCacheSetMemoryCapacity()
{
  return MEMORY[0x1E0C92920]();
}

CFURLRef CFURLGetBaseURL(CFURLRef anURL)
{
  return (CFURLRef)MEMORY[0x1E0C99478](anURL);
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99488](url, buffer, bufferLength);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream)
{
  return MEMORY[0x1E0C995F8](stream);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
  MEMORY[0x1E0C99600](stream);
}

CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1E0C99608](stream);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1E0C99650](stream);
}

void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x1E0C99658](stream, runLoop, runLoopMode);
}

Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1E0C99660](stream, streamEvents, clientCB, clientContext);
}

Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0C99670](stream, propertyName, propertyValue);
}

void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x1E0C99680](stream, runLoop, runLoopMode);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99688](stream, buffer, bufferLength);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C038](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
  MEMORY[0x1E0C9C1A0](c, page);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGContextGetType()
{
  return MEMORY[0x1E0C9C318]();
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

uint64_t CGContextSetBaseCTM()
{
  return MEMORY[0x1E0C9C3C0]();
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
  MEMORY[0x1E0C9C4C0](c, color, (__n128)offset, *(__n128 *)&offset.height, blur);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

size_t CGPDFArrayGetCount(CGPDFArrayRef array)
{
  return MEMORY[0x1E0C9CE88](array);
}

BOOL CGPDFArrayGetDictionary(CGPDFArrayRef array, size_t index, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1E0C9CE90](array, index, value);
}

BOOL CGPDFArrayGetObject(CGPDFArrayRef array, size_t index, CGPDFObjectRef *value)
{
  return MEMORY[0x1E0C9CEA8](array, index, value);
}

BOOL CGPDFDictionaryGetArray(CGPDFDictionaryRef dict, const char *key, CGPDFArrayRef *value)
{
  return MEMORY[0x1E0C9CEF8](dict, key, value);
}

BOOL CGPDFDictionaryGetDictionary(CGPDFDictionaryRef dict, const char *key, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1E0C9CF00](dict, key, value);
}

BOOL CGPDFDictionaryGetName(CGPDFDictionaryRef dict, const char *key, const char **value)
{
  return MEMORY[0x1E0C9CF08](dict, key, value);
}

BOOL CGPDFDictionaryGetStream(CGPDFDictionaryRef dict, const char *key, CGPDFStreamRef *value)
{
  return MEMORY[0x1E0C9CF20](dict, key, value);
}

BOOL CGPDFDictionaryGetString(CGPDFDictionaryRef dict, const char *key, CGPDFStringRef *value)
{
  return MEMORY[0x1E0C9CF28](dict, key, value);
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return (CGPDFDocumentRef)MEMORY[0x1E0C9CF58](provider);
}

CGPDFDictionaryRef CGPDFDocumentGetCatalog(CGPDFDocumentRef document)
{
  return (CGPDFDictionaryRef)MEMORY[0x1E0C9CF70](document);
}

CGPDFDictionaryRef CGPDFDocumentGetInfo(CGPDFDocumentRef document)
{
  return (CGPDFDictionaryRef)MEMORY[0x1E0C9CF90](document);
}

size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
{
  return MEMORY[0x1E0C9CF98](document);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x1E0C9CFA0](document, pageNumber);
}

BOOL CGPDFDocumentIsUnlocked(CGPDFDocumentRef document)
{
  return MEMORY[0x1E0C9CFC0](document);
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
  MEMORY[0x1E0C9CFC8](document);
}

CGPDFDocumentRef CGPDFDocumentRetain(CGPDFDocumentRef document)
{
  return (CGPDFDocumentRef)MEMORY[0x1E0C9CFD0](document);
}

BOOL CGPDFObjectGetValue(CGPDFObjectRef object, CGPDFObjectType type, void *value)
{
  return MEMORY[0x1E0C9D070](object, *(_QWORD *)&type, value);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D090](page, *(_QWORD *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9D0A8](retstr, page, *(_QWORD *)&box, *(_QWORD *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

size_t CGPDFPageGetPageNumber(CGPDFPageRef page)
{
  return MEMORY[0x1E0C9D0B8](page);
}

int CGPDFPageGetRotationAngle(CGPDFPageRef page)
{
  return MEMORY[0x1E0C9D0C8](page);
}

CFDataRef CGPDFStreamCopyData(CGPDFStreamRef stream, CGPDFDataFormat *format)
{
  return (CFDataRef)MEMORY[0x1E0C9D260](stream, format);
}

CFStringRef CGPDFStringCopyTextString(CGPDFStringRef string)
{
  return (CFStringRef)MEMORY[0x1E0C9D268](string);
}

const unsigned __int8 *__cdecl CGPDFStringGetBytePtr(CGPDFStringRef string)
{
  return (const unsigned __int8 *)MEMORY[0x1E0C9D270](string);
}

size_t CGPDFStringGetLength(CGPDFStringRef string)
{
  return MEMORY[0x1E0C9D278](string);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D4A0](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t InitWebCoreThreadSystemInterface()
{
  return MEMORY[0x1E0DCDD50]();
}

JSClassRef JSClassCreate(const JSClassDefinition *definition)
{
  return (JSClassRef)MEMORY[0x1E0CBDDD0](definition);
}

JSValueRef JSEvaluateScript(JSContextRef ctx, JSStringRef script, JSObjectRef thisObject, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1E0CBDDF8](ctx, script, thisObject, sourceURL, *(_QWORD *)&startingLineNumber, exception);
}

JSGlobalContextRef JSGlobalContextCreate(JSClassRef globalObjectClass)
{
  return (JSGlobalContextRef)MEMORY[0x1E0CBDE08](globalObjectClass);
}

void JSGlobalContextRelease(JSGlobalContextRef ctx)
{
  MEMORY[0x1E0CBDE18](ctx);
}

void *__cdecl JSObjectGetPrivate(JSObjectRef object)
{
  return (void *)MEMORY[0x1E0CBDE58](object);
}

JSObjectRef JSObjectMake(JSContextRef ctx, JSClassRef jsClass, void *data)
{
  return (JSObjectRef)MEMORY[0x1E0CBDEB0](ctx, jsClass, data);
}

BOOL JSValueIsObjectOfClass(JSContextRef ctx, JSValueRef value, JSClassRef jsClass)
{
  return MEMORY[0x1E0CBE040](ctx, value, jsClass);
}

JSValueRef JSValueMakeUndefined(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1E0CBE080](ctx);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

BOOL NSEqualPoints(NSPoint aPoint, NSPoint bPoint)
{
  return MEMORY[0x1E0CB29B8]((__n128)aPoint, *(__n128 *)&aPoint.y, (__n128)bPoint, *(__n128 *)&bPoint.y);
}

BOOL NSEqualSizes(NSSize aSize, NSSize bSize)
{
  return MEMORY[0x1E0CB29C8]((__n128)aSize, *(__n128 *)&aSize.height, (__n128)bSize, *(__n128 *)&bSize.height);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

NSRect NSInsetRect(NSRect aRect, CGFloat dX, CGFloat dY)
{
  double v3;
  double v4;
  double v5;
  double v6;
  NSRect result;

  MEMORY[0x1E0CB2C30]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, dX, dY);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

NSRect NSIntersectionRect(NSRect aRect, NSRect bRect)
{
  double v2;
  double v3;
  double v4;
  double v5;
  NSRect result;

  MEMORY[0x1E0CB2C60]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, (__n128)bRect.origin, *(__n128 *)&bRect.origin.y, (__n128)bRect.size, *(__n128 *)&bRect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL NSIsEmptyRect(NSRect aRect)
{
  return MEMORY[0x1E0CB2C90]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

BOOL NSPointInRect(NSPoint aPoint, NSRect aRect)
{
  return MEMORY[0x1E0CB3030]((__n128)aPoint, *(__n128 *)&aPoint.y, (__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

int32_t NSVersionOfLinkTimeLibrary(const char *libraryName)
{
  return MEMORY[0x1E0C805C8](libraryName);
}

fat_arch *__cdecl NXFindBestFatArch(cpu_type_t cputype, cpu_subtype_t cpusubtype, fat_arch *fat_archs, uint32_t nfat_archs)
{
  return (fat_arch *)MEMORY[0x1E0C805D8](*(_QWORD *)&cputype, *(_QWORD *)&cpusubtype, fat_archs, *(_QWORD *)&nfat_archs);
}

const NXArchInfo *NXGetLocalArchInfo(void)
{
  return (const NXArchInfo *)MEMORY[0x1E0C805F0]();
}

uint64_t WKGetCurrentGraphicsContext()
{
  return MEMORY[0x1E0DCDDE0]();
}

uint64_t WKRectFill()
{
  return MEMORY[0x1E0DCDDE8]();
}

uint64_t WKSetCurrentGraphicsContext()
{
  return MEMORY[0x1E0DCDDF0]();
}

uint64_t WebCoreObjCDeallocOnWebThread()
{
  return MEMORY[0x1E0DCDDF8]();
}

uint64_t WebThreadCallDelegate()
{
  return MEMORY[0x1E0DCDE00]();
}

uint64_t WebThreadEnable()
{
  return MEMORY[0x1E0DCDE08]();
}

uint64_t WebThreadIsCurrent()
{
  return MEMORY[0x1E0DCDE10]();
}

uint64_t WebThreadIsEnabled()
{
  return MEMORY[0x1E0DCDE18]();
}

uint64_t WebThreadIsLocked()
{
  return MEMORY[0x1E0DCDE20]();
}

uint64_t WebThreadLock()
{
  return MEMORY[0x1E0DCDE28]();
}

uint64_t WebThreadLockPopModal()
{
  return MEMORY[0x1E0DCDE30]();
}

uint64_t WebThreadLockPushModal()
{
  return MEMORY[0x1E0DCDE38]();
}

uint64_t WebThreadMakeNSInvocation()
{
  return MEMORY[0x1E0DCDE40]();
}

uint64_t WebThreadNSRunLoop()
{
  return MEMORY[0x1E0DCDE48]();
}

uint64_t WebThreadNotCurrent()
{
  return MEMORY[0x1E0DCDE50]();
}

uint64_t WebThreadPostNotification()
{
  return MEMORY[0x1E0DCDE58]();
}

uint64_t WebThreadRun()
{
  return MEMORY[0x1E0DCDE60]();
}

uint64_t WebThreadRunLoop()
{
  return MEMORY[0x1E0DCDE68]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFHTTPMessageSetResponseURL()
{
  return MEMORY[0x1E0C92E10]();
}

uint64_t _CFNetworkIsKnownHSTSHostWithSession()
{
  return MEMORY[0x1E0C92F10]();
}

uint64_t _CFURLCacheCopyCacheDirectory()
{
  return MEMORY[0x1E0C92F30]();
}

uint64_t _CFURLStorageSessionCopyCookieStorage()
{
  return MEMORY[0x1E0C92F90]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t ReportBlockedObjCException(NSException *a1)
{
  return MEMORY[0x1E0CBE1A0](a1);
}

uint64_t suggestedFilenameWithMIMEType(NSURL *a1, const WTF::String *a2)
{
  return MEMORY[0x1E0DCDE90](a1, a2);
}

uint64_t filenameByFixingIllegalCharacters(NSString *a1)
{
  return MEMORY[0x1E0DCDE98](a1);
}

uint64_t WebCoreObjCScheduleDeallocateOnMainThread(objc_class *a1, objc_object *a2)
{
  return MEMORY[0x1E0DCDEA0](a1, a2);
}

uint64_t OpaqueJSString::tryCreate()
{
  return MEMORY[0x1E0CBE1B0]();
}

void OpaqueJSString::~OpaqueJSString(OpaqueJSString *this)
{
  MEMORY[0x1E0CBE1C0](this);
}

uint64_t JSC::Breakpoint::create()
{
  return MEMORY[0x1E0CBE1C8]();
}

uint64_t JSC::JSLockHolder::JSLockHolder()
{
  return MEMORY[0x1E0CBE2F0]();
}

{
  return MEMORY[0x1E0CBE300]();
}

void JSC::JSLockHolder::~JSLockHolder(JSC::JSLockHolder *this)
{
  MEMORY[0x1E0CBE308](this);
}

uint64_t JSC::SourceProvider::getID(JSC::SourceProvider *this)
{
  return MEMORY[0x1E0CBE4E0](this);
}

void JSC::BufferMemoryHandle::~BufferMemoryHandle(JSC::BufferMemoryHandle *this)
{
  MEMORY[0x1E0CBE6C0](this);
}

uint64_t JSC::InlineWatchpointSet::freeFat(JSC::InlineWatchpointSet *this)
{
  return MEMORY[0x1E0CBE730](this);
}

uint64_t JSC::globalMemoryStatistics(JSC *this)
{
  return MEMORY[0x1E0CBE7F8](this);
}

void JSC::SharedArrayBufferContents::~SharedArrayBufferContents(JSC::SharedArrayBufferContents *this)
{
  MEMORY[0x1E0CBE848](this);
}

uint64_t JSC::Heap::objectCount(JSC::Heap *this)
{
  return MEMORY[0x1E0CBE998](this);
}

uint64_t JSC::Heap::objectTypeCounts(JSC::Heap *this)
{
  return MEMORY[0x1E0CBE9B0](this);
}

uint64_t JSC::Heap::globalObjectCount(JSC::Heap *this)
{
  return MEMORY[0x1E0CBE9C0](this);
}

uint64_t JSC::Heap::protectedObjectCount(JSC::Heap *this)
{
  return MEMORY[0x1E0CBE9E8](this);
}

uint64_t JSC::Heap::protectedObjectTypeCounts(JSC::Heap *this)
{
  return MEMORY[0x1E0CBEA00](this);
}

uint64_t JSC::Heap::protectedGlobalObjectCount(JSC::Heap *this)
{
  return MEMORY[0x1E0CBEA18](this);
}

uint64_t JSC::Heap::size(JSC::Heap *this)
{
  return MEMORY[0x1E0CBEA60](this);
}

uint64_t JSC::Heap::capacity(JSC::Heap *this)
{
  return MEMORY[0x1E0CBEA70](this);
}

uint64_t JSC::Yarr::RegularExpression::RegularExpression()
{
  return MEMORY[0x1E0CBEAE0]();
}

void JSC::Yarr::RegularExpression::~RegularExpression(JSC::Yarr::RegularExpression *this)
{
  MEMORY[0x1E0CBEAF0](this);
}

uint64_t JSC::Yarr::replace()
{
  return MEMORY[0x1E0CBEB18]();
}

uint64_t JSC::JSLock::DropAllLocks::DropAllLocks()
{
  return MEMORY[0x1E0CBEB58]();
}

void JSC::JSLock::DropAllLocks::~DropAllLocks(JSC::JSLock::DropAllLocks *this)
{
  MEMORY[0x1E0CBEB60](this);
}

uint64_t JSC::Debugger::setBreakpointsActivated(JSC::Debugger *this)
{
  return MEMORY[0x1E0CBEC68](this);
}

uint64_t JSC::Debugger::currentDebuggerCallFrame(JSC::Debugger *this)
{
  return MEMORY[0x1E0CBEC70](this);
}

uint64_t JSC::Debugger::attach()
{
  return MEMORY[0x1E0CBEC78]();
}

uint64_t JSC::Debugger::Debugger()
{
  return MEMORY[0x1E0CBEC88]();
}

void JSC::Debugger::~Debugger(JSC::Debugger *this)
{
  MEMORY[0x1E0CBEC90](this);
}

uint64_t JSC::HandleSet::grow(JSC::HandleSet *this)
{
  return MEMORY[0x1E0CBEE58](this);
}

uint64_t PAL::TextEncoding::TextEncoding(PAL::TextEncoding *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCDEE0](this, a2);
}

uint64_t PAL::UTF8Encoding(PAL *this)
{
  return MEMORY[0x1E0DCDEE8](this);
}

uint64_t PAL::WindowsLatin1Encoding(PAL *this)
{
  return MEMORY[0x1E0DCDF80](this);
}

uint64_t PAL::decodeURLEscapeSequences()
{
  return MEMORY[0x1E0DCE008]();
}

uint64_t PAL::deviceClassIsSmallScreen(PAL *this)
{
  return MEMORY[0x1E0DCE010](this);
}

uint64_t PAL::webDefaultCFStringEncoding(PAL *this)
{
  return MEMORY[0x1E0DCE070](this);
}

uint64_t PAL::defaultTextEncodingNameForSystemLanguage(PAL *this)
{
  return MEMORY[0x1E0DCE228](this);
}

uint64_t WTF::ParkingLot::unparkOneImpl()
{
  return MEMORY[0x1E0CBEF38]();
}

uint64_t WTF::ParkingLot::parkConditionallyImpl()
{
  return MEMORY[0x1E0CBEF40]();
}

uint64_t WTF::ParkingLot::unparkAll(WTF::ParkingLot *this, const void *a2)
{
  return MEMORY[0x1E0CBEF48](this, a2);
}

uint64_t WTF::StringImpl::createWithoutCopyingNonEmpty()
{
  return MEMORY[0x1E0CBEFA8]();
}

{
  return MEMORY[0x1E0CBEFB0]();
}

uint64_t WTF::StringImpl::destroy(WTF::StringImpl *this, StringImpl *a2)
{
  return MEMORY[0x1E0CBEFF8](this, a2);
}

uint64_t WTF::StringImpl::replace()
{
  return MEMORY[0x1E0CBF000]();
}

uint64_t WTF::StringImpl::endsWith()
{
  return MEMORY[0x1E0CBF020]();
}

uint64_t WTF::StringImpl::substring(WTF::StringImpl *this)
{
  return MEMORY[0x1E0CBF028](this);
}

uint64_t WTF::StringImpl::operator NSString *()
{
  return MEMORY[0x1E0CBF030]();
}

uint64_t WTF::fastMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF100](this);
}

uint64_t WTF::LogArgument<void const*>::toString()
{
  return MEMORY[0x1E0CBF128]();
}

uint64_t WTF::LogChannels::initializeLogChannelsIfNecessary()
{
  return MEMORY[0x1E0CBF138]();
}

uint64_t WTF::URLWithData(WTF *this, NSData *a2, NSURL *a3)
{
  return MEMORY[0x1E0CBF280](this, a2, a3);
}

uint64_t WTF::fastRealloc(WTF *this, void *a2)
{
  return MEMORY[0x1E0CBF290](this, a2);
}

uint64_t WTF::logChannels(WTF *this)
{
  return MEMORY[0x1E0CBF2A0](this);
}

uint64_t WTF::SchedulePair::SchedulePair(WTF::SchedulePair *this, NSRunLoop *a2, const __CFString *a3)
{
  return MEMORY[0x1E0CBF2C8](this, a2, a3);
}

uint64_t WTF::isMainThread(WTF *this)
{
  return MEMORY[0x1E0CBF2F0](this);
}

uint64_t WTF::MonotonicTime::now(WTF::MonotonicTime *this)
{
  return MEMORY[0x1E0CBF348](this);
}

uint64_t WTF::StringBuilder::shrinkToFit(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF350](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingLChar(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF368](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingWithUpconvert(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF370](this);
}

uint64_t WTF::StringBuilder::append()
{
  return MEMORY[0x1E0CBF380]();
}

uint64_t WTF::aboutBlankURL(WTF *this)
{
  return MEMORY[0x1E0CBF398](this);
}

uint64_t WTF::allPrivileges(WTF *this)
{
  return MEMORY[0x1E0CBF3A0](this);
}

uint64_t WTF::AtomStringImpl::addSlowCase()
{
  return MEMORY[0x1E0CBF448]();
}

uint64_t WTF::AtomStringImpl::add()
{
  return MEMORY[0x1E0CBF470]();
}

uint64_t WTF::AtomStringImpl::add(WTF::AtomStringImpl *this, const __CFString *a2)
{
  return MEMORY[0x1E0CBF478](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteFile(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4A0](this, a2);
}

uint64_t WTF::FileSystemImpl::fileExists(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4A8](this, a2);
}

uint64_t WTF::FileSystemImpl::parentPath(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4B0](this, a2);
}

uint64_t WTF::FileSystemImpl::listDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4F0](this, a2);
}

void WTF::FileSystemImpl::MappedFileData::~MappedFileData(WTF::FileSystemImpl::MappedFileData *this)
{
  MEMORY[0x1E0CBF510](this);
}

uint64_t WTF::FileSystemImpl::makeAllDirectories(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF578](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteNonEmptyDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF5C8](this, a2);
}

uint64_t WTF::FileSystemImpl::createTemporaryDirectory(WTF::FileSystemImpl *this, NSString *a2)
{
  return MEMORY[0x1E0CBF5D0](this, a2);
}

uint64_t WTF::FileSystemImpl::pathByAppendingComponent()
{
  return MEMORY[0x1E0CBF5E0]();
}

uint64_t WTF::FileSystemImpl::fileSize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF648](this, a2);
}

uint64_t WTF::decodeHostName(WTF *this, NSString *a2)
{
  return MEMORY[0x1E0CBF6B0](this, a2);
}

uint64_t WTF::encodeHostName(WTF *this, NSString *a2)
{
  return MEMORY[0x1E0CBF6B8](this, a2);
}

uint64_t WTF::AutodrainedPool::AutodrainedPool(WTF::AutodrainedPool *this)
{
  return MEMORY[0x1E0CBF710](this);
}

void WTF::AutodrainedPool::~AutodrainedPool(WTF::AutodrainedPool *this)
{
  MEMORY[0x1E0CBF718](this);
}

uint64_t WTF::BinarySemaphore::signal(WTF::BinarySemaphore *this)
{
  return MEMORY[0x1E0CBF720](this);
}

uint64_t WTF::BinarySemaphore::waitUntil()
{
  return MEMORY[0x1E0CBF728]();
}

uint64_t WTF::defaultLanguage()
{
  return MEMORY[0x1E0CBF730]();
}

uint64_t WTF::originalURLData(WTF *this, NSURL *a2)
{
  return MEMORY[0x1E0CBF768](this, a2);
}

uint64_t WTF::callOnMainThread()
{
  return MEMORY[0x1E0CBF778]();
}

uint64_t WTF::fastZeroedMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF790](this);
}

uint64_t WTF::isUserVisibleURL(WTF *this, NSString *a2)
{
  return MEMORY[0x1E0CBF798](this, a2);
}

uint64_t WTF::NativePromiseBase::logChannel(WTF::NativePromiseBase *this)
{
  return MEMORY[0x1E0CBF7B8](this);
}

uint64_t WTF::TextBreakIterator::TextBreakIterator()
{
  return MEMORY[0x1E0CBF7E8]();
}

uint64_t WTF::fastCompactMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF820](this);
}

uint64_t WTF::makeVectorElement(WTF *this, const WTF::String *a2, objc_object *a3)
{
  return MEMORY[0x1E0CBF830](this, a2, a3);
}

uint64_t WTF::userVisibleString(WTF *this, NSURL *a2)
{
  return MEMORY[0x1E0CBF848](this, a2);
}

uint64_t WTF::ensureOnMainThread()
{
  return MEMORY[0x1E0CBF880]();
}

uint64_t WTF::makeNSArrayElement(WTF *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF8A0](this, a2);
}

uint64_t WTF::fastMallocStatistics(WTF *this)
{
  return MEMORY[0x1E0CBF978](this);
}

uint64_t WTF::initializeMainThread(WTF *this)
{
  return MEMORY[0x1E0CBF980](this);
}

uint64_t WTF::setProcessPrivileges()
{
  return MEMORY[0x1E0CBF998]();
}

uint64_t WTF::tryFastCompactMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF9A0](this);
}

uint64_t WTF::MemoryPressureHandler::install(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1E0CBF9D8](this);
}

uint64_t WTF::MemoryPressureHandler::singleton(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1E0CBF9E0](this);
}

uint64_t WTF::URLByRemovingUserInfo(WTF *this, NSURL *a2)
{
  return MEMORY[0x1E0CBF9E8](this, a2);
}

uint64_t WTF::TextBreakIteratorCache::singleton(WTF::TextBreakIteratorCache *this)
{
  return MEMORY[0x1E0CBFA18](this);
}

uint64_t WTF::URLWithUserTypedString(WTF *this, NSString *a2, NSURL *a3)
{
  return MEMORY[0x1E0CBFA20](this, a2, a3);
}

uint64_t WTF::callOnMainThreadAndWait()
{
  return MEMORY[0x1E0CBFA68]();
}

uint64_t WTF::dataForURLComponentType(WTF *this, NSURL *a2, CFURLComponentType a3)
{
  return MEMORY[0x1E0CBFA70](this, a2, a3);
}

uint64_t WTF::releaseFastMallocFreeMemory(WTF *this)
{
  return MEMORY[0x1E0CBFAF0](this);
}

uint64_t WTF::createContextualizedCFString()
{
  return MEMORY[0x1E0CBFAF8]();
}

uint64_t WTF::linkedOnOrAfterSDKWithBehavior()
{
  return MEMORY[0x1E0CBFB70]();
}

uint64_t WTF::URLWithUserTypedStringDeprecated(WTF *this, NSString *a2)
{
  return MEMORY[0x1E0CBFBB0](this, a2);
}

uint64_t WTF::openUTF16ContextAwareUTextProvider()
{
  return MEMORY[0x1E0CBFBC8]();
}

uint64_t WTF::openLatin1ContextAwareUTextProvider()
{
  return MEMORY[0x1E0CBFBD8]();
}

uint64_t WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return MEMORY[0x1E0CBFBE8]();
}

uint64_t WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return MEMORY[0x1E0CBFBF0]();
}

uint64_t WTF::URL::invalidate(WTF::URL *this)
{
  return MEMORY[0x1E0CBFC08](this);
}

uint64_t WTF::URL::fakeURLWithRelativePart()
{
  return MEMORY[0x1E0CBFC48]();
}

uint64_t WTF::URL::URL()
{
  return MEMORY[0x1E0CBFC98]();
}

uint64_t WTF::URL::URL(WTF::URL *this, NSURL *a2)
{
  return MEMORY[0x1E0CBFCA0](this, a2);
}

uint64_t WTF::URLByTruncatingOneCharacterBeforeComponent(WTF *this, NSURL *a2, CFURLComponentType a3)
{
  return MEMORY[0x1E0CBFCC0](this, a2, a3);
}

uint64_t WTF::Lock::unlockSlow(WTF::Lock *this)
{
  return MEMORY[0x1E0CBFCE8](this);
}

uint64_t WTF::Lock::lockSlow(WTF::Lock *this)
{
  return MEMORY[0x1E0CBFCF0](this);
}

uint64_t WTF::UUID::UUID(WTF::UUID *this)
{
  return MEMORY[0x1E0CBFD48](this);
}

uint64_t WTF::equal()
{
  return MEMORY[0x1E0CBFD78]();
}

uint64_t WTF::equal(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return MEMORY[0x1E0CBFD88](this, a2, a3);
}

{
  return MEMORY[0x1E0CBFD90](this, a2, a3);
}

uint64_t WTF::Logger::observers(WTF::Logger *this)
{
  return MEMORY[0x1E0CBFDB0](this);
}

uint64_t WTF::String::number(WTF::String *this)
{
  return MEMORY[0x1E0CBFDF0](this);
}

uint64_t WTF::String::fromUTF8()
{
  return MEMORY[0x1E0CBFE18]();
}

uint64_t WTF::String::String()
{
  return MEMORY[0x1E0CBFE28]();
}

{
  return MEMORY[0x1E0CBFE30]();
}

{
  return MEMORY[0x1E0CBFE38]();
}

uint64_t WTF::String::String(WTF::String *this, const __CFString *a2)
{
  return MEMORY[0x1E0CBFE40](this, a2);
}

uint64_t WTF::String::String(WTF::String *this, const char *a2)
{
  return MEMORY[0x1E0CBFE48](this, a2);
}

uint64_t WTF::Thread::waitForCompletion(WTF::Thread *this)
{
  return MEMORY[0x1E0CBFE78](this);
}

uint64_t WTF::Thread::create()
{
  return MEMORY[0x1E0CBFEA8]();
}

void WTF::Thread::~Thread(WTF::Thread *this)
{
  MEMORY[0x1E0CBFEB8](this);
}

uint64_t WTF::RunLoop::main(WTF::RunLoop *this)
{
  return MEMORY[0x1E0CBFF00](this);
}

uint64_t WTF::RunLoop::dispatch()
{
  return MEMORY[0x1E0CBFF30]();
}

uint64_t WTF::ramSize(WTF *this)
{
  return MEMORY[0x1E0CBFF90](this);
}

uint64_t WTF::Internal::appendHex()
{
  return MEMORY[0x1E0CBFFA8]();
}

uint64_t WTF::fastFree(WTF *this, void *a2)
{
  return MEMORY[0x1E0CC0018](this, a2);
}

uint64_t WTF::WorkQueue::main(WTF::WorkQueue *this)
{
  return MEMORY[0x1E0CC00B8](this);
}

uint64_t WTF::WorkQueue::create()
{
  return MEMORY[0x1E0CC00C0]();
}

uint64_t WebCore::FloatPoint::FloatPoint(WebCore::FloatPoint *this, const CGPoint *a2)
{
  return MEMORY[0x1E0DCE610](this, a2);
}

uint64_t WebCore::JSNodeList::toWrapped()
{
  return MEMORY[0x1E0DCE620]();
}

uint64_t WebCore::LayoutRect::LayoutRect(WebCore::LayoutRect *this, const FloatRect *a2)
{
  return MEMORY[0x1E0DCE628](this, a2);
}

uint64_t WebCore::LocalFrame::rangeForPoint(WebCore::LocalFrame *this, const IntPoint *a2)
{
  return MEMORY[0x1E0DCE648](this, a2);
}

uint64_t WebCore::LocalFrame::createSubframe()
{
  return MEMORY[0x1E0DCE650]();
}

uint64_t WebCore::LocalFrame::setTimersPaused(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE660](this);
}

uint64_t WebCore::LocalFrame::orientationChanged(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE678](this);
}

uint64_t WebCore::LocalFrame::deepestNodeAtLocation(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1E0DCE690](this, a2);
}

uint64_t WebCore::LocalFrame::viewportOffsetChanged()
{
  return MEMORY[0x1E0DCE698]();
}

uint64_t WebCore::LocalFrame::rectForScrollToVisible(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE6A0](this);
}

uint64_t WebCore::LocalFrame::searchForLabelsAboveCell()
{
  return MEMORY[0x1E0DCE6A8]();
}

uint64_t WebCore::LocalFrame::setPageAndTextZoomFactors(WebCore::LocalFrame *this, float a2, float a3)
{
  return MEMORY[0x1E0DCE6B8](this, a2, a3);
}

uint64_t WebCore::LocalFrame::initWithSimpleHTMLDocument()
{
  return MEMORY[0x1E0DCE6C0]();
}

uint64_t WebCore::LocalFrame::resizePageRectsKeepingRatio(WebCore::LocalFrame *this, const FloatSize *a2, const FloatSize *a3)
{
  return MEMORY[0x1E0DCE6E0](this, a2, a3);
}

uint64_t WebCore::LocalFrame::resetAllGeolocationPermission(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE6E8](this);
}

uint64_t WebCore::LocalFrame::dispatchPageHideEventBeforePause(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE6F0](this);
}

uint64_t WebCore::LocalFrame::clearRangedSelectionInitialExtent(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE700](this);
}

uint64_t WebCore::LocalFrame::dispatchPageShowEventBeforeResume(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE708](this);
}

uint64_t WebCore::LocalFrame::nodeRespondingToScrollWheelEvents(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1E0DCE710](this, a2);
}

uint64_t WebCore::LocalFrame::recursiveSetUpdateAppearanceEnabled(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE718](this);
}

uint64_t WebCore::LocalFrame::setSelectionChangeCallbacksDisabled(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE720](this);
}

uint64_t WebCore::LocalFrame::overflowScrollPositionChangedForNode(WebCore::LocalFrame *this, const IntPoint *a2, Node *a3)
{
  return MEMORY[0x1E0DCE730](this, a2, a3);
}

uint64_t WebCore::LocalFrame::approximateNodeAtViewportLocationLegacy(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  return MEMORY[0x1E0DCE738](this, a2, a3);
}

uint64_t WebCore::LocalFrame::setRangedSelectionBaseToCurrentSelection(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE740](this);
}

uint64_t WebCore::LocalFrame::setRangedSelectionBaseToCurrentSelectionEnd(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE748](this);
}

uint64_t WebCore::LocalFrame::setRangedSelectionBaseToCurrentSelectionStart(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE750](this);
}

uint64_t WebCore::LocalFrame::init(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE758](this);
}

uint64_t WebCore::LocalFrame::setRangedSelectionInitialExtentToCurrentSelectionEnd(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE760](this);
}

uint64_t WebCore::LocalFrame::setRangedSelectionInitialExtentToCurrentSelectionStart(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE768](this);
}

uint64_t WebCore::LocalFrame::setView()
{
  return MEMORY[0x1E0DCE770]();
}

uint64_t WebCore::LocalFrame::caretRect(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE778](this);
}

uint64_t WebCore::MouseEvent::initMouseEvent()
{
  return MEMORY[0x1E0DCE798]();
}

uint64_t WebCore::MouseEvent::create()
{
  return MEMORY[0x1E0DCE7A0]();
}

uint64_t WebCore::Pasteboard::createForDragAndDrop()
{
  return MEMORY[0x1E0DCE7B8]();
}

uint64_t WebCore::RenderView::compositor(WebCore::RenderView *this)
{
  return MEMORY[0x1E0DCE7F8](this);
}

uint64_t WebCore::ScrollView::setParentVisible(WebCore::ScrollView *this)
{
  return MEMORY[0x1E0DCE808](this);
}

uint64_t WebCore::ScrollView::setUseFixedLayout(WebCore::ScrollView *this)
{
  return MEMORY[0x1E0DCE818](this);
}

uint64_t WebCore::ScrollView::setFixedLayoutSize()
{
  return MEMORY[0x1E0DCE820]();
}

uint64_t WebCore::ScrollView::setDelegatedScrollingMode()
{
  return MEMORY[0x1E0DCE838]();
}

uint64_t WebCore::ScrollView::scrollOffsetChangedViaPlatformWidget(WebCore::ScrollView *this, const IntPoint *a2, const IntPoint *a3)
{
  return MEMORY[0x1E0DCE840](this, a2, a3);
}

uint64_t WebCore::ScrollView::paint()
{
  return MEMORY[0x1E0DCE848]();
}

uint64_t WebCore::StorageMap::removeItem(WebCore::StorageMap *this, const WTF::String *a2, WTF::String *a3)
{
  return MEMORY[0x1E0DCE850](this, a2, a3);
}

uint64_t WebCore::StorageMap::importItems()
{
  return MEMORY[0x1E0DCE858]();
}

uint64_t WebCore::StorageMap::key(WebCore::StorageMap *this)
{
  return MEMORY[0x1E0DCE868](this);
}

uint64_t WebCore::StorageMap::clear(WebCore::StorageMap *this)
{
  return MEMORY[0x1E0DCE870](this);
}

uint64_t WebCore::StorageMap::setItem(WebCore::StorageMap *this, const WTF::String *a2, const WTF::String *a3, WTF::String *a4, BOOL *a5)
{
  return MEMORY[0x1E0DCE878](this, a2, a3, a4, a5);
}

uint64_t WebCore::StorageMap::StorageMap(WebCore::StorageMap *this)
{
  return MEMORY[0x1E0DCE880](this);
}

uint64_t WebCore::TreeWalker::firstChild(WebCore::TreeWalker *this)
{
  return MEMORY[0x1E0DCE8A8](this);
}

uint64_t WebCore::TreeWalker::parentNode(WebCore::TreeWalker *this)
{
  return MEMORY[0x1E0DCE8B0](this);
}

uint64_t WebCore::TreeWalker::nextSibling(WebCore::TreeWalker *this)
{
  return MEMORY[0x1E0DCE8B8](this);
}

uint64_t WebCore::TreeWalker::previousNode(WebCore::TreeWalker *this)
{
  return MEMORY[0x1E0DCE8C0](this);
}

uint64_t WebCore::TreeWalker::setCurrentNode(WebCore::TreeWalker *this, Node *a2)
{
  return MEMORY[0x1E0DCE8C8](this, a2);
}

uint64_t WebCore::TreeWalker::previousSibling(WebCore::TreeWalker *this)
{
  return MEMORY[0x1E0DCE8D0](this);
}

uint64_t WebCore::TreeWalker::nextNode(WebCore::TreeWalker *this)
{
  return MEMORY[0x1E0DCE8D8](this);
}

uint64_t WebCore::TreeWalker::lastChild(WebCore::TreeWalker *this)
{
  return MEMORY[0x1E0DCE8E0](this);
}

void WebCore::TreeWalker::operator delete(void *a1)
{
  MEMORY[0x1E0DCE8E8](a1);
}

uint64_t WebCore::UserScript::UserScript()
{
  return MEMORY[0x1E0DCE8F0]();
}

uint64_t WebCore::cocoaColor()
{
  return MEMORY[0x1E0DCE908]();
}

uint64_t WebCore::screenSize(WebCore *this)
{
  return MEMORY[0x1E0DCE928](this);
}

void WebCore::AbortSignal::~AbortSignal(WebCore::AbortSignal *this)
{
  MEMORY[0x1E0DCE930](this);
}

void WebCore::AbortSignal::operator delete(void *a1)
{
  MEMORY[0x1E0DCE938](a1);
}

uint64_t WebCore::CSSPageRule::setSelectorText(WebCore::CSSPageRule *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCE958](this, a2);
}

uint64_t WebCore::CSSPageRule::style(WebCore::CSSPageRule *this)
{
  return MEMORY[0x1E0DCE960](this);
}

uint64_t WebCore::CachedFrame::cachedFramePlatformData(WebCore::CachedFrame *this)
{
  return MEMORY[0x1E0DCE968](this);
}

uint64_t WebCore::CachedFrame::setCachedFramePlatformData()
{
  return MEMORY[0x1E0DCE970]();
}

uint64_t WebCore::EventTarget::dispatchEventForBindings()
{
  return MEMORY[0x1E0DCEA38]();
}

uint64_t WebCore::EventTarget::addEventListenerForBindings()
{
  return MEMORY[0x1E0DCEA40]();
}

uint64_t WebCore::EventTarget::removeEventListenerForBindings()
{
  return MEMORY[0x1E0DCEA48]();
}

uint64_t WebCore::FileChooser::chooseFile(WebCore::FileChooser *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEA58](this, a2);
}

uint64_t WebCore::FileChooser::chooseFiles()
{
  return MEMORY[0x1E0DCEA60]();
}

uint64_t WebCore::FileChooser::chooseMediaFiles()
{
  return MEMORY[0x1E0DCEA68]();
}

void WebCore::FileChooser::~FileChooser(WebCore::FileChooser *this)
{
  MEMORY[0x1E0DCEA78](this);
}

uint64_t WebCore::FontCascade::setCodePath()
{
  return MEMORY[0x1E0DCEA80]();
}

uint64_t WebCore::FrameLoader::loadArchive()
{
  return MEMORY[0x1E0DCEA98]();
}

uint64_t WebCore::FrameLoader::shouldClose(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DCEAA0](this);
}

uint64_t WebCore::FrameLoader::detachFromParent(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DCEAB0](this);
}

uint64_t WebCore::FrameLoader::loadFrameRequest()
{
  return MEMORY[0x1E0DCEAB8]();
}

uint64_t WebCore::FrameLoader::stopForUserCancel(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DCEAC0](this);
}

uint64_t WebCore::FrameLoader::reloadWithOverrideEncoding(WebCore::FrameLoader *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEAD0](this, a2);
}

uint64_t WebCore::FrameLoader::load()
{
  return MEMORY[0x1E0DCEAE0]();
}

uint64_t WebCore::FrameLoader::reload()
{
  return MEMORY[0x1E0DCEAE8]();
}

uint64_t WebCore::Geolocation::setIsAllowed(WebCore::Geolocation *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DCEAF0](this, a2, a3);
}

uint64_t WebCore::Geolocation::resetIsAllowed(WebCore::Geolocation *this)
{
  return MEMORY[0x1E0DCEAF8](this);
}

void WebCore::Geolocation::~Geolocation(WebCore::Geolocation *this)
{
  MEMORY[0x1E0DCEB00](this);
}

void WebCore::Geolocation::operator delete(void *a1)
{
  MEMORY[0x1E0DCEB08](a1);
}

uint64_t WebCore::HTMLElement::setDraggable(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DCEB10](this);
}

uint64_t WebCore::HTMLElement::setInnerText()
{
  return MEMORY[0x1E0DCEB18]();
}

uint64_t WebCore::HTMLElement::setOuterText()
{
  return MEMORY[0x1E0DCEB20]();
}

uint64_t WebCore::HTMLElement::setTranslate(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DCEB28](this);
}

uint64_t WebCore::HTMLElement::setSpellcheck(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DCEB30](this);
}

uint64_t WebCore::HTMLElement::setAutocorrect(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DCEB38](this);
}

uint64_t WebCore::HTMLElement::setAutocapitalize()
{
  return MEMORY[0x1E0DCEB40]();
}

uint64_t WebCore::HTMLElement::setContentEditable(WebCore::HTMLElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEB48](this, a2);
}

uint64_t WebCore::HTMLElement::click(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DCEB58](this);
}

uint64_t WebCore::HTMLElement::labels(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DCEB60](this);
}

uint64_t WebCore::HTMLElement::setDir()
{
  return MEMORY[0x1E0DCEB68]();
}

uint64_t WebCore::HistoryItem::setReferrer(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEB78](this, a2);
}

uint64_t WebCore::HistoryItem::addChildItem()
{
  return MEMORY[0x1E0DCEB80]();
}

uint64_t WebCore::HistoryItem::setURLString(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEB88](this, a2);
}

uint64_t WebCore::HistoryItem::setViewState(WebCore::HistoryItem *this, objc_object *a2)
{
  return MEMORY[0x1E0DCEB90](this, a2);
}

uint64_t WebCore::HistoryItem::setAlternateTitle(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEBA8](this, a2);
}

uint64_t WebCore::HistoryItem::setScrollPosition(WebCore::HistoryItem *this, const IntPoint *a2)
{
  return MEMORY[0x1E0DCEBB0](this, a2);
}

uint64_t WebCore::HistoryItem::setOriginalURLString(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEBC8](this, a2);
}

uint64_t WebCore::HistoryItem::formData(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DCEBE0](this);
}

uint64_t WebCore::HistoryItem::setTitle(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEBE8](this, a2);
}

uint64_t WebCore::HistoryItem::HistoryItem()
{
  return MEMORY[0x1E0DCEBF8]();
}

void WebCore::HistoryItem::~HistoryItem(WebCore::HistoryItem *this)
{
  MEMORY[0x1E0DCEC00](this);
}

uint64_t WebCore::JSMediaList::toWrapped()
{
  return MEMORY[0x1E0DCEC80]();
}

uint64_t WebCore::MemoryCache::setDisabled(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEF88](this);
}

uint64_t WebCore::MemoryCache::getStatistics(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEF90](this);
}

uint64_t WebCore::MemoryCache::setCapacities(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEF98](this);
}

uint64_t WebCore::MemoryCache::pruneLiveResources(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEFA8](this);
}

uint64_t WebCore::MemoryCache::resourceForRequest()
{
  return MEMORY[0x1E0DCEFB0]();
}

uint64_t WebCore::MemoryCache::singleton(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEFD0](this);
}

uint64_t WebCore::RenderLayer::ensureLayerScrollableArea(WebCore::RenderLayer *this)
{
  return MEMORY[0x1E0DCF0A8](this);
}

uint64_t WebCore::SimpleRange::SimpleRange()
{
  return MEMORY[0x1E0DCF0B0]();
}

uint64_t WebCore::SimpleRange::SimpleRange(WebCore::SimpleRange *this, const BoundaryPoint *a2, const BoundaryPoint *a3)
{
  return MEMORY[0x1E0DCF0B8](this, a2, a3);
}

void WebCore::TrustedHTML::operator delete(void *a1)
{
  MEMORY[0x1E0DCF0E8](a1);
}

uint64_t WebCore::WindowProxy::globalObject(WebCore::WindowProxy *this, DOMWrapperWorld *a2)
{
  return MEMORY[0x1E0DCF0F0](this, a2);
}

void WebCore::WindowProxy::~WindowProxy(WebCore::WindowProxy *this)
{
  MEMORY[0x1E0DCF0F8](this);
}

uint64_t WebCore::XPathResult::iterateNext(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DCF100](this);
}

uint64_t WebCore::XPathResult::snapshotItem(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DCF108](this);
}

void WebCore::XPathResult::~XPathResult(WebCore::XPathResult *this)
{
  MEMORY[0x1E0DCF110](this);
}

uint64_t WebCore::isEndOfLine(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DCF118](this, a2);
}

uint64_t WebCore::logChannels(WebCore *this)
{
  return MEMORY[0x1E0DCF120](this);
}

uint64_t WebCore::prefetchDNS(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF128](this, a2);
}

uint64_t WebCore::startOfLine(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DCF130](this, a2);
}

uint64_t WebCore::startOfWord()
{
  return MEMORY[0x1E0DCF138]();
}

void WebCore::BlobRegistry::~BlobRegistry(WebCore::BlobRegistry *this)
{
  MEMORY[0x1E0DCF1A0](this);
}

uint64_t WebCore::CSSStyleRule::setSelectorText(WebCore::CSSStyleRule *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF1E0](this, a2);
}

uint64_t WebCore::CSSStyleRule::style(WebCore::CSSStyleRule *this)
{
  return MEMORY[0x1E0DCF1E8](this);
}

uint64_t WebCore::ChromeClient::ChromeClient(WebCore::ChromeClient *this)
{
  return MEMORY[0x1E0DCF1F0](this);
}

void WebCore::ChromeClient::~ChromeClient(WebCore::ChromeClient *this)
{
  MEMORY[0x1E0DCF1F8](this);
}

uint64_t WebCore::DOMException::description()
{
  return MEMORY[0x1E0DCF200]();
}

uint64_t WebCore::DOMTokenList::toggle()
{
  return MEMORY[0x1E0DCF208]();
}

uint64_t WebCore::DOMTokenList::tokens(WebCore::DOMTokenList *this)
{
  return MEMORY[0x1E0DCF210](this);
}

uint64_t WebCore::DOMTokenList::setValue()
{
  return MEMORY[0x1E0DCF218]();
}

uint64_t WebCore::EditingStyle::styleAtSelectionStart()
{
  return MEMORY[0x1E0DCF220]();
}

uint64_t WebCore::EditingStyle::EditingStyle()
{
  return MEMORY[0x1E0DCF230]();
}

void WebCore::EditingStyle::~EditingStyle(WebCore::EditingStyle *this)
{
  MEMORY[0x1E0DCF238](this);
}

uint64_t WebCore::EventHandler::mouseMoved()
{
  return MEMORY[0x1E0DCF240]();
}

uint64_t WebCore::EventHandler::touchEvent()
{
  return MEMORY[0x1E0DCF250]();
}

uint64_t WebCore::EventHandler::wheelEvent()
{
  return MEMORY[0x1E0DCF258]();
}

uint64_t WebCore::EventHandler::scrollOverflow()
{
  return MEMORY[0x1E0DCF278]();
}

uint64_t WebCore::EventHandler::scheduleScrollEvent(WebCore::EventHandler *this)
{
  return MEMORY[0x1E0DCF2B0](this);
}

uint64_t WebCore::EventHandler::tryToBeginDragAtPoint(WebCore::EventHandler *this, const IntPoint *a2, const IntPoint *a3)
{
  return MEMORY[0x1E0DCF2D0](this, a2, a3);
}

uint64_t WebCore::EventHandler::mouseUp()
{
  return MEMORY[0x1E0DCF330]();
}

uint64_t WebCore::EventHandler::keyEvent()
{
  return MEMORY[0x1E0DCF338]();
}

uint64_t WebCore::EventHandler::mouseDown()
{
  return MEMORY[0x1E0DCF348]();
}

uint64_t WebCore::GCController::garbageCollectNow(WebCore::GCController *this)
{
  return MEMORY[0x1E0DCF368](this);
}

uint64_t WebCore::GCController::setJavaScriptGarbageCollectorTimerEnabled(WebCore::GCController *this)
{
  return MEMORY[0x1E0DCF370](this);
}

uint64_t WebCore::GCController::garbageCollectOnAlternateThreadForDebugging(WebCore::GCController *this)
{
  return MEMORY[0x1E0DCF378](this);
}

uint64_t WebCore::GCController::singleton(WebCore::GCController *this)
{
  return MEMORY[0x1E0DCF380](this);
}

void WebCore::IDBGetResult::operator delete(void *a1)
{
  MEMORY[0x1E0DCF388](a1);
}

uint64_t WebCore::JSStyleSheet::toWrapped()
{
  return MEMORY[0x1E0DCF418]();
}

uint64_t WebCore::JSTreeWalker::toWrapped()
{
  return MEMORY[0x1E0DCF420]();
}

uint64_t WebCore::NamedNodeMap::setNamedItem()
{
  return MEMORY[0x1E0DCF438]();
}

uint64_t WebCore::NamedNodeMap::removeNamedItem()
{
  return MEMORY[0x1E0DCF440]();
}

uint64_t WebCore::NamedNodeMap::removeNamedItemNS()
{
  return MEMORY[0x1E0DCF448]();
}

uint64_t WebCore::NamedNodeMap::ref(WebCore::NamedNodeMap *this)
{
  return MEMORY[0x1E0DCF450](this);
}

uint64_t WebCore::NamedNodeMap::deref(WebCore::NamedNodeMap *this)
{
  return MEMORY[0x1E0DCF458](this);
}

uint64_t WebCore::NodeIterator::previousNode(WebCore::NodeIterator *this)
{
  return MEMORY[0x1E0DCF460](this);
}

uint64_t WebCore::NodeIterator::nextNode(WebCore::NodeIterator *this)
{
  return MEMORY[0x1E0DCF468](this);
}

void WebCore::NodeIterator::~NodeIterator(WebCore::NodeIterator *this)
{
  MEMORY[0x1E0DCF470](this);
}

void WebCore::NodeIterator::operator delete(void *a1)
{
  MEMORY[0x1E0DCF478](a1);
}

uint64_t WebCore::Notification::dispatchShowEvent(WebCore::Notification *this)
{
  return MEMORY[0x1E0DCF480](this);
}

uint64_t WebCore::Notification::dispatchClickEvent(WebCore::Notification *this)
{
  return MEMORY[0x1E0DCF488](this);
}

uint64_t WebCore::Notification::dispatchCloseEvent(WebCore::Notification *this)
{
  return MEMORY[0x1E0DCF490](this);
}

uint64_t WebCore::Notification::dispatchErrorEvent(WebCore::Notification *this)
{
  return MEMORY[0x1E0DCF498](this);
}

uint64_t WebCore::Notification::ensureOnNotificationThread()
{
  return MEMORY[0x1E0DCF4A8]();
}

uint64_t WebCore::Notification::finalize(WebCore::Notification *this)
{
  return MEMORY[0x1E0DCF4B0](this);
}

uint64_t WebCore::PrintContext::numberOfPages(WebCore::PrintContext *this, WebCore::LocalFrame *a2, const FloatSize *a3)
{
  return MEMORY[0x1E0DCF4B8](this, a2, a3);
}

uint64_t WebCore::PrintContext::spoolAllPagesWithBoundaries()
{
  return MEMORY[0x1E0DCF4F8]();
}

uint64_t WebCore::PrintContext::computePageRectsWithPageSize(WebCore::PrintContext *this, const FloatSize *a2)
{
  return MEMORY[0x1E0DCF500](this, a2);
}

uint64_t WebCore::PrintContext::PrintContext(WebCore::PrintContext *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1E0DCF520](this, a2);
}

void WebCore::PrintContext::~PrintContext(WebCore::PrintContext *this)
{
  MEMORY[0x1E0DCF528](this);
}

uint64_t WebCore::RenderObject::absoluteTextRects()
{
  return MEMORY[0x1E0DCF5A0]();
}

uint64_t WebCore::RenderObject::collectSelectionGeometries(WebCore::RenderObject *this, const WebCore::SimpleRange *a2)
{
  return MEMORY[0x1E0DCF5B0](this, a2);
}

uint64_t WebCore::RenderWidget::setWidget()
{
  return MEMORY[0x1E0DCF5C0]();
}

uint64_t WebCore::SettingsBase::setFixedFontFamily()
{
  return MEMORY[0x1E0DCF5E0]();
}

uint64_t WebCore::SettingsBase::setSerifFontFamily()
{
  return MEMORY[0x1E0DCF5E8]();
}

uint64_t WebCore::SettingsBase::setCursiveFontFamily()
{
  return MEMORY[0x1E0DCF5F0]();
}

uint64_t WebCore::SettingsBase::setFantasyFontFamily()
{
  return MEMORY[0x1E0DCF5F8]();
}

uint64_t WebCore::SettingsBase::setStandardFontFamily()
{
  return MEMORY[0x1E0DCF600]();
}

uint64_t WebCore::SettingsBase::setSansSerifFontFamily()
{
  return MEMORY[0x1E0DCF608]();
}

uint64_t WebCore::SettingsBase::setPictographFontFamily()
{
  return MEMORY[0x1E0DCF610]();
}

uint64_t WebCore::SettingsBase::setMediaContentTypesRequiringHardwareSupport(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF640](this, a2);
}

uint64_t WebCore::SharedBuffer::SharedBuffer()
{
  return MEMORY[0x1E0DCF658]();
}

uint64_t WebCore::TextIterator::advance(WebCore::TextIterator *this)
{
  return MEMORY[0x1E0DCF6A0](this);
}

uint64_t WebCore::TextIterator::TextIterator()
{
  return MEMORY[0x1E0DCF6A8]();
}

void WebCore::TextIterator::~TextIterator(WebCore::TextIterator *this)
{
  MEMORY[0x1E0DCF6B0](this);
}

uint64_t WebCore::commonVMSlow(WebCore *this)
{
  return MEMORY[0x1E0DCF700](this);
}

uint64_t WebCore::AXObjectCache::rootObject(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1E0DCF710](this);
}

uint64_t WebCore::AXObjectCache::rootObjectForFrame(WebCore::AXObjectCache *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1E0DCF720](this, a2);
}

uint64_t WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1E0DCF748](this);
}

uint64_t WebCore::AXObjectCache::accessibilityEnhancedUserInterfaceEnabled(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1E0DCF750](this);
}

uint64_t WebCore::CSSStyleSheet::deleteRule(WebCore::CSSStyleSheet *this)
{
  return MEMORY[0x1E0DCF760](this);
}

uint64_t WebCore::CSSStyleSheet::insertRule(WebCore::CSSStyleSheet *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF768](this, a2);
}

uint64_t WebCore::CSSStyleSheet::addRule()
{
  return MEMORY[0x1E0DCF770]();
}

uint64_t WebCore::CSSStyleSheet::cssRules(WebCore::CSSStyleSheet *this)
{
  return MEMORY[0x1E0DCF778](this);
}

uint64_t WebCore::CharacterData::appendData(WebCore::CharacterData *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF780](this, a2);
}

uint64_t WebCore::CharacterData::deleteData(WebCore::CharacterData *this)
{
  return MEMORY[0x1E0DCF788](this);
}

uint64_t WebCore::CharacterData::insertData(WebCore::CharacterData *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DCF790](this, a2, a3);
}

uint64_t WebCore::CharacterData::replaceData(WebCore::CharacterData *this, uint64_t a2, uint64_t a3, const WTF::String *a4)
{
  return MEMORY[0x1E0DCF798](this, a2, a3, a4);
}

uint64_t WebCore::CharacterData::setData(WebCore::CharacterData *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF7A0](this, a2);
}

uint64_t WebCore::ContainerNode::appendChild(WebCore::ContainerNode *this, Node *a2)
{
  return MEMORY[0x1E0DCF7A8](this, a2);
}

uint64_t WebCore::ContainerNode::querySelector(WebCore::ContainerNode *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF7B0](this, a2);
}

uint64_t WebCore::ContainerNode::querySelectorAll(WebCore::ContainerNode *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF7B8](this, a2);
}

uint64_t WebCore::ContainerNode::getElementsByTagName()
{
  return MEMORY[0x1E0DCF7C0]();
}

uint64_t WebCore::ContainerNode::getElementsByClassName()
{
  return MEMORY[0x1E0DCF7C8]();
}

uint64_t WebCore::ContainerNode::getElementsByTagNameNS()
{
  return MEMORY[0x1E0DCF7D0]();
}

uint64_t WebCore::ContainerNode::children(WebCore::ContainerNode *this)
{
  return MEMORY[0x1E0DCF7D8](this);
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMap(WebCore::HTTPHeaderMap *this)
{
  return MEMORY[0x1E0DCF8C8](this);
}

uint64_t WebCore::HitTestResult::HitTestResult()
{
  return MEMORY[0x1E0DCF8E0]();
}

void WebCore::HitTestResult::~HitTestResult(WebCore::HitTestResult *this)
{
  MEMORY[0x1E0DCF8E8](this);
}

uint64_t WebCore::JSCSSRuleList::toWrapped()
{
  return MEMORY[0x1E0DCF930]();
}

uint64_t WebCore::JSWindowProxy::toWrapped()
{
  return MEMORY[0x1E0DCF938]();
}

uint64_t WebCore::JSXPathResult::toWrapped()
{
  return MEMORY[0x1E0DCF940]();
}

uint64_t WebCore::KeyboardEvent::initKeyboardEvent()
{
  return MEMORY[0x1E0DCF948]();
}

uint64_t WebCore::KeyboardEvent::create()
{
  return MEMORY[0x1E0DCF950]();
}

uint64_t WebCore::MediaStrategy::MediaStrategy(WebCore::MediaStrategy *this)
{
  return MEMORY[0x1E0DCF970](this);
}

void WebCore::MediaStrategy::~MediaStrategy(WebCore::MediaStrategy *this)
{
  MEMORY[0x1E0DCF978](this);
}

uint64_t WebCore::MutationEvent::initMutationEvent()
{
  return MEMORY[0x1E0DCF980]();
}

uint64_t WebCore::NodeTraversal::deepLastChild(WebCore::NodeTraversal *this, Node *a2)
{
  return MEMORY[0x1E0DCF988](this, a2);
}

uint64_t WebCore::NodeTraversal::nextAncestorSibling(WebCore::NodeTraversal *this, const Node *a2)
{
  return MEMORY[0x1E0DCF990](this, a2);
}

uint64_t WebCore::OverflowEvent::initOverflowEvent(WebCore::OverflowEvent *this)
{
  return MEMORY[0x1E0DCF9A0](this);
}

uint64_t WebCore::PathUtilities::pathWithShrinkWrappedRects()
{
  return MEMORY[0x1E0DCF9B0]();
}

void WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(WebCore::QualifiedName::QualifiedNameImpl *this)
{
  MEMORY[0x1E0DCF9D0](this);
}

uint64_t WebCore::QualifiedName::QualifiedName()
{
  return MEMORY[0x1E0DCF9E0]();
}

uint64_t WebCore::RenderElement::resetTextAutosizing(WebCore::RenderElement *this)
{
  return MEMORY[0x1E0DCF9E8](this);
}

uint64_t WebCore::ResourceError::ResourceError(WebCore::ResourceError *this, NSError *a2)
{
  return MEMORY[0x1E0DCF9F8](this, a2);
}

uint64_t WebCore::StyledElement::cssomStyle(WebCore::StyledElement *this)
{
  return MEMORY[0x1E0DCFAD8](this);
}

uint64_t WebCore::TextIndicator::createWithRange()
{
  return MEMORY[0x1E0DCFAE0]();
}

void WebCore::TextIndicator::~TextIndicator(WebCore::TextIndicator *this)
{
  MEMORY[0x1E0DCFAF8](this);
}

uint64_t WebCore::cachedCGColor()
{
  return MEMORY[0x1E0DCFB08]();
}

uint64_t WebCore::createWrapper()
{
  return MEMORY[0x1E0DCFB10]();
}

uint64_t WebCore::displayString(WebCore *this, const WTF::String *a2, const Node *a3)
{
  return MEMORY[0x1E0DCFB18](this, a2, a3);
}

uint64_t WebCore::documentOrder(WebCore *this, const VisiblePosition *a2, const VisiblePosition *a3)
{
  return MEMORY[0x1E0DCFB20](this, a2, a3);
}

uint64_t WebCore::documentOrder(WebCore *this, const Position *a2, const Position *a3)
{
  return MEMORY[0x1E0DCFB28](this, a2, a3);
}

uint64_t WebCore::endOfDocument(WebCore *this, const Node *a2)
{
  return MEMORY[0x1E0DCFB38](this, a2);
}

uint64_t WebCore::endOfDocument(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DCFB40](this, a2);
}

uint64_t WebCore::endOfSentence(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DCFB48](this, a2);
}

uint64_t WebCore::isStartOfLine(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DCFB60](this, a2);
}

uint64_t WebCore::releaseMemory()
{
  return MEMORY[0x1E0DCFB70]();
}

uint64_t WebCore::CredentialBase::CredentialBase(WebCore::CredentialBase *this)
{
  return MEMORY[0x1E0DCFBA0](this);
}

uint64_t WebCore::DocumentLoader::commitData()
{
  return MEMORY[0x1E0DCFBC0]();
}

uint64_t WebCore::DocumentLoader::attachToFrame(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DCFBC8](this);
}

uint64_t WebCore::DocumentLoader::detachFromFrame()
{
  return MEMORY[0x1E0DCFBD0]();
}

uint64_t WebCore::DocumentLoader::addArchiveResource()
{
  return MEMORY[0x1E0DCFBE0]();
}

uint64_t WebCore::DocumentLoader::setResponseMIMEType(WebCore::DocumentLoader *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCFBF0](this, a2);
}

uint64_t WebCore::DocumentLoader::addAllArchiveResources()
{
  return MEMORY[0x1E0DCFC00]();
}

uint64_t WebCore::DocumentLoader::cancelMainResourceLoad()
{
  return MEMORY[0x1E0DCFC08]();
}

uint64_t WebCore::DocumentLoader::didGetLoadDecisionForIcon()
{
  return MEMORY[0x1E0DCFC20]();
}

uint64_t WebCore::DocumentLoader::setTitle()
{
  return MEMORY[0x1E0DCFC58]();
}

uint64_t WebCore::DocumentLoader::DocumentLoader()
{
  return MEMORY[0x1E0DCFC68]();
}

void WebCore::DocumentLoader::~DocumentLoader(WebCore::DocumentLoader *this)
{
  MEMORY[0x1E0DCFC70](this);
}

uint64_t WebCore::DocumentWriter::end(WebCore::DocumentWriter *this)
{
  return MEMORY[0x1E0DCFC78](this);
}

uint64_t WebCore::DragController::dragExited()
{
  return MEMORY[0x1E0DCFC80]();
}

uint64_t WebCore::DragController::dragEnteredOrUpdated()
{
  return MEMORY[0x1E0DCFC88]();
}

uint64_t WebCore::DragController::performDragOperation()
{
  return MEMORY[0x1E0DCFC90]();
}

uint64_t WebCore::DragController::dragEnded(WebCore::DragController *this)
{
  return MEMORY[0x1E0DCFCA8](this);
}

uint64_t WebCore::FileIconLoader::iconLoaded()
{
  return MEMORY[0x1E0DCFCB8]();
}

uint64_t WebCore::FrameSelection::setSelection()
{
  return MEMORY[0x1E0DCFCC0]();
}

uint64_t WebCore::FrameSelection::setCaretColor()
{
  return MEMORY[0x1E0DCFCC8]();
}

uint64_t WebCore::FrameSelection::revealSelection()
{
  return MEMORY[0x1E0DCFCD0]();
}

uint64_t WebCore::FrameSelection::selectionBounds()
{
  return MEMORY[0x1E0DCFCD8]();
}

uint64_t WebCore::FrameSelection::setSelectedRange()
{
  return MEMORY[0x1E0DCFCE0]();
}

uint64_t WebCore::FrameSelection::updateAppearance(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFCE8](this);
}

uint64_t WebCore::FrameSelection::setSelectionFromNone(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFCF8](this);
}

uint64_t WebCore::FrameSelection::clearCurrentSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD00](this);
}

uint64_t WebCore::FrameSelection::wordRangeContainingCaretSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD10](this);
}

uint64_t WebCore::FrameSelection::wordSelectionContainingCaretSelection()
{
  return MEMORY[0x1E0DCFD18]();
}

uint64_t WebCore::FrameSelection::expandSelectionToWordContainingCaretSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD20](this);
}

uint64_t WebCore::FrameSelection::expandSelectionToElementContainingCaretSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD28](this);
}

uint64_t WebCore::FrameSelection::expandSelectionToStartOfWordContainingCaretSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD30](this);
}

uint64_t WebCore::FrameSelection::clear(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD38](this);
}

uint64_t WebCore::FrameSelection::modify()
{
  return MEMORY[0x1E0DCFD40]();
}

uint64_t WebCore::FrameSelection::moveTo()
{
  return MEMORY[0x1E0DCFD48]();
}

{
  return MEMORY[0x1E0DCFD50]();
}

uint64_t WebCore::FrameSelection::selectAll(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD58](this);
}

uint64_t WebCore::FrameSelection::FrameSelection(WebCore::FrameSelection *this, Document *a2)
{
  return MEMORY[0x1E0DCFD60](this, a2);
}

void WebCore::FrameSelection::~FrameSelection(WebCore::FrameSelection *this)
{
  MEMORY[0x1E0DCFD68](this);
}

uint64_t WebCore::HTMLMapElement::areas(WebCore::HTMLMapElement *this)
{
  return MEMORY[0x1E0DCFD70](this);
}

void WebCore::IDBTransaction::~IDBTransaction(WebCore::IDBTransaction *this)
{
  MEMORY[0x1E0DCFD80](this);
}

void WebCore::IDBTransaction::operator delete(void *a1)
{
  MEMORY[0x1E0DCFD88](a1);
}

uint64_t WebCore::IOSApplication::isMobileMail(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDC0](this);
}

uint64_t WebCore::IOSApplication::isWebProcess(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDD0](this);
}

uint64_t WebCore::IOSApplication::isMobileSafari(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDE8](this);
}

uint64_t WebCore::IOSApplication::isLaBanquePostale(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE08](this);
}

uint64_t WebCore::IOSApplication::isTheSecretSocietyHiddenMystery(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE28](this);
}

uint64_t WebCore::JSNamedNodeMap::toWrapped()
{
  return MEMORY[0x1E0DCFE88]();
}

uint64_t WebCore::JSNodeIterator::toWrapped()
{
  return MEMORY[0x1E0DCFE90]();
}

uint64_t WebCore::JSNotification::toWrapped()
{
  return MEMORY[0x1E0DCFE98]();
}

void WebCore::LoaderStrategy::~LoaderStrategy(WebCore::LoaderStrategy *this)
{
  MEMORY[0x1E0DCFEA0](this);
}

uint64_t WebCore::LocalDOMWindow::dispatchAllPendingUnloadEvents(WebCore::LocalDOMWindow *this)
{
  return MEMORY[0x1E0DCFEC0](this);
}

uint64_t WebCore::LocalDOMWindow::dispatchAllPendingBeforeUnloadEvents(WebCore::LocalDOMWindow *this)
{
  return MEMORY[0x1E0DCFEC8](this);
}

uint64_t WebCore::LocalFrameView::forceLayout(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFED0](this);
}

uint64_t WebCore::LocalFrameView::setMediaType()
{
  return MEMORY[0x1E0DCFED8]();
}

uint64_t WebCore::LocalFrameView::paintContents()
{
  return MEMORY[0x1E0DCFEE0]();
}

uint64_t WebCore::LocalFrameView::adjustViewSize(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFEF0](this);
}

uint64_t WebCore::LocalFrameView::setTransparent(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFEF8](this);
}

uint64_t WebCore::LocalFrameView::setPaintBehavior()
{
  return MEMORY[0x1E0DCFF00]();
}

uint64_t WebCore::LocalFrameView::setTracksRepaints(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF20](this);
}

uint64_t WebCore::LocalFrameView::scrollRectToVisible()
{
  return MEMORY[0x1E0DCFF38]();
}

uint64_t WebCore::LocalFrameView::resetTrackedRepaints(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF58](this);
}

uint64_t WebCore::LocalFrameView::setCanHaveScrollbars(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF60](this);
}

uint64_t WebCore::LocalFrameView::setWasScrolledByUser(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF68](this);
}

uint64_t WebCore::LocalFrameView::setBaseBackgroundColor()
{
  return MEMORY[0x1E0DCFF70]();
}

uint64_t WebCore::LocalFrameView::updateCanHaveScrollbars(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF78](this);
}

uint64_t WebCore::LocalFrameView::forceLayoutForPagination()
{
  return MEMORY[0x1E0DCFF80]();
}

uint64_t WebCore::LocalFrameView::renderedCharactersExceed(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF90](this);
}

uint64_t WebCore::LocalFrameView::adjustPageHeightDeprecated(WebCore::LocalFrameView *this, float *a2, float a3, float a4, float a5)
{
  return MEMORY[0x1E0DCFFA0](this, a2, a3, a4, a5);
}

uint64_t WebCore::LocalFrameView::didReplaceMultipartContent(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFFA8](this);
}

uint64_t WebCore::LocalFrameView::availableContentSizeChanged()
{
  return MEMORY[0x1E0DCFFB8]();
}

uint64_t WebCore::LocalFrameView::setShouldUpdateWhileOffscreen(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFFF0](this);
}

uint64_t WebCore::LocalFrameView::graphicsLayerForPlatformWidget(WebCore::LocalFrameView *this, WAKView *a2)
{
  return MEMORY[0x1E0DD0000](this, a2);
}

uint64_t WebCore::LocalFrameView::setCustomFixedPositionLayoutRect()
{
  return MEMORY[0x1E0DD0038]();
}

uint64_t WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive()
{
  return MEMORY[0x1E0DD0048]();
}

uint64_t WebCore::LocalFrameView::flushCompositingStateIncludingSubframes(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD0050](this);
}

uint64_t WebCore::LocalFrameView::setNeedsLayoutAfterViewConfigurationChange(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD0070](this);
}

uint64_t WebCore::LocalFrameView::resumeVisibleImageAnimationsIncludingSubframes(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD0078](this);
}

uint64_t WebCore::LocalFrameView::create(WebCore::LocalFrameView *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1E0DD0080](this, a2);
}

uint64_t WebCore::ReportingScope::generateTestReport()
{
  return MEMORY[0x1E0DD00F8]();
}

uint64_t WebCore::ResourceHandle::clearClient(WebCore::ResourceHandle *this)
{
  return MEMORY[0x1E0DD0110](this);
}

uint64_t WebCore::ResourceHandle::loadResourceSynchronously()
{
  return MEMORY[0x1E0DD0118]();
}

uint64_t WebCore::ResourceHandle::create()
{
  return MEMORY[0x1E0DD0120]();
}

uint64_t WebCore::ResourceLoader::start(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1E0DD0138](this);
}

uint64_t WebCore::SQLiteDatabase::tableExists()
{
  return MEMORY[0x1E0DD0150]();
}

uint64_t WebCore::SQLiteDatabase::executeCommand()
{
  return MEMORY[0x1E0DD0178]();
}

uint64_t WebCore::SQLiteDatabase::prepareStatement()
{
  return MEMORY[0x1E0DD0180]();
}

uint64_t WebCore::SQLiteDatabase::open()
{
  return MEMORY[0x1E0DD01B0]();
}

uint64_t WebCore::SQLiteDatabase::close(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD01B8](this);
}

uint64_t WebCore::SQLiteDatabase::SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD01D8](this);
}

void WebCore::SQLiteDatabase::~SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
  MEMORY[0x1E0DD01E0](this);
}

uint64_t WebCore::SecurityOrigin::createFromString(WebCore::SecurityOrigin *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0268](this, a2);
}

uint64_t WebCore::SecurityOrigin::create(WebCore::SecurityOrigin *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD0288](this, a2);
}

uint64_t WebCore::SecurityPolicy::setLocalLoadPolicy()
{
  return MEMORY[0x1E0DD0290]();
}

uint64_t WebCore::SecurityPolicy::resetOriginAccessAllowlists(WebCore::SecurityPolicy *this)
{
  return MEMORY[0x1E0DD02A0](this);
}

uint64_t WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(WebCore::SecurityPolicy *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1E0DD02A8](this, a2, a3, a4);
}

uint64_t WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(WebCore::SecurityPolicy *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1E0DD02B0](this, a2, a3, a4);
}

uint64_t WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl()
{
  return MEMORY[0x1E0DD02B8]();
}

uint64_t WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(WebCore::ShapeDetection::TextDetectorImpl *this)
{
  return MEMORY[0x1E0DD02C0](this);
}

uint64_t WebCore::ShapeDetection::BarcodeDetectorImpl::getSupportedFormats()
{
  return MEMORY[0x1E0DD02C8]();
}

uint64_t WebCore::ShapeDetection::BarcodeDetectorImpl::BarcodeDetectorImpl()
{
  return MEMORY[0x1E0DD02D0]();
}

uint64_t WebCore::StyleSheetList::item(WebCore::StyleSheetList *this)
{
  return MEMORY[0x1E0DD02D8](this);
}

void WebCore::StyleSheetList::~StyleSheetList(WebCore::StyleSheetList *this)
{
  MEMORY[0x1E0DD02E0](this);
}

uint64_t WebCore::UserStyleSheet::UserStyleSheet()
{
  return MEMORY[0x1E0DD0358]();
}

uint64_t WebCore::WebRTCProvider::create(WebCore::WebRTCProvider *this)
{
  return MEMORY[0x1E0DD0368](this);
}

uint64_t WebCore::WebSocketFrame::parseFrame()
{
  return MEMORY[0x1E0DD0370]();
}

uint64_t WebCore::WebSocketFrame::makeFrameData()
{
  return MEMORY[0x1E0DD0378]();
}

uint64_t WebCore::WebSocketFrame::needsExtendedLengthField(WebCore::WebSocketFrame *this)
{
  return MEMORY[0x1E0DD0380](this);
}

uint64_t WebCore::WebSocketFrame::WebSocketFrame()
{
  return MEMORY[0x1E0DD0388]();
}

uint64_t WebCore::characterCount()
{
  return MEMORY[0x1E0DD0390]();
}

uint64_t WebCore::endOfParagraph()
{
  return MEMORY[0x1E0DD03A0]();
}

void WebCore::ActiveDOMObject::~ActiveDOMObject(WebCore::ActiveDOMObject *this)
{
  MEMORY[0x1E0DD03E8](this);
}

uint64_t WebCore::ArchiveResource::create()
{
  return MEMORY[0x1E0DD0418]();
}

uint64_t WebCore::CSSFontFaceRule::style(WebCore::CSSFontFaceRule *this)
{
  return MEMORY[0x1E0DD0458](this);
}

uint64_t WebCore::CSSGroupingRule::deleteRule(WebCore::CSSGroupingRule *this)
{
  return MEMORY[0x1E0DD0460](this);
}

uint64_t WebCore::CSSGroupingRule::insertRule(WebCore::CSSGroupingRule *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0468](this, a2);
}

uint64_t WebCore::DOMWrapperWorld::clearWrappers(WebCore::DOMWrapperWorld *this)
{
  return MEMORY[0x1E0DD04A8](this);
}

void WebCore::DOMWrapperWorld::~DOMWrapperWorld(WebCore::DOMWrapperWorld *this)
{
  MEMORY[0x1E0DD04B0](this);
}

uint64_t WebCore::DatabaseManager::initialize(WebCore::DatabaseManager *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD04B8](this, a2);
}

uint64_t WebCore::DatabaseManager::setIsAvailable(WebCore::DatabaseManager *this)
{
  return MEMORY[0x1E0DD04C0](this);
}

uint64_t WebCore::DatabaseManager::hasOpenDatabases(WebCore::DatabaseManager *this, Document *a2)
{
  return MEMORY[0x1E0DD04C8](this, a2);
}

uint64_t WebCore::DatabaseManager::detailsForNameAndOrigin(WebCore::DatabaseManager *this, const WTF::String *a2, WebCore::SecurityOrigin *a3)
{
  return MEMORY[0x1E0DD04D0](this, a2, a3);
}

uint64_t WebCore::DatabaseManager::setClient()
{
  return MEMORY[0x1E0DD04D8]();
}

uint64_t WebCore::DatabaseManager::singleton(WebCore::DatabaseManager *this)
{
  return MEMORY[0x1E0DD04E0](this);
}

uint64_t WebCore::DatabaseTracker::deleteOrigin()
{
  return MEMORY[0x1E0DD04E8]();
}

uint64_t WebCore::DatabaseTracker::databaseNames()
{
  return MEMORY[0x1E0DD04F0]();
}

uint64_t WebCore::DatabaseTracker::deleteDatabase()
{
  return MEMORY[0x1E0DD04F8]();
}

uint64_t WebCore::DatabaseTracker::deleteDatabaseFileIfEmpty(WebCore::DatabaseTracker *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0508](this, a2);
}

uint64_t WebCore::DatabaseTracker::removeDeletedOpenedDatabases(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1E0DD0510](this);
}

uint64_t WebCore::DatabaseTracker::deleteAllDatabasesImmediately(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1E0DD0518](this);
}

uint64_t WebCore::DatabaseTracker::emptyDatabaseFilesRemovalTaskDidFinish(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1E0DD0520](this);
}

uint64_t WebCore::DatabaseTracker::emptyDatabaseFilesRemovalTaskWillBeScheduled(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1E0DD0528](this);
}

uint64_t WebCore::DatabaseTracker::quota()
{
  return MEMORY[0x1E0DD0530]();
}

uint64_t WebCore::DatabaseTracker::usage()
{
  return MEMORY[0x1E0DD0538]();
}

uint64_t WebCore::DatabaseTracker::origins(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1E0DD0540](this);
}

uint64_t WebCore::DatabaseTracker::setQuota()
{
  return MEMORY[0x1E0DD0548]();
}

uint64_t WebCore::DatabaseTracker::singleton(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1E0DD0550](this);
}

uint64_t WebCore::FocusController::setFocused(WebCore::FocusController *this)
{
  return MEMORY[0x1E0DD0568](this);
}

uint64_t WebCore::FocusController::setFocusedFrame()
{
  return MEMORY[0x1E0DD0570]();
}

uint64_t WebCore::FocusController::setInitialFocus()
{
  return MEMORY[0x1E0DD0578]();
}

uint64_t WebCore::FocusController::nextFocusableElement(WebCore::FocusController *this, Node *a2)
{
  return MEMORY[0x1E0DD0588](this, a2);
}

uint64_t WebCore::FocusController::previousFocusableElement(WebCore::FocusController *this, Node *a2)
{
  return MEMORY[0x1E0DD0598](this, a2);
}

uint64_t WebCore::FocusController::setActive(WebCore::FocusController *this)
{
  return MEMORY[0x1E0DD05A0](this);
}

uint64_t WebCore::GamepadProvider::setSharedProvider()
{
  return MEMORY[0x1E0DD05A8]();
}

uint64_t WebCore::GamepadProvider::singleton(WebCore::GamepadProvider *this)
{
  return MEMORY[0x1E0DD05B0](this);
}

uint64_t WebCore::HTMLBaseElement::setHref()
{
  return MEMORY[0x1E0DD0608]();
}

uint64_t WebCore::HTMLFormElement::setEnctype()
{
  return MEMORY[0x1E0DD0610]();
}

uint64_t WebCore::HTMLFormElement::checkValidity(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1E0DD0618](this);
}

uint64_t WebCore::HTMLFormElement::setAutocomplete()
{
  return MEMORY[0x1E0DD0620]();
}

uint64_t WebCore::HTMLFormElement::elementsForNativeBindings(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1E0DD0628](this);
}

uint64_t WebCore::HTMLFormElement::reset(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1E0DD0630](this);
}

uint64_t WebCore::HTMLFormElement::submit(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1E0DD0638](this);
}

uint64_t WebCore::HTMLFormElement::setMethod()
{
  return MEMORY[0x1E0DD0640]();
}

uint64_t WebCore::HTMLLinkElement::setCrossOrigin()
{
  return MEMORY[0x1E0DD0648]();
}

uint64_t WebCore::HTMLLinkElement::relList(WebCore::HTMLLinkElement *this)
{
  return MEMORY[0x1E0DD0650](this);
}

void WebCore::IDBDatabaseInfo::operator delete(void *a1)
{
  MEMORY[0x1E0DD0668](a1);
}

void WebCore::IDBGetAllResult::operator delete(void *a1)
{
  MEMORY[0x1E0DD0678](a1);
}

uint64_t WebCore::LegacyTileCache::setLayerPoolCapacity(WebCore::LegacyTileCache *this)
{
  return MEMORY[0x1E0DD0688](this);
}

uint64_t WebCore::LegacyTileCache::setTileBordersVisible(WebCore::LegacyTileCache *this)
{
  return MEMORY[0x1E0DD0690](this);
}

uint64_t WebCore::LegacyTileCache::setTilePaintCountersVisible(WebCore::LegacyTileCache *this)
{
  return MEMORY[0x1E0DD0698](this);
}

uint64_t WebCore::ProtectionSpace::ProtectionSpace()
{
  return MEMORY[0x1E0DD0708]();
}

uint64_t WebCore::RenderBlockFlow::findClosestTextAtAbsolutePoint(WebCore::RenderBlockFlow *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1E0DD0710](this, a2);
}

uint64_t WebCore::ResourceRequest::httpPipeliningEnabled(WebCore::ResourceRequest *this)
{
  return MEMORY[0x1E0DD0718](this);
}

uint64_t WebCore::ResourceRequest::setHTTPPipeliningEnabled(WebCore::ResourceRequest *this)
{
  return MEMORY[0x1E0DD0728](this);
}

uint64_t WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties(WebCore::ResourceRequest *this, const WebCore::ResourceRequest *a2)
{
  return MEMORY[0x1E0DD0730](this, a2);
}

uint64_t WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, NSURLRequest *a2)
{
  return MEMORY[0x1E0DD0738](this, a2);
}

uint64_t WebCore::RunLoopObserver::invalidate(WebCore::RunLoopObserver *this)
{
  return MEMORY[0x1E0DD0740](this);
}

uint64_t WebCore::RunLoopObserver::schedule()
{
  return MEMORY[0x1E0DD0748]();
}

void WebCore::RunLoopObserver::~RunLoopObserver(WebCore::RunLoopObserver *this)
{
  MEMORY[0x1E0DD0750](this);
}

uint64_t WebCore::SQLiteStatement::columnText(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0760](this);
}

uint64_t WebCore::SQLiteStatement::executeCommand(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0770](this);
}

uint64_t WebCore::SQLiteStatement::columnBlobAsString(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0778](this);
}

uint64_t WebCore::SQLiteStatement::isColumnDeclaredAsBlob(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0780](this);
}

uint64_t WebCore::SQLiteStatement::step(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0788](this);
}

uint64_t WebCore::SQLiteStatement::reset(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0790](this);
}

uint64_t WebCore::SQLiteStatement::bindBlob(WebCore::SQLiteStatement *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD07A0](this, a2, a3);
}

uint64_t WebCore::SQLiteStatement::bindText()
{
  return MEMORY[0x1E0DD07A8]();
}

uint64_t WebCore::SQLiteStatement::columnInt(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD07B0](this);
}

void WebCore::SQLiteStatement::~SQLiteStatement(WebCore::SQLiteStatement *this)
{
  MEMORY[0x1E0DD07B8](this);
}

uint64_t WebCore::VisiblePosition::VisiblePosition()
{
  return MEMORY[0x1E0DD0870]();
}

uint64_t WebCore::XPathExpression::evaluate(WebCore::XPathExpression *this, Node *a2, uint64_t a3, WebCore::XPathResult *a4)
{
  return MEMORY[0x1E0DD0880](this, a2, a3, a4);
}

void WebCore::XPathExpression::~XPathExpression(WebCore::XPathExpression *this)
{
  MEMORY[0x1E0DD0888](this);
}

void WebCore::XPathNSResolver::~XPathNSResolver(WebCore::XPathNSResolver *this)
{
  MEMORY[0x1E0DD0890](this);
}

uint64_t WebCore::createLiveRange()
{
  return MEMORY[0x1E0DD08B8]();
}

uint64_t WebCore::isDraggableLink(WebCore *this, const Element *a2)
{
  return MEMORY[0x1E0DD08C8](this, a2);
}

uint64_t WebCore::makeSimpleRange()
{
  return MEMORY[0x1E0DD08D8]();
}

{
  return MEMORY[0x1E0DD08F0]();
}

{
  return MEMORY[0x1E0DD08F8]();
}

uint64_t WebCore::reportException()
{
  return MEMORY[0x1E0DD0900]();
}

uint64_t WebCore::startOfDocument(WebCore *this, const Node *a2)
{
  return MEMORY[0x1E0DD0908](this, a2);
}

uint64_t WebCore::startOfDocument(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DD0910](this, a2);
}

uint64_t WebCore::startOfSentence(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DD0918](this, a2);
}

uint64_t WebCore::unwrapCryptoKey()
{
  return MEMORY[0x1E0DD0928]();
}

uint64_t WebCore::AudioDestination::create()
{
  return MEMORY[0x1E0DD0980]();
}

uint64_t WebCore::AutofillElements::computeAutofillElements()
{
  return MEMORY[0x1E0DD0988]();
}

uint64_t WebCore::AutofillElements::autofill()
{
  return MEMORY[0x1E0DD0990]();
}

uint64_t WebCore::BackForwardCache::setMaxSize(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1E0DD0998](this);
}

uint64_t WebCore::BackForwardCache::remove(WebCore::BackForwardCache *this, WebCore::HistoryItem *a2)
{
  return MEMORY[0x1E0DD09C0](this, a2);
}

uint64_t WebCore::BackForwardCache::singleton(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1E0DD09C8](this);
}

uint64_t WebCore::BlobRegistryImpl::registerBlobURL()
{
  return MEMORY[0x1E0DD09D8]();
}

uint64_t WebCore::BlobRegistryImpl::unregisterBlobURL()
{
  return MEMORY[0x1E0DD09E0]();
}

uint64_t WebCore::BlobRegistryImpl::registerBlobURLHandle()
{
  return MEMORY[0x1E0DD09E8]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURL()
{
  return MEMORY[0x1E0DD09F8]();
}

uint64_t WebCore::BlobRegistryImpl::unregisterBlobURLHandle()
{
  return MEMORY[0x1E0DD0A00]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalFileBlobURL()
{
  return MEMORY[0x1E0DD0A08]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURLForSlice(WebCore::BlobRegistryImpl *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  return MEMORY[0x1E0DD0A10](this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB()
{
  return MEMORY[0x1E0DD0A18]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked()
{
  return MEMORY[0x1E0DD0A20]();
}

uint64_t WebCore::BlobRegistryImpl::blobSize(WebCore::BlobRegistryImpl *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD0A28](this, a2);
}

uint64_t WebCore::BlobRegistryImpl::blobType(WebCore::BlobRegistryImpl *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD0A30](this, a2);
}

void WebCore::BlobRegistryImpl::~BlobRegistryImpl(WebCore::BlobRegistryImpl *this)
{
  MEMORY[0x1E0DD0A38](this);
}

uint64_t WebCore::BroadcastChannel::dispatchMessageTo()
{
  return MEMORY[0x1E0DD0A40]();
}

void WebCore::DatabaseProvider::~DatabaseProvider(WebCore::DatabaseProvider *this)
{
  MEMORY[0x1E0DD0A50](this);
}

uint64_t WebCore::EventListenerMap::find()
{
  return MEMORY[0x1E0DD0A80]();
}

uint64_t WebCore::EventListenerMap::EventListenerMap(WebCore::EventListenerMap *this)
{
  return MEMORY[0x1E0DD0A88](this);
}

uint64_t WebCore::FileReaderLoader::start()
{
  return MEMORY[0x1E0DD0A98]();
}

uint64_t WebCore::FileReaderLoader::cancel(WebCore::FileReaderLoader *this)
{
  return MEMORY[0x1E0DD0AA0](this);
}

uint64_t WebCore::FileReaderLoader::FileReaderLoader()
{
  return MEMORY[0x1E0DD0AA8]();
}

uint64_t WebCore::FontCascadeFonts::realizeFallbackRangesAt()
{
  return MEMORY[0x1E0DD0AC8]();
}

void WebCore::FontCascadeFonts::~FontCascadeFonts(WebCore::FontCascadeFonts *this)
{
  MEMORY[0x1E0DD0AD0](this);
}

uint64_t WebCore::FrameLoadRequest::FrameLoadRequest()
{
  return MEMORY[0x1E0DD0AF8]();
}

{
  return MEMORY[0x1E0DD0B08]();
}

void WebCore::FrameLoadRequest::~FrameLoadRequest(WebCore::FrameLoadRequest *this)
{
  MEMORY[0x1E0DD0B10](this);
}

uint64_t WebCore::HTMLImageElement::currentSrc(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD0B20](this);
}

uint64_t WebCore::HTMLImageElement::setCrossOrigin()
{
  return MEMORY[0x1E0DD0B28]();
}

uint64_t WebCore::HTMLImageElement::width(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD0B38](this);
}

uint64_t WebCore::HTMLImageElement::height(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD0B40](this);
}

uint64_t WebCore::HTMLImageElement::setWidth(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD0B48](this);
}

uint64_t WebCore::HTMLImageElement::setHeight(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD0B50](this);
}

uint64_t WebCore::HTMLInputElement::setChecked()
{
  return MEMORY[0x1E0DD0B58]();
}

uint64_t WebCore::HTMLInputElement::setRangeText()
{
  return MEMORY[0x1E0DD0B60]();
}

uint64_t WebCore::HTMLInputElement::setAutoFilled(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0B68](this);
}

uint64_t WebCore::HTMLInputElement::setValueAsDate()
{
  return MEMORY[0x1E0DD0B70]();
}

uint64_t WebCore::HTMLInputElement::setDefaultValue()
{
  return MEMORY[0x1E0DD0B78]();
}

uint64_t WebCore::HTMLInputElement::setIndeterminate(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0B80](this);
}

uint64_t WebCore::HTMLInputElement::setValueAsNumber()
{
  return MEMORY[0x1E0DD0B88]();
}

uint64_t WebCore::HTMLInputElement::setAutoFilledAndViewable(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BA0](this);
}

uint64_t WebCore::HTMLInputElement::files(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BA8](this);
}

uint64_t WebCore::HTMLInputElement::stepUp(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BB0](this);
}

uint64_t WebCore::HTMLInputElement::setSize(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BB8](this);
}

uint64_t WebCore::HTMLInputElement::setType()
{
  return MEMORY[0x1E0DD0BC0]();
}

uint64_t WebCore::HTMLInputElement::setFiles()
{
  return MEMORY[0x1E0DD0BC8]();
}

uint64_t WebCore::HTMLInputElement::setValue()
{
  return MEMORY[0x1E0DD0BD0]();
}

uint64_t WebCore::HTMLInputElement::setWidth(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BD8](this);
}

uint64_t WebCore::HTMLInputElement::stepDown(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BE0](this);
}

uint64_t WebCore::HTMLInputElement::setHeight(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BE8](this);
}

uint64_t WebCore::HTMLMediaElement::setPreload()
{
  return MEMORY[0x1E0DD0BF0]();
}

uint64_t WebCore::HTMLMediaElement::setControls(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C00](this);
}

uint64_t WebCore::HTMLMediaElement::exitFullscreen(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C08](this);
}

uint64_t WebCore::HTMLMediaElement::setCrossOrigin()
{
  return MEMORY[0x1E0DD0C10]();
}

uint64_t WebCore::HTMLMediaElement::setPreservesPitch(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C28](this);
}

uint64_t WebCore::HTMLMediaElement::setMediaCacheDirectory(WebCore::HTMLMediaElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0C58](this, a2);
}

uint64_t WebCore::HTMLMediaElement::setCurrentTimeForBindings(WebCore::HTMLMediaElement *this, double a2)
{
  return MEMORY[0x1E0DD0C70](this, a2);
}

uint64_t WebCore::HTMLMediaElement::didBecomeFullscreenElement(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C78](this);
}

uint64_t WebCore::HTMLMediaElement::didStopBeingFullscreenElement(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C80](this);
}

uint64_t WebCore::HTMLMediaElement::load(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C90](this);
}

uint64_t WebCore::HTMLMediaElement::fastSeek(WebCore::HTMLMediaElement *this, double a2)
{
  return MEMORY[0x1E0DD0C98](this, a2);
}

uint64_t WebCore::HTMLOListElement::setStartForBindings(WebCore::HTMLOListElement *this)
{
  return MEMORY[0x1E0DD0CA0](this);
}

uint64_t WebCore::HTMLStyleElement::setDisabled(WebCore::HTMLStyleElement *this)
{
  return MEMORY[0x1E0DD0CA8](this);
}

uint64_t WebCore::HTMLTableElement::setCaption()
{
  return MEMORY[0x1E0DD0CB0]();
}

uint64_t WebCore::HTMLTableElement::createTBody(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CB8](this);
}

uint64_t WebCore::HTMLTableElement::createTFoot(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CC0](this);
}

uint64_t WebCore::HTMLTableElement::createTHead(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CC8](this);
}

uint64_t WebCore::HTMLTableElement::deleteTFoot(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CD0](this);
}

uint64_t WebCore::HTMLTableElement::deleteTHead(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CD8](this);
}

uint64_t WebCore::HTMLTableElement::createCaption(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CE0](this);
}

uint64_t WebCore::HTMLTableElement::deleteCaption(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CE8](this);
}

uint64_t WebCore::HTMLTableElement::rows(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CF0](this);
}

uint64_t WebCore::HTMLTableElement::tBodies(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0CF8](this);
}

uint64_t WebCore::HTMLTableElement::setTFoot()
{
  return MEMORY[0x1E0DD0D00]();
}

uint64_t WebCore::HTMLTableElement::setTHead()
{
  return MEMORY[0x1E0DD0D08]();
}

uint64_t WebCore::HTMLTableElement::deleteRow(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0D10](this);
}

uint64_t WebCore::HTMLTableElement::insertRow(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD0D18](this);
}

uint64_t WebCore::HTMLTitleElement::setText()
{
  return MEMORY[0x1E0DD0D20]();
}

uint64_t WebCore::HTMLVideoElement::webkitExitFullscreen(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD0D28](this);
}

uint64_t WebCore::HTMLVideoElement::webkitEnterFullscreen(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD0D30](this);
}

uint64_t WebCore::HTMLVideoElement::webkitSupportsFullscreen(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD0D38](this);
}

uint64_t WebCore::HTMLVideoElement::webkitDisplayingFullscreen(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD0D50](this);
}

uint64_t WebCore::JSHTMLCollection::toWrapped()
{
  return MEMORY[0x1E0DD0D88]();
}

uint64_t WebCore::JSStyleSheetList::toWrapped()
{
  return MEMORY[0x1E0DD0D90]();
}

uint64_t WebCore::LegacyWebArchive::rawDataRepresentation(WebCore::LegacyWebArchive *this)
{
  return MEMORY[0x1E0DD0DA0](this);
}

uint64_t WebCore::LegacyWebArchive::create()
{
  return MEMORY[0x1E0DD0DA8]();
}

{
  return MEMORY[0x1E0DD0DC0]();
}

{
  return MEMORY[0x1E0DD0DC8]();
}

uint64_t WebCore::LegacyWebArchive::create(WebCore::LegacyWebArchive *this, const WebCore::SimpleRange *a2)
{
  return MEMORY[0x1E0DD0DB0](this, a2);
}

uint64_t WebCore::LegacyWebArchive::create(WebCore::LegacyWebArchive *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1E0DD0DB8](this, a2);
}

uint64_t WebCore::LegacyWebArchive::create(WebCore::LegacyWebArchive *this)
{
  return MEMORY[0x1E0DD0DD0](this);
}

uint64_t WebCore::MIMETypeRegistry::isTextMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E00](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::mimeTypeForExtension()
{
  return MEMORY[0x1E0DD0E20]();
}

uint64_t WebCore::MIMETypeRegistry::supportedImageMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1E0DD0E30](this);
}

uint64_t WebCore::MIMETypeRegistry::supportedMediaMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1E0DD0E38](this);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E40](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedMediaMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E48](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::unsupportedTextMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1E0DD0E58](this);
}

uint64_t WebCore::MIMETypeRegistry::supportedNonImageMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1E0DD0E60](this);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedNonImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E68](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::preferredExtensionForMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E70](this, a2);
}

uint64_t WebCore::NativeNodeFilter::NativeNodeFilter()
{
  return MEMORY[0x1E0DD0E80]();
}

uint64_t WebCore::SQLiteFileSystem::deleteDatabaseFile(WebCore::SQLiteFileSystem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0F08](this, a2);
}

uint64_t WebCore::ScriptController::createWorld()
{
  return MEMORY[0x1E0DD0F98]();
}

uint64_t WebCore::ScriptController::jsWindowProxy(WebCore::ScriptController *this, WebCore::DOMWrapperWorld *a2)
{
  return MEMORY[0x1E0DD0FA0](this, a2);
}

uint64_t WebCore::ScriptController::bindingRootObject(WebCore::ScriptController *this)
{
  return MEMORY[0x1E0DD0FA8](this);
}

uint64_t WebCore::ScriptController::javaScriptContext(WebCore::ScriptController *this)
{
  return MEMORY[0x1E0DD0FB0](this);
}

uint64_t WebCore::ScriptController::windowScriptObject(WebCore::ScriptController *this)
{
  return MEMORY[0x1E0DD0FB8](this);
}

uint64_t WebCore::ScriptController::executeScriptIgnoringException()
{
  return MEMORY[0x1E0DD0FC0]();
}

uint64_t WebCore::ScriptController::executeUserAgentScriptInWorldIgnoringException(WebCore::ScriptController *this, WebCore::DOMWrapperWorld *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD0FD0](this, a2, a3);
}

uint64_t WebCore::ThreadGlobalData::initializeEventNames(WebCore::ThreadGlobalData *this)
{
  return MEMORY[0x1E0DD1020](this);
}

void WebCore::ValidationBubble::~ValidationBubble(WebCore::ValidationBubble *this)
{
  MEMORY[0x1E0DD1078](this);
}

uint64_t WebCore::VisibleSelection::VisibleSelection()
{
  return MEMORY[0x1E0DD1098]();
}

uint64_t WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this, const VisiblePosition *a2, const VisiblePosition *a3)
{
  return MEMORY[0x1E0DD10A0](this, a2, a3);
}

uint64_t WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DD10A8](this, a2);
}

uint64_t WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1E0DD10B0](this);
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForLink(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1E0DD10B8](this);
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForAllLinks(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1E0DD10C0](this);
}

uint64_t WebCore::VisitedLinkStore::VisitedLinkStore(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1E0DD10C8](this);
}

void WebCore::VisitedLinkStore::~VisitedLinkStore(WebCore::VisitedLinkStore *this)
{
  MEMORY[0x1E0DD10D0](this);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const CGRect *a2)
{
  return MEMORY[0x1E0DD10E8](this, a2);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const FloatRect *a2)
{
  return MEMORY[0x1E0DD10F8](this, a2);
}

uint64_t WebCore::findIntersection(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4, const WebCore::FloatPoint *a5, WebCore::FloatPoint *a6)
{
  return MEMORY[0x1E0DD1100](this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::nextLinePosition()
{
  return MEMORY[0x1E0DD1110]();
}

uint64_t WebCore::startOfParagraph()
{
  return MEMORY[0x1E0DD1120]();
}

uint64_t WebCore::CredentialStorage::clearCredentials(WebCore::CredentialStorage *this)
{
  return MEMORY[0x1E0DD11D8](this);
}

uint64_t WebCore::CredentialStorage::getFromPersistentStorage()
{
  return MEMORY[0x1E0DD11E0]();
}

uint64_t WebCore::CredentialStorage::get()
{
  return MEMORY[0x1E0DD11F8]();
}

uint64_t WebCore::DOMImplementation::createDocument()
{
  return MEMORY[0x1E0DD1218]();
}

uint64_t WebCore::DOMImplementation::createDocumentType()
{
  return MEMORY[0x1E0DD1220]();
}

uint64_t WebCore::DOMImplementation::createHTMLDocument()
{
  return MEMORY[0x1E0DD1228]();
}

uint64_t WebCore::DOMImplementation::createCSSStyleSheet(WebCore::DOMImplementation *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD1230](this, a2, a3);
}

uint64_t WebCore::FullscreenManager::cancelFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1250](this);
}

uint64_t WebCore::FullscreenManager::didExitFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1258](this);
}

uint64_t WebCore::FullscreenManager::didEnterFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1260](this);
}

uint64_t WebCore::FullscreenManager::willExitFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1268](this);
}

uint64_t WebCore::FullscreenManager::willEnterFullscreen(WebCore::FullscreenManager *this, Element *a2)
{
  return MEMORY[0x1E0DD1270](this, a2);
}

uint64_t WebCore::GraphicsContextCG::GraphicsContextCG()
{
  return MEMORY[0x1E0DD12A0]();
}

void WebCore::GraphicsContextCG::~GraphicsContextCG(WebCore::GraphicsContextCG *this)
{
  MEMORY[0x1E0DD12A8](this);
}

uint64_t WebCore::HTMLAnchorElement::text(WebCore::HTMLAnchorElement *this)
{
  return MEMORY[0x1E0DD12E8](this);
}

uint64_t WebCore::HTMLAnchorElement::relList(WebCore::HTMLAnchorElement *this)
{
  return MEMORY[0x1E0DD12F0](this);
}

uint64_t WebCore::HTMLButtonElement::setType()
{
  return MEMORY[0x1E0DD12F8]();
}

uint64_t WebCore::HTMLCanvasElement::setWidth(WebCore::HTMLCanvasElement *this)
{
  return MEMORY[0x1E0DD1300](this);
}

uint64_t WebCore::HTMLCanvasElement::setHeight(WebCore::HTMLCanvasElement *this)
{
  return MEMORY[0x1E0DD1308](this);
}

uint64_t WebCore::HTMLCanvasElement::toDataURL(WebCore::HTMLCanvasElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1310](this, a2);
}

uint64_t WebCore::HTMLOptionElement::setSelected(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1E0DD1318](this);
}

uint64_t WebCore::HTMLOptionElement::setLabel()
{
  return MEMORY[0x1E0DD1320]();
}

uint64_t WebCore::HTMLOptionElement::setValue()
{
  return MEMORY[0x1E0DD1328]();
}

uint64_t WebCore::HTMLScriptElement::setCrossOrigin()
{
  return MEMORY[0x1E0DD1330]();
}

uint64_t WebCore::HTMLScriptElement::setText()
{
  return MEMORY[0x1E0DD1338]();
}

uint64_t WebCore::HTMLScriptElement::setAsync(WebCore::HTMLScriptElement *this)
{
  return MEMORY[0x1E0DD1340](this);
}

uint64_t WebCore::HTMLSelectElement::setSelectedIndex(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD1348](this);
}

uint64_t WebCore::HTMLSelectElement::optionSelectedByUser(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD1350](this);
}

uint64_t WebCore::HTMLSelectElement::add()
{
  return MEMORY[0x1E0DD1358]();
}

uint64_t WebCore::HTMLSelectElement::item(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD1360](this);
}

uint64_t WebCore::HTMLSelectElement::remove(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD1368](this);
}

uint64_t WebCore::HTMLSelectElement::options(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD1370](this);
}

uint64_t WebCore::HTMLSelectElement::setSize(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD1378](this);
}

uint64_t WebCore::HTMLSelectElement::setValue(WebCore::HTMLSelectElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1380](this, a2);
}

uint64_t WebCore::HTMLSelectElement::namedItem()
{
  return MEMORY[0x1E0DD1388]();
}

uint64_t WebCore::HistoryController::replaceCurrentItem()
{
  return MEMORY[0x1E0DD13A8]();
}

uint64_t WebCore::HistoryController::saveDocumentAndScrollState(WebCore::HistoryController *this)
{
  return MEMORY[0x1E0DD13B0](this);
}

uint64_t WebCore::JSXPathExpression::toWrapped()
{
  return MEMORY[0x1E0DD13C8]();
}

uint64_t WebCore::MouseRelatedEvent::offsetX(WebCore::MouseRelatedEvent *this)
{
  return MEMORY[0x1E0DD1428](this);
}

uint64_t WebCore::MouseRelatedEvent::offsetY(WebCore::MouseRelatedEvent *this)
{
  return MEMORY[0x1E0DD1430](this);
}

uint64_t WebCore::PageConfiguration::PageConfiguration()
{
  return MEMORY[0x1E0DD1478]();
}

void WebCore::PageConfiguration::~PageConfiguration(WebCore::PageConfiguration *this)
{
  MEMORY[0x1E0DD1480](this);
}

uint64_t WebCore::PageConsoleClient::shouldPrintExceptions(WebCore::PageConsoleClient *this)
{
  return MEMORY[0x1E0DD1488](this);
}

uint64_t WebCore::PageConsoleClient::setShouldPrintExceptions(WebCore::PageConsoleClient *this)
{
  return MEMORY[0x1E0DD1490](this);
}

uint64_t WebCore::SQLiteTransaction::begin(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1E0DD14D0](this);
}

uint64_t WebCore::SQLiteTransaction::commit(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1E0DD14D8](this);
}

uint64_t WebCore::SQLiteTransaction::rollback(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1E0DD14E0](this);
}

uint64_t WebCore::SQLiteTransaction::SQLiteTransaction(WebCore::SQLiteTransaction *this, WebCore::SQLiteDatabase *a2)
{
  return MEMORY[0x1E0DD14E8](this, a2);
}

void WebCore::SQLiteTransaction::~SQLiteTransaction(WebCore::SQLiteTransaction *this)
{
  MEMORY[0x1E0DD14F0](this);
}

uint64_t WebCore::SubresourceLoader::create()
{
  return MEMORY[0x1E0DD1528]();
}

void WebCore::WebSocketDeflater::~WebSocketDeflater(WebCore::WebSocketDeflater *this)
{
  MEMORY[0x1E0DD1530](this);
}

void WebCore::WebSocketInflater::~WebSocketInflater(WebCore::WebSocketInflater *this)
{
  MEMORY[0x1E0DD1538](this);
}

uint64_t WebCore::isStartOfDocument(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DD1568](this, a2);
}

uint64_t WebCore::makeBoundaryPoint(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DD1570](this, a2);
}

uint64_t WebCore::sRGBColorSpaceRef(WebCore *this)
{
  return MEMORY[0x1E0DD1580](this);
}

uint64_t WebCore::screenScaleFactor(WebCore *this, UIScreen *a2)
{
  return MEMORY[0x1E0DD1588](this, a2);
}

uint64_t WebCore::serializeFragment()
{
  return MEMORY[0x1E0DD1590]();
}

uint64_t WebCore::CustomElementQueue::processQueue()
{
  return MEMORY[0x1E0DD15B0]();
}

uint64_t WebCore::DocumentFullscreen::webkitExitFullscreen(WebCore::DocumentFullscreen *this, Document *a2)
{
  return MEMORY[0x1E0DD15D0](this, a2);
}

uint64_t WebCore::HTMLMarqueeElement::setScrollDelay(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1E0DD15F8](this);
}

uint64_t WebCore::HTMLMarqueeElement::setScrollAmount(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1E0DD1600](this);
}

uint64_t WebCore::HTMLMarqueeElement::stop(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1E0DD1608](this);
}

uint64_t WebCore::HTMLMarqueeElement::start(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1E0DD1610](this);
}

uint64_t WebCore::HTMLMarqueeElement::setLoop(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1E0DD1618](this);
}

uint64_t WebCore::PlatformPasteboard::setBufferForType()
{
  return MEMORY[0x1E0DD17B0]();
}

uint64_t WebCore::PlatformPasteboard::setStringForType(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD17B8](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::allPasteboardItemInfo(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17C8](this);
}

uint64_t WebCore::PlatformPasteboard::informationForItemAtIndex(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17D0](this);
}

uint64_t WebCore::PlatformPasteboard::urlStringSuitableForLoading(WebCore::PlatformPasteboard *this, WTF::String *a2)
{
  return MEMORY[0x1E0DD17D8](this, a2);
}

uint64_t WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers()
{
  return MEMORY[0x1E0DD17E0]();
}

uint64_t WebCore::PlatformPasteboard::containsURLStringSuitableForLoading(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17E8](this);
}

uint64_t WebCore::PlatformPasteboard::url(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17F0](this);
}

uint64_t WebCore::PlatformPasteboard::color(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17F8](this);
}

uint64_t WebCore::PlatformPasteboard::write(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD1800](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::write()
{
  return MEMORY[0x1E0DD1808]();
}

{
  return MEMORY[0x1E0DD1810]();
}

{
  return MEMORY[0x1E0DD1818]();
}

{
  return MEMORY[0x1E0DD1820]();
}

uint64_t WebCore::PlatformPasteboard::setURL()
{
  return MEMORY[0x1E0DD1828]();
}

uint64_t WebCore::PlatformPasteboard::addTypes()
{
  return MEMORY[0x1E0DD1830]();
}

uint64_t WebCore::PlatformPasteboard::setColor()
{
  return MEMORY[0x1E0DD1838]();
}

uint64_t WebCore::PlatformPasteboard::setTypes()
{
  return MEMORY[0x1E0DD1840]();
}

uint64_t WebCore::PlatformPasteboard::PlatformPasteboard(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1848](this, a2);
}

void WebCore::PluginInfoProvider::~PluginInfoProvider(WebCore::PluginInfoProvider *this)
{
  MEMORY[0x1E0DD1868](this);
}

uint64_t WebCore::SecurityOriginData::fromDatabaseIdentifier()
{
  return MEMORY[0x1E0DD1920]();
}

uint64_t WebCore::WebSocketHandshake::readServerHandshake()
{
  return MEMORY[0x1E0DD1990]();
}

uint64_t WebCore::WebSocketHandshake::addExtensionProcessor()
{
  return MEMORY[0x1E0DD1998]();
}

uint64_t WebCore::WebSocketHandshake::reset(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD19A0](this);
}

uint64_t WebCore::WebSocketHandshake::WebSocketHandshake(WebCore::WebSocketHandshake *this, const WTF::URL *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  return MEMORY[0x1E0DD19A8](this, a2, a3, a4, a5);
}

void WebCore::WebSocketHandshake::~WebSocketHandshake(WebCore::WebSocketHandshake *this)
{
  MEMORY[0x1E0DD19B0](this);
}

uint64_t WebCore::documentTypeString(WebCore *this, const Document *a2)
{
  return MEMORY[0x1E0DD19E0](this, a2);
}

uint64_t WebCore::isEditablePosition()
{
  return MEMORY[0x1E0DD19E8]();
}

uint64_t WebCore::makeNSArrayElement()
{
  return MEMORY[0x1E0DD19F0]();
}

uint64_t WebCore::makeNSArrayElement(WebCore *this, const FloatRect *a2)
{
  return MEMORY[0x1E0DD19F8](this, a2);
}

uint64_t WebCore::platformStrategies(WebCore *this)
{
  return MEMORY[0x1E0DD1A10](this);
}

void WebCore::DeflateResultHolder::~DeflateResultHolder(WebCore::DeflateResultHolder *this)
{
  MEMORY[0x1E0DD1A60](this);
}

uint64_t WebCore::HTMLTableColElement::setSpan(WebCore::HTMLTableColElement *this)
{
  return MEMORY[0x1E0DD1A78](this);
}

uint64_t WebCore::HTMLTableRowElement::deleteCell(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1E0DD1A80](this);
}

uint64_t WebCore::HTMLTableRowElement::insertCell(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1E0DD1A88](this);
}

uint64_t WebCore::HTMLTableRowElement::cells(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1E0DD1A90](this);
}

uint64_t WebCore::HTMLTextAreaElement::setDefaultValue()
{
  return MEMORY[0x1E0DD1A98]();
}

uint64_t WebCore::HTMLTextAreaElement::setCols(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1E0DD1AA0](this);
}

uint64_t WebCore::HTMLTextAreaElement::setRows(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1E0DD1AA8](this);
}

uint64_t WebCore::HTMLTextAreaElement::setValue()
{
  return MEMORY[0x1E0DD1AB0]();
}

void WebCore::InflateResultHolder::~InflateResultHolder(WebCore::InflateResultHolder *this)
{
  MEMORY[0x1E0DD1AE8](this);
}

uint64_t WebCore::InspectorController::evaluateForTestInFrontend(WebCore::InspectorController *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1B18](this, a2);
}

uint64_t WebCore::InspectorController::show(WebCore::InspectorController *this)
{
  return MEMORY[0x1E0DD1B30](this);
}

uint64_t WebCore::JSDOMImplementation::toWrapped()
{
  return MEMORY[0x1E0DD1B38]();
}

uint64_t WebCore::ResourceRequestBase::setURL(WebCore::ResourceRequestBase *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD1D38](this, a2);
}

uint64_t WebCore::TextResourceDecoder::decodeAndFlush()
{
  return MEMORY[0x1E0DD1D80]();
}

uint64_t WebCore::TextResourceDecoder::create(WebCore::TextResourceDecoder *this, const WTF::String *a2, const PAL::TextEncoding *a3)
{
  return MEMORY[0x1E0DD1D90](this, a2, a3);
}

void WebCore::TextResourceDecoder::~TextResourceDecoder(WebCore::TextResourceDecoder *this)
{
  MEMORY[0x1E0DD1DA0](this);
}

uint64_t WebCore::copyLocalizedString(WebCore *this, const __CFString *a2)
{
  return MEMORY[0x1E0DD1E40](this, a2);
}

uint64_t WebCore::createInternalError()
{
  return MEMORY[0x1E0DD1E58]();
}

uint64_t WebCore::provideNotification()
{
  return MEMORY[0x1E0DD1E70]();
}

uint64_t WebCore::unitedBoundingBoxes()
{
  return MEMORY[0x1E0DD1EA0]();
}

uint64_t WebCore::DeprecatedCSSOMValue::operator delete()
{
  return MEMORY[0x1E0DD1EE0]();
}

uint64_t WebCore::HTMLTableCellElement::setColSpan(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1E0DD1EF8](this);
}

uint64_t WebCore::HTMLTableCellElement::setRowSpanForBindings(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1E0DD1F00](this);
}

uint64_t WebCore::HTMLTableCellElement::setScope()
{
  return MEMORY[0x1E0DD1F08]();
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F30](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F38](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme(WebCore::LegacySchemeRegistry *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD1F90](this, a2, a3);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsAllowingDatabaseAccessInPrivateBrowsing(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1FA8](this, a2);
}

uint64_t WebCore::NetworkStateNotifier::addListener()
{
  return MEMORY[0x1E0DD2000]();
}

uint64_t WebCore::NetworkStateNotifier::onLine(WebCore::NetworkStateNotifier *this)
{
  return MEMORY[0x1E0DD2008](this);
}

uint64_t WebCore::NetworkStateNotifier::singleton(WebCore::NetworkStateNotifier *this)
{
  return MEMORY[0x1E0DD2010](this);
}

uint64_t WebCore::PlatformEventFactory::createPlatformKeyboardEvent()
{
  return MEMORY[0x1E0DD2080]();
}

uint64_t WebCore::RenderEmbeddedObject::setPluginUnavailabilityReason()
{
  return MEMORY[0x1E0DD20A0]();
}

uint64_t WebCore::ResourceHandleClient::ResourceHandleClient(WebCore::ResourceHandleClient *this)
{
  return MEMORY[0x1E0DD20A8](this);
}

void WebCore::ResourceHandleClient::~ResourceHandleClient(WebCore::ResourceHandleClient *this)
{
  MEMORY[0x1E0DD20B0](this);
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this, const WTF::URL *a2, const WTF::String *a3, uint64_t a4, const WTF::String *a5)
{
  return MEMORY[0x1E0DD2130](this, a2, a3, a4, a5);
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1E0DD2138](this);
}

uint64_t WebCore::UserGestureIndicator::processingUserGesture(WebCore::UserGestureIndicator *this, const Document *a2)
{
  return MEMORY[0x1E0DD21D0](this, a2);
}

uint64_t WebCore::endOfEditableContent(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DD21F0](this, a2);
}

uint64_t WebCore::previousLinePosition()
{
  return MEMORY[0x1E0DD2228]();
}

uint64_t WebCore::provideGeolocationTo(WebCore *this, Page *a2, WebCore::GeolocationClient *a3)
{
  return MEMORY[0x1E0DD2230](this, a2, a3);
}

uint64_t WebCore::threadGlobalDataSlow(WebCore *this)
{
  return MEMORY[0x1E0DD2240](this);
}

uint64_t WebCore::BackForwardController::currentItem(WebCore::BackForwardController *this)
{
  return MEMORY[0x1E0DD2278](this);
}

uint64_t WebCore::BackForwardController::itemAtIndex(WebCore::BackForwardController *this)
{
  return MEMORY[0x1E0DD2280](this);
}

uint64_t WebCore::BackForwardController::goBack(WebCore::BackForwardController *this)
{
  return MEMORY[0x1E0DD2288](this);
}

uint64_t WebCore::BackForwardController::goForward(WebCore::BackForwardController *this)
{
  return MEMORY[0x1E0DD2290](this);
}

uint64_t WebCore::DestinationColorSpace::SRGB(WebCore::DestinationColorSpace *this)
{
  return MEMORY[0x1E0DD2340](this);
}

uint64_t WebCore::DeviceOrientationData::create()
{
  return MEMORY[0x1E0DD2350]();
}

uint64_t WebCore::GeolocationController::errorOccurred()
{
  return MEMORY[0x1E0DD2480]();
}

uint64_t WebCore::GeolocationController::supplementName(WebCore::GeolocationController *this)
{
  return MEMORY[0x1E0DD2488](this);
}

uint64_t WebCore::GeolocationController::positionChanged()
{
  return MEMORY[0x1E0DD2490]();
}

uint64_t WebCore::HTMLOptionsCollection::setSelectedIndex(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1E0DD24D0](this);
}

uint64_t WebCore::HTMLOptionsCollection::add()
{
  return MEMORY[0x1E0DD24D8]();
}

uint64_t WebCore::HTMLOptionsCollection::remove(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1E0DD24E0](this);
}

uint64_t WebCore::HTMLOptionsCollection::setLength(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1E0DD24E8](this);
}

uint64_t WebCore::JSCSSStyleDeclaration::toWrapped()
{
  return MEMORY[0x1E0DD2530]();
}

uint64_t WebCore::JSDeprecatedCSSOMRect::toWrapped()
{
  return MEMORY[0x1E0DD2538]();
}

uint64_t WebCore::MediaKeySystemRequest::allow(WebCore::MediaKeySystemRequest *this)
{
  return MEMORY[0x1E0DD2548](this);
}

uint64_t WebCore::NetworkStorageSession::deleteAllCookies()
{
  return MEMORY[0x1E0DD2588]();
}

uint64_t WebCore::NetworkStorageSession::processMayUseCookieAPI(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1E0DD25C0](this);
}

uint64_t WebCore::NetworkStorageSession::permitProcessToUseCookieAPI(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1E0DD2600](this);
}

uint64_t WebCore::NetworkStorageSession::createCFStorageSessionForIdentifier()
{
  return MEMORY[0x1E0DD2660]();
}

uint64_t WebCore::NetworkStorageSession::NetworkStorageSession(WebCore::NetworkStorageSession *this, SessionID a2)
{
  return MEMORY[0x1E0DD26E0](this, a2.m_identifier);
}

uint64_t WebCore::NetworkStorageSession::NetworkStorageSession()
{
  return MEMORY[0x1E0DD26E8]();
}

void WebCore::NetworkStorageSession::~NetworkStorageSession(WebCore::NetworkStorageSession *this)
{
  MEMORY[0x1E0DD26F0](this);
}

uint64_t WebCore::RenderLayerCompositor::layerTreeAsText()
{
  return MEMORY[0x1E0DD2740]();
}

uint64_t WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(WebCore::SQLiteDatabaseTracker *this)
{
  return MEMORY[0x1E0DD2748](this);
}

uint64_t WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(WebCore::SQLiteDatabaseTracker *this)
{
  return MEMORY[0x1E0DD2750](this);
}

uint64_t WebCore::SQLiteDatabaseTracker::setClient()
{
  return MEMORY[0x1E0DD2758]();
}

void WebCore::SerializedScriptValue::~SerializedScriptValue(WebCore::SerializedScriptValue *this)
{
  MEMORY[0x1E0DD2798](this);
}

uint64_t WebCore::UserContentController::addUserScript()
{
  return MEMORY[0x1E0DD27C0]();
}

uint64_t WebCore::UserContentController::removeUserScript(WebCore::UserContentController *this, WebCore::DOMWrapperWorld *a2, const WTF::URL *a3)
{
  return MEMORY[0x1E0DD27C8](this, a2, a3);
}

uint64_t WebCore::UserContentController::addUserStyleSheet()
{
  return MEMORY[0x1E0DD27D0]();
}

uint64_t WebCore::UserContentController::removeUserScripts(WebCore::UserContentController *this, WebCore::DOMWrapperWorld *a2)
{
  return MEMORY[0x1E0DD27D8](this, a2);
}

uint64_t WebCore::UserContentController::removeAllUserContent(WebCore::UserContentController *this)
{
  return MEMORY[0x1E0DD27E0](this);
}

uint64_t WebCore::UserContentController::removeUserStyleSheet(WebCore::UserContentController *this, WebCore::DOMWrapperWorld *a2, const WTF::URL *a3)
{
  return MEMORY[0x1E0DD27E8](this, a2, a3);
}

uint64_t WebCore::UserContentController::removeUserStyleSheets(WebCore::UserContentController *this, WebCore::DOMWrapperWorld *a2)
{
  return MEMORY[0x1E0DD27F0](this, a2);
}

uint64_t WebCore::UserContentController::create(WebCore::UserContentController *this)
{
  return MEMORY[0x1E0DD27F8](this);
}

uint64_t WebCore::UserContentURLPattern::parse()
{
  return MEMORY[0x1E0DD2800]();
}

uint64_t WebCore::mainThreadNormalWorld(WebCore *this)
{
  return MEMORY[0x1E0DD28D8](this);
}

uint64_t WebCore::resolveCharacterRange()
{
  return MEMORY[0x1E0DD28F0]();
}

uint64_t WebCore::setPlatformStrategies()
{
  return MEMORY[0x1E0DD2900]();
}

uint64_t WebCore::CaptionUserPreferences::createTestingModeToken(WebCore::CaptionUserPreferences *this)
{
  return MEMORY[0x1E0DD2960](this);
}

uint64_t WebCore::FontCascadeDescription::resolveFontSizeAdjustFromFontIfNeeded()
{
  return MEMORY[0x1E0DD2968]();
}

uint64_t WebCore::FragmentedSharedBuffer::create(WebCore::FragmentedSharedBuffer *this, NSData *a2)
{
  return MEMORY[0x1E0DD29A8](this, a2);
}

uint64_t WebCore::HTMLFormControlElement::setFormAction()
{
  return MEMORY[0x1E0DD3270]();
}

uint64_t WebCore::HTMLFormControlElement::setFormMethod()
{
  return MEMORY[0x1E0DD3278]();
}

uint64_t WebCore::HTMLFormControlElement::setFormEnctype()
{
  return MEMORY[0x1E0DD3280]();
}

uint64_t WebCore::HTMLFormControlElement::setAutocomplete()
{
  return MEMORY[0x1E0DD3288]();
}

uint64_t WebCore::JSDeprecatedCSSOMValue::toWrapped()
{
  return MEMORY[0x1E0DD32A8]();
}

uint64_t WebCore::MutableStyleProperties::ensureCSSStyleDeclaration(WebCore::MutableStyleProperties *this)
{
  return MEMORY[0x1E0DD32C0](this);
}

void WebCore::MutableStyleProperties::~MutableStyleProperties(WebCore::MutableStyleProperties *this)
{
  MEMORY[0x1E0DD32C8](this);
}

uint64_t WebCore::NotificationController::clientFrom(WebCore::NotificationController *this, Page *a2)
{
  return MEMORY[0x1E0DD32D0](this, a2);
}

uint64_t WebCore::StorageEventDispatcher::dispatchLocalStorageEvents()
{
  return MEMORY[0x1E0DD3378]();
}

uint64_t WebCore::StorageEventDispatcher::dispatchSessionStorageEvents()
{
  return MEMORY[0x1E0DD3380]();
}

uint64_t WebCore::URLByCanonicalizingURL(WebCore *this, NSURL *a2)
{
  return MEMORY[0x1E0DD3388](this, a2);
}

uint64_t WebCore::WebSocketDeflateFramer::createExtensionProcessor(WebCore::WebSocketDeflateFramer *this)
{
  return MEMORY[0x1E0DD3390](this);
}

uint64_t WebCore::WebSocketDeflateFramer::deflate(WebCore::WebSocketDeflateFramer *this, WebCore::WebSocketFrame *a2)
{
  return MEMORY[0x1E0DD3398](this, a2);
}

uint64_t WebCore::WebSocketDeflateFramer::didFail(WebCore::WebSocketDeflateFramer *this)
{
  return MEMORY[0x1E0DD33A0](this);
}

uint64_t WebCore::WebSocketDeflateFramer::inflate(WebCore::WebSocketDeflateFramer *this, WebCore::WebSocketFrame *a2)
{
  return MEMORY[0x1E0DD33A8](this, a2);
}

uint64_t WebCore::createFragmentFromText(WebCore *this, const WebCore::SimpleRange *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD33C8](this, a2, a3);
}

uint64_t WebCore::externalRepresentation()
{
  return MEMORY[0x1E0DD33D8]();
}

uint64_t WebCore::startOfEditableContent(WebCore *this, const VisiblePosition *a2)
{
  return MEMORY[0x1E0DD3400](this, a2);
}

uint64_t WebCore::ApplicationCacheStorage::ApplicationCacheStorage(WebCore::ApplicationCacheStorage *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD3418](this, a2, a3);
}

uint64_t WebCore::GeolocationPositionData::GeolocationPositionData(WebCore::GeolocationPositionData *this, CLLocation *a2)
{
  return MEMORY[0x1E0DD3448](this, a2);
}

uint64_t WebCore::HTMLTableSectionElement::rows(WebCore::HTMLTableSectionElement *this)
{
  return MEMORY[0x1E0DD3450](this);
}

uint64_t WebCore::HTMLTableSectionElement::deleteRow(WebCore::HTMLTableSectionElement *this)
{
  return MEMORY[0x1E0DD3458](this);
}

uint64_t WebCore::HTMLTableSectionElement::insertRow(WebCore::HTMLTableSectionElement *this)
{
  return MEMORY[0x1E0DD3460](this);
}

uint64_t WebCore::JSHTMLOptionsCollection::toWrapped()
{
  return MEMORY[0x1E0DD3468]();
}

uint64_t WebCore::atBoundaryOfGranularity()
{
  return MEMORY[0x1E0DD3568]();
}

uint64_t WebCore::computeSharedStringHash()
{
  return MEMORY[0x1E0DD3588]();
}

uint64_t WebCore::computeSharedStringHash(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD3590](this, a2);
}

uint64_t WebCore::createDragImageForRange(WebCore *this, WebCore::LocalFrame *a2, const WebCore::SimpleRange *a3)
{
  return MEMORY[0x1E0DD3598](this, a2, a3);
}

uint64_t WebCore::provideMediaKeySystemTo()
{
  return MEMORY[0x1E0DD35B0]();
}

uint64_t WebCore::readSerializedCryptoKey()
{
  return MEMORY[0x1E0DD35B8]();
}

uint64_t WebCore::wrapSerializedCryptoKey()
{
  return MEMORY[0x1E0DD35D8]();
}

uint64_t WebCore::DeprecatedGlobalSettings::setOpusDecoderEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3610](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3618](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::allowsAnySSLCertificate(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3620](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setNetworkInterfaceName(WebCore::DeprecatedGlobalSettings *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD3628](this, a2);
}

uint64_t WebCore::DeprecatedGlobalSettings::setVorbisDecoderEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3630](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setMockScrollbarsEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3638](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setTrackingPreventionEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3640](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setAudioSessionCategoryOverride(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3648](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setNetworkDataUsageTrackingEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3650](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setMediaSourceInlinePaintingEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3658](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3660](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::shared(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1E0DD3668](this);
}

uint64_t WebCore::DocumentMarkerController::removeMarkers()
{
  return MEMORY[0x1E0DD3680]();
}

uint64_t WebCore::DocumentMarkerController::markersInRange()
{
  return MEMORY[0x1E0DD3698]();
}

uint64_t WebCore::DocumentMarkerController::renderedRectsForMarkers()
{
  return MEMORY[0x1E0DD36A8]();
}

uint64_t WebCore::DummyModelPlayerProvider::DummyModelPlayerProvider(WebCore::DummyModelPlayerProvider *this)
{
  return MEMORY[0x1E0DD36D0](this);
}

void WebCore::DummyModelPlayerProvider::~DummyModelPlayerProvider(WebCore::DummyModelPlayerProvider *this)
{
  MEMORY[0x1E0DD36D8](this);
}

uint64_t WebCore::JSDeprecatedCSSOMCounter::toWrapped()
{
  return MEMORY[0x1E0DD36F8]();
}

uint64_t WebCore::StorageNamespaceProvider::setSessionIDForTesting(WebCore::StorageNamespaceProvider *this, SessionID a2)
{
  return MEMORY[0x1E0DD37E8](this, a2.m_identifier);
}

uint64_t WebCore::StorageNamespaceProvider::StorageNamespaceProvider(WebCore::StorageNamespaceProvider *this)
{
  return MEMORY[0x1E0DD37F0](this);
}

void WebCore::StorageNamespaceProvider::~StorageNamespaceProvider(WebCore::StorageNamespaceProvider *this)
{
  MEMORY[0x1E0DD37F8](this);
}

uint64_t WebCore::createFragmentFromMarkup()
{
  return MEMORY[0x1E0DD3828]();
}

uint64_t WebCore::distanceBetweenPositions(WebCore *this, const VisiblePosition *a2, const VisiblePosition *a3)
{
  return MEMORY[0x1E0DD3830](this, a2, a3);
}

uint64_t WebCore::JSDeprecatedCSSOMRGBColor::toWrapped()
{
  return MEMORY[0x1E0DD3908]();
}

uint64_t WebCore::RenderLayerScrollableArea::scrollToOffset()
{
  return MEMORY[0x1E0DD39A8]();
}

uint64_t WebCore::defaultWebCryptoMasterKey(WebCore *this)
{
  return MEMORY[0x1E0DD39F0](this);
}

uint64_t WebCore::getOutOfLineCachedWrapper()
{
  return MEMORY[0x1E0DD3A20]();
}

uint64_t WebCore::initializeDOMWrapperHooks()
{
  return MEMORY[0x1E0DD3A28]();
}

uint64_t WebCore::roundAndClampToSRGBALossy(WebCore *this, CGColor *a2)
{
  return MEMORY[0x1E0DD3A30](this, a2);
}

uint64_t WebCore::ContextDestructionObserver::contextDestroyed(WebCore::ContextDestructionObserver *this)
{
  return MEMORY[0x1E0DD3A60](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setMaxLength(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD3A98](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setRangeText()
{
  return MEMORY[0x1E0DD3AA0]();
}

{
  return MEMORY[0x1E0DD3AA8]();
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionEnd(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD3AB0](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionRange()
{
  return MEMORY[0x1E0DD3AB8]();
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionStart(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD3AC0](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setCanShowPlaceholder(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD3AC8](this);
}

uint64_t WebCore::HTMLTextFormControlElement::setSelectionDirection(WebCore::HTMLTextFormControlElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD3AD0](this, a2);
}

uint64_t WebCore::HTMLTextFormControlElement::select()
{
  return MEMORY[0x1E0DD3AD8]();
}

uint64_t WebCore::ThreadableWebSocketChannel::validateURL(WebCore::ThreadableWebSocketChannel *this, Document *a2, const WTF::URL *a3)
{
  return MEMORY[0x1E0DD3C20](this, a2, a3);
}

uint64_t WebCore::ThreadableWebSocketChannel::ThreadableWebSocketChannel(WebCore::ThreadableWebSocketChannel *this)
{
  return MEMORY[0x1E0DD3C30](this);
}

uint64_t WebCore::ValidatedFormListedElement::checkValidity()
{
  return MEMORY[0x1E0DD3C58]();
}

uint64_t WebCore::ValidatedFormListedElement::setCustomValidity(WebCore::ValidatedFormListedElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD3C60](this, a2);
}

uint64_t WebCore::AlternativeTextUIController::addAlternatives()
{
  return MEMORY[0x1E0DD3CB8]();
}

uint64_t WebCore::AlternativeTextUIController::removeAlternatives()
{
  return MEMORY[0x1E0DD3CC0]();
}

uint64_t WebCore::AlternativeTextUIController::alternativesForContext()
{
  return MEMORY[0x1E0DD3CD0]();
}

uint64_t WebCore::DeviceOrientationClientMock::setOrientation()
{
  return MEMORY[0x1E0DD3CF0]();
}

uint64_t WebCore::DeviceOrientationClientMock::DeviceOrientationClientMock(WebCore::DeviceOrientationClientMock *this)
{
  return MEMORY[0x1E0DD3CF8](this);
}

uint64_t WebCore::createPrivateStorageSession()
{
  return MEMORY[0x1E0DD3EF0]();
}

uint64_t WebCore::withinTextUnitOfGranularity()
{
  return MEMORY[0x1E0DD3F58]();
}

uint64_t WebCore::InspectorFrontendClientLocal::showConsole(WebCore::InspectorFrontendClientLocal *this)
{
  return MEMORY[0x1E0DD3F68](this);
}

uint64_t WebCore::InspectorFrontendClientLocal::isDebuggingEnabled(WebCore::InspectorFrontendClientLocal *this)
{
  return MEMORY[0x1E0DD3F70](this);
}

uint64_t WebCore::InspectorFrontendClientLocal::setDebuggingEnabled(WebCore::InspectorFrontendClientLocal *this)
{
  return MEMORY[0x1E0DD3F78](this);
}

uint64_t WebCore::InspectorFrontendClientLocal::isProfilingJavaScript(WebCore::InspectorFrontendClientLocal *this)
{
  return MEMORY[0x1E0DD3F80](this);
}

uint64_t WebCore::InspectorFrontendClientLocal::stopProfilingJavaScript(WebCore::InspectorFrontendClientLocal *this)
{
  return MEMORY[0x1E0DD3F88](this);
}

uint64_t WebCore::InspectorFrontendClientLocal::startProfilingJavaScript(WebCore::InspectorFrontendClientLocal *this)
{
  return MEMORY[0x1E0DD3F90](this);
}

uint64_t WebCore::InspectorFrontendClientLocal::isTimelineProfilingEnabled(WebCore::InspectorFrontendClientLocal *this)
{
  return MEMORY[0x1E0DD3F98](this);
}

uint64_t WebCore::InspectorFrontendClientLocal::setTimelineProfilingEnabled(WebCore::InspectorFrontendClientLocal *this)
{
  return MEMORY[0x1E0DD3FA0](this);
}

uint64_t WebCore::makeDeprecatedLegacyPosition(WebCore *this, const BoundaryPoint *a2)
{
  return MEMORY[0x1E0DD4060](this, a2);
}

uint64_t WebCore::GameControllerGamepadProvider::singleton(WebCore::GameControllerGamepadProvider *this)
{
  return MEMORY[0x1E0DD4100](this);
}

uint64_t WebCore::createDefaultParagraphElement(WebCore *this, Document *a2)
{
  return MEMORY[0x1E0DD4260](this, a2);
}

uint64_t WebCore::isCharacterSmartReplaceExempt()
{
  return MEMORY[0x1E0DD4268]();
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::dispatchMessageAsync(WebCore::InspectorFrontendAPIDispatcher *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD4298](this, a2);
}

uint64_t WebCore::WebSQLiteDatabaseTrackerClient::sharedWebSQLiteDatabaseTrackerClient(WebCore::WebSQLiteDatabaseTrackerClient *this)
{
  return MEMORY[0x1E0DD4328](this);
}

uint64_t WebCore::enclosingTextUnitOfGranularity()
{
  return MEMORY[0x1E0DD4338]();
}

uint64_t WebCore::makeRangeSelectingNodeContents(WebCore *this, Node *a2)
{
  return MEMORY[0x1E0DD4358](this, a2);
}

uint64_t WebCore::removeQLPreviewConverterForURL(WebCore *this, NSURL *a2)
{
  return MEMORY[0x1E0DD4370](this, a2);
}

uint64_t WebCore::CrossOriginPreflightResultCache::clear(WebCore::CrossOriginPreflightResultCache *this)
{
  return MEMORY[0x1E0DD43A8](this);
}

uint64_t WebCore::CrossOriginPreflightResultCache::singleton(WebCore::CrossOriginPreflightResultCache *this)
{
  return MEMORY[0x1E0DD43B0](this);
}

uint64_t WebCore::createTemporaryFileForQuickLook(WebCore *this, NSString *a2)
{
  return MEMORY[0x1E0DD4458](this, a2);
}

void WebCore::IDBDatabaseNameAndVersionRequest::operator delete(void *a1)
{
  MEMORY[0x1E0DD4480](a1);
}

uint64_t WebCore::setAdditionalSupportedImageTypes()
{
  return MEMORY[0x1E0DD45C8]();
}

uint64_t WebCore::OriginAccessPatternsForWebProcess::singleton(WebCore::OriginAccessPatternsForWebProcess *this)
{
  return MEMORY[0x1E0DD45E0](this);
}

uint64_t WebCore::QLPreviewGetSupportedMIMETypesSet(WebCore *this)
{
  return MEMORY[0x1E0DD45E8](this);
}

uint64_t WebCore::registerQLPreviewConverterIfNeeded(WebCore *this, NSURL *a2, NSString *a3, NSData *a4)
{
  return MEMORY[0x1E0DD4700](this, a2, a3, a4);
}

uint64_t WebCore::positionOfNextBoundaryOfGranularity()
{
  return MEMORY[0x1E0DD4750]();
}

uint64_t WebCore::serializePreservingVisualAppearance()
{
  return MEMORY[0x1E0DD4758]();
}

uint64_t WebCore::registerMemoryReleaseNotifyCallbacks(WebCore *this)
{
  return MEMORY[0x1E0DD4790](this);
}

uint64_t WebCore::standardUserAgentWithApplicationName()
{
  return MEMORY[0x1E0DD47A0]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::hasFrontends(WebCore::LegacyWebSocketInspectorInstrumentation *this)
{
  return MEMORY[0x1E0DD4828](this);
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didCloseWebSocket()
{
  return MEMORY[0x1E0DD4830]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didCreateWebSocket()
{
  return MEMORY[0x1E0DD4838]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didSendWebSocketFrame()
{
  return MEMORY[0x1E0DD4840]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrame()
{
  return MEMORY[0x1E0DD4848]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketFrameError()
{
  return MEMORY[0x1E0DD4850]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::willSendWebSocketHandshakeRequest()
{
  return MEMORY[0x1E0DD4858]();
}

uint64_t WebCore::LegacyWebSocketInspectorInstrumentation::didReceiveWebSocketHandshakeResponse()
{
  return MEMORY[0x1E0DD4860]();
}

uint64_t WebCore::mac()
{
  return MEMORY[0x1E0DD4880]();
}

uint64_t WebCore::initializeHTTPConnectionSettingsOnStartup(WebCore *this)
{
  return MEMORY[0x1E0DD48B8](this);
}

uint64_t WebCore::initializeMaximumHTTPConnectionCountPerHost(WebCore *this)
{
  return MEMORY[0x1E0DD48E0](this);
}

uint64_t WebCore::Attr::style(WebCore::Attr *this)
{
  return MEMORY[0x1E0DD4940](this);
}

uint64_t WebCore::Attr::setValue()
{
  return MEMORY[0x1E0DD4948]();
}

void WebCore::Font::~Font(WebCore::Font *this)
{
  MEMORY[0x1E0DD4968](this);
}

uint64_t WebCore::Icon::createIconForFiles()
{
  return MEMORY[0x1E0DD4970]();
}

uint64_t WebCore::Icon::create()
{
  return MEMORY[0x1E0DD4978]();
}

void WebCore::Icon::~Icon(WebCore::Icon *this)
{
  MEMORY[0x1E0DD4988](this);
}

uint64_t WebCore::Node::childNodes(WebCore::Node *this)
{
  return MEMORY[0x1E0DD4990](this);
}

uint64_t WebCore::Node::appendChild(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4998](this, a2);
}

uint64_t WebCore::Node::removeChild(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD49A0](this, a2);
}

uint64_t WebCore::Node::insertBefore()
{
  return MEMORY[0x1E0DD49A8]();
}

uint64_t WebCore::Node::replaceChild(WebCore::Node *this, WebCore::Node *a2, WebCore::Node *a3)
{
  return MEMORY[0x1E0DD49B0](this, a2, a3);
}

uint64_t WebCore::Node::removedLastRef(WebCore::Node *this)
{
  return MEMORY[0x1E0DD49B8](this);
}

uint64_t WebCore::Node::setTextContent()
{
  return MEMORY[0x1E0DD49C0]();
}

uint64_t WebCore::Node::stopIgnoringLeaks(WebCore::Node *this)
{
  return MEMORY[0x1E0DD49C8](this);
}

uint64_t WebCore::Node::startIgnoringLeaks(WebCore::Node *this)
{
  return MEMORY[0x1E0DD49D0](this);
}

uint64_t WebCore::Node::absoluteBoundingRect(WebCore::Node *this, BOOL *a2)
{
  return MEMORY[0x1E0DD49D8](this, a2);
}

uint64_t WebCore::Node::cloneNodeForBindings(WebCore::Node *this)
{
  return MEMORY[0x1E0DD49E0](this);
}

uint64_t WebCore::Node::compareDocumentPosition(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD49E8](this, a2);
}

uint64_t WebCore::Node::remove(WebCore::Node *this)
{
  return MEMORY[0x1E0DD49F0](this);
}

uint64_t WebCore::Node::inspect(WebCore::Node *this)
{
  return MEMORY[0x1E0DD49F8](this);
}

uint64_t WebCore::Node::normalize(WebCore::Node *this)
{
  return MEMORY[0x1E0DD4A00](this);
}

uint64_t WebCore::Page::pluginData(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4A10](this);
}

uint64_t WebCore::Page::setGroupName(WebCore::Page *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD4A20](this, a2);
}

uint64_t WebCore::Page::setIsVisible(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4A28](this);
}

uint64_t WebCore::Page::setSessionID(WebCore::Page *this, SessionID a2)
{
  return MEMORY[0x1E0DD4A38](this, a2.m_identifier);
}

uint64_t WebCore::Page::rangeOfString()
{
  return MEMORY[0x1E0DD4A40]();
}

uint64_t WebCore::Page::setIsInWindow(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4A48](this);
}

uint64_t WebCore::Page::setPagination()
{
  return MEMORY[0x1E0DD4A50]();
}

uint64_t WebCore::Page::setInspectable(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4A60](this);
}

uint64_t WebCore::Page::setIsPrerender(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4A68](this);
}

uint64_t WebCore::Page::setMediaVolume(WebCore::Page *this, float a2)
{
  return MEMORY[0x1E0DD4A70](this, a2);
}

uint64_t WebCore::Page::addSchedulePair()
{
  return MEMORY[0x1E0DD4A80]();
}

uint64_t WebCore::Page::updateRendering(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4A98](this);
}

uint64_t WebCore::Page::setCanStartMedia(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4AB0](this);
}

uint64_t WebCore::Page::setDefersLoading(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4AB8](this);
}

uint64_t WebCore::Page::userAgentChanged(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4AC8](this);
}

uint64_t WebCore::Page::settingsDidChange(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4AD8](this);
}

uint64_t WebCore::Page::removeSchedulePair()
{
  return MEMORY[0x1E0DD4AF8]();
}

uint64_t WebCore::Page::setPageScaleFactor(WebCore::Page *this, float a2, const IntPoint *a3)
{
  return MEMORY[0x1E0DD4B00](this, a3, a2);
}

uint64_t WebCore::Page::addLayoutMilestones()
{
  return MEMORY[0x1E0DD4B20]();
}

uint64_t WebCore::Page::setDelegatesScaling(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4B30](this);
}

uint64_t WebCore::Page::setVisitedLinkStore()
{
  return MEMORY[0x1E0DD4B40]();
}

uint64_t WebCore::Page::setDeviceScaleFactor(WebCore::Page *this, float a2)
{
  return MEMORY[0x1E0DD4B60](this, a2);
}

uint64_t WebCore::Page::resumeAllMediaPlayback(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4BA8](this);
}

uint64_t WebCore::Page::revealCurrentSelection(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4BB0](this);
}

uint64_t WebCore::Page::setUseSystemAppearance(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4BB8](this);
}

uint64_t WebCore::Page::setUserContentProvider()
{
  return MEMORY[0x1E0DD4BC0]();
}

uint64_t WebCore::Page::finalizeRenderingUpdate()
{
  return MEMORY[0x1E0DD4BD0]();
}

uint64_t WebCore::Page::scheduleRenderingUpdate()
{
  return MEMORY[0x1E0DD4BE8]();
}

uint64_t WebCore::Page::suspendAllMediaPlayback(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4BF0](this);
}

uint64_t WebCore::Page::didCompleteRenderingFrame(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4C28](this);
}

uint64_t WebCore::Page::setBroadcastChannelRegistry()
{
  return MEMORY[0x1E0DD4C80]();
}

uint64_t WebCore::Page::setUnobscuredSafeAreaInsets()
{
  return MEMORY[0x1E0DD4C90]();
}

uint64_t WebCore::Page::effectiveAppearanceDidChange(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4CB0](this);
}

uint64_t WebCore::Page::setMediaKeysStorageDirectory(WebCore::Page *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD4CC0](this, a2);
}

uint64_t WebCore::Page::willStartRenderingUpdateDisplay(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4D10](this);
}

uint64_t WebCore::Page::setMemoryCacheClientCallsEnabled(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4D18](this);
}

uint64_t WebCore::Page::didCompleteRenderingUpdateDisplay(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4D28](this);
}

uint64_t WebCore::Page::setInLowQualityImageInterpolationMode(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4D80](this);
}

uint64_t WebCore::Page::setPortsForUpgradingInsecureSchemeForTesting(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4DA8](this);
}

uint64_t WebCore::Page::group(WebCore::Page *this)
{
  return MEMORY[0x1E0DD4DC8](this);
}

uint64_t WebCore::Page::create()
{
  return MEMORY[0x1E0DD4DD0]();
}

uint64_t WebCore::Page::goToItem()
{
  return MEMORY[0x1E0DD4DD8]();
}

void WebCore::Page::~Page(WebCore::Page *this)
{
  MEMORY[0x1E0DD4DE8](this);
}

uint64_t WebCore::Text::replaceWholeText(WebCore::Text *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD4E10](this, a2);
}

uint64_t WebCore::Text::splitText(WebCore::Text *this)
{
  return MEMORY[0x1E0DD4E18](this);
}

uint64_t WebCore::Color::Color()
{
  return MEMORY[0x1E0DD4E68]();
}

uint64_t WebCore::Event::create()
{
  return MEMORY[0x1E0DD4E80]();
}

uint64_t WebCore::Event::initEvent()
{
  return MEMORY[0x1E0DD4E88]();
}

uint64_t WebCore::Frame::setOpener()
{
  return MEMORY[0x1E0DD4EC0]();
}

uint64_t WebCore::Image::supportsType(WebCore::Image *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD4EC8](this, a2);
}

uint64_t WebCore::Range::insertNode()
{
  return MEMORY[0x1E0DD4F00]();
}

uint64_t WebCore::Range::selectNode(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4F08](this, a2);
}

uint64_t WebCore::Range::setEndAfter(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4F10](this, a2);
}

uint64_t WebCore::Range::setEndBefore(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4F18](this, a2);
}

uint64_t WebCore::Range::cloneContents(WebCore::Range *this)
{
  return MEMORY[0x1E0DD4F20](this);
}

uint64_t WebCore::Range::setStartAfter(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4F28](this, a2);
}

uint64_t WebCore::Range::deleteContents(WebCore::Range *this)
{
  return MEMORY[0x1E0DD4F30](this);
}

uint64_t WebCore::Range::isPointInRange(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4F38](this, a2);
}

uint64_t WebCore::Range::setStartBefore(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4F40](this, a2);
}

uint64_t WebCore::Range::extractContents(WebCore::Range *this)
{
  return MEMORY[0x1E0DD4F48](this);
}

uint64_t WebCore::Range::surroundContents(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4F50](this, a2);
}

uint64_t WebCore::Range::selectNodeContents(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD4F58](this, a2);
}

uint64_t WebCore::Range::createContextualFragment()
{
  return MEMORY[0x1E0DD4F60]();
}

uint64_t WebCore::Range::expand(WebCore::Range *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD4F70](this, a2);
}

uint64_t WebCore::Range::setEnd()
{
  return MEMORY[0x1E0DD4F78]();
}

uint64_t WebCore::Range::collapse(WebCore::Range *this)
{
  return MEMORY[0x1E0DD4F80](this);
}

uint64_t WebCore::Range::setStart()
{
  return MEMORY[0x1E0DD4F88]();
}

uint64_t WebCore::Style::Scope::didChangeStyleSheetEnvironment(WebCore::Style::Scope *this)
{
  return MEMORY[0x1E0DD4F90](this);
}

uint64_t WebCore::Chrome::focusNSView(WebCore::Chrome *this, WAKView *a2)
{
  return MEMORY[0x1E0DD4FA0](this, a2);
}

uint64_t WebCore::Editor::applyStyle()
{
  return MEMORY[0x1E0DD4FD8]();
}

uint64_t WebCore::Editor::findString()
{
  return MEMORY[0x1E0DD4FE0]();
}

uint64_t WebCore::Editor::insertText()
{
  return MEMORY[0x1E0DD4FE8]();
}

uint64_t WebCore::Editor::rangeForPoint(WebCore::Editor *this, const IntPoint *a2)
{
  return MEMORY[0x1E0DD4FF8](this, a2);
}

uint64_t WebCore::Editor::setComposition()
{
  return MEMORY[0x1E0DD5000]();
}

uint64_t WebCore::Editor::simplifyMarkup(WebCore::Editor *this, WebCore::Node *a2, WebCore::Node *a3)
{
  return MEMORY[0x1E0DD5008](this, a2, a3);
}

uint64_t WebCore::Editor::fontForSelection(WebCore::Editor *this, BOOL *a2)
{
  return MEMORY[0x1E0DD5010](this, a2);
}

uint64_t WebCore::Editor::confirmMarkedText(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5020](this);
}

uint64_t WebCore::Editor::insertOrderedList(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5028](this);
}

uint64_t WebCore::Editor::confirmComposition(WebCore::Editor *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5030](this, a2);
}

uint64_t WebCore::Editor::confirmComposition(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5038](this);
}

uint64_t WebCore::Editor::countMatchesForText()
{
  return MEMORY[0x1E0DD5048]();
}

uint64_t WebCore::Editor::insertUnorderedList(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5058](this);
}

uint64_t WebCore::Editor::applyStyleToSelection()
{
  return MEMORY[0x1E0DD5068]();
}

uint64_t WebCore::Editor::insertDictationPhrases()
{
  return MEMORY[0x1E0DD5080]();
}

uint64_t WebCore::Editor::writeImageToPasteboard()
{
  return MEMORY[0x1E0DD5090]();
}

uint64_t WebCore::Editor::setBaseWritingDirection()
{
  return MEMORY[0x1E0DD50A0]();
}

uint64_t WebCore::Editor::setTextAsChildOfElement()
{
  return MEMORY[0x1E0DD50A8]();
}

uint64_t WebCore::Editor::computeAndSetTypingStyle()
{
  return MEMORY[0x1E0DD50B0]();
}

uint64_t WebCore::Editor::removeUnchangeableStyles(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD50B8](this);
}

uint64_t WebCore::Editor::decreaseSelectionListLevel(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD50D8](this);
}

uint64_t WebCore::Editor::increaseSelectionListLevel(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD50E0](this);
}

uint64_t WebCore::Editor::replaceSelectionWithFragment()
{
  return MEMORY[0x1E0DD50F0]();
}

uint64_t WebCore::Editor::canDecreaseSelectionListLevel(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD50F8](this);
}

uint64_t WebCore::Editor::canIncreaseSelectionListLevel(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5100](this);
}

uint64_t WebCore::Editor::deleteSelectionWithSmartDelete()
{
  return MEMORY[0x1E0DD5118]();
}

uint64_t WebCore::Editor::fontAttributesAtSelectionStart(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5120](this);
}

uint64_t WebCore::Editor::increaseSelectionListLevelOrdered(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5128](this);
}

uint64_t WebCore::Editor::setMarkedTextMatchesAreHighlighted(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5130](this);
}

uint64_t WebCore::Editor::increaseSelectionListLevelUnordered(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5138](this);
}

uint64_t WebCore::Editor::setDictationPhrasesAsChildOfElement()
{
  return MEMORY[0x1E0DD5140]();
}

uint64_t WebCore::Editor::insertParagraphSeparatorInQuotedContent(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5148](this);
}

uint64_t WebCore::Editor::setTextAlignmentForChangedBaseWritingDirection()
{
  return MEMORY[0x1E0DD5150]();
}

uint64_t WebCore::Editor::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD5158](this);
}

uint64_t WebCore::Editor::Command::Command(WebCore::Editor::Command *this)
{
  return MEMORY[0x1E0DD5160](this);
}

uint64_t WebCore::Editor::command(WebCore::Editor *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5168](this, a2);
}

uint64_t WebCore::JSNode::toWrapped()
{
  return MEMORY[0x1E0DD5180]();
}

uint64_t WebCore::Widget::setPlatformWidget(WebCore::Widget *this, WAKView *a2)
{
  return MEMORY[0x1E0DD5250](this, a2);
}

uint64_t WebCore::Widget::Widget(WebCore::Widget *this, WAKView *a2)
{
  return MEMORY[0x1E0DD5270](this, a2);
}

void WebCore::Widget::~Widget(WebCore::Widget *this)
{
  MEMORY[0x1E0DD5278](this);
}

uint64_t WebCore::CSSRule::setCssText(WebCore::CSSRule *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5290](this, a2);
}

uint64_t WebCore::Element::clientLeft(WebCore::Element *this)
{
  return MEMORY[0x1E0DD5298](this);
}

uint64_t WebCore::Element::clientWidth(WebCore::Element *this)
{
  return MEMORY[0x1E0DD52A0](this);
}

uint64_t WebCore::Element::offsetWidth(WebCore::Element *this)
{
  return MEMORY[0x1E0DD52A8](this);
}

uint64_t WebCore::Element::clientHeight(WebCore::Element *this)
{
  return MEMORY[0x1E0DD52B0](this);
}

uint64_t WebCore::Element::offsetHeight(WebCore::Element *this)
{
  return MEMORY[0x1E0DD52B8](this);
}

uint64_t WebCore::Element::setAttribute()
{
  return MEMORY[0x1E0DD52C0]();
}

uint64_t WebCore::Element::setInnerHTML()
{
  return MEMORY[0x1E0DD52C8]();
}

uint64_t WebCore::Element::setOuterHTML()
{
  return MEMORY[0x1E0DD52D0]();
}

uint64_t WebCore::Element::scrollIntoView(WebCore::Element *this)
{
  return MEMORY[0x1E0DD52E8](this);
}

uint64_t WebCore::Element::setAttributeNS()
{
  return MEMORY[0x1E0DD52F0]();
}

uint64_t WebCore::Element::removeAttribute()
{
  return MEMORY[0x1E0DD52F8]();
}

uint64_t WebCore::Element::getAttributeNode()
{
  return MEMORY[0x1E0DD5300]();
}

uint64_t WebCore::Element::setAttributeNode(WebCore::Element *this, WebCore::Attr *a2)
{
  return MEMORY[0x1E0DD5308](this, a2);
}

uint64_t WebCore::Element::removeAttributeNS()
{
  return MEMORY[0x1E0DD5310]();
}

uint64_t WebCore::Element::getAttributeNodeNS()
{
  return MEMORY[0x1E0DD5320]();
}

uint64_t WebCore::Element::insertAdjacentHTML()
{
  return MEMORY[0x1E0DD5328]();
}

uint64_t WebCore::Element::insertAdjacentText()
{
  return MEMORY[0x1E0DD5330]();
}

uint64_t WebCore::Element::setAttributeNodeNS(WebCore::Element *this, WebCore::Attr *a2)
{
  return MEMORY[0x1E0DD5338](this, a2);
}

uint64_t WebCore::Element::removeAttributeNode(WebCore::Element *this, WebCore::Attr *a2)
{
  return MEMORY[0x1E0DD5340](this, a2);
}

uint64_t WebCore::Element::setBooleanAttribute()
{
  return MEMORY[0x1E0DD5348]();
}

uint64_t WebCore::Element::offsetTopForBindings(WebCore::Element *this)
{
  return MEMORY[0x1E0DD5350](this);
}

uint64_t WebCore::Element::setIntegralAttribute()
{
  return MEMORY[0x1E0DD5358]();
}

uint64_t WebCore::Element::boundsInRootViewSpace(WebCore::Element *this)
{
  return MEMORY[0x1E0DD5360](this);
}

uint64_t WebCore::Element::insertAdjacentElement(WebCore::Element *this, const WTF::String *a2, WebCore::Element *a3)
{
  return MEMORY[0x1E0DD5368](this, a2, a3);
}

uint64_t WebCore::Element::offsetLeftForBindings(WebCore::Element *this)
{
  return MEMORY[0x1E0DD5370](this);
}

uint64_t WebCore::Element::scrollIntoViewIfNeeded(WebCore::Element *this)
{
  return MEMORY[0x1E0DD5378](this);
}

uint64_t WebCore::Element::setTabIndexForBindings(WebCore::Element *this)
{
  return MEMORY[0x1E0DD5380](this);
}

uint64_t WebCore::Element::offsetParentForBindings(WebCore::Element *this)
{
  return MEMORY[0x1E0DD5388](this);
}

uint64_t WebCore::Element::webkitRequestFullscreen(WebCore::Element *this)
{
  return MEMORY[0x1E0DD5390](this);
}

uint64_t WebCore::Element::setUnsignedIntegralAttribute()
{
  return MEMORY[0x1E0DD53A0]();
}

uint64_t WebCore::Element::setAttributeWithoutSynchronization()
{
  return MEMORY[0x1E0DD53B0]();
}

uint64_t WebCore::Element::closest(WebCore::Element *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD53B8](this, a2);
}

uint64_t WebCore::Element::matches(WebCore::Element *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD53C0](this, a2);
}

uint64_t WebCore::Element::classList(WebCore::Element *this)
{
  return MEMORY[0x1E0DD53C8](this);
}

uint64_t WebCore::Element::clientTop(WebCore::Element *this)
{
  return MEMORY[0x1E0DD53D0](this);
}

uint64_t WebCore::Element::innerText(WebCore::Element *this)
{
  return MEMORY[0x1E0DD53D8](this);
}

uint64_t WebCore::Element::outerText(WebCore::Element *this)
{
  return MEMORY[0x1E0DD53E0](this);
}

uint64_t WebCore::IntSize::IntSize(WebCore::IntSize *this, const CGSize *a2)
{
  return MEMORY[0x1E0DD5418](this, a2);
}

uint64_t WebCore::JSEvent::toWrapped()
{
  return MEMORY[0x1E0DD5428]();
}

uint64_t WebCore::JSRange::toWrapped()
{
  return MEMORY[0x1E0DD5430]();
}

uint64_t WebCore::Process::identifier(WebCore::Process *this)
{
  return MEMORY[0x1E0DD5458](this);
}

uint64_t WebCore::UIEvent::initUIEvent()
{
  return MEMORY[0x1E0DD5468]();
}

uint64_t WebCore::Document::importNode(WebCore::Document *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD5480](this, a2);
}

uint64_t WebCore::Document::setBgColor()
{
  return MEMORY[0x1E0DD5488]();
}

uint64_t WebCore::Document::setCharset(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5490](this, a2);
}

uint64_t WebCore::Document::setFgColor()
{
  return MEMORY[0x1E0DD5498]();
}

uint64_t WebCore::Document::createEvent(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD54A0](this, a2);
}

uint64_t WebCore::Document::createRange(WebCore::Document *this)
{
  return MEMORY[0x1E0DD54A8](this);
}

uint64_t WebCore::Document::execCommand()
{
  return MEMORY[0x1E0DD54B0]();
}

uint64_t WebCore::Document::styleSheets(WebCore::Document *this)
{
  return MEMORY[0x1E0DD54B8](this);
}

uint64_t WebCore::Document::updateLayout()
{
  return MEMORY[0x1E0DD54D0]();
}

uint64_t WebCore::Document::activeElement(WebCore::Document *this)
{
  return MEMORY[0x1E0DD54D8](this);
}

uint64_t WebCore::Document::createComment()
{
  return MEMORY[0x1E0DD54E0]();
}

uint64_t WebCore::Document::ensureMarkers(WebCore::Document *this)
{
  return MEMORY[0x1E0DD54F0](this);
}

uint64_t WebCore::Document::getTouchRects()
{
  return MEMORY[0x1E0DD54F8]();
}

uint64_t WebCore::Document::setAlinkColor()
{
  return MEMORY[0x1E0DD5500]();
}

uint64_t WebCore::Document::setDesignMode(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5508](this, a2);
}

uint64_t WebCore::Document::setVlinkColor()
{
  return MEMORY[0x1E0DD5510]();
}

uint64_t WebCore::Document::setXMLVersion(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5518](this, a2);
}

uint64_t WebCore::Document::createTextNode()
{
  return MEMORY[0x1E0DD5520]();
}

uint64_t WebCore::Document::implementation(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5528](this);
}

uint64_t WebCore::Document::setDocumentURI(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5530](this, a2);
}

uint64_t WebCore::Document::createAttribute()
{
  return MEMORY[0x1E0DD5540]();
}

uint64_t WebCore::Document::createElementNS()
{
  return MEMORY[0x1E0DD5548]();
}

uint64_t WebCore::Document::createExpression()
{
  return MEMORY[0x1E0DD5550]();
}

uint64_t WebCore::Document::createNSResolver(WebCore::Document *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD5558](this, a2);
}

uint64_t WebCore::Document::createTreeWalker()
{
  return MEMORY[0x1E0DD5560]();
}

uint64_t WebCore::Document::setXMLStandalone(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5568](this);
}

uint64_t WebCore::Document::addConsoleMessage()
{
  return MEMORY[0x1E0DD5570]();
}

uint64_t WebCore::Document::createAttributeNS()
{
  return MEMORY[0x1E0DD5578]();
}

uint64_t WebCore::Document::getElementsByName()
{
  return MEMORY[0x1E0DD5580]();
}

uint64_t WebCore::Document::queryCommandState(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5588](this, a2);
}

uint64_t WebCore::Document::queryCommandValue(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5590](this, a2);
}

uint64_t WebCore::Document::setBodyOrFrameset()
{
  return MEMORY[0x1E0DD5598]();
}

uint64_t WebCore::Document::setFocusedElement(WebCore::Document *this, WebCore::Element *a2)
{
  return MEMORY[0x1E0DD55A0](this, a2);
}

uint64_t WebCore::Document::createCDATASection()
{
  return MEMORY[0x1E0DD55A8]();
}

uint64_t WebCore::Document::createNodeIterator()
{
  return MEMORY[0x1E0DD55B0]();
}

uint64_t WebCore::Document::caretRangeFromPoint()
{
  return MEMORY[0x1E0DD55C0]();
}

uint64_t WebCore::Document::dispatchWindowEvent()
{
  return MEMORY[0x1E0DD55C8]();
}

uint64_t WebCore::Document::queryCommandEnabled(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD55D8](this, a2);
}

uint64_t WebCore::Document::updateStyleIfNeeded(WebCore::Document *this)
{
  return MEMORY[0x1E0DD55E0](this);
}

uint64_t WebCore::Document::ensureReportingScope(WebCore::Document *this)
{
  return MEMORY[0x1E0DD55F0](this);
}

uint64_t WebCore::Document::queryCommandIndeterm(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD55F8](this, a2);
}

uint64_t WebCore::Document::queryCommandSupported(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5610](this, a2);
}

uint64_t WebCore::Document::createDocumentFragment(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5618](this);
}

uint64_t WebCore::Document::scrollingElementForAPI(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5620](this);
}

uint64_t WebCore::Document::ensureFullscreenManager(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5628](this);
}

uint64_t WebCore::Document::setLinkColorForBindings()
{
  return MEMORY[0x1E0DD5630]();
}

uint64_t WebCore::Document::createElementForBindings()
{
  return MEMORY[0x1E0DD5640]();
}

uint64_t WebCore::Document::scheduleFullStyleRebuild(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5648](this);
}

uint64_t WebCore::Document::setShouldCreateRenderers(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5650](this);
}

uint64_t WebCore::Document::createCSSStyleDeclaration(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5658](this);
}

uint64_t WebCore::Document::ensureCachedResourceLoader(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5668](this);
}

uint64_t WebCore::Document::createProcessingInstruction()
{
  return MEMORY[0x1E0DD5680]();
}

uint64_t WebCore::Document::head(WebCore::Document *this)
{
  return MEMORY[0x1E0DD56C0](this);
}

uint64_t WebCore::Document::open(WebCore::Document *this, WebCore::Document *a2)
{
  return MEMORY[0x1E0DD56C8](this, a2);
}

uint64_t WebCore::Document::close(WebCore::Document *this)
{
  return MEMORY[0x1E0DD56E0](this);
}

uint64_t WebCore::Document::forms(WebCore::Document *this)
{
  return MEMORY[0x1E0DD56E8](this);
}

uint64_t WebCore::Document::links(WebCore::Document *this)
{
  return MEMORY[0x1E0DD56F0](this);
}

uint64_t WebCore::Document::write()
{
  return MEMORY[0x1E0DD56F8]();
}

uint64_t WebCore::Document::cookie(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5700](this);
}

uint64_t WebCore::Document::editor(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5708](this);
}

uint64_t WebCore::Document::embeds(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5710](this);
}

uint64_t WebCore::Document::images(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5718](this);
}

uint64_t WebCore::Document::setDir()
{
  return MEMORY[0x1E0DD5720]();
}

uint64_t WebCore::Document::anchors(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5728](this);
}

uint64_t WebCore::Document::applets(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5730](this);
}

uint64_t WebCore::Document::scripts(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5740](this);
}

uint64_t WebCore::Document::writeln()
{
  return MEMORY[0x1E0DD5748]();
}

uint64_t WebCore::Document::evaluate()
{
  return MEMORY[0x1E0DD5750]();
}

uint64_t WebCore::Document::referrer(WebCore::Document *this)
{
  return MEMORY[0x1E0DD5760](this);
}

uint64_t WebCore::Document::setTitle()
{
  return MEMORY[0x1E0DD5768]();
}

uint64_t WebCore::Document::adoptNode(WebCore::Document *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD5770](this, a2);
}

uint64_t WebCore::Document::setCookie(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD5778](this, a2);
}

uint64_t WebCore::DragData::DragData()
{
  return MEMORY[0x1E0DD5780]();
}

void WebCore::FileList::operator delete(void *a1)
{
  MEMORY[0x1E0DD5798](a1);
}

void WebCore::FormData::~FormData(WebCore::FormData *this)
{
  MEMORY[0x1E0DD57E0](this);
}

void WebCore::FormData::operator delete(void *a1)
{
  MEMORY[0x1E0DD57E8](a1);
}

uint64_t WebCore::IDBError::IDBError()
{
  return MEMORY[0x1E0DD57F8]();
}

uint64_t WebCore::IntPoint::IntPoint(WebCore::IntPoint *this, const CGPoint *a2)
{
  return MEMORY[0x1E0DD5808](this, a2);
}

uint64_t WebCore::Position::Position()
{
  return MEMORY[0x1E0DD5820]();
}

{
  return MEMORY[0x1E0DD5828]();
}

uint64_t WebCore::SVGTests::hasFeatureForLegacyBindings(WebCore::SVGTests *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD5838](this, a2, a3);
}

uint64_t WebCore::Settings::setDefaultFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1E0DD59C8](this, a2);
}

uint64_t WebCore::Settings::setMinimumFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1E0DD59D0](this, a2);
}

uint64_t WebCore::Settings::setShowDebugBorders(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD59D8](this);
}

uint64_t WebCore::Settings::setCoreMathMLEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD59E0](this);
}

uint64_t WebCore::Settings::setColorFilterEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD59E8](this);
}

uint64_t WebCore::Settings::setShowRepaintCounter(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD59F0](this);
}

uint64_t WebCore::Settings::setCanvasFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD59F8](this);
}

uint64_t WebCore::Settings::setDefaultFixedFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1E0DD5A00](this, a2);
}

uint64_t WebCore::Settings::setUsesBackForwardCache(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A08](this);
}

uint64_t WebCore::Settings::setDNSPrefetchingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A10](this);
}

uint64_t WebCore::Settings::setStorageBlockingPolicy()
{
  return MEMORY[0x1E0DD5A18]();
}

uint64_t WebCore::Settings::setTextAreasAreResizable(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A20](this);
}

uint64_t WebCore::Settings::setTextAutosizingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A28](this);
}

uint64_t WebCore::Settings::setVisualViewportEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A30](this);
}

uint64_t WebCore::Settings::setMinimumLogicalFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1E0DD5A38](this, a2);
}

uint64_t WebCore::Settings::setLoadsImagesAutomatically(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A48](this);
}

uint64_t WebCore::Settings::setAcceleratedFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A50](this);
}

uint64_t WebCore::Settings::setMockCaptureDevicesEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A58](this);
}

uint64_t WebCore::Settings::setAsyncFrameScrollingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A60](this);
}

uint64_t WebCore::Settings::setAuthorAndUserStylesEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A68](this);
}

uint64_t WebCore::Settings::setLayerBasedSVGEngineEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A70](this);
}

uint64_t WebCore::Settings::setResourceUsageOverlayVisible(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A78](this);
}

uint64_t WebCore::Settings::setICECandidateFilteringEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A80](this);
}

uint64_t WebCore::Settings::setAcceleratedCompositingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A88](this);
}

uint64_t WebCore::Settings::setAsyncOverflowScrollingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A90](this);
}

uint64_t WebCore::Settings::setCSSWordBreakAutoPhraseEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5A98](this);
}

uint64_t WebCore::Settings::setGraphicsContextFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AA0](this);
}

uint64_t WebCore::Settings::setShouldAllowUserInstalledFonts(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AA8](this);
}

uint64_t WebCore::Settings::setFontFallbackPrefersPictographs(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AB0](this);
}

uint64_t WebCore::Settings::setShouldEnableTextAutosizingBoost(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AB8](this);
}

uint64_t WebCore::Settings::setTextAutosizingUsesIdempotentMode(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AC8](this);
}

uint64_t WebCore::Settings::setPunchOutWhiteBackgroundsInDarkMode(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AD0](this);
}

uint64_t WebCore::Settings::setScrollingPerformanceTestingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AD8](this);
}

uint64_t WebCore::Settings::setHiddenPageDOMTimerThrottlingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AE8](this);
}

uint64_t WebCore::Settings::setLayoutViewportHeightExpansionFactor(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1E0DD5AF0](this, a2);
}

uint64_t WebCore::Settings::setLegacyOverflowScrollingTouchEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5AF8](this);
}

uint64_t WebCore::Settings::setLegacyLineLayoutVisualCoverageEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5B00](this);
}

uint64_t WebCore::Settings::setHiddenPageCSSAnimationSuspensionEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5B08](this);
}

uint64_t WebCore::Settings::setHiddenPageDOMTimerThrottlingAutoIncreases(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5B18](this);
}

uint64_t WebCore::Settings::setSampleBufferContentKeySessionSupportEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1E0DD5B20](this);
}

uint64_t WebCore::CaretBase::computeCaretColor()
{
  return MEMORY[0x1E0DD5B70]();
}

uint64_t WebCore::CookieJar::cookieRequestHeaderFieldProxy(WebCore::CookieJar *this, const WebCore::Document *a2, const WTF::URL *a3)
{
  return MEMORY[0x1E0DD5B88](this, a2, a3);
}

uint64_t WebCore::CookieJar::create()
{
  return MEMORY[0x1E0DD5B90]();
}

uint64_t WebCore::FloatRect::FloatRect(WebCore::FloatRect *this, const CGRect *a2)
{
  return MEMORY[0x1E0DD5BD0](this, a2);
}

uint64_t WebCore::FloatRect::FloatRect()
{
  return MEMORY[0x1E0DD5BD8]();
}

uint64_t WebCore::FontCache::forCurrentThread(WebCore::FontCache *this)
{
  return MEMORY[0x1E0DD5BE8](this);
}

uint64_t WebCore::FontCache::inactiveFontCount(WebCore::FontCache *this)
{
  return MEMORY[0x1E0DD5BF0](this);
}

uint64_t WebCore::FontCache::purgeInactiveFontData(WebCore::FontCache *this)
{
  return MEMORY[0x1E0DD5BF8](this);
}

uint64_t WebCore::FontCache::fontCount(WebCore::FontCache *this)
{
  return MEMORY[0x1E0DD5C08](this);
}

uint64_t WebCore::FrameTree::setSpecifiedName()
{
  return MEMORY[0x1E0DD5C18]();
}

uint64_t WebCore::FrameTree::clearName(WebCore::FrameTree *this)
{
  return MEMORY[0x1E0DD5C20](this);
}

uint64_t WebCore::HTMLNames::init(WebCore::HTMLNames *this)
{
  return MEMORY[0x1E0DD5EF0](this);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::deref(WebCore::IDBClient::IDBConnectionProxy *this)
{
  return MEMORY[0x1E0DD6250](this);
}

void WebCore::IDBClient::IDBConnectionProxy::operator delete(void *a1)
{
  MEMORY[0x1E0DD6258](a1);
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didGetCount()
{
  return MEMORY[0x1E0DD6260]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didPutOrAdd()
{
  return MEMORY[0x1E0DD6268]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didGetRecord()
{
  return MEMORY[0x1E0DD6270]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didOpenCursor()
{
  return MEMORY[0x1E0DD6278]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didCreateIndex()
{
  return MEMORY[0x1E0DD6280]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didDeleteIndex()
{
  return MEMORY[0x1E0DD6288]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didRenameIndex()
{
  return MEMORY[0x1E0DD6290]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didDeleteRecord()
{
  return MEMORY[0x1E0DD6298]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didOpenDatabase()
{
  return MEMORY[0x1E0DD62A0]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didGetAllRecords()
{
  return MEMORY[0x1E0DD62A8]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didIterateCursor()
{
  return MEMORY[0x1E0DD62B0]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didDeleteDatabase()
{
  return MEMORY[0x1E0DD62B8]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didCloseFromServer()
{
  return MEMORY[0x1E0DD62C0]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didAbortTransaction()
{
  return MEMORY[0x1E0DD62C8]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didClearObjectStore()
{
  return MEMORY[0x1E0DD62D0]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didStartTransaction()
{
  return MEMORY[0x1E0DD62D8]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didCommitTransaction()
{
  return MEMORY[0x1E0DD62E0]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didCreateObjectStore()
{
  return MEMORY[0x1E0DD62E8]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didDeleteObjectStore()
{
  return MEMORY[0x1E0DD62F0]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didRenameObjectStore()
{
  return MEMORY[0x1E0DD62F8]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::fireVersionChangeEvent()
{
  return MEMORY[0x1E0DD6308]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::notifyOpenDBRequestBlocked()
{
  return MEMORY[0x1E0DD6310]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::didGetAllDatabaseNamesAndVersions()
{
  return MEMORY[0x1E0DD6318]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::create()
{
  return MEMORY[0x1E0DD6320]();
}

void WebCore::IDBClient::IDBConnectionToServer::operator delete(void *a1)
{
  MEMORY[0x1E0DD6328](a1);
}

uint64_t WebCore::IDBServer::IDBConnectionToClient::create()
{
  return MEMORY[0x1E0DD6388]();
}

uint64_t WebCore::IDBServer::IDBServer::openCursor()
{
  return MEMORY[0x1E0DD6470]();
}

uint64_t WebCore::IDBServer::IDBServer::createIndex()
{
  return MEMORY[0x1E0DD6478]();
}

uint64_t WebCore::IDBServer::IDBServer::deleteIndex()
{
  return MEMORY[0x1E0DD6480]();
}

uint64_t WebCore::IDBServer::IDBServer::renameIndex()
{
  return MEMORY[0x1E0DD6488]();
}

uint64_t WebCore::IDBServer::IDBServer::deleteRecord()
{
  return MEMORY[0x1E0DD6490]();
}

uint64_t WebCore::IDBServer::IDBServer::openDatabase()
{
  return MEMORY[0x1E0DD6498]();
}

uint64_t WebCore::IDBServer::IDBServer::getAllRecords()
{
  return MEMORY[0x1E0DD64A0]();
}

uint64_t WebCore::IDBServer::IDBServer::iterateCursor()
{
  return MEMORY[0x1E0DD64A8]();
}

uint64_t WebCore::IDBServer::IDBServer::deleteDatabase()
{
  return MEMORY[0x1E0DD64B0]();
}

uint64_t WebCore::IDBServer::IDBServer::abortTransaction()
{
  return MEMORY[0x1E0DD64B8]();
}

uint64_t WebCore::IDBServer::IDBServer::clearObjectStore()
{
  return MEMORY[0x1E0DD64C0]();
}

uint64_t WebCore::IDBServer::IDBServer::commitTransaction()
{
  return MEMORY[0x1E0DD64C8]();
}

uint64_t WebCore::IDBServer::IDBServer::createObjectStore()
{
  return MEMORY[0x1E0DD64D0]();
}

uint64_t WebCore::IDBServer::IDBServer::deleteObjectStore()
{
  return MEMORY[0x1E0DD64D8]();
}

uint64_t WebCore::IDBServer::IDBServer::renameObjectStore()
{
  return MEMORY[0x1E0DD64E0]();
}

uint64_t WebCore::IDBServer::IDBServer::registerConnection()
{
  return MEMORY[0x1E0DD64E8]();
}

uint64_t WebCore::IDBServer::IDBServer::establishTransaction()
{
  return MEMORY[0x1E0DD64F0]();
}

uint64_t WebCore::IDBServer::IDBServer::openDBRequestCancelled()
{
  return MEMORY[0x1E0DD64F8]();
}

uint64_t WebCore::IDBServer::IDBServer::databaseConnectionClosed()
{
  return MEMORY[0x1E0DD6500]();
}

uint64_t WebCore::IDBServer::IDBServer::abortOpenAndUpgradeNeeded()
{
  return MEMORY[0x1E0DD6508]();
}

uint64_t WebCore::IDBServer::IDBServer::didFireVersionChangeEvent()
{
  return MEMORY[0x1E0DD6510]();
}

uint64_t WebCore::IDBServer::IDBServer::databaseConnectionPendingClose()
{
  return MEMORY[0x1E0DD6518]();
}

uint64_t WebCore::IDBServer::IDBServer::getAllDatabaseNamesAndVersions()
{
  return MEMORY[0x1E0DD6520]();
}

uint64_t WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesModifiedSince()
{
  return MEMORY[0x1E0DD6528]();
}

uint64_t WebCore::IDBServer::IDBServer::didFinishHandlingVersionChangeTransaction()
{
  return MEMORY[0x1E0DD6530]();
}

uint64_t WebCore::IDBServer::IDBServer::getCount()
{
  return MEMORY[0x1E0DD6538]();
}

uint64_t WebCore::IDBServer::IDBServer::putOrAdd()
{
  return MEMORY[0x1E0DD6540]();
}

uint64_t WebCore::IDBServer::IDBServer::getRecord()
{
  return MEMORY[0x1E0DD6548]();
}

uint64_t WebCore::IDBServer::IDBServer::IDBServer()
{
  return MEMORY[0x1E0DD6550]();
}

uint64_t WebCore::JSCSSRule::toWrapped()
{
  return MEMORY[0x1E0DD65F0]();
}

uint64_t WebCore::JSElement::toWrapped()
{
  return MEMORY[0x1E0DD65F8]();
}

uint64_t WebCore::MediaList::appendMedium(WebCore::MediaList *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD6650](this, a2);
}

uint64_t WebCore::MediaList::deleteMedium(WebCore::MediaList *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD6658](this, a2);
}

uint64_t WebCore::MediaList::setMediaText(WebCore::MediaList *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD6660](this, a2);
}

void WebCore::MediaList::~MediaList(WebCore::MediaList *this)
{
  MEMORY[0x1E0DD6668](this);
}

uint64_t WebCore::PageGroup::ensureCaptionPreferences(WebCore::PageGroup *this)
{
  return MEMORY[0x1E0DD6678](this);
}

uint64_t WebCore::Scrollbar::maxOverlapBetweenPages(WebCore::Scrollbar *this)
{
  return MEMORY[0x1E0DD66B8](this);
}

uint64_t WebCore::TextEvent::initTextEvent()
{
  return MEMORY[0x1E0DD66C8]();
}

uint64_t WebCore::TimerBase::stopSlowCase(WebCore::TimerBase *this)
{
  return MEMORY[0x1E0DD66D0](this);
}

uint64_t WebCore::TimerBase::start()
{
  return MEMORY[0x1E0DD66D8]();
}

uint64_t WebCore::TimerBase::TimerBase(WebCore::TimerBase *this)
{
  return MEMORY[0x1E0DD66E0](this);
}

void WebCore::TimerBase::~TimerBase(WebCore::TimerBase *this)
{
  MEMORY[0x1E0DD66E8](this);
}

uint64_t WebCore::TreeScope::elementFromPoint()
{
  return MEMORY[0x1E0DD66F0]();
}

uint64_t WebCore::endOfWord()
{
  return MEMORY[0x1E0DD6710]();
}

uint64_t WebCore::plainText()
{
  return MEMORY[0x1E0DD6718]();
}

uint64_t WebCore::unionRect()
{
  return MEMORY[0x1E0DD6720]();
}

uint64_t WebCore::operator==()
{
  return MEMORY[0x1E0DD6728]();
}

uint64_t Inspector::RemoteInspector::startDisabled(Inspector::RemoteInspector *this)
{
  return MEMORY[0x1E0CC01F0](this);
}

uint64_t Inspector::RemoteInspector::setParentProcessInformation()
{
  return MEMORY[0x1E0CC0210]();
}

uint64_t Inspector::RemoteInspector::stop(Inspector::RemoteInspector *this)
{
  return MEMORY[0x1E0CC0218](this);
}

uint64_t Inspector::RemoteInspector::start(Inspector::RemoteInspector *this)
{
  return MEMORY[0x1E0CC0220](this);
}

uint64_t Inspector::RemoteInspector::singleton(Inspector::RemoteInspector *this)
{
  return MEMORY[0x1E0CC0238](this);
}

uint64_t JSC::JSRopeString::resolveRope()
{
  return MEMORY[0x1E0CC0A48]();
}

uint64_t JSC::DebuggerCallFrame::functionName()
{
  return MEMORY[0x1E0CC0A98]();
}

uint64_t JSC::DebuggerCallFrame::sourceID(JSC::DebuggerCallFrame *this)
{
  return MEMORY[0x1E0CC0AA0](this);
}

uint64_t JSC::VM::deprecatedVMEntryGlobalObject()
{
  return MEMORY[0x1E0CC0AD0]();
}

uint64_t JSC::Yarr::RegularExpression::matchedLength(JSC::Yarr::RegularExpression *this)
{
  return MEMORY[0x1E0CC0AD8](this);
}

uint64_t JSC::Yarr::RegularExpression::match()
{
  return MEMORY[0x1E0CC0AE0]();
}

uint64_t JSC::Yarr::RegularExpression::searchRev()
{
  return MEMORY[0x1E0CC0AF0]();
}

uint64_t JSC::JSValue::toWTFStringSlowCase()
{
  return MEMORY[0x1E0CC0B30]();
}

uint64_t PAL::TextEncoding::decode()
{
  return MEMORY[0x1E0DD6758]();
}

uint64_t PAL::TextEncoding::encode()
{
  return MEMORY[0x1E0DD6760]();
}

uint64_t WTF::StringImpl::hashSlowCase(WTF::StringImpl *this)
{
  return MEMORY[0x1E0CC0BA8](this);
}

uint64_t WTF::StringView::createCFString(WTF::StringView *this)
{
  return MEMORY[0x1E0CC0BE8](this);
}

uint64_t WTF::StringView::createNSString(WTF::StringView *this)
{
  return MEMORY[0x1E0CC0BF0](this);
}

uint64_t WTF::StringView::createCFStringWithoutCopying(WTF::StringView *this)
{
  return MEMORY[0x1E0CC0C50](this);
}

uint64_t WTF::StringView::createNSStringWithoutCopying(WTF::StringView *this)
{
  return MEMORY[0x1E0CC0C58](this);
}

uint64_t WTF::MonotonicTime::approximateWallTime(WTF::MonotonicTime *this)
{
  return MEMORY[0x1E0CC0CA0](this);
}

uint64_t WTF::StringBuilder::reifyString(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CC0CA8](this);
}

uint64_t WTF::TimeWithDynamicClockType::nowWithSameClock(WTF::TimeWithDynamicClockType *this)
{
  return MEMORY[0x1E0CC0CD0](this);
}

uint64_t WTF::TimeWithDynamicClockType::operator<()
{
  return MEMORY[0x1E0CC0CD8]();
}

uint64_t WTF::URL::protocolIs()
{
  return MEMORY[0x1E0CC0CE0]();
}

uint64_t WTF::URL::createCFURL(WTF::URL *this)
{
  return MEMORY[0x1E0CC0CE8](this);
}

uint64_t WTF::URL::stringCenterEllipsizedToLength(WTF::URL *this)
{
  return MEMORY[0x1E0CC0D70](this);
}

uint64_t WTF::URL::host(WTF::URL *this)
{
  return MEMORY[0x1E0CC0D98](this);
}

uint64_t WTF::URL::path(WTF::URL *this)
{
  return MEMORY[0x1E0CC0DA0](this);
}

uint64_t WTF::URL::port(WTF::URL *this)
{
  return MEMORY[0x1E0CC0DA8](this);
}

uint64_t WTF::URL::operator NSURL *()
{
  return MEMORY[0x1E0CC0DD8]();
}

uint64_t WTF::UUID::toString(WTF::UUID *this)
{
  return MEMORY[0x1E0CC0DE0](this);
}

uint64_t WTF::Logger::LogSiteIdentifier::toString(WTF::Logger::LogSiteIdentifier *this)
{
  return MEMORY[0x1E0CC0DF0](this);
}

uint64_t WTF::String::createCFString(WTF::String *this)
{
  return MEMORY[0x1E0CC0DF8](this);
}

uint64_t WTF::String::convertToASCIILowercase(WTF::String *this)
{
  return MEMORY[0x1E0CC0E18](this);
}

uint64_t WTF::String::utf8()
{
  return MEMORY[0x1E0CC0E60]();
}

uint64_t WebCore::Credential::isEmpty(WebCore::Credential *this)
{
  return MEMORY[0x1E0DD67F0](this);
}

uint64_t WebCore::FloatPoint::operator CGPoint()
{
  return MEMORY[0x1E0DD6808]();
}

uint64_t WebCore::FontRanges::glyphDataForCharacter()
{
  return MEMORY[0x1E0DD6810]();
}

uint64_t WebCore::FontRanges::Range::font()
{
  return MEMORY[0x1E0DD6818]();
}

uint64_t WebCore::IDBKeyData::isolatedCopy(WebCore::IDBKeyData *this)
{
  return MEMORY[0x1E0DD6820](this);
}

uint64_t WebCore::LocalFrame::updateLayout(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DD6828](this);
}

uint64_t WebCore::LocalFrame::contentRenderer(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DD6830](this);
}

uint64_t WebCore::LocalFrame::preferredHeight(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DD6838](this);
}

uint64_t WebCore::LocalFrame::renderRectForPoint(WebCore::LocalFrame *this, CGPoint a2, BOOL *a3, float *a4)
{
  return MEMORY[0x1E0DD6848](this, a3, a4, (__n128)a2, *(__n128 *)&a2.y);
}

uint64_t WebCore::LocalFrame::rangedSelectionBase(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DD6850](this);
}

uint64_t WebCore::LocalFrame::visiblePositionForPoint(WebCore::LocalFrame *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1E0DD6858](this, a2);
}

uint64_t WebCore::LocalFrame::wordsInCurrentParagraph(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DD6860](this);
}

uint64_t WebCore::LocalFrame::rangedSelectionInitialExtent(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DD6868](this);
}

uint64_t WebCore::LocalFrame::interpretationsForCurrentRoot(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DD6870](this);
}

uint64_t WebCore::LocalFrame::displayStringModifiedByEncoding(WebCore::LocalFrame *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD6878](this, a2);
}

uint64_t WebCore::PluginData::supportsWebVisibleMimeType()
{
  return MEMORY[0x1E0DD6898]();
}

uint64_t WebCore::RenderText::textNode(WebCore::RenderText *this)
{
  return MEMORY[0x1E0DD68A8](this);
}

uint64_t WebCore::RenderView::documentRect(WebCore::RenderView *this)
{
  return MEMORY[0x1E0DD68B0](this);
}

uint64_t WebCore::ScrollView::layoutSize(WebCore::ScrollView *this)
{
  return MEMORY[0x1E0DD68C8](this);
}

uint64_t WebCore::ScrollView::documentView(WebCore::ScrollView *this)
{
  return MEMORY[0x1E0DD68D8](this);
}

uint64_t WebCore::ScrollView::useFixedLayout(WebCore::ScrollView *this)
{
  return MEMORY[0x1E0DD68E8](this);
}

uint64_t WebCore::ScrollView::fixedLayoutSize(WebCore::ScrollView *this)
{
  return MEMORY[0x1E0DD68F0](this);
}

uint64_t WebCore::ScrollView::contentsToWindow()
{
  return MEMORY[0x1E0DD6900]();
}

uint64_t WebCore::ScrollView::windowToContents(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1E0DD6918](this, a2);
}

uint64_t WebCore::StorageMap::length(WebCore::StorageMap *this)
{
  return MEMORY[0x1E0DD6988](this);
}

uint64_t WebCore::StorageMap::getItem(WebCore::StorageMap *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD6990](this, a2);
}

uint64_t WebCore::StorageMap::contains(WebCore::StorageMap *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD6998](this, a2);
}

uint64_t WebCore::TimeRanges::end(WebCore::TimeRanges *this)
{
  return MEMORY[0x1E0DD69A0](this);
}

uint64_t WebCore::TimeRanges::start(WebCore::TimeRanges *this)
{
  return MEMORY[0x1E0DD69A8](this);
}

uint64_t WebCore::TimeRanges::length(WebCore::TimeRanges *this)
{
  return MEMORY[0x1E0DD69B0](this);
}

uint64_t WebCore::CSSPageRule::selectorText(WebCore::CSSPageRule *this)
{
  return MEMORY[0x1E0DD69B8](this);
}

uint64_t WebCore::CachedImage::image(WebCore::CachedImage *this)
{
  return MEMORY[0x1E0DD69C8](this);
}

uint64_t WebCore::FontCascade::protectedFonts(WebCore::FontCascade *this)
{
  return MEMORY[0x1E0DD6C40](this);
}

uint64_t WebCore::FrameLoader::frameHasLoaded(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DD6C50](this);
}

uint64_t WebCore::FrameLoader::networkingContext(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DD6C58](this);
}

uint64_t WebCore::FrameLoader::frame(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DD6C78](this);
}

uint64_t WebCore::FrameLoader::loadType(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DD6C88](this);
}

uint64_t WebCore::Geolocation::frame(WebCore::Geolocation *this)
{
  return MEMORY[0x1E0DD6C90](this);
}

uint64_t WebCore::HTMLElement::spellcheck(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DD6C98](this);
}

uint64_t WebCore::HTMLElement::autocapitalize(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DD6CA0](this);
}

uint64_t WebCore::HTMLElement::contentEditable(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DD6CA8](this);
}

uint64_t WebCore::HTMLElement::dir(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DD6CC0](this);
}

uint64_t WebCore::HTMLElement::title(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DD6CC8](this);
}

uint64_t WebCore::HTMLElement::translate(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DD6CD0](this);
}

uint64_t WebCore::HistoryItem::isTargetItem(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6CD8](this);
}

uint64_t WebCore::HistoryItem::alternateTitle(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6CE8](this);
}

uint64_t WebCore::HistoryItem::scrollPosition(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6CF0](this);
}

uint64_t WebCore::HistoryItem::originalURLString(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D08](this);
}

uint64_t WebCore::HistoryItem::hasCachedPageExpired(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D10](this);
}

uint64_t WebCore::HistoryItem::url(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D28](this);
}

uint64_t WebCore::HistoryItem::copy(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D30](this);
}

uint64_t WebCore::HistoryItem::title(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D38](this);
}

uint64_t WebCore::HistoryItem::target(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D40](this);
}

uint64_t WebCore::HistoryItem::children(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D48](this);
}

uint64_t WebCore::HistoryItem::referrer(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D50](this);
}

uint64_t WebCore::HistoryItem::urlString(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D58](this);
}

uint64_t WebCore::HistoryItem::viewState(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DD6D60](this);
}

uint64_t WebCore::NativeImage::platformImage(WebCore::NativeImage *this)
{
  return MEMORY[0x1E0DD6F98](this);
}

uint64_t WebCore::RenderLayer::scrollableArea(WebCore::RenderLayer *this)
{
  return MEMORY[0x1E0DD6FB0](this);
}

uint64_t WebCore::RenderStyle::fontCascade(WebCore::RenderStyle *this)
{
  return MEMORY[0x1E0DD6FC8](this);
}

uint64_t WebCore::RenderStyle::scrollbarWidth(WebCore::RenderStyle *this)
{
  return MEMORY[0x1E0DD6FD0](this);
}

uint64_t WebCore::RenderStyle::fontDescription(WebCore::RenderStyle *this)
{
  return MEMORY[0x1E0DD6FE0](this);
}

uint64_t WebCore::RenderStyle::computedLineHeight(WebCore::RenderStyle *this)
{
  return MEMORY[0x1E0DD6FF0](this);
}

uint64_t WebCore::RenderStyle::visitedDependentColorWithColorFilter()
{
  return MEMORY[0x1E0DD7008]();
}

uint64_t WebCore::WindowProxy::window(WebCore::WindowProxy *this)
{
  return MEMORY[0x1E0DD7060](this);
}

uint64_t WebCore::XPathResult::resultType(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DD7068](this);
}

uint64_t WebCore::XPathResult::numberValue(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DD7070](this);
}

uint64_t WebCore::XPathResult::stringValue(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DD7078](this);
}

uint64_t WebCore::XPathResult::BOOLeanValue(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DD7080](this);
}

uint64_t WebCore::XPathResult::snapshotLength(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DD7088](this);
}

uint64_t WebCore::XPathResult::singleNodeValue(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DD7090](this);
}

uint64_t WebCore::XPathResult::invalidIteratorState(WebCore::XPathResult *this)
{
  return MEMORY[0x1E0DD7098](this);
}

uint64_t WebCore::CSSMediaRule::media(WebCore::CSSMediaRule *this)
{
  return MEMORY[0x1E0DD70A8](this);
}

uint64_t WebCore::CSSStyleRule::selectorText(WebCore::CSSStyleRule *this)
{
  return MEMORY[0x1E0DD70B0](this);
}

uint64_t WebCore::DOMTokenList::value(WebCore::DOMTokenList *this)
{
  return MEMORY[0x1E0DD70B8](this);
}

uint64_t WebCore::DOMTokenList::contains()
{
  return MEMORY[0x1E0DD70C0]();
}

uint64_t WebCore::EventHandler::hitTestResultAtPoint()
{
  return MEMORY[0x1E0DD70C8]();
}

uint64_t WebCore::EventHandler::capsLockStateMayHaveChanged(WebCore::EventHandler *this)
{
  return MEMORY[0x1E0DD70D0](this);
}

uint64_t WebCore::NamedNodeMap::getNamedItem()
{
  return MEMORY[0x1E0DD70D8]();
}

uint64_t WebCore::NamedNodeMap::getNamedItemNS()
{
  return MEMORY[0x1E0DD70E0]();
}

uint64_t WebCore::NamedNodeMap::item(WebCore::NamedNodeMap *this)
{
  return MEMORY[0x1E0DD70E8](this);
}

uint64_t WebCore::NamedNodeMap::length(WebCore::NamedNodeMap *this)
{
  return MEMORY[0x1E0DD70F0](this);
}

uint64_t WebCore::RenderObject::enclosingLayer(WebCore::RenderObject *this)
{
  return MEMORY[0x1E0DD70F8](this);
}

uint64_t WebCore::RenderObject::containingBlock(WebCore::RenderObject *this)
{
  return MEMORY[0x1E0DD7100](this);
}

uint64_t WebCore::RenderObject::localToAbsolute()
{
  return MEMORY[0x1E0DD7108]();
}

uint64_t WebCore::RenderObject::absoluteBoundingBoxRect(WebCore::RenderObject *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1E0DD7130](this, a2, a3);
}

uint64_t WebCore::RenderObject::pixelSnappedAbsoluteClippedOverflowRect(WebCore::RenderObject *this)
{
  return MEMORY[0x1E0DD7138](this);
}

uint64_t WebCore::SharedBuffer::createNSData(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1E0DD7168](this);
}

uint64_t WebCore::SharedBuffer::data(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1E0DD7170](this);
}

uint64_t WebCore::TextIterator::node(WebCore::TextIterator *this)
{
  return MEMORY[0x1E0DD7180](this);
}

uint64_t WebCore::TextIterator::range(WebCore::TextIterator *this)
{
  return MEMORY[0x1E0DD7188](this);
}

uint64_t WebCore::CSSImportRule::styleSheet(WebCore::CSSImportRule *this)
{
  return MEMORY[0x1E0DD7198](this);
}

uint64_t WebCore::CSSImportRule::href(WebCore::CSSImportRule *this)
{
  return MEMORY[0x1E0DD71A0](this);
}

uint64_t WebCore::CSSImportRule::media(WebCore::CSSImportRule *this)
{
  return MEMORY[0x1E0DD71A8](this);
}

uint64_t WebCore::CSSStyleSheet::ownerRule(WebCore::CSSStyleSheet *this)
{
  return MEMORY[0x1E0DD71B0](this);
}

uint64_t WebCore::CharacterData::substringData(WebCore::CharacterData *this)
{
  return MEMORY[0x1E0DD71B8](this);
}

uint64_t WebCore::ContainerNode::countChildNodes(WebCore::ContainerNode *this)
{
  return MEMORY[0x1E0DD71C0](this);
}

uint64_t WebCore::ContainerNode::lastElementChild(WebCore::ContainerNode *this)
{
  return MEMORY[0x1E0DD71C8](this);
}

uint64_t WebCore::ContainerNode::childElementCount(WebCore::ContainerNode *this)
{
  return MEMORY[0x1E0DD71D0](this);
}

uint64_t WebCore::ContainerNode::firstElementChild(WebCore::ContainerNode *this)
{
  return MEMORY[0x1E0DD71D8](this);
}

uint64_t WebCore::ContainerNode::traverseToChildAt(WebCore::ContainerNode *this)
{
  return MEMORY[0x1E0DD71E0](this);
}

uint64_t WebCore::HitTestResult::isSelected(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7200](this);
}

uint64_t WebCore::HitTestResult::targetFrame(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7208](this);
}

uint64_t WebCore::HitTestResult::textContent(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7210](this);
}

uint64_t WebCore::HitTestResult::innerNodeFrame(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7240](this);
}

uint64_t WebCore::HitTestResult::absoluteLinkURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7248](this);
}

uint64_t WebCore::HitTestResult::spellingToolTip()
{
  return MEMORY[0x1E0DD7258]();
}

uint64_t WebCore::HitTestResult::absoluteImageURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7260](this);
}

uint64_t WebCore::HitTestResult::absoluteMediaURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7268](this);
}

uint64_t WebCore::HitTestResult::altDisplayString(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7270](this);
}

uint64_t WebCore::HitTestResult::isContentEditable(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7278](this);
}

uint64_t WebCore::HitTestResult::titleDisplayString(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DD7280](this);
}

uint64_t WebCore::HitTestResult::title()
{
  return MEMORY[0x1E0DD72C8]();
}

uint64_t WebCore::IDBCursorInfo::isolatedCopy(WebCore::IDBCursorInfo *this)
{
  return MEMORY[0x1E0DD72D8](this);
}

uint64_t WebCore::IDBResultData::isolatedCopy(WebCore::IDBResultData *this)
{
  return MEMORY[0x1E0DD72E8](this);
}

uint64_t WebCore::KeyboardEvent::keyCode(WebCore::KeyboardEvent *this)
{
  return MEMORY[0x1E0DD7300](this);
}

uint64_t WebCore::KeyboardEvent::charCode(WebCore::KeyboardEvent *this)
{
  return MEMORY[0x1E0DD7308](this);
}

uint64_t WebCore::ResourceError::operator NSError *()
{
  return MEMORY[0x1E0DD7360]();
}

uint64_t WebCore::ScriptElement::scriptContent(WebCore::ScriptElement *this)
{
  return MEMORY[0x1E0DD7368](this);
}

uint64_t WebCore::CachedResource::response(WebCore::CachedResource *this)
{
  return MEMORY[0x1E0DD7398](this);
}

uint64_t WebCore::CredentialBase::user(WebCore::CredentialBase *this)
{
  return MEMORY[0x1E0DD73B0](this);
}

uint64_t WebCore::CredentialBase::password(WebCore::CredentialBase *this)
{
  return MEMORY[0x1E0DD73B8](this);
}

uint64_t WebCore::DocumentLoader::frameLoader(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD73C0](this);
}

uint64_t WebCore::DocumentLoader::subresource(WebCore::DocumentLoader *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD73C8](this, a2);
}

uint64_t WebCore::DocumentLoader::mainResource(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD73D0](this);
}

uint64_t WebCore::DocumentLoader::subresources(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD73D8](this);
}

uint64_t WebCore::DocumentLoader::urlForHistory(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD73E0](this);
}

uint64_t WebCore::DocumentLoader::mainResourceData(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD73E8](this);
}

uint64_t WebCore::DocumentLoader::parsedArchiveData(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD73F8](this);
}

uint64_t WebCore::DocumentLoader::mainResourceLoader(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD7400](this);
}

uint64_t WebCore::DocumentLoader::isLoadingInAPISense(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD7408](this);
}

uint64_t WebCore::DocumentLoader::archiveResourceForURL(WebCore::DocumentLoader *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD7410](this, a2);
}

uint64_t WebCore::DocumentLoader::urlForHistoryReflectsFailure(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DD7418](this);
}

uint64_t WebCore::FontAttributes::createDictionary(WebCore::FontAttributes *this)
{
  return MEMORY[0x1E0DD7420](this);
}

uint64_t WebCore::FrameSelection::currentForm(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7428](this);
}

uint64_t WebCore::FrameSelection::copyTypingStyle(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7430](this);
}

uint64_t WebCore::FrameSelection::selectionAtWordStart(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7438](this);
}

uint64_t WebCore::FrameSelection::selectionAtSentenceStart(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7440](this);
}

uint64_t WebCore::FrameSelection::rangeByMovingCurrentSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7448](this);
}

uint64_t WebCore::FrameSelection::getClippedVisibleTextRectangles()
{
  return MEMORY[0x1E0DD7450]();
}

uint64_t WebCore::FrameSelection::rangeByExtendingCurrentSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7458](this);
}

uint64_t WebCore::FrameSelection::characterInRelationToCaretSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7460](this);
}

uint64_t WebCore::FrameSelection::elementRangeContainingCaretSelection(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7468](this);
}

uint64_t WebCore::FrameSelection::rootEditableElementOrDocumentElement(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DD7470](this);
}

uint64_t WebCore::IDBRequestData::isolatedCopy(WebCore::IDBRequestData *this)
{
  return MEMORY[0x1E0DD7480](this);
}

uint64_t WebCore::LocalDOMWindow::getComputedStyle(WebCore::LocalDOMWindow *this, WebCore::Element *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD7490](this, a2, a3);
}

uint64_t WebCore::LocalDOMWindow::getMatchedCSSRules(WebCore::LocalDOMWindow *this, WebCore::Element *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD7498](this, a2, a3);
}

uint64_t WebCore::LocalDOMWindow::pendingUnloadEventListeners(WebCore::LocalDOMWindow *this)
{
  return MEMORY[0x1E0DD74A0](this);
}

uint64_t WebCore::LocalDOMWindow::frame(WebCore::LocalDOMWindow *this)
{
  return MEMORY[0x1E0DD74A8](this);
}

uint64_t WebCore::LocalFrameView::needsLayout(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD74B8](this);
}

uint64_t WebCore::LocalFrameView::paintBehavior(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD74C0](this);
}

uint64_t WebCore::LocalFrameView::isSoftwareRenderable(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD7500](this);
}

uint64_t WebCore::ResourceHandle::connection(WebCore::ResourceHandle *this)
{
  return MEMORY[0x1E0DD7568](this);
}

uint64_t WebCore::ResourceLoader::frameLoader(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1E0DD7570](this);
}

uint64_t WebCore::ScrollableArea::scrollOffset(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1E0DD75B0](this);
}

uint64_t WebCore::SecurityOrigin::canDisplay()
{
  return MEMORY[0x1E0DD7618]();
}

uint64_t WebCore::SecurityOrigin::isolatedCopy(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1E0DD7638](this);
}

uint64_t WebCore::SecurityOrigin::isSameOriginAs(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  return MEMORY[0x1E0DD7640](this, a2);
}

uint64_t WebCore::SecurityOrigin::equal(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  return MEMORY[0x1E0DD7658](this, a2);
}

uint64_t WebCore::SecurityOrigin::toURL(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1E0DD7660](this);
}

uint64_t WebCore::SecurityOrigin::toString(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1E0DD7668](this);
}

uint64_t WebCore::StyleSheetList::length(WebCore::StyleSheetList *this)
{
  return MEMORY[0x1E0DD7670](this);
}

uint64_t WebCore::CSSGroupingRule::cssRules(WebCore::CSSGroupingRule *this)
{
  return MEMORY[0x1E0DD76C8](this);
}

uint64_t WebCore::FocusController::focusedOrMainFrame(WebCore::FocusController *this)
{
  return MEMORY[0x1E0DD76D8](this);
}

uint64_t WebCore::HTMLAreaElement::computeRect(WebCore::HTMLAreaElement *this, WebCore::RenderObject *a2)
{
  return MEMORY[0x1E0DD7700](this, a2);
}

uint64_t WebCore::HTMLBaseElement::href(WebCore::HTMLBaseElement *this)
{
  return MEMORY[0x1E0DD7710](this);
}

uint64_t WebCore::HTMLFormElement::autocomplete(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1E0DD7718](this);
}

uint64_t WebCore::HTMLFormElement::unsafeListedElements(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1E0DD7720](this);
}

uint64_t WebCore::HTMLFormElement::length(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1E0DD7728](this);
}

uint64_t WebCore::HTMLFormElement::method(WebCore::HTMLFormElement *this)
{
  return MEMORY[0x1E0DD7730](this);
}

uint64_t WebCore::HTMLLinkElement::crossOrigin(WebCore::HTMLLinkElement *this)
{
  return MEMORY[0x1E0DD7738](this);
}

uint64_t WebCore::HTMLLinkElement::mediaAttributeMatches(WebCore::HTMLLinkElement *this)
{
  return MEMORY[0x1E0DD7740](this);
}

uint64_t WebCore::IDBKeyRangeData::isolatedCopy(WebCore::IDBKeyRangeData *this)
{
  return MEMORY[0x1E0DD7760](this);
}

uint64_t WebCore::JSDOMWindowBase::wrapped(WebCore::JSDOMWindowBase *this)
{
  return MEMORY[0x1E0DD7768](this);
}

uint64_t WebCore::ProtectionSpace::nsSpace(WebCore::ProtectionSpace *this)
{
  return MEMORY[0x1E0DD77A0](this);
}

uint64_t WebCore::ResourceRequest::nsURLRequest()
{
  return MEMORY[0x1E0DD77A8]();
}

uint64_t WebCore::SecurityContext::securityOrigin(WebCore::SecurityContext *this)
{
  return MEMORY[0x1E0DD77C0](this);
}

uint64_t WebCore::StyleProperties::mutableCopy(WebCore::StyleProperties *this)
{
  return MEMORY[0x1E0DD77E0](this);
}

uint64_t WebCore::VisiblePosition::characterAfter(WebCore::VisiblePosition *this)
{
  return MEMORY[0x1E0DD77F8](this);
}

uint64_t WebCore::VisiblePosition::absoluteCaretBounds(WebCore::VisiblePosition *this, BOOL *a2)
{
  return MEMORY[0x1E0DD7800](this, a2);
}

uint64_t WebCore::VisiblePosition::lineDirectionPointForBlockDirectionNavigation(WebCore::VisiblePosition *this)
{
  return MEMORY[0x1E0DD7810](this);
}

uint64_t WebCore::VisiblePosition::left(WebCore::VisiblePosition *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1E0DD7818](this, a2, a3);
}

uint64_t WebCore::VisiblePosition::next()
{
  return MEMORY[0x1E0DD7820]();
}

uint64_t WebCore::VisiblePosition::right(WebCore::VisiblePosition *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1E0DD7828](this, a2, a3);
}

uint64_t WebCore::VisiblePosition::previous()
{
  return MEMORY[0x1E0DD7830]();
}

uint64_t WebCore::BackForwardCache::frameCount(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1E0DD7848](this);
}

uint64_t WebCore::DocumentFragment::getElementById()
{
  return MEMORY[0x1E0DD7860]();
}

uint64_t WebCore::FileReaderLoader::arrayBufferResult(WebCore::FileReaderLoader *this)
{
  return MEMORY[0x1E0DD7868](this);
}

uint64_t WebCore::HTMLImageElement::cachedImage(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD7880](this);
}

uint64_t WebCore::HTMLImageElement::crossOrigin(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD7888](this);
}

uint64_t WebCore::HTMLImageElement::naturalWidth(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD7890](this);
}

uint64_t WebCore::HTMLImageElement::naturalHeight(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD7898](this);
}

uint64_t WebCore::HTMLImageElement::x(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD78A0](this);
}

uint64_t WebCore::HTMLImageElement::y(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD78A8](this);
}

uint64_t WebCore::HTMLImageElement::alt(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD78B0](this);
}

uint64_t WebCore::HTMLImageElement::complete(WebCore::HTMLImageElement *this)
{
  return MEMORY[0x1E0DD78B8](this);
}

uint64_t WebCore::HTMLInputElement::isTextField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD78D0](this);
}

uint64_t WebCore::HTMLInputElement::valueAsDate(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD78E8](this);
}

uint64_t WebCore::HTMLInputElement::defaultValue(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD78F0](this);
}

uint64_t WebCore::HTMLInputElement::valueAsNumber(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7928](this);
}

uint64_t WebCore::HTMLInputElement::isPasswordField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7938](this);
}

uint64_t WebCore::HTMLInputElement::validationMessage(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7950](this);
}

uint64_t WebCore::HTMLInputElement::shouldAutocomplete(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7958](this);
}

uint64_t WebCore::HTMLInputElement::alt(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7978](this);
}

uint64_t WebCore::HTMLInputElement::list(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7980](this);
}

uint64_t WebCore::HTMLInputElement::value(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7988](this);
}

uint64_t WebCore::HTMLInputElement::width(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7990](this);
}

uint64_t WebCore::HTMLInputElement::height(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD7998](this);
}

uint64_t WebCore::HTMLInputElement::isText(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD79A0](this);
}

uint64_t WebCore::HTMLLabelElement::form(WebCore::HTMLLabelElement *this)
{
  return MEMORY[0x1E0DD79B0](this);
}

uint64_t WebCore::HTMLLabelElement::control(WebCore::HTMLLabelElement *this)
{
  return MEMORY[0x1E0DD79B8](this);
}

uint64_t WebCore::HTMLMediaElement::canPlayType(WebCore::HTMLMediaElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD79C0](this, a2);
}

uint64_t WebCore::HTMLMediaElement::crossOrigin(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD79C8](this);
}

uint64_t WebCore::HTMLMediaElement::getStartDate(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD79D0](this);
}

uint64_t WebCore::HTMLMediaElement::networkState(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD79D8](this);
}

uint64_t WebCore::HTMLMediaElement::preservesPitch(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD79E0](this);
}

uint64_t WebCore::HTMLMediaElement::ended(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD7A00](this);
}

uint64_t WebCore::HTMLMediaElement::error(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD7A08](this);
}

uint64_t WebCore::HTMLMediaElement::preload(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD7A18](this);
}

uint64_t WebCore::HTMLMediaElement::seeking(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD7A20](this);
}

uint64_t WebCore::HTMLMediaElement::controls(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD7A28](this);
}

uint64_t WebCore::HTMLStyleElement::disabled(WebCore::HTMLStyleElement *this)
{
  return MEMORY[0x1E0DD7A30](this);
}

uint64_t WebCore::HTMLTableElement::tFoot(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD7A38](this);
}

uint64_t WebCore::HTMLTableElement::tHead(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD7A40](this);
}

uint64_t WebCore::HTMLTableElement::caption(WebCore::HTMLTableElement *this)
{
  return MEMORY[0x1E0DD7A48](this);
}

uint64_t WebCore::HTMLTitleElement::text(WebCore::HTMLTitleElement *this)
{
  return MEMORY[0x1E0DD7A50](this);
}

uint64_t WebCore::HTMLVideoElement::videoWidth(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD7A58](this);
}

uint64_t WebCore::HTMLVideoElement::videoHeight(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD7A60](this);
}

uint64_t WebCore::IDBGetRecordData::isolatedCopy(WebCore::IDBGetRecordData *this)
{
  return MEMORY[0x1E0DD7A70](this);
}

uint64_t WebCore::ResourceResponse::nsURLResponse(WebCore::ResourceResponse *this)
{
  return MEMORY[0x1E0DD7A80](this);
}

uint64_t WebCore::URLDecomposition::hash(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1E0DD7AB8](this);
}

uint64_t WebCore::URLDecomposition::host(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1E0DD7AC0](this);
}

uint64_t WebCore::URLDecomposition::port(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1E0DD7AC8](this);
}

uint64_t WebCore::URLDecomposition::search(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1E0DD7AD0](this);
}

uint64_t WebCore::URLDecomposition::hostname(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1E0DD7AD8](this);
}

uint64_t WebCore::URLDecomposition::pathname(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1E0DD7AE0](this);
}

uint64_t WebCore::URLDecomposition::protocol(WebCore::URLDecomposition *this)
{
  return MEMORY[0x1E0DD7AE8](this);
}

uint64_t WebCore::VisibleSelection::isContentEditable(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1E0DD7B18](this);
}

uint64_t WebCore::VisibleSelection::toNormalizedRange(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1E0DD7B28](this);
}

uint64_t WebCore::VisibleSelection::rootEditableElement(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1E0DD7B30](this);
}

uint64_t WebCore::VisibleSelection::isContentRichlyEditable(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1E0DD7B38](this);
}

uint64_t WebCore::VisibleSelection::isAll()
{
  return MEMORY[0x1E0DD7B50]();
}

uint64_t WebCore::FullscreenManager::fullscreenElement(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD7B68](this);
}

uint64_t WebCore::FullscreenManager::isFullscreenEnabled(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD7B70](this);
}

uint64_t WebCore::HTMLAnchorElement::origin(WebCore::HTMLAnchorElement *this)
{
  return MEMORY[0x1E0DD7B88](this);
}

uint64_t WebCore::HTMLLegendElement::form(WebCore::HTMLLegendElement *this)
{
  return MEMORY[0x1E0DD7B90](this);
}

uint64_t WebCore::HTMLOptionElement::form(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1E0DD7BB0](this);
}

uint64_t WebCore::HTMLOptionElement::text(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1E0DD7BB8](this);
}

uint64_t WebCore::HTMLOptionElement::index(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1E0DD7BC0](this);
}

uint64_t WebCore::HTMLOptionElement::label(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1E0DD7BC8](this);
}

uint64_t WebCore::HTMLOptionElement::value(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1E0DD7BD0](this);
}

uint64_t WebCore::HTMLOptionElement::selected()
{
  return MEMORY[0x1E0DD7BD8]();
}

uint64_t WebCore::HTMLScriptElement::crossOrigin(WebCore::HTMLScriptElement *this)
{
  return MEMORY[0x1E0DD7BE0](this);
}

uint64_t WebCore::HTMLScriptElement::async(WebCore::HTMLScriptElement *this)
{
  return MEMORY[0x1E0DD7BE8](this);
}

uint64_t WebCore::HTMLSelectElement::selectedIndex(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD7BF0](this);
}

uint64_t WebCore::HTMLSelectElement::value(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD7BF8](this);
}

uint64_t WebCore::HTMLSelectElement::length(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD7C00](this);
}

uint64_t WebCore::HTMLSelectElement::listItems(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD7C08](this);
}

uint64_t WebCore::RenderTextControl::textFormControlElement(WebCore::RenderTextControl *this)
{
  return MEMORY[0x1E0DD7C38](this);
}

uint64_t WebCore::ResourceErrorBase::lazyInit(WebCore::ResourceErrorBase *this)
{
  return MEMORY[0x1E0DD7C48](this);
}

uint64_t WebCore::SelectionGeometry::rect(WebCore::SelectionGeometry *this)
{
  return MEMORY[0x1E0DD7C60](this);
}

uint64_t WebCore::HTMLMarqueeElement::scrollDelay(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1E0DD7C78](this);
}

uint64_t WebCore::HTMLMarqueeElement::scrollAmount(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1E0DD7C80](this);
}

uint64_t WebCore::HTMLMarqueeElement::loop(WebCore::HTMLMarqueeElement *this)
{
  return MEMORY[0x1E0DD7C88](this);
}

uint64_t WebCore::IDBOpenRequestData::isolatedCopy(WebCore::IDBOpenRequestData *this)
{
  return MEMORY[0x1E0DD7C90](this);
}

uint64_t WebCore::IDBTransactionInfo::isolatedCopy(WebCore::IDBTransactionInfo *this)
{
  return MEMORY[0x1E0DD7C98](this);
}

uint64_t WebCore::PlatformPasteboard::readBuffer()
{
  return MEMORY[0x1E0DD7CE8]();
}

uint64_t WebCore::PlatformPasteboard::readString(WebCore::PlatformPasteboard *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD7CF0](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::changeCount(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD7CF8](this);
}

uint64_t WebCore::PlatformPasteboard::bufferForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD7D00](this, a2);
}

uint64_t WebCore::PlatformPasteboard::numberOfFiles(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD7D08](this);
}

uint64_t WebCore::PlatformPasteboard::stringForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD7D10](this, a2);
}

uint64_t WebCore::PlatformPasteboard::allStringsForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD7D18](this, a2);
}

uint64_t WebCore::PlatformPasteboard::getPathnamesForType()
{
  return MEMORY[0x1E0DD7D20]();
}

uint64_t WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD7D28](this, a2);
}

uint64_t WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD7D30](this, a2);
}

uint64_t WebCore::PlatformPasteboard::count(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD7D38](this);
}

uint64_t WebCore::PlatformPasteboard::readURL(WebCore::PlatformPasteboard *this, uint64_t a2, WTF::String *a3)
{
  return MEMORY[0x1E0DD7D40](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::getTypes()
{
  return MEMORY[0x1E0DD7D48]();
}

uint64_t WebCore::SecurityOriginData::securityOrigin(WebCore::SecurityOriginData *this)
{
  return MEMORY[0x1E0DD7D88](this);
}

uint64_t WebCore::SecurityOriginData::databaseIdentifier(WebCore::SecurityOriginData *this)
{
  return MEMORY[0x1E0DD7D90](this);
}

uint64_t WebCore::WebSocketHandshake::failureReason(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7DB8](this);
}

uint64_t WebCore::WebSocketHandshake::serverSetCookie(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7DC0](this);
}

uint64_t WebCore::WebSocketHandshake::acceptedExtensions(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7DC8](this);
}

uint64_t WebCore::WebSocketHandshake::clientHandshakeMessage(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7DD0](this);
}

uint64_t WebCore::WebSocketHandshake::clientHandshakeRequest()
{
  return MEMORY[0x1E0DD7DD8]();
}

uint64_t WebCore::WebSocketHandshake::serverHandshakeResponse(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7DE0](this);
}

uint64_t WebCore::WebSocketHandshake::serverWebSocketProtocol(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7DE8](this);
}

uint64_t WebCore::WebSocketHandshake::httpURLForAuthenticationAndCookies(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7DF0](this);
}

uint64_t WebCore::WebSocketHandshake::url(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7DF8](this);
}

uint64_t WebCore::WebSocketHandshake::mode(WebCore::WebSocketHandshake *this)
{
  return MEMORY[0x1E0DD7E00](this);
}

uint64_t WebCore::DragCaretController::isContentRichlyEditable(WebCore::DragCaretController *this)
{
  return MEMORY[0x1E0DD7E08](this);
}

uint64_t WebCore::DragCaretController::caretRectInRootViewCoordinates(WebCore::DragCaretController *this)
{
  return MEMORY[0x1E0DD7E10](this);
}

uint64_t WebCore::HTMLTableRowElement::sectionRowIndex(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1E0DD7E30](this);
}

uint64_t WebCore::HTMLTableRowElement::rowIndex(WebCore::HTMLTableRowElement *this)
{
  return MEMORY[0x1E0DD7E38](this);
}

uint64_t WebCore::HTMLTextAreaElement::defaultValue(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1E0DD7E40](this);
}

uint64_t WebCore::HTMLTextAreaElement::value(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1E0DD7E48](this);
}

uint64_t WebCore::InspectorController::getHighlight()
{
  return MEMORY[0x1E0DD7E70]();
}

uint64_t WebCore::ResourceRequestBase::httpMethod(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD7EB8](this);
}

uint64_t WebCore::ResourceRequestBase::httpReferrer(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD7ED8](this);
}

uint64_t WebCore::ResourceRequestBase::url(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD7F38](this);
}

uint64_t WebCore::ResourceRequestBase::isNull(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD7F40](this);
}

uint64_t WebCore::ResourceRequestBase::priority(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD7F58](this);
}

uint64_t WebCore::UIEventWithKeyState::getModifierState(WebCore::UIEventWithKeyState *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD7F98](this, a2);
}

uint64_t WebCore::DeprecatedCSSOMValue::cssValueType(WebCore::DeprecatedCSSOMValue *this)
{
  return MEMORY[0x1E0DD7FB0](this);
}

uint64_t WebCore::DeprecatedCSSOMValue::cssText(WebCore::DeprecatedCSSOMValue *this)
{
  return MEMORY[0x1E0DD7FB8](this);
}

uint64_t WebCore::HTMLTableCellElement::rowSpanForBindings(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1E0DD7FD0](this);
}

uint64_t WebCore::HTMLTableCellElement::scope(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1E0DD7FD8](this);
}

uint64_t WebCore::HTMLTableCellElement::colSpan(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1E0DD7FE0](this);
}

uint64_t WebCore::HTMLTableCellElement::cellAbove(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1E0DD7FE8](this);
}

uint64_t WebCore::HTMLTableCellElement::cellIndex(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1E0DD7FF0](this);
}

uint64_t WebCore::IDBGetAllRecordsData::isolatedCopy(WebCore::IDBGetAllRecordsData *this)
{
  return MEMORY[0x1E0DD7FF8](this);
}

uint64_t WebCore::IDBIterateCursorData::isolatedCopy(WebCore::IDBIterateCursorData *this)
{
  return MEMORY[0x1E0DD8000](this);
}

uint64_t WebCore::RenderBoxModelObject::inlineContinuation(WebCore::RenderBoxModelObject *this)
{
  return MEMORY[0x1E0DD8018](this);
}

uint64_t WebCore::ResourceResponseBase::suggestedFilename(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1E0DD8068](this);
}

uint64_t WebCore::ResourceResponseBase::url(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1E0DD80B8](this);
}

uint64_t WebCore::ResourceResponseBase::mimeType(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1E0DD80D8](this);
}

uint64_t WebCore::BackForwardController::forwardCount(WebCore::BackForwardController *this)
{
  return MEMORY[0x1E0DD8148](this);
}

uint64_t WebCore::BackForwardController::canGoBackOrForward(WebCore::BackForwardController *this)
{
  return MEMORY[0x1E0DD8150](this);
}

uint64_t WebCore::BackForwardController::backCount(WebCore::BackForwardController *this)
{
  return MEMORY[0x1E0DD8158](this);
}

uint64_t WebCore::HTMLFrameOwnerElement::contentWindow(WebCore::HTMLFrameOwnerElement *this)
{
  return MEMORY[0x1E0DD81C0](this);
}

uint64_t WebCore::HTMLFrameOwnerElement::contentDocument(WebCore::HTMLFrameOwnerElement *this)
{
  return MEMORY[0x1E0DD81C8](this);
}

uint64_t WebCore::HTMLOptionsCollection::selectedIndex(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1E0DD81D0](this);
}

uint64_t WebCore::HTMLOptionsCollection::item(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1E0DD81D8](this);
}

uint64_t WebCore::HTMLOptionsCollection::length(WebCore::HTMLOptionsCollection *this)
{
  return MEMORY[0x1E0DD81E0](this);
}

uint64_t WebCore::HTMLOptionsCollection::namedItem()
{
  return MEMORY[0x1E0DD81E8]();
}

uint64_t WebCore::IDBResourceIdentifier::isolatedCopy(WebCore::IDBResourceIdentifier *this)
{
  return MEMORY[0x1E0DD81F0](this);
}

uint64_t WebCore::NetworkStorageSession::cookieStorage(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1E0DD8218](this);
}

uint64_t WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue()
{
  return MEMORY[0x1E0DD8298]();
}

uint64_t WebCore::UserContentURLPattern::matchesHost(WebCore::UserContentURLPattern *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD82D8](this, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesPath(WebCore::UserContentURLPattern *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD82E0](this, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesScheme(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD82F0](this, a2);
}

uint64_t WebCore::FragmentedSharedBuffer::makeContiguous(WebCore::FragmentedSharedBuffer *this)
{
  return MEMORY[0x1E0DD8360](this);
}

uint64_t WebCore::FragmentedSharedBuffer::createNSDataArray(WebCore::FragmentedSharedBuffer *this)
{
  return MEMORY[0x1E0DD8368](this);
}

uint64_t WebCore::HTMLFormControlElement::formAction(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1E0DD8390](this);
}

uint64_t WebCore::HTMLFormControlElement::formMethod(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1E0DD8398](this);
}

uint64_t WebCore::HTMLFormControlElement::formEnctype(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1E0DD83A0](this);
}

uint64_t WebCore::HTMLFormControlElement::autocomplete(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1E0DD83A8](this);
}

uint64_t WebCore::HTMLFormControlElement::autocapitalizeType(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1E0DD83C0](this);
}

uint64_t WebCore::LocalDOMWindowProperty::frame(WebCore::LocalDOMWindowProperty *this)
{
  return MEMORY[0x1E0DD83C8](this);
}

uint64_t WebCore::ScriptExecutionContext::domainForCachePartition(WebCore::ScriptExecutionContext *this)
{
  return MEMORY[0x1E0DD83E0](this);
}

uint64_t WebCore::FrameLoaderStateMachine::firstLayoutDone(WebCore::FrameLoaderStateMachine *this)
{
  return MEMORY[0x1E0DD83F8](this);
}

uint64_t WebCore::FrameLoaderStateMachine::committingFirstRealLoad(WebCore::FrameLoaderStateMachine *this)
{
  return MEMORY[0x1E0DD8400](this);
}

uint64_t WebCore::DocumentMarkerController::markersFor()
{
  return MEMORY[0x1E0DD8488]();
}

uint64_t WebCore::HTMLTextFormControlElement::selectionEnd(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD84D0](this);
}

uint64_t WebCore::HTMLTextFormControlElement::selectionStart(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD84D8](this);
}

uint64_t WebCore::HTMLTextFormControlElement::selectionDirection(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD84E0](this);
}

uint64_t WebCore::HTMLTextFormControlElement::lastChangeWasUserEdit(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD84E8](this);
}

uint64_t WebCore::HTMLTextFormControlElement::visiblePositionForIndex(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1E0DD84F0](this);
}

uint64_t WebCore::ValidatedFormListedElement::willValidate(WebCore::ValidatedFormListedElement *this)
{
  return MEMORY[0x1E0DD8538](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getRectValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1E0DD85B8](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getFloatValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1E0DD85C0](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::primitiveType(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1E0DD85C8](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getStringValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1E0DD85D0](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getCounterValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1E0DD85D8](this);
}

uint64_t WebCore::DeprecatedCSSOMPrimitiveValue::getRGBColorValue(WebCore::DeprecatedCSSOMPrimitiveValue *this)
{
  return MEMORY[0x1E0DD85E0](this);
}

uint64_t WebCore::FixedPositionViewportConstraints::layerPositionForViewportRect(WebCore::FixedPositionViewportConstraints *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1E0DD8648](this, a2);
}

uint64_t WebCore::StickyPositionViewportConstraints::layerPositionForConstrainingRect(WebCore::StickyPositionViewportConstraints *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1E0DD8660](this, a2);
}

uint64_t WebCore::Attr::value(WebCore::Attr *this)
{
  return MEMORY[0x1E0DD86B0](this);
}

uint64_t WebCore::Blob::size(WebCore::Blob *this)
{
  return MEMORY[0x1E0DD86B8](this);
}

uint64_t WebCore::File::lastModified(WebCore::File *this)
{
  return MEMORY[0x1E0DD86C0](this);
}

uint64_t WebCore::Node::isEqualNode(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD86D8](this, a2);
}

uint64_t WebCore::Node::textContent(WebCore::Node *this)
{
  return MEMORY[0x1E0DD86E0](this);
}

uint64_t WebCore::Node::lookupPrefix()
{
  return MEMORY[0x1E0DD86E8]();
}

uint64_t WebCore::Node::isContentEditable(WebCore::Node *this)
{
  return MEMORY[0x1E0DD86F0](this);
}

uint64_t WebCore::Node::isDefaultNamespace()
{
  return MEMORY[0x1E0DD8700]();
}

uint64_t WebCore::Node::lookupNamespaceURI()
{
  return MEMORY[0x1E0DD8708]();
}

uint64_t WebCore::Node::nextElementSibling(WebCore::Node *this)
{
  return MEMORY[0x1E0DD8710](this);
}

uint64_t WebCore::Node::rootEditableElement(WebCore::Node *this)
{
  return MEMORY[0x1E0DD8718](this);
}

uint64_t WebCore::Node::previousElementSibling(WebCore::Node *this)
{
  return MEMORY[0x1E0DD8720](this);
}

uint64_t WebCore::Node::baseURI(WebCore::Node *this)
{
  return MEMORY[0x1E0DD8738](this);
}

uint64_t WebCore::Node::contains(WebCore::Node *this, const WebCore::Node *a2)
{
  return MEMORY[0x1E0DD8740](this, a2);
}

uint64_t WebCore::Node::renderBox(WebCore::Node *this)
{
  return MEMORY[0x1E0DD8748](this);
}

uint64_t WebCore::Page::inspectable(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8758](this);
}

uint64_t WebCore::Page::renderTreeSize(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8760](this);
}

uint64_t WebCore::Page::visibilityState(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8770](this);
}

uint64_t WebCore::Page::useDarkAppearance(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8780](this);
}

uint64_t WebCore::Page::editableElementsInRect(WebCore::Page *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1E0DD87B8](this, a2);
}

uint64_t WebCore::Page::protectedStorageNamespaceProvider(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8808](this);
}

uint64_t WebCore::Page::inLowQualityImageInterpolationMode(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8810](this);
}

uint64_t WebCore::Page::groupName(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8820](this);
}

uint64_t WebCore::Page::pageCount(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8828](this);
}

uint64_t WebCore::Page::sessionID(WebCore::Page *this)
{
  return MEMORY[0x1E0DD8838](this);
}

uint64_t WebCore::Path::platformPath(WebCore::Path *this)
{
  return MEMORY[0x1E0DD8840](this);
}

uint64_t WebCore::Text::wholeText(WebCore::Text *this)
{
  return MEMORY[0x1E0DD8860](this);
}

uint64_t WebCore::Frame::ownerRenderer(WebCore::Frame *this)
{
  return MEMORY[0x1E0DD8878](this);
}

uint64_t WebCore::Frame::pageID(WebCore::Frame *this)
{
  return MEMORY[0x1E0DD8890](this);
}

uint64_t WebCore::Range::cloneRange(WebCore::Range *this)
{
  return MEMORY[0x1E0DD88A8](this);
}

uint64_t WebCore::Range::compareNode(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD88B0](this, a2);
}

uint64_t WebCore::Range::comparePoint(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD88B8](this, a2);
}

uint64_t WebCore::Range::intersectsNode(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1E0DD88C0](this, a2);
}

uint64_t WebCore::Range::compareBoundaryPoints(WebCore::Range *this, uint64_t a2, const WebCore::Range *a3)
{
  return MEMORY[0x1E0DD88C8](this, a2, a3);
}

uint64_t WebCore::Range::commonAncestorContainer(WebCore::Range *this)
{
  return MEMORY[0x1E0DD88D0](this);
}

uint64_t WebCore::Range::toString(WebCore::Range *this)
{
  return MEMORY[0x1E0DD88D8](this);
}

uint64_t WebCore::Editor::selectedText(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD8900](this);
}

uint64_t WebCore::Editor::canEditRichly(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD8908](this);
}

uint64_t WebCore::Editor::compositionRange(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD8910](this);
}

uint64_t WebCore::Editor::firstRectForRange(WebCore::Editor *this, const WebCore::SimpleRange *a2)
{
  return MEMORY[0x1E0DD8918](this, a2);
}

uint64_t WebCore::Editor::applyEditingStyleToBodyElement(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD8928](this);
}

uint64_t WebCore::Editor::baseWritingDirectionForSelectionStart(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD8930](this);
}

uint64_t WebCore::Editor::client(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD8940](this);
}

uint64_t WebCore::Editor::Command::isSupported(WebCore::Editor::Command *this)
{
  return MEMORY[0x1E0DD8948](this);
}

uint64_t WebCore::Editor::Command::execute()
{
  return MEMORY[0x1E0DD8958]();
}

{
  return MEMORY[0x1E0DD8960]();
}

uint64_t WebCore::Editor::canEdit(WebCore::Editor *this)
{
  return MEMORY[0x1E0DD8978](this);
}

uint64_t WebCore::Widget::platformWidget(WebCore::Widget *this)
{
  return MEMORY[0x1E0DD8A58](this);
}

uint64_t WebCore::CSSRule::typeForCSSOM(WebCore::CSSRule *this)
{
  return MEMORY[0x1E0DD8A78](this);
}

uint64_t WebCore::Element::attributes(WebCore::Element *this)
{
  return MEMORY[0x1E0DD8A80](this);
}

uint64_t WebCore::Element::getAttribute()
{
  return MEMORY[0x1E0DD8A98]();
}

{
  return MEMORY[0x1E0DD8AA0]();
}

uint64_t WebCore::Element::hasAttribute()
{
  return MEMORY[0x1E0DD8AA8]();
}

uint64_t WebCore::Element::hasAttributes(WebCore::Element *this)
{
  return MEMORY[0x1E0DD8AB0](this);
}

uint64_t WebCore::Element::getAttributeNS()
{
  return MEMORY[0x1E0DD8AB8]();
}

uint64_t WebCore::Element::hasAttributeNS()
{
  return MEMORY[0x1E0DD8AC0]();
}

uint64_t WebCore::Element::getURLAttribute()
{
  return MEMORY[0x1E0DD8AD0]();
}

uint64_t WebCore::Element::getIntegralAttribute()
{
  return MEMORY[0x1E0DD8AD8]();
}

uint64_t WebCore::Element::getUnsignedIntegralAttribute()
{
  return MEMORY[0x1E0DD8AE8]();
}

uint64_t WebCore::Element::innerHTML(WebCore::Element *this)
{
  return MEMORY[0x1E0DD8B08](this);
}

uint64_t WebCore::Element::outerHTML(WebCore::Element *this)
{
  return MEMORY[0x1E0DD8B10](this);
}

uint64_t WebCore::IntRect::operator CGRect()
{
  return MEMORY[0x1E0DD8B38]();
}

uint64_t WebCore::IntSize::operator CGSize()
{
  return MEMORY[0x1E0DD8B40]();
}

uint64_t WebCore::Document::alinkColor(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8B50](this);
}

uint64_t WebCore::Document::compatMode(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8B58](this);
}

uint64_t WebCore::Document::designMode(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8B60](this);
}

uint64_t WebCore::Document::vlinkColor(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8B68](this);
}

uint64_t WebCore::Document::completeURL()
{
  return MEMORY[0x1E0DD8B70]();
}

uint64_t WebCore::Document::contentType(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8B78](this);
}

uint64_t WebCore::Document::documentURI(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8B80](this);
}

uint64_t WebCore::Document::windowProxy(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8B90](this);
}

uint64_t WebCore::Document::lastModified(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8B98](this);
}

uint64_t WebCore::Document::axObjectCache(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8BA0](this);
}

uint64_t WebCore::Document::bodyOrFrameset(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8BB0](this);
}

uint64_t WebCore::Document::urlForBindings(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8BC0](this);
}

uint64_t WebCore::Document::visibilityState(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8BC8](this);
}

uint64_t WebCore::Document::linkColorForBindings(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8BE8](this);
}

uint64_t WebCore::Document::haveStylesheetsLoaded(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8BF0](this);
}

uint64_t WebCore::Document::characterSetWithUTF8Fallback(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C08](this);
}

uint64_t WebCore::Document::defaultCharsetForLegacyBindings(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C10](this);
}

uint64_t WebCore::Document::displayStringModifiedByEncoding(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD8C18](this, a2);
}

uint64_t WebCore::Document::isTelephoneNumberParsingAllowed(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C20](this);
}

uint64_t WebCore::Document::isTelephoneNumberParsingEnabled(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C28](this);
}

uint64_t WebCore::Document::dir(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C30](this);
}

uint64_t WebCore::Document::domain(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C48](this);
}

uint64_t WebCore::Document::hidden(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C50](this);
}

uint64_t WebCore::Document::loader(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C58](this);
}

uint64_t WebCore::Document::bgColor(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C68](this);
}

uint64_t WebCore::Document::doctype(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C70](this);
}

uint64_t WebCore::Document::fgColor(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C78](this);
}

uint64_t WebCore::Document::encoding(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C80](this);
}

uint64_t WebCore::Document::hasFocus(WebCore::Document *this)
{
  return MEMORY[0x1E0DD8C88](this);
}

uint64_t WebCore::Document::userAgent(WebCore::Document *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD8C98](this, a2);
}

uint64_t WebCore::FileList::item(WebCore::FileList *this)
{
  return MEMORY[0x1E0DD8CA0](this);
}

uint64_t WebCore::IDBValue::isolatedCopy(WebCore::IDBValue *this)
{
  return MEMORY[0x1E0DD8CC8](this);
}

uint64_t WebCore::IntPoint::operator CGPoint()
{
  return MEMORY[0x1E0DD8CE0]();
}

uint64_t WebCore::Position::containerNode(WebCore::Position *this)
{
  return MEMORY[0x1E0DD8CF0](this);
}

uint64_t WebCore::Position::parentAnchoredEquivalent(WebCore::Position *this)
{
  return MEMORY[0x1E0DD8D00](this);
}

uint64_t WebCore::Position::offsetForPositionAfterAnchor(WebCore::Position *this)
{
  return MEMORY[0x1E0DD8D10](this);
}

uint64_t WebCore::CookieJar::cookieRequestHeaderFieldValue(WebCore::CookieJar *this, WebCore::Document *a2, const WTF::URL *a3)
{
  return MEMORY[0x1E0DD8D68](this, a2, a3);
}

uint64_t WebCore::FloatQuad::boundingBox(WebCore::FloatQuad *this)
{
  return MEMORY[0x1E0DD8D70](this);
}

uint64_t WebCore::FloatQuad::containsQuad(WebCore::FloatQuad *this, const WebCore::FloatQuad *a2)
{
  return MEMORY[0x1E0DD8D78](this, a2);
}

uint64_t WebCore::FloatQuad::containsPoint(WebCore::FloatQuad *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1E0DD8D80](this, a2);
}

uint64_t WebCore::FloatRect::operator CGRect()
{
  return MEMORY[0x1E0DD8DB0]();
}

uint64_t WebCore::FloatSize::operator CGSize()
{
  return MEMORY[0x1E0DD8DC0]();
}

uint64_t WebCore::FrameTree::childCount(WebCore::FrameTree *this)
{
  return MEMORY[0x1E0DD8DC8](this);
}

uint64_t WebCore::FrameTree::uniqueName(WebCore::FrameTree *this)
{
  return MEMORY[0x1E0DD8DD0](this);
}

uint64_t WebCore::FrameTree::traverseNext()
{
  return MEMORY[0x1E0DD8DE0]();
}

uint64_t WebCore::FrameTree::traverseNext(WebCore::FrameTree *this, const WebCore::Frame *a2)
{
  return MEMORY[0x1E0DD8DE8](this, a2);
}

uint64_t WebCore::FrameTree::isDescendantOf(WebCore::FrameTree *this, const WebCore::Frame *a2)
{
  return MEMORY[0x1E0DD8DF0](this, a2);
}

uint64_t WebCore::FrameTree::findByUniqueName()
{
  return MEMORY[0x1E0DD8DF8]();
}

uint64_t WebCore::FrameTree::traversePrevious()
{
  return MEMORY[0x1E0DD8E00]();
}

uint64_t WebCore::FrameTree::parent(WebCore::FrameTree *this)
{
  return MEMORY[0x1E0DD8E18](this);
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::identifier(WebCore::IDBClient::IDBConnectionToServer *this)
{
  return MEMORY[0x1E0DD8E48](this);
}

uint64_t WebCore::MediaList::item(WebCore::MediaList *this)
{
  return MEMORY[0x1E0DD8EB8](this);
}

uint64_t WebCore::MediaList::length(WebCore::MediaList *this)
{
  return MEMORY[0x1E0DD8EC0](this);
}

uint64_t WebCore::MediaList::mediaText(WebCore::MediaList *this)
{
  return MEMORY[0x1E0DD8EC8](this);
}

uint64_t WebCore::RenderBox::borderRadii(WebCore::RenderBox *this)
{
  return MEMORY[0x1E0DD8ED0](this);
}

uint64_t WebCore::RenderBox::absoluteContentQuad(WebCore::RenderBox *this)
{
  return MEMORY[0x1E0DD8EE8](this);
}

uint64_t WebCore::TreeScope::getElementById()
{
  return MEMORY[0x1E0DD8F00]();
}

uint64_t WebCore::TreeScope::ancestorElementInThisScope(WebCore::TreeScope *this, WebCore::Element *a2)
{
  return MEMORY[0x1E0DD8F10](this, a2);
}

uint64_t WTF::String::isolatedCopy()
{
  return MEMORY[0x1E0CC10C0]();
}

{
  return MEMORY[0x1E0CC10D0]();
}

uint64_t WebCore::IDBIndexInfo::isolatedCopy()
{
  return MEMORY[0x1E0DD8F18]();
}

uint64_t WebCore::IDBObjectStoreInfo::isolatedCopy()
{
  return MEMORY[0x1E0DD8F20]();
}

uint64_t WebCore::SecurityOriginData::isolatedCopy()
{
  return MEMORY[0x1E0DD8F28]();
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x1E0DE4930](__format);
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x1E0DE4AF8]();
}

uint64_t operator delete()
{
  return off_1E9D68DF0();
}

uint64_t operator new()
{
  return off_1E9D68DF8();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

int pthread_main_np(void)
{
  return MEMORY[0x1E0C84E08]();
}

int rmdir(const char *a1)
{
  return MEMORY[0x1E0C85138](a1);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1E0DE80C8](sel);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1E0DE87C0](a1, zDbName, *(_QWORD *)&op, a4);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

UCharDirection u_charDirection(UChar32 c)
{
  return MEMORY[0x1E0DE5960](*(_QWORD *)&c);
}

int32_t u_getIntPropertyValue(UChar32 c, UProperty which)
{
  return MEMORY[0x1E0DE59C0](*(_QWORD *)&c, *(_QWORD *)&which);
}

uint64_t ubrk_close()
{
  return MEMORY[0x1E0DE5C98]();
}

uint64_t ubrk_following()
{
  return MEMORY[0x1E0DE5CB8]();
}

uint64_t ubrk_setUText()
{
  return MEMORY[0x1E0DE5D10]();
}

UText *__cdecl utext_close(UText *ut)
{
  return (UText *)MEMORY[0x1E0DE6A50](ut);
}

