uint64_t CSSymbolicatorGetFlagsForNListOnlyData()
{
  return 917568;
}

uint64_t CSSymbolicatorGetFlagsForDwarfOnlyData()
{
  return 67960832;
}

uint64_t CSSymbolicatorGetFlagsForDebugMapOnlyData()
{
  return 67829760;
}

uint64_t CSSymbolicatorGetFlagsForDsymOnlyData()
{
  return 67567616;
}

uint64_t CSSymbolicatorGetFlagsForFunctionStartsOnlyData()
{
  return 983040;
}

uint64_t CSSymbolicatorGetFlagsForNoSymbolOrSourceInfoData()
{
  return 68091904;
}

uint64_t CSSymbolicatorGetFlagsForNoDataExceptFromTheCache()
{
  return 68091968;
}

uint64_t CSSymbolicatorGetFlagsForNonFaultingBehavior()
{
  return 526144;
}

uint64_t CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v12[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*a1 == a1[1])
    return 0;
  v8 = operator new();
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)v12 = v9;
  CSCppSymbolicator::CSCppSymbolicator(v8, a1, v12, a3, a4);
  v10 = *(_QWORD *)v12;
  *(_QWORD *)v12 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if ((int)CSGetDebugLoggingLevel() >= 1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v12 = 134217984;
    *(_QWORD *)&v12[4] = v8 & 0xFFFFFFFFFFFFFFFCLL;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SYMBOLICATOR %p CREATED BY CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask\n", v12, 0xCu);
  }
  return 2;
}

void sub_1B40C6034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorCreateWithSymbolOwners(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  const CSCppSymbolOwner *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CSCppFakeTask *v11;
  uint64_t v12;
  CSCppFakeTask *v14;
  __int128 v15;
  char *v16[3];

  memset(v16, 0, sizeof(v16));
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(v16, a2);
  if (a2)
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD *)(a1 + 16 * v4);
      v6 = v5[1];
      if (!CSIsNull(*v5, v6))
      {
        v7 = (const CSCppSymbolOwner *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>(v7, &v15);
        CSCppSymbolOwner::copy_data_from_symbol_owner(v15, v7);
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v16, &v15);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
        if (*((_QWORD *)&v15 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      ++v4;
    }
    while (v4 != a2);
  }
  v11 = (CSCppFakeTask *)operator new();
  CSCppFakeTask::CSCppFakeTask(v11, -1, 0);
  v14 = v11;
  v12 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v16, (uint64_t *)&v14, 2, 0);
  if (v14)
    (*(void (**)(CSCppFakeTask *))(*(_QWORD *)v14 + 8))(v14);
  *(_QWORD *)&v15 = v16;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  return v12;
}

void sub_1B40C61B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  a11 = (void **)&a13;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void std::make_unique[abi:ne180100]<CSCppFakeTask,int,BOOL>(int *a1@<X0>, char *a2@<X1>, CSCppFakeTask **a3@<X8>)
{
  CSCppFakeTask *v6;

  v6 = (CSCppFakeTask *)operator new();
  CSCppFakeTask::CSCppFakeTask(v6, *a1, *a2);
  *a3 = v6;
}

void sub_1B40C6478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x1081C409DB6214CLL);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithBinaryImageList(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  return CSSymbolicatorCreateWithBinaryImageListPidAndSharedCacheUUID(a1, a2, -1, a3, 0, 0, a4);
}

uint64_t CSSymbolicatorCreateWithBinaryImageListPidAndSharedCacheUUID(uint64_t a1, unsigned int a2, int a3, unsigned int a4, const UUID *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  CSCppNamedRange *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  UUID *v26;
  uint64_t *v27;
  uint64_t v28;
  CSCppFakeTask *v30;
  CSCppFakeTask *v36;
  UUID *v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  void *__p[2];
  unint64_t v42;
  char *v43[3];

  v7 = 0;
  if (a1 && a2)
  {
    v9 = 0;
    memset(v43, 0, sizeof(v43));
    v10 = a2;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v42 = 0;
      v11 = a1 + (v9 << 6);
      v39 = v11 + 16;
      v38 = *(_DWORD *)(v11 + 60) | 2;
      std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned long long const&,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture &,char const*&,void>(&v39, (unsigned int *)&kCSBeginningOfTime, &kCSBeginningOfTime, &kCSEndOfTime, (unsigned int *)&v38, (_QWORD *)(v11 + 32), (_QWORD *)(v11 + 40), &v40);
      v13 = *(_DWORD *)(v11 + 56);
      v12 = (unsigned int *)(v11 + 56);
      v14 = __p[1];
      if (v13)
      {
        v15 = 0;
        v16 = 0;
        do
        {
          v17 = (_QWORD *)(*(_QWORD *)(a1 + (v9 << 6) + 48) + v15);
          v39 = v17[1] - *v17;
          v18 = (CSCppNamedRange *)(v17 + 2);
          if ((unint64_t)v14 >= v42)
          {
            v14 = std::vector<CSCppSegmentRange>::__emplace_back_slow_path<unsigned long long &,unsigned long long,char (&)[17]>(__p, v17, &v39, v18);
          }
          else
          {
            std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<unsigned long long &,unsigned long long,char (&)[17]>((uint64_t)__p, v17, &v39, v18);
            v14 += 4;
          }
          __p[1] = v14;
          ++v16;
          v15 += 40;
        }
        while (v16 < *v12);
      }
      v19 = v40;
      v20 = *(_OWORD *)(v40 + 32);
      v21 = v42;
      *(void **)(v40 + 32) = __p[0];
      *(_QWORD *)(v19 + 40) = v14;
      *(_OWORD *)__p = v20;
      v22 = *(_QWORD *)(v19 + 48);
      *(_QWORD *)(v19 + 48) = v21;
      v42 = v22;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v43, &v40);
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v9;
    }
    while (v9 != v10);
    if (a5)
    {
      v26 = (UUID *)operator new();
      v27 = UUID::null_uuid(v26);
      CSCppFakeTask::CSCppFakeTask((CSCppFakeTask *)v26, a3, 0, a5, a6, (const UUID *)v27, 0);
      v37 = v26;
      v7 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v43, (uint64_t *)&v37, a4, 0);
      v28 = (uint64_t)v37;
      if (!v37)
      {
LABEL_21:
        __p[0] = v43;
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        return v7;
      }
    }
    else
    {
      v30 = (CSCppFakeTask *)operator new();
      CSCppFakeTask::CSCppFakeTask(v30, a3, 0);
      v36 = v30;
      v7 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v43, (uint64_t *)&v36, a4, a7);
      v28 = (uint64_t)v36;
      if (!v36)
        goto LABEL_21;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    goto LABEL_21;
  }
  return v7;
}

void sub_1B40C6770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  __p = &a23;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithBinaryImageListCountPidFlagsAndNotification(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  return CSSymbolicatorCreateWithBinaryImageListPidAndSharedCacheUUID(a1, a2, -1, a4, 0, 0, a5);
}

uint64_t CSSymbolicatorCreateWithDyldProcessSnapshotPidAndFlags(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t shared_cache;
  uint64_t v6;
  uint64_t *v7;
  UUID *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(_QWORD *, uint64_t);
  void (*v17)(uint64_t);
  _QWORD v18[3];
  uint8_t v19[4];
  int v20;
  uint8_t buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x4002000000;
    v16 = __Block_byref_object_copy_;
    v17 = __Block_byref_object_dispose_;
    memset(v18, 0, sizeof(v18));
    v12[1] = MEMORY[0x1E0C809B0];
    v12[2] = 0x40000000;
    v12[3] = (uint64_t)__CSSymbolicatorCreateWithDyldProcessSnapshotPidAndFlags_block_invoke;
    v12[4] = (uint64_t)&unk_1E6774B18;
    v12[5] = (uint64_t)&v13;
    dyld_process_snapshot_for_each_image();
    if (v14[5] == v14[6])
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unable to create symbolicator from dyld compact info for pid %d.\n", buf, 8u);
      }
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to create symbolicator from dyld compact info for pid %d.\n");
    }
    else
    {
      shared_cache = dyld_process_snapshot_get_shared_cache();
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      if (shared_cache)
      {
        dyld_shared_cache_copy_uuid();
        v6 = MEMORY[0x1B5E36CD0](shared_cache);
        v7 = v14;
        v8 = (UUID *)operator new();
        v9 = UUID::null_uuid(v8);
        CSCppFakeTask::CSCppFakeTask((CSCppFakeTask *)v8, a2, 0, (const UUID *)buf, v6, (const UUID *)v9, 0);
        v12[0] = (uint64_t)v8;
        v10 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v7 + 5, v12, a3, 0);
        if (v12[0])
          (*(void (**)(uint64_t))(*(_QWORD *)v12[0] + 8))(v12[0]);
        goto LABEL_14;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v19 = 67109120;
        v20 = a2;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unable to create symbolicator from dyld compact info for pid: %d. Shared cache UUID is missing\n", v19, 8u);
      }
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to create symbolicator from dyld compact info for pid: %d. Shared cache UUID is missing\n");
    }
    v10 = 0;
LABEL_14:
    _Block_object_dispose(&v13, 8);
    *(_QWORD *)buf = v18;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    return v10;
  }
  return 0;
}

void sub_1B40C6ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v10 - 80) = v9;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 80));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1B40C6DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v25 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(result + 40) = v2;
  return result;
}

__n128 __Block_byref_object_copy__5(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<CSCppSegmentRange>::emplace_back<unsigned long long &,unsigned long long &,char const*&>(void **a1, _QWORD *a2, uint64_t *a3, CSCppNamedRange **a4)
{
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    v13 = (uint64_t)(v11 - (_QWORD)*a1) >> 5;
    if ((unint64_t)(v13 + 1) >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_BYTE *)*a1;
    v15 = v14 >> 4;
    if (v14 >> 4 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v8, v16);
      v19 = v18;
    }
    else
    {
      v17 = 0;
      v19 = 0;
    }
    v20 = &v17[32 * v13];
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(v20, a2, a3, a4);
    v12 = v20 + 32;
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v20 - 1) = v23;
        v20 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v17[32 * v19];
    if (v21)
      operator delete(v21);
  }
  else
  {
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(*(_QWORD **)(v8 - 8), a2, a3, a4);
    v12 = (_QWORD *)(v11 + 32);
    a1[1] = (void *)(v11 + 32);
  }
  a1[1] = v12;
  return v12 - 4;
}

void sub_1B40C7000(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  CSCppFakeTask *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CSCppFakeTask *v17;
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 (*v22)(uint64_t, uint64_t);
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD v26[3];
  char v27;
  _QWORD v28[5];
  void **v29;
  char v30[8];
  char *v31;
  uint64_t v32;
  __n128 (*v33)(uint64_t, uint64_t);
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (CSFileIsCoreFile((FILE *)a1))
    return CSSymbolicatorCreateWithCoreFilePathAndFlags(a1, a3, 0, 0);
  if (CSFileIsKnownSignature(a1))
  {
    *(_QWORD *)v30 = 0;
    v31 = v30;
    v32 = 0x3802000000;
    v33 = __Block_byref_object_copy__14;
    v34 = __Block_byref_object_dispose__15;
    v35 = 0;
    v36 = 0;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 0x40000000;
    v28[2] = __CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification_block_invoke;
    v28[3] = &unk_1E6774B40;
    v28[4] = v30;
    with_cfdata_from_file(a1, (uint64_t)v28);
    v8 = *((_QWORD *)v31 + 5);
    v9 = v30;
  }
  else
  {
    v26[0] = 0;
    v26[1] = v26;
    v26[2] = 0x2000000000;
    v27 = 0;
    v19 = 0;
    v20 = &v19;
    v21 = 0x3802000000;
    v22 = __Block_byref_object_copy__18;
    v23 = __Block_byref_object_dispose__19;
    v24 = 0;
    v25 = 0;
    if (a1)
    {
      v10 = realpath_DARWIN_EXTSN(a1, v30);
      if (!v10)
        v10 = a1;
      v29 = a2;
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 0x40000000;
      v18[2] = __CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification_block_invoke_20;
      v18[3] = &unk_1E6774B80;
      v18[4] = v26;
      v18[5] = &v19;
      v18[6] = a2;
      iterate_symbol_owners_from_path(v10, (a3 & 0x20000000) == 0, 0, (unint64_t *)&v29, 0, (uint64_t)v18);
    }
    if (v20[5])
    {
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(v30, 1uLL, v20 + 5);
      v11 = (CSCppFakeTask *)operator new();
      CSCppFakeTask::CSCppFakeTask(v11, -1, 0);
      v17 = v11;
      v8 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v30, (uint64_t *)&v17, a3, a4);
      v12 = (uint64_t)v17;
      v17 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v29 = (void **)v30;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v29);
    }
    else
    {
      v8 = 0;
    }
    _Block_object_dispose(&v19, 8);
    v13 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v9 = (char *)v26;
  }
  _Block_object_dispose(v9, 8);
  return v8;
}

void sub_1B40C72E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,char a34)
{
  uint64_t v34;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  a33 = (void **)&a34;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Block_object_dispose(&a17, 8);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v34 + 40);
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__19(uint64_t a1)
{
  return std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](a1 + 40);
}

_QWORD *std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t CSSymbolicatorForeachSymbolicatorWithPathFlagsAndNotification(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[7];
  int v15;
  unint64_t v16;
  _QWORD v17[7];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22[1024];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (CSFileIsCoreFile((FILE *)a1))
  {
    v8 = (unsigned int *)CSSymbolicatorCreateWithCoreFilePathAndFlags(a1, a2, 0, 0);
    v10 = v9;
    v11 = 0;
    if (!CSIsNull((char)v8, v9))
    {
      (*(void (**)(uint64_t, unsigned int *, uint64_t))(a4 + 16))(a4, v8, v10);
      CSRelease(v8, v10);
      return 1;
    }
  }
  else
  {
    v18 = 0;
    v19 = &v18;
    v20 = 0x2000000000;
    v21 = 0;
    if (CSFileIsKnownSignature(a1))
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = __CSSymbolicatorForeachSymbolicatorWithPathFlagsAndNotification_block_invoke;
      v17[3] = &unk_1E6774BD0;
      v17[5] = &v18;
      v17[6] = a1;
      v17[4] = a4;
      with_cfdata_from_file(a1, (uint64_t)v17);
    }
    else if (a1)
    {
      v12 = realpath_DARWIN_EXTSN(a1, v22);
      if (!v12)
        v12 = a1;
      v16 = -1;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 0x40000000;
      v14[2] = __CSSymbolicatorForeachSymbolicatorWithPathFlagsAndNotification_block_invoke_3;
      v14[3] = &unk_1E6774BF8;
      v15 = a2;
      v14[5] = a4;
      v14[6] = &v18;
      v14[4] = a3;
      iterate_symbol_owners_from_path(v12, (a2 & 0x20000000) == 0, 0, &v16, 0, (uint64_t)v14);
    }
    v11 = v19[3];
    _Block_object_dispose(&v18, 8);
  }
  return v11;
}

void sub_1B40C76B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B40C766CLL);
  }
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1B40C78AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

char *elide_some_symbol_owners@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const CSCppSymbolOwner *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  BOOL v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v41;
  __int128 v42;
  _QWORD v43[3];
  _OWORD v44[2];
  int v45;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (!(a1 & 7 | (8 * (a2 & 3))))
    return std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)a4, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  memset(v44, 0, sizeof(v44));
  v45 = 1065353216;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v43);
  v6 = (uint64_t *)v43[0];
  v7 = (uint64_t *)v43[1];
  while (v6 != v7)
  {
    v8 = *v6;
    v9 = v6[1];
    *(_QWORD *)&v42 = *v6;
    *((_QWORD *)&v42 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (!UUID::is_null((UUID *)(v8 + 16)))
      std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<UUID const&,std::shared_ptr<CSCppSymbolOwner>&>(v44, (_OWORD *)(v42 + 16), &v42);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v6 += 2;
  }
  v15 = *a3;
  v16 = a3[1];
  while (v15 != v16)
  {
    v17 = *v15;
    v18 = v15[1];
    *(_QWORD *)&v42 = *v15;
    *((_QWORD *)&v42 + 1) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (UUID::is_null((UUID *)(v17 + 16)))
      goto LABEL_43;
    v21 = std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__equal_range_multi<UUID>(v44, (_QWORD *)(v42 + 16));
    v23 = v21;
    v24 = v22;
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    v41 = v42;
    if (*((_QWORD *)&v42 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (v21 != v22)
    {
      while (1)
      {
        v28 = (const CSCppSymbolOwner *)v23[4];
        v29 = (std::__shared_weak_count *)v23[5];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
        }
        v32 = check_if_segments_match((const CSCppSymbolOwner *)v41, v28);
        if (v29)
        {
          v33 = (unint64_t *)&v29->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v32)
          break;
        v23 = (_QWORD *)*v23;
        if (v23 == v24)
        {
          v23 = v24;
          break;
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    }
    if (v25)
    {
      v35 = (unint64_t *)&v25->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v23 == v24)
LABEL_43:
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)a4, &v42);
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v15 += 2;
  }
  *(_QWORD *)&v42 = v43;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  return (char *)std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table((uint64_t)v44);
}

void sub_1B40C7BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table((uint64_t)va);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *CSCppSymbolicator::get_symbol_owners@<X0>(CSCppSymbolicator *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4[0] = &off_1E6774C90;
  v4[1] = a2;
  v5 = v4;
  CSCppSymbolicator::read_timeline((uint64_t)this, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1B40C7CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

const __CFData *CSSymbolicatorCreateWithSymbolicatorTextFaultingEnabled(char a1, uint64_t a2)
{
  __CFData *Signature;
  unint64_t v4;
  char v5;
  const __CFData *v6;
  uint64_t v7;
  const __CFData *v8;
  unint64_t v9;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  Signature = CSSymbolicatorCreateSignature(a1, a2, 0);
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 = CSCppSymbolicator::flags((os_unfair_lock_s *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  v6 = CSSymbolicatorCreateWithSignatureFlagsAndNotification(Signature, 0, v5 & 2 | 4u, 0);
  v8 = v6;
  if ((v5 & 2) != 0)
  {
    if ((*(_BYTE *)(v4 + 88) & 1) != 0)
    {
      v9 = *(_QWORD *)(v4 + 80);
      if (!v9)
        v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    }
    else
    {
      v9 = 0;
    }
    if (v6 & 7 | (8 * (v7 & 3)) && !*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 80))
      *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 80) = v9;
  }
  CFRelease(Signature);
  return v8;
}

uint64_t CSSymbolicatorGetFlags(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return CSCppSymbolicator::flags((os_unfair_lock_s *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  else
    return 0;
}

uint64_t CSSymbolicatorSetGroupKey(char a1, uint64_t a2, uint64_t a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3))) || *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 80))
    return 0;
  *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 80) = a3;
  return 1;
}

uint64_t CSSymbolicatorCreateWithSymbolArchive(const char *a1, int a2)
{
  int v3;
  int v4;
  _OWORD *v5;
  _DWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t i;
  _OWORD *v12;
  mach_vm_address_t v13;
  int v14;
  uint64_t *v16;
  _BOOL8 is_null;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  CSCppSymbolOwnerData *v25;
  uint8_t *v26;
  FILE *v28;
  const char *v29;
  size_t v30;
  uint8_t *v32;
  CSCppNamedRange *v33;
  __int128 v34;
  uint64_t *v35;
  _DWORD *v36;
  size_t v37;
  uint64_t v38;
  off_t st_size;
  stat v40;
  const char *v41;
  char v42;
  uint8_t *v43;
  uint8_t buf[24];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v41 = a1;
  v3 = open(a1, 0x1000000);
  if (v3 == -1)
    return 0;
  v4 = v3;
  if (fstat(v3, &v40) == -1)
    return 0;
  v38 = 0;
  st_size = v40.st_size;
  v37 = (v40.st_size + 0x3FFF) & 0xFFFFFFFFFFFFC000;
  v5 = mmap(0, v37, 1, 1, v4, 0);
  v6 = v5;
  v36 = v5;
  if (v5 == (_OWORD *)-1 || (v7 = (_OWORD *)((char *)v5 + v38), (_OWORD *)((char *)v5 + v38) == (_OWORD *)-1))
  {
LABEL_40:
    v9 = 0;
    goto LABEL_41;
  }
  if (v5 != v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v6;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "memory.address() [%p] should equal memory.mapped_region() [%p]... possible unexpected offset?", buf, 0x16u);
      v6 = v36;
      v7 = (_OWORD *)((char *)v36 + v38);
    }
    if (v6 == (_DWORD *)-1)
      v8 = -1;
    else
      v8 = (uint64_t)v7;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "memory.address() [%p] should equal memory.mapped_region() [%p]... possible unexpected offset?", (const void *)v8, v6);
    close(v4);
    goto LABEL_50;
  }
  v10 = v41;
  for (i = 7u; i != -1; --i)
  {
    if (aSymbols[i] != *v10)
    {
      v14 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 == 1)
      {
        v6 = (_DWORD *)CSCppConvertLegacyPreVersion7ArchiveToModernCopy(v5);
LABEL_20:
        v14 = *v6;
      }
      if (v14 != 1 && v14 != 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "The archive's version is not supported. A malformed file? \n", buf, 2u);
        }
        v28 = (FILE *)*MEMORY[0x1E0C80C10];
        v29 = "The archive's version is not supported. A malformed file? \n";
        v30 = 59;
LABEL_48:
        fwrite(v29, v30, 1uLL, v28);
        close(v4);
        goto LABEL_50;
      }
      if (!v6[1])
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "The archive's size is too small. A malformed file? \n", buf, 2u);
        }
        v28 = (FILE *)*MEMORY[0x1E0C80C10];
        v29 = "The archive's size is too small. A malformed file? \n";
        v30 = 52;
        goto LABEL_48;
      }
      if (!v6[4])
        goto LABEL_40;
      v35 = 0;
      v16 = (uint64_t *)(v6 + 13);
      is_null = UUID::is_null((UUID *)(v6 + 13));
      if (is_null)
        v16 = UUID::null_uuid((UUID *)is_null);
      v35 = v16;
      LODWORD(v43) = 0;
      LODWORD(v33) = v6[7];
      *(_QWORD *)buf = *(_QWORD *)(v6 + 17);
      std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*&,int,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture,char const*&,void>(&v35, (unsigned int *)&v43, &kCSBeginningOfTime, &kCSEndOfTime, (unsigned int *)&v33, buf, &v41, &v34);
      v18 = v6[2];
      if ((_DWORD)v18)
      {
        v19 = v6 + 24;
        v20 = (uint64_t)&v6[8 * v18 + 24];
        do
        {
          *(_QWORD *)buf = *v19;
          v43 = (uint8_t *)v19[1];
          v21 = v19 + 2;
          v33 = (CSCppNamedRange *)(v19 + 2);
          std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char const*>((void **)(v34 + 32), buf, (uint64_t *)&v43, &v33);
          v19 = v21 + 2;
        }
        while (v21 + 2 != (_QWORD *)v20);
      }
      memset(buf, 0, sizeof(buf));
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)buf, &v34);
      LODWORD(v33) = -1;
      v42 = 0;
      std::make_unique[abi:ne180100]<CSCppFakeTask,int,BOOL>((int *)&v33, &v42, (CSCppFakeTask **)&v43);
      v22 = v43;
      v43 = 0;
      v32 = v22;
      v9 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(buf, (uint64_t *)&v32, 64, 0);
      v24 = v23;
      if (v32)
        (*(void (**)(uint8_t *))(*(_QWORD *)v32 + 8))(v32);
      *(_BYTE *)((v24 & 0xFFFFFFFFFFFFFFFCLL) + 88) |= 1u;
      if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFFCLL) + 80))
        *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFFCLL) + 80) = a2;
      v25 = (CSCppSymbolOwnerData *)CSCppSymbolOwner::data_claim_empty((CSCppSymbolOwner *)v34);
      CSCppSymbolOwner::set_data((CSCppSymbolOwner *)v34, v25);
      v26 = v43;
      v43 = 0;
      if (v26)
        (*(void (**)(uint8_t *))(*(_QWORD *)v26 + 8))(v26);
      v43 = buf;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
LABEL_41:
      close(v4);
      goto LABEL_51;
    }
    ++v10;
  }
  v12 = (_OWORD *)CSCppConvertLegacyPreVersion6ArchiveToModernCopy(v5);
  v13 = (mach_vm_address_t)v12;
  if (v12)
  {
    v6 = (_DWORD *)CSCppConvertLegacyPreVersion7ArchiveToModernCopy(v12);
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], v13, *(unsigned int *)(v13 + 4));
    goto LABEL_20;
  }
  close(v4);
LABEL_50:
  v9 = 0;
LABEL_51:
  MMapArchiveFileSystem::MMapMemory::~MMapMemory((MMapArchiveFileSystem::MMapMemory *)&v36);
  return v9;
}

void sub_1B40C82EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
  v7 = *(_QWORD *)(v5 - 88);
  *(_QWORD *)(v5 - 88) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_QWORD *)(v5 - 88) = v5 - 80;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 88));
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MMapArchiveFileSystem::MMapMemory::~MMapMemory((MMapArchiveFileSystem::MMapMemory *)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char const*>(void **a1, _QWORD *a2, uint64_t *a3, CSCppNamedRange **a4)
{
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    v13 = (uint64_t)(v11 - (_QWORD)*a1) >> 5;
    if ((unint64_t)(v13 + 1) >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_BYTE *)*a1;
    v15 = v14 >> 4;
    if (v14 >> 4 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v8, v16);
      v19 = v18;
    }
    else
    {
      v17 = 0;
      v19 = 0;
    }
    v20 = &v17[32 * v13];
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(v20, a2, a3, a4);
    v12 = v20 + 32;
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v20 - 1) = v23;
        v20 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v17[32 * v19];
    if (v21)
      operator delete(v21);
  }
  else
  {
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(*(_QWORD **)(v8 - 8), a2, a3, a4);
    v12 = (_QWORD *)(v11 + 32);
    a1[1] = (void *)(v11 + 32);
  }
  a1[1] = v12;
  return v12 - 4;
}

void sub_1B40C84B4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

DIR *CSCppPopulateCachesWithMmapArchivesAndGroupKey(char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v5;
  dirent *v6;
  dirent *v7;
  NSObject *v8;
  std::string *v9;
  size_t v10;
  std::string *v11;
  int v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  std::string::size_type size;
  std::string *v19;
  uint64_t v20;
  int v21;
  int v22;
  _OWORD *v23;
  mach_vm_address_t v24;
  int v25;
  int v26;
  TMMapArchive *archive_wrapper;
  ArchiveWrapper *v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  off_t st_size;
  stat v33;
  std::string v34;
  uint8_t buf[4];
  std::string *v36;
  __int16 v37;
  unsigned int *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  result = opendir(a1);
  if (result)
  {
    v5 = result;
    v6 = readdir(result);
    if (v6)
    {
      v7 = v6;
      v8 = MEMORY[0x1E0C81028];
      do
      {
        if (v7->d_type == 8)
        {
          v9 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v34, a1);
          std::string::push_back(v9, 47);
          v10 = strlen(v7->d_name);
          std::string::append(&v34, v7->d_name, v10);
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v11 = &v34;
          else
            v11 = (std::string *)v34.__r_.__value_.__r.__words[0];
          v12 = open((const char *)v11, 0x1000000);
          v13 = v12;
          if (v12 != -1 && fstat(v12, &v33) != -1)
          {
            v31 = 0;
            st_size = v33.st_size;
            v30 = (v33.st_size + 0x3FFF) & 0xFFFFFFFFFFFFC000;
            v14 = (unsigned int *)mmap(0, v30, 1, 1, v13, 0);
            v15 = v14;
            v29 = (uint64_t)v14;
            if (v14 == (unsigned int *)-1
              || (v16 = (unsigned int *)((char *)v14 + v31), (unsigned int *)((char *)v14 + v31) == (unsigned int *)-1))
            {
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315138;
                v36 = v11;
                _os_log_impl(&dword_1B40C5000, v8, OS_LOG_TYPE_ERROR, "Failed to mmap %s\n", buf, 0xCu);
              }
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "Failed to mmap %s\n");
            }
            else if (v14 == v16)
            {
              v17 = 0;
              size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
              if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v19 = &v34;
              else
                v19 = (std::string *)v34.__r_.__value_.__r.__words[0];
              if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v34.__r_.__value_.__l.__size_;
              v20 = (uint64_t)v19 + size - 1;
              do
              {
                if (v17 == -8)
                {
                  v23 = (_OWORD *)CSCppConvertLegacyPreVersion6ArchiveToModernCopy(v14);
                  v24 = (mach_vm_address_t)v23;
                  if (!v23)
                    goto LABEL_19;
                  v15 = (unsigned int *)CSCppConvertLegacyPreVersion7ArchiveToModernCopy(v23);
                  mach_vm_deallocate(*MEMORY[0x1E0C83DA0], v24, *(unsigned int *)(v24 + 4));
                  goto LABEL_36;
                }
                v21 = aSymbols[v17 + 7];
                v22 = *(unsigned __int8 *)(v20 + v17--);
              }
              while (v21 == v22);
              if (*v14 == 1)
              {
                v15 = (unsigned int *)CSCppConvertLegacyPreVersion7ArchiveToModernCopy(v14);
LABEL_36:
                v25 = 0;
                v26 = 1;
                goto LABEL_38;
              }
              v26 = 16;
              v25 = 1;
LABEL_38:
              archive_wrapper = (TMMapArchive *)CSCppMMapArchiveCache::make_archive_wrapper((uint64_t)v15, 0, v26, v15[1], a2, 7, 0);
              CSCppMMapArchiveCache::add_archive_wrapper((CSCppMMapArchiveCache *)v15, archive_wrapper, v28);
              if (v25)
              {
                v29 = -1;
              }
              else if (WriteMMapArchiveToDirectory(0, (TMMapArchive *)v15, a1))
              {
                unlink((const char *)v11);
              }
            }
            else
            {
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                v36 = (std::string *)v16;
                v37 = 2048;
                v38 = v15;
                _os_log_impl(&dword_1B40C5000, v8, OS_LOG_TYPE_ERROR, "memory.address() [%p] should equal memory.mapped_region() [%p]... possible unexpected offset?", buf, 0x16u);
              }
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "memory.address() [%p] should equal memory.mapped_region() [%p]... possible unexpected offset?");
            }
LABEL_19:
            MMapArchiveFileSystem::MMapMemory::~MMapMemory((MMapArchiveFileSystem::MMapMemory *)&v29);
          }
          close(v13);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
        }
        v7 = readdir(v5);
      }
      while (v7);
    }
    return (DIR *)closedir(v5);
  }
  return result;
}

void sub_1B40C8884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  int v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  MMapArchiveFileSystem::MMapMemory::~MMapMemory((MMapArchiveFileSystem::MMapMemory *)va);
  close(v10);
  if (*(char *)(v11 - 129) < 0)
    operator delete(*(void **)(v11 - 152));
  _Unwind_Resume(a1);
}

DIR *CSCppPopulateCachesWithMmapArchives(char *a1)
{
  return CSCppPopulateCachesWithMmapArchivesAndGroupKey(a1, 0);
}

void CSSymbolicatorForceFullSymbolExtraction(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    CSCppSymbolicator::force_allocate_all_symbol_owner_data((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
}

void CSSymbolicatorForceNonFaultingFlags(char a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint32_t v3;

  if (a1 & 7 | (8 * (a2 & 3)))
  {
    v2 = (os_unfair_lock_s *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    v3 = CSCppSymbolicator::flags((os_unfair_lock_s *)(a2 & 0xFFFFFFFFFFFFFFFCLL)) | 0x80740;
    os_unfair_lock_lock(v2 + 3);
    v2[16]._os_unfair_lock_opaque = v3;
    os_unfair_lock_unlock(v2 + 3);
  }
}

uint64_t CSSymbolicatorSetForceGlobalSafeMachVMReads(uint64_t result)
{
  force_global_safe_mach_vm_reads = result;
  return result;
}

uint64_t CSSetForceSafeMachVMReads(uint64_t result)
{
  force_global_safe_mach_vm_reads = result;
  return result;
}

uint64_t CSGetForceSafeMachVMReads()
{
  return force_global_safe_mach_vm_reads;
}

uint64_t CSSymbolicatorGetGroupKey(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 80);
  else
    return 0;
}

uint64_t CSSymbolicatorApplyMutableContextBlock(char a1, uint64_t a2, uint64_t a3)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return CSCppSymbolicator::apply_mutable_context_block(a2 & 0xFFFFFFFFFFFFFFFCLL, a3);
  else
    return 0;
}

uint64_t CSSymbolicatorAddSymbolOwner(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3802000000;
  v10 = __Block_byref_object_copy__14;
  v11 = __Block_byref_object_dispose__15;
  v12 = 0;
  v13 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolicatorAddSymbolOwner_block_invoke;
  v6[3] = &unk_1E6774C20;
  v6[4] = &v7;
  v6[5] = a3;
  v6[6] = a4;
  if (a1 & 7 | (8 * (a2 & 3))
    && (CSCppSymbolicator::apply_mutable_context_block(a2 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)v6) & 1) != 0)
  {
    v4 = v8[5];
  }
  else
  {
    v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B40C8AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6774328, MEMORY[0x1E0DE42D0]);
}

void sub_1B40C8B58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__split_buffer<std::shared_ptr<CSCppSymbolOwner>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const char *std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<unsigned long long &,unsigned long long,char (&)[17]>(uint64_t a1, _QWORD *a2, uint64_t *a3, CSCppNamedRange *this)
{
  _QWORD *v6;
  uint64_t v7;
  const char *result;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a3;
  *v6 = *a2;
  v6[1] = v7;
  v6[2] = CSCppNamedRange::unique_macho_string(this, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  result = CSCppNamedRange::unique_macho_string(this, 0, (const char *)0x10);
  v6[3] = result;
  *(_QWORD *)(a1 + 8) = v6 + 4;
  return result;
}

void sub_1B40C8D14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CSCppSegmentRange>::__emplace_back_slow_path<unsigned long long &,unsigned long long,char (&)[17]>(void **a1, _QWORD *a2, uint64_t *a3, CSCppNamedRange *a4)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v5 = (char *)*a1;
  v6 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = (_BYTE *)a1[2] - v5;
  if (v12 >> 4 > v7)
    v7 = v12 >> 4;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
    v13 = 0x7FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = *a3;
  v18 = &v14[32 * v6];
  *(_QWORD *)v18 = *a2;
  *((_QWORD *)v18 + 1) = v17;
  *((_QWORD *)v18 + 2) = CSCppNamedRange::unique_macho_string(a4, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  *((_QWORD *)v18 + 3) = CSCppNamedRange::unique_macho_string(a4, 0, (const char *)0x10);
  v19 = v18 + 32;
  v21 = (char *)*a1;
  v20 = (char *)a1[1];
  if (v20 != *a1)
  {
    do
    {
      v22 = *((_OWORD *)v20 - 1);
      *((_OWORD *)v18 - 2) = *((_OWORD *)v20 - 2);
      *((_OWORD *)v18 - 1) = v22;
      v18 -= 32;
      v20 -= 32;
    }
    while (v20 != v21);
    v20 = (char *)*a1;
  }
  *a1 = v18;
  a1[1] = v19;
  a1[2] = &v14[32 * v16];
  if (v20)
    operator delete(v20);
  return v19;
}

void sub_1B40C8E44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

const char *CSCppNamedRange::unique_macho_string(CSCppNamedRange *this, CSCppNamedRange *a2, const char *a3)
{
  unsigned __int8 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  size_t v9;
  std::string::size_type size;
  size_t v11;
  unsigned __int8 *v12;
  const char *v13;
  std::string __dst;

  if ((v6 & 1) == 0
  {
    CSCppNamedRange::unique_macho_string(char const*,char const*,unsigned long)::_uniqued_macho_strings = 0u;
    unk_1ED03DC98 = 0u;
    dword_1ED03DCA8 = 1065353216;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&CSCppNamedRange::unique_macho_string(char const*,char const*,unsigned long)::_name_unique_lock);
  v7 = this != 0;
  if (!this)
    this = a2;
  if (a2)
    v8 = v7;
  else
    v8 = 0;
  v9 = strnlen((const char *)this, (size_t)a3);
  std::string::basic_string[abi:ne180100](&__dst, this, v9);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (size == 6 && !strncmp("__TEXT", (const char *)this, 6uLL))
  {
    if (!v8)
    {
      v13 = "__TEXT";
      goto LABEL_19;
    }
    if (!strncmp((const char *)a2, "SEGMENT", 6uLL))
    {
      v13 = "__TEXT SEGMENT";
      goto LABEL_19;
    }
  }
  else if (!v8)
  {
    goto LABEL_13;
  }
  std::string::append(&__dst, " ", 1uLL);
  v11 = strnlen((const char *)a2, (size_t)a3);
  std::string::append(&__dst, (const std::string::value_type *)a2, v11);
LABEL_13:
  std::string::append(&__dst, 1uLL, 0);
  v12 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&CSCppNamedRange::unique_macho_string(char const*,char const*,unsigned long)::_uniqued_macho_strings, (unsigned __int8 *)&__dst, (uint64_t)&__dst);
  v13 = (const char *)(v12 + 16);
  if ((char)v12[39] < 0)
    v13 = *(const char **)v13;
LABEL_19:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock((os_unfair_lock_t)&CSCppNamedRange::unique_macho_string(char const*,char const*,unsigned long)::_name_unique_lock);
  return v13;
}

void sub_1B40C9000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  os_unfair_lock_unlock((os_unfair_lock_t)&CSCppNamedRange::unique_macho_string(char const*,char const*,unsigned long)::_name_unique_lock);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1B40C9348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1B40C94D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

_QWORD *std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(_QWORD *a1, _QWORD *a2, uint64_t *a3, CSCppNamedRange **a4)
{
  uint64_t v5;
  CSCppNamedRange *v6;

  v5 = *a3;
  v6 = *a4;
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = CSCppNamedRange::unique_macho_string(v6, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  a1[3] = CSCppNamedRange::unique_macho_string(v6, 0, (const char *)0x10);
  return a1;
}

_QWORD *std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[2 * a2];
    do
    {
      *v6 = *a3;
      v8 = a3[1];
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v6 += 2;
    }
    while (v6 != v7);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B40C9D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

char *std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B40C9E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void CSCppSymbolicator::read_timeline(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = (os_unfair_lock_s *)(a1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *(_QWORD *)(a1 + 24));
  os_unfair_lock_unlock(v4);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E36940);
}

void std::__function::__func<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

_QWORD *std::__function::__func<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6774C90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6774C90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<CSCppSymbolicator::get_symbol_owners(void)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v4 = 0uLL;
  v5 = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)&v4, *(_QWORD **)(a2 + 56), *(_QWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
  v3 = *a1;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((void **)v3);
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 16) = v5;
  v4 = 0uLL;
  v5 = 0;
  v6 = (void **)&v4;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void MMapArchiveFileSystem::MMapMemory::~MMapMemory(MMapArchiveFileSystem::MMapMemory *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2 != (void *)-1)
    munmap(v2, *((_QWORD *)this + 1));
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>@<X0>(const CSCppSymbolOwner *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<CSCppSymbolOwner&,std::allocator<CSCppSymbolOwner>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B40CA284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<CSCppSymbolOwner&,std::allocator<CSCppSymbolOwner>,0>(_QWORD *a1, const CSCppSymbolOwner *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6774D20;
  CSCppSymbolOwner::CSCppSymbolOwner((CSCppSymbolOwner *)(a1 + 3), a2);
  return a1;
}

void sub_1B40CA2CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CSCppSymbolOwner>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6774D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CSCppSymbolOwner>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6774D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t std::__shared_ptr_emplace<CSCppSymbolOwner>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void CSCppFakeTask::CSCppFakeTask(CSCppFakeTask *this, int a2, char a3)
{
  uint64_t *v6;
  uint64_t *v7;

  v6 = UUID::null_uuid((UUID *)this);
  v7 = UUID::null_uuid((UUID *)v6);
  CSCppFakeTask::CSCppFakeTask(this, a2, a3, (const UUID *)v6, 0, (const UUID *)v7, 0);
}

void CSCppFakeTask::CSCppFakeTask(CSCppFakeTask *this, int a2, char a3, const UUID *a4, uint64_t a5, const UUID *a6, uint64_t a7)
{
  uint64_t *v13;

  *((_BYTE *)this + 16) = 0;
  *(_QWORD *)this = &off_1E6774D70;
  *((_QWORD *)this + 1) = 0;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppFakeTask *)((char *)this + 24), 0, a2);
  *((_BYTE *)this + 40) = a3;
  if (!a4)
  {
    v13 = UUID::null_uuid((UUID *)v13);
    a4 = (const UUID *)v13;
  }
  *(_OWORD *)((char *)this + 41) = *(_OWORD *)a4;
  if (!a6)
    a6 = (const UUID *)UUID::null_uuid((UUID *)v13);
  *(_OWORD *)((char *)this + 57) = *(_OWORD *)a6;
  *((_QWORD *)this + 10) = a5;
  *((_QWORD *)this + 11) = a7;
}

void sub_1B40CA428(_Unwind_Exception *a1)
{
  CSCppMachTaskContainer *v1;

  CSCppMachTaskContainer::~CSCppMachTaskContainer(v1);
  _Unwind_Resume(a1);
}

void CSCppFakeTask::~CSCppFakeTask(CSCppFakeTask *this)
{
  *(_QWORD *)this = &off_1E6774D70;
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppFakeTask *)((char *)this + 24));
}

{
  *(_QWORD *)this = &off_1E6774D70;
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppFakeTask *)((char *)this + 24));
  JUMPOUT(0x1B5E36940);
}

uint64_t CSCppFakeTask::mach_task_container(CSCppFakeTask *this)
{
  return (uint64_t)this + 24;
}

uint64_t CSCppFakeTask::is_kernel_task(CSCppFakeTask *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t CSCppFakeTask::is_alive(CSCppFakeTask *this)
{
  return 0;
}

uint64_t CSCppFakeTask::is_mach_task(CSCppFakeTask *this)
{
  return 0;
}

uint64_t CSCppFakeTask::dsc_uuid(CSCppFakeTask *this)
{
  return (uint64_t)this + 41;
}

uint64_t CSCppFakeTask::aot_cache_uuid(CSCppFakeTask *this)
{
  return (uint64_t)this + 57;
}

uint64_t CSCppFakeTask::dsc_base_address(CSCppFakeTask *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t CSCppFakeTask::aot_cache_base_address(CSCppFakeTask *this)
{
  return *((_QWORD *)this + 11);
}

__n128 CSCppFakeTask::set_dsc_uuid(CSCppFakeTask *this, __n128 *a2)
{
  __n128 result;

  if (a2)
  {
    result = *a2;
    *(__n128 *)((char *)this + 41) = *a2;
  }
  return result;
}

uint64_t CSCppFakeTask::set_dsc_base_address(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 80) = a2;
  return this;
}

__n128 CSCppFakeTask::set_aot_cache_uuid(CSCppFakeTask *this, __n128 *a2)
{
  __n128 result;

  if (a2)
  {
    result = *a2;
    *(__n128 *)((char *)this + 57) = *a2;
  }
  return result;
}

uint64_t CSCppFakeTask::set_aot_cache_base_address(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 88) = a2;
  return this;
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned long long const&,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture &,char const*&,void>@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned long long const&,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B40CA5B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned long long const&,unsigned long long const&,unsigned long long const&,unsigned int,_CSArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>(_QWORD *a1, _QWORD *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6774D20;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B40CA618(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,unsigned int &,_CSArchitecture &,char const*&,void>@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,unsigned int &,_CSArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B40CA6B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,unsigned int &,_CSArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>(_QWORD *a1, _QWORD *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6774D20;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B40CA71C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<UUID const&,std::shared_ptr<CSCppSymbolOwner>&>(_QWORD *a1, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *inserted;
  _QWORD v9[3];

  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__construct_node<UUID const&,std::shared_ptr<CSCppSymbolOwner>&>((uint64_t)a1, a2, a3, (uint64_t)v9);
  v4 = (_QWORD *)v9[0];
  v5 = (_QWORD *)(v9[0] + 16);
  v6 = *(_QWORD *)(v9[0] + 24) ^ *(_QWORD *)(v9[0] + 16);
  *(_QWORD *)(v9[0] + 8) = v6;
  inserted = std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_prepare((uint64_t)a1, v6, v5);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_perform(a1, v4, inserted);
  v9[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v4;
}

void sub_1B40CA814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__construct_node<UUID const&,std::shared_ptr<CSCppSymbolOwner>&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = 0;
  *((_OWORD *)result + 1) = *a2;
  v9 = a3[1];
  result[4] = *a3;
  result[5] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_BYTE *)(a4 + 16) = 1;
  result[1] = result[3] ^ result[2];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    if (v19 == a2)
    {
      v21 = v16[2] == *a3 && v16[3] == a3[1];
      v22 = v21;
    }
    else
    {
      v22 = 0;
    }
    v23 = v17 & !v22;
    v17 |= v22;
  }
  while (v23 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
              if (!v13)
                break;
            }
            while (i[2] == v13[2] && i[3] == v13[3]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__equal_range_multi<UUID>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::find<UUID>(a1, a2);
  if (result)
  {
    v4 = result;
    do
    {
      v4 = (_QWORD *)*v4;
      if (!v4)
        break;
    }
    while (v4[2] == *a2 && v4[3] == a2[1]);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::find<UUID>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1] ^ *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2[1] ^ *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1])
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*&,int,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture,char const*&,void>@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*&,int,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture,char const*&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B40CAF14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*&,int,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture,char const*&,std::allocator<CSCppSymbolOwner>,0>(_QWORD *a1, _QWORD *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6774D20;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B40CAF78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t CSPlatformForTask(int a1)
{
  uint64_t platform;

  if ((a1 - 1) > 0xFFFFFFFD || !_dyld_process_info_create())
    return 0;
  platform = _dyld_process_info_get_platform();
  _dyld_process_info_release();
  return platform;
}

BOOL CSTaskIsDriverKit(int a1)
{
  return CSPlatformForTask(a1) == 10;
}

uint64_t CSTaskIsSimulator(int a1)
{
  CSPlatformForTask(a1);
  return dyld_is_simulator_platform();
}

uint64_t CSTaskIs64Bit(task_name_t a1)
{
  _BOOL4 v1;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;

  task_info_outCnt = 1;
  v1 = task_info(a1, 0x1Cu, &task_info_out, &task_info_outCnt) == 0;
  return v1 & task_info_out;
}

uint64_t CSTaskIsTranslated(task_read_t corspe_task)
{
  vm_map_t *v2;
  uint64_t v3;
  mach_vm_size_t v4;
  mach_vm_address_t v5;
  mach_vm_address_t v7;
  mach_vm_address_t v8;
  int x;
  mach_vm_size_t kcd_size;
  mach_vm_address_t kcd_addr_begin;

  kcd_size = 0;
  kcd_addr_begin = 0;
  v2 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  if (!task_map_corpse_info_64(*MEMORY[0x1E0C83DA0], corspe_task, &kcd_addr_begin, &kcd_size))
  {
    v4 = kcd_size + kcd_addr_begin;
    v5 = kcd_addr_begin + 16;
    if (kcd_addr_begin + 16 <= kcd_size + kcd_addr_begin && v5 + *(unsigned int *)(kcd_addr_begin + 4) <= v4)
    {
      v3 = 0;
      if (*(_DWORD *)kcd_addr_begin != -559025833)
        goto LABEL_8;
      v7 = kcd_addr_begin;
      do
      {
        v8 = v5 + *(unsigned int *)(v7 + 4);
        if (v8 > v4 || *(_DWORD *)v7 == -242132755)
          break;
        if (*(_DWORD *)v7 == 2069)
        {
          v3 = (*(unsigned __int8 *)(v7 + 18) >> 1) & 1;
          goto LABEL_8;
        }
        v5 = v8 + 16;
        v7 = v8;
      }
      while (v8 + 16 <= v4);
    }
    v3 = 0;
LABEL_8:
    mach_vm_deallocate(*v2, kcd_addr_begin, kcd_size);
    return v3;
  }
  x = 0;
  if (pid_for_task(corspe_task, &x) || !MEMORY[0x1E0DE2EC0])
    return 0;
  else
    return rosetta_is_process_translated();
}

uint64_t CSTaskHasStarted(uint64_t a1, const char **a2)
{
  int v3;
  unint64_t v4;
  uint64_t result;
  const char *v6;
  unsigned __int8 v7;

  if (!a2)
  {
    result = _dyld_process_info_create();
    if (!result)
      return result;
LABEL_5:
    _dyld_process_info_get_state();
    _dyld_process_info_release();
    HIDWORD(v4) = v7;
    LODWORD(v4) = v7;
    v3 = v4 >> 4;
    if (v3 == 1)
    {
      if (a2)
      {
        v6 = "Process exists but has not fully started -- dyld has initialized but libSystem has not";
        goto LABEL_11;
      }
    }
    else
    {
      if (v3)
        return 1;
      if (a2)
      {
        v6 = "Process exists but has not started -- it is launched-suspended";
LABEL_11:
        result = 0;
        goto LABEL_14;
      }
    }
    return 0;
  }
  *a2 = 0;
  if (_dyld_process_info_create())
    goto LABEL_5;
  result = 0;
  v6 = "Process exists but has not started -- it is launched-suspended (unknown error)";
LABEL_14:
  *a2 = v6;
  return result;
}

uint64_t task_is_64bit(task_name_t a1)
{
  _BOOL4 v1;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;

  task_info_outCnt = 1;
  v1 = task_info(a1, 0x1Cu, &task_info_out, &task_info_outCnt) == 0;
  return v1 & task_info_out;
}

uint64_t CSSymbolOwnerGetDsymVersion(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) & 0x38000000;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsStaticLibraryArchiveEntry(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 109) >> 6) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsRestricted(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 109) >> 7;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsObsolete(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 110) >> 7;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsMutable(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 111) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerUsesCPlusPlus(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 110) >> 5) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerGetDataFlags(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return atomic_load((unsigned int *)(CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL)) + 12));
  else
    return 0;
}

uint64_t CSSymbolOwnerGetDataTypeID(char a1, uint64_t a2)
{
  uint64_t v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

BOOL CSSymbolOwnerHasFaultedData(char a1, uint64_t a2)
{
  char v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 80))
    return 0;
  v2 = atomic_load((unsigned int *)(CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL)) + 12));
  return (v2 & 0x80) == 0;
}

uint64_t CSAddressSetCreate()
{
  CSCppAddressSet *v0;

  v0 = (CSCppAddressSet *)operator new();
  CSCppAddressSet::CSCppAddressSet(v0);
  return 0;
}

void sub_1B40CB49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x10A1C40C3D8C859);
  _Unwind_Resume(a1);
}

uint64_t **CSAddressSetAdd(int a1, uint64_t a2, uint64_t a3)
{
  return CSCppAddressSet::add((uint64_t **)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3);
}

uint64_t **CSAddressSetAddRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;

  *(_QWORD *)&v5 = a3;
  *((_QWORD *)&v5 + 1) = a4;
  return std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>((uint64_t **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16), (unint64_t *)&v5, &v5);
}

uint64_t CSSymbolOwnerGetTransientUserData(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 144);
  else
    return 0;
}

uint64_t CSSymbolOwnerSetTransientUserData(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result & 7 | (8 * (a2 & 3)))
    *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 144) = a3;
  return result;
}

char *CSSymbolOwnerSetPathForSymbolication(char *result, uint64_t a2, char *a3)
{
  if (result & 7 | (8 * (a2 & 3)))
    return CSCppSymbolOwner::set_path_for_symbolication((void **)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3);
  return result;
}

uint64_t CSSymbolOwnerGetPathForSymbolication(char a1, uint64_t a2)
{
  uint64_t result;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  result = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 128);
  if (!result)
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 120);
  return result;
}

uint64_t CSSymbolOwnerMarkAsResymbolicated(uint64_t result, uint64_t a2)
{
  if (result & 7 | (8 * (a2 & 3)))
    *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) & 0xFEFBFFFF | 0x40000;
  return result;
}

uint64_t CSSymbolOwnerNeedsResymbolication(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 110) >> 6) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerCreateSparseDataWithBlock(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return _create_sparse_sod_for_symbol_owner_with_provider<BOOL({block_pointer})(unsigned long,CSUserSuppliedSymbolData *)>(a1, a2, a3, a4);
  else
    return 0;
}

uint64_t _create_sparse_sod_for_symbol_owner_with_provider<BOOL({block_pointer})(unsigned long,CSUserSuppliedSymbolData *)>(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char Symbolicator;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[9];
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 (*v17)(uint64_t, uint64_t);
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3802000000;
  v17 = __Block_byref_object_copy__0;
  v18 = __Block_byref_object_dispose__0;
  v19 = 0;
  v20 = 0;
  Symbolicator = CSSymbolOwnerGetSymbolicator(a1, a2);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___Z49_create_sparse_sod_for_symbol_owner_with_providerIU13block_pointerFbmP24CSUserSuppliedSymbolDataEE10_CSTypeRefS4_bT__block_invoke;
  v12[3] = &unk_1E6774E50;
  v12[7] = a1;
  v12[8] = a2;
  v12[5] = &v14;
  v12[6] = &v21;
  v13 = a3;
  v12[4] = a4;
  if (CSSymbolicatorApplyMutableContextBlock(Symbolicator, v9, (uint64_t)v12) && *((_BYTE *)v22 + 24))
    v10 = v15[5];
  else
    v10 = 0;
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v21, 8);
  return v10;
}

void sub_1B40CB73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolOwnerSetLoadTimestamp(char a1, uint64_t a2, uint64_t a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3))) || (*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 111) & 1) == 0)
    return 0;
  *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 88) = a3;
  return 1;
}

uint64_t CSSymbolOwnerSetUnloadTimestamp(char a1, uint64_t a2, uint64_t a3)
{
  if (!(a1 & 7 | (8 * (a2 & 3))) || (*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 111) & 1) == 0)
    return 0;
  *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 96) = a3;
  return 1;
}

uint64_t CSSymbolOwnerSetPath(char a1, uint64_t a2, char *a3)
{
  unint64_t v3;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 111) & 1) == 0 || *(_QWORD *)(v3 + 80))
    return 0;
  CSCppSymbolOwner::set_path((void **)v3, a3);
  return 1;
}

BOOL CSSymbolOwnerSetRelocationCount(char a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 result;
  _QWORD *v5;
  __int128 v6;
  const char *v7;
  const char *v8;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  result = 0;
  if (a3)
  {
    v5 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) & 0x1000000) != 0)
    {
      if (v5[10])
      {
        return 0;
      }
      else
      {
        v6 = 0uLL;
        v7 = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)"proto", (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
        v8 = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)"proto", 0, (const char *)0x10);
        std::vector<CSCppSegmentRange>::resize((uint64_t)(v5 + 4), a3, &v6);
        return a3 == (uint64_t)(v5[5] - v5[4]) >> 5;
      }
    }
  }
  return result;
}

void std::vector<CSCppSegmentRange>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<CSCppSegmentRange>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t CSSymbolOwnerEditRelocations(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[2];
  int v44;
  uint64_t v45;
  char __dst[8];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v3 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 111) & 1) == 0 || v3[10])
    return 0;
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  v6 = (uint64_t *)v3[4];
  v5 = (uint64_t *)v3[5];
  if (v6 != v5)
  {
    v7 = (_QWORD *)v3[8];
    do
    {
      v45 = ((uint64_t)v6 - v3[4]) >> 5;
      v8 = (_QWORD *)v3[7];
      if (v8 != v7)
      {
        do
        {
          if (*v8 >= (unint64_t)*v6 && v8[1] + *v8 <= (unint64_t)(v6[1] + *v6))
          {
            v9 = v3[7];
            *(_QWORD *)__dst = &v45;
            v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v43, (unint64_t *)&v45, (uint64_t)&std::piecewise_construct, (uint64_t **)__dst);
            v11 = v10;
            v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v9) >> 3);
            v13 = (unint64_t *)v10[4];
            v14 = (uint64_t)(v10 + 5);
            v15 = v10[5];
            if ((unint64_t)v13 >= v15)
            {
              v17 = (unint64_t *)v10[3];
              v18 = v13 - v17;
              if ((unint64_t)(v18 + 1) >> 61)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              v19 = v15 - (_QWORD)v17;
              v20 = (uint64_t)(v15 - (_QWORD)v17) >> 2;
              if (v20 <= v18 + 1)
                v20 = v18 + 1;
              if (v19 >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
              {
                v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14, v21);
                v17 = (unint64_t *)v11[3];
                v13 = (unint64_t *)v11[4];
              }
              else
              {
                v22 = 0;
              }
              v23 = (unint64_t *)&v22[8 * v18];
              *v23 = v12;
              v16 = v23 + 1;
              while (v13 != v17)
              {
                v24 = *--v13;
                *--v23 = v24;
              }
              v11[3] = v23;
              v11[4] = v16;
              v11[5] = &v22[8 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *v13 = v12;
              v16 = v13 + 1;
            }
            v11[4] = v16;
            v7 = (_QWORD *)v3[8];
          }
          v8 += 3;
        }
        while (v8 != v7);
        v5 = (uint64_t *)v3[5];
      }
      v6 += 4;
    }
    while (v6 != v5);
    v25 = (uint64_t *)v3[4];
    if (v25 < v5)
    {
      do
      {
        v26 = *v25;
        v41 = v25[1];
        v42 = v26;
        v27 = (const char *)v25[3];
        if (!v27)
          v27 = (const char *)v25[2];
        strlcpy(__dst, v27, 0x10uLL);
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, char *))(a3 + 16))(a3, &v42, &v41, __dst);
        v28 = v42;
        v29 = *v25;
        v40 = ((uint64_t)v25 - v3[4]) >> 5;
        v45 = (uint64_t)&v40;
        v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v43, (unint64_t *)&v40, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45);
        v31 = (uint64_t *)v30[3];
        v32 = (uint64_t *)v30[4];
        if (v31 != v32)
        {
          v33 = v3[7];
          do
          {
            v34 = *v31++;
            *(_QWORD *)(v33 + 24 * v34) += v28 - v29;
          }
          while (v31 != v32);
        }
        v36 = v41;
        v35 = v42;
        v37 = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)__dst, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
        v38 = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)__dst, 0, (const char *)0x10);
        *v25 = v35;
        v25[1] = v36;
        v25[2] = (uint64_t)v37;
        v25[3] = (uint64_t)v38;
        v25 += 4;
      }
      while ((unint64_t)v25 < v3[5]);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)v43);
  return 1;
}

void sub_1B40CBC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolOwnerMarkAsFromDSC(uint64_t result, uint64_t a2)
{
  int v2;

  if (result & 7 | (8 * (a2 & 3)))
  {
    v2 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108);
    if ((v2 & 0x1000000) != 0)
      *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) = v2 | 0x200;
  }
  return result;
}

uint64_t CSSymbolOwnerAddInContext(char a1, uint64_t a2, char **this)
{
  uint64_t result;
  CSCppSymbolOwner *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  result = 0;
  if (this && a1 & 7 | (8 * (a2 & 3)))
  {
    v5 = (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((*((_BYTE *)v5 + 111) & 1) != 0)
    {
      return 0;
    }
    else
    {
      CSCppMutableContext::add_symbol_owner(this, v5, 0, (uint64_t)&v9);
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      return 3;
    }
  }
  return result;
}

uint64_t CSSymbolOwnerRemoveInContext(char a1, uint64_t a2, CSCppMutableContext *this)
{
  if (this && a1 & 7 | (8 * (a2 & 3)))
    return CSCppMutableContext::remove_symbol_owner(this, (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  else
    return 0;
}

uint64_t CSSymbolOwnerReplaceInContextWithSOD(char a1, uint64_t a2, char a3, uint64_t a4, char **a5)
{
  BOOL v8;
  uint64_t result;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v8 = CSIsNull(a3, a4);
  result = 0;
  if (a5)
  {
    if (!v8)
    {
      CSCppMutableContext::replace_symbol_owner(a5, (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL), (CSCppSymbolOwner *)(a4 & 0xFFFFFFFFFFFFFFFCLL));
      return 3;
    }
  }
  return result;
}

uint64_t CSSymbolOwnerMakeMutableInContext(char a1, uint64_t a2, CSCppMutableContext *this)
{
  uint64_t result;

  result = 0;
  if (this)
  {
    if (a1 & 7 | (8 * (a2 & 3)))
    {
      CSCppMutableContext::make_symbol_owner_mutable(this, (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      return 3;
    }
  }
  return result;
}

BOOL CSSymbolOwnerSegmentsMatch(char a1, uint64_t a2, char a3, uint64_t a4)
{
  BOOL v4;

  if (a1 & 7 | (8 * (a2 & 3)))
    v4 = (a3 & 7 | (8 * (a4 & 3))) == 0;
  else
    v4 = 1;
  return !v4
      && check_if_segments_match((const CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL), (const CSCppSymbolOwner *)(a4 & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t **std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<TRange<Pointer64>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::vector<CSCppSegmentRange>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 5)
  {
    if (a2)
    {
      v16 = 32 * a2;
      v17 = &v9[2 * a2];
      do
      {
        v18 = a3[1];
        *v9 = *a3;
        v9[1] = v18;
        v9 += 2;
        v16 -= 32;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 5);
    if (v11 >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 5;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 4 > v11)
      v11 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v6, v14);
    else
      v15 = 0;
    v19 = &v15[32 * v12];
    v20 = &v19[32 * a2];
    v21 = 32 * a2;
    v22 = v19;
    do
    {
      v23 = a3[1];
      *(_OWORD *)v22 = *a3;
      *((_OWORD *)v22 + 1) = v23;
      v22 += 32;
      v21 -= 32;
    }
    while (v21);
    v24 = &v15[32 * v14];
    v26 = (char *)*a1;
    v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        v27 = *((_OWORD *)v25 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v25 - 2);
        *((_OWORD *)v19 - 1) = v27;
        v19 -= 32;
        v25 -= 32;
      }
      while (v25 != v26);
      v25 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v24;
    if (v25)
      operator delete(v25);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___Z49_create_sparse_sod_for_symbol_owner_with_providerIU13block_pointerFbmP24CSUserSuppliedSymbolDataEE10_CSTypeRefS4_bT__block_invoke(uint64_t a1, CSCppMutableContext *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t MutableInContext;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  void *__p[2];
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __n128 (*v19)(_QWORD *, uint64_t);
  void (*v20)(uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 64);
  v16 = 0;
  v17 = &v16;
  v18 = 0x4002000000;
  v19 = __Block_byref_object_copy__7;
  v20 = __Block_byref_object_dispose__8;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFCLL) + 64) == *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFCLL) + 56))
  {
    v5 = *(_QWORD *)(a1 + 56);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = ___Z49_create_sparse_sod_for_symbol_owner_with_providerIU13block_pointerFbmP24CSUserSuppliedSymbolDataEE10_CSTypeRefS4_bT__block_invoke_9;
    v15[3] = &unk_1E6774E28;
    v15[4] = &v16;
    CSSymbolOwnerForeachSection(v5, v4, (uint64_t)v15);
    v4 = *(_QWORD *)(a1 + 64);
  }
  MutableInContext = CSSymbolOwnerMakeMutableInContext(*(_QWORD *)(a1 + 56), v4, this);
  v8 = v7;
  v9 = CSIsNull(MutableInContext, v7);
  if (!v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_QWORD *)(v10 + 40) = MutableInContext;
    *(_QWORD *)(v10 + 48) = v8;
    v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v11 + 144) = CSCppSymbolOwner::generate_next_unique_private_key((CSCppSymbolOwner *)v9);
    v12 = v17;
    *(_OWORD *)__p = *(_OWORD *)(v17 + 5);
    v14 = v17[7];
    v17[6] = 0;
    v12[7] = 0;
    v12[5] = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = CSCppSymbolOwnerCache::create_symbol_owner_data_with_symbol_generator<BOOL({block_pointer})(unsigned long,CSUserSuppliedSymbolData *)>((CSCppSymbolOwner *)v11, (__int128 *)__p, *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 32));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_DWORD *)(v11 + 108) |= 0x80010000;
  }
  _Block_object_dispose(&v16, 8);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_1B40CC3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___Z49_create_sparse_sod_for_symbol_owner_with_providerIU13block_pointerFbmP24CSUserSuppliedSymbolDataEE10_CSTypeRefS4_bT__block_invoke_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t Range;
  unint64_t v7;
  unint64_t v8;
  CSCppNamedRange *Name;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  char *v23;
  char *v24;
  __int128 v25;

  Range = CSRegionGetRange(a2, a3);
  v8 = v7;
  Name = (CSCppNamedRange *)CSRegionGetName(a2, a3);
  v10 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v11 = (unint64_t *)v10[6];
  v12 = v10[7];
  if ((unint64_t)v11 >= v12)
  {
    v14 = v10[5];
    v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v14) >> 3);
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v15 + 1)
      v17 = v15 + 1;
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(v10 + 7), v18);
      v21 = v20;
    }
    else
    {
      v19 = 0;
      v21 = 0;
    }
    v22 = (unint64_t *)&v19[24 * v15];
    *v22 = Range;
    v22[1] = v8;
    v22[2] = (unint64_t)CSCppNamedRange::unique_macho_string(Name, 0, (const char *)0x21);
    v13 = v22 + 3;
    v24 = (char *)v10[5];
    v23 = (char *)v10[6];
    if (v23 != v24)
    {
      do
      {
        v25 = *(_OWORD *)(v23 - 24);
        *(v22 - 1) = *((_QWORD *)v23 - 1);
        *(_OWORD *)(v22 - 3) = v25;
        v22 -= 3;
        v23 -= 24;
      }
      while (v23 != v24);
      v23 = (char *)v10[5];
    }
    v10[5] = v22;
    v10[6] = v13;
    v10[7] = &v19[24 * v21];
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v11 = Range;
    v11[1] = v8;
    v11[2] = (unint64_t)CSCppNamedRange::unique_macho_string(Name, 0, (const char *)0x21);
    v13 = v11 + 3;
    v10[6] = v11 + 3;
  }
  v10[6] = v13;
}

void sub_1B40CC5E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B40CC8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void CSCppAddressSet::CSCppAddressSet(CSCppAddressSet *this)
{
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E6774E80;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
}

void CSCppAddressSet::~CSCppAddressSet(CSCppAddressSet *this)
{
  *(_QWORD *)this = &off_1E6774E80;
  std::__tree<TRange<Pointer64>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

{
  *(_QWORD *)this = &off_1E6774E80;
  std::__tree<TRange<Pointer64>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  JUMPOUT(0x1B5E36940);
}

uint64_t **CSCppAddressSet::add(uint64_t **this, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)&v3 = a2;
  *((_QWORD *)&v3 + 1) = 1;
  return std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(this + 2, (unint64_t *)&v3, &v3);
}

BOOL CSCppAddressSet::_intersects_range(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;

  v3 = (_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
  {
    do
    {
      v5 = v4[4];
      v6 = a2 >= v5;
      if (a2 >= v5)
        v7 = v4 + 1;
      else
        v7 = v4;
      if (!v6)
        v3 = v4;
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
  }
  if (v3 == *(_QWORD **)(a1 + 16))
    return 0;
  v8 = (_QWORD *)*v3;
  if (*v3)
  {
    do
    {
      v9 = v8;
      v8 = (_QWORD *)v8[1];
    }
    while (v8);
  }
  else
  {
    do
    {
      v9 = (_QWORD *)v3[2];
      v10 = *v9 == (_QWORD)v3;
      v3 = v9;
    }
    while (v10);
  }
  v11 = v9[4];
  return v11 < a3 + a2 && a2 < v9[5] + v11;
}

void std::__tree<TRange<Pointer64>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<TRange<Pointer64>>::destroy(a1, *a2);
    std::__tree<TRange<Pointer64>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

BOOL CSArchitectureIsI386(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return CSCppArchitecture::matches((CSCppArchitecture *)&v2, 0x300000007uLL);
}

BOOL CSArchitectureMatchesArchitecture(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  return CSCppArchitecture::matches((CSCppArchitecture *)&v3, a2);
}

BOOL CSArchitectureIsX86_64(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return CSCppArchitecture::matches((CSCppArchitecture *)&v2, 0x301000007uLL);
}

BOOL CSArchitectureIsArm(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return CSCppArchitecture::matches((CSCppArchitecture *)&v2, 0xCuLL);
}

BOOL CSArchitectureIsArm64(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return CSCppArchitecture::matches((CSCppArchitecture *)&v2, 0x100000CuLL);
}

uint64_t CSArchitectureIs32Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v2) ^ 1;
}

void sub_1B40CCBF8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B40CCBECLL);
}

uint64_t CSArchitectureIs64Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v2);
}

void sub_1B40CCC2C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B40CCC20);
}

uint64_t CSArchitectureIsLittleEndian(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v2);
}

void sub_1B40CCC60(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B40CCC54);
}

uint64_t CSArchitectureIsBigEndian(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v2) ^ 1;
}

void sub_1B40CCC98(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B40CCC8CLL);
}

uint64_t CSArchitectureGetFamily(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = 0x301000007;
  v3 = a1;
  if (!CSCppArchitecture::matches((CSCppArchitecture *)&v3, 0x301000007uLL))
  {
    v1 = 0x300000007;
    if (!CSCppArchitecture::matches((CSCppArchitecture *)&v3, 0x300000007uLL))
    {
      v1 = 12;
      if (!CSCppArchitecture::matches((CSCppArchitecture *)&v3, 0xCuLL))
      {
        v1 = 16777228;
        if (!CSCppArchitecture::matches((CSCppArchitecture *)&v3, 0x100000CuLL))
        {
          v1 = 33554444;
          if (!CSCppArchitecture::matches((CSCppArchitecture *)&v3, 0x200000CuLL))
            return 0;
        }
      }
    }
  }
  return v1;
}

const char *CSArchitectureGetFamilyName(uint64_t a1)
{
  int v3;
  uint64_t v4;

  v4 = a1;
  if (CSCppArchitecture::matches((CSCppArchitecture *)&v4, 0x300000007uLL))
    return "i386";
  if ((_DWORD)v4 == 16777223 && HIDWORD(v4) == 8)
    return "x86_64h";
  if (CSCppArchitecture::matches((CSCppArchitecture *)&v4, 0x301000007uLL))
    return "x86_64";
  if ((_DWORD)v4 == 12)
  {
    v3 = HIDWORD(v4) - 5;
    if ((HIDWORD(v4) - 5) < 8 && ((0xF7u >> v3) & 1) != 0)
      return off_1E6774EB8[v3];
  }
  if (CSCppArchitecture::matches((CSCppArchitecture *)&v4, 0xCuLL))
    return "arm";
  if (v4 == 0x20100000CLL)
    return "arm64e";
  if (CSCppArchitecture::matches((CSCppArchitecture *)&v4, 0x200000CuLL))
    return "arm64_32";
  if (CSCppArchitecture::matches((CSCppArchitecture *)&v4, 0x100000CuLL))
    return "arm64";
  return "unknown";
}

unint64_t CSArchitectureGetArchitectureForName(const char *a1)
{
  CSCppArchitecture *v2;
  uint64_t v3;
  uint64_t v5;

  if (a1)
  {
    if (!strncmp(a1, "any", 4uLL))
      return -1;
    if (!strncmp(a1, "any64bit", 9uLL))
      return -64;
    v2 = (CSCppArchitecture *)strncmp(a1, "current", 8uLL);
    if (!(_DWORD)v2)
      return CSCppArchitecture::current_architecture(v2);
    if (!strncmp(a1, "i386", 5uLL))
    {
      v5 = 7;
    }
    else
    {
      if (strncmp(a1, "x86_64", 7uLL))
      {
        if (!strncmp(a1, "x86_64h", 8uLL))
          return 0x801000007;
        if (!strncmp(a1, "arm", 4uLL))
          return 12;
        if (!strncmp(a1, "armv4t", 7uLL))
          return 0x50000000CLL;
        if (!strncmp(a1, "armv5tej", 9uLL))
          return 0x70000000CLL;
        if (!strncmp(a1, "armv6", 6uLL))
          return 0x60000000CLL;
        if (!strncmp(a1, "armv7", 6uLL))
          return 0x90000000CLL;
        if (!strncmp(a1, "armv7f", 7uLL))
          return 0xA0000000CLL;
        if (!strncmp(a1, "armv7k", 7uLL))
          return 0xC0000000CLL;
        if (!strncmp(a1, "armv7s", 7uLL))
          return 0xB0000000CLL;
        v3 = 0x10100000CLL;
        if (!strncmp(a1, "arm64", 6uLL) || !strncmp(a1, "arm64v8", 8uLL))
          return v3;
        if (!strncmp(a1, "arm64_32", 9uLL))
          return 33554444;
        if (!strncmp(a1, "arm64_32v8", 0xBuLL))
          return 0x10200000CLL;
        if (!strncmp(a1, "arm64e", 7uLL))
          return 0x20100000CLL;
        return 0;
      }
      v5 = 16777223;
    }
    return v5 & 0xFFFF0000FFFFFFFFLL | 0x300000000;
  }
  return 0;
}

uint64_t CSRetain(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *exception;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  switch(a1 & 7 | (8 * (a2 & 3)))
  {
    case 0:
      return a1;
    case 2:
    case 8:
    case 9:
      v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_5;
    case 3:
      v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_3;
    case 4:
    case 5:
    case 6:
    case 7:
    case 0xALL:
      v3 = a1 & 0xFFFFFFFFFFFFFFF8;
LABEL_3:
      v4 = *(_QWORD *)(v3 + 8);
LABEL_5:
      CSCppReferenceCount::retain(v4);
      return a1;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unimplemented: ", 15);
      v7 = utility_basename("/Library/Caches/com.apple.xbs/Sources/CoreSymbolication/CoreSymbolication/CSBase.cpp");
      v8 = strlen(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v14, &v12);
      Exception::Exception(v11, &v12);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v11);
  }
}

void sub_1B40CD29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSCppReferenceCount::retain(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  if (!v2)
    CSCppReferenceCount::retain();
  return this;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B40CD3DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E368EC](v1);
  _Unwind_Resume(a1);
}

_QWORD *Exception::Exception(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &off_1E6774F08;
  v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1B40CD45C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E368EC](a1 + 112);
  return a1;
}

unsigned int *CSRelease(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  switch(result & 7 | (8 * (a2 & 3)))
  {
    case 0:
      return result;
    case 2:
    case 8:
    case 9:
      v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
      return CSCppReferenceCount::release(v3, 1);
    case 3:
      v2 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_3;
    case 4:
    case 5:
    case 6:
    case 7:
    case 0xALL:
      v2 = (unint64_t)result & 0xFFFFFFFFFFFFFFF8;
LABEL_3:
      v3 = *(unsigned int **)(v2 + 8);
      return CSCppReferenceCount::release(v3, 1);
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Attempt to release an unhandled typeID", 38);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
      Exception::Exception(v5, &v6);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v5);
  }
}

void sub_1B40CD5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSGetRetainCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *exception;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1 & 7 | (8 * (a2 & 3));
  switch((int)v2)
  {
    case 0:
      return v2;
    case 2:
    case 8:
    case 9:
      v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      return atomic_load((unsigned int *)(v4 + 8));
    case 3:
      v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_3;
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
      v3 = a1 & 0xFFFFFFFFFFFFFFF8;
LABEL_3:
      v4 = *(_QWORD *)(v3 + 8);
      return atomic_load((unsigned int *)(v4 + 8));
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unimplemented: ", 15);
      v7 = utility_basename("/Library/Caches/com.apple.xbs/Sources/CoreSymbolication/CoreSymbolication/CSBase.cpp");
      v8 = strlen(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v14, &v12);
      Exception::Exception(v11, &v12);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v11);
  }
}

void sub_1B40CD75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL CSEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL CSIsNull(char a1, char a2)
{
  return (a1 & 7 | (8 * (a2 & 3))) == 0;
}

_QWORD *Exception::Exception(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &off_1E6774F08;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1B40CD824(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void Exception::~Exception(std::exception *this)
{
  Exception::~Exception(this);
  JUMPOUT(0x1B5E36940);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E6774F08;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

uint64_t Exception::what(Exception *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

unsigned int *CSCppReferenceCount::release(unsigned int *this, int a2)
{
  unsigned int *v2;
  signed int v3;

  v2 = this + 2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - a2, v2));
  if (v3 < a2)
    CSCppReferenceCount::release();
  if (this)
  {
    if (v3 == a2)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1B5E367D8](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1B5E367E4](v13);
  return a1;
}

void sub_1B40CDA0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1B5E367E4](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B40CD9ECLL);
}

void sub_1B40CDA54(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1B40CDB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t FlatbufferEncoder::getFBSFlags(uint64_t a1, char a2, uint64_t a3)
{
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned int v7;

  if (CSIsNull(a2, a3))
    return 0;
  v5 = (unsigned __int16 *)((a3 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a3 & 0xFFFFFFFFFFFFFFFCLL));
  v6 = *v5;
  if ((a2 & 7 | (8 * (a3 & 3))) != 0xA)
  {
    if (v6 < 0x13)
      return 0;
    v7 = v5[9];
    if (!v7)
      return 0;
    return *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + v7);
  }
  if (v6 >= 0x11)
  {
    v7 = v5[8];
    if (v7)
      return *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + v7);
  }
  return 0;
}

uint64_t FlatbufferEncoder::doesAddressSetAllowSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t Range;
  uint64_t v6;

  Range = CSSymbolGetRange(a2, a3);
  v6 = *(_QWORD *)(a1 + 160);
  if (v6)
    return CSCppAddressSet::_intersects_range(v6, Range, v4);
  else
    return 1;
}

uint64_t FlatbufferEncoder::doesAddressSetAllowSourceInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t Range;
  uint64_t v6;

  Range = CSSourceInfoGetRange(a2, a3);
  v6 = *(_QWORD *)(a1 + 160);
  if (v6)
    return CSCppAddressSet::_intersects_range(v6, Range, v4);
  else
    return 1;
}

uint64_t FlatbufferEncoder::addressOfPrimaryExecutableForSymbolOwner(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t (*v12)();
  char v13;
  char v14;

  if (!CSSymbolOwnerIsKextBundle(a2, a3))
    return CSSymbolOwnerGetBaseAddress(a2, a3);
  v8 = 0;
  v9 = &v8;
  v10 = 0x3802000000;
  v11 = __Block_byref_object_copy__1;
  v12 = __Block_byref_object_dispose__1;
  v13 = 0;
  v14 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK17FlatbufferEncoder40addressOfPrimaryExecutableForSymbolOwnerE10_CSTypeRef_block_invoke;
  v7[3] = &unk_1E6774F28;
  v7[4] = &v8;
  CSSymbolOwnerForeachSegment(a2, a3, (uint64_t)v7);
  if (!*((_BYTE *)v9 + 48))
  {
    _Block_object_dispose(&v8, 8);
    return CSSymbolOwnerGetBaseAddress(a2, a3);
  }
  v5 = v9[5];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1B40CDF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FlatbufferEncoder::encodeSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *Name;
  size_t v7;
  int SharedString;
  int v9;
  unint64_t Range;
  uint64_t v11;
  uint64_t v12;

  Name = CSRegionGetName(a2, a3);
  v7 = strlen(Name);
  SharedString = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, Name, v7);
  *(_BYTE *)(a1 + 78) = 1;
  v9 = *(_DWORD *)(a1 + 40);
  Range = CSRegionGetRange(a2, a3);
  v12 = v11;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, Range, -1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v12, 0);
  if (SharedString)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, SharedString);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v9);
}

uint64_t FlatbufferEncoder::encodeSourceInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *Path;
  const char *SharedString;
  size_t v8;
  int v9;
  unint64_t Range;
  int v11;
  int v12;
  int LineNumber;
  int Column;

  Path = CSSourceInfoGetPath(a2, a3);
  SharedString = Path;
  if (Path)
  {
    v8 = strlen(Path);
    SharedString = (const char *)flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, SharedString, v8);
  }
  *(_BYTE *)(a1 + 78) = 1;
  v9 = *(_DWORD *)(a1 + 40);
  Range = CSSourceInfoGetRange(a2, a3);
  v12 = v11;
  LineNumber = CSSourceInfoGetLineNumber(a2, a3);
  Column = CSSourceInfoGetColumn(a2, a3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, Range, -1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 14, v12, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, LineNumber, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 10, Column, 0);
  if (SharedString)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, (int)SharedString);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v9);
}

uint64_t FlatbufferEncoder::encodeInlinedSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  char *Name;
  const char *MangledName;
  size_t v14;
  size_t v15;
  int SharedString;
  int v17;
  unint64_t Range;
  uint64_t v19;
  uint64_t v20;
  uint64_t Flags;
  uint64_t FBSFlags;
  uint64_t v23;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __n128 (*v29)(_QWORD *, uint64_t);
  void (*v30)(uint64_t);
  void *__p;
  void *v32;
  uint64_t v33;

  v8 = FlatbufferEncoder::encodeSourceInfo(a1, a4, a5);
  v26 = 0;
  v27 = &v26;
  v28 = 0x4002000000;
  v29 = __Block_byref_object_copy__4;
  v30 = __Block_byref_object_dispose__5;
  v32 = 0;
  v33 = 0;
  __p = 0;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 0x40000000;
  v25[2] = ___ZN17FlatbufferEncoder19encodeInlinedSymbolE10_CSTypeRefS0__block_invoke;
  v25[3] = &unk_1E6774F50;
  v25[4] = &v26;
  v25[5] = a1;
  CSSymbolForeachInlineRangeAtDepth(a2, a3, 1, (uint64_t)v25);
  v9 = v27[6] - v27[5];
  if (v9)
    v10 = (unsigned int *)v27[5];
  else
    v10 = (unsigned int *)&flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>> &)::t;
  v11 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::InlineSymbol>(a1, v10, v9 >> 2);
  if (*(_BYTE *)(a1 + 154))
    Name = 0;
  else
    Name = CSSymbolGetName(a2, a3);
  MangledName = (const char *)CSSymbolGetMangledName(a2, a3);
  if (Name)
  {
    v14 = strlen(Name);
    LODWORD(Name) = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, Name, v14);
  }
  if (MangledName)
  {
    v15 = strlen(MangledName);
    SharedString = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, MangledName, v15);
  }
  else
  {
    SharedString = 0;
  }
  *(_BYTE *)(a1 + 78) = 1;
  v17 = *(_DWORD *)(a1 + 40);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 12, v8);
  if (v11)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 14, v11);
  if ((_DWORD)Name)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 10, (int)Name);
  if (SharedString)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 8, SharedString);
  Range = CSSymbolGetRange(a2, a3);
  v20 = v19;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 4, Range, -1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v20, 0);
  Flags = CSSymbolGetFlags(a2, a3);
  if (*(_BYTE *)(a1 + 107))
    FBSFlags = ((unint64_t)Flags >> 1) & 8 | Flags & 0x1E7 | ((unint64_t)Flags >> 5) & 0x10 | ((unint64_t)Flags >> 16) & 0x1E00;
  else
    FBSFlags = FlatbufferEncoder::getFBSFlags(Flags, a2, a3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 16, FBSFlags, 0);
  v23 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v17);
  _Block_object_dispose(&v26, 8);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  return v23;
}

void sub_1B40CE4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a15, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN17FlatbufferEncoder19encodeInlinedSymbolE10_CSTypeRefS0__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  int v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;

  v7 = FlatbufferEncoder::encodeInlinedSymbol(*(_QWORD *)(a1 + 40), *(_QWORD *)(a4 + 16 * a6 - 16), *(_QWORD *)(a4 + 16 * a6 - 16 + 8), *(_QWORD *)(a5 + 16 * a6 - 16), *(_QWORD *)(a5 + 16 * a6 - 16 + 8));
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v10 = (char *)v9[6];
    v11 = v9[7];
    if ((unint64_t)v10 >= v11)
    {
      v13 = (char *)v9[5];
      v14 = (v10 - v13) >> 2;
      if ((unint64_t)(v14 + 1) >> 62)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v15 = v11 - (_QWORD)v13;
      v16 = (uint64_t)(v11 - (_QWORD)v13) >> 1;
      if (v16 <= v14 + 1)
        v16 = v14 + 1;
      if (v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v9 + 7), v17);
        v13 = (char *)v9[5];
        v10 = (char *)v9[6];
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[4 * v14];
      v20 = &v18[4 * v17];
      *(_DWORD *)v19 = v8;
      v12 = v19 + 4;
      while (v10 != v13)
      {
        v21 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v19 - 1) = v21;
        v19 -= 4;
      }
      v9[5] = v19;
      v9[6] = v12;
      v9[7] = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_DWORD *)v10 = v7;
      v12 = v10 + 4;
    }
    v9[6] = v12;
  }
}

uint64_t FlatbufferEncoder::encodeLookupEntry(uint64_t a1, int a2, int a3)
{
  int v5;

  if (!a2 || !a3)
    return 0;
  *(_BYTE *)(a1 + 78) = 1;
  v5 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, a3);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, a2);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v5);
}

uint64_t FlatbufferEncoder::encodeSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t InstructionData;
  int v12;
  const unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  char *Name;
  const char *MangledName;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  unint64_t Range;
  uint64_t v28;
  uint64_t v29;
  uint64_t Flags;
  uint64_t FBSFlags;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v60;
  _QWORD v61[6];
  _QWORD v62[6];
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  __n128 (*v66)(_QWORD *, uint64_t);
  void (*v67)(uint64_t);
  void *__p;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  __n128 (*v74)(_QWORD *, uint64_t);
  void (*v75)(uint64_t);
  void *v76;
  void *v77;
  uint64_t v78;

  v71 = 0;
  v72 = &v71;
  v73 = 0x4002000000;
  v74 = __Block_byref_object_copy__8;
  v75 = __Block_byref_object_dispose__9;
  v77 = 0;
  v78 = 0;
  v76 = 0;
  v63 = 0;
  v64 = &v63;
  v65 = 0x4002000000;
  v66 = __Block_byref_object_copy__4;
  v67 = __Block_byref_object_dispose__5;
  v69 = 0;
  v70 = 0;
  __p = 0;
  v10 = MEMORY[0x1E0C809B0];
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 0x40000000;
  v62[2] = ___ZN17FlatbufferEncoder12encodeSymbolE10_CSTypeRefRNSt3__16vectorIN11flatbuffers6OffsetIN17FlatbufferSymbols15SymbolNameEntryEEENS1_9allocatorIS7_EEEESB__block_invoke;
  v62[3] = &unk_1E6774F78;
  v62[4] = &v71;
  v62[5] = a1;
  CSSymbolForeachSourceInfo(a2, a3, (uint64_t)v62);
  v61[0] = v10;
  v61[1] = 0x40000000;
  v61[2] = ___ZN17FlatbufferEncoder12encodeSymbolE10_CSTypeRefRNSt3__16vectorIN11flatbuffers6OffsetIN17FlatbufferSymbols15SymbolNameEntryEEENS1_9allocatorIS7_EEEESB__block_invoke_2;
  v61[3] = &unk_1E6774FA0;
  v61[4] = &v63;
  v61[5] = a1;
  CSSymbolForeachInlineRangeAtDepth(a2, a3, 1, (uint64_t)v61);
  if (v64[5] != v64[6])
    *(_BYTE *)(a1 + 109) = 1;
  if (v72[5] != v72[6])
    *(_BYTE *)(a1 + 110) = 1;
  if (*(_BYTE *)(a1 + 105))
  {
    InstructionData = CSSymbolGetInstructionData(a2, a3);
    v12 = 0;
    if (*(_BYTE *)(a1 + 105))
    {
      v13 = (const unsigned __int8 *)InstructionData;
      if (InstructionData)
      {
        CSSymbolGetRange(a2, a3);
        v12 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(a1, v13, v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v60 = a5;
  v15 = v72[6] - v72[5];
  if (v15)
    v16 = (unsigned int *)v72[5];
  else
    v16 = (unsigned int *)&flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>> &)::t;
  v17 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::SourceInfo>(a1, v16, v15 >> 2);
  v18 = v64[6] - v64[5];
  if (v18)
    v19 = (unsigned int *)v64[5];
  else
    v19 = (unsigned int *)&flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>> &)::t;
  v20 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::InlineSymbol>(a1, v19, v18 >> 2);
  if (*(_BYTE *)(a1 + 154))
    Name = 0;
  else
    Name = CSSymbolGetName(a2, a3);
  MangledName = (const char *)CSSymbolGetMangledName(a2, a3);
  if (Name)
  {
    v23 = strlen(Name);
    LODWORD(Name) = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, Name, v23);
  }
  if (MangledName)
  {
    v24 = strlen(MangledName);
    LODWORD(MangledName) = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, MangledName, v24);
  }
  *(_BYTE *)(a1 + 78) = 1;
  v25 = *(_DWORD *)(a1 + 40);
  if (v17)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 12, v17);
  if (v20)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 16, v20);
  if ((_DWORD)Name)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 10, (int)Name);
  v26 = (int)MangledName;
  if ((_DWORD)MangledName)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 8, (int)MangledName);
  Range = CSSymbolGetRange(a2, a3);
  v29 = v28;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 4, Range, -1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v29, 0);
  if (v12)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 14, v12);
  Flags = CSSymbolGetFlags(a2, a3);
  if (*(_BYTE *)(a1 + 107))
    FBSFlags = ((unint64_t)Flags >> 1) & 8 | Flags & 0x1E7 | ((unint64_t)Flags >> 5) & 0x10 | ((unint64_t)Flags >> 16) & 0x1E00;
  else
    FBSFlags = FlatbufferEncoder::getFBSFlags(Flags, a2, a3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 18, FBSFlags, 0);
  v32 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v25);
  v33 = FlatbufferEncoder::encodeLookupEntry(a1, v32, (int)Name);
  v34 = FlatbufferEncoder::encodeLookupEntry(a1, v32, v26);
  if ((_DWORD)Name)
  {
    v35 = *(_QWORD *)(a4 + 16);
    v36 = *(_DWORD **)(a4 + 8);
    if ((unint64_t)v36 >= v35)
    {
      v38 = *(_DWORD **)a4;
      v39 = ((uint64_t)v36 - *(_QWORD *)a4) >> 2;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62)
        goto LABEL_77;
      v41 = v35 - (_QWORD)v38;
      if (v41 >> 1 > v40)
        v40 = v41 >> 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
        v42 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>(a4 + 16, v42);
        v38 = *(_DWORD **)a4;
        v36 = *(_DWORD **)(a4 + 8);
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[4 * v39];
      v45 = &v43[4 * v42];
      *(_DWORD *)v44 = v33;
      v37 = v44 + 4;
      while (v36 != v38)
      {
        v46 = *--v36;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
      *(_QWORD *)a4 = v44;
      *(_QWORD *)(a4 + 8) = v37;
      *(_QWORD *)(a4 + 16) = v45;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v36 = v33;
      v37 = v36 + 1;
    }
    *(_QWORD *)(a4 + 8) = v37;
  }
  if (!v34)
    goto LABEL_72;
  v47 = *(_QWORD *)(v60 + 16);
  v48 = *(_DWORD **)(v60 + 8);
  if ((unint64_t)v48 >= v47)
  {
    v50 = *(_DWORD **)v60;
    v51 = ((uint64_t)v48 - *(_QWORD *)v60) >> 2;
    v52 = v51 + 1;
    if (!((unint64_t)(v51 + 1) >> 62))
    {
      v53 = v47 - (_QWORD)v50;
      if (v53 >> 1 > v52)
        v52 = v53 >> 1;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
        v54 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54)
      {
        v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>(v60 + 16, v54);
        v50 = *(_DWORD **)v60;
        v48 = *(_DWORD **)(v60 + 8);
      }
      else
      {
        v55 = 0;
      }
      v56 = &v55[4 * v51];
      v57 = &v55[4 * v54];
      *(_DWORD *)v56 = v34;
      v49 = v56 + 4;
      while (v48 != v50)
      {
        v58 = *--v48;
        *((_DWORD *)v56 - 1) = v58;
        v56 -= 4;
      }
      *(_QWORD *)v60 = v56;
      *(_QWORD *)(v60 + 8) = v49;
      *(_QWORD *)(v60 + 16) = v57;
      if (v50)
        operator delete(v50);
      goto LABEL_71;
    }
LABEL_77:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  *v48 = v34;
  v49 = v48 + 1;
LABEL_71:
  *(_QWORD *)(v60 + 8) = v49;
LABEL_72:
  _Block_object_dispose(&v63, 8);
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v71, 8);
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  return v32;
}

void sub_1B40CEC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  _Block_object_dispose(&a22, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a30, 8);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN17FlatbufferEncoder12encodeSymbolE10_CSTypeRefRNSt3__16vectorIN11flatbuffers6OffsetIN17FlatbufferSymbols15SymbolNameEntryEEENS1_9allocatorIS7_EEEESB__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;

  v6 = *(_QWORD *)(a1 + 40);
  if (FlatbufferEncoder::doesAddressSetAllowSourceInfo(v6, a2, a3))
  {
    v7 = FlatbufferEncoder::encodeSourceInfo(v6, a2, a3);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
      v10 = (char *)v9[6];
      v11 = v9[7];
      if ((unint64_t)v10 >= v11)
      {
        v13 = (char *)v9[5];
        v14 = (v10 - v13) >> 2;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)v13;
        v16 = (uint64_t)(v11 - (_QWORD)v13) >> 1;
        if (v16 <= v14 + 1)
          v16 = v14 + 1;
        if (v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v9 + 7), v17);
          v13 = (char *)v9[5];
          v10 = (char *)v9[6];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        v20 = &v18[4 * v17];
        *(_DWORD *)v19 = v8;
        v12 = v19 + 4;
        while (v10 != v13)
        {
          v21 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        v9[5] = v19;
        v9[6] = v12;
        v9[7] = v20;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v10 = v7;
        v12 = v10 + 4;
      }
      v9[6] = v12;
    }
  }
}

void ___ZN17FlatbufferEncoder12encodeSymbolE10_CSTypeRefRNSt3__16vectorIN11flatbuffers6OffsetIN17FlatbufferSymbols15SymbolNameEntryEEENS1_9allocatorIS7_EEEESB__block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;

  v7 = *(_QWORD *)(a1 + 40);
  v8 = 16 * a6 - 16;
  v9 = *(_QWORD *)(a4 + v8);
  v10 = *(_QWORD *)(a4 + v8 + 8);
  v11 = (uint64_t *)(a5 + v8);
  v12 = *v11;
  v13 = v11[1];
  if (FlatbufferEncoder::doesAddressSetAllowSymbol(v7, v9, v10))
  {
    v14 = FlatbufferEncoder::encodeInlinedSymbol(v7, v9, v10, v12, v13);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
      v17 = (char *)v16[6];
      v18 = v16[7];
      if ((unint64_t)v17 >= v18)
      {
        v20 = (char *)v16[5];
        v21 = (v17 - v20) >> 2;
        if ((unint64_t)(v21 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v22 = v18 - (_QWORD)v20;
        v23 = (uint64_t)(v18 - (_QWORD)v20) >> 1;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v16 + 7), v24);
          v20 = (char *)v16[5];
          v17 = (char *)v16[6];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[4 * v21];
        v27 = &v25[4 * v24];
        *(_DWORD *)v26 = v15;
        v19 = v26 + 4;
        while (v17 != v20)
        {
          v28 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v26 - 1) = v28;
          v26 -= 4;
        }
        v16[5] = v26;
        v16[6] = v19;
        v16[7] = v27;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v17 = v14;
        v19 = v17 + 4;
      }
      v16[6] = v19;
    }
  }
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(uint64_t a1, const unsigned __int8 *a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 78) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign<unsigned int>((char *)a1, a3);
  if (a3)
  {
    if (!*(_QWORD *)(a1 + 80))
      *(_QWORD *)(a1 + 80) = 1;
    flatbuffers::vector_downward::push((_QWORD *)a1, a2, a3);
  }
  *(_BYTE *)(a1 + 78) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((flatbuffers::vector_downward *)a1, a3);
}

char *FlatbufferEncoder::fbsSegmentNameFromCSSegmentName(FlatbufferEncoder *this, char *__s1)
{
  if (__s1 && !strstr(__s1, " SEGMENT"))
    strlen(__s1);
  return __s1;
}

uint64_t FlatbufferEncoder::encodeSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t Range;
  uint64_t v8;
  uint64_t v9;
  uint64_t SymbolOwner;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  const unsigned __int8 *v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  int v23;
  unsigned int *v24;
  unsigned int *v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  int v29;
  FlatbufferEncoder *Name;
  char *v31;
  unint64_t v32;
  int SharedString;
  int v34;
  void *v35;
  uint64_t v36;
  _QWORD v38[5];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[6];
  _QWORD v44[8];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __n128 (*v48)(_QWORD *, uint64_t);
  void (*v49)(uint64_t);
  void *__p;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  __n128 (*v56)(_QWORD *, uint64_t);
  void (*v57)(uint64_t);
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  __n128 (*v64)(_QWORD *, uint64_t);
  void (*v65)(uint64_t);
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  __n128 (*v72)(_QWORD *, uint64_t);
  void (*v73)(uint64_t);
  void *v74;
  void *v75;
  uint64_t v76;

  v69 = 0;
  v70 = &v69;
  v71 = 0x4002000000;
  v72 = __Block_byref_object_copy__13;
  v73 = __Block_byref_object_dispose__14;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v61 = 0;
  v62 = &v61;
  v63 = 0x4002000000;
  v64 = __Block_byref_object_copy__15;
  v65 = __Block_byref_object_dispose__16;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v53 = 0;
  v54 = &v53;
  v55 = 0x4002000000;
  v56 = __Block_byref_object_copy__17;
  v57 = __Block_byref_object_dispose__18;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  v45 = 0;
  v46 = &v45;
  v47 = 0x4002000000;
  v48 = __Block_byref_object_copy__17;
  v49 = __Block_byref_object_dispose__18;
  v51 = 0;
  v52 = 0;
  __p = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    v6 = MEMORY[0x1E0C809B0];
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 0x40000000;
    v44[2] = ___ZN17FlatbufferEncoder13encodeSegmentE10_CSTypeRef_block_invoke;
    v44[3] = &unk_1E6774FC8;
    v44[4] = &v53;
    v44[5] = &v45;
    v44[6] = &v69;
    v44[7] = a1;
    CSRegionForeachSymbol(a2, a3, (uint64_t)v44);
    v43[0] = v6;
    v43[1] = 0x40000000;
    v43[2] = ___ZN17FlatbufferEncoder13encodeSegmentE10_CSTypeRef_block_invoke_2;
    v43[3] = &unk_1E6774FF0;
    v43[4] = &v61;
    v43[5] = a1;
    CSSegmentForeachSection(a2, a3, (uint64_t)v43);
  }
  Range = CSRegionGetRange(a2, a3);
  v9 = v8;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2000000000;
  v42 = 0;
  if (*(_BYTE *)(a1 + 106))
  {
    SymbolOwner = CSRegionGetSymbolOwner(a2, a3);
    v11 = SymbolOwner;
    v13 = v12;
    v14 = FlatbufferEncoder::addressOfPrimaryExecutableForSymbolOwner(SymbolOwner, SymbolOwner, v12);
    if (v15)
    {
      if (Range == v14)
      {
        v38[0] = MEMORY[0x1E0C809B0];
        v38[1] = 0x40000000;
        v38[2] = ___ZN17FlatbufferEncoder13encodeSegmentE10_CSTypeRef_block_invoke_3;
        v38[3] = &unk_1E6775018;
        v38[4] = &v39;
        CSSymbolOwnerGetContentForRange(v11, v13, Range, v9, (uint64_t)v38);
      }
    }
  }
  v16 = (const unsigned __int8 *)v40[3];
  if (v16)
    v17 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(a1, v16, v9);
  else
    v17 = 0;
  v18 = (unsigned int *)v70[5];
  v19 = (unsigned int *)v70[6];
  if (v19 == v18)
    v20 = 0;
  else
    v20 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::Symbol>(a1, v18, v19 - v18);
  v21 = (unsigned int *)v62[5];
  v22 = (unsigned int *)v62[6];
  if (v22 == v21)
    v23 = 0;
  else
    v23 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::Section>(a1, v21, v22 - v21);
  v24 = (unsigned int *)v54[5];
  v25 = (unsigned int *)v54[6];
  if (v25 == v24)
    v26 = 0;
  else
    v26 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::SymbolNameEntry>(a1, v24, v25 - v24);
  v27 = (unsigned int *)v46[5];
  v28 = (unsigned int *)v46[6];
  if (v28 == v27)
    v29 = 0;
  else
    v29 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::SymbolNameEntry>(a1, v27, v28 - v27);
  Name = (FlatbufferEncoder *)CSRegionGetName(a2, a3);
  v31 = FlatbufferEncoder::fbsSegmentNameFromCSSegmentName(Name, (char *)Name);
  SharedString = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, v31, v32);
  *(_BYTE *)(a1 + 78) = 1;
  v34 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, SharedString);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, Range, -1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v9, 0);
  if (v20)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 10, v20);
  if (v23)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 22, v23);
  if (v26)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 26, v26);
  if (v29)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 24, v29);
  if (v17)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 12, v17);
  v35 = (void *)v40[3];
  if (v35)
    free(v35);
  v36 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v34);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v45, 8);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v53, 8);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  _Block_object_dispose(&v61, 8);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  _Block_object_dispose(&v69, 8);
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  return v36;
}

void sub_1B40CF480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  uint64_t v46;
  void *v48;
  void *v49;

  _Block_object_dispose(&a14, 8);
  _Block_object_dispose(&a32, 8);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a40, 8);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Block_object_dispose((const void *)(v46 - 232), 8);
  v48 = *(void **)(v46 - 192);
  if (v48)
  {
    *(_QWORD *)(v46 - 184) = v48;
    operator delete(v48);
  }
  _Block_object_dispose((const void *)(v46 - 168), 8);
  v49 = *(void **)(v46 - 128);
  if (v49)
  {
    *(_QWORD *)(v46 - 120) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__15(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__17(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN17FlatbufferEncoder13encodeSegmentE10_CSTypeRef_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;

  v6 = a1[7];
  if (FlatbufferEncoder::doesAddressSetAllowSymbol(v6, a2, a3))
  {
    v7 = FlatbufferEncoder::encodeSymbol(v6, a2, a3, *(_QWORD *)(a1[4] + 8) + 40, *(_QWORD *)(a1[5] + 8) + 40);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD **)(a1[6] + 8);
      v10 = (char *)v9[6];
      v11 = v9[7];
      if ((unint64_t)v10 >= v11)
      {
        v13 = (char *)v9[5];
        v14 = (v10 - v13) >> 2;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)v13;
        v16 = (uint64_t)(v11 - (_QWORD)v13) >> 1;
        if (v16 <= v14 + 1)
          v16 = v14 + 1;
        if (v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v9 + 7), v17);
          v13 = (char *)v9[5];
          v10 = (char *)v9[6];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        v20 = &v18[4 * v17];
        *(_DWORD *)v19 = v8;
        v12 = v19 + 4;
        while (v10 != v13)
        {
          v21 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        v9[5] = v19;
        v9[6] = v12;
        v9[7] = v20;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v10 = v7;
        v12 = v10 + 4;
      }
      v9[6] = v12;
    }
  }
}

void ___ZN17FlatbufferEncoder13encodeSegmentE10_CSTypeRef_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v4 = FlatbufferEncoder::encodeSection(*(_QWORD *)(a1 + 40), a2, a3);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v7 = (char *)v6[6];
    v8 = v6[7];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (char *)v6[5];
      v11 = (v7 - v10) >> 2;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)v10;
      v13 = (uint64_t)(v8 - (_QWORD)v10) >> 1;
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v6 + 7), v14);
        v10 = (char *)v6[5];
        v7 = (char *)v6[6];
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *(_DWORD *)v16 = v5;
      v9 = v16 + 4;
      while (v7 != v10)
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      v6[5] = v16;
      v6[6] = v9;
      v6[7] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_DWORD *)v7 = v4;
      v9 = v7 + 4;
    }
    v6[6] = v9;
  }
}

uint64_t FlatbufferEncoder::encodeCPUArch(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  int v4;

  v3 = HIDWORD(a2);
  *(_BYTE *)(a1 + 78) = 1;
  v4 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 6, a2, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, v3, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v4);
}

uint64_t FlatbufferEncoder::encodeTimeRange(FlatbufferEncoder *this, uint64_t a2, uint64_t a3)
{
  int v5;

  if (!a2 || !a3)
    return 0;
  *((_BYTE *)this + 78) = 1;
  v5 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 4, a2, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 6, a3, 0);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v5);
}

uint64_t FlatbufferEncoder::symbolOwnerDataSource(uint64_t a1, char a2, uint64_t a3)
{
  if (!*(_BYTE *)(a1 + 104))
    return 0;
  if (CSSymbolOwnerGetDsymPath(a2, a3))
    return 4;
  if (CSSymbolOwnerIsDyldSharedCache(a2, a3))
    return 1;
  return 2;
}

uint64_t FlatbufferEncoder::encodeSymbolOwnerMetadata(uint64_t a1, char a2, uint64_t a3)
{
  UUID *CFUUIDBytes;
  size_t v7;
  uint64_t SharedString;
  uint64_t Path;
  uint64_t Name;
  size_t v11;
  size_t v12;
  uint64_t Architecture;
  const char *FamilyName;
  int v15;
  size_t v16;
  const char *Version;
  const char *v18;
  size_t v19;
  const char *DsymPath;
  const char *v21;
  size_t v22;
  uint64_t v23;
  int v24;
  char v26[40];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes(a2, a3);
  if (CFUUIDBytes)
  {
    CSUUIDCFUUIDBytesToString(CFUUIDBytes, v26, 40);
    v7 = strlen(v26);
    SharedString = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, v26, v7);
  }
  else
  {
    SharedString = 0;
  }
  Path = CSSymbolOwnerGetPath(a2, a3);
  Name = CSSymbolOwnerGetName(a2, a3);
  if (Path)
  {
    v11 = strlen((const char *)Path);
    Path = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, (const char *)Path, v11);
  }
  if (Name)
  {
    v12 = strlen((const char *)Name);
    Name = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, (const char *)Name, v12);
  }
  Architecture = CSSymbolOwnerGetArchitecture(a2, a3);
  FamilyName = CSArchitectureGetFamilyName(Architecture);
  v15 = FlatbufferEncoder::encodeCPUArch(a1, Architecture);
  if (FamilyName)
  {
    v16 = strlen(FamilyName);
    FamilyName = (const char *)flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, FamilyName, v16);
  }
  Version = (const char *)CSSymbolOwnerGetVersion(a2, a3);
  v18 = Version;
  if (Version)
  {
    v19 = strlen(Version);
    v18 = (const char *)flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, v18, v19);
  }
  if (*(_BYTE *)(a1 + 104) && (DsymPath = (const char *)CSSymbolOwnerGetDsymPath(a2, a3), (v21 = DsymPath) != 0))
  {
    v22 = strlen(DsymPath);
    v23 = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, v21, v22);
  }
  else
  {
    v23 = 0;
  }
  *(_BYTE *)(a1 + 78) = 1;
  v24 = *(_DWORD *)(a1 + 40);
  if (SharedString)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, SharedString);
  if (Path)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, Path);
  if (!*(_BYTE *)(a1 + 152) && Name)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 18, Name);
  if (v15)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 12, v15);
  if (FamilyName)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 14, (int)FamilyName);
  if (v18)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 22, (int)v18);
  if (v23)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 24, v23);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v24);
}

uint64_t FlatbufferEncoder::encodeDyldEvent(FlatbufferEncoder *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  BOOL v5;
  int v8;

  v2 = *((_QWORD *)this + 14);
  if (!v2)
    return 0;
  v4 = *((_QWORD *)this + 15);
  v5 = !v4 || v2 > a2;
  if (v5 || v4 < a2)
    return 0;
  *((_BYTE *)this + 78) = 1;
  v8 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 4, a2, 0);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v8);
}

uint64_t FlatbufferEncoder::encodeSymbolOwner(uint64_t a1, char a2, uint64_t a3)
{
  int IsDyldSharedCache;
  UUID *CFUUIDBytes;
  size_t v8;
  int SharedString;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  int v13;
  int v14;
  unint64_t LoadTimestamp;
  int v16;
  unint64_t UnloadTimestamp;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  _QWORD v38[6];
  char __s[8];
  char *v40;
  uint64_t v41;
  __n128 (*v42)(_QWORD *, uint64_t);
  void (*v43)(uint64_t);
  void *__p;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  IsDyldSharedCache = CSSymbolOwnerIsDyldSharedCache(a2, a3);
  if (IsDyldSharedCache && *(_BYTE *)(a1 + 152))
  {
    CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes(a2, a3);
    if (CFUUIDBytes)
    {
      CSUUIDCFUUIDBytesToString(CFUUIDBytes, __s, 40);
      v8 = strlen(__s);
      SharedString = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, __s, v8);
    }
    else
    {
      SharedString = 0;
    }
    v25 = *(_QWORD *)(a1 + 144);
    v26 = *(char **)(a1 + 136);
    if ((unint64_t)v26 >= v25)
    {
      v28 = *(char **)(a1 + 128);
      v29 = (v26 - v28) >> 2;
      if ((unint64_t)(v29 + 1) >> 62)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v30 = v25 - (_QWORD)v28;
      v31 = (uint64_t)(v25 - (_QWORD)v28) >> 1;
      if (v31 <= v29 + 1)
        v31 = v29 + 1;
      if (v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>(a1 + 144, v32);
        v28 = *(char **)(a1 + 128);
        v26 = *(char **)(a1 + 136);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[4 * v29];
      v35 = &v33[4 * v32];
      *(_DWORD *)v34 = SharedString;
      v27 = v34 + 4;
      while (v26 != v28)
      {
        v36 = *((_DWORD *)v26 - 1);
        v26 -= 4;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      *(_QWORD *)(a1 + 128) = v34;
      *(_QWORD *)(a1 + 136) = v27;
      *(_QWORD *)(a1 + 144) = v35;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_DWORD *)v26 = SharedString;
      v27 = v26 + 4;
    }
    v24 = 0;
    *(_QWORD *)(a1 + 136) = v27;
  }
  else
  {
    if (*(_BYTE *)(a1 + 104))
      *(_BYTE *)(a1 + 107) = CSSymbolOwnerGetDataTypeID(a2, a3) != 5;
    *(_QWORD *)__s = 0;
    v40 = __s;
    v41 = 0x4002000000;
    v42 = __Block_byref_object_copy__23;
    v43 = __Block_byref_object_dispose__24;
    v45 = 0;
    v46 = 0;
    __p = 0;
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 0x40000000;
    v38[2] = ___ZN17FlatbufferEncoder17encodeSymbolOwnerE10_CSTypeRef_block_invoke;
    v38[3] = &unk_1E6775040;
    v38[4] = __s;
    v38[5] = a1;
    CSSymbolOwnerForeachSegment(a2, a3, (uint64_t)v38);
    v10 = *((_QWORD *)v40 + 6) - *((_QWORD *)v40 + 5);
    if (v10)
      v11 = (unsigned int *)*((_QWORD *)v40 + 5);
    else
      v11 = (unsigned int *)&flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::Segment>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::Segment>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> &)::t;
    v12 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::Segment>(a1, v11, v10 >> 2);
    v13 = FlatbufferEncoder::encodeSymbolOwnerMetadata(a1, a2, a3);
    v14 = FlatbufferEncoder::symbolOwnerDataSource(a1, a2, a3);
    LoadTimestamp = CSSymbolOwnerGetLoadTimestamp(a2, a3);
    v16 = FlatbufferEncoder::encodeDyldEvent((FlatbufferEncoder *)a1, LoadTimestamp);
    UnloadTimestamp = CSSymbolOwnerGetUnloadTimestamp(a2, a3);
    v18 = FlatbufferEncoder::encodeDyldEvent((FlatbufferEncoder *)a1, UnloadTimestamp);
    *(_BYTE *)(a1 + 78) = 1;
    v19 = *(_DWORD *)(a1 + 40);
    if (v12)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 8, v12);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, IsDyldSharedCache, 0);
    if (v13)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, v13);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 1, 0);
    v20 = flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 16, v14, 0);
    if (v16)
      v20 = flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 18, v16);
    if (v18)
      v20 = flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 20, v18);
    v21 = FlatbufferEncoder::addressOfPrimaryExecutableForSymbolOwner((uint64_t)v20, a2, a3);
    if (v22)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v21, -1);
    }
    else
    {
      v23 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((flatbuffers::vector_downward *)a1, 0);
      flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 10, v23);
    }
    v24 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v19);
    _Block_object_dispose(__s, 8);
    if (__p)
    {
      v45 = __p;
      operator delete(__p);
    }
  }
  return v24;
}

void sub_1B40D0058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__23(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN17FlatbufferEncoder17encodeSymbolOwnerE10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v4 = FlatbufferEncoder::encodeSegment(*(_QWORD *)(a1 + 40), a2, a3);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v7 = (char *)v6[6];
    v8 = v6[7];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (char *)v6[5];
      v11 = (v7 - v10) >> 2;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)v10;
      v13 = (uint64_t)(v8 - (_QWORD)v10) >> 1;
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v6 + 7), v14);
        v10 = (char *)v6[5];
        v7 = (char *)v6[6];
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *(_DWORD *)v16 = v5;
      v9 = v16 + 4;
      while (v7 != v10)
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      v6[5] = v16;
      v6[6] = v9;
      v6[7] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_DWORD *)v7 = v4;
      v9 = v7 + 4;
    }
    v6[6] = v9;
  }
}

uint64_t FlatbufferEncoder::encodeTranslatedImageInfo(FlatbufferEncoder *this, uint64_t a2, uint64_t a3, uint64_t a4, const unsigned __int8 *a5, unint64_t a6)
{
  int v10;
  int v11;

  v10 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>((uint64_t)this, a5, a6);
  *((_BYTE *)this + 78) = 1;
  v11 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 4, a2, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 6, a3, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 8, a4, 0);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)this, 10, v10);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v11);
}

uint64_t FlatbufferEncoder::encodeProcessAddressSpaceMetadata(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t Pid;
  char AOutSymbolOwner;
  uint64_t v8;
  UUID *CFUUIDBytes;
  size_t v10;
  uint64_t SharedString;
  unsigned int *v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 (*v22)(_QWORD *, uint64_t);
  void (*v23)(uint64_t);
  void *__p;
  void *v25;
  uint64_t v26;
  char __s[40];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((CSSymbolicatorIsKernelSymbolicator(a2, a3) & 1) != 0)
    Pid = 0;
  else
    Pid = (int)CSSymbolicatorGetPid(a2, a3);
  AOutSymbolOwner = CSSymbolicatorGetAOutSymbolOwner(a2, a3);
  CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes(AOutSymbolOwner, v8);
  if (CFUUIDBytes)
  {
    CSUUIDCFUUIDBytesToString(CFUUIDBytes, __s, 40);
    v10 = strlen(__s);
    SharedString = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, __s, v10);
  }
  else
  {
    SharedString = 0;
  }
  v19 = 0;
  v20 = &v19;
  v21 = 0x4002000000;
  v22 = __Block_byref_object_copy__26;
  v23 = __Block_byref_object_dispose__27;
  v25 = 0;
  v26 = 0;
  __p = 0;
  CSSymbolicatorForEachAotImage();
  v12 = (unsigned int *)v20[5];
  v13 = (unsigned int *)v20[6];
  if (v13 == v12)
    v14 = 0;
  else
    v14 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::TranslatedImageInfo>(a1, v12, v13 - v12);
  v15 = FlatbufferEncoder::encodeTimeRange((FlatbufferEncoder *)a1, *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  *(_BYTE *)(a1 + 78) = 1;
  v16 = *(_DWORD *)(a1 + 40);
  if (SharedString)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 10, SharedString);
  if (v14)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 12, v14);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, Pid, -1);
  if (v15)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 14, v15);
  v17 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v16);
  _Block_object_dispose(&v19, 8);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  return v17;
}

void sub_1B40D0488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a15, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__26(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN17FlatbufferEncoder33encodeProcessAddressSpaceMetadataE10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const unsigned __int8 *a5, unint64_t a6)
{
  _QWORD *v6;
  int v7;
  int v8;
  char *v9;
  unint64_t v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;

  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = FlatbufferEncoder::encodeTranslatedImageInfo(*(FlatbufferEncoder **)(a1 + 40), a2, a3, a4, a5, a6);
  v8 = v7;
  v9 = (char *)v6[6];
  v10 = v6[7];
  if ((unint64_t)v9 >= v10)
  {
    v12 = (char *)v6[5];
    v13 = (v9 - v12) >> 2;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v14 = v10 - (_QWORD)v12;
    v15 = (uint64_t)(v10 - (_QWORD)v12) >> 1;
    if (v15 <= v13 + 1)
      v15 = v13 + 1;
    if (v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v6 + 7), v16);
      v12 = (char *)v6[5];
      v9 = (char *)v6[6];
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v19 = &v17[4 * v16];
    *(_DWORD *)v18 = v8;
    v11 = v18 + 4;
    while (v9 != v12)
    {
      v20 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    v6[5] = v18;
    v6[6] = v11;
    v6[7] = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_DWORD *)v9 = v7;
    v11 = v9 + 4;
  }
  v6[6] = v11;
  return 1;
}

uint64_t FlatbufferEncoder::encodeUnslidSharedCacheAddressSpaceMetadata(uint64_t a1, char a2, uint64_t a3)
{
  CSCppDyldSplitSharedCacheMemory *SharedCacheUUID;
  uint64_t SharedCacheBaseAddress;
  uint64_t result;
  uint64_t v9;
  size_t v10;
  int SharedString;
  std::string *p_p;
  size_t v13;
  int v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t Architecture;
  const char *FamilyName;
  int v21;
  size_t v22;
  int v23;
  int v24;
  unsigned int v25;
  std::string __p;
  uint64_t v27;
  char __s[40];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  SharedCacheUUID = (CSCppDyldSplitSharedCacheMemory *)CSSymbolicatorGetSharedCacheUUID(a2, a3);
  SharedCacheBaseAddress = CSSymbolicatorGetSharedCacheBaseAddress(a2, a3);
  result = 0;
  if (!SharedCacheBaseAddress || !SharedCacheUUID)
    return result;
  CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(SharedCacheUUID, &__p);
  v9 = v27;
  CSUUIDCFUUIDBytesToString(SharedCacheUUID, __s, 40);
  v10 = strlen(__s);
  SharedString = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, __s, v10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    p_p = &__p;
LABEL_6:
    v13 = strlen((const char *)p_p);
    v14 = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, (const char *)p_p, v13);
    v15 = strlen((const char *)p_p);
    if (v15)
    {
      v16 = 0;
      v17 = (char *)p_p + v15;
      while (v15 + v16)
      {
        v18 = v17[--v16];
        if (v18 == 47)
        {
          if (v15 + v16 != -1)
          {
            if (v15 <= v15 + v16)
              std::__throw_out_of_range[abi:ne180100]("string_view::substr");
            if (v16 != -1)
            {
              LODWORD(p_p) = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, &v17[v16 + 1], ~v16);
              goto LABEL_15;
            }
          }
          break;
        }
      }
    }
    LODWORD(p_p) = 0;
    goto LABEL_15;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
    goto LABEL_6;
  v14 = 0;
LABEL_15:
  Architecture = CSSymbolicatorGetArchitecture(a2, a3);
  FamilyName = CSArchitectureGetFamilyName(Architecture);
  v21 = FlatbufferEncoder::encodeCPUArch(a1, Architecture);
  if (FamilyName)
  {
    v22 = strlen(FamilyName);
    v23 = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, FamilyName, v22);
  }
  else
  {
    v23 = 0;
  }
  *(_BYTE *)(a1 + 78) = 1;
  v24 = *(_DWORD *)(a1 + 40);
  if (SharedString)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, SharedString);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 20, v9, -1);
  if (v14)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, v14);
  if ((_DWORD)p_p)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 18, (int)p_p);
  if (v21)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 12, v21);
  if (v23)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 14, v23);
  v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v25;
}

void sub_1B40D0894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FlatbufferEncoder::encodeMachOAddressSpaceMetadata(uint64_t a1, char a2, uint64_t a3)
{
  char SymbolOwner;
  uint64_t v5;
  uint64_t v6;

  SymbolOwner = CSSymbolicatorGetSymbolOwner(a2, a3);
  v6 = v5;
  if (CSIsNull(SymbolOwner, v5))
    return 0;
  else
    return FlatbufferEncoder::encodeSymbolOwnerMetadata(a1, SymbolOwner, v6);
}

uint64_t FlatbufferEncoder::encodeAOTSharedCache(uint64_t a1, char a2, uint64_t a3)
{
  UUID *AotSharedCacheUUID;
  uint64_t AotSharedCacheAddress;
  uint64_t result;
  size_t v9;
  int SharedString;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  char v16[40];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  AotSharedCacheUUID = CSSymbolicatorGetAotSharedCacheUUID(a2, a3);
  AotSharedCacheAddress = CSSymbolicatorGetAotSharedCacheAddress(a2, a3);
  result = 0;
  if (AotSharedCacheAddress && AotSharedCacheUUID)
  {
    CSUUIDCFUUIDBytesToString(AotSharedCacheUUID, v16, 40);
    v9 = strlen(v16);
    SharedString = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, v16, v9);
    v11 = flatbuffers::FlatBufferBuilder::CreateSharedString((flatbuffers::FlatBufferBuilder *)a1, "aot_shared_cache", 0x10uLL);
    *(_BYTE *)(a1 + 78) = 1;
    v12 = *(_DWORD *)(a1 + 40);
    if (SharedString)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, SharedString);
    if (v11)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 18, v11);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 20, AotSharedCacheAddress, -1);
    v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v12);
    *(_BYTE *)(a1 + 78) = 1;
    v14 = *(_DWORD *)(a1 + 40);
    v15 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((flatbuffers::vector_downward *)a1, 0);
    flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 8, v15);
    if (v13)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, v13);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 1, 0);
    return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v14);
  }
  return result;
}

uint64_t FlatbufferEncoder::encodeSharedCache(uint64_t a1, char a2, uint64_t a3)
{
  UUID *SharedCacheUUID;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;

  SharedCacheUUID = CSSymbolicatorGetSharedCacheUUID(a2, a3);
  if (!CSSymbolicatorGetSharedCacheBaseAddress(a2, a3) || !SharedCacheUUID)
    return 0;
  v7 = FlatbufferEncoder::encodeUnslidSharedCacheAddressSpaceMetadata(a1, a2, a3);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 136) - v10;
  if (v11 && *(_BYTE *)(a1 + 152))
    v12 = flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, v10, v11 >> 2);
  else
    v12 = 0;
  *(_BYTE *)(a1 + 78) = 1;
  v14 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v9, -1);
  if (v7)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, v7);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 1, 0);
  if (v12)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 10, v12);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v14);
}

void FlatbufferEncoder::encodeCSSymbolicatorWithSymbolOwnerOffsets(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  char v44;
  int v45;
  void *__p;
  char *v47;
  char *v48;

  v9 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v9)
    v10 = *a4;
  else
    v10 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>> const&)::t;
  v11 = flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)v10, v9 >> 2);
  if (CSSymbolicatorGetPid(a2, a3) == -1 && (CSSymbolicatorIsKernelSymbolicator(a2, a3) & 1) == 0)
  {
    v13 = FlatbufferEncoder::encodeMachOAddressSpaceMetadata(a1, a2, a3);
    v12 = 0;
    v14 = 0;
  }
  else
  {
    v12 = FlatbufferEncoder::encodeProcessAddressSpaceMetadata(a1, a2, a3);
    v13 = 0;
    v14 = 1;
  }
  __p = 0;
  v47 = 0;
  v48 = 0;
  v15 = FlatbufferEncoder::encodeSharedCache(a1, a2, a3);
  if (v15)
  {
    v16 = (v47 - (_BYTE *)__p) >> 2;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v18 = v48 - (_BYTE *)__p;
    if ((v48 - (_BYTE *)__p) >> 1 > v17)
      v17 = v18 >> 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v48, v19);
    else
      v20 = 0;
    v21 = &v20[4 * v16];
    *(_DWORD *)v21 = v15;
    __p = v21;
    v48 = &v20[4 * v19];
    v47 = v21 + 4;
  }
  v22 = FlatbufferEncoder::encodeAOTSharedCache(a1, a2, a3);
  v23 = v22;
  v24 = v47;
  if (v22)
  {
    if (v47 >= v48)
    {
      v26 = (char *)__p;
      v27 = (v47 - (_BYTE *)__p) >> 2;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v29 = v48 - (_BYTE *)__p;
      if ((v48 - (_BYTE *)__p) >> 1 > v28)
        v28 = v29 >> 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
        v30 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v48, v30);
        v26 = (char *)__p;
        v24 = v47;
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[4 * v27];
      v33 = &v31[4 * v30];
      *(_DWORD *)v32 = v23;
      v25 = v32 + 4;
      while (v24 != v26)
      {
        v34 = *((_DWORD *)v24 - 1);
        v24 -= 4;
        *((_DWORD *)v32 - 1) = v34;
        v32 -= 4;
      }
      __p = v32;
      v47 = v25;
      v48 = v33;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_DWORD *)v47 = v22;
      v25 = v24 + 4;
    }
    v47 = v25;
    v24 = v25;
  }
  if (__p == v24)
    v35 = 0;
  else
    v35 = flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)__p, (v24 - (_BYTE *)__p) >> 2);
  *(_BYTE *)(a1 + 78) = 1;
  v36 = *(_DWORD *)(a1 + 40);
  if (v11)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 8, v11);
  if (v35)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 10, v35);
  if (v14)
  {
    if (v12)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, v12);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 1, 0);
  }
  else
  {
    if (v13)
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, v13);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 2, 0);
  }
  v45 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v36);
  v37 = flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)&v45, 1);
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(_BYTE *)(a1 + 108))
      v38 = 1;
    else
      v38 = 2;
  }
  else
  {
    v38 = 0;
  }
  if (*(_BYTE *)(a1 + 105) || (v39 = *(unsigned __int8 *)(a1 + 106), *(_BYTE *)(a1 + 106)))
    v39 = 1;
  if (*(_BYTE *)(a1 + 109))
    v39 |= 2u;
  if (*(_BYTE *)(a1 + 110))
    v40 = v39 | 4;
  else
    v40 = v39;
  *(_BYTE *)(a1 + 78) = 1;
  v41 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 10, v40, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, v38, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, v37);
  v42 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v41);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a1, v42, "SYMB", 0);
  if (v42)
  {
    v43 = *(unsigned int *)(a1 + 40);
    *(_QWORD *)a5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a5 + 8) = v43;
    v44 = 1;
  }
  else
  {
    v44 = 0;
    *(_BYTE *)a5 = 0;
  }
  *(_BYTE *)(a5 + 16) = v44;
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B40D1038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  *(_BYTE *)(a1 + 78) = 1;
  v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign<unsigned int>((char *)a1, 4 * a3);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 80) <= 3uLL)
      *(_QWORD *)(a1 + 80) = 4;
    flatbuffers::vector_downward::fill((char *)a1, -*(_DWORD *)(a1 + 40) & 3);
  }
  if (a3)
  {
    v7 = a2 - 4;
    v8 = a3;
    do
    {
      v9 = v8 - 1;
      v10 = flatbuffers::FlatBufferBuilder::ReferTo((flatbuffers::FlatBufferBuilder *)a1, *(_DWORD *)(v7 + 4 * v8));
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((flatbuffers::vector_downward *)a1, v10);
      v8 = v9;
    }
    while (v9);
  }
  *(_BYTE *)(a1 + 78) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((flatbuffers::vector_downward *)a1, a3);
}

void FlatbufferEncoder::encodeCSSymbolOwner(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, unsigned int a6@<W5>, _BYTE *a7@<X8>)
{
  int v14;
  _DWORD *v15;
  uint64_t v16;
  char Symbolicator;
  uint64_t v18;
  void *v19;
  __int128 v20;
  _DWORD *v21;
  void *__p[2];
  _DWORD *v23;

  if (CSIsNull(a2, a3))
  {
    *a7 = 0;
    a7[16] = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = a4;
    *(_BYTE *)(a1 + 105) = a4 & (a6 >> 2);
    *(_BYTE *)(a1 + 106) = (a6 & 0x10) != 0;
    *(_QWORD *)(a1 + 160) = a5;
    if (a5 || (CSSymbolOwnerGetFlags(a2, a3) & 0x10000) != 0)
      *(_BYTE *)(a1 + 108) = 1;
    __p[0] = 0;
    __p[1] = 0;
    v23 = 0;
    v14 = FlatbufferEncoder::encodeSymbolOwner(a1, a2, a3);
    if (v14)
    {
      v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v23, 1uLL);
      *v15 = v14;
      __p[0] = v15;
      v23 = &v15[v16];
      __p[1] = v15 + 1;
    }
    Symbolicator = CSSymbolOwnerGetSymbolicator(a2, a3);
    v19 = __p[0];
    v20 = *(_OWORD *)__p;
    v21 = v23;
    __p[1] = 0;
    v23 = 0;
    __p[0] = 0;
    FlatbufferEncoder::encodeCSSymbolicatorWithSymbolOwnerOffsets(a1, Symbolicator, v18, (void **)&v20, (uint64_t)a7);
    if (v19)
      operator delete(v19);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1B40D1290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FlatbufferEncoder::encodeCSSymbolicator(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, unsigned int a6@<W5>, unint64_t a7@<X6>, unint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __n128 (*v28)(_QWORD *, uint64_t);
  void (*v29)(uint64_t);
  void *__p;
  void *v31;
  uint64_t v32;

  if (CSIsNull(a2, a3))
  {
    *a9 = 0;
    a9[16] = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = a4;
    *(_BYTE *)(a1 + 105) = a4 & (a6 >> 2);
    *(_BYTE *)(a1 + 106) = (a6 & 0x10) != 0;
    *(_QWORD *)(a1 + 160) = a5;
    if (a7 < a8 && a8 != 0x7FFFFFFFFFFFFFFFLL && a7 && a8)
    {
      v18 = 0;
      *(_QWORD *)(a1 + 112) = a7;
      *(_QWORD *)(a1 + 120) = a8;
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 112) == 0;
    }
    v25 = 0;
    v26 = &v25;
    v27 = 0x4002000000;
    v28 = __Block_byref_object_copy__31;
    v29 = __Block_byref_object_dispose__32;
    v31 = 0;
    v32 = 0;
    __p = 0;
    v19 = 0x8000000000000000;
    if (!v18 && *(_QWORD *)(a1 + 120))
      v19 = 0x8000000000000001;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 0x40000000;
    v24[2] = ___ZN17FlatbufferEncoder20encodeCSSymbolicatorE10_CSTypeRefbP15CSCppAddressSetjyy_block_invoke;
    v24[3] = &unk_1E6775090;
    v24[4] = &v25;
    v24[5] = a1;
    CSSymbolicatorForeachSymbolOwnerAtTime(a2, a3, v19, (uint64_t)v24);
    v20 = v26;
    v22 = *(_OWORD *)(v26 + 5);
    v21 = (void *)v22;
    v23 = v26[7];
    v26[6] = 0;
    v20[7] = 0;
    v20[5] = 0;
    FlatbufferEncoder::encodeCSSymbolicatorWithSymbolOwnerOffsets(a1, a2, a3, (void **)&v22, (uint64_t)a9);
    if (v21)
      operator delete(v21);
    _Block_object_dispose(&v25, 8);
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B40D1478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__31(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN17FlatbufferEncoder20encodeCSSymbolicatorE10_CSTypeRefbP15CSCppAddressSetjyy_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  int v4;
  int v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v4 = FlatbufferEncoder::encodeSymbolOwner(*(_QWORD *)(a1 + 40), a2, a3);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v7 = (char *)v6[6];
    v8 = v6[7];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (char *)v6[5];
      v11 = (v7 - v10) >> 2;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)v10;
      v13 = (uint64_t)(v8 - (_QWORD)v10) >> 1;
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v6 + 7), v14);
        v10 = (char *)v6[5];
        v7 = (char *)v6[6];
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *(_DWORD *)v16 = v5;
      v9 = v16 + 4;
      while (v7 != v10)
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      v6[5] = v16;
      v6[6] = v9;
      v6[7] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_DWORD *)v7 = v4;
      v9 = v7 + 4;
    }
    v6[6] = v9;
  }
}

void FlatbufferEncoder::encodeCSSymbolicator(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, unsigned int a5@<W4>, unint64_t a6@<X5>, unint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  FlatbufferEncoder::encodeCSSymbolicator(a1, a2, a3, a4, 0, a5, a6, a7, a8);
}

uint64_t FlatbufferEncoder::encodeCSSymbolicatorIntoOffset(uint64_t a1, char a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v10;
  int Pid;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char *__p;
  char *v43;
  uint64_t v44;
  _QWORD v45[6];
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __n128 (*v49)(_QWORD *, uint64_t);
  void (*v50)(uint64_t);
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[5];

  if (CSIsNull(a2, a3))
    return 0;
  Pid = CSSymbolicatorGetPid(a2, a3);
  v12 = MEMORY[0x1E0C809B0];
  if (Pid == -1 && !CSSymbolicatorIsKernelSymbolicator(a2, a3)
    || (CSSymbolicatorIsKernelSymbolicator(a2, a3) & 1) != 0)
  {
    v46 = 0;
    v47 = &v46;
    v48 = 0x2000000000;
    LOBYTE(v49) = 0;
    v54[0] = v12;
    v54[1] = 0x40000000;
    v54[2] = ___ZN17FlatbufferEncoder30encodeCSSymbolicatorIntoOffsetE10_CSTypeRefyy_block_invoke;
    v54[3] = &unk_1E67750B8;
    v54[4] = &v46;
    CSSymbolicatorForeachSymbolOwnerAtTime(a2, a3, 0x8000000000000000, (uint64_t)v54);
    if (!*((_BYTE *)v47 + 24))
      *(_BYTE *)(a1 + 153) = 1;
    _Block_object_dispose(&v46, 8);
  }
  else
  {
    *(_WORD *)(a1 + 152) = 1;
    v13 = *(_QWORD *)(a1 + 128);
    if (*(_QWORD *)(a1 + 136) != v13)
      *(_QWORD *)(a1 + 136) = v13;
  }
  if (a4 < a5 && a5 != 0x7FFFFFFFFFFFFFFFLL && a4 && a5)
  {
    *(_QWORD *)(a1 + 112) = a4;
    *(_QWORD *)(a1 + 120) = a5;
  }
  if (*(_BYTE *)(a1 + 153))
  {
    v14 = 0;
  }
  else
  {
    v14 = FlatbufferEncoder::encodeProcessAddressSpaceMetadata(a1, a2, a3);
    if (!*(_BYTE *)(a1 + 153))
    {
      v15 = 0;
      goto LABEL_20;
    }
  }
  v15 = FlatbufferEncoder::encodeUnslidSharedCacheAddressSpaceMetadata(a1, a2, a3);
LABEL_20:
  v46 = 0;
  v47 = &v46;
  v48 = 0x4002000000;
  v49 = __Block_byref_object_copy__31;
  v50 = __Block_byref_object_dispose__32;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  v16 = 0x8000000000000000;
  if (*(_QWORD *)(a1 + 112) && *(_QWORD *)(a1 + 120))
    v16 = 0x8000000000000001;
  v45[0] = v12;
  v45[1] = 0x40000000;
  v45[2] = ___ZN17FlatbufferEncoder30encodeCSSymbolicatorIntoOffsetE10_CSTypeRefyy_block_invoke_2;
  v45[3] = &unk_1E67750E0;
  v45[4] = &v46;
  v45[5] = a1;
  CSSymbolicatorForeachSymbolOwnerAtTime(a2, a3, v16, (uint64_t)v45);
  v17 = v47[6] - v47[5];
  if (v17)
    v18 = (void *)v47[5];
  else
    v18 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>> const&)::t;
  v19 = flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)v18, v17 >> 2);
  __p = 0;
  v43 = 0;
  v44 = 0;
  v20 = FlatbufferEncoder::encodeSharedCache(a1, a2, a3);
  if (v20)
  {
    v21 = 1;
    if ((unint64_t)(v44 >> 1) > 1)
      v21 = v44 >> 1;
    v22 = v21;
    if (v21)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v44, v21);
    else
      v23 = 0;
    *(_DWORD *)v23 = v20;
    __p = v23;
    v44 = (uint64_t)&v23[4 * v22];
    v43 = v23 + 4;
  }
  v24 = FlatbufferEncoder::encodeAOTSharedCache(a1, a2, a3);
  v25 = v24;
  v26 = v43;
  if (v24)
  {
    if ((unint64_t)v43 >= v44)
    {
      v28 = __p;
      v29 = (v43 - __p) >> 2;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v31 = v44 - (_QWORD)__p;
      if ((v44 - (uint64_t)__p) >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v44, v32);
        v28 = __p;
        v26 = v43;
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[4 * v29];
      v35 = &v33[4 * v32];
      *(_DWORD *)v34 = v25;
      v27 = v34 + 4;
      while (v26 != v28)
      {
        v36 = *((_DWORD *)v26 - 1);
        v26 -= 4;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      __p = v34;
      v44 = (uint64_t)v35;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_DWORD *)v43 = v24;
      v27 = v43 + 4;
    }
    v26 = v27;
  }
  if (__p == v26)
    v37 = 0;
  else
    v37 = flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)__p, (v26 - __p) >> 2);
  *(_BYTE *)(a1 + 78) = 1;
  v38 = *(_DWORD *)(a1 + 40);
  if (v19)
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 8, v19);
  if (*(_BYTE *)(a1 + 153))
  {
    v39 = 1;
  }
  else
  {
    if (!v37)
    {
      v39 = 0;
      goto LABEL_60;
    }
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 10, v37);
    v39 = *(unsigned __int8 *)(a1 + 153);
    if (!*(_BYTE *)(a1 + 153))
      goto LABEL_60;
  }
  v14 = v15;
LABEL_60:
  if (v14)
  {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, v14);
    v39 = *(unsigned __int8 *)(a1 + 153);
  }
  if (v39)
    v40 = 3;
  else
    v40 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v40, 0);
  v10 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v38);
  if (__p)
    operator delete(__p);
  _Block_object_dispose(&v46, 8);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  return v10;
}

void sub_1B40D1ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17FlatbufferEncoder30encodeCSSymbolicatorIntoOffsetE10_CSTypeRefyy_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;

  result = CSSymbolOwnerIsDyldSharedCache(a2, a3);
  if ((result & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

void ___ZN17FlatbufferEncoder30encodeCSSymbolicatorIntoOffsetE10_CSTypeRefyy_block_invoke_2(uint64_t a1, char a2, uint64_t a3)
{
  int v4;
  int v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v4 = FlatbufferEncoder::encodeSymbolOwner(*(_QWORD *)(a1 + 40), a2, a3);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v7 = (char *)v6[6];
    v8 = v6[7];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (char *)v6[5];
      v11 = (v7 - v10) >> 2;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)v10;
      v13 = (uint64_t)(v8 - (_QWORD)v10) >> 1;
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v6 + 7), v14);
        v10 = (char *)v6[5];
        v7 = (char *)v6[6];
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *(_DWORD *)v16 = v5;
      v9 = v16 + 4;
      while (v7 != v10)
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      v6[5] = v16;
      v6[6] = v9;
      v6[7] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_DWORD *)v7 = v4;
      v9 = v7 + 4;
    }
    v6[6] = v9;
  }
}

uint64_t FlatbufferEncoder::encodeSymbolicatorOffsets@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char v16;

  v5 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (v5)
    v6 = *a2;
  else
    v6 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>> const&)::t;
  v7 = flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)v6, v5 >> 2);
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(_BYTE *)(a1 + 108))
      v8 = 1;
    else
      v8 = 2;
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(a1 + 105) || (v9 = *(unsigned __int8 *)(a1 + 106), *(_BYTE *)(a1 + 106)))
    v9 = 1;
  if (*(_BYTE *)(a1 + 109))
    v9 |= 2u;
  if (*(_BYTE *)(a1 + 110))
    v10 = v9 | 4;
  else
    v10 = v9;
  v11 = v7;
  *(_BYTE *)(a1 + 78) = 1;
  v12 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 10, v10, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, v8, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 6, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((char *)a1, 4, v11);
  v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v12);
  result = flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a1, v13, "SYMB", 0);
  if (v13)
  {
    v15 = *(unsigned int *)(a1 + 40);
    *(_QWORD *)a3 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a3 + 8) = v15;
    v16 = 1;
  }
  else
  {
    v16 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v16;
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateSharedString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t **v9;
  unsigned int *p_String;
  unsigned int String;

  if (!*((_QWORD *)this + 12))
  {
    v6 = (_QWORD *)operator new();
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = this;
    *v6 = v6 + 1;
    *((_QWORD *)this + 12) = v6;
  }
  v7 = *((_DWORD *)this + 10);
  String = flatbuffers::FlatBufferBuilder::CreateString(this, a2, a3);
  v8 = std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::find<flatbuffers::Offset<flatbuffers::String>>(*((_QWORD *)this + 12), &String);
  v9 = (uint64_t **)*((_QWORD *)this + 12);
  if (v9 + 1 == (uint64_t **)v8)
  {
    p_String = &String;
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::__emplace_unique_key_args<flatbuffers::Offset<flatbuffers::String>,flatbuffers::Offset<flatbuffers::String> const&>(v9, &String, &String);
  }
  else
  {
    *((_QWORD *)this + 7) += (*((_DWORD *)this + 10) - v7);
    *((_DWORD *)this + 10) = v7;
    p_String = (unsigned int *)(v8 + 28);
  }
  return *p_String;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  flatbuffers::FlatBufferBuilder::PreAlign<unsigned int>((char *)this, a3 + 1);
  flatbuffers::vector_downward::fill((char *)this, 1uLL);
  flatbuffers::vector_downward::push(this, (const unsigned __int8 *)a2, a3);
  flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(this, a3);
  return *((unsigned int *)this + 10);
}

char *flatbuffers::FlatBufferBuilder::PreAlign<unsigned int>(char *result, uint64_t a2)
{
  if (a2)
  {
    if (*((_QWORD *)result + 10) <= 3uLL)
      *((_QWORD *)result + 10) = 4;
    return flatbuffers::vector_downward::fill(result, (-(int)a2 - *((_DWORD *)result + 10)) & 3);
  }
  return result;
}

char *flatbuffers::vector_downward::fill(char *this, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 7);
    if (v4 - *((_QWORD *)this + 8) < a2)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a2);
      v4 = *((_QWORD *)v3 + 7);
    }
    v5 = 0;
    *((_QWORD *)v3 + 7) = v4 - a2;
    *((_DWORD *)v3 + 10) += a2;
    do
      *(_BYTE *)(*((_QWORD *)v3 + 7) + v5++) = 0;
    while (a2 != v5);
  }
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(flatbuffers::vector_downward *this, int a2)
{
  int v5;

  if (*((_QWORD *)this + 10) <= 3uLL)
    *((_QWORD *)this + 10) = 4;
  flatbuffers::vector_downward::fill((char *)this, -*((_DWORD *)this + 10) & 3);
  v5 = a2;
  flatbuffers::vector_downward::push_small<unsigned int>((char *)this, &v5);
  return *((unsigned int *)this + 10);
}

char *flatbuffers::FlatBufferBuilder::PreAlign(char *this, uint64_t a2, unint64_t a3)
{
  if (a2)
  {
    if (*((_QWORD *)this + 10) < a3)
      *((_QWORD *)this + 10) = a3;
    return flatbuffers::vector_downward::fill(this, (a3 - 1) & (-a2 - *((unsigned int *)this + 10)));
  }
  return this;
}

char *flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  char *v12;

  v3 = *((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 10);
  v5 = (char *)*((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 8) - (_QWORD)v5;
  if (v3)
    v7 = v3 >> 1;
  else
    v7 = *((_QWORD *)this + 2);
  if (v7 <= a2)
    v7 = a2;
  v8 = (*((_QWORD *)this + 3) + v3 + v7 - 1) & -*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v8;
  v9 = *(_QWORD *)this;
  if (!v5)
  {
    if (v9)
      result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = (char *)operator new[]();
    goto LABEL_13;
  }
  if (v9)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, size_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v5, v3, v8, v4, v6);
LABEL_13:
    v11 = result;
    goto LABEL_14;
  }
  v11 = (char *)operator new[]();
  memcpy(&v11[v8 - v4], &v5[v3 - v4], v4);
  memcpy(v11, v5, v6);
  result = (char *)MEMORY[0x1B5E36928](v5, 0x1000C8077774924);
LABEL_14:
  v12 = &v11[*((_QWORD *)this + 4) - v4];
  *((_QWORD *)this + 6) = v11;
  *((_QWORD *)this + 7) = v12;
  *((_QWORD *)this + 8) = &v11[v6];
  return result;
}

_QWORD *flatbuffers::vector_downward::push(_QWORD *this, const unsigned __int8 *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (a3)
  {
    v5 = this;
    v6 = this[7];
    if (v6 - this[8] < a3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a3);
      v6 = v5[7];
    }
    v5[7] = v6 - a3;
    *((_DWORD *)v5 + 10) += a3;
    return memcpy((void *)(v6 - a3), __src, a3);
  }
  return this;
}

char *flatbuffers::vector_downward::push_small<unsigned int>(char *this, _DWORD *a2)
{
  char *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)this + 7);
  if ((unint64_t)(v4 - *((_QWORD *)this + 8)) <= 3)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 4uLL);
    v4 = *((_QWORD *)v3 + 7);
  }
  *((_DWORD *)v3 + 10) += 4;
  *(_DWORD *)(v4 - 4) = *a2;
  *((_QWORD *)v3 + 7) = v4 - 4;
  return this;
}

uint64_t std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::find<flatbuffers::Offset<flatbuffers::String>>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  const void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  _BOOL4 v16;

  v4 = a1 + 8;
  v5 = std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::__lower_bound<flatbuffers::Offset<flatbuffers::String>>(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v4 == v5)
    return v4;
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48) + *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v8 = (unsigned int *)(v7 - *a2);
  v9 = *(unsigned int *)(v6 + 28);
  v12 = *v8;
  v10 = v8 + 1;
  v11 = v12;
  v13 = *(_DWORD *)(v7 - v9);
  v14 = v13 >= v12 ? v11 : v13;
  v15 = memcmp(v10, (const void *)(v7 - v9 + 4), v14);
  v16 = v11 < v13;
  if (v15)
    v16 = v15 < 0;
  if (v16)
    return v4;
  return v6;
}

uint64_t std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::__lower_bound<flatbuffers::Offset<flatbuffers::String>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t *v16;

  if (a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48) + *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
    v7 = *a2;
    v8 = (const void *)(v6 - v7 + 4);
    v9 = *(_DWORD *)(v6 - v7);
    do
    {
      v10 = *(unsigned int *)(v5 + 28);
      v11 = *(_DWORD *)(v6 - v10);
      if (v9 >= v11)
        v12 = v11;
      else
        v12 = v9;
      v13 = memcmp((const void *)(v6 - v10 + 4), v8, v12);
      v14 = v11 < v9;
      if (v13)
        v14 = v13 < 0;
      v15 = !v14;
      if (v14)
        v16 = (uint64_t *)(v5 + 8);
      else
        v16 = (uint64_t *)v5;
      if (v15)
        a4 = v5;
      v5 = *v16;
    }
    while (*v16);
  }
  return a4;
}

uint64_t *std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::__emplace_unique_key_args<flatbuffers::Offset<flatbuffers::String>,flatbuffers::Offset<flatbuffers::String> const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::__find_equal<flatbuffers::Offset<flatbuffers::String>>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v6 + 7) = *a3;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::__find_equal<flatbuffers::Offset<flatbuffers::String>>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  const void *v13;
  unsigned int v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48) + *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
    v7 = (unsigned int *)(v6 - *a3);
    v10 = *v7;
    v8 = v7 + 1;
    v9 = v10;
    do
    {
      while (1)
      {
        v11 = (_QWORD *)v4;
        v12 = *(unsigned int *)(v4 + 28);
        v13 = (const void *)(v6 - v12 + 4);
        v14 = *(_DWORD *)(v6 - v12);
        if (v14 >= v9)
          v15 = v9;
        else
          v15 = v14;
        v16 = memcmp(v8, (const void *)(v6 - v12 + 4), v15);
        v17 = v9 < v14;
        if (v16)
          v17 = v16 < 0;
        if (!v17)
          break;
        v4 = *v11;
        v5 = v11;
        if (!*v11)
          goto LABEL_17;
      }
      v18 = memcmp(v13, v8, v15);
      v19 = v14 < v9;
      if (v18)
        v19 = v18 < 0;
      if (!v19)
        break;
      v5 = v11 + 1;
      v4 = v11[1];
    }
    while (v4);
  }
  else
  {
    v11 = (_QWORD *)(a1 + 8);
  }
LABEL_17:
  *a2 = v11;
  return v5;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(char *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  unsigned int v6;

  v5 = this;
  if (a3 != a4 || this[88])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((flatbuffers::vector_downward *)this, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return this;
}

char *flatbuffers::FlatBufferBuilder::TrackField(char *this, uint64_t a2, unsigned int a3)
{
  char *v5;
  unint64_t *v6;

  v5 = this;
  v6 = (unint64_t *)*((_QWORD *)this + 8);
  if (*((_QWORD *)this + 7) - (_QWORD)v6 <= 7uLL)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 8uLL);
    v6 = (unint64_t *)*((_QWORD *)v5 + 8);
  }
  *v6 = a3 | (unint64_t)(a2 << 32);
  *((_QWORD *)v5 + 8) += 8;
  ++*((_DWORD *)v5 + 18);
  if (*((unsigned __int16 *)v5 + 38) < a2)
    *((_WORD *)v5 + 38) = a2;
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(flatbuffers::vector_downward *this, uint64_t a2)
{
  uint64_t v5;

  if (*((_QWORD *)this + 10) <= 7uLL)
    *((_QWORD *)this + 10) = 8;
  flatbuffers::vector_downward::fill((char *)this, -*((_DWORD *)this + 10) & 7);
  v5 = a2;
  flatbuffers::vector_downward::push_small<unsigned long long>((char *)this, &v5);
  return *((unsigned int *)this + 10);
}

char *flatbuffers::vector_downward::push_small<unsigned long long>(char *this, _QWORD *a2)
{
  char *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)this + 7);
  if ((unint64_t)(v4 - *((_QWORD *)this + 8)) <= 7)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 8uLL);
    v4 = *((_QWORD *)v3 + 7);
  }
  *(_QWORD *)(v4 - 8) = *a2;
  *((_QWORD *)v3 + 7) = v4 - 8;
  *((_DWORD *)v3 + 10) += 8;
  return this;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(char *result, uint64_t a2, int a3)
{
  char *v4;
  int v5;

  if (a3)
  {
    v4 = result;
    v5 = flatbuffers::FlatBufferBuilder::ReferTo((flatbuffers::FlatBufferBuilder *)result, a3);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v4, a2, v5, 0);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(char *this, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = this;
  if (a3 != a4 || this[88])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((flatbuffers::vector_downward *)this, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::ReferTo(flatbuffers::FlatBufferBuilder *this, int a2)
{
  if (*((_QWORD *)this + 10) <= 3uLL)
    *((_QWORD *)this + 10) = 4;
  flatbuffers::vector_downward::fill((char *)this, -*((_DWORD *)this + 10) & 3);
  return (*((_DWORD *)this + 10) - a2 + 4);
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, __int16 a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _WORD *v11;
  int v12;
  unsigned int *v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  int v17;

  v4 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(this, 0);
  if ((unsigned __int16)(*((_WORD *)this + 38) + 2) <= 4u)
    v5 = 4;
  else
    v5 = (unsigned __int16)(*((_WORD *)this + 38) + 2);
  *((_WORD *)this + 38) = v5;
  flatbuffers::vector_downward::fill_big(this, v5);
  v6 = v4 - a2;
  v8 = (char *)*((_QWORD *)this + 7);
  v7 = *((_QWORD *)this + 8);
  *((_WORD *)v8 + 1) = v6;
  *(_WORD *)v8 = *((_WORD *)this + 38);
  v9 = *((unsigned int *)this + 18);
  v10 = (char *)(v7 - 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = (_WORD *)(v7 - 8 * v9);
    do
    {
      *(_WORD *)&v8[(unsigned __int16)v11[2]] = v4 - *v11;
      v11 += 4;
    }
    while ((unint64_t)v11 < v7);
  }
  *((_QWORD *)this + 8) = v10;
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  v12 = *((_DWORD *)this + 10);
  if (!*((_BYTE *)this + 89) || (v13 = (unsigned int *)*((_QWORD *)this + 6), v13 >= (unsigned int *)v10))
  {
LABEL_13:
    v17 = v12;
LABEL_14:
    if ((unint64_t)(v8 - v10) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      v10 = (char *)*((_QWORD *)this + 8);
    }
    *(_DWORD *)v10 = v17;
    *((_QWORD *)this + 8) = v10 + 4;
    goto LABEL_17;
  }
  v14 = *(unsigned __int16 *)v8;
  v15 = (char *)v13 + *((_QWORD *)this + 4);
  while (1)
  {
    v16 = *v13;
    if ((_DWORD)v14 == *(unsigned __int16 *)&v15[-v16] && !memcmp(&v15[-v16], v8, v14))
      break;
    if (++v13 >= (unsigned int *)v10)
      goto LABEL_13;
  }
  v8 += (v12 - v4);
  *((_QWORD *)this + 7) = v8;
  *((_DWORD *)this + 10) = v4;
  v12 = v16;
  v17 = v4;
  if ((_DWORD)v16 == (_DWORD)v4)
    goto LABEL_14;
LABEL_17:
  *(_DWORD *)(*((_QWORD *)this + 6) + *((_QWORD *)this + 4) - v4) = v12 - v4;
  *((_BYTE *)this + 78) = 0;
  return v4;
}

void flatbuffers::vector_downward::fill_big(flatbuffers::vector_downward *this, unint64_t a2)
{
  char *v4;

  v4 = (char *)*((_QWORD *)this + 7);
  if (a2)
  {
    if ((unint64_t)&v4[-*((_QWORD *)this + 8)] < a2)
    {
      flatbuffers::vector_downward::reallocate(this, a2);
      v4 = (char *)*((_QWORD *)this + 7);
    }
    v4 -= a2;
    *((_QWORD *)this + 7) = v4;
    *((_DWORD *)this + 10) += a2;
  }
  bzero(v4, a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(char *this, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  char v6;

  v5 = (uint64_t)this;
  if (a3 != a4 || this[88])
  {
    if (!*((_QWORD *)this + 10))
      *((_QWORD *)this + 10) = 1;
    v6 = a3;
    flatbuffers::vector_downward::push_small<unsigned char>(this, &v6);
    return flatbuffers::FlatBufferBuilder::TrackField((char *)v5, a2, *(_DWORD *)(v5 + 40));
  }
  return this;
}

char *flatbuffers::vector_downward::push_small<unsigned char>(char *this, _BYTE *a2)
{
  char *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)this + 7);
  if (v4 == *((_QWORD *)this + 8))
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 1uLL);
    v4 = *((_QWORD *)v3 + 7);
  }
  *((_QWORD *)v3 + 7) = v4 - 1;
  ++*((_DWORD *)v3 + 10);
  *(_BYTE *)(v4 - 1) = *a2;
  return this;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6774330, MEMORY[0x1E0DE42E0]);
}

void sub_1B40D2A7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, int a2, const char *a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;

  *((_QWORD *)this + 8) = *((_QWORD *)this + 6);
  v8 = 4;
  if (a4)
    v8 = 8;
  flatbuffers::FlatBufferBuilder::PreAlign((char *)this, v8 + 4 * (a3 != 0), *((_QWORD *)this + 10));
  if (a3)
    flatbuffers::vector_downward::push(this, (const unsigned __int8 *)a3, 4uLL);
  v9 = flatbuffers::FlatBufferBuilder::ReferTo(this, a2);
  result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(this, v9);
  if (a4)
    result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(this, *((_DWORD *)this + 10));
  *((_BYTE *)this + 79) = 1;
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::InlineSymbol>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = &a2[a3];
  v11 = a1;
  if (a3 < 129)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>(a3);
    v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(a2, v6, (uint64_t)&v11, a3, v7, v9);
  if (v7)
    operator delete(v7);
  return flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)a2, a3);
}

void sub_1B40D2BF0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x1FFFFFFFFFFFFFFFLL)
    v1 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(4 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v9 - *(a2 - 1)), (int *)(v9 - *result));
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(result, a2, a3);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v11 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v11 - v9), (int *)(v11 - v10));
        if ((_DWORD)result)
        {
          v12 = *v8;
          v13 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v13 + 4) = *(_DWORD *)((char *)v4 + v13);
            if (!v13)
              break;
            v14 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
            result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v14 - v12), (int *)(v14 - *(unsigned int *)((char *)v4 + v13 - 4)));
            v13 -= 4;
            if ((result & 1) == 0)
            {
              v15 = (_DWORD *)((char *)v4 + v13 + 4);
              goto LABEL_10;
            }
          }
          v15 = v4;
LABEL_10:
          *v15 = v12;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v10 - *(a2 - 1)), (int *)(v10 - *result));
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *(a2 - 1);
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(result, a2, a5, a3);
    }
  }
  return result;
}

unsigned int *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v36;
  char v37;

  if (a6)
  {
    v9 = a6;
    v14 = (unsigned int *)result;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v14, a2, a3, a4, a5, v9, a7);
      if (!a5)
        return result;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v17 - *a2), (int *)(v17 - v14[v16]));
        if ((result & 1) != 0)
          break;
        ++v16;
        v15 -= 4;
        if (a5 == v16)
          return result;
      }
      result = (uint64_t)&v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      v33 = a3;
      v34 = a8;
      v32 = &v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      if (a5 - v16 >= v9)
      {
        if (a5 - 1 == v16)
        {
          v30 = v14[v16];
          v14[v16] = *a2;
          *a2 = v30;
          return result;
        }
        v22 = (a5 - v16) / 2;
        v23 = &v14[v22 + v15 / 0xFFFFFFFFFFFFFFFCLL];
        v36 = *(_QWORD *)a4;
        v37 = 0;
        v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol>>(a2, a3, v23, (uint64_t)&v36);
        v21 = (char *)v23;
        v19 = v20 - a2;
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = &a2[v18 >> 1];
        v21 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>,std::__identity>((_DWORD *)result, a2, v20, a4);
        v22 = (uint64_t)(v21 - (char *)v14 + v15) >> 2;
      }
      v24 = a5 - v22 - v16;
      v25 = v9 - v19;
      v31 = (unsigned int *)v21;
      v26 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v21, (char *)a2, (char *)v20);
      v27 = (unsigned int *)v26;
      if (v22 + v19 >= v9 + a5 - (v22 + v19) - v16)
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v26, v20, v33, a4, a5 - v22 - v16, v25, a7, v34);
        v20 = v31;
        v29 = v32;
        v25 = v19;
        v24 = v22;
        a8 = v34;
        a3 = v27;
      }
      else
      {
        v28 = v22;
        a8 = v34;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v32, v31, v26, a4, v28, v19, a7, v34);
        v29 = v27;
        a3 = v33;
      }
      a5 = v24;
      v9 = v25;
      a2 = v20;
      v14 = v29;
    }
    while (v25);
  }
  return result;
}

BOOL FlatbufferSymbols::InlineSymbol::KeyCompareLessThan(int *a1, int *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 5u && (v3 = v2[2]) != 0)
    v4 = *(_QWORD *)((char *)a1 + v3);
  else
    v4 = -1;
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 5u && (v6 = v5[2]) != 0)
    v7 = *(_QWORD *)((char *)a2 + v6);
  else
    v7 = -1;
  return v4 < v7;
}

unsigned int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (result != a2)
  {
    v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      v8 = 0;
      v9 = a3;
      do
      {
        v10 = v9;
        v11 = *v9++;
        v12 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v12 - *v6), (int *)(v12 - v11));
        v13 = v9;
        if ((_DWORD)result)
        {
          v10[1] = *v10;
          v13 = a3;
          if (v10 != a3)
          {
            v14 = v8;
            while (1)
            {
              v13 = (unsigned int *)((char *)a3 + v14);
              v15 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
              result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v15 - *v6), (int *)(v15 - *(unsigned int *)((char *)a3 + v14 - 4)));
              if (!(_DWORD)result)
                break;
              *v13 = *(v13 - 1);
              v14 -= 4;
              if (!v14)
              {
                v13 = a3;
                break;
              }
            }
          }
        }
        v16 = *v6++;
        *v13 = v16;
        v8 += 4;
      }
      while (v6 != a2);
    }
  }
  return result;
}

unsigned int *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

unsigned int *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(unsigned int *__dst, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *__src)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  if (a5 <= a6)
  {
    v14 = __src;
    if (__dst != a2)
    {
      v14 = __src;
      v15 = __dst;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
      }
      while (v15 != a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(__src, v14, a2, a3, __dst, a4);
  }
  else
  {
    v10 = __src;
    if (a2 != a3)
    {
      v10 = __src;
      v11 = a2;
      do
      {
        v12 = *v11++;
        *v10++ = v12;
      }
      while (v11 != a3);
    }
    v17 = a4;
    return (unsigned int *)std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>>((uint64_t)v10, (uint64_t)__src, (uint64_t)a2, (uint64_t)__dst, (uint64_t)a3, (uint64_t)&v17);
  }
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>,std::__identity>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v9 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v11 = *v8;
      v10 = v8 + 1;
      if (FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v9 - *a3), (int *)(v9 - v11)))
      {
        v7 >>= 1;
      }
      else
      {
        v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(char *__src, char *a2, char *a3)
{
  char *v4;
  int v6;
  int64_t v7;
  int v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 4 == a2)
    {
      v6 = *(_DWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_DWORD *)v4 = v6;
    }
    else if (a2 + 4 == a3)
    {
      v8 = *((_DWORD *)a3 - 1);
      v4 = __src + 4;
      v9 = a3 - 4 - __src;
      if (a3 - 4 != __src)
        memmove(__src + 4, __src, v9);
      *(_DWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(__src, a2, a3);
    }
  }
  return v4;
}

unsigned int *std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(unsigned int *__src, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *__dst, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  if (__src != a2)
  {
    v11 = __src;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      __src = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)__src)
        v13 = a3;
      else
        v13 = v11;
      v11 += __src ^ 1;
      a3 += __src;
      *__dst++ = *v13;
      if (v11 == a2)
        return __src;
    }
    return (unsigned int *)memmove(__dst, v11, (char *)a2 - (char *)v11);
  }
  return __src;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v10 = result;
    v11 = (_DWORD *)(a5 - 4);
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(**(_QWORD **)a6 + 48) + *(_QWORD *)(**(_QWORD **)a6 + 32);
      result = FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v12 - *(unsigned int *)(v10 - 4)), (int *)(v12 - *(unsigned int *)(a3 - 4)));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v10;
      if ((_DWORD)result)
        a3 -= 4;
      else
        v10 -= 4;
      *v11-- = *(_DWORD *)(v13 - 4);
      if (v10 == a2)
        return result;
    }
    v14 = 0;
    do
    {
      v11[v14] = *(_DWORD *)(v10 + v14 * 4 - 4);
      --v14;
    }
    while (v10 + v14 * 4 != a2);
  }
  return result;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol>>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v10 = *v8;
      v9 = v8 + 1;
      v11 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v12 = FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v11 - v10), (int *)(v11 - *a3));
      if (v12)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v12)
        v4 = v9;
    }
    while (v7);
  }
  return v4;
}

_DWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_DWORD *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v14 = *--v12;
        v13 = v14;
        v15 = &v12[v3];
        v16 = v12;
        do
        {
          v17 = v16;
          v16 = v15;
          *v17 = *v15;
          v18 = __OFSUB__(v3, a3 - v15);
          v20 = v3 - (a3 - v15);
          v19 = (v20 < 0) ^ v18;
          v15 = &a1[v20];
          if (v19)
            v15 = &v16[v3];
        }
        while (v15 != v12);
        *v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::SourceInfo>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = &a2[a3];
  v11 = a1;
  if (a3 < 129)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>(a3);
    v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(a2, v6, (uint64_t)&v11, a3, v7, v9);
  if (v7)
    operator delete(v7);
  return flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)a2, a3);
}

void sub_1B40D3B04(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v9 - *(a2 - 1)), (int *)(v9 - *result));
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(result, a2, a3);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v11 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v11 - v9), (int *)(v11 - v10));
        if ((_DWORD)result)
        {
          v12 = *v8;
          v13 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v13 + 4) = *(_DWORD *)((char *)v4 + v13);
            if (!v13)
              break;
            v14 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
            result = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v14 - v12), (int *)(v14 - *(unsigned int *)((char *)v4 + v13 - 4)));
            v13 -= 4;
            if ((result & 1) == 0)
            {
              v15 = (_DWORD *)((char *)v4 + v13 + 4);
              goto LABEL_10;
            }
          }
          v15 = v4;
LABEL_10:
          *v15 = v12;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v10 - *(a2 - 1)), (int *)(v10 - *result));
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *(a2 - 1);
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(result, a2, a5, a3);
    }
  }
  return result;
}

unsigned int *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v36;
  char v37;

  if (a6)
  {
    v9 = a6;
    v14 = (unsigned int *)result;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(v14, a2, a3, a4, a5, v9, a7);
      if (!a5)
        return result;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v17 - *a2), (int *)(v17 - v14[v16]));
        if ((result & 1) != 0)
          break;
        ++v16;
        v15 -= 4;
        if (a5 == v16)
          return result;
      }
      result = (uint64_t)&v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      v33 = a3;
      v34 = a8;
      v32 = &v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      if (a5 - v16 >= v9)
      {
        if (a5 - 1 == v16)
        {
          v30 = v14[v16];
          v14[v16] = *a2;
          *a2 = v30;
          return result;
        }
        v22 = (a5 - v16) / 2;
        v23 = &v14[v22 + v15 / 0xFFFFFFFFFFFFFFFCLL];
        v36 = *(_QWORD *)a4;
        v37 = 0;
        v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo>>(a2, a3, v23, (uint64_t)&v36);
        v21 = (char *)v23;
        v19 = v20 - a2;
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = &a2[v18 >> 1];
        v21 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,std::__identity>((_DWORD *)result, a2, v20, a4);
        v22 = (uint64_t)(v21 - (char *)v14 + v15) >> 2;
      }
      v24 = a5 - v22 - v16;
      v25 = v9 - v19;
      v31 = (unsigned int *)v21;
      v26 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v21, (char *)a2, (char *)v20);
      v27 = (unsigned int *)v26;
      if (v22 + v19 >= v9 + a5 - (v22 + v19) - v16)
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(v26, v20, v33, a4, a5 - v22 - v16, v25, a7, v34);
        v20 = v31;
        v29 = v32;
        v25 = v19;
        v24 = v22;
        a8 = v34;
        a3 = v27;
      }
      else
      {
        v28 = v22;
        a8 = v34;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(v32, v31, v26, a4, v28, v19, a7, v34);
        v29 = v27;
        a3 = v33;
      }
      a5 = v24;
      v9 = v25;
      a2 = v20;
      v14 = v29;
    }
    while (v25);
  }
  return result;
}

BOOL FlatbufferSymbols::SourceInfo::KeyCompareLessThan(int *a1, int *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 0xDu && (v3 = v2[6]) != 0)
    v4 = *(_QWORD *)((char *)a1 + v3);
  else
    v4 = -1;
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 0xDu && (v6 = v5[6]) != 0)
    v7 = *(_QWORD *)((char *)a2 + v6);
  else
    v7 = -1;
  return v4 < v7;
}

unsigned int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (result != a2)
  {
    v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      v8 = 0;
      v9 = a3;
      do
      {
        v10 = v9;
        v11 = *v9++;
        v12 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v12 - *v6), (int *)(v12 - v11));
        v13 = v9;
        if ((_DWORD)result)
        {
          v10[1] = *v10;
          v13 = a3;
          if (v10 != a3)
          {
            v14 = v8;
            while (1)
            {
              v13 = (unsigned int *)((char *)a3 + v14);
              v15 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
              result = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v15 - *v6), (int *)(v15 - *(unsigned int *)((char *)a3 + v14 - 4)));
              if (!(_DWORD)result)
                break;
              *v13 = *(v13 - 1);
              v14 -= 4;
              if (!v14)
              {
                v13 = a3;
                break;
              }
            }
          }
        }
        v16 = *v6++;
        *v13 = v16;
        v8 += 4;
      }
      while (v6 != a2);
    }
  }
  return result;
}

unsigned int *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

unsigned int *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(unsigned int *__dst, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *__src)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  if (a5 <= a6)
  {
    v14 = __src;
    if (__dst != a2)
    {
      v14 = __src;
      v15 = __dst;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
      }
      while (v15 != a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(__src, v14, a2, a3, __dst, a4);
  }
  else
  {
    v10 = __src;
    if (a2 != a3)
    {
      v10 = __src;
      v11 = a2;
      do
      {
        v12 = *v11++;
        *v10++ = v12;
      }
      while (v11 != a3);
    }
    v17 = a4;
    return (unsigned int *)std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>>((uint64_t)v10, (uint64_t)__src, (uint64_t)a2, (uint64_t)__dst, (uint64_t)a3, (uint64_t)&v17);
  }
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,std::__identity>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v9 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v11 = *v8;
      v10 = v8 + 1;
      if (FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v9 - *a3), (int *)(v9 - v11)))
      {
        v7 >>= 1;
      }
      else
      {
        v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

unsigned int *std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>(unsigned int *__src, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *__dst, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  if (__src != a2)
  {
    v11 = __src;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      __src = (unsigned int *)FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)__src)
        v13 = a3;
      else
        v13 = v11;
      v11 += __src ^ 1;
      a3 += __src;
      *__dst++ = *v13;
      if (v11 == a2)
        return __src;
    }
    return (unsigned int *)memmove(__dst, v11, (char *)a2 - (char *)v11);
  }
  return __src;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v10 = result;
    v11 = (_DWORD *)(a5 - 4);
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(**(_QWORD **)a6 + 48) + *(_QWORD *)(**(_QWORD **)a6 + 32);
      result = FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v12 - *(unsigned int *)(v10 - 4)), (int *)(v12 - *(unsigned int *)(a3 - 4)));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v10;
      if ((_DWORD)result)
        a3 -= 4;
      else
        v10 -= 4;
      *v11-- = *(_DWORD *)(v13 - 4);
      if (v10 == a2)
        return result;
    }
    v14 = 0;
    do
    {
      v11[v14] = *(_DWORD *)(v10 + v14 * 4 - 4);
      --v14;
    }
    while (v10 + v14 * 4 != a2);
  }
  return result;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo> *,flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SourceInfo>>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v10 = *v8;
      v9 = v8 + 1;
      v11 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v12 = FlatbufferSymbols::SourceInfo::KeyCompareLessThan((int *)(v11 - v10), (int *)(v11 - *a3));
      if (v12)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v12)
        v4 = v9;
    }
    while (v7);
  }
  return v4;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::Symbol>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = &a2[a3];
  v11 = a1;
  if (a3 < 129)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>(a3);
    v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(a2, v6, (uint64_t)&v11, a3, v7, v9);
  if (v7)
    operator delete(v7);
  return flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)a2, a3);
}

void sub_1B40D482C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v9 - *(a2 - 1)), (int *)(v9 - *result));
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(result, a2, a3);
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::InlineSymbol::KeyCompareLessThan((int *)(v10 - *(a2 - 1)), (int *)(v10 - *result));
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *(a2 - 1);
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Symbol> &,flatbuffers::Offset<FlatbufferSymbols::Symbol> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::InlineSymbol> &,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(result, a2, a5, a3);
    }
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::Section>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = &a2[a3];
  v11 = a1;
  if (a3 < 129)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>(a3);
    v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(a2, v6, (uint64_t)&v11, a3, v7, v9);
  if (v7)
    operator delete(v7);
  return flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)a2, a3);
}

void sub_1B40D4BC8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v9 - *(a2 - 1)), (int *)(v9 - *result));
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(result, a2, a3);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v11 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v11 - v9), (int *)(v11 - v10));
        if ((_DWORD)result)
        {
          v12 = *v8;
          v13 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v13 + 4) = *(_DWORD *)((char *)v4 + v13);
            if (!v13)
              break;
            v14 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
            result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v14 - v12), (int *)(v14 - *(unsigned int *)((char *)v4 + v13 - 4)));
            v13 -= 4;
            if ((result & 1) == 0)
            {
              v15 = (_DWORD *)((char *)v4 + v13 + 4);
              goto LABEL_10;
            }
          }
          v15 = v4;
LABEL_10:
          *v15 = v12;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v10 - *(a2 - 1)), (int *)(v10 - *result));
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *(a2 - 1);
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(result, a2, a5, a3);
    }
  }
  return result;
}

unsigned int *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v36;
  char v37;

  if (a6)
  {
    v9 = a6;
    v14 = (unsigned int *)result;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(v14, a2, a3, a4, a5, v9, a7);
      if (!a5)
        return result;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v17 - *a2), (int *)(v17 - v14[v16]));
        if ((result & 1) != 0)
          break;
        ++v16;
        v15 -= 4;
        if (a5 == v16)
          return result;
      }
      result = (uint64_t)&v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      v33 = a3;
      v34 = a8;
      v32 = &v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      if (a5 - v16 >= v9)
      {
        if (a5 - 1 == v16)
        {
          v30 = v14[v16];
          v14[v16] = *a2;
          *a2 = v30;
          return result;
        }
        v22 = (a5 - v16) / 2;
        v23 = &v14[v22 + v15 / 0xFFFFFFFFFFFFFFFCLL];
        v36 = *(_QWORD *)a4;
        v37 = 0;
        v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section>>(a2, a3, v23, (uint64_t)&v36);
        v21 = (char *)v23;
        v19 = v20 - a2;
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = &a2[v18 >> 1];
        v21 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section>,std::__identity>((_DWORD *)result, a2, v20, a4);
        v22 = (uint64_t)(v21 - (char *)v14 + v15) >> 2;
      }
      v24 = a5 - v22 - v16;
      v25 = v9 - v19;
      v31 = (unsigned int *)v21;
      v26 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v21, (char *)a2, (char *)v20);
      v27 = (unsigned int *)v26;
      if (v22 + v19 >= v9 + a5 - (v22 + v19) - v16)
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(v26, v20, v33, a4, a5 - v22 - v16, v25, a7, v34);
        v20 = v31;
        v29 = v32;
        v25 = v19;
        v24 = v22;
        a8 = v34;
        a3 = v27;
      }
      else
      {
        v28 = v22;
        a8 = v34;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(v32, v31, v26, a4, v28, v19, a7, v34);
        v29 = v27;
        a3 = v33;
      }
      a5 = v24;
      v9 = v25;
      a2 = v20;
      v14 = v29;
    }
    while (v25);
  }
  return result;
}

BOOL FlatbufferSymbols::Section::KeyCompareLessThan(int *a1, int *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 7u && (v3 = v2[3]) != 0)
    v4 = *(_QWORD *)((char *)a1 + v3);
  else
    v4 = -1;
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 7u && (v6 = v5[3]) != 0)
    v7 = *(_QWORD *)((char *)a2 + v6);
  else
    v7 = -1;
  return v4 < v7;
}

unsigned int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (result != a2)
  {
    v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      v8 = 0;
      v9 = a3;
      do
      {
        v10 = v9;
        v11 = *v9++;
        v12 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v12 - *v6), (int *)(v12 - v11));
        v13 = v9;
        if ((_DWORD)result)
        {
          v10[1] = *v10;
          v13 = a3;
          if (v10 != a3)
          {
            v14 = v8;
            while (1)
            {
              v13 = (unsigned int *)((char *)a3 + v14);
              v15 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
              result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v15 - *v6), (int *)(v15 - *(unsigned int *)((char *)a3 + v14 - 4)));
              if (!(_DWORD)result)
                break;
              *v13 = *(v13 - 1);
              v14 -= 4;
              if (!v14)
              {
                v13 = a3;
                break;
              }
            }
          }
        }
        v16 = *v6++;
        *v13 = v16;
        v8 += 4;
      }
      while (v6 != a2);
    }
  }
  return result;
}

unsigned int *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

unsigned int *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(unsigned int *__dst, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *__src)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  if (a5 <= a6)
  {
    v14 = __src;
    if (__dst != a2)
    {
      v14 = __src;
      v15 = __dst;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
      }
      while (v15 != a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *>(__src, v14, a2, a3, __dst, a4);
  }
  else
  {
    v10 = __src;
    if (a2 != a3)
    {
      v10 = __src;
      v11 = a2;
      do
      {
        v12 = *v11++;
        *v10++ = v12;
      }
      while (v11 != a3);
    }
    v17 = a4;
    return (unsigned int *)std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>>((uint64_t)v10, (uint64_t)__src, (uint64_t)a2, (uint64_t)__dst, (uint64_t)a3, (uint64_t)&v17);
  }
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section>,std::__identity>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v9 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v11 = *v8;
      v10 = v8 + 1;
      if (FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v9 - *a3), (int *)(v9 - v11)))
      {
        v7 >>= 1;
      }
      else
      {
        v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

unsigned int *std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *>(unsigned int *__src, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *__dst, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  if (__src != a2)
  {
    v11 = __src;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      __src = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)__src)
        v13 = a3;
      else
        v13 = v11;
      v11 += __src ^ 1;
      a3 += __src;
      *__dst++ = *v13;
      if (v11 == a2)
        return __src;
    }
    return (unsigned int *)memmove(__dst, v11, (char *)a2 - (char *)v11);
  }
  return __src;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::Section> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v10 = result;
    v11 = (_DWORD *)(a5 - 4);
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(**(_QWORD **)a6 + 48) + *(_QWORD *)(**(_QWORD **)a6 + 32);
      result = FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v12 - *(unsigned int *)(v10 - 4)), (int *)(v12 - *(unsigned int *)(a3 - 4)));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v10;
      if ((_DWORD)result)
        a3 -= 4;
      else
        v10 -= 4;
      *v11-- = *(_DWORD *)(v13 - 4);
      if (v10 == a2)
        return result;
    }
    v14 = 0;
    do
    {
      v11[v14] = *(_DWORD *)(v10 + v14 * 4 - 4);
      --v14;
    }
    while (v10 + v14 * 4 != a2);
  }
  return result;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section>>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v10 = *v8;
      v9 = v8 + 1;
      v11 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v12 = FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v11 - v10), (int *)(v11 - *a3));
      if (v12)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v12)
        v4 = v9;
    }
    while (v7);
  }
  return v4;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::SymbolNameEntry>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = &a2[a3];
  v11 = a1;
  if (a3 < 129)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>(a3);
    v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(a2, v6, (uint64_t)&v11, a3, v7, v9);
  if (v7)
    operator delete(v7);
  return flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)a2, a3);
}

void sub_1B40D58F0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v9 - *(a2 - 1)), (int *)(v9 - *result));
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(result, a2, a3);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v11 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v11 - v9), (int *)(v11 - v10));
        if ((_DWORD)result)
        {
          v12 = *v8;
          v13 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v13 + 4) = *(_DWORD *)((char *)v4 + v13);
            if (!v13)
              break;
            v14 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
            result = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v14 - v12), (int *)(v14 - *(unsigned int *)((char *)v4 + v13 - 4)));
            v13 -= 4;
            if ((result & 1) == 0)
            {
              v15 = (_DWORD *)((char *)v4 + v13 + 4);
              goto LABEL_10;
            }
          }
          v15 = v4;
LABEL_10:
          *v15 = v12;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v10 - *(a2 - 1)), (int *)(v10 - *result));
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *(a2 - 1);
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(result, a2, a5, a3);
    }
  }
  return result;
}

unsigned int *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v36;
  char v37;

  if (a6)
  {
    v9 = a6;
    v14 = (unsigned int *)result;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(v14, a2, a3, a4, a5, v9, a7);
      if (!a5)
        return result;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v17 - *a2), (int *)(v17 - v14[v16]));
        if ((result & 1) != 0)
          break;
        ++v16;
        v15 -= 4;
        if (a5 == v16)
          return result;
      }
      result = (uint64_t)&v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      v33 = a3;
      v34 = a8;
      v32 = &v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      if (a5 - v16 >= v9)
      {
        if (a5 - 1 == v16)
        {
          v30 = v14[v16];
          v14[v16] = *a2;
          *a2 = v30;
          return result;
        }
        v22 = (a5 - v16) / 2;
        v23 = &v14[v22 + v15 / 0xFFFFFFFFFFFFFFFCLL];
        v36 = *(_QWORD *)a4;
        v37 = 0;
        v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry>>(a2, a3, v23, (uint64_t)&v36);
        v21 = (char *)v23;
        v19 = v20 - a2;
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = &a2[v18 >> 1];
        v21 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,std::__identity>((_DWORD *)result, a2, v20, a4);
        v22 = (uint64_t)(v21 - (char *)v14 + v15) >> 2;
      }
      v24 = a5 - v22 - v16;
      v25 = v9 - v19;
      v31 = (unsigned int *)v21;
      v26 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v21, (char *)a2, (char *)v20);
      v27 = (unsigned int *)v26;
      if (v22 + v19 >= v9 + a5 - (v22 + v19) - v16)
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(v26, v20, v33, a4, a5 - v22 - v16, v25, a7, v34);
        v20 = v31;
        v29 = v32;
        v25 = v19;
        v24 = v22;
        a8 = v34;
        a3 = v27;
      }
      else
      {
        v28 = v22;
        a8 = v34;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(v32, v31, v26, a4, v28, v19, a7, v34);
        v29 = v27;
        a3 = v33;
      }
      a5 = v24;
      v9 = v25;
      a2 = v20;
      v14 = v29;
    }
    while (v25);
  }
  return result;
}

BOOL FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan(int *a1, int *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  int v11;

  v2 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - *a1 + 4));
  v3 = (unsigned int *)((char *)v2 + *v2);
  v4 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  v5 = *v4;
  v8 = *v3;
  v6 = v3 + 1;
  v7 = v8;
  v9 = *(unsigned int *)((char *)v4 + v5);
  if (v9 >= v8)
    v10 = v7;
  else
    v10 = v9;
  v11 = memcmp(v6, (char *)v4 + v5 + 4, v10);
  if (v11)
    return v11 < 0;
  else
    return v7 < v9;
}

unsigned int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (result != a2)
  {
    v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      v8 = 0;
      v9 = a3;
      do
      {
        v10 = v9;
        v11 = *v9++;
        v12 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v12 - *v6), (int *)(v12 - v11));
        v13 = v9;
        if ((_DWORD)result)
        {
          v10[1] = *v10;
          v13 = a3;
          if (v10 != a3)
          {
            v14 = v8;
            while (1)
            {
              v13 = (unsigned int *)((char *)a3 + v14);
              v15 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
              result = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v15 - *v6), (int *)(v15 - *(unsigned int *)((char *)a3 + v14 - 4)));
              if (!(_DWORD)result)
                break;
              *v13 = *(v13 - 1);
              v14 -= 4;
              if (!v14)
              {
                v13 = a3;
                break;
              }
            }
          }
        }
        v16 = *v6++;
        *v13 = v16;
        v8 += 4;
      }
      while (v6 != a2);
    }
  }
  return result;
}

unsigned int *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

unsigned int *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(unsigned int *__dst, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *__src)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  if (a5 <= a6)
  {
    v14 = __src;
    if (__dst != a2)
    {
      v14 = __src;
      v15 = __dst;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
      }
      while (v15 != a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(__src, v14, a2, a3, __dst, a4);
  }
  else
  {
    v10 = __src;
    if (a2 != a3)
    {
      v10 = __src;
      v11 = a2;
      do
      {
        v12 = *v11++;
        *v10++ = v12;
      }
      while (v11 != a3);
    }
    v17 = a4;
    return (unsigned int *)std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>>((uint64_t)v10, (uint64_t)__src, (uint64_t)a2, (uint64_t)__dst, (uint64_t)a3, (uint64_t)&v17);
  }
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,std::__identity>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v9 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v11 = *v8;
      v10 = v8 + 1;
      if (FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v9 - *a3), (int *)(v9 - v11)))
      {
        v7 >>= 1;
      }
      else
      {
        v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

unsigned int *std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>(unsigned int *__src, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *__dst, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  if (__src != a2)
  {
    v11 = __src;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      __src = (unsigned int *)FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)__src)
        v13 = a3;
      else
        v13 = v11;
      v11 += __src ^ 1;
      a3 += __src;
      *__dst++ = *v13;
      if (v11 == a2)
        return __src;
    }
    return (unsigned int *)memmove(__dst, v11, (char *)a2 - (char *)v11);
  }
  return __src;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v10 = result;
    v11 = (_DWORD *)(a5 - 4);
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(**(_QWORD **)a6 + 48) + *(_QWORD *)(**(_QWORD **)a6 + 32);
      result = FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v12 - *(unsigned int *)(v10 - 4)), (int *)(v12 - *(unsigned int *)(a3 - 4)));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v10;
      if ((_DWORD)result)
        a3 -= 4;
      else
        v10 -= 4;
      *v11-- = *(_DWORD *)(v13 - 4);
      if (v10 == a2)
        return result;
    }
    v14 = 0;
    do
    {
      v11[v14] = *(_DWORD *)(v10 + v14 * 4 - 4);
      --v14;
    }
    while (v10 + v14 * 4 != a2);
  }
  return result;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry> *,flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::SymbolNameEntry>>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v10 = *v8;
      v9 = v8 + 1;
      v11 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v12 = FlatbufferSymbols::SymbolNameEntry::KeyCompareLessThan((int *)(v11 - v10), (int *)(v11 - *a3));
      if (v12)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v12)
        v4 = v9;
    }
    while (v7);
  }
  return v4;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::Segment>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = &a2[a3];
  v11 = a1;
  if (a3 < 129)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>(a3);
    v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(a2, v6, (uint64_t)&v11, a3, v7, v9);
  if (v7)
    operator delete(v7);
  return flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)a2, a3);
}

void sub_1B40D662C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v9 - *(a2 - 1)), (int *)(v9 - *result));
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(result, a2, a3);
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::Section::KeyCompareLessThan((int *)(v10 - *(a2 - 1)), (int *)(v10 - *result));
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *(a2 - 1);
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Segment> &,flatbuffers::Offset<FlatbufferSymbols::Segment> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *,flatbuffers::Offset<FlatbufferSymbols::Section> *>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::Section> &,flatbuffers::Offset<FlatbufferSymbols::Section> *>(result, a2, a5, a3);
    }
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<FlatbufferSymbols::TranslatedImageInfo>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = &a2[a3];
  v11 = a1;
  if (a3 < 129)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>(a3);
    v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(a2, v6, (uint64_t)&v11, a3, v7, v9);
  if (v7)
    operator delete(v7);
  return flatbuffers::FlatBufferBuilder::CreateVector<FlatbufferSymbols::Symbolicator>(a1, (uint64_t)a2, a3);
}

void sub_1B40D69C8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v9 - *(a2 - 1)), (int *)(v9 - *result));
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(result, a2, a3);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v11 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
        result = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v11 - v9), (int *)(v11 - v10));
        if ((_DWORD)result)
        {
          v12 = *v8;
          v13 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v13 + 4) = *(_DWORD *)((char *)v4 + v13);
            if (!v13)
              break;
            v14 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
            result = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v14 - v12), (int *)(v14 - *(unsigned int *)((char *)v4 + v13 - 4)));
            v13 -= 4;
            if ((result & 1) == 0)
            {
              v15 = (_DWORD *)((char *)v4 + v13 + 4);
              goto LABEL_10;
            }
          }
          v15 = v4;
LABEL_10:
          *v15 = v12;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(unsigned int *result, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 48) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      result = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v10 - *(a2 - 1)), (int *)(v10 - *result));
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *(a2 - 1);
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(result, a2, a5, a3);
    }
  }
  return result;
}

unsigned int *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v36;
  char v37;

  if (a6)
  {
    v9 = a6;
    v14 = (unsigned int *)result;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(v14, a2, a3, a4, a5, v9, a7);
      if (!a5)
        return result;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v17 - *a2), (int *)(v17 - v14[v16]));
        if ((result & 1) != 0)
          break;
        ++v16;
        v15 -= 4;
        if (a5 == v16)
          return result;
      }
      result = (uint64_t)&v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      v33 = a3;
      v34 = a8;
      v32 = &v14[v15 / 0xFFFFFFFFFFFFFFFCLL];
      if (a5 - v16 >= v9)
      {
        if (a5 - 1 == v16)
        {
          v30 = v14[v16];
          v14[v16] = *a2;
          *a2 = v30;
          return result;
        }
        v22 = (a5 - v16) / 2;
        v23 = &v14[v22 + v15 / 0xFFFFFFFFFFFFFFFCLL];
        v36 = *(_QWORD *)a4;
        v37 = 0;
        v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo>>(a2, a3, v23, (uint64_t)&v36);
        v21 = (char *)v23;
        v19 = v20 - a2;
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = &a2[v18 >> 1];
        v21 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo>,std::__identity>((_DWORD *)result, a2, v20, a4);
        v22 = (uint64_t)(v21 - (char *)v14 + v15) >> 2;
      }
      v24 = a5 - v22 - v16;
      v25 = v9 - v19;
      v31 = (unsigned int *)v21;
      v26 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *,flatbuffers::Offset<FlatbufferSymbols::InlineSymbol> *>(v21, (char *)a2, (char *)v20);
      v27 = (unsigned int *)v26;
      if (v22 + v19 >= v9 + a5 - (v22 + v19) - v16)
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(v26, v20, v33, a4, a5 - v22 - v16, v25, a7, v34);
        v20 = v31;
        v29 = v32;
        v25 = v19;
        v24 = v22;
        a8 = v34;
        a3 = v27;
      }
      else
      {
        v28 = v22;
        a8 = v34;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(v32, v31, v26, a4, v28, v19, a7, v34);
        v29 = v27;
        a3 = v33;
      }
      a5 = v24;
      v9 = v25;
      a2 = v20;
      v14 = v29;
    }
    while (v25);
  }
  return result;
}

BOOL FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan(int *a1, int *a2)
{
  unsigned __int16 *v2;
  unint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 < 7u)
  {
    v3 = 0;
  }
  else
  {
    v3 = v2[3];
    if (v3)
      v3 = *(_QWORD *)((char *)a1 + v3);
  }
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 < 7u)
  {
    v5 = 0;
  }
  else
  {
    v5 = v4[3];
    if (v5)
      v5 = *(_QWORD *)((char *)a2 + v5);
  }
  return v3 < v5;
}

unsigned int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (result != a2)
  {
    v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      v8 = 0;
      v9 = a3;
      do
      {
        v10 = v9;
        v11 = *v9++;
        v12 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
        result = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v12 - *v6), (int *)(v12 - v11));
        v13 = v9;
        if ((_DWORD)result)
        {
          v10[1] = *v10;
          v13 = a3;
          if (v10 != a3)
          {
            v14 = v8;
            while (1)
            {
              v13 = (unsigned int *)((char *)a3 + v14);
              v15 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
              result = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v15 - *v6), (int *)(v15 - *(unsigned int *)((char *)a3 + v14 - 4)));
              if (!(_DWORD)result)
                break;
              *v13 = *(v13 - 1);
              v14 -= 4;
              if (!v14)
              {
                v13 = a3;
                break;
              }
            }
          }
        }
        v16 = *v6++;
        *v13 = v16;
        v8 += 4;
      }
      while (v6 != a2);
    }
  }
  return result;
}

unsigned int *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v14 = *a3++;
      *a5++ = v14;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      result = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v11;
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v13;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v15 = 0;
      do
      {
        a5[v15] = v11[v15];
        ++v15;
      }
      while (&v11[v15] != a2);
    }
  }
  return result;
}

unsigned int *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(unsigned int *__dst, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *__src)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  if (a5 <= a6)
  {
    v14 = __src;
    if (__dst != a2)
    {
      v14 = __src;
      v15 = __dst;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
      }
      while (v15 != a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(__src, v14, a2, a3, __dst, a4);
  }
  else
  {
    v10 = __src;
    if (a2 != a3)
    {
      v10 = __src;
      v11 = a2;
      do
      {
        v12 = *v11++;
        *v10++ = v12;
      }
      while (v11 != a3);
    }
    v17 = a4;
    return (unsigned int *)std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>>((uint64_t)v10, (uint64_t)__src, (uint64_t)a2, (uint64_t)__dst, (uint64_t)a3, (uint64_t)&v17);
  }
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo>,std::__identity>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v9 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v11 = *v8;
      v10 = v8 + 1;
      if (FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v9 - *a3), (int *)(v9 - v11)))
      {
        v7 >>= 1;
      }
      else
      {
        v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

unsigned int *std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>(unsigned int *__src, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *__dst, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  if (__src != a2)
  {
    v11 = __src;
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a6 + 48) + *(_QWORD *)(*(_QWORD *)a6 + 32);
      __src = (unsigned int *)FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v12 - *a3), (int *)(v12 - *v11));
      if ((_DWORD)__src)
        v13 = a3;
      else
        v13 = v11;
      v11 += __src ^ 1;
      a3 += __src;
      *__dst++ = *v13;
      if (v11 == a2)
        return __src;
    }
    return (unsigned int *)memmove(__dst, v11, (char *)a2 - (char *)v11);
  }
  return __src;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo> &>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>,std::__unconstrained_reverse_iterator<flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v10 = result;
    v11 = (_DWORD *)(a5 - 4);
    while (a3 != a4)
    {
      v12 = *(_QWORD *)(**(_QWORD **)a6 + 48) + *(_QWORD *)(**(_QWORD **)a6 + 32);
      result = FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v12 - *(unsigned int *)(v10 - 4)), (int *)(v12 - *(unsigned int *)(a3 - 4)));
      if ((_DWORD)result)
        v13 = a3;
      else
        v13 = v10;
      if ((_DWORD)result)
        a3 -= 4;
      else
        v10 -= 4;
      *v11-- = *(_DWORD *)(v13 - 4);
      if (v10 == a2)
        return result;
    }
    v14 = 0;
    do
    {
      v11[v14] = *(_DWORD *)(v10 + v14 * 4 - 4);
      --v14;
    }
    while (v10 + v14 * 4 != a2);
  }
  return result;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo> *,flatbuffers::Offset<FlatbufferSymbols::TranslatedImageInfo>,std::__identity,flatbuffers::FlatBufferBuilder::TableKeyComparator<FlatbufferSymbols::TranslatedImageInfo>>(_DWORD *a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = &v4[v7 >> 1];
      v10 = *v8;
      v9 = v8 + 1;
      v11 = *(_QWORD *)(*(_QWORD *)a4 + 48) + *(_QWORD *)(*(_QWORD *)a4 + 32);
      v12 = FlatbufferSymbols::TranslatedImageInfo::KeyCompareLessThan((int *)(v11 - v10), (int *)(v11 - *a3));
      if (v12)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v12)
        v4 = v9;
    }
    while (v7);
  }
  return v4;
}

BOOL CSRangeIntersectsRange(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 >= a3)
    return a3 + a4 > a1;
  else
    return a1 + a2 > a3;
}

BOOL CSRangeContainsRange(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return a3 >= a1 && a3 + a4 <= a1 + a2;
}

unint64_t CSRangeIntersectionRange(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  unint64_t v5;

  v4 = a3 + a4 > a1;
  if (a1 < a3)
    v4 = a1 + a2 > a3;
  if (a1 <= a3)
    v5 = a3;
  else
    v5 = a1;
  if (v4)
    return v5;
  else
    return 0;
}

uint64_t CSRangeOfDyldSharedCacheInCurrentProcess()
{
  unsigned __int8 v0;

  {
    CSRangeOfDyldSharedCacheInCurrentProcess::range = 0;
    *(_QWORD *)algn_1EF08DCA8 = 0;
  }
  if (CSRangeOfDyldSharedCacheInCurrentProcess::onceToken != -1)
    dispatch_once(&CSRangeOfDyldSharedCacheInCurrentProcess::onceToken, &__block_literal_global);
  return CSRangeOfDyldSharedCacheInCurrentProcess::range;
}

uint64_t CSRangeOfDyldSharedCacheInTask()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t shared_cache;
  uint64_t v3;

  v0 = dyld_process_create_for_task();
  if (v0)
  {
    v1 = dyld_process_snapshot_create_for_process();
    dyld_process_dispose();
    if (v1)
    {
      shared_cache = dyld_process_snapshot_get_shared_cache();
      v3 = shared_cache;
      if (!shared_cache)
        return 0;
      if ((MEMORY[0x1B5E36CE8](shared_cache) & 1) == 0)
      {
        v0 = MEMORY[0x1B5E36CD0](v3);
        MEMORY[0x1B5E36CDC](v3);
        dyld_process_snapshot_dispose();
        return v0;
      }
    }
    return 0;
  }
  return v0;
}

unint64_t CSRegionGetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  _QWORD v12[4];
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = a1;
  v16[1] = a2;
  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  if (v3 == 7)
    return *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 64) != *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 56))
    return *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == 1)
    return *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v6 = CSCppSymbolOwner::data(v4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) == 2)
    return *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v8 = CSCppSymbolOwner::data(v4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) == 4)
  {
    v14 = v16;
    return CSRegionGetRange::$_2::operator()<TMMapRegionImpl<Pointer64>>(&v14, (unint64_t *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  }
  else
  {
    v9 = CSCppSymbolOwner::data(v4);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) != 5)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v10 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15, &v13);
      Exception::Exception(v12, &v13);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v12);
    }
    v14 = v16;
    return CSRegionGetRange::$_3::operator()<FlatbufferSymbols::Section const>(&v14, (int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  }
}

void sub_1B40D79D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

unint64_t CSRegionGetRange::$_2::operator()<TMMapRegionImpl<Pointer64>>(_QWORD **a1, unint64_t *a2)
{
  TMMapSymbolOwnerData *v3;
  unint64_t v5;

  v3 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(**a1 & 0xFFFFFFFFFFFFFFF8));
  v5 = 0;
  if (TMMapSymbolOwnerData::convert_archive_address_to_real_address(v3, *a2, &v5))
    return v5;
  else
    return 0;
}

uint64_t CSRegionGetRange::$_3::operator()<FlatbufferSymbols::Section const>(_QWORD **a1, int *a2)
{
  FlatbufferSymbolOwnerData *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  char v8;

  v3 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(**a1 & 0xFFFFFFFFFFFFFFF8));
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 7u && (v5 = v4[3]) != 0)
    v6 = *(_QWORD *)((char *)a2 + v5);
  else
    v6 = -1;
  result = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v3, v6);
  if (!v8)
    return 0;
  return result;
}

const char *CSRegionGetName(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[0] = a1;
  v18[1] = a2;
  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  if (v3 == 7)
    return *(const char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 64) != *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 56))
    return *(const char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == 1)
    return *(const char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
  v6 = CSCppSymbolOwner::data(v4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) == 2)
    return *(const char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
  v8 = CSCppSymbolOwner::data(v4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) == 4)
  {
    v16 = v18;
    return CSRegionGetName::$_2::operator()<TMMapRegionImpl<Pointer64>>(&v16, a2 & 0xFFFFFFFFFFFFFFFCLL);
  }
  v9 = CSCppSymbolOwner::data(v4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) != 5)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
    v12 = CSCppSymbolOwner::data(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
    Exception::Exception(v14, &v15);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v14);
  }
  v10 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  if (*v10 >= 5u && (v11 = v10[2]) != 0)
    return (const char *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v11 + *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v11) + 4);
  else
    return 0;
}

void sub_1B40D7CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

const char *CSRegionGetName::$_2::operator()<TMMapRegionImpl<Pointer64>>(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  _DWORD *v4;
  unint64_t v5;

  v3 = (_QWORD *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(**a1 & 0xFFFFFFFFFFFFFFF8));
  v4 = (_DWORD *)v3[11];
  v5 = (unint64_t)v4
     + 32 * v4[2]
     + 24 * v4[3]
     + (24 * v4[4])
     + (unint64_t)(4 * v4[4])
     + (36 * v4[5])
     + (20 * v4[6])
     + v4[22]
     + v4[20]
     + *(unsigned int *)(a2 + 16)
     + 96;
  if ((*(unsigned int (**)(_QWORD *, unint64_t))(*v3 + 72))(v3, v5))
    return (const char *)v5;
  else
    return "<Invalid region name>";
}

uint64_t CSRegionGetSymbolicator(char a1, char a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return 2;
  else
    return 0;
}

uint64_t CSRegionGetSymbolOwner(char a1, char a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return 3;
  else
    return 0;
}

unint64_t CSRegionForeachSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  CSCppSymbolOwner *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  _QWORD *v17;
  _QWORD v18[32];
  _QWORD v19[2];

  v19[0] = a1;
  v19[1] = a2;
  v4 = a1 & 7 | (8 * (a2 & 3));
  if (!v4)
    return 0;
  v6 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  if (v4 == 7
    || *((_QWORD *)v6 + 8) != *((_QWORD *)v6 + 7)
    || (v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8)),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) == 1)
    || (v8 = CSCppSymbolOwner::data(v6), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) == 2))
  {
    v9 = CSCppSymbolOwner::data(v6);
    return (*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v9 + 128))(v9, v6, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL), *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8), a3);
  }
  else
  {
    v11 = CSCppSymbolOwner::data(v6);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11) == 4)
    {
      v17 = v19;
      v18[0] = a3;
      return CSRegionForeachSymbol::$_2::operator()<TMMapRegionImpl<Pointer64>>((uint64_t)&v17, (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
    }
    else
    {
      v12 = CSCppSymbolOwner::data(v6);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12) != 5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
        v13 = CSCppSymbolOwner::data(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v18, &v16);
        Exception::Exception(v15, &v16);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v15);
      }
      v17 = v19;
      v18[0] = a3;
      return CSRegionForeachSymbol::$_3::operator()<FlatbufferSymbols::Section const>((uint64_t)&v17, (int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

void sub_1B40D7FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

unint64_t CSRegionForeachSymbol::$_2::operator()<TMMapRegionImpl<Pointer64>>(uint64_t a1, _QWORD *a2)
{
  CSCppSymbolOwner *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (CSCppSymbolOwner *)(**(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data(v4);
  v6 = a2[1];
  if ((unint64_t)(v6 + *a2) > 0xFFFFFFFE)
    return 0;
  else
    return TMMapSymbolOwnerData::symbols_in_archive_address_range(v5, (uint64_t)v4, *a2 | ((unint64_t)v6 << 32), *(_QWORD *)(a1 + 8));
}

uint64_t CSRegionForeachSymbol::$_3::operator()<FlatbufferSymbols::Section const>(uint64_t a1, int *a2)
{
  CSCppSymbolOwner *v4;
  FlatbufferSymbolOwnerData *v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (CSCppSymbolOwner *)(**(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(v4);
  v6 = (uint64_t *)v5;
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(_QWORD *)((char *)a2 + v8);
  else
    v9 = -1;
  v10 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v5, v9);
  if (!v11)
    return 0;
  v12 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v12 >= 9u && (v13 = v12[4]) != 0)
    v14 = *(_QWORD *)((char *)a2 + v13);
  else
    v14 = 0;
  return FlatbufferSymbolOwnerData::symbols_in_address_range(v6, (uint64_t)v4, v10, v14, *(_QWORD *)(a1 + 8));
}

unint64_t CSRegionForeachSourceInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  CSCppSymbolOwner *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  _QWORD *v17;
  _QWORD v18[32];
  _QWORD v19[2];

  v19[0] = a1;
  v19[1] = a2;
  v4 = a1 & 7 | (8 * (a2 & 3));
  if (!v4)
    return 0;
  v6 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  if (v4 == 7
    || *((_QWORD *)v6 + 8) != *((_QWORD *)v6 + 7)
    || (v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8)),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) == 1)
    || (v8 = CSCppSymbolOwner::data(v6), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8) == 2))
  {
    v9 = CSCppSymbolOwner::data(v6);
    return (*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v9 + 152))(v9, v6, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL), *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8), a3);
  }
  else
  {
    v11 = CSCppSymbolOwner::data(v6);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11) == 4)
    {
      v17 = v19;
      v18[0] = a3;
      return CSRegionForeachSourceInfo::$_2::operator()<TMMapRegionImpl<Pointer64>>((uint64_t)&v17, (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
    }
    else
    {
      v12 = CSCppSymbolOwner::data(v6);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12) != 5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
        v13 = CSCppSymbolOwner::data(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v18, &v16);
        Exception::Exception(v15, &v16);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v15);
      }
      v17 = v19;
      v18[0] = a3;
      return CSRegionForeachSourceInfo::$_3::operator()<FlatbufferSymbols::Section const>((uint64_t)&v17, (int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

void sub_1B40D831C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

unint64_t CSRegionForeachSourceInfo::$_2::operator()<TMMapRegionImpl<Pointer64>>(uint64_t a1, _QWORD *a2)
{
  CSCppSymbolOwner *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (CSCppSymbolOwner *)(**(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data(v4);
  v6 = a2[1];
  if ((unint64_t)(v6 + *a2) > 0xFFFFFFFE)
    return 0;
  else
    return TMMapSymbolOwnerData::source_infos_in_archive_address_range(v5, (uint64_t)v4, *a2 | ((unint64_t)v6 << 32), *(_QWORD *)(a1 + 8));
}

uint64_t CSRegionForeachSourceInfo::$_3::operator()<FlatbufferSymbols::Section const>(uint64_t a1, int *a2)
{
  CSCppSymbolOwner *v4;
  FlatbufferSymbolOwnerData *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (CSCppSymbolOwner *)(**(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(v4);
  v6 = (uint64_t)v5;
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(_QWORD *)((char *)a2 + v8);
  else
    v9 = -1;
  v10 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v5, v9);
  if (!v11)
    return 0;
  v12 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v12 >= 9u && (v13 = v12[4]) != 0)
    v14 = *(_QWORD *)((char *)a2 + v13);
  else
    v14 = 0;
  return FlatbufferSymbolOwnerData::source_infos_in_address_range(v6, (uint64_t)v4, v10, v14, *(_QWORD *)(a1 + 8));
}

uint64_t CSSegmentForeachSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t Range;
  uint64_t v6;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  Range = CSRegionGetRange(a1, a2);
  return CSCppSymbolOwner::sections_in_address_range(a1 & 0xFFFFFFFFFFFFFFF8, Range, v6, a3);
}

unint64_t CSSectionGetSegment(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t Range;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = a1 & 0xFFFFFFFFFFFFFFF8;
  Range = CSRegionGetRange(a1, a2);
  return CSSymbolOwnerGetSegmentWithAddress(3, v2, Range);
}

unint64_t CSSourceInfoGetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  int *v6;
  FlatbufferSymbolOwnerData *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t result;
  TMMapSymbolOwnerData *v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *exception;
  _QWORD v20[4];
  __int128 v21;
  unint64_t v22;
  _BYTE v23[256];

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  if ((_DWORD)v3 != 5)
  {
    if ((_DWORD)v3 == 6)
    {
      v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
      v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
      switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
      {
        case 1u:
          return *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
        case 2u:
          return *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
        case 4u:
          goto LABEL_13;
        case 5u:
          v6 = (int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
          v7 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(v4);
          v8 = (unsigned __int16 *)((char *)v6 - *v6);
          if (*v8 >= 0xDu && (v9 = v8[6]) != 0)
            v10 = *(_QWORD *)((char *)v6 + v9);
          else
            v10 = -1;
          result = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v7, v10);
          if (!v15)
            return 0;
          return result;
        default:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
          v18 = CSCppSymbolOwner::data(v4);
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
          std::ostream::operator<<();
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23, &v21);
          Exception::Exception(v20, &v21);
          exception = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(exception, (uint64_t)v20);
      }
    }
    return 0;
  }
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v11 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  switch(v12)
  {
    case 4:
LABEL_13:
      v14 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v4);
      v22 = 0;
      if (TMMapSymbolOwnerData::convert_archive_address_to_real_address(v14, *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v22))return v22;
      else
        return 0;
    case 2:
      return *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    case 1:
      return *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v16 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23, &v21);
      Exception::Exception(v20, &v21);
      v17 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v17, (uint64_t)v20);
  }
}

void sub_1B40D87D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

const char *CSSourceInfoGetPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unint64_t v6;
  const char *result;
  CSCppSymbolOwner *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  const char *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *exception;
  _QWORD v22[4];
  __int128 v23;
  uint64_t v24;
  _BYTE v25[256];

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  if ((_DWORD)v3 != 5)
  {
    if ((_DWORD)v3 == 6)
    {
      v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
      v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
      switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
      {
        case 1u:
          v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          goto LABEL_21;
        case 2u:
          v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
          goto LABEL_21;
        case 4u:
          v13 = *(_DWORD **)(CSCppSymbolOwner::data(v4) + 88);
          result = (const char *)CSCppMMapSourceInfo::path((CSCppMMapSourceInfo *)(a2 & 0xFFFFFFFFFFFFFFFCLL), (uint64_t)v13+ 32 * v13[2]+ 24 * v13[3]+ (24 * v13[4])+ (unint64_t)(4 * v13[4])+ (36 * v13[5])+ (20 * v13[6])+ v13[22]+ v13[20]+ 96);
          if (!result)
            return "<Invalid path>";
          return result;
        case 5u:
          v14 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
          if (*v14 >= 5u && (v15 = v14[2]) != 0)
            return (const char *)((a2 & 0xFFFFFFFFFFFFFFFCLL)
                                + v15
                                + *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v15)
                                + 4);
          else
            return "<Invalid path>";
        default:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
          v20 = CSCppSymbolOwner::data(v4);
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
          std::ostream::operator<<();
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
          Exception::Exception(v22, &v23);
          exception = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(exception, (uint64_t)v22);
      }
    }
    return 0;
  }
  v8 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v9 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  if (v10 == 4)
  {
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = CSCppSymbolOwner::data(v8);
    if ((*(_DWORD *)(v11 + 8) & 0x80000000) != 0)
    {
      v17 = *(_DWORD **)(v12 + 88);
      v6 = (unint64_t)v17
         + 32 * v17[2]
         + 24 * v17[3]
         + (24 * v17[4])
         + (unint64_t)(4 * v17[4])
         + (36 * v17[5])
         + (20 * v17[6])
         + v17[22]
         + v17[20]
         + *(unsigned int *)(v11 + 24)
         + 96;
    }
    else
    {
      v6 = 0;
    }
    v16 = "<No path>";
  }
  else
  {
    if (v10 == 2)
    {
      v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 48);
    }
    else
    {
      if (v10 != 1)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
        v18 = CSCppSymbolOwner::data(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
        Exception::Exception(v22, &v23);
        v19 = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(v19, (uint64_t)v22);
      }
      v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 40);
    }
LABEL_21:
    v16 = "<Invalid path>";
  }
  if (v6)
    return (const char *)v6;
  else
    return v16;
}

void sub_1B40D8BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

const char *CSSourceInfoGetFilename(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  const char *v6;
  const char *result;
  CSCppSymbolOwner *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *exception;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[4];
  __int128 v23;
  uint64_t v24;
  _BYTE v25[256];

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  if ((_DWORD)v3 == 5)
  {
    v8 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
    v9 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    switch(v10)
    {
      case 4:
        v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
        v12 = CSCppSymbolOwner::data(v8);
        if ((*(_DWORD *)(v11 + 8) & 0x80000000) == 0)
          return "<No path>";
        v13 = *(_DWORD **)(v12 + 88);
        v14 = (unint64_t)v13
            + 32 * v13[2]
            + 24 * v13[3]
            + (24 * v13[4])
            + (unint64_t)(4 * v13[4])
            + (36 * v13[5])
            + (20 * v13[6])
            + v13[22]
            + v13[20]
            + *(unsigned int *)(v11 + 24);
        v6 = (const char *)(v14 + 96);
        if (v14 == -96)
          return "<No path>";
        break;
      case 2:
        v6 = *(const char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 48);
        if (!v6)
          return "<Invalid path>";
        break;
      case 1:
        v6 = *(const char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        if (!v6)
          return "<Invalid path>";
        break;
      default:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
        v18 = CSCppSymbolOwner::data(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
        Exception::Exception(v22, &v23);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v22);
    }
    return filename_from_path(v6);
  }
  if ((_DWORD)v3 != 6)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = *(const char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      if (!v6)
        goto LABEL_26;
      return filename_from_path(v6);
    case 2u:
      v6 = *(const char **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
      if (v6)
        return filename_from_path(v6);
      goto LABEL_26;
    case 4u:
      v15 = *(_DWORD **)(CSCppSymbolOwner::data(v4) + 88);
      v6 = (const char *)CSCppMMapSourceInfo::path((CSCppMMapSourceInfo *)(a2 & 0xFFFFFFFFFFFFFFFCLL), (uint64_t)v15+ 32 * v15[2]+ 24 * v15[3]+ (24 * v15[4])+ (unint64_t)(4 * v15[4])+ (36 * v15[5])+ (20 * v15[6])+ v15[22]+ v15[20]+ 96);
      if (v6)
        return filename_from_path(v6);
LABEL_26:
      result = "<Invalid filename>";
      break;
    case 5u:
      v16 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      if (*v16 < 5u)
        return "<No path>";
      v17 = v16[2];
      if (!v17)
        return "<No path>";
      result = filename_from_path((const char *)((a2 & 0xFFFFFFFFFFFFFFFCLL)
                                               + v17
                                               + *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v17)
                                               + 4));
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v20 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      v21 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v21, (uint64_t)v22);
  }
  return result;
}

void sub_1B40D8F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSourceInfoGetLineNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  uint64_t result;
  CSCppSymbolOwner *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *exception;
  _QWORD v16[4];
  __int128 v17;
  uint64_t v18;
  _BYTE v19[256];

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  if ((_DWORD)v3 != 5)
  {
    if ((_DWORD)v3 == 6)
    {
      v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
      v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
      switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
      {
        case 1u:
          return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
        case 2u:
          return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 24);
        case 4u:
          return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 12);
        case 5u:
          v10 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
          if (*v10 < 9u)
            return 0;
          v11 = v10[4];
          if (!v11)
            return 0;
          result = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v11);
          break;
        default:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
          v14 = CSCppSymbolOwner::data(v4);
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
          std::ostream::operator<<();
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19, &v17);
          Exception::Exception(v16, &v17);
          exception = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(exception, (uint64_t)v16);
      }
      return result;
    }
    return 0;
  }
  v7 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v8 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  if (v9 == 4)
  {
    if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8) & 0x80000000) != 0)
      return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
    return 0;
  }
  if (v9 == 2)
    return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56);
  if (v9 != 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
    v12 = CSCppSymbolOwner::data(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19, &v17);
    Exception::Exception(v16, &v17);
    v13 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v13, (uint64_t)v16);
  }
  return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 48);
}

void sub_1B40D9254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSourceInfoGetColumn(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  int v6;
  CSCppSymbolOwner *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *exception;
  _QWORD v17[4];
  __int128 v18;
  uint64_t v19;
  _BYTE v20[256];

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  if ((_DWORD)v3 != 5)
  {
    if ((_DWORD)v3 == 6)
    {
      v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
      v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
      switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
      {
        case 1u:
          v6 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
          return v6 & 0x7FFFFFFF;
        case 2u:
          v6 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
          return v6 & 0x7FFFFFFF;
        case 4u:
          return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
        case 5u:
          v11 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
          if (*v11 < 0xBu)
            return 0;
          v12 = v11[5];
          if (!v12)
            return 0;
          result = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v12);
          break;
        default:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
          v15 = CSCppSymbolOwner::data(v4);
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
          std::ostream::operator<<();
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20, &v18);
          Exception::Exception(v17, &v18);
          exception = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(exception, (uint64_t)v17);
      }
      return result;
    }
    return 0;
  }
  v7 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v8 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  if (v9 == 4)
  {
    if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8) & 0x80000000) != 0)
      return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 32);
    return 0;
  }
  if (v9 == 2)
    return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 60);
  if (v9 != 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
    v13 = CSCppSymbolOwner::data(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20, &v18);
    Exception::Exception(v17, &v18);
    v14 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v14, (uint64_t)v17);
  }
  return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 52);
}

void sub_1B40D9510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSourceInfoGetSymbolicator(char a1, char a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return 2;
  else
    return 0;
}

uint64_t CSSourceInfoGetSymbolOwner(char a1, char a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return 3;
  else
    return 0;
}

uint64_t CSSourceInfoGetRegion(uint64_t a1, uint64_t a2)
{
  unint64_t Range;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  Range = CSSourceInfoGetRange(a1, a2);
  return CSSymbolOwnerGetSectionWithAddress(3, a1 & 0xFFFFFFFFFFFFFFF8, Range);
}

uint64_t CSSourceInfoGetSymbol(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  int *v6;
  FlatbufferSymbolOwnerData *v7;
  FlatbufferSymbolOwnerData *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  TMMapSymbolOwnerData *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *exception;
  _QWORD v24[4];
  __int128 v25;
  uint64_t v26;
  _BYTE v27[256];

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  if ((_DWORD)v3 != 5)
  {
    if ((_DWORD)v3 == 6)
    {
      v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
      v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
      switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
      {
        case 1u:
          goto LABEL_11;
        case 2u:
          goto LABEL_12;
        case 4u:
          goto LABEL_14;
        case 5u:
          v6 = (int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
          v7 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(v4);
          v8 = v7;
          v9 = (unsigned __int16 *)((char *)v6 - *v6);
          if (*v9 >= 0xDu && (v10 = v9[6]) != 0)
            v11 = *(_QWORD *)((char *)v6 + v10);
          else
            v11 = -1;
          v18 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v7, v11);
          if (!v19)
            return 0;
          result = FlatbufferSymbolOwnerData::symbol_for_address(v8, v4, v18);
          break;
        default:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
          v22 = CSCppSymbolOwner::data(v4);
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
          std::ostream::operator<<();
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, &v25);
          Exception::Exception(v24, &v25);
          exception = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(exception, (uint64_t)v24);
      }
      return result;
    }
    return 0;
  }
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v12 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (v13 == 4)
  {
LABEL_14:
    v17 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v4);
    return TMMapSymbolOwnerData::symbol_for_archive_address(v17, v4, *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  }
  else
  {
    if (v13 == 2)
    {
LABEL_12:
      v14 = CSCppSymbolOwner::data(v4);
      v15 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    }
    else
    {
      if (v13 != 1)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
        v20 = CSCppSymbolOwner::data(v4);
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, &v25);
        Exception::Exception(v24, &v25);
        v21 = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(v21, (uint64_t)v24);
      }
LABEL_11:
      v14 = CSCppSymbolOwner::data(v4);
      v15 = *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    }
    return (*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, uint64_t))(*(_QWORD *)v14 + 136))(v14, v4, v15);
  }
}

void sub_1B40D9898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

unint64_t CSSymbolGetRange(uint64_t a1, uint64_t a2)
{
  CSCppSymbolOwner *v3;
  uint64_t v4;
  unint64_t result;
  TMMapSymbolOwnerData *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  _QWORD v12[4];
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  char v16;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v3 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v4 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    case 1u:
      CSCppSymbolOwner::data(v3);
      return *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    case 2u:
      CSCppSymbolOwner::data(v3);
      return *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    case 4u:
      v6 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v3);
      v14 = 0;
      if (!TMMapSymbolOwnerData::convert_archive_address_to_real_address(v6, *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v14))return 0;
      result = v14;
      break;
    case 5u:
      v12[0] = a2 & 0xFFFFFFFFFFFFFFFCLL;
      v7 = CSCppSymbolOwner::data(v3);
      v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(v12);
      FlatbufferSymbolOwnerData::convertVMAddressRangeToSlidAddressRange(v7, v8, v9, (uint64_t)&v14);
      if (v16)
        return v14;
      else
        return 0;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v10 = CSCppSymbolOwner::data(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15, &v13);
      Exception::Exception(v12, &v13);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v12);
  }
  return result;
}

void sub_1B40D9AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolGetFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  unint64_t v12;
  uint64_t v13;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      TRawSymbol<Pointer32>::is_objc_method(a2 & 0xFFFFFFFFFFFFFFFCLL);
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_9;
    case 2u:
      TRawSymbol<Pointer64>::is_objc_method(a2 & 0xFFFFFFFFFFFFFFFCLL);
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_9:
      result = atomic_load(v6);
      break;
    case 4u:
      result = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      break;
    case 5u:
      v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      if (v3 == 10)
        result = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(&v12);
      else
        result = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(&v12);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v8 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
  }
  return result;
}

void sub_1B40D9C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

char *CSSymbolGetName(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  FlatbufferSymbols::Symbol *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  FlatbufferSymbolOwnerData *v17;
  std::string::size_type v18;
  unsigned int v19;
  unsigned __int16 *v20;
  FlatbufferSymbolOwnerData *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *exception;
  _QWORD v26[4];
  __int128 v27;
  FlatbufferSymbols::Symbol *v28;
  uint64_t v29;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (v3)
  {
    v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
    v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
    {
      case 1u:
        v6 = atomic_load((unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20));
        if ((v6 & 0x1C000) == 0)
          return 0;
        v7 = TRawSymbol<Pointer32>::_resolve_name(a2 & 0xFFFFFFFFFFFFFFFCLL, 0, 0);
        goto LABEL_15;
      case 2u:
        v19 = atomic_load((unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28));
        if ((v19 & 0x1C000) == 0)
          return 0;
        v7 = TRawSymbol<Pointer64>::_resolve_name(a2 & 0xFFFFFFFFFFFFFFFCLL, 0, 0);
LABEL_15:
        v13 = v7;
        v11 = 0;
        goto LABEL_25;
      case 4u:
        v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(v8 + 8) & 0x1C000) == 0)
          return 0;
        v9 = CSCppSymbolOwner::data(v4);
        v10 = *(unsigned int *)(v8 + 12);
        if ((_DWORD)v10)
        {
          v11 = 0;
          v12 = *(_DWORD **)(v9 + 88);
          v13 = (uint64_t)v12
              + 32 * v12[2]
              + 24 * v12[3]
              + (24 * v12[4])
              + (unint64_t)(4 * v12[4])
              + (36 * v12[5])
              + (20 * v12[6])
              + v12[22]
              + v12[20]
              + v10
              + 96;
          goto LABEL_25;
        }
        return TMMapSymbolOwnerData::demangledNameForSymbol(v9, v8);
      case 5u:
        if (v3 == 10)
        {
          v28 = (FlatbufferSymbols::Symbol *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
          if (!FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v28))
          {
            v14 = v28;
            v15 = (unsigned __int16 *)((char *)v28 - *(int *)v28);
            if (*v15 < 0xBu || (v16 = v15[5]) == 0)
            {
              v17 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(v4);
              v18 = FlatbufferSymbolOwnerData::demangledNameForSymbol(v17, v28);
LABEL_24:
              v13 = v18;
              v11 = 1;
              goto LABEL_25;
            }
            goto LABEL_21;
          }
        }
        else
        {
          v28 = (FlatbufferSymbols::Symbol *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
          if (!FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v28))
          {
            v14 = v28;
            v20 = (unsigned __int16 *)((char *)v28 - *(int *)v28);
            if (*v20 < 0xBu || (v16 = v20[5]) == 0)
            {
              v22 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(v4);
              v18 = FlatbufferSymbolOwnerData::demangledNameForSymbol(v22, v28);
              goto LABEL_24;
            }
LABEL_21:
            v11 = 0;
            v13 = (uint64_t)v14 + v16 + *(unsigned int *)((char *)v14 + v16) + 4;
LABEL_25:
            if (v13 && !v11)
            {
              v23 = CSCppSymbolOwner::data(v4);
              if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, v13))
                return 0;
            }
            return (char *)v13;
          }
        }
        v11 = 0;
        v13 = 0;
        goto LABEL_25;
      default:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
        v24 = CSCppSymbolOwner::data(v4);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v29, &v27);
        Exception::Exception(v26, &v27);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v26);
    }
  }
  return 0;
}

void sub_1B40D9FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 < 0x11u)
    return 1;
  v2 = v1[8];
  if (!v2)
    return 1;
  if ((*(_QWORD *)(*a1 + v2) & 0x600) != 0)
    return 0;
  return (*(_QWORD *)(*a1 + v2) & 0x800) == 0;
}

BOOL FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 < 0x13u)
    return 1;
  v2 = v1[9];
  if (!v2)
    return 1;
  if ((*(_QWORD *)(*a1 + v2) & 0x600) != 0)
    return 0;
  return (*(_QWORD *)(*a1 + v2) & 0x800) == 0;
}

uint64_t CSSymbolGetMangledName(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *exception;
  _QWORD v18[4];
  __int128 v19;
  int *v20;
  uint64_t v21;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = atomic_load((unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20));
      if ((v6 & 0x1C000) == 0)
        return 0;
      v7 = TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>(a2 & 0xFFFFFFFFFFFFFFFCLL);
      goto LABEL_12;
    case 2u:
      v11 = atomic_load((unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28));
      if ((v11 & 0x1C000) == 0)
        return 0;
      v7 = TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(a2 & 0xFFFFFFFFFFFFFFFCLL);
LABEL_12:
      v10 = v7;
      goto LABEL_18;
    case 4u:
      v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_DWORD *)(v8 + 8) & 0x1C000) == 0)
        return 0;
      v9 = *(_DWORD **)(CSCppSymbolOwner::data(v4) + 88);
      v10 = (uint64_t)v9
          + 32 * v9[2]
          + 24 * v9[3]
          + (24 * v9[4])
          + (unint64_t)(4 * v9[4])
          + (36 * v9[5])
          + (20 * v9[6])
          + v9[22]
          + v9[20]
          + *(unsigned int *)(v8 + 16)
          + 96;
      goto LABEL_18;
    case 5u:
      if (v3 == 10)
      {
        v20 = (int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
        if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v20))
          goto LABEL_17;
      }
      else
      {
        v20 = (int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
        if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v20))
          goto LABEL_17;
      }
      v12 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v12 >= 9u)
      {
        v13 = v12[4];
        if (v13)
        {
          v10 = (uint64_t)v20 + v13 + *(unsigned int *)((char *)v20 + v13) + 4;
          goto LABEL_18;
        }
      }
LABEL_17:
      v10 = 0;
LABEL_18:
      if (!v10)
        return 0;
      v14 = CSCppSymbolOwner::data(v4);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 72))(v14, v10))
        result = v10;
      else
        result = 0;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v16 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v21, &v19);
      Exception::Exception(v18, &v19);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v18);
  }
  return result;
}

void sub_1B40DA314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  char v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v7 = atomic_load(v6);
      goto LABEL_11;
    case 4u:
      v7 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_11;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10);
LABEL_11:
      result = v7 & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
  return result;
}

void sub_1B40DA4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsDyldStub(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v7 = atomic_load(v6);
      goto LABEL_11;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_11;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10);
LABEL_11:
      result = (v7 >> 1) & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
  return result;
}

void sub_1B40DA6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsObjcMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *exception;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      return TRawSymbol<Pointer32>::is_objc_method(a2 & 0xFFFFFFFFFFFFFFFCLL);
    case 2u:
      return TRawSymbol<Pointer64>::is_objc_method(a2 & 0xFFFFFFFFFFFFFFFCLL);
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_13;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10);
LABEL_13:
      result = (v7 >> 2) & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v11 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v16, &v14);
      Exception::Exception(v13, &v14);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v13);
  }
  return result;
}

void sub_1B40DA88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbol<Pointer32>::is_objc_method(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  CSCppBitLock *v6;
  unsigned int v7;
  _QWORD v9[5];
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (unsigned int *)(a1 + 20);
  v2 = atomic_load((unsigned int *)(a1 + 20));
  if ((v2 & 0x1000000) == 0)
  {
    v4 = TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>(a1);
    v11 = 0;
    v12 = &v11;
    v13 = 0x2000000000;
    v14 = 0;
    v5 = operator new();
    CSCppBitLock::CSCppBitLock(v5, v1, 0x2000);
    v14 = v5;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN10TRawSymbolI9Pointer32E14is_objc_methodEv_block_invoke;
    v10[3] = &unk_1E6775288;
    v10[5] = a1;
    v10[6] = v4;
    v10[4] = &v11;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___ZN10TRawSymbolI9Pointer32E14is_objc_methodEv_block_invoke_2;
    v9[3] = &unk_1E67752B0;
    v9[4] = &v11;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v10, (uint64_t)v9);
    v6 = (CSCppBitLock *)v12[3];
    if (v6)
    {
      CSCppBitLock::~CSCppBitLock(v6);
      MEMORY[0x1B5E36940]();
      v12[3] = 0;
    }
    _Block_object_dispose(&v11, 8);
  }
  v7 = atomic_load(v1);
  return (v7 >> 2) & 1;
}

void sub_1B40DAA08(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbol<Pointer64>::is_objc_method(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  CSCppBitLock *v6;
  unsigned int v7;
  _QWORD v9[5];
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (unsigned int *)(a1 + 28);
  v2 = atomic_load((unsigned int *)(a1 + 28));
  if ((v2 & 0x1000000) == 0)
  {
    v4 = TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(a1);
    v11 = 0;
    v12 = &v11;
    v13 = 0x2000000000;
    v14 = 0;
    v5 = operator new();
    CSCppBitLock::CSCppBitLock(v5, v1, 0x2000);
    v14 = v5;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN10TRawSymbolI9Pointer64E14is_objc_methodEv_block_invoke;
    v10[3] = &unk_1E67752D8;
    v10[5] = a1;
    v10[6] = v4;
    v10[4] = &v11;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___ZN10TRawSymbolI9Pointer64E14is_objc_methodEv_block_invoke_2;
    v9[3] = &unk_1E6775300;
    v9[4] = &v11;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v10, (uint64_t)v9);
    v6 = (CSCppBitLock *)v12[3];
    if (v6)
    {
      CSCppBitLock::~CSCppBitLock(v6);
      MEMORY[0x1B5E36940]();
      v12[3] = 0;
    }
    _Block_object_dispose(&v11, 8);
  }
  v7 = atomic_load(v1);
  return (v7 >> 2) & 1;
}

void sub_1B40DAB6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsExternal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v7 = atomic_load(v6);
      return (v7 >> 4) & 1;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      return (v7 >> 4) & 1;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 != 10)
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
        return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10) >> 3) & 1;
      }
      if (v9 >= 0x11)
      {
        v10 = v8[8];
        if (v10)
          return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10) >> 3) & 1;
      }
      return 0;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
}

void sub_1B40DAD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsAlias(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 9) & 1;
    case 4u:
      return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 9) >> 1) & 1;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 != 10)
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
        return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10) >> 4) & 1;
      }
      if (v9 >= 0x11)
      {
        v10 = v8[8];
        if (v10)
          return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10) >> 4) & 1;
      }
      return 0;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
}

void sub_1B40DAEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsPrivateExternal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v7 = atomic_load(v6);
      goto LABEL_11;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_11;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10);
LABEL_11:
      result = (v7 >> 5) & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
  return result;
}

void sub_1B40DB0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsArm(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  unsigned int v8;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_11;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_11:
      v8 = atomic_load(v6);
      goto LABEL_12;
    case 4u:
      v8 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_12;
    case 5u:
      v9 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v10 = *v9;
      if (v3 == 10)
      {
        if (v10 < 0x11 || (v11 = v9[8]) == 0)
        {
LABEL_17:
          v12 = 0;
          goto LABEL_13;
        }
      }
      else
      {
        if (v10 < 0x13)
          goto LABEL_17;
        v11 = v9[9];
        if (!v11)
          goto LABEL_17;
      }
      v8 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v11);
LABEL_12:
      v12 = (v8 >> 6) & 1;
LABEL_13:
      result = v12 ^ 1u;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v13 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v18, &v16);
      Exception::Exception(v15, &v16);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v15);
  }
  return result;
}

void sub_1B40DB29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsThumb(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v7 = atomic_load(v6);
      goto LABEL_11;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_11;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10);
LABEL_11:
      result = (v7 >> 6) & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
  return result;
}

void sub_1B40DB468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsOmitFramePointer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 7) & 1;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_14;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10);
LABEL_14:
      result = v7 >> 7;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v13 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v18, &v16);
      Exception::Exception(v15, &v16);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v15);
  }
  return result;
}

void sub_1B40DB638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsKnownLength(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  char v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 8) & 1;
    case 4u:
      v7 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 9);
      goto LABEL_14;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1);
LABEL_14:
      result = v7 & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v13 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v18, &v16);
      Exception::Exception(v15, &v16);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v15);
  }
  return result;
}

void sub_1B40DB80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL CSSymbolIsUnnamed(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  _BOOL8 result;
  unsigned int v8;
  uint64_t v9;
  _QWORD *exception;
  _QWORD v11[4];
  __int128 v12;
  unint64_t v13;
  uint64_t v14;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_9;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_9:
      v8 = atomic_load(v6);
      goto LABEL_10;
    case 4u:
      v8 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
LABEL_10:
      result = (v8 & 0x1C000) == 0;
      break;
    case 5u:
      v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      if (v3 == 10)
        result = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v13);
      else
        result = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v13);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v9 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v14, &v12);
      Exception::Exception(v11, &v12);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v11);
  }
  return result;
}

void sub_1B40DB9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolGetSymbolicator(char a1, char a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return 2;
  else
    return 0;
}

uint64_t CSSymbolGetSymbolOwner(char a1, char a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return 3;
  else
    return 0;
}

uint64_t CSSymbolGetSection(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t Range;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = a1 & 0xFFFFFFFFFFFFFFF8;
  Range = CSSymbolGetRange(a1, a2);
  return CSSymbolOwnerGetSectionWithAddress(3, v2, Range);
}

unint64_t CSSymbolGetSegment(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t Range;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = a1 & 0xFFFFFFFFFFFFFFF8;
  Range = CSSymbolGetRange(a1, a2);
  return CSCppSymbolOwner::segment_at_address(v2, Range);
}

unint64_t CSSymbolForeachSourceInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CSCppSymbolOwner *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *exception;
  _QWORD v19[4];
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  char v23;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v5 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v6 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
  {
    case 1u:
      v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
      v8 = CSCppSymbolOwner::data(v5);
      v9 = *v7;
      v10 = v7[1];
      return (*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 152))(v8, v5, v9, v10, a3);
    case 2u:
      v15 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
      v8 = CSCppSymbolOwner::data(v5);
      v9 = *v15;
      v10 = v15[1];
      return (*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 152))(v8, v5, v9, v10, a3);
    case 4u:
      v11 = CSCppSymbolOwner::data(v5);
      return TMMapSymbolOwnerData::source_infos_in_archive_address_range(v11, (uint64_t)v5, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3);
    case 5u:
      v19[0] = a2 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = CSCppSymbolOwner::data(v5);
      v14 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(v19);
      FlatbufferSymbolOwnerData::convertVMAddressRangeToSlidAddressRange(v13, v14, v16, (uint64_t)&v21);
      if (!v23)
        return 0;
      result = FlatbufferSymbolOwnerData::source_infos_in_address_range(v13, (uint64_t)v5, v21, v22, a3);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v17 = CSCppSymbolOwner::data(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v22, &v20);
      Exception::Exception(v19, &v20);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v19);
  }
  return result;
}

void sub_1B40DBD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolForeachInlineRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 176))(v7, v6, a1, a2, a3);
}

uint64_t CSSymbolForeachInlineRangeAtDepth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if ((a3 & 0x80000000) != 0 || !(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v8 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 184))(v8, a1 & 0xFFFFFFFFFFFFFFF8, a1, a2, a3, a4);
}

uint64_t CSSymbolIsNList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 25) & 1;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 11);
      goto LABEL_14;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1);
LABEL_14:
      result = (v7 >> 1) & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v13 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v18, &v16);
      Exception::Exception(v15, &v16);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v15);
  }
  return result;
}

void sub_1B40DBFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsDwarf(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 26) & 1;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 11);
      goto LABEL_14;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1);
LABEL_14:
      result = (v7 >> 2) & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v13 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v18, &v16);
      Exception::Exception(v15, &v16);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v15);
  }
  return result;
}

void sub_1B40DC1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsDebugMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 27) & 1;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 11);
      goto LABEL_14;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1);
LABEL_14:
      result = (v7 >> 3) & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v13 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v18, &v16);
      Exception::Exception(v15, &v16);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v15);
  }
  return result;
}

void sub_1B40DC380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsFunctionStarts(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *exception;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 28) & 1;
    case 4u:
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 11);
      goto LABEL_14;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 == 10)
      {
        if (v9 < 0x11)
          return 0;
        v10 = v8[8];
        if (!v10)
          return 0;
      }
      else
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
      }
      v7 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1);
LABEL_14:
      result = (v7 >> 4) & 1;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v13 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v18, &v16);
      Exception::Exception(v15, &v16);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v15);
  }
  return result;
}

void sub_1B40DC554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsMerged(uint64_t a1, uint64_t a2)
{
  CSCppSymbolOwner *v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *exception;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v3 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v4 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) - 1;
  result = 0;
  switch(v5)
  {
    case 0:
      v7 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_6;
    case 1:
      v7 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_6:
      v8 = atomic_load(v7);
      result = (v8 >> 29) & 1;
      break;
    case 3:
      result = (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 11) >> 5) & 1;
      break;
    case 4:
      return result;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v9 = CSCppSymbolOwner::data(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v14, &v12);
      Exception::Exception(v11, &v12);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v11);
  }
  return result;
}

void sub_1B40DC6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsNameSourceNList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 14) & 1;
    case 4u:
      return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 9) >> 6) & 1;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 != 10)
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
        return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1) >> 1) & 1;
      }
      if (v9 >= 0x11)
      {
        v10 = v8[8];
        if (v10)
          return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1) >> 1) & 1;
      }
      return 0;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
}

void sub_1B40DC8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsNameSourceDwarf(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  _QWORD *exception;
  _QWORD v11[4];
  __int128 v12;
  unint64_t v13;
  uint64_t v14;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_9;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_9:
      v8 = atomic_load(v6);
      result = (v8 >> 15) & 1;
      break;
    case 4u:
      result = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 9) >> 7;
      break;
    case 5u:
      v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      if (v3 == 10)
        result = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_name_source_dwarf(&v13);
      else
        result = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_name_source_dwarf(&v13);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v9 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v14, &v12);
      Exception::Exception(v11, &v12);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v11);
  }
  return result;
}

void sub_1B40DCA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_name_source_dwarf(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  return *v1 >= 0x11u
      && (v2 = v1[8]) != 0
      && (*(_QWORD *)(*a1 + v2) & 0xC00) != 0
      && (*(_QWORD *)(*a1 + v2) & 0x200) == 0;
}

BOOL FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_name_source_dwarf(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  return *v1 >= 0x13u
      && (v2 = v1[9]) != 0
      && (*(_QWORD *)(*a1 + v2) & 0xC00) != 0
      && (*(_QWORD *)(*a1 + v2) & 0x200) == 0;
}

uint64_t CSSymbolIsNameSourceDwarfMIPSLinkage(uint64_t a1, uint64_t a2)
{
  CSCppSymbolOwner *v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *exception;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v3 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v4 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) - 1;
  result = 0;
  switch(v5)
  {
    case 0:
      v7 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_6;
    case 1:
      v7 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_6:
      v8 = atomic_load(v7);
      result = HIWORD(v8) & 1;
      break;
    case 3:
      result = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 10) & 1;
      break;
    case 4:
      return result;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v9 = CSCppSymbolOwner::data(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v14, &v12);
      Exception::Exception(v11, &v12);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v11);
  }
  return result;
}

void sub_1B40DCC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsMangledNameSourceNList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_10;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_10:
      v11 = atomic_load(v6);
      return (v11 >> 19) & 1;
    case 4u:
      return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 10) >> 3) & 1;
    case 5u:
      v8 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      v9 = *v8;
      if (v3 != 10)
      {
        if (v9 < 0x13)
          return 0;
        v10 = v8[9];
        if (!v10)
          return 0;
        return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1) >> 1) & 1;
      }
      if (v9 >= 0x11)
      {
        v10 = v8[8];
        if (v10)
          return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v10 + 1) >> 1) & 1;
      }
      return 0;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
}

void sub_1B40DCE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsMangledNameSourceDwarf(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  _QWORD *exception;
  _QWORD v11[4];
  __int128 v12;
  unint64_t v13;
  uint64_t v14;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_9;
    case 2u:
      v6 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_9:
      v8 = atomic_load(v6);
      result = (v8 >> 20) & 1;
      break;
    case 4u:
      result = (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 10) >> 4) & 1;
      break;
    case 5u:
      v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      if (v3 == 10)
        result = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_name_source_dwarf(&v13);
      else
        result = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_name_source_dwarf(&v13);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v9 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v14, &v12);
      Exception::Exception(v11, &v12);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v11);
  }
  return result;
}

void sub_1B40DD014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolIsMangledNameSourceDwarfMIPSLinkage(uint64_t a1, uint64_t a2)
{
  CSCppSymbolOwner *v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *exception;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v3 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v4 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) - 1;
  result = 0;
  switch(v5)
  {
    case 0:
      v7 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      goto LABEL_6;
    case 1:
      v7 = (unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
LABEL_6:
      v8 = atomic_load(v7);
      result = (v8 >> 21) & 1;
      break;
    case 3:
      result = (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 10) >> 5) & 1;
      break;
    case 4:
      return result;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v9 = CSCppSymbolOwner::data(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v14, &v12);
      Exception::Exception(v11, &v12);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v11);
  }
  return result;
}

void sub_1B40DD1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL CSSymbolHasInlinedSourceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CSCppSymbolOwner *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1 & 7 | (8 * (a2 & 3));
  if (!v3)
    return 0;
  v4 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    case 1u:
      v6 = atomic_load((unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 20));
      if ((v6 & 0x80000000) == 0)
        return 0;
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      goto LABEL_13;
    case 2u:
      v11 = atomic_load((unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28));
      if ((v11 & 0x80000000) == 0)
        return 0;
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 48);
LABEL_13:
      v10 = v7 == 0;
      break;
    case 4u:
      return *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8) >> 31;
    case 5u:
      if (v3 != 10)
        return 0;
      v9 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
      if (*v9 < 0xDu)
        return 0;
      v10 = v9[6] == 0;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
      v12 = CSCppSymbolOwner::data(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
      Exception::Exception(v14, &v15);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v14);
  }
  return !v10;
}

void sub_1B40DD374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void CSSymbolReleaseMemory(uint64_t a1, uint64_t a2)
{
  CSCppSymbolOwner *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *exception;
  _QWORD v8[4];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 & 7 | (8 * (a2 & 3)))
  {
    v3 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
    v4 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    if ((v5 - 4) >= 2)
    {
      if (v5 == 2)
      {
        TRawSymbol<Pointer64>::release_memory(a2 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        if (v5 != 1)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
          v6 = CSCppSymbolOwner::data(v3);
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
          std::ostream::operator<<();
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v11, &v9);
          Exception::Exception(v8, &v9);
          exception = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(exception, (uint64_t)v8);
        }
        TRawSymbol<Pointer32>::release_memory(a2 & 0xFFFFFFFFFFFFFFFCLL);
      }
    }
  }
}

void sub_1B40DD4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TRawSymbol<Pointer32>::release_memory(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (unsigned int *)(a1 + 20);
  v3 = atomic_load((unsigned int *)(a1 + 20));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  while (v4 != v5)
  {
    TRawSymbol<Pointer32>::release_memory(v4);
    v4 += 96;
  }
  v6 = atomic_load(v2);
  if ((v6 & 0x40000) != 0)
  {
    free(*(void **)(a1 + 24));
    v3 &= ~0x40000u;
  }
  v7 = atomic_load((unsigned int *)(a1 + 20));
  if ((v7 & 0x800000) != 0)
  {
    free(*(void **)(a1 + 32));
    v3 &= ~0x800000u;
  }
  atomic_store(v3 & 0xFFBDFFFF, (unsigned int *)(a1 + 20));
}

void TRawSymbol<Pointer64>::release_memory(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (unsigned int *)(a1 + 28);
  v3 = atomic_load((unsigned int *)(a1 + 28));
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  while (v4 != v5)
  {
    TRawSymbol<Pointer64>::release_memory(v4);
    v4 += 104;
  }
  v6 = atomic_load(v2);
  if ((v6 & 0x40000) != 0)
  {
    free(*(void **)(a1 + 32));
    v3 &= ~0x40000u;
  }
  v7 = atomic_load((unsigned int *)(a1 + 28));
  if ((v7 & 0x800000) != 0)
  {
    free(*(void **)(a1 + 40));
    v3 &= ~0x800000u;
  }
  atomic_store(v3 & 0xFFBDFFFF, (unsigned int *)(a1 + 28));
}

uint64_t FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 0x11u && (v2 = v1[8]) != 0)
    v3 = *(_QWORD *)(*a1 + v2);
  else
    LODWORD(v3) = 0;
  return FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::convertFBSFlagsToCSFlags((uint64_t)a1, v3);
}

uint64_t FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::convertFBSFlagsToCSFlags(uint64_t a1, unsigned int a2)
{
  int32x4_t v2;
  int8x16_t v3;
  __int32 v4;
  int8x16_t v5;

  v2 = (int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a2), (uint32x4_t)xmmword_1B41A8270);
  v3 = vextq_s8((int8x16_t)v2, (int8x16_t)vzip2q_s32(v2, vzip1q_s32(v2, v2)), 0xCuLL);
  v4 = v2.i32[2];
  v2.i32[3] = v2.i32[1];
  v5 = vorrq_s8(vandq_s8((int8x16_t)v2, (int8x16_t)xmmword_1B41A8290), vandq_s8(v3, (int8x16_t)xmmword_1B41A8280));
  *(int8x8_t *)v5.i8 = vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  return v5.i32[0] | a2 & 0x1E7 | v5.i32[1] | v4 & 0x18000000;
}

uint64_t FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 0x13u && (v2 = v1[9]) != 0)
    v3 = *(_QWORD *)(*a1 + v2);
  else
    LODWORD(v3) = 0;
  return FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::convertFBSFlagsToCSFlags((uint64_t)a1, v3);
}

uint64_t TRawSymbol<Pointer32>::_resolve_name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v8;
  CSCppBitLock *v9;
  _QWORD v11[5];
  _QWORD v12[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (unsigned int *)(a1 + 20);
  v5 = atomic_load((unsigned int *)(a1 + 20));
  if ((v5 & 0x20000) == 0)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    v16 = 0;
    v8 = operator new();
    CSCppBitLock::CSCppBitLock(v8, v4, 0x2000);
    v16 = v8;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN10TRawSymbolI9Pointer32E13_resolve_nameEPPcPm_block_invoke;
    v12[3] = &unk_1E6775148;
    v12[6] = a2;
    v12[7] = a3;
    v12[4] = &v13;
    v12[5] = a1;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZN10TRawSymbolI9Pointer32E13_resolve_nameEPPcPm_block_invoke_2;
    v11[3] = &unk_1E6775170;
    v11[4] = &v13;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v12, (uint64_t)v11);
    v9 = (CSCppBitLock *)v14[3];
    if (v9)
    {
      CSCppBitLock::~CSCppBitLock(v9);
      MEMORY[0x1B5E36940]();
      v14[3] = 0;
    }
    _Block_object_dispose(&v13, 8);
  }
  return *(_QWORD *)(a1 + 24);
}

void sub_1B40DD848(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbol<Pointer64>::_resolve_name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v8;
  CSCppBitLock *v9;
  _QWORD v11[5];
  _QWORD v12[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (unsigned int *)(a1 + 28);
  v5 = atomic_load((unsigned int *)(a1 + 28));
  if ((v5 & 0x20000) == 0)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    v16 = 0;
    v8 = operator new();
    CSCppBitLock::CSCppBitLock(v8, v4, 0x2000);
    v16 = v8;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN10TRawSymbolI9Pointer64E13_resolve_nameEPPcPm_block_invoke;
    v12[3] = &unk_1E6775198;
    v12[6] = a2;
    v12[7] = a3;
    v12[4] = &v13;
    v12[5] = a1;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZN10TRawSymbolI9Pointer64E13_resolve_nameEPPcPm_block_invoke_2;
    v11[3] = &unk_1E67751C0;
    v11[4] = &v13;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v12, (uint64_t)v11);
    v9 = (CSCppBitLock *)v14[3];
    if (v9)
    {
      CSCppBitLock::~CSCppBitLock(v9);
      MEMORY[0x1B5E36940]();
      v14[3] = 0;
    }
    _Block_object_dispose(&v13, 8);
  }
  return *(_QWORD *)(a1 + 32);
}

void sub_1B40DDAE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  CSCppBitLock *v5;
  _QWORD v7[5];
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (unsigned int *)(a1 + 20);
  v3 = atomic_load((unsigned int *)(a1 + 20));
  if ((v3 & 0x400000) == 0)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2000000000;
    v12 = 0;
    v4 = operator new();
    CSCppBitLock::CSCppBitLock(v4, v2, 0x2000);
    v12 = v4;
    v7[4] = &v9;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZN10TRawSymbolI9Pointer32E21_resolve_mangled_nameINS1_21PersistentMangledNameEEEPKcT__block_invoke;
    v8[3] = &unk_1E67751E8;
    v8[4] = &v9;
    v8[5] = a1;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___ZN10TRawSymbolI9Pointer32E21_resolve_mangled_nameINS1_21PersistentMangledNameEEEPKcT__block_invoke_2;
    v7[3] = &unk_1E6775210;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v8, (uint64_t)v7);
    v5 = (CSCppBitLock *)v10[3];
    if (v5)
    {
      CSCppBitLock::~CSCppBitLock(v5);
      MEMORY[0x1B5E36940]();
      v10[3] = 0;
    }
    _Block_object_dispose(&v9, 8);
  }
  return *(_QWORD *)(a1 + 32);
}

void sub_1B40DDD68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbol<Pointer32>::is_objc_method_internal(int a1, char *__s)
{
  int v2;

  v2 = *__s;
  if ((v2 == 45 || v2 == 43) && __s[1] == 91 && __s[strlen(__s) - 1] == 93)
    return 16777220;
  else
    return 0x1000000;
}

uint64_t TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  CSCppBitLock *v5;
  _QWORD v7[5];
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (unsigned int *)(a1 + 28);
  v3 = atomic_load((unsigned int *)(a1 + 28));
  if ((v3 & 0x400000) == 0)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2000000000;
    v12 = 0;
    v4 = operator new();
    CSCppBitLock::CSCppBitLock(v4, v2, 0x2000);
    v12 = v4;
    v7[4] = &v9;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_21PersistentMangledNameEEEPKcT__block_invoke;
    v8[3] = &unk_1E6775238;
    v8[4] = &v9;
    v8[5] = a1;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_21PersistentMangledNameEEEPKcT__block_invoke_2;
    v7[3] = &unk_1E6775260;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v8, (uint64_t)v7);
    v5 = (CSCppBitLock *)v10[3];
    if (v5)
    {
      CSCppBitLock::~CSCppBitLock(v5);
      MEMORY[0x1B5E36940]();
      v10[3] = 0;
    }
    _Block_object_dispose(&v9, 8);
  }
  return *(_QWORD *)(a1 + 40);
}

void sub_1B40DE040(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(_QWORD *a1)
{
  unsigned __int16 *v1;
  unsigned int v2;

  v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  v2 = *v1;
  if (v2 < 5)
    return -1;
  if (v1[2])
    return *(_QWORD *)(*a1 + v1[2]);
  return -1;
}

uint64_t FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(FlatbufferSymbols::SymbolOwner *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *((_BYTE *)this + v1[2]) == 1) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t TThreadsafeAddressRelocator<Pointer64>::relocate(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;

  v3 = a1[1] - *a1;
  if (!v3)
    return 0;
  v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
  v5 = (_QWORD *)*a1;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[3 * (v4 >> 1)];
    v9 = *v7;
    v8 = v7 + 3;
    v4 += ~(v4 >> 1);
    if (v9 > a2)
      v4 = v6;
    else
      v5 = v8;
  }
  while (v4);
  if (v5 == (_QWORD *)*a1 || a2 - *(v5 - 3) >= *(v5 - 2))
    return 0;
  *a3 = *(v5 - 1) + a2;
  return 1;
}

uint64_t FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(FlatbufferSymbolOwnerData *this, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  v2 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)this + 16, a2, &v5);
  v3 = v5;
  if (!v2)
    return 0;
  return v3;
}

uint64_t FlatbufferSymbolOwnerData::convertVMAddressRangeToSlidAddressRange@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  result = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(a1 + 128), a2, &v8);
  if ((result & 1) != 0)
  {
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = a3;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v7;
  return result;
}

uint64_t FlatbufferSymbols::SymbolOwner::segments(FlatbufferSymbols::SymbolOwner *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 9u && (v2 = v1[4]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

unsigned int *FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::SymbolOwner,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const* (FlatbufferSymbols::SymbolOwner::*)(void)const,FlatbufferSymbols::Segment const*>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  unsigned int *result;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;

  if (!a2)
    return 0;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *))(*v8 + a3);
  result = (unsigned int *)a3(v8);
  if (result)
  {
    v10 = result;
    v11 = result + 1;
    v13 = result + 1;
    v12 = &result[*result + 1];
    FlatbufferSymbolOwnerData::findMatchingEntryForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>>(&v13, &v12, a5, a6, &v14);
    if (v14 == &v11[*v10])
      return 0;
    else
      return (unsigned int *)((char *)v14 + *v14);
  }
  return result;
}

uint64_t FlatbufferSymbols::Segment::symbols(FlatbufferSymbols::Segment *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 0xBu && (v2 = v1[5]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

unsigned int *FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Segment,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Symbol>> const* (FlatbufferSymbols::Segment::*)(void)const,FlatbufferSymbols::Symbol const*>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  unsigned int *result;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;

  if (!a2)
    return 0;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *))(*v8 + a3);
  result = (unsigned int *)a3(v8);
  if (result)
  {
    v10 = result;
    v11 = result + 1;
    v13 = result + 1;
    v12 = &result[*result + 1];
    FlatbufferSymbolOwnerData::findMatchingEntryForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>>(&v13, &v12, a5, a6, &v14);
    if (v14 == &v11[*v10])
      return 0;
    else
      return (unsigned int *)((char *)v14 + *v14);
  }
  return result;
}

void FlatbufferSymbolOwnerData::FlatbufferSymbolOwnerData(FlatbufferSymbolOwnerData *this, CSCppSymbolOwner *a2, const FlatbufferSymbols::SymbolOwner *a3, CFTypeRef cf)
{
  char *v5;
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  void *v25;
  void *v26;
  void **v27;
  __int128 v28;
  uint64_t v29;
  void *__p;
  _BYTE *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  char *v39;

  *((_QWORD *)this + 1) = 1;
  *((_QWORD *)this + 2) = 850045863;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_QWORD *)this = &off_1E6775330;
  *((_QWORD *)this + 11) = a3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 8) = 0u;
  v5 = (char *)this + 128;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 1065353216;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 1065353216;
  *((_QWORD *)this + 35) = 850045863;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 850045863;
  *((_QWORD *)this + 52) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  if (a3)
  {
    *((_QWORD *)this + 12) = cf;
    CFRetain(cf);
    v7 = (unsigned __int16 *)(*((_QWORD *)this + 11) - **((int **)this + 11));
    if (*v7 >= 9u)
    {
      if (v7[4])
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v35, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 5);
        v8 = 126 - 2 * __clz((v36 - (_BYTE *)v35) >> 5);
        if (v36 == v35)
          v9 = 0;
        else
          v9 = v8;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *,false>((unint64_t)v35, (__int128 *)v36, (uint64_t)&v38, v9, 1);
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v10 = (unsigned int *)*((_QWORD *)this + 11);
        v11 = (int)*v10;
        v12 = *(unsigned __int16 *)((char *)v10 - v11 + 8);
        if (*(_WORD *)((char *)v10 - v11 + 8))
        {
          v13 = *(unsigned int *)((char *)v10 + v12);
          v14 = (char *)v10 + v12 + v13;
        }
        else
        {
          v12 = 0;
          v14 = 0;
          v13 = *v10;
        }
        v15 = (uint64_t)&v10[*(unsigned int *)((char *)v10 + v12 + v13)] + v12 + v13;
        __p = &v32;
        if (v14 != (char *)v15)
        {
          v16 = v15 + 4;
          v17 = v14 + 8;
          do
          {
            v18 = *((unsigned int *)v17 - 1);
            v19 = v18 - *(int *)&v17[v18 - 4];
            v20 = *(unsigned __int16 *)&v17[v19 - 4];
            if (v20 >= 5)
            {
              if (*(_WORD *)&v17[v19])
              {
                v21 = &v17[v18 + *(unsigned __int16 *)&v17[v19]];
                if (!strstr(&v21[*((unsigned int *)v21 - 1)], "__LINKINFO"))
                {
                  if (v20 < 7)
                  {
                    v23 = 0;
                    v22 = -1;
                  }
                  else
                  {
                    if (*(_WORD *)&v17[v19 + 2])
                      v22 = *(_QWORD *)&v17[v18 - 4 + *(unsigned __int16 *)&v17[v19 + 2]];
                    else
                      v22 = -1;
                    if (v20 < 9)
                    {
                      v23 = 0;
                    }
                    else
                    {
                      v23 = *(unsigned __int16 *)&v17[v19 + 4];
                      if (*(_WORD *)&v17[v19 + 4])
                        v23 = *(_QWORD *)&v17[v18 - 4 + v23];
                    }
                  }
                  *(_QWORD *)&v38 = v22;
                  *((_QWORD *)&v38 + 1) = v23;
                  v39 = &v17[v18 - 4];
                  std::back_insert_iterator<std::vector<CSCppFlatbufferRelocation>>::operator=[abi:ne180100]((void ***)&__p, &v38);
                }
              }
            }
            v24 = v17 == (char *)v16;
            v17 += 4;
          }
          while (!v24);
        }
        create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>((uint64_t)&v35, (uint64_t)&v32, 1, (void **)&v38);
        v27 = (void **)((char *)this + 104);
        create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>((uint64_t)&v32, (uint64_t)&v35, 1, &__p);
        v28 = 0uLL;
        v29 = 0;
        std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(&v28, __p, (uint64_t)v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - (_BYTE *)__p) >> 3));
        v25 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *((_QWORD *)this + 17) = v25;
          operator delete(v25);
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
          *((_QWORD *)v5 + 2) = 0;
        }
        *((_OWORD *)this + 8) = v28;
        *((_QWORD *)this + 18) = v29;
        v28 = 0uLL;
        v29 = 0;
        std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(&v28, (const void *)v38, *((uint64_t *)&v38 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v38 + 1) - v38) >> 3));
        v26 = *v27;
        if (*v27)
        {
          *((_QWORD *)this + 14) = v26;
          operator delete(v26);
          *v27 = 0;
          *((_QWORD *)this + 14) = 0;
          *((_QWORD *)this + 15) = 0;
        }
        *(_OWORD *)((char *)this + 104) = v28;
        *((_QWORD *)this + 15) = v29;
        if (__p)
        {
          v31 = __p;
          operator delete(__p);
        }
        if ((_QWORD)v38)
        {
          *((_QWORD *)&v38 + 1) = v38;
          operator delete((void *)v38);
        }
        if (v32)
        {
          v33 = v32;
          operator delete(v32);
        }
        if (v35)
        {
          v36 = (char *)v35;
          operator delete(v35);
        }
      }
    }
  }
}

void sub_1B40DEA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  _QWORD *v22;
  std::mutex *v23;
  CSCppDeferredDemangler *v24;
  void **v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  if (__p)
    operator delete(__p);
  v28 = *(void **)(v26 - 104);
  if (v28)
  {
    *(_QWORD *)(v26 - 96) = v28;
    operator delete(v28);
  }
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  CSCppDeferredDemangler::~CSCppDeferredDemangler(v24);
  std::unique_ptr<CSCppTextSectionDescriptorMap<Pointer64>>::reset[abi:ne180100](v22 + 19, 0);
  v29 = *v25;
  if (*v25)
  {
    v22[17] = v29;
    operator delete(v29);
  }
  v30 = *a10;
  if (*a10)
  {
    v22[14] = v30;
    operator delete(v30);
  }
  *v22 = off_1E6775488;
  std::mutex::~mutex(v23);
  _Unwind_Resume(a1);
}

void create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  char *v20;
  char *v21;
  int *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  char *v41;
  char *v42;
  unint64_t *v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  void *__p;
  char *v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  char v54;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - *(_QWORD *)a1;
  if (v8 != *(_QWORD *)a1 && *(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v51 = 0;
    v52 = 0;
    v53 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&v51, v7, v8, v9 >> 5);
    v11 = *(const void **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *(_QWORD *)a2) >> 3);
    v49 = 0;
    v50 = 0;
    __p = 0;
    std::vector<CSCppFlatbufferRelocation>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppFlatbufferRelocation const*>,std::__wrap_iter<CSCppFlatbufferRelocation const*>>(&__p, v11, v12, v13);
    v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v14 != 32 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 24)
    {
      v15 = 126 - 2 * __clz((v52 - (_BYTE *)v51) >> 5);
      if (v52 == v51)
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)v51, (unint64_t *)v52, (uint64_t)&v54, v16, 1);
      v17 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v49 - (_BYTE *)__p) >> 3));
      if (v49 == __p)
        v18 = 0;
      else
        v18 = v17;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*,false>((__n128 *)__p, (unint64_t *)v49, (uint64_t)&v54, v18, 1);
      v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    }
    v19 = (unint64_t *)v51;
    v20 = (char *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    v21 = v52;
    if (v19 != (unint64_t *)v52 && v20 != v49)
    {
      do
      {
        v22 = (int *)*((_QWORD *)v20 + 2);
        while (1)
        {
          if (v22 && (v23 = (unsigned __int16 *)((char *)v22 - *v22), *v23 >= 5u) && (v24 = v23[2]) != 0)
            v25 = (char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24) + 4;
          else
            v25 = 0;
          v26 = (const char *)v19[3];
          if (!v26)
            v26 = (const char *)v19[2];
          if (!strncmp(v25, v26, 0x10uLL))
            break;
          if (!is_relocation_skippable(v26))
          {
            if (CSCppFlatbufferRelocation::is_skippable((CSCppFlatbufferRelocation *)v20))
              goto LABEL_41;
            break;
          }
          v19 += 4;
          if (v19 == (unint64_t *)v21)
            goto LABEL_43;
        }
        v27 = *(_QWORD *)v20;
        v29 = *v19;
        v28 = v19[1];
        v30 = *(_QWORD *)v20 - *v19;
        v32 = (unint64_t *)a4[1];
        v31 = (unint64_t)a4[2];
        if ((unint64_t)v32 >= v31)
        {
          v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (_BYTE *)*a4) >> 3);
          v35 = v34 + 1;
          if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)*a4) >> 3);
          if (2 * v36 > v35)
            v35 = 2 * v36;
          if (v36 >= 0x555555555555555)
            v37 = 0xAAAAAAAAAAAAAAALL;
          else
            v37 = v35;
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a4 + 2), v37);
          v40 = (unint64_t *)&v38[24 * v34];
          *v40 = v29;
          v40[1] = v28;
          v40[2] = v30;
          v42 = (char *)*a4;
          v41 = (char *)a4[1];
          v43 = v40;
          if (v41 != *a4)
          {
            do
            {
              v44 = *(_OWORD *)(v41 - 24);
              *(v43 - 1) = *((_QWORD *)v41 - 1);
              *(_OWORD *)(v43 - 3) = v44;
              v43 -= 3;
              v41 -= 24;
            }
            while (v41 != v42);
            v41 = (char *)*a4;
          }
          v33 = (char *)(v40 + 3);
          *a4 = v43;
          a4[1] = v40 + 3;
          a4[2] = &v38[24 * v39];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v32 = v29;
          v32[1] = v28;
          v33 = (char *)(v32 + 3);
          v32[2] = v30;
        }
        a4[1] = v33;
        a3 |= v27 != v29;
        v19 += 4;
LABEL_41:
        v21 = v52;
        if (v19 == (unint64_t *)v52)
          break;
        v20 += 24;
      }
      while (v20 != v49);
    }
LABEL_43:
    if ((a3 & 1) != 0)
    {
      v45 = (unint64_t *)a4[1];
      v46 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (_BYTE *)*a4) >> 3));
      if (v45 == *a4)
        v47 = 0;
      else
        v47 = v46;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>((uint64_t)*a4, v45, (uint64_t)&v54, v47, 1);
    }
    else
    {
      a4[1] = *a4;
    }
    if (__p)
    {
      v49 = (char *)__p;
      operator delete(__p);
    }
    if (v51)
    {
      v52 = (char *)v51;
      operator delete(v51);
    }
  }
}

void sub_1B40DEE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  const void *v7;
  uint64_t v8;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t *v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  void *__p;
  char *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  char v51;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 != *(_QWORD *)a1 && *(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    std::vector<CSCppFlatbufferRelocation>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppFlatbufferRelocation const*>,std::__wrap_iter<CSCppFlatbufferRelocation const*>>(&v48, v7, v8, v10);
    v11 = *(const void **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (v12 - *(_QWORD *)a2) >> 5;
    v46 = 0;
    v47 = 0;
    __p = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&__p, v11, v12, v13);
    v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v14 != 24 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    {
      v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v49 - (_BYTE *)v48) >> 3));
      if (v49 == v48)
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppFlatbufferRelocation*,false>((__n128 *)v48, (unint64_t *)v49, (uint64_t)&v51, v16, 1);
      v17 = 126 - 2 * __clz((v46 - (_BYTE *)__p) >> 5);
      if (v46 == __p)
        v18 = 0;
      else
        v18 = v17;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppSegmentRange*,false>((unint64_t *)__p, (unint64_t *)v46, (uint64_t)&v51, v18, 1);
      v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    }
    v19 = (unint64_t *)v48;
    v20 = (unint64_t *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, 0xAAAAAAAAAAAAAAABLL * (v14 >> 3));
    if (v19 != (unint64_t *)v49 && v20 != (unint64_t *)v46)
    {
      do
      {
        v21 = (const char *)v20[3];
        if (!v21)
          v21 = (const char *)v20[2];
        v22 = (const char *)(v19[2] + *(unsigned __int16 *)(v19[2] - *(int *)v19[2] + 4));
        if (!strncmp(v21, &v22[*(unsigned int *)v22 + 4], 0x10uLL))
          goto LABEL_24;
        if (CSCppFlatbufferRelocation::is_skippable((CSCppFlatbufferRelocation *)v19))
        {
          v19 += 3;
          if (v19 == (unint64_t *)v49)
            break;
          continue;
        }
        v23 = (const char *)v20[3];
        if (!v23)
          v23 = (const char *)v20[2];
        if (!is_relocation_skippable(v23))
        {
LABEL_24:
          v24 = *v20;
          v26 = *v19;
          v25 = v19[1];
          v27 = *v20 - *v19;
          v29 = (unint64_t *)a4[1];
          v28 = (unint64_t)a4[2];
          if ((unint64_t)v29 >= v28)
          {
            v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (_BYTE *)*a4) >> 3);
            v32 = v31 + 1;
            if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)*a4) >> 3);
            if (2 * v33 > v32)
              v32 = 2 * v33;
            if (v33 >= 0x555555555555555)
              v34 = 0xAAAAAAAAAAAAAAALL;
            else
              v34 = v32;
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a4 + 2), v34);
            v37 = (unint64_t *)&v35[24 * v31];
            *v37 = v26;
            v37[1] = v25;
            v37[2] = v27;
            v39 = (char *)*a4;
            v38 = (char *)a4[1];
            v40 = v37;
            if (v38 != *a4)
            {
              do
              {
                v41 = *(_OWORD *)(v38 - 24);
                *(v40 - 1) = *((_QWORD *)v38 - 1);
                *(_OWORD *)(v40 - 3) = v41;
                v40 -= 3;
                v38 -= 24;
              }
              while (v38 != v39);
              v38 = (char *)*a4;
            }
            v30 = (char *)(v37 + 3);
            *a4 = v40;
            a4[1] = v37 + 3;
            a4[2] = &v35[24 * v36];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *v29 = v26;
            v29[1] = v25;
            v30 = (char *)(v29 + 3);
            v29[2] = v27;
          }
          a4[1] = v30;
          a3 |= v24 != v26;
          v19 += 3;
        }
        if (v19 == (unint64_t *)v49)
          break;
        v20 += 4;
      }
      while (v20 != (unint64_t *)v46);
    }
    if ((a3 & 1) != 0)
    {
      v42 = (unint64_t *)a4[1];
      v43 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (_BYTE *)*a4) >> 3));
      if (v42 == *a4)
        v44 = 0;
      else
        v44 = v43;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>((uint64_t)*a4, v42, (uint64_t)&v51, v44, 1);
    }
    else
    {
      a4[1] = *a4;
    }
    if (__p)
    {
      v46 = (char *)__p;
      operator delete(__p);
    }
    if (v48)
    {
      v49 = (char *)v48;
      operator delete(v48);
    }
  }
}

void sub_1B40DF23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void FlatbufferSymbolOwnerData::~FlatbufferSymbolOwnerData(FlatbufferSymbolOwnerData *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E6775330;
  CFRelease(*((CFTypeRef *)this + 12));
  CSCppDeferredDemangler::~CSCppDeferredDemangler((FlatbufferSymbolOwnerData *)((char *)this + 160));
  std::unique_ptr<CSCppTextSectionDescriptorMap<Pointer64>>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E6775488;
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

{
  FlatbufferSymbolOwnerData::~FlatbufferSymbolOwnerData(this);
  JUMPOUT(0x1B5E36940);
}

uint64_t FlatbufferSymbolOwnerData::type_id(FlatbufferSymbolOwnerData *this)
{
  return 5;
}

uint64_t FlatbufferSymbolOwnerData::footprint(FlatbufferSymbolOwnerData *this)
{
  return 0;
}

FlatbufferSymbols::SymbolOwner *FlatbufferSymbolOwnerData::dsym_path(FlatbufferSymbolOwnerData *this)
{
  FlatbufferSymbols::SymbolOwner *result;
  unsigned __int16 *v2;
  uint64_t v3;

  result = (FlatbufferSymbols::SymbolOwner *)*((_QWORD *)this + 11);
  if (result)
  {
    result = (FlatbufferSymbols::SymbolOwner *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(result);
    if (result)
    {
      v2 = (unsigned __int16 *)((char *)result - *(int *)result);
      if (*v2 >= 0x19u && (v3 = v2[12]) != 0)
        return (FlatbufferSymbols::SymbolOwner *)((char *)result + v3 + *(unsigned int *)((char *)result + v3) + 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t FlatbufferSymbolOwnerData::dylib_current_version(FlatbufferSymbolOwnerData *this)
{
  return 0;
}

uint64_t FlatbufferSymbolOwnerData::dylib_compatibility_version(FlatbufferSymbolOwnerData *this)
{
  return 0;
}

FlatbufferSymbols::SymbolOwner *FlatbufferSymbolOwnerData::version(FlatbufferSymbolOwnerData *this)
{
  FlatbufferSymbols::SymbolOwner *result;
  unsigned __int16 *v2;
  uint64_t v3;

  result = (FlatbufferSymbols::SymbolOwner *)*((_QWORD *)this + 11);
  if (result)
  {
    result = (FlatbufferSymbols::SymbolOwner *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(result);
    if (result)
    {
      v2 = (unsigned __int16 *)((char *)result - *(int *)result);
      if (*v2 >= 0x17u && (v3 = v2[11]) != 0)
        return (FlatbufferSymbols::SymbolOwner *)((char *)result + v3 + *(unsigned int *)((char *)result + v3) + 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t FlatbufferSymbolOwnerData::is_string_pointer_valid(FlatbufferSymbolOwnerData *this, const char *a2)
{
  return 1;
}

uint64_t FlatbufferSymbolOwnerData::regions_in_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;

  if (a3 == -1)
    return 0;
  v5 = a1;
  v7 = *(unint64_t **)(a1 + 104);
  v8 = *(unint64_t **)(a1 + 112);
  v6 = (_QWORD *)(a1 + 104);
  if (v7 == v8)
    return 0;
  v11 = 0;
  v12 = a4 + a3;
  v35 = a2 | 4;
  do
  {
    v13 = *v7;
    if (*v7 < v12)
    {
      v14 = v7[1] + v13;
      if (a3 < v14)
      {
        v15 = v13 <= a3 ? a3 : *v7;
        v16 = v12 >= v14 ? v7[1] + v13 : v12;
        v17 = v16 - v15;
        if (v16 != v15)
        {
          v38 = 0;
          if (TThreadsafeAddressRelocator<Pointer64>::relocate(v6, v15, &v38))
          {
            v18 = v38;
            v19 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::SymbolOwner,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const* (FlatbufferSymbols::SymbolOwner::*)(void)const,FlatbufferSymbols::Segment const*>(v5, *(_QWORD *)(v5 + 88), (uint64_t (*)(_QWORD *))FlatbufferSymbols::SymbolOwner::segments, 0, (unint64_t)v38, v17);
            if (v19)
            {
              v20 = (unsigned __int16 *)((char *)v19 - (int)*v19);
              if (*v20 < 0x17u)
              {
                v21 = 0;
              }
              else
              {
                v21 = v20[11];
                if (v21)
                {
                  v33 = v11;
                  v34 = v5;
                  v22 = (unsigned int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
                  v23 = *v22;
                  v37 = v22 + 1;
                  v36 = &v22[v23 + 1];
                  FlatbufferSymbolOwnerData::findUpperAndLowerRangeForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Section>,FlatbufferSymbols::Section const*>>(&v37, &v36, v18, v17, &v38);
                  v24 = v38;
                  v25 = v39;
                  v32 = (char *)v39 - (char *)v38;
                  if (v39 != v38)
                  {
                    v26 = v38;
                    do
                    {
                      v27 = *v26;
                      v28 = v27 - *(int *)((char *)v26 + v27);
                      if (*(unsigned __int16 *)((char *)v26 + v28) < 5u)
                      {
                        v29 = 0;
                      }
                      else
                      {
                        v29 = *(unsigned __int16 *)((char *)v26 + v28 + 4);
                        if (v29)
                          v29 += (uint64_t)v26 + v27 + *(unsigned int *)((char *)v26 + v27 + v29);
                      }
                      v30 = strstr((char *)(v29 + 4), "__LINKINFO");
                      if (a5 && !v30)
                        (*(void (**)(uint64_t, uint64_t, char *))(a5 + 16))(a5, v35, (char *)v24 + v27);
                      ++v26;
                      ++v24;
                    }
                    while (v26 != v25);
                  }
                  v11 = v33;
                  v21 = v32 >> 2;
                  v5 = v34;
                }
              }
              v11 += v21;
            }
          }
        }
      }
    }
    v7 += 3;
  }
  while (v7 != v8);
  return v11;
}

uint64_t FlatbufferSymbolOwnerData::symbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  char *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;

  v3 = *(int **)(a1 + 88);
  if (!v3)
    return 0;
  v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 < 9u)
    return 0;
  v5 = v4[4];
  if (!v5)
    return 0;
  v6 = (unsigned int *)((char *)v3 + v5 + *(unsigned int *)((char *)v3 + v5));
  v8 = v6 + 1;
  v7 = *v6;
  if (!(_DWORD)v7)
    return 0;
  v10 = 0;
  v11 = &v8[v7];
  v12 = a2 | 5;
  v13 = v6 + 2;
  do
  {
    v14 = *v8;
    v15 = (char *)v8 + v14;
    v16 = (unsigned __int16 *)((char *)v8 + v14 - *(int *)((char *)v8 + v14));
    if (*v16 >= 0xBu
      && (v17 = v16[5]) != 0
      && (v18 = &v15[v17],
          v19 = *(unsigned int *)&v15[v17],
          v21 = &v18[v19 + 4],
          v20 = *(unsigned int *)&v18[v19],
          (_DWORD)v20))
    {
      v22 = 4 * v20;
      v23 = (char *)v13 + v14 + v17 + v19;
      do
      {
        if (a3)
          (*(void (**)(uint64_t, uint64_t, char *))(a3 + 16))(a3, v12, &v23[*(unsigned int *)v21]);
        v21 += 4;
        v23 += 4;
        v22 -= 4;
      }
      while (v22);
    }
    else
    {
      v20 = 0;
    }
    v10 += v20;
    ++v8;
    ++v13;
  }
  while (v8 != v11);
  return v10;
}

uint64_t FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, char a5)
{
  CSCppDeferredDemangler *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;

  v9 = (CSCppDeferredDemangler *)(a1 + 160);
  CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(a1 + 160, a1, a2);
  v10 = CSCppDeferredDemangler::mmapSymbolAddressesForDemangledName(v9, a3);
  v12 = v10;
  v13 = v11;
  if ((a5 & 1) != 0)
  {
    if (v10 != v11)
    {
      v14 = 0;
      v15 = v10;
      do
      {
        ++v14;
        v15 = (uint64_t **)*v15;
      }
      while (v15 != v11);
      if (v10 != v11)
      {
        v16 = a2 | 5;
        do
        {
          if (a4)
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a4, v16, v12[4]);
          v12 = (uint64_t **)*v12;
        }
        while (v12 != v13);
      }
      return v14;
    }
    return 0;
  }
  if (v10 == v11)
    return 0;
  if (a4)
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a4, a2 | 5, v10[4]);
  return 1;
}

uint64_t FlatbufferSymbolOwnerData::symbol_for_name(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t (*v16)(FlatbufferSymbols::Segment *);
  FlatbufferSymbols::Segment *v17;
  _DWORD *v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t (*v26)(FlatbufferSymbols::Segment *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char v31;
  uint64_t *v32;
  unsigned int *v33;
  unsigned int *v34;
  char *v35;
  unsigned int *v36;

  v8 = *(int **)(a1 + 88);
  if (!v8)
    return FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(a1, a2, a3, a4, 0);
  v25 = 0;
  v26 = FlatbufferSymbols::Segment::symbol_demangled_name_lookup;
  v27 = 0;
  v28 = a2;
  v29 = a4;
  v30 = a3;
  v31 = 0;
  v32 = &v25;
  v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 < 9u)
    return FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(a1, a2, a3, a4, 0);
  v10 = v9[4];
  if (!v10)
    return FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(a1, a2, a3, a4, 0);
  v11 = (unsigned int *)((char *)v8 + v10);
  v12 = *v11;
  v14 = (unsigned int *)((char *)v11 + v12 + 4);
  v13 = *(unsigned int *)((char *)v11 + v12);
  if (!(_DWORD)v13)
    return FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(a1, a2, a3, a4, 0);
  v15 = &v14[v13];
  do
  {
    v16 = v26;
    v17 = (FlatbufferSymbols::Segment *)((char *)v14 + *v14 + (v27 >> 1));
    if ((v27 & 1) != 0)
      v16 = *(uint64_t (**)(FlatbufferSymbols::Segment *))(*(_QWORD *)v17 + v26);
    v18 = (_DWORD *)v16(v17);
    if (v18 && (v31 || !*v32))
    {
      v20 = *v18;
      v19 = v18 + 1;
      v35 = (char *)&v19[v20];
      v36 = v19;
      std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,StringComparison &,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity>(&v36, &v35, &v30, &v33);
      v22 = v33;
      v21 = v34;
      v23 = (char *)v34 - (char *)v33;
      *v32 += (unint64_t)((char *)v34 - (char *)v33) >> 2;
      if (v31)
      {
        while (v22 != v21)
        {
          if (v29)
          {
            (*(void (**)(void))(v29 + 16))();
            v21 = v34;
          }
          ++v22;
        }
      }
      else if (v23 >> 2 == 1 && v29)
      {
        (*(void (**)(void))(v29 + 16))();
      }
    }
    ++v14;
  }
  while (v14 != v15);
  result = v25;
  if (!v25)
    return FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(a1, a2, a3, a4, 0);
  return result;
}

uint64_t FlatbufferSymbols::Segment::symbol_demangled_name_lookup(FlatbufferSymbols::Segment *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 0x1Bu && (v2 = v1[13]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

uint64_t FlatbufferSymbolOwnerData::symbols_for_name(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t (*v17)(FlatbufferSymbols::Segment *);
  FlatbufferSymbols::Segment *v18;
  _DWORD *v19;
  unsigned int *v20;
  int v21;
  unsigned int *v22;
  unsigned int *v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t (*v27)(FlatbufferSymbols::Segment *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  char v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int *v35;
  char *v36;
  unsigned int *v37;

  v8 = *(int **)(a1 + 88);
  if (!v8)
    goto LABEL_22;
  v9 = 0;
  v26 = 0;
  v27 = FlatbufferSymbols::Segment::symbol_demangled_name_lookup;
  v28 = 0;
  v29 = a2;
  v30 = a4;
  v31 = a3;
  v32 = 1;
  v33 = &v26;
  v10 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v10 < 9u)
    return FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(a1, a2, a3, a4, 1) + v9;
  v11 = v10[4];
  if (!v11
    || (v12 = (unsigned int *)((char *)v8 + v11),
        v13 = *v12,
        v15 = (unsigned int *)((char *)v12 + v13 + 4),
        v14 = *(unsigned int *)((char *)v12 + v13),
        !(_DWORD)v14))
  {
LABEL_22:
    v9 = 0;
    return FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(a1, a2, a3, a4, 1) + v9;
  }
  v16 = &v15[v14];
  do
  {
    v17 = v27;
    v18 = (FlatbufferSymbols::Segment *)((char *)v15 + *v15 + (v28 >> 1));
    if ((v28 & 1) != 0)
      v17 = *(uint64_t (**)(FlatbufferSymbols::Segment *))(*(_QWORD *)v18 + v27);
    v19 = (_DWORD *)v17(v18);
    if (v19 && (v32 || !*v33))
    {
      v21 = *v19;
      v20 = v19 + 1;
      v36 = (char *)&v20[v21];
      v37 = v20;
      std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,StringComparison &,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity>(&v37, &v36, &v31, &v34);
      v23 = v34;
      v22 = v35;
      v24 = (char *)v35 - (char *)v34;
      *v33 += (unint64_t)((char *)v35 - (char *)v34) >> 2;
      if (v32)
      {
        while (v23 != v22)
        {
          if (v30)
          {
            (*(void (**)(void))(v30 + 16))();
            v22 = v35;
          }
          ++v23;
        }
      }
      else if (v24 >> 2 == 1 && v30)
      {
        (*(void (**)(void))(v30 + 16))();
      }
    }
    ++v15;
  }
  while (v15 != v16);
  v9 = v26;
  return FlatbufferSymbolOwnerData::symbols_for_name_with_deferred_demangler(a1, a2, a3, a4, 1) + v9;
}

uint64_t FlatbufferSymbolOwnerData::symbols_for_mangled_name(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int *v4;
  uint64_t result;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t (*v13)(FlatbufferSymbols::Segment *);
  FlatbufferSymbols::Segment *v14;
  _DWORD *v15;
  unsigned int *v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(FlatbufferSymbols::Segment *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char v27;
  uint64_t *v28;
  unsigned int *v29;
  unsigned int *v30;
  char *v31;
  unsigned int *v32;

  v4 = *(int **)(a1 + 88);
  if (!v4)
    return 0;
  result = 0;
  v21 = 0;
  v22 = FlatbufferSymbols::Segment::symbol_asm_name_lookup;
  v23 = 0;
  v24 = a2;
  v25 = a4;
  v26 = a3;
  v27 = 1;
  v28 = &v21;
  v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 < 9u)
    return result;
  v7 = v6[4];
  if (!v7)
    return 0;
  v8 = (unsigned int *)((char *)v4 + v7);
  v9 = *v8;
  v11 = (unsigned int *)((char *)v8 + v9 + 4);
  v10 = *(unsigned int *)((char *)v8 + v9);
  if (!(_DWORD)v10)
    return 0;
  v12 = &v11[v10];
  do
  {
    v13 = v22;
    v14 = (FlatbufferSymbols::Segment *)((char *)v11 + *v11 + (v23 >> 1));
    if ((v23 & 1) != 0)
      v13 = *(uint64_t (**)(FlatbufferSymbols::Segment *))(*(_QWORD *)v14 + v22);
    v15 = (_DWORD *)v13(v14);
    if (v15 && (v27 || !*v28))
    {
      v17 = *v15;
      v16 = v15 + 1;
      v31 = (char *)&v16[v17];
      v32 = v16;
      std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,StringComparison &,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity>(&v32, &v31, &v26, &v29);
      v19 = v29;
      v18 = v30;
      v20 = (char *)v30 - (char *)v29;
      *v28 += (unint64_t)((char *)v30 - (char *)v29) >> 2;
      if (v27)
      {
        while (v19 != v18)
        {
          if (v25)
          {
            (*(void (**)(void))(v25 + 16))();
            v18 = v30;
          }
          ++v19;
        }
      }
      else if (v20 >> 2 == 1 && v25)
      {
        (*(void (**)(void))(v25 + 16))();
      }
    }
    ++v11;
  }
  while (v11 != v12);
  return v21;
}

uint64_t FlatbufferSymbols::Segment::symbol_asm_name_lookup(FlatbufferSymbols::Segment *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 0x19u && (v2 = v1[12]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

uint64_t FlatbufferSymbolOwnerData::symbol_for_mangled_name(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int *v4;
  uint64_t result;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t (*v13)(FlatbufferSymbols::Segment *);
  FlatbufferSymbols::Segment *v14;
  _DWORD *v15;
  unsigned int *v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(FlatbufferSymbols::Segment *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char v27;
  uint64_t *v28;
  unsigned int *v29;
  unsigned int *v30;
  char *v31;
  unsigned int *v32;

  v4 = *(int **)(a1 + 88);
  if (!v4)
    return 0;
  result = 0;
  v21 = 0;
  v22 = FlatbufferSymbols::Segment::symbol_asm_name_lookup;
  v23 = 0;
  v24 = a2;
  v25 = a4;
  v26 = a3;
  v27 = 0;
  v28 = &v21;
  v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 < 9u)
    return result;
  v7 = v6[4];
  if (!v7)
    return 0;
  v8 = (unsigned int *)((char *)v4 + v7);
  v9 = *v8;
  v11 = (unsigned int *)((char *)v8 + v9 + 4);
  v10 = *(unsigned int *)((char *)v8 + v9);
  if (!(_DWORD)v10)
    return 0;
  v12 = &v11[v10];
  do
  {
    v13 = v22;
    v14 = (FlatbufferSymbols::Segment *)((char *)v11 + *v11 + (v23 >> 1));
    if ((v23 & 1) != 0)
      v13 = *(uint64_t (**)(FlatbufferSymbols::Segment *))(*(_QWORD *)v14 + v22);
    v15 = (_DWORD *)v13(v14);
    if (v15 && (v27 || !*v28))
    {
      v17 = *v15;
      v16 = v15 + 1;
      v31 = (char *)&v16[v17];
      v32 = v16;
      std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,StringComparison &,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity>(&v32, &v31, &v26, &v29);
      v19 = v29;
      v18 = v30;
      v20 = (char *)v30 - (char *)v29;
      *v28 += (unint64_t)((char *)v30 - (char *)v29) >> 2;
      if (v27)
      {
        while (v19 != v18)
        {
          if (v25)
          {
            (*(void (**)(void))(v25 + 16))();
            v18 = v30;
          }
          ++v19;
        }
      }
      else if (v20 >> 2 == 1 && v25)
      {
        (*(void (**)(void))(v25 + 16))();
      }
    }
    ++v11;
  }
  while (v11 != v12);
  return v21;
}

uint64_t FlatbufferSymbolOwnerData::symbols_in_address_range(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;

  if (a3 == -1)
    return 0;
  v8 = (unint64_t *)a1[13];
  v7 = (unint64_t *)a1[14];
  v6 = a1 + 13;
  if (v8 == v7)
    return 0;
  v11 = 0;
  v12 = a4 + a3;
  v30 = a2 | 5;
  do
  {
    v13 = *v8;
    if (*v8 < v12)
    {
      v14 = v8[1] + v13;
      if (a3 < v14)
      {
        v15 = v13 <= a3 ? a3 : *v8;
        v16 = v12 >= v14 ? v8[1] + v13 : v12;
        v17 = v16 - v15;
        if (v16 != v15)
        {
          v33 = 0;
          if (TThreadsafeAddressRelocator<Pointer64>::relocate(v6, v15, &v33))
          {
            v18 = v33;
            v19 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::SymbolOwner,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const* (FlatbufferSymbols::SymbolOwner::*)(void)const,FlatbufferSymbols::Segment const*>((uint64_t)a1, a1[11], (uint64_t (*)(_QWORD *))FlatbufferSymbols::SymbolOwner::segments, 0, (unint64_t)v33, v17);
            if (v19)
            {
              v20 = (unsigned __int16 *)((char *)v19 - (int)*v19);
              if (*v20 < 0xBu)
              {
                v21 = 0;
              }
              else
              {
                v21 = v20[5];
                if (v21)
                {
                  v29 = v11;
                  v22 = (unsigned int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
                  v23 = *v22;
                  v32 = v22 + 1;
                  v31 = &v22[v23 + 1];
                  FlatbufferSymbolOwnerData::findUpperAndLowerRangeForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>>(&v32, &v31, v18, v17, &v33);
                  v24 = v33;
                  v25 = v34;
                  v28 = (char *)v34 - (char *)v33;
                  if (v34 != v33)
                  {
                    v26 = v33;
                    do
                    {
                      if (a5)
                        (*(void (**)(uint64_t, uint64_t, char *))(a5 + 16))(a5, v30, (char *)v24 + *v26);
                      ++v26;
                      ++v24;
                    }
                    while (v26 != v25);
                  }
                  v11 = v29;
                  v21 = v28 >> 2;
                }
              }
              v11 += v21;
            }
          }
        }
      }
    }
    v8 += 3;
  }
  while (v8 != v7);
  return v11;
}

uint64_t FlatbufferSymbolOwnerData::symbol_for_address(FlatbufferSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3802000000;
  v9 = __Block_byref_object_copy__2;
  v10 = __Block_byref_object_dispose__2;
  v11 = 0;
  v12 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN25FlatbufferSymbolOwnerData18symbol_for_addressEP16CSCppSymbolOwnery_block_invoke;
  v5[3] = &unk_1E6775428;
  v5[4] = &v6;
  v5[5] = this;
  FlatbufferSymbolOwnerData::symbols_in_address_range((uint64_t *)this, (uint64_t)a2, a3, 1, (uint64_t)v5);
  v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B40E0340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

BOOL ___ZN25FlatbufferSymbolOwnerData18symbol_for_addressEP16CSCppSymbolOwnery_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  int *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;

  result = CSIsNull(a2, a3);
  v7 = (int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
  if (result)
    v7 = 0;
  v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 < 0x13u || (v9 = v8[9]) == 0 || (*((_BYTE *)v7 + v9) & 0x10) == 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_QWORD *)(v10 + 40) = a2;
    *(_QWORD *)(v10 + 48) = a3;
  }
  return result;
}

uint64_t FlatbufferSymbolOwnerData::source_infos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;

  v3 = *(int **)(a1 + 88);
  if (!v3)
    return 0;
  v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 < 9u)
    return 0;
  v5 = v4[4];
  if (!v5)
    return 0;
  v6 = (unsigned int *)((char *)v3 + v5 + *(unsigned int *)((char *)v3 + v5));
  v8 = v6 + 1;
  v7 = *v6;
  if (!(_DWORD)v7)
    return 0;
  v10 = 0;
  v11 = a2 | 6;
  v12 = v6 + 3;
  v34 = &v8[v7];
  do
  {
    v13 = *v8;
    v14 = (char *)v8 + v13;
    v15 = (unsigned __int16 *)((char *)v8 + v13 - *(int *)((char *)v8 + v13));
    v35 = v12;
    v36 = v8;
    if (*v15 >= 0xBu)
    {
      v16 = v15[5];
      if (v16)
      {
        v17 = &v14[v16];
        v18 = *(unsigned int *)&v14[v16];
        v20 = (unsigned int *)&v17[v18 + 4];
        v19 = *(unsigned int *)&v17[v18];
        if ((_DWORD)v19)
        {
          v21 = &v20[v19];
          v22 = (char *)v12 + v13 + v16 + v18;
          do
          {
            v23 = *v20;
            v24 = (char *)v20 + v23;
            v25 = (unsigned __int16 *)((char *)v20 + v23 - *(int *)((char *)v20 + v23));
            if (*v25 >= 0xDu
              && (v26 = v25[6]) != 0
              && (v27 = &v24[v26],
                  v28 = *(unsigned int *)&v24[v26],
                  v29 = &v27[v28 + 4],
                  v30 = *(unsigned int *)&v27[v28],
                  (_DWORD)v30))
            {
              v31 = 4 * v30;
              v32 = &v22[v23 + v26 + v28];
              do
              {
                if (a3)
                  (*(void (**)(uint64_t, uint64_t, char *))(a3 + 16))(a3, v11, &v32[*(unsigned int *)v29]);
                v29 += 4;
                v32 += 4;
                v31 -= 4;
              }
              while (v31);
            }
            else
            {
              v30 = 0;
            }
            v10 += v30;
            ++v20;
            v22 += 4;
          }
          while (v20 != v21);
        }
      }
    }
    v8 = v36 + 1;
    v12 = v35 + 1;
  }
  while (v36 + 1 != v34);
  return v10;
}

uint64_t FlatbufferSymbolOwnerData::source_infos_in_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  int *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unint64_t v33;
  _QWORD *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;

  if (a3 == -1)
    return 0;
  v5 = a1;
  v8 = *(unint64_t **)(a1 + 104);
  v7 = *(unint64_t **)(a1 + 112);
  v6 = (_QWORD *)(a1 + 104);
  if (v8 == v7)
    return 0;
  v11 = 0;
  v12 = a4 + a3;
  v41 = a2 | 6;
  do
  {
    v13 = *v8;
    if (*v8 < v12)
    {
      v14 = v8[1] + v13;
      if (a3 < v14)
      {
        v15 = v13 <= a3 ? a3 : *v8;
        v16 = v12 >= v14 ? v8[1] + v13 : v12;
        v17 = v16 - v15;
        if (v16 != v15)
        {
          v48 = 0;
          if (TThreadsafeAddressRelocator<Pointer64>::relocate(v6, v15, &v48))
          {
            v39 = v48;
            v18 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::SymbolOwner,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const* (FlatbufferSymbols::SymbolOwner::*)(void)const,FlatbufferSymbols::Segment const*>(v5, *(_QWORD *)(v5 + 88), (uint64_t (*)(_QWORD *))FlatbufferSymbols::SymbolOwner::segments, 0, (unint64_t)v48, v17);
            if (v18)
            {
              v19 = (unsigned __int16 *)((char *)v18 - (int)*v18);
              if (*v19 >= 0xBu)
              {
                v20 = v19[5];
                if (v20)
                {
                  v35 = v6;
                  v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
                  v22 = *v21;
                  v43 = v21 + 1;
                  v42 = &v21[v22 + 1];
                  v38 = v17;
                  FlatbufferSymbolOwnerData::findUpperAndLowerRangeForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>>(&v43, &v42, v39, v17, &v44);
                  v24 = v44;
                  v23 = v45;
                  if (v44 != v45)
                  {
                    v36 = v45;
                    v37 = v5;
                    do
                    {
                      v25 = (int *)((char *)v24 + *v24);
                      v26 = (unsigned __int16 *)((char *)v25 - *v25);
                      if (*v26 >= 0xDu && (v27 = v26[6]) != 0)
                      {
                        v28 = (unsigned int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
                        v29 = *v28;
                        v47 = v28 + 1;
                        v46 = &v28[v29 + 1];
                        FlatbufferSymbolOwnerData::findUpperAndLowerRangeForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>>(&v47, &v46, v39, v38, &v48);
                        v30 = v48;
                        v31 = v49;
                        v40 = (char *)v49 - (char *)v48;
                        if (v49 != v48)
                        {
                          v32 = v48;
                          do
                          {
                            if (a5)
                              (*(void (**)(uint64_t, uint64_t, char *))(a5 + 16))(a5, v41, (char *)v30 + *v32);
                            ++v32;
                            ++v30;
                          }
                          while (v32 != v31);
                        }
                        v33 = v40 >> 2;
                        v23 = v36;
                        v5 = v37;
                      }
                      else
                      {
                        v33 = 0;
                      }
                      v11 += v33;
                      ++v24;
                    }
                    while (v24 != v23);
                  }
                  v6 = v35;
                }
              }
            }
          }
        }
      }
    }
    v8 += 3;
  }
  while (v8 != v7);
  return v11;
}

unsigned int *FlatbufferSymbolOwnerData::source_info_for_address(FlatbufferSymbolOwnerData *this, unint64_t a2, unint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *result;

  v6 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::SymbolOwner,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const* (FlatbufferSymbols::SymbolOwner::*)(void)const,FlatbufferSymbols::Segment const*>((uint64_t)this, *((_QWORD *)this + 11), (uint64_t (*)(_QWORD *))FlatbufferSymbols::SymbolOwner::segments, 0, a3, 1);
  v7 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Segment,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Symbol>> const* (FlatbufferSymbols::Segment::*)(void)const,FlatbufferSymbols::Symbol const*>((uint64_t)this, (uint64_t)v6, (uint64_t (*)(_QWORD *))FlatbufferSymbols::Segment::symbols, 0, a3, 1);
  if (FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Segment,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Symbol>> const* (FlatbufferSymbols::Segment::*)(void)const,FlatbufferSymbols::Symbol const*>((uint64_t)this, (uint64_t)v7, (uint64_t (*)(_QWORD *))FlatbufferSymbols::Symbol::inline_symbols, 0, a3, 1))
  {
    return (unsigned int *)(a2 | 6);
  }
  result = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Symbol,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>> const* (FlatbufferSymbols::Symbol::*)(void)const,FlatbufferSymbols::SourceInfo const*>((uint64_t)this, (uint64_t)v7, (uint64_t (*)(_QWORD *))FlatbufferSymbols::Symbol::source_infos, 0, a3, 1);
  if (result)
    return (unsigned int *)(a2 | 6);
  return result;
}

uint64_t FlatbufferSymbolOwnerData::for_each_stack_frame_at_address(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t j;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int *i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39[2];

  v39[0] = 0;
  j = 0;
  if (!TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(a1 + 104), a3, v39))
    return j;
  v8 = v39[0];
  v9 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::SymbolOwner,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const* (FlatbufferSymbols::SymbolOwner::*)(void)const,FlatbufferSymbols::Segment const*>(a1, *(_QWORD *)(a1 + 88), (uint64_t (*)(_QWORD *))FlatbufferSymbols::SymbolOwner::segments, 0, (unint64_t)v39[0], 1);
  v10 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Segment,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Symbol>> const* (FlatbufferSymbols::Segment::*)(void)const,FlatbufferSymbols::Symbol const*>(a1, (uint64_t)v9, (uint64_t (*)(_QWORD *))FlatbufferSymbols::Segment::symbols, 0, (unint64_t)v8, 1);
  j = (uint64_t)v10;
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
    goto LABEL_7;
  v12 = (unsigned __int16 *)((char *)v10 - (int)*v10);
  if (*v12 >= 0x13u)
  {
    v13 = v12[9];
    if (v13)
    {
      if ((*((_BYTE *)v10 + v13) & 0x10) != 0)
      {
        v29 = (unsigned __int16 *)((char *)v9 - (int)*v9);
        if (*v29 >= 0xBu)
        {
          v30 = v29[5];
          if (v30)
          {
            v31 = (unsigned int *)((char *)v9 + v30 + *(unsigned int *)((char *)v9 + v30));
            v32 = *v31;
            v38 = v31 + 1;
            v37 = &v31[v32 + 1];
            FlatbufferSymbolOwnerData::findUpperAndLowerRangeForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>>(&v38, &v37, v8, 1, v39);
            for (i = v39[0]; i != v39[1]; ++i)
            {
              v34 = *i;
              v35 = *(int *)((char *)i + v34);
              if (*(unsigned __int16 *)((char *)i + v34 - v35) >= 0x13u)
              {
                v36 = *(unsigned __int16 *)((char *)i + v34 - v35 + 18);
                if (v36)
                {
                  if ((*((_BYTE *)i + v36 + v34) & 0x10) != 0)
                    continue;
                }
              }
              j = (uint64_t)i + v34;
            }
          }
        }
LABEL_7:
        if (!j)
          return j;
      }
    }
  }
  v14 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Symbol,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>> const* (FlatbufferSymbols::Symbol::*)(void)const,FlatbufferSymbols::SourceInfo const*>(a1, j, (uint64_t (*)(_QWORD *))FlatbufferSymbols::Symbol::source_infos, 0, (unint64_t)v8, 1);
  v15 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Segment,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Symbol>> const* (FlatbufferSymbols::Segment::*)(void)const,FlatbufferSymbols::Symbol const*>(a1, j, (uint64_t (*)(_QWORD *))FlatbufferSymbols::Symbol::inline_symbols, 0, (unint64_t)v8, 1);
  if (v15)
  {
    v16 = (uint64_t)v15;
    v17 = (unsigned __int16 *)((char *)v15 - (int)*v15);
    if (*v17 >= 0xDu && (v18 = v17[6]) != 0)
      v19 = (char *)v15 + v18 + *(unsigned int *)((char *)v15 + v18);
    else
      v19 = 0;
    v20 = a2 | 6;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a4 + 16))(a4, a2 | 5, j, a2 | 6, v19);
    v21 = a2 | 2;
    v22 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Segment,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Symbol>> const* (FlatbufferSymbols::Segment::*)(void)const,FlatbufferSymbols::Symbol const*>(a1, v16, (uint64_t (*)(_QWORD *))FlatbufferSymbols::InlineSymbol::inline_symbols, 0, (unint64_t)v8, 1);
    for (j = 2;
          v22;
          v22 = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Segment,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Symbol>> const* (FlatbufferSymbols::Segment::*)(void)const,FlatbufferSymbols::Symbol const*>(a1, v16, (uint64_t (*)(_QWORD *))FlatbufferSymbols::InlineSymbol::inline_symbols, 0, (unint64_t)v8, 1))
    {
      v23 = v16;
      v16 = (uint64_t)v22;
      v24 = (unsigned __int16 *)((char *)v22 - (int)*v22);
      if (*v24 >= 0xDu && (v25 = v24[6]) != 0)
        v26 = (char *)v22 + v25 + *(unsigned int *)((char *)v22 + v25);
      else
        v26 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a4 + 16))(a4, v21, v23 | 1, v20, v26);
      ++j;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(a4 + 16))(a4, v21, v16 | 1, v20, v14);
  }
  else
  {
    v27 = a2 | 5;
    if (v14)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(a4 + 16))(a4, v27, j, a2 | 6, v14);
    else
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a4 + 16))(a4, v27, j, 0, 0);
    return 1;
  }
  return j;
}

int *FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(a1, a2, a3, a4, -1, a5);
}

int *FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t a6)
{
  int *v12;
  int *v14;

  if (CSIsNull(a3, a4) || (a3 & 7 | (8 * (a4 & 3))) != 0xA)
  {
    if (CSIsNull(a3, a4))
      v14 = 0;
    else
      v14 = (int *)(a4 & 0xFFFFFFFFFFFFFFFCLL);
    return FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(a1, a2, v14, a5, a6);
  }
  else
  {
    if (CSIsNull(a3, a4))
      v12 = 0;
    else
      v12 = (int *)(a4 & 0xFFFFFFFFFFFFFFFCLL);
    return FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(a1, a2, v12, a5, a6);
  }
}

int *FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5)
{
  unint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40[3];
  int v41;
  uint64_t v42;
  int **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  unint64_t v49;
  void *__p;
  void *v51;
  _QWORD *v52;
  int *v53;

  v5 = (unint64_t)a3;
  v53 = 0;
  if (!a3)
    return (int *)v5;
  v52 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v52, 1uLL);
  *v10 = a2 | 2;
  v10[1] = v5 | 1;
  __p = v10;
  v52 = &v10[2 * v11];
  v51 = v10 + 2;
  v12 = (unsigned __int16 *)(v5 - *(int *)v5);
  if (*v12 < 0xDu || (v13 = v12[6]) == 0)
  {
    v16 = v48;
    if ((unint64_t)v48 < v49)
    {
      *(_QWORD *)v48 = a2;
      *((_QWORD *)v16 + 1) = v5;
      goto LABEL_8;
    }
    v18 = (char *)v47;
    v19 = (v48 - (_BYTE *)v47) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v21 = v49 - (_QWORD)v47;
    if ((uint64_t)(v49 - (_QWORD)v47) >> 3 > v20)
      v20 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v22 = 0xFFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v49, v22);
      v18 = (char *)v47;
      v16 = v48;
    }
    else
    {
      v23 = 0;
    }
    v29 = (uint64_t *)&v23[16 * v19];
    v30 = &v23[16 * v22];
    *v29 = a2;
    v29[1] = v5;
    v17 = (char *)(v29 + 2);
    if (v16 == v18)
    {
LABEL_33:
      v47 = v29;
      v48 = v17;
      v49 = (unint64_t)v30;
      if (v18)
        operator delete(v18);
      goto LABEL_35;
    }
    do
    {
      *((_OWORD *)v29 - 1) = *((_OWORD *)v16 - 1);
      v29 -= 2;
      v16 -= 16;
    }
    while (v16 != v18);
LABEL_32:
    v18 = (char *)v47;
    goto LABEL_33;
  }
  v14 = (char *)(v5 + v13 + *(unsigned int *)(v5 + v13));
  v15 = a2 | 6;
  v16 = v48;
  if ((unint64_t)v48 >= v49)
  {
    v18 = (char *)v47;
    v24 = (v48 - (_BYTE *)v47) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v26 = v49 - (_QWORD)v47;
    if ((uint64_t)(v49 - (_QWORD)v47) >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v49, v27);
      v18 = (char *)v47;
      v16 = v48;
    }
    else
    {
      v28 = 0;
    }
    v29 = (uint64_t *)&v28[16 * v24];
    v30 = &v28[16 * v27];
    *v29 = v15;
    v29[1] = (uint64_t)v14;
    v17 = (char *)(v29 + 2);
    if (v16 == v18)
      goto LABEL_33;
    do
    {
      *((_OWORD *)v29 - 1) = *((_OWORD *)v16 - 1);
      v29 -= 2;
      v16 -= 16;
    }
    while (v16 != v18);
    goto LABEL_32;
  }
  *(_QWORD *)v48 = v15;
  *((_QWORD *)v16 + 1) = v14;
LABEL_8:
  v17 = v16 + 16;
LABEL_35:
  v48 = v17;
  if (a4)
  {
    v31 = (unsigned __int16 *)(v5 - *(int *)v5);
    if (*v31 >= 5u && (v32 = v31[2]) != 0)
      v33 = *(_QWORD *)(v5 + v32);
    else
      v33 = -1;
    v45 = a1;
    v46 = v33;
    v40[0] = (uint64_t)&__p;
    v40[1] = (uint64_t)&v47;
    v40[2] = (uint64_t)&v46;
    v41 = a4;
    v42 = a5;
    v43 = &v53;
    v44 = a2;
    FlatbufferSymbolOwnerData::forEachInlinedSymbolInSymbol<FlatbufferSymbols::InlineSymbol,unsigned long FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(CSCppSymbolOwner *,FlatbufferSymbols::InlineSymbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))::{lambda(FlatbufferSymbols::InlineSymbol const*)#1}>(a1, (int *)v5, v40);
    v5 = (unint64_t)v53;
  }
  else
  {
    v34 = (unsigned __int16 *)(v5 - *(int *)v5);
    v35 = *v34;
    if (v35 < 5)
    {
      v37 = 0;
      v36 = -1;
    }
    else
    {
      if (v34[2])
        v36 = *(_QWORD *)(v5 + v34[2]);
      else
        v36 = -1;
      if (v35 >= 7 && (v38 = v34[3]) != 0)
        v37 = *(_QWORD *)(v5 + v38);
      else
        v37 = 0;
    }
    v5 = (unint64_t)v53 + 1;
    v53 = (int *)((char *)v53 + 1);
    if (a5)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, v36, v37);
  }
  if (v47)
  {
    v48 = (char *)v47;
    operator delete(v47);
  }
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  return (int *)v5;
}

void sub_1B40E1024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

int *FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5)
{
  int *v5;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31[3];
  int v32;
  uint64_t v33;
  int **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p;
  char *v39;
  unint64_t v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  int *v44;

  v5 = a3;
  v44 = 0;
  if (a3)
  {
    v43 = 0;
    __p = 0;
    v39 = 0;
    v40 = 0;
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v43, 1uLL);
    *v10 = a2 | 5;
    v10[1] = v5;
    v41 = v10;
    v43 = &v10[2 * v11];
    v42 = v10 + 2;
    v12 = v39;
    if ((unint64_t)v39 >= v40)
    {
      v14 = (char *)__p;
      v15 = (v39 - (_BYTE *)__p) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v17 = v40 - (_QWORD)__p;
      if ((uint64_t)(v40 - (_QWORD)__p) >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v40, v18);
        v14 = (char *)__p;
        v12 = v39;
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      v21 = &v19[16 * v18];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v5;
      v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
          v20 -= 16;
          v12 -= 16;
        }
        while (v12 != v14);
        v14 = (char *)__p;
      }
      __p = v20;
      v39 = v13;
      v40 = (unint64_t)v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v39 = a2;
      *((_QWORD *)v12 + 1) = v5;
      v13 = v12 + 16;
    }
    v39 = v13;
    if (a4)
    {
      v22 = (unsigned __int16 *)((char *)v5 - *v5);
      if (*v22 >= 5u && (v23 = v22[2]) != 0)
        v24 = *(_QWORD *)((char *)v5 + v23);
      else
        v24 = -1;
      v36 = a1;
      v37 = v24;
      v31[0] = (uint64_t)&v41;
      v31[1] = (uint64_t)&__p;
      v31[2] = (uint64_t)&v37;
      v32 = a4;
      v33 = a5;
      v34 = &v44;
      v35 = a2;
      FlatbufferSymbolOwnerData::forEachInlinedSymbolInSymbol<FlatbufferSymbols::Symbol,unsigned long FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(CSCppSymbolOwner *,FlatbufferSymbols::Symbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))::{lambda(FlatbufferSymbols::InlineSymbol const*)#1}>(a1, v5, v31);
      v5 = v44;
    }
    else
    {
      v25 = (unsigned __int16 *)((char *)v5 - *v5);
      v26 = *v25;
      if (v26 < 5)
      {
        v28 = 0;
        v27 = -1;
      }
      else
      {
        if (v25[2])
          v27 = *(_QWORD *)((char *)v5 + v25[2]);
        else
          v27 = -1;
        if (v26 >= 7 && (v29 = v25[3]) != 0)
          v28 = *(_QWORD *)((char *)v5 + v29);
        else
          v28 = 0;
      }
      v5 = (int *)((char *)v44 + 1);
      v44 = (int *)((char *)v44 + 1);
      if (a5)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, v27, v28);
    }
    if (__p)
    {
      v39 = (char *)__p;
      operator delete(__p);
    }
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
  }
  return v5;
}

void sub_1B40E12F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  v21 = *(void **)(v19 - 80);
  if (v21)
  {
    *(_QWORD *)(v19 - 72) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  int *v8;
  int *v10;

  if (CSIsNull(a2, a3) || (a2 & 7 | (8 * (a3 & 3))) != 0xA)
  {
    if (CSIsNull(a2, a3))
      v10 = 0;
    else
      v10 = (int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    return FlatbufferSymbolOwnerData::forEachInlinedSymbolInSymbol<FlatbufferSymbols::Symbol,void({block_pointer})(FlatbufferSymbols::InlineSymbol const*)>(a1, v10, a4);
  }
  else
  {
    if (CSIsNull(a2, a3))
      v8 = 0;
    else
      v8 = (int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    return FlatbufferSymbolOwnerData::forEachInlinedSymbolInSymbol<FlatbufferSymbols::InlineSymbol,void({block_pointer})(FlatbufferSymbols::InlineSymbol const*)>(a1, v8, a4);
  }
}

uint64_t FlatbufferSymbolOwnerData::forEachInlinedSymbolInSymbol<FlatbufferSymbols::InlineSymbol,void({block_pointer})(FlatbufferSymbols::InlineSymbol const*)>(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (!a2)
    return 0;
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 < 0xFu)
    return 0;
  v4 = v3[7];
  if (!v4)
    return 0;
  v5 = (unsigned int *)((char *)a2 + v4 + *(unsigned int *)((char *)a2 + v4));
  v8 = *v5;
  v6 = v5 + 1;
  v7 = v8;
  if (!v8)
    return 0;
  v10 = 4 * v7;
  v11 = v6;
  do
  {
    v12 = *v11++;
    (*(void (**)(uint64_t, char *))(a3 + 16))(a3, (char *)v6 + v12);
    v6 = v11;
    v10 -= 4;
  }
  while (v10);
  return v7;
}

uint64_t FlatbufferSymbolOwnerData::forEachInlinedSymbolInSymbol<FlatbufferSymbols::Symbol,void({block_pointer})(FlatbufferSymbols::InlineSymbol const*)>(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (!a2)
    return 0;
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 < 0x11u)
    return 0;
  v4 = v3[8];
  if (!v4)
    return 0;
  v5 = (unsigned int *)((char *)a2 + v4 + *(unsigned int *)((char *)a2 + v4));
  v8 = *v5;
  v6 = v5 + 1;
  v7 = v8;
  if (!v8)
    return 0;
  v10 = 4 * v7;
  v11 = v6;
  do
  {
    v12 = *v11++;
    (*(void (**)(uint64_t, char *))(a3 + 16))(a3, (char *)v6 + v12);
    v6 = v11;
    v10 -= 4;
  }
  while (v10);
  return v7;
}

unsigned int *FlatbufferSymbolOwnerData::rawBytesForRangeWithoutFaulting(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int *result;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v20 = 0;
  v6 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(a1 + 104), a3, &v20);
  result = 0;
  if (v6)
  {
    v8 = v20;
    result = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::SymbolOwner,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const* (FlatbufferSymbols::SymbolOwner::*)(void)const,FlatbufferSymbols::Segment const*>(a1, *(_QWORD *)(a1 + 88), (uint64_t (*)(_QWORD *))FlatbufferSymbols::SymbolOwner::segments, 0, v20, a4);
    if (result)
    {
      v9 = (unsigned __int16 *)((char *)result - (int)*result);
      if (*v9 >= 0xDu
        && (v10 = v9[6]) != 0
        && ((v11 = v9[3]) == 0 ? (v12 = -1) : (v12 = *(_QWORD *)((char *)result + v11)),
            v8 >= v12
         && (v13 = (unsigned int *)((char *)result + v10 + *(unsigned int *)((char *)result + v10)),
             v8 + a4 <= v12 + *v13)))
      {
        v17 = (char *)v13 + v8 - v12;
      }
      else
      {
        result = FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Segment,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::Symbol>> const* (FlatbufferSymbols::Segment::*)(void)const,FlatbufferSymbols::Symbol const*>(a1, (uint64_t)result, (uint64_t (*)(_QWORD *))FlatbufferSymbols::Segment::symbols, 0, v8, a4);
        if (!result)
          return result;
        v14 = (unsigned __int16 *)((char *)result - (int)*result);
        if (*v14 < 0xFu)
          return 0;
        v15 = v14[7];
        if (!v14[7])
          return 0;
        v16 = v14[2] ? *(_QWORD *)((char *)result + v14[2]) : -1;
        v18 = v14[3];
        v19 = v18 ? *(_QWORD *)((char *)result + v18) : 0;
        if (v8 < v16 || v8 + a4 > v19 + v16)
          return 0;
        v17 = (char *)result + v15 + v8 - v16 + *(unsigned int *)((char *)result + v15);
      }
      return (unsigned int *)(v17 + 4);
    }
  }
  return result;
}

uint64_t FlatbufferSymbolOwnerData::rawBytesForRangeWithOnDemandFaulting(uint64_t a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  _QWORD v14[3];

  v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v10 = *(_QWORD *)(a1 + 152);
  v9 = (uint64_t *)(a1 + 152);
  if (!v10)
  {
    v11 = operator new();
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_QWORD *)v11 = v11 + 8;
    *(_QWORD *)(v11 + 24) = 850045863;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_QWORD *)(v11 + 80) = 0;
    std::unique_ptr<CSCppTextSectionDescriptorMap<Pointer64>>::reset[abi:ne180100](v9, v11);
  }
  std::mutex::unlock(v8);
  result = CSCppTextSectionDescriptorMap<Pointer64>::find_section_descriptor_for_range(*v9, a3, a4);
  if (result
    || (result = (uint64_t)CSCppTextSectionDescriptorMap<Pointer64>::create_section_descriptor_for_range(*v9, a2, a3, a4)) != 0)
  {
    CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer64>(result, a3, a4, (uint64_t)a2, (uint64_t)v14);
    if (a4 + a3 <= v14[0] + v14[1])
      v13 = v14[2] + a3 - v14[0];
    else
      v13 = 0;
    if (a3 >= v14[0])
      return v13;
    else
      return 0;
  }
  return result;
}

void sub_1B40E1770(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDescriptorMap<Pointer64>::find_section_descriptor_for_range(uint64_t a1, unint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;

  v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    do
    {
      v9 = v8[4];
      v10 = a2 >= v9;
      if (a2 >= v9)
        v11 = v8 + 1;
      else
        v11 = v8;
      if (!v10)
        v7 = v8;
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
  }
  if (v7 == *(_QWORD **)a1)
    goto LABEL_15;
  v12 = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v13 = v12;
      v12 = (_QWORD *)v12[1];
    }
    while (v12);
  }
  else
  {
    do
    {
      v13 = (_QWORD *)v7[2];
      v14 = *v13 == (_QWORD)v7;
      v7 = v13;
    }
    while (v14);
  }
  v15 = v13[4];
  if (a2 < v15 || a3 + a2 > v13[5] + v15)
LABEL_15:
    v16 = 0;
  else
    v16 = v13[6];
  std::mutex::unlock(v6);
  return v16;
}

__n128 CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer64>@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result;
  _QWORD v10[3];

  CSCppTextSectionDataDescriptor::get_text_section<Pointer64>(a1, a2, a3, a4, v10);
  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_DWORD *)(a1 + 136) == 1)
    {
      CSCppTextSectionDataDescriptor::_perform_partial_mapping_for_file<Pointer64>((unint64_t *)a1, a2, a3, a5);
    }
    else
    {
      result = *(__n128 *)a1;
      *(_OWORD *)a5 = *(_OWORD *)a1;
      *(_QWORD *)(a5 + 16) = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  return result;
}

CSCppTextSectionDataDescriptor *CSCppTextSectionDescriptorMap<Pointer64>::create_section_descriptor_for_range(uint64_t a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  CSCppTextSectionDataDescriptor *v8;
  CSCppTextSectionDataDescriptor *v9;
  uint64_t v10;
  _QWORD v12[3];
  CSCppTextSectionDataDescriptor *v13;

  v8 = (CSCppTextSectionDataDescriptor *)operator new();
  CSCppTextSectionDataDescriptor::CSCppTextSectionDataDescriptor(v8, a2);
  v13 = v8;
  CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer64>((uint64_t)v8, a3, a4, (uint64_t)a2, (uint64_t)v12);
  if (a3 >= v12[0] && a4 + a3 <= v12[1] + v12[0])
  {
    v9 = v13;
    v13 = 0;
    CSCppTextSectionDescriptorMap<Pointer64>::_store_section_descriptor_for_range(a1, v9);
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100]((uint64_t)&v13, v10);
  return v9;
}

void sub_1B40E19B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

unsigned int *FlatbufferSymbolOwnerData::raw_bytes_for_range(uint64_t a1, os_unfair_lock_s **a2, unint64_t a3, uint64_t a4)
{
  __int16 v8;
  uint64_t v9;
  unsigned int *result;

  v8 = CSCppSymbolicator::flags(a2[1]);
  result = FlatbufferSymbolOwnerData::rawBytesForRangeWithoutFaulting(a1, v9, a3, a4);
  if (!result && (v8 & 0x602) != 0x602)
    return (unsigned int *)FlatbufferSymbolOwnerData::rawBytesForRangeWithOnDemandFaulting(a1, (CSCppSymbolOwner *)a2, a3, a4);
  return result;
}

uint64_t FlatbufferSymbolOwnerData::optional_symbolicator_flags(FlatbufferSymbolOwnerData *this)
{
  return 0;
}

std::string::size_type FlatbufferSymbolOwnerData::demangledNameForSymbol(FlatbufferSymbolOwnerData *this, const FlatbufferSymbols::Symbol *a2)
{
  std::string::size_type result;
  uint64_t v3;

  result = CSCppDeferredDemangler::demangledNameForSymbol((FlatbufferSymbolOwnerData *)((char *)this + 160), a2);
  if (!v3)
    return 0;
  return result;
}

std::string::size_type FlatbufferSymbolOwnerData::demangledNameForSymbol(FlatbufferSymbolOwnerData *this, const FlatbufferSymbols::InlineSymbol *a2)
{
  std::string::size_type result;
  uint64_t v3;

  result = CSCppDeferredDemangler::demangledNameForSymbol((FlatbufferSymbolOwnerData *)((char *)this + 160), a2);
  if (!v3)
    return 0;
  return result;
}

uint64_t FlatbufferSymbolOwnerData::relinked_subdylib_path_for_address()
{
  return 0;
}

uint64_t FlatbufferSymbolOwnerData::relinked_subdylib_name_for_address()
{
  return 0;
}

uint64_t FlatbufferSymbolOwnerData::unique_relinked_subdylib_count()
{
  return 0;
}

std::string *CSCppSymbolOwnerData::get_description@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  std::string *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;

  v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v4 & 1) != 0)
  {
    this = std::string::append(a2, "kCSSymbolOwnerDataFaultedFromDisk", 0x21uLL);
    v15 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
    if ((v15 & 2) == 0)
    {
LABEL_16:
      v16 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
      if ((v16 & 4) == 0)
      {
LABEL_19:
        v17 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
        if ((v17 & 8) == 0)
        {
LABEL_22:
          v18 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
          if ((v18 & 0x10) == 0)
          {
LABEL_25:
            v19 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
            if ((v19 & 0x20) == 0)
            {
LABEL_28:
              v20 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
              if ((v20 & 0x40) == 0)
              {
LABEL_31:
                v21 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
                if ((v21 & 0x80) == 0)
                {
LABEL_34:
                  v22 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
                  if ((v22 & 0x100) == 0)
                  {
LABEL_37:
                    v23 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
                    if ((v23 & 0x400) == 0)
                    {
LABEL_40:
                      v24 = atomic_load((unsigned int *)&v2->__r_.__value_.__r.__words[1] + 1);
                      if ((v24 & 0x800) == 0)
                        return this;
                      std::string::append(a2, " | ", 3uLL);
                      return std::string::append(a2, "kCSSymbolOwnerDataIsObjCGCSupported", 0x23uLL);
                    }
                    std::string::append(a2, " | ", 3uLL);
LABEL_39:
                    this = std::string::append(a2, "kCSSymbolOwnerDataIsObjCRetainReleaseSupported", 0x2EuLL);
                    goto LABEL_40;
                  }
                  std::string::append(a2, " | ", 3uLL);
LABEL_36:
                  this = std::string::append(a2, "KCSSymbolOwnerDataIsTextSegmentOnly", 0x23uLL);
                  goto LABEL_37;
                }
                std::string::append(a2, " | ", 3uLL);
LABEL_33:
                this = std::string::append(a2, "kCSSymbolOwnerDataEmpty", 0x17uLL);
                goto LABEL_34;
              }
              std::string::append(a2, " | ", 3uLL);
LABEL_30:
              this = std::string::append(a2, "kCSSymbolOwnerDataFoundBinaryViaDsymPlist", 0x29uLL);
              goto LABEL_31;
            }
            std::string::append(a2, " | ", 3uLL);
LABEL_27:
            this = std::string::append(a2, "kCSSymbolOwnerDataFoundBinaryNextToDsym", 0x27uLL);
            goto LABEL_28;
          }
          std::string::append(a2, " | ", 3uLL);
LABEL_24:
          this = std::string::append(a2, "kCSSymbolOwnerDataFoundDsym", 0x1BuLL);
          goto LABEL_25;
        }
        std::string::append(a2, " | ", 3uLL);
LABEL_21:
        this = std::string::append(a2, "kCSSymbolOwnerDataFaultedFromDiskDyldSharedCache", 0x30uLL);
        goto LABEL_22;
      }
      std::string::append(a2, " | ", 3uLL);
LABEL_18:
      this = std::string::append(a2, "kCSSymbolOwnerDataFaultedFromSelfDyldSharedCache", 0x30uLL);
      goto LABEL_19;
    }
    std::string::append(a2, " | ", 3uLL);
LABEL_15:
    this = std::string::append(a2, "kCSSymbolOwnerDataFaultedFromTask", 0x21uLL);
    goto LABEL_16;
  }
  v5 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v5 & 2) != 0)
    goto LABEL_15;
  v6 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v6 & 4) != 0)
    goto LABEL_18;
  v7 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v7 & 8) != 0)
    goto LABEL_21;
  v8 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v8 & 0x10) != 0)
    goto LABEL_24;
  v9 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v9 & 0x20) != 0)
    goto LABEL_27;
  v10 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v10 & 0x40) != 0)
    goto LABEL_30;
  v11 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if (v11 < 0)
    goto LABEL_33;
  v12 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v12 & 0x100) != 0)
    goto LABEL_36;
  v13 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v13 & 0x400) != 0)
    goto LABEL_39;
  v14 = atomic_load((unsigned int *)&this->__r_.__value_.__r.__words[1] + 1);
  if ((v14 & 0x800) != 0)
    return std::string::append(a2, "kCSSymbolOwnerDataIsObjCGCSupported", 0x23uLL);
  return this;
}

void sub_1B40E1D9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B40E1E14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *,false>(unint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *((_QWORD *)a2 - 4);
        v20 = a2 - 2;
        if (v21 < *(_QWORD *)v9)
        {
          v30 = *(_OWORD *)v9;
          v33 = *(_OWORD *)(v9 + 16);
          v22 = v20[1];
          *(_OWORD *)v9 = *v20;
          *(_OWORD *)(v9 + 16) = v22;
          *v20 = v30;
          v20[1] = v33;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)v9, (unint64_t *)(v9 + 32), (unint64_t *)a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(v9, (__n128 *)(v9 + 32), (__n128 *)(v9 + 64), (__n128 *)a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(v9, (__n128 *)(v9 + 32), (__n128 *)(v9 + 64), (__n128 *)(v9 + 96), (__n128 *)a2 - 2);
        return;
      default:
        if (v12 > 767)
        {
          if (v11 == 1)
          {
            if ((__int128 *)v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *,CSCppSegmentRange *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = v9 + 32 * (v13 >> 1);
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)(v9 + 32 * (v13 >> 1)), (unint64_t *)v9, (unint64_t *)a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)v9, (unint64_t *)(v9 + 32 * (v13 >> 1)), (unint64_t *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)(v9 + 32), (unint64_t *)(v15 - 32), (unint64_t *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)(v9 + 64), (unint64_t *)(v9 + 32 + 32 * v14), (unint64_t *)a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)(v15 - 32), (unint64_t *)v15, (unint64_t *)(v9 + 32 + 32 * v14));
            v29 = *(_OWORD *)v9;
            v32 = *(_OWORD *)(v9 + 16);
            v16 = *(_OWORD *)(v15 + 16);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)(v9 + 16) = v16;
            *(_OWORD *)v15 = v29;
            *(_OWORD *)(v15 + 16) = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_QWORD *)(v9 - 32) >= *(_QWORD *)v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::__less<void,void> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::__less<void,void> &>((uint64_t *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(v9, v17);
          v9 = v17 + 32;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(v17 + 32, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *,false>(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 32;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(v9, (uint64_t)a2);
        }
        else if ((__int128 *)v9 != a2)
        {
          v23 = (__int128 *)(v9 + 32);
          while (v23 != a2)
          {
            v24 = v23;
            v25 = *(_QWORD *)(a1 + 32);
            if (v25 < *(_QWORD *)a1)
            {
              v31 = *(_OWORD *)(a1 + 40);
              v34 = *(_QWORD *)(a1 + 56);
              v26 = v24;
              do
              {
                v27 = *(v26 - 1);
                *v26 = *(v26 - 2);
                v26[1] = v27;
                v28 = *((_QWORD *)v26 - 8);
                v26 -= 2;
              }
              while (v25 < v28);
              *(_QWORD *)v26 = v25;
              *((_QWORD *)v26 + 3) = v34;
              *(__int128 *)((char *)v26 + 8) = v31;
            }
            v23 = v24 + 2;
            a1 = (unint64_t)v24;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1))
          v24 = (const char *)*(a2 - 1);
        else
          v24 = (const char *)*(a2 - 2);
        if (v9[3])
          v25 = (const char *)v9[3];
        else
          v25 = (const char *)v9[2];
        v26 = strncmp(v24, v25, 0x10uLL);
        v28 = *(a2 - 4);
        v27 = a2 - 4;
        v29 = v28 < *v9;
        if (v26)
          v29 = v26 < 0;
        if (v29)
        {
          v32 = *(_OWORD *)v9;
          v34 = *((_OWORD *)v9 + 1);
          v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 4, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 8, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v15 - 4, v15, &v9[4 * v14 + 4]);
            v31 = *(_OWORD *)v9;
            v33 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          if (*(v9 - 1))
            v17 = (const char *)*(v9 - 1);
          else
            v17 = (const char *)*(v9 - 2);
          if (v9[3])
            v18 = (const char *)v9[3];
          else
            v18 = (const char *)v9[2];
          v19 = strncmp(v17, v18, 0x10uLL);
          v20 = *(v9 - 4) < *v9;
          if (v19)
            v20 = v19 < 0;
          if (!v20)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, a2);
            goto LABEL_24;
          }
LABEL_19:
          v21 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>((__int128 *)v9, a2);
          if ((v22 & 1) == 0)
            goto LABEL_22;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v21);
          v9 = v21 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v21 + 4, a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 4;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,CSCppSegmentRange*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = (unint64_t *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (__n128 *)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v31 = (unsigned int *)(*(a2 - 1) + *(unsigned __int16 *)(*(a2 - 1) - *(int *)*(a2 - 1) + 4));
        v32 = (char *)v31 + *v31 + 4;
        v33 = (const char *)(v9[2] + *(unsigned __int16 *)(v9[2] - *(int *)v9[2] + 4));
        v34 = strncmp(v32, &v33[*(unsigned int *)v33 + 4], 0x10uLL);
        v36 = *(a2 - 3);
        v35 = a2 - 3;
        v37 = v36 < *v9;
        if (v34)
          v37 = v34 < 0;
        if (v37)
        {
          v42 = v9[2];
          v40 = *(_OWORD *)v9;
          v38 = *(_OWORD *)v35;
          v9[2] = v35[2];
          *(_OWORD *)v9 = v38;
          *(_OWORD *)v35 = v40;
          v35[2] = v42;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, v9 + 3, a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, v9 + 3, v9 + 6, a2 - 3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, v9 + 3, v9 + 6, v9 + 9, a2 - 3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(&v9[3 * v14], v9, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, &v9[3 * v14], a2 - 3);
            v16 = 3 * v14;
            v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9 + 3, v17, a2 - 6);
            v18 = v9 + 6;
            v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v18, v19, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v17, v15, v19);
            v41 = a1[1].n128_u64[0];
            v39 = *a1;
            v20 = *(__n128 *)v15;
            a1[1].n128_u64[0] = v15[2];
            *a1 = v20;
            v15[2] = v41;
            *(__n128 *)v15 = v39;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v21 = (unsigned int *)(a1[-1].n128_u64[1]
                               + *(unsigned __int16 *)(a1[-1].n128_u64[1] - *(int *)a1[-1].n128_u64[1] + 4));
          v22 = (char *)v21 + *v21 + 4;
          v23 = (const char *)(a1[1].n128_u64[0]
                             + *(unsigned __int16 *)(a1[1].n128_u64[0] - *(int *)a1[1].n128_u64[0] + 4));
          v24 = strncmp(v22, &v23[*(unsigned int *)v23 + 4], 0x10uLL);
          v25 = a1[-2].n128_u64[1] < a1->n128_u64[0];
          if (v24)
            v25 = v24 < 0;
          if (!v25)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppFlatbufferRelocation *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(a1->n128_u64, (unint64_t)a2);
            goto LABEL_18;
          }
LABEL_13:
          v27 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppFlatbufferRelocation *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(a1, (unint64_t)a2);
          v28 = v26;
          if ((v29 & 1) == 0)
            goto LABEL_16;
          v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1->n128_u64, v26);
          v9 = v28 + 3;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v28 + 3, a2))
          {
            v10 = v11 + 1;
            if (v30)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*,false>(a1, v28, a3, -v11, a5 & 1, v27);
            v9 = v28 + 3;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v28;
          if (v30)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*,CSCppFlatbufferRelocation*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = (unint64_t *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *(a2 - 3);
        v24 = a2 - 3;
        if (v25 < *v9)
        {
          v36 = v9[2];
          v33 = *(_OWORD *)v9;
          v26 = *(_OWORD *)v24;
          v9[2] = v24[2];
          *(_OWORD *)v9 = v26;
          *(_OWORD *)v24 = v33;
          v24[2] = v36;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v9, v9 + 3, a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)v9, v9 + 3, v9 + 6, (uint64_t)(a2 - 3));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__n128 *)v9, v9 + 3, v9 + 6, (__n128 *)(v9 + 9), (__n128 *)(a2 - 3));
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,TRangeValue<Pointer64,unsigned long long> *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)&v9[3 * v14], v9, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v9, &v9[3 * v14], a2 - 3);
            v16 = 3 * v14;
            v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)(v9 + 3), v17, a2 - 6);
            v18 = (__int128 *)(v9 + 6);
            v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(v18, v19, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v17, v15, v19);
            v35 = *(_QWORD *)(a1 + 16);
            v32 = *(_OWORD *)a1;
            v20 = *(_OWORD *)v15;
            *(_QWORD *)(a1 + 16) = v15[2];
            *(_OWORD *)a1 = v20;
            v15[2] = v35;
            *(_OWORD *)v15 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_QWORD *)(a1 - 24) >= *(_QWORD *)a1)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>((unint64_t *)a1, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>((uint64_t *)a1, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(a1, (uint64_t)v21);
          v9 = (unint64_t *)(v21 + 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)(v21 + 3), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v21 + 3);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unint64_t *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)v9, (uint64_t)a2);
        }
        else if (v9 != a2)
        {
          v27 = v9 + 3;
          while (v27 != a2)
          {
            v28 = (uint64_t)v27;
            v29 = *(_QWORD *)(a1 + 24);
            if (v29 < *(_QWORD *)a1)
            {
              v34 = *(_OWORD *)(a1 + 32);
              v30 = v28;
              do
              {
                *(_OWORD *)v30 = *(_OWORD *)(v30 - 24);
                *(_QWORD *)(v30 + 16) = *(_QWORD *)(v30 - 8);
                v31 = *(_QWORD *)(v30 - 48);
                v30 -= 24;
              }
              while (v29 < v31);
              *(_QWORD *)v30 = v29;
              *(_OWORD *)(v30 + 8) = v34;
            }
            v27 = (unint64_t *)(v28 + 24);
            a1 = v28;
          }
        }
        return;
    }
  }
}

  v9 = (unint64_t *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (__n128 *)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v31 = (unsigned int *)(*(a2 - 1) + *(unsigned __int16 *)(*(a2 - 1) - *(int *)*(a2 - 1) + 4));
        v32 = (char *)v31 + *v31 + 4;
        v33 = (const char *)(v9[2] + *(unsigned __int16 *)(v9[2] - *(int *)v9[2] + 4));
        v34 = strncmp(v32, &v33[*(unsigned int *)v33 + 4], 0x10uLL);
        v36 = *(a2 - 3);
        v35 = a2 - 3;
        v37 = v36 < *v9;
        if (v34)
          v37 = v34 < 0;
        if (v37)
        {
          v42 = v9[2];
          v40 = *(_OWORD *)v9;
          v38 = *(_OWORD *)v35;
          v9[2] = v35[2];
          *(_OWORD *)v9 = v38;
          *(_OWORD *)v35 = v40;
          v35[2] = v42;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, v9 + 3, a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, v9 + 3, v9 + 6, a2 - 3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, v9 + 3, v9 + 6, v9 + 9, a2 - 3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(&v9[3 * v14], v9, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9, &v9[3 * v14], a2 - 3);
            v16 = 3 * v14;
            v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v9 + 3, v17, a2 - 6);
            v18 = v9 + 6;
            v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v18, v19, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(v17, v15, v19);
            v41 = a1[1].n128_u64[0];
            v39 = *a1;
            v20 = *(__n128 *)v15;
            a1[1].n128_u64[0] = v15[2];
            *a1 = v20;
            v15[2] = v41;
            *(__n128 *)v15 = v39;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v21 = (unsigned int *)(a1[-1].n128_u64[1]
                               + *(unsigned __int16 *)(a1[-1].n128_u64[1] - *(int *)a1[-1].n128_u64[1] + 4));
          v22 = (char *)v21 + *v21 + 4;
          v23 = (const char *)(a1[1].n128_u64[0]
                             + *(unsigned __int16 *)(a1[1].n128_u64[0] - *(int *)a1[1].n128_u64[0] + 4));
          v24 = strncmp(v22, &v23[*(unsigned int *)v23 + 4], 0x10uLL);
          v25 = a1[-2].n128_u64[1] < a1->n128_u64[0];
          if (v24)
            v25 = v24 < 0;
          if (!v25)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppFlatbufferRelocation *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(a1->n128_u64, (unint64_t)a2);
            goto LABEL_18;
          }
LABEL_13:
          v27 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppFlatbufferRelocation *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(a1, (unint64_t)a2);
          v28 = v26;
          if ((v29 & 1) == 0)
            goto LABEL_16;
          v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppFlatbufferRelocation*>(a1->n128_u64, v26);
          v9 = v28 + 3;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppFlatbufferRelocation*>(v28 + 3, a2))
          {
            v10 = v11 + 1;
            if (v30)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppFlatbufferRelocation*,false>(a1, v28, a3, -v11, a5 & 1, v27);
            v9 = v28 + 3;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v28;
          if (v30)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*,CSCppFlatbufferRelocation*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1))
          v24 = (const char *)*(a2 - 1);
        else
          v24 = (const char *)*(a2 - 2);
        if (v9[3])
          v25 = (const char *)v9[3];
        else
          v25 = (const char *)v9[2];
        v26 = strncmp(v24, v25, 0x10uLL);
        v28 = *(a2 - 4);
        v27 = a2 - 4;
        v29 = v28 < *v9;
        if (v26)
          v29 = v26 < 0;
        if (v29)
        {
          v32 = *(_OWORD *)v9;
          v34 = *((_OWORD *)v9 + 1);
          v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 4, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 8, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v15 - 4, v15, &v9[4 * v14 + 4]);
            v31 = *(_OWORD *)v9;
            v33 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          if (*(v9 - 1))
            v17 = (const char *)*(v9 - 1);
          else
            v17 = (const char *)*(v9 - 2);
          if (v9[3])
            v18 = (const char *)v9[3];
          else
            v18 = (const char *)v9[2];
          v19 = strncmp(v17, v18, 0x10uLL);
          v20 = *(v9 - 4) < *v9;
          if (v19)
            v20 = v19 < 0;
          if (!v20)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, a2);
            goto LABEL_24;
          }
LABEL_19:
          v21 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>((__int128 *)v9, a2);
          if ((v22 & 1) == 0)
            goto LABEL_22;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppSegmentRange*>(v9, v21);
          v9 = v21 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppSegmentRange*>(v21 + 4, a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppSegmentRange*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 4;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,CSCppSegmentRange*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = (unint64_t *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *(a2 - 3);
        v24 = a2 - 3;
        if (v25 < *v9)
        {
          v36 = v9[2];
          v33 = *(_OWORD *)v9;
          v26 = *(_OWORD *)v24;
          v9[2] = v24[2];
          *(_OWORD *)v9 = v26;
          *(_OWORD *)v24 = v33;
          v24[2] = v36;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v9, v9 + 3, a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)v9, v9 + 3, v9 + 6, (uint64_t)(a2 - 3));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__n128 *)v9, v9 + 3, v9 + 6, (__n128 *)(v9 + 9), (__n128 *)(a2 - 3));
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,TRangeValue<Pointer64,unsigned long long> *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)&v9[3 * v14], v9, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v9, &v9[3 * v14], a2 - 3);
            v16 = 3 * v14;
            v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)(v9 + 3), v17, a2 - 6);
            v18 = (__int128 *)(v9 + 6);
            v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(v18, v19, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v17, v15, v19);
            v35 = *(_QWORD *)(a1 + 16);
            v32 = *(_OWORD *)a1;
            v20 = *(_OWORD *)v15;
            *(_QWORD *)(a1 + 16) = v15[2];
            *(_OWORD *)a1 = v20;
            v15[2] = v35;
            *(_OWORD *)v15 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_QWORD *)(a1 - 24) >= *(_QWORD *)a1)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>((unint64_t *)a1, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>((uint64_t *)a1, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *>(a1, (uint64_t)v21);
          v9 = (unint64_t *)(v21 + 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *>((uint64_t)(v21 + 3), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v21 + 3);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unint64_t *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)v9, (uint64_t)a2);
        }
        else if (v9 != a2)
        {
          v27 = v9 + 3;
          while (v27 != a2)
          {
            v28 = (uint64_t)v27;
            v29 = *(_QWORD *)(a1 + 24);
            if (v29 < *(_QWORD *)a1)
            {
              v34 = *(_OWORD *)(a1 + 32);
              v30 = v28;
              do
              {
                *(_OWORD *)v30 = *(_OWORD *)(v30 - 24);
                *(_QWORD *)(v30 + 16) = *(_QWORD *)(v30 - 8);
                v31 = *(_QWORD *)(v30 - 48);
                v30 -= 24;
              }
              while (v29 < v31);
              *(_QWORD *)v30 = v29;
              *(_OWORD *)(v30 + 8) = v34;
            }
            v27 = (unint64_t *)(v28 + 24);
            a1 = v28;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 5);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = *(a2 - 24);
        v23 = (int *)(a2 - 24);
        if (v24 < *v9)
          swap(v9, v23);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v9, v9 + 24, (int *)a2 - 24);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v9, v9 + 24, v9 + 48, (int *)a2 - 24);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v9, v9 + 24, v9 + 48, v9 + 72, (int *)a2 - 24);
        return;
      default:
        if (v12 <= 2303)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>((unsigned int *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[24 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x3000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(&v9[24 * v14], v9, (int *)a2 - 24);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v9, &v9[24 * v14], (int *)a2 - 24);
            v16 = 3 * v14;
            v17 = &v9[24 * v14 - 24];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v9 + 24, v17, (int *)a2 - 48);
            v18 = v9 + 48;
            v19 = &v9[8 * v16 + 24];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v18, v19, (int *)a2 - 72);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v17, v15, v19);
            swap(a1, v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(a1 - 24) >= *a1)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSymbol<Pointer32> *,std::__less<void,void> &>((uint64_t)a1, (int *)a2);
            goto LABEL_16;
          }
LABEL_11:
          v20 = (int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSymbol<Pointer32> *,std::__less<void,void> &>((uint64_t)a1, (int *)a2);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, v20);
          v9 = v20 + 24;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(v20 + 24, (int *)a2))
          {
            v10 = v11 + 1;
            if ((v22 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = v20 + 24;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unsigned int *)v20;
          if ((v22 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v9 != (int *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *>(v9, (int *)a2, (int *)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = a2[-7].n128_u64[1];
        v23 = (__n128 *)((char *)a2 - 104);
        if (v24 < v9->n128_u64[0])
          swap(v9, v23);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v9, (__n128 *)((char *)v9 + 104), (__n128 *)((char *)a2 - 104));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v9, (__n128 *)((char *)v9 + 104), v9 + 13, (__n128 *)((char *)a2 - 104));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v9, (__n128 *)((char *)v9 + 104), v9 + 13, (__n128 *)((char *)v9 + 312), (__n128 *)((char *)a2 - 104));
        return;
      default:
        if (v12 <= 2495)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v9->n128_u64, a2->n128_u64);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__n128 *)((char *)v9 + 104 * (v13 >> 1));
          if ((unint64_t)v12 < 0x3401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v15, v9, (__n128 *)((char *)a2 - 104));
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v9, v15, (__n128 *)((char *)a2 - 104));
            v16 = 104 * v14;
            v17 = (__n128 *)((char *)v9 + 104 * v14 - 104);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((__n128 *)((char *)v9 + 104), v17, a2 - 13);
            v18 = v9 + 13;
            v19 = (__n128 *)((char *)v9 + v16 + 104);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v18, v19, (__n128 *)((char *)a2 - 312));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(v17, v15, v19);
            swap(a1, v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (a1[-7].n128_u64[1] >= a1->n128_u64[0])
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSymbol<Pointer64> *,std::__less<void,void> &>((uint64_t)a1, a2);
            goto LABEL_16;
          }
LABEL_11:
          v20 = (_QWORD *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSymbol<Pointer64> *,std::__less<void,void> &>((uint64_t)a1, a2);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((uint64_t)a1, v20);
          v9 = (__n128 *)(v20 + 13);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((uint64_t)(v20 + 13), a2))
          {
            v10 = v11 + 1;
            if ((v22 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v20 + 13);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__n128 *)v20;
          if ((v22 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *>(v9, a2, a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_QWORD *)a2 - 11) < *(_QWORD *)(v8 + 8))
        {
          v172 = *(_OWORD *)v8;
          v184 = *(_OWORD *)(v8 + 16);
          v219 = *(_OWORD *)(v8 + 64);
          v231 = *(_OWORD *)(v8 + 80);
          v195 = *(_OWORD *)(v8 + 32);
          v207 = *(_OWORD *)(v8 + 48);
          v60 = *(a2 - 1);
          v62 = *(a2 - 4);
          v61 = *(a2 - 3);
          *(_OWORD *)(v8 + 64) = *(a2 - 2);
          *(_OWORD *)(v8 + 80) = v60;
          *(_OWORD *)(v8 + 32) = v62;
          *(_OWORD *)(v8 + 48) = v61;
          v63 = *(a2 - 5);
          *(_OWORD *)v8 = *(a2 - 6);
          *(_OWORD *)(v8 + 16) = v63;
          *(a2 - 6) = v172;
          *(a2 - 5) = v184;
          *(a2 - 2) = v219;
          *(a2 - 1) = v231;
          *(a2 - 4) = v195;
          *(a2 - 3) = v207;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(v8, v8 + 96, (uint64_t)(a2 - 6));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(v8, v8 + 96, v8 + 192, (uint64_t)(a2 - 6));
        return;
      case 5:
        v64 = (__int128 *)(v8 + 96);
        v65 = (__int128 *)(v8 + 192);
        v66 = (__int128 *)(v8 + 288);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(v8, v8 + 96, v8 + 192, v8 + 288);
        if (*((_QWORD *)a2 - 11) < *(_QWORD *)(v8 + 296))
        {
          v196 = *(_OWORD *)(v8 + 320);
          v208 = *(_OWORD *)(v8 + 336);
          v220 = *(_OWORD *)(v8 + 352);
          v232 = *(_OWORD *)(v8 + 368);
          v173 = *v66;
          v185 = *(_OWORD *)(v8 + 304);
          v67 = *(a2 - 5);
          *v66 = *(a2 - 6);
          *(_OWORD *)(v8 + 304) = v67;
          v68 = *(a2 - 1);
          v70 = *(a2 - 4);
          v69 = *(a2 - 3);
          *(_OWORD *)(v8 + 352) = *(a2 - 2);
          *(_OWORD *)(v8 + 368) = v68;
          *(_OWORD *)(v8 + 320) = v70;
          *(_OWORD *)(v8 + 336) = v69;
          *(a2 - 6) = v173;
          *(a2 - 5) = v185;
          *(a2 - 2) = v220;
          *(a2 - 1) = v232;
          *(a2 - 4) = v196;
          *(a2 - 3) = v208;
          if (*(_QWORD *)(v8 + 296) < *(_QWORD *)(v8 + 200))
          {
            v197 = *(_OWORD *)(v8 + 224);
            v209 = *(_OWORD *)(v8 + 240);
            v221 = *(_OWORD *)(v8 + 256);
            v233 = *(_OWORD *)(v8 + 272);
            v174 = *v65;
            v186 = *(_OWORD *)(v8 + 208);
            v71 = *(_OWORD *)(v8 + 336);
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 320);
            *(_OWORD *)(v8 + 240) = v71;
            v72 = *(_OWORD *)(v8 + 368);
            *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 352);
            *(_OWORD *)(v8 + 272) = v72;
            v73 = *(_OWORD *)(v8 + 304);
            *v65 = *v66;
            *(_OWORD *)(v8 + 208) = v73;
            *v66 = v174;
            *(_OWORD *)(v8 + 304) = v186;
            *(_OWORD *)(v8 + 352) = v221;
            *(_OWORD *)(v8 + 368) = v233;
            *(_OWORD *)(v8 + 320) = v197;
            *(_OWORD *)(v8 + 336) = v209;
            if (*(_QWORD *)(v8 + 200) < *(_QWORD *)(v8 + 104))
            {
              v198 = *(_OWORD *)(v8 + 128);
              v210 = *(_OWORD *)(v8 + 144);
              v222 = *(_OWORD *)(v8 + 160);
              v234 = *(_OWORD *)(v8 + 176);
              v175 = *v64;
              v187 = *(_OWORD *)(v8 + 112);
              v74 = *(_OWORD *)(v8 + 240);
              *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 224);
              *(_OWORD *)(v8 + 144) = v74;
              v75 = *(_OWORD *)(v8 + 272);
              *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 256);
              *(_OWORD *)(v8 + 176) = v75;
              v76 = *(_OWORD *)(v8 + 208);
              *v64 = *v65;
              *(_OWORD *)(v8 + 112) = v76;
              *v65 = v175;
              *(_OWORD *)(v8 + 208) = v187;
              *(_OWORD *)(v8 + 256) = v222;
              *(_OWORD *)(v8 + 272) = v234;
              *(_OWORD *)(v8 + 224) = v198;
              *(_OWORD *)(v8 + 240) = v210;
              if (*(_QWORD *)(v8 + 104) < *(_QWORD *)(v8 + 8))
              {
                v176 = *(_OWORD *)v8;
                v188 = *(_OWORD *)(v8 + 16);
                v223 = *(_OWORD *)(v8 + 64);
                v235 = *(_OWORD *)(v8 + 80);
                v199 = *(_OWORD *)(v8 + 32);
                v211 = *(_OWORD *)(v8 + 48);
                v77 = *(_OWORD *)(v8 + 176);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 160);
                *(_OWORD *)(v8 + 80) = v77;
                v78 = *(_OWORD *)(v8 + 144);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 48) = v78;
                v79 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v8 = *v64;
                *(_OWORD *)(v8 + 16) = v79;
                *v64 = v176;
                *(_OWORD *)(v8 + 112) = v188;
                *(_OWORD *)(v8 + 160) = v223;
                *(_OWORD *)(v8 + 176) = v235;
                *(_OWORD *)(v8 + 128) = v199;
                *(_OWORD *)(v8 + 144) = v211;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2303)
        {
          v80 = (_QWORD *)(v8 + 96);
          v82 = (_OWORD *)v8 == a2 || v80 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v82)
            {
              v83 = 0;
              v84 = (_QWORD *)v8;
              do
              {
                v85 = v80;
                v86 = v84[13];
                if (v86 < v84[1])
                {
                  v87 = *v85;
                  v200 = *((_OWORD *)v84 + 9);
                  v212 = *((_OWORD *)v84 + 10);
                  v224 = *((_OWORD *)v84 + 11);
                  v89 = *((_OWORD *)v84 + 7);
                  v88 = *((_OWORD *)v84 + 8);
                  v90 = v83;
                  v177 = v89;
                  while (1)
                  {
                    v91 = (_OWORD *)(v8 + v90);
                    v92 = *(_OWORD *)(v8 + v90 + 48);
                    v91[8] = *(_OWORD *)(v8 + v90 + 32);
                    v91[9] = v92;
                    v93 = *(_OWORD *)(v8 + v90 + 80);
                    v91[10] = *(_OWORD *)(v8 + v90 + 64);
                    v91[11] = v93;
                    v94 = *(_OWORD *)(v8 + v90 + 16);
                    v91[6] = *(_OWORD *)(v8 + v90);
                    v91[7] = v94;
                    if (!v90)
                      break;
                    v90 -= 96;
                    if (v86 >= *((_QWORD *)v91 - 11))
                    {
                      v95 = v8 + v90 + 96;
                      goto LABEL_78;
                    }
                  }
                  v95 = v8;
LABEL_78:
                  *(_QWORD *)v95 = v87;
                  *(_QWORD *)(v95 + 8) = v86;
                  *(_OWORD *)(v95 + 48) = v200;
                  *(_OWORD *)(v95 + 64) = v212;
                  *(_OWORD *)(v95 + 80) = v224;
                  *(_OWORD *)(v95 + 16) = v177;
                  *(_OWORD *)(v95 + 32) = v88;
                }
                v80 = v85 + 12;
                v83 += 96;
                v84 = v85;
              }
              while (v85 + 12 != (_QWORD *)a2);
            }
          }
          else if (!v82)
          {
            do
            {
              v146 = v80;
              v147 = *(_QWORD *)(a1 + 104);
              if (v147 < *(_QWORD *)(a1 + 8))
              {
                v148 = *v80;
                v203 = *(_OWORD *)(a1 + 144);
                v215 = *(_OWORD *)(a1 + 160);
                v227 = *(_OWORD *)(a1 + 176);
                v149 = v146;
                v180 = *(_OWORD *)(a1 + 112);
                v191 = *(_OWORD *)(a1 + 128);
                do
                {
                  v150 = *((_OWORD *)v149 - 3);
                  *((_OWORD *)v149 + 2) = *((_OWORD *)v149 - 4);
                  *((_OWORD *)v149 + 3) = v150;
                  v151 = *((_OWORD *)v149 - 1);
                  *((_OWORD *)v149 + 4) = *((_OWORD *)v149 - 2);
                  *((_OWORD *)v149 + 5) = v151;
                  v152 = *((_OWORD *)v149 - 5);
                  *(_OWORD *)v149 = *((_OWORD *)v149 - 6);
                  *((_OWORD *)v149 + 1) = v152;
                  v153 = *(v149 - 23);
                  v149 -= 12;
                }
                while (v147 < v153);
                *v149 = v148;
                v149[1] = v147;
                *((_OWORD *)v149 + 1) = v180;
                *((_OWORD *)v149 + 4) = v215;
                *((_OWORD *)v149 + 5) = v227;
                *((_OWORD *)v149 + 2) = v191;
                *((_OWORD *)v149 + 3) = v203;
              }
              v80 = v146 + 12;
              a1 = (uint64_t)v146;
            }
            while (v146 + 12 != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if ((_OWORD *)v8 == a2)
            return;
          v96 = (unint64_t)(v10 - 2) >> 1;
          v97 = v96;
          do
          {
            v98 = v97;
            if (v96 >= v97)
            {
              v99 = (2 * v97) | 1;
              v100 = v8 + 96 * v99;
              if (2 * v97 + 2 < v10)
              {
                v101 = *(_QWORD *)(v8 + 96 * v99 + 8);
                v102 = *(_QWORD *)(v100 + 104);
                v100 += 96 * (v101 < v102);
                if (v101 < v102)
                  v99 = 2 * v97 + 2;
              }
              v103 = *(_QWORD *)(v8 + 96 * v97 + 8);
              if (*(_QWORD *)(v100 + 8) >= v103)
              {
                v104 = v8 + 96 * v97;
                v105 = *(_QWORD *)v104;
                v178 = *(_OWORD *)(v104 + 16);
                v213 = *(_OWORD *)(v104 + 64);
                v225 = *(_OWORD *)(v104 + 80);
                v189 = *(_OWORD *)(v104 + 32);
                v201 = *(_OWORD *)(v104 + 48);
                do
                {
                  v106 = (_OWORD *)v104;
                  v104 = v100;
                  v107 = *(_OWORD *)(v100 + 16);
                  *v106 = *(_OWORD *)v100;
                  v106[1] = v107;
                  v108 = *(_OWORD *)(v100 + 32);
                  v109 = *(_OWORD *)(v100 + 48);
                  v110 = *(_OWORD *)(v100 + 80);
                  v106[4] = *(_OWORD *)(v100 + 64);
                  v106[5] = v110;
                  v106[2] = v108;
                  v106[3] = v109;
                  if (v96 < v99)
                    break;
                  v111 = (2 * v99) | 1;
                  v100 = v8 + 96 * v111;
                  v112 = 2 * v99 + 2;
                  if (v112 < v10)
                  {
                    v113 = *(_QWORD *)(v8 + 96 * v111 + 8);
                    v114 = *(_QWORD *)(v100 + 104);
                    v100 += 96 * (v113 < v114);
                    if (v113 < v114)
                      v111 = v112;
                  }
                  v99 = v111;
                }
                while (*(_QWORD *)(v100 + 8) >= v103);
                *(_QWORD *)v104 = v105;
                *(_QWORD *)(v104 + 8) = v103;
                *(_OWORD *)(v104 + 48) = v201;
                *(_OWORD *)(v104 + 64) = v213;
                *(_OWORD *)(v104 + 80) = v225;
                *(_OWORD *)(v104 + 16) = v178;
                *(_OWORD *)(v104 + 32) = v189;
              }
            }
            v97 = v98 - 1;
          }
          while (v98);
          v115 = v9 / 0x60uLL;
          while (2)
          {
            v116 = 0;
            v179 = *(_OWORD *)v8;
            v190 = *(_OWORD *)(v8 + 16);
            v226 = *(_OWORD *)(v8 + 64);
            v236 = *(_OWORD *)(v8 + 80);
            v202 = *(_OWORD *)(v8 + 32);
            v214 = *(_OWORD *)(v8 + 48);
            v117 = (_OWORD *)v8;
            do
            {
              v118 = v116 + 1;
              v119 = &v117[6 * v116 + 6];
              v120 = (2 * v116) | 1;
              v121 = 2 * v116 + 2;
              if (v121 < v115)
              {
                v122 = *((_QWORD *)&v117[6 * v118] + 1);
                v123 = *((_QWORD *)v119 + 13);
                v119 += 6 * (v122 < v123);
                if (v122 < v123)
                  v120 = v121;
              }
              v124 = v119[1];
              *v117 = *v119;
              v117[1] = v124;
              v125 = v119[2];
              v126 = v119[3];
              v127 = v119[5];
              v117[4] = v119[4];
              v117[5] = v127;
              v117[2] = v125;
              v117[3] = v126;
              v117 = v119;
              v116 = v120;
            }
            while (v120 <= (uint64_t)((unint64_t)(v115 - 2) >> 1));
            a2 -= 6;
            if (v119 != a2)
            {
              v128 = a2[1];
              *v119 = *a2;
              v119[1] = v128;
              v129 = a2[2];
              v130 = a2[3];
              v131 = a2[5];
              v119[4] = a2[4];
              v119[5] = v131;
              v119[2] = v129;
              v119[3] = v130;
              a2[4] = v226;
              a2[5] = v236;
              a2[2] = v202;
              a2[3] = v214;
              *a2 = v179;
              a2[1] = v190;
              v132 = (uint64_t)v119 - v8 + 96;
              if (v132 >= 97)
              {
                v133 = (v132 / 0x60uLL - 2) >> 1;
                v134 = *((_QWORD *)v119 + 1);
                if (*(_QWORD *)(v8 + 96 * v133 + 8) < v134)
                {
                  v135 = *(_QWORD *)v119;
                  v156 = v119[1];
                  v165 = v119[4];
                  v168 = v119[5];
                  v159 = v119[2];
                  v162 = v119[3];
                  do
                  {
                    v136 = v119;
                    v119 = (_OWORD *)(v8 + 96 * v133);
                    v137 = v119[1];
                    *v136 = *v119;
                    v136[1] = v137;
                    v138 = v119[2];
                    v139 = v119[3];
                    v140 = v119[5];
                    v136[4] = v119[4];
                    v136[5] = v140;
                    v136[2] = v138;
                    v136[3] = v139;
                    if (!v133)
                      break;
                    v133 = (v133 - 1) >> 1;
                  }
                  while (*(_QWORD *)(v8 + 96 * v133 + 8) < v134);
                  *(_QWORD *)v119 = v135;
                  *((_QWORD *)v119 + 1) = v134;
                  v119[1] = v156;
                  v141 = v159;
                  v142 = v162;
                  v143 = v165;
                  v144 = v168;
LABEL_110:
                  v119[4] = v143;
                  v119[5] = v144;
                  v119[2] = v141;
                  v119[3] = v142;
                }
              }
              if (v115-- <= 2)
                return;
              continue;
            }
            break;
          }
          *v119 = v179;
          v119[1] = v190;
          v141 = v202;
          v142 = v214;
          v143 = v226;
          v144 = v236;
          goto LABEL_110;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (_OWORD *)(v8 + 96 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x3000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1 + 96 * v11, a1, (uint64_t)(a2 - 6));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1, a1 + 96 * v11, (uint64_t)(a2 - 6));
          v13 = 3 * v11;
          v14 = a1 + 96 * v11 - 96;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1 + 96, v14, (uint64_t)(a2 - 12));
          v15 = a1 + 96 + 32 * v13;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1 + 192, v15, (uint64_t)(a2 - 18));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(v14, (uint64_t)v12, v15);
          v169 = *(_OWORD *)a1;
          v181 = *(_OWORD *)(a1 + 16);
          v216 = *(_OWORD *)(a1 + 64);
          v228 = *(_OWORD *)(a1 + 80);
          v192 = *(_OWORD *)(a1 + 32);
          v204 = *(_OWORD *)(a1 + 48);
          v16 = v12[5];
          v18 = v12[2];
          v17 = v12[3];
          *(_OWORD *)(a1 + 64) = v12[4];
          *(_OWORD *)(a1 + 80) = v16;
          *(_OWORD *)(a1 + 32) = v18;
          *(_OWORD *)(a1 + 48) = v17;
          v19 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v19;
          *v12 = v169;
          v12[1] = v181;
          v12[4] = v216;
          v12[5] = v228;
          v12[2] = v192;
          v12[3] = v204;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(a1 - 88) < v20)
            goto LABEL_11;
          v42 = *(_QWORD *)a1;
          v164 = *(_OWORD *)(a1 + 64);
          v167 = *(_OWORD *)(a1 + 80);
          v158 = *(_OWORD *)(a1 + 32);
          v161 = *(_OWORD *)(a1 + 48);
          v155 = *(_OWORD *)(a1 + 16);
          if (v20 >= *((_QWORD *)a2 - 11))
          {
            v45 = a1 + 96;
            do
            {
              v8 = v45;
              if (v45 >= (unint64_t)a2)
                break;
              v46 = *(_QWORD *)(v45 + 8);
              v45 += 96;
            }
            while (v20 >= v46);
          }
          else
          {
            v43 = a1;
            do
            {
              v8 = v43 + 96;
              v44 = *(_QWORD *)(v43 + 104);
              v43 += 96;
            }
            while (v20 >= v44);
          }
          v47 = a2;
          if (v8 < (unint64_t)a2)
          {
            v48 = a2;
            do
            {
              v47 = v48 - 6;
              v49 = *((_QWORD *)v48 - 11);
              v48 -= 6;
            }
            while (v20 < v49);
          }
          while (v8 < (unint64_t)v47)
          {
            v171 = *(_OWORD *)v8;
            v183 = *(_OWORD *)(v8 + 16);
            v218 = *(_OWORD *)(v8 + 64);
            v230 = *(_OWORD *)(v8 + 80);
            v194 = *(_OWORD *)(v8 + 32);
            v206 = *(_OWORD *)(v8 + 48);
            v50 = v47[5];
            v52 = v47[2];
            v51 = v47[3];
            *(_OWORD *)(v8 + 64) = v47[4];
            *(_OWORD *)(v8 + 80) = v50;
            *(_OWORD *)(v8 + 32) = v52;
            *(_OWORD *)(v8 + 48) = v51;
            v53 = v47[1];
            *(_OWORD *)v8 = *v47;
            *(_OWORD *)(v8 + 16) = v53;
            *v47 = v171;
            v47[1] = v183;
            v47[4] = v218;
            v47[5] = v230;
            v47[2] = v194;
            v47[3] = v206;
            do
            {
              v54 = *(_QWORD *)(v8 + 104);
              v8 += 96;
            }
            while (v20 >= v54);
            do
            {
              v55 = *((_QWORD *)v47 - 11);
              v47 -= 6;
            }
            while (v20 < v55);
          }
          if (v8 - 96 != a1)
          {
            v56 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 16) = v56;
            v57 = *(_OWORD *)(v8 - 64);
            v58 = *(_OWORD *)(v8 - 48);
            v59 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 80) = v59;
            *(_OWORD *)(a1 + 32) = v57;
            *(_OWORD *)(a1 + 48) = v58;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 96) = v42;
          *(_QWORD *)(v8 - 88) = v20;
          *(_OWORD *)(v8 - 80) = v155;
          *(_OWORD *)(v8 - 32) = v164;
          *(_OWORD *)(v8 - 16) = v167;
          *(_OWORD *)(v8 - 64) = v158;
          *(_OWORD *)(v8 - 48) = v161;
          continue;
        }
        v20 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v21 = 0;
        v22 = *(_QWORD *)a1;
        v163 = *(_OWORD *)(a1 + 64);
        v166 = *(_OWORD *)(a1 + 80);
        v157 = *(_OWORD *)(a1 + 32);
        v160 = *(_OWORD *)(a1 + 48);
        v154 = *(_OWORD *)(a1 + 16);
        do
        {
          v23 = *(_QWORD *)(a1 + v21 + 104);
          v21 += 96;
        }
        while (v23 < v20);
        v24 = a1 + v21;
        v25 = a2;
        if (v21 == 96)
        {
          v28 = a2;
          while (v24 < (unint64_t)v28)
          {
            v26 = v28 - 6;
            v29 = *((_QWORD *)v28 - 11);
            v28 -= 6;
            if (v29 < v20)
              goto LABEL_21;
          }
          v26 = v28;
        }
        else
        {
          do
          {
            v26 = v25 - 6;
            v27 = *((_QWORD *)v25 - 11);
            v25 -= 6;
          }
          while (v27 >= v20);
        }
LABEL_21:
        v8 = v24;
        if (v24 < (unint64_t)v26)
        {
          v30 = v26;
          do
          {
            v170 = *(_OWORD *)v8;
            v182 = *(_OWORD *)(v8 + 16);
            v217 = *(_OWORD *)(v8 + 64);
            v229 = *(_OWORD *)(v8 + 80);
            v193 = *(_OWORD *)(v8 + 32);
            v205 = *(_OWORD *)(v8 + 48);
            v31 = v30[5];
            v33 = v30[2];
            v32 = v30[3];
            *(_OWORD *)(v8 + 64) = v30[4];
            *(_OWORD *)(v8 + 80) = v31;
            *(_OWORD *)(v8 + 32) = v33;
            *(_OWORD *)(v8 + 48) = v32;
            v34 = v30[1];
            *(_OWORD *)v8 = *v30;
            *(_OWORD *)(v8 + 16) = v34;
            *v30 = v170;
            v30[1] = v182;
            v30[4] = v217;
            v30[5] = v229;
            v30[2] = v193;
            v30[3] = v205;
            do
            {
              v35 = *(_QWORD *)(v8 + 104);
              v8 += 96;
            }
            while (v35 < v20);
            do
            {
              v36 = *((_QWORD *)v30 - 11);
              v30 -= 6;
            }
            while (v36 >= v20);
          }
          while (v8 < (unint64_t)v30);
        }
        if (v8 - 96 != a1)
        {
          v37 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 16) = v37;
          v38 = *(_OWORD *)(v8 - 64);
          v39 = *(_OWORD *)(v8 - 48);
          v40 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 80) = v40;
          *(_OWORD *)(a1 + 32) = v38;
          *(_OWORD *)(a1 + 48) = v39;
        }
        *(_QWORD *)(v8 - 96) = v22;
        *(_QWORD *)(v8 - 88) = v20;
        *(_OWORD *)(v8 - 80) = v154;
        *(_OWORD *)(v8 - 32) = v163;
        *(_OWORD *)(v8 - 16) = v166;
        *(_OWORD *)(v8 - 64) = v157;
        *(_OWORD *)(v8 - 48) = v160;
        if (v24 < (unint64_t)v26)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*,false>(a1, v8 - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v41 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1, v8 - 96);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(v8, (uint64_t)a2))
        {
          if (v41)
            continue;
          goto LABEL_32;
        }
        a2 = (_OWORD *)(v8 - 96);
        if (!v41)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1))
          v24 = (const char *)*(a2 - 1);
        else
          v24 = (const char *)*(a2 - 2);
        if (v9[3])
          v25 = (const char *)v9[3];
        else
          v25 = (const char *)v9[2];
        v26 = strncmp(v24, v25, 0x10uLL);
        v28 = *(a2 - 4);
        v27 = a2 - 4;
        v29 = v28 < *v9;
        if (v26)
          v29 = v26 < 0;
        if (v29)
        {
          v32 = *(_OWORD *)v9;
          v34 = *((_OWORD *)v9 + 1);
          v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 4, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 8, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v15 - 4, v15, &v9[4 * v14 + 4]);
            v31 = *(_OWORD *)v9;
            v33 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          if (*(v9 - 1))
            v17 = (const char *)*(v9 - 1);
          else
            v17 = (const char *)*(v9 - 2);
          if (v9[3])
            v18 = (const char *)v9[3];
          else
            v18 = (const char *)v9[2];
          v19 = strncmp(v17, v18, 0x10uLL);
          v20 = *(v9 - 4) < *v9;
          if (v19)
            v20 = v19 < 0;
          if (!v20)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, a2);
            goto LABEL_24;
          }
LABEL_19:
          v21 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>((__int128 *)v9, a2);
          if ((v22 & 1) == 0)
            goto LABEL_22;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer32,Pointer32::off_t>> create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer32&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v21);
          v9 = v21 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer32,Pointer32::off_t>> create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer32&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v21 + 4, a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer32,Pointer32::off_t>> create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer32&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 4;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,CSCppSegmentRange*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 4);
        v19 = (__int128 *)(a2 - 4);
        if (v20 < *v9)
        {
          v27 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v27;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)v9, v9 + 4, v9 + 8, (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)v9, v9 + 4, v9 + 8, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)v9 + 1, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)v9 + 2, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)v15 - 1, v15, &v9[4 * v14 + 4]);
            v26 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(v9 - 4) >= *v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,char const*> *,std::__less<void,void> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,char const*> *,std::__less<void,void> &>((int *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((uint64_t)v9, v16);
          v9 = (unsigned int *)(v16 + 16);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(v16 + 16, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (unsigned int *)(v16 + 16);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unsigned int *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((uint64_t)v9, (uint64_t)a2);
        }
        else if (v9 != a2)
        {
          v21 = v9 + 4;
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[4];
            if (v23 < *a1)
            {
              v28 = *(_QWORD *)(a1 + 5);
              v29 = a1[7];
              v24 = v22;
              do
              {
                *(_OWORD *)v24 = *((_OWORD *)v24 - 1);
                v25 = *(v24 - 8);
                v24 -= 4;
              }
              while (v23 < v25);
              *v24 = v23;
              v24[3] = v29;
              *(_QWORD *)(v24 + 1) = v28;
            }
            v21 = v22 + 4;
            a1 = v22;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *((_DWORD *)a2 - 8);
        v20 = a2 - 2;
        if (v21 < *(_DWORD *)v9)
        {
          *(_OWORD *)v29 = *(_OWORD *)v9;
          *(_OWORD *)&v29[16] = *(_OWORD *)(v9 + 16);
          v22 = *v20;
          *(_OWORD *)(v9 + 12) = *(__int128 *)((char *)v20 + 12);
          *(_OWORD *)v9 = v22;
          *v20 = *(_OWORD *)v29;
          *(__int128 *)((char *)v20 + 12) = *(_OWORD *)&v29[12];
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)v9, (int *)(v9 + 32), (int *)a2 - 8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)v9, (__int128 *)(v9 + 32), (__int128 *)(v9 + 64), a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((__int128 *)v9, (__int128 *)(v9 + 32), (__int128 *)(v9 + 64), (__int128 *)(v9 + 96), a2 - 2);
        return;
      default:
        if (v12 > 767)
        {
          if (v11 == 1)
          {
            if ((_OWORD *)v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = v9 + 32 * (v13 >> 1);
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)(v9 + 32 * (v13 >> 1)), (int *)v9, (int *)a2 - 8);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)v9, (int *)(v9 + 32 * (v13 >> 1)), (int *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)(v9 + 32), (int *)(v15 - 32), (int *)a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)(v9 + 64), (int *)(v9 + 32 + 32 * v14), (int *)a2 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)(v15 - 32), (int *)v15, (int *)(v9 + 32 + 32 * v14));
            *(_OWORD *)v28 = *(_OWORD *)v9;
            *(_OWORD *)&v28[16] = *(_OWORD *)(v9 + 16);
            v16 = *(_OWORD *)v15;
            *(_OWORD *)(v9 + 12) = *(_OWORD *)(v15 + 12);
            *(_OWORD *)v9 = v16;
            *(_OWORD *)(v15 + 12) = *(_OWORD *)&v28[12];
            *(_OWORD *)v15 = *(_OWORD *)v28;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_DWORD *)(v9 - 32) >= *(_DWORD *)v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer32> *,std::__less<void,void> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer32> *,std::__less<void,void> &>((int *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(v9, v17);
          v9 = v17 + 32;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(v17 + 32, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,false>(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 32;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (_OWORD *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(v9, (uint64_t)a2);
        }
        else if ((_OWORD *)v9 != a2)
        {
          v23 = (_OWORD *)(v9 + 32);
          while (v23 != a2)
          {
            v24 = v23;
            v25 = *(_DWORD *)(a1 + 32);
            if (v25 < *(_DWORD *)a1)
            {
              *(_OWORD *)v30 = *(_OWORD *)(a1 + 36);
              *(_OWORD *)&v30[12] = *(_OWORD *)(a1 + 48);
              v26 = v24;
              do
              {
                *v26 = *(v26 - 2);
                *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)((char *)v26 - 20);
                v27 = *((_DWORD *)v26 - 16);
                v26 -= 2;
              }
              while (v25 < v27);
              *(_DWORD *)v26 = v25;
              *(_QWORD *)((char *)v26 + 20) = *(_QWORD *)&v30[16];
              *(_OWORD *)((char *)v26 + 4) = *(_OWORD *)v30;
            }
            v23 = v24 + 2;
            a1 = (unint64_t)v24;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1))
          v24 = (const char *)*(a2 - 1);
        else
          v24 = (const char *)*(a2 - 2);
        if (v9[3])
          v25 = (const char *)v9[3];
        else
          v25 = (const char *)v9[2];
        v26 = strncmp(v24, v25, 0x10uLL);
        v28 = *(a2 - 4);
        v27 = a2 - 4;
        v29 = v28 < *v9;
        if (v26)
          v29 = v26 < 0;
        if (v29)
        {
          v32 = *(_OWORD *)v9;
          v34 = *((_OWORD *)v9 + 1);
          v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 4, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 8, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v15 - 4, v15, &v9[4 * v14 + 4]);
            v31 = *(_OWORD *)v9;
            v33 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          if (*(v9 - 1))
            v17 = (const char *)*(v9 - 1);
          else
            v17 = (const char *)*(v9 - 2);
          if (v9[3])
            v18 = (const char *)v9[3];
          else
            v18 = (const char *)v9[2];
          v19 = strncmp(v17, v18, 0x10uLL);
          v20 = *(v9 - 4) < *v9;
          if (v19)
            v20 = v19 < 0;
          if (!v20)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, a2);
            goto LABEL_24;
          }
LABEL_19:
          v21 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>((__int128 *)v9, a2);
          if ((v22 & 1) == 0)
            goto LABEL_22;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v21);
          v9 = v21 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v21 + 4, a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 4;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,CSCppSegmentRange*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = (unint64_t *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *((_QWORD *)a2 - 3);
        v24 = (char *)a2 - 24;
        if (v25 < *v9)
        {
          v36 = v9[2];
          v33 = *(_OWORD *)v9;
          v26 = *(_OWORD *)v24;
          *((_DWORD *)v9 + 4) = *((_DWORD *)v24 + 4);
          *(_OWORD *)v9 = v26;
          *(_OWORD *)v24 = v33;
          *((_DWORD *)v24 + 4) = v36;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__int128 *)v9, v9 + 3, (unint64_t *)a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((uint64_t)v9, v9 + 3, v9 + 6, (uint64_t)a2 - 24);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__n128 *)v9, v9 + 3, v9 + 6, (__n128 *)(v9 + 9), (__n128 *)((char *)a2 - 24));
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != (unint64_t *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,TRangeValue<Pointer64,unsigned int> *>((uint64_t)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__int128 *)&v9[3 * v14], v9, (unint64_t *)a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__int128 *)v9, &v9[3 * v14], (unint64_t *)a2 - 3);
            v16 = 3 * v14;
            v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__int128 *)(v9 + 3), v17, (unint64_t *)a2 - 6);
            v18 = (__int128 *)(v9 + 6);
            v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(v18, v19, (unint64_t *)a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__int128 *)v17, v15, v19);
            v35 = *(_QWORD *)(a1 + 16);
            v32 = *(_OWORD *)a1;
            v20 = *(_OWORD *)v15;
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v15 + 4);
            *(_OWORD *)a1 = v20;
            *((_DWORD *)v15 + 4) = v35;
            *(_OWORD *)v15 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_QWORD *)(a1 - 24) >= *(_QWORD *)a1)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>((unint64_t *)a1, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>((uint64_t *)a1, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, (uint64_t)v21);
          v9 = (unint64_t *)(v21 + 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((uint64_t)(v21 + 3), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v21 + 3);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((uint64_t)v9, (uint64_t)a2);
        }
        else if (v9 != (unint64_t *)a2)
        {
          v27 = (__int128 *)(v9 + 3);
          while (v27 != a2)
          {
            v28 = (uint64_t)v27;
            v29 = *(_QWORD *)(a1 + 24);
            if (v29 < *(_QWORD *)a1)
            {
              v34 = *(_OWORD *)(a1 + 32);
              v30 = v28;
              do
              {
                *(_OWORD *)v30 = *(_OWORD *)(v30 - 24);
                *(_DWORD *)(v30 + 16) = *(_DWORD *)(v30 - 8);
                v31 = *(_QWORD *)(v30 - 48);
                v30 -= 24;
              }
              while (v29 < v31);
              *(_QWORD *)v30 = v29;
              *(_DWORD *)(v30 + 16) = DWORD2(v34);
              *(_QWORD *)(v30 + 8) = v34;
            }
            v27 = (__int128 *)(v28 + 24);
            a1 = v28;
          }
        }
        return;
    }
  }
}

  v9 = (unint64_t *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *(a2 - 3);
        v24 = a2 - 3;
        if (v25 < *v9)
        {
          v36 = v9[2];
          v33 = *(_OWORD *)v9;
          v26 = *(_OWORD *)v24;
          v9[2] = v24[2];
          *(_OWORD *)v9 = v26;
          *(_OWORD *)v24 = v33;
          v24[2] = v36;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v9, v9 + 3, a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)v9, v9 + 3, v9 + 6, (uint64_t)(a2 - 3));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__n128 *)v9, v9 + 3, v9 + 6, (__n128 *)(v9 + 9), (__n128 *)(a2 - 3));
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,TRangeValue<Pointer64,unsigned long long> *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)&v9[3 * v14], v9, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v9, &v9[3 * v14], a2 - 3);
            v16 = 3 * v14;
            v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)(v9 + 3), v17, a2 - 6);
            v18 = (__int128 *)(v9 + 6);
            v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(v18, v19, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)v17, v15, v19);
            v35 = *(_QWORD *)(a1 + 16);
            v32 = *(_OWORD *)a1;
            v20 = *(_OWORD *)v15;
            *(_QWORD *)(a1 + 16) = v15[2];
            *(_OWORD *)a1 = v20;
            v15[2] = v35;
            *(_OWORD *)v15 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_QWORD *)(a1 - 24) >= *(_QWORD *)a1)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>((unint64_t *)a1, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>((uint64_t *)a1, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *>(a1, (uint64_t)v21);
          v9 = (unint64_t *)(v21 + 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *>((uint64_t)(v21 + 3), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v21 + 3);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unint64_t *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)v9, (uint64_t)a2);
        }
        else if (v9 != a2)
        {
          v27 = v9 + 3;
          while (v27 != a2)
          {
            v28 = (uint64_t)v27;
            v29 = *(_QWORD *)(a1 + 24);
            if (v29 < *(_QWORD *)a1)
            {
              v34 = *(_OWORD *)(a1 + 32);
              v30 = v28;
              do
              {
                *(_OWORD *)v30 = *(_OWORD *)(v30 - 24);
                *(_QWORD *)(v30 + 16) = *(_QWORD *)(v30 - 8);
                v31 = *(_QWORD *)(v30 - 48);
                v30 -= 24;
              }
              while (v29 < v31);
              *(_QWORD *)v30 = v29;
              *(_OWORD *)(v30 + 8) = v34;
            }
            v27 = (unint64_t *)(v28 + 24);
            a1 = v28;
          }
        }
        return;
    }
  }
}

  v9 = (__int128 *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v26 = *((_QWORD *)a2 - 5);
        v25 = (char *)a2 - 40;
        if (v26 < *(_QWORD *)v9)
        {
          v41 = *((_QWORD *)v9 + 4);
          v36 = *v9;
          v39 = v9[1];
          v27 = *(_OWORD *)v25;
          v28 = *((_OWORD *)v25 + 1);
          *((_DWORD *)v9 + 8) = *((_DWORD *)v25 + 8);
          *v9 = v27;
          v9[1] = v28;
          *(_OWORD *)v25 = v36;
          *((_OWORD *)v25 + 1) = v39;
          *((_DWORD *)v25 + 8) = v41;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(v9, (unint64_t *)v9 + 5, (unint64_t *)a2 - 5);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((uint64_t)v9, (uint64_t)v9 + 40, (uint64_t)(v9 + 5), (uint64_t)a2 - 40);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((uint64_t)v9, (uint64_t)v9 + 40, (uint64_t)(v9 + 5), (uint64_t)v9 + 120, (uint64_t)a2 - 40);
        return;
      default:
        if (v12 > 959)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>((uint64_t)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (__int128 *)((char *)v9 + 40 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(v15, (unint64_t *)v9, (unint64_t *)a2 - 5);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(v9, (unint64_t *)v15, (unint64_t *)a2 - 5);
            v16 = 5 * v14;
            v17 = (unint64_t *)v9 + 5 * v14 - 5;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((__int128 *)((char *)v9 + 40), v17, (unint64_t *)a2 - 10);
            v18 = v9 + 5;
            v19 = (unint64_t *)v9 + v16 + 5;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(v18, v19, (unint64_t *)a2 - 15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((__int128 *)v17, (unint64_t *)v15, v19);
            v40 = *(_QWORD *)(a1 + 32);
            v35 = *(_OWORD *)a1;
            v38 = *(_OWORD *)(a1 + 16);
            v20 = *v15;
            v21 = v15[1];
            *(_DWORD *)(a1 + 32) = *((_DWORD *)v15 + 8);
            *(_OWORD *)a1 = v20;
            *(_OWORD *)(a1 + 16) = v21;
            *((_DWORD *)v15 + 8) = v40;
            *v15 = v35;
            v15[1] = v38;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_QWORD *)(a1 - 40) >= *(_QWORD *)a1)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>((uint64_t *)a1, a2);
            goto LABEL_16;
          }
LABEL_11:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>((uint64_t *)a1, a2);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, (uint64_t)v22);
          v9 = (__int128 *)(v22 + 5);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((uint64_t)(v22 + 5), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v24)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,false>(a1, v22, a3, -v11, a5 & 1);
            v9 = (__int128 *)(v22 + 5);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((uint64_t)v9, (uint64_t)a2);
        }
        else if (v9 != a2)
        {
          v29 = (__int128 *)((char *)v9 + 40);
          while (v29 != a2)
          {
            v30 = (uint64_t)v29;
            v31 = *(_QWORD *)(a1 + 40);
            if (v31 < *(_QWORD *)a1)
            {
              *(_OWORD *)v37 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)&v37[16] = *(_OWORD *)(a1 + 64);
              v32 = v30;
              do
              {
                v33 = *(_OWORD *)(v32 - 24);
                *(_OWORD *)v32 = *(_OWORD *)(v32 - 40);
                *(_OWORD *)(v32 + 16) = v33;
                *(_DWORD *)(v32 + 32) = *(_DWORD *)(v32 - 8);
                v34 = *(_QWORD *)(v32 - 80);
                v32 -= 40;
              }
              while (v31 < v34);
              *(_QWORD *)v32 = v31;
              *(_OWORD *)(v32 + 20) = *(_OWORD *)&v37[12];
              *(_OWORD *)(v32 + 8) = *(_OWORD *)v37;
            }
            v29 = (__int128 *)(v30 + 40);
            a1 = v30;
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v50 = *((_QWORD *)a2 - 2);
        v51 = *(_QWORD *)a1;
        if (*(_QWORD *)(v50 + 24) < *(_QWORD *)(*(_QWORD *)a1 + 24))
        {
          *(_QWORD *)a1 = v50;
          *((_QWORD *)a2 - 2) = v51;
          v52 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v52;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2);
        return;
      case 5:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6);
        v53 = *((_QWORD *)a2 - 2);
        v54 = *((_QWORD *)a1 + 6);
        if (*(_QWORD *)(v53 + 24) < *(_QWORD *)(v54 + 24))
        {
          *((_QWORD *)a1 + 6) = v53;
          *((_QWORD *)a2 - 2) = v54;
          v55 = *((_QWORD *)a1 + 7);
          *((_QWORD *)a1 + 7) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v55;
          v56 = *((_QWORD *)a1 + 6);
          v57 = *(_QWORD *)(v56 + 24);
          v58 = *((_QWORD *)a1 + 4);
          if (v57 < *(_QWORD *)(v58 + 24))
          {
            v59 = *((_QWORD *)a1 + 5);
            v60 = *((_QWORD *)a1 + 7);
            *((_QWORD *)a1 + 4) = v56;
            *((_QWORD *)a1 + 5) = v60;
            *((_QWORD *)a1 + 6) = v58;
            *((_QWORD *)a1 + 7) = v59;
            v61 = *((_QWORD *)a1 + 2);
            if (v57 < *(_QWORD *)(v61 + 24))
            {
              v62 = *((_QWORD *)a1 + 3);
              *((_QWORD *)a1 + 2) = v56;
              *((_QWORD *)a1 + 3) = v60;
              *((_QWORD *)a1 + 4) = v61;
              *((_QWORD *)a1 + 5) = v62;
              v63 = *(_QWORD *)a1;
              if (v57 < *(_QWORD *)(*(_QWORD *)a1 + 24))
              {
                v64 = *((_QWORD *)a1 + 1);
                *(_QWORD *)a1 = v56;
                *((_QWORD *)a1 + 1) = v60;
                *((_QWORD *)a1 + 2) = v63;
                *((_QWORD *)a1 + 3) = v64;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v65 = a1 + 1;
              if (a1 + 1 != a2)
              {
                v66 = 0;
                v67 = a1;
                do
                {
                  v68 = v65;
                  v69 = *((_QWORD *)v67 + 2);
                  if (*(_QWORD *)(v69 + 24) < *(_QWORD *)(*(_QWORD *)v67 + 24))
                  {
                    v70 = *((_QWORD *)v67 + 3);
                    *(_QWORD *)&v116 = v69;
                    *((_QWORD *)&v116 + 1) = v70;
                    *v68 = 0;
                    v68[1] = 0;
                    v71 = v66;
                    while (1)
                    {
                      std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)a1 + v71 + 16, (__int128 *)((char *)a1 + v71));
                      if (!v71)
                        break;
                      v72 = *(_QWORD *)(*(_QWORD *)((char *)a1 + v71 - 16) + 24);
                      v71 -= 16;
                      if (*(_QWORD *)(v116 + 24) >= v72)
                      {
                        v73 = (uint64_t)a1 + v71 + 16;
                        goto LABEL_83;
                      }
                    }
                    v73 = (uint64_t)a1;
LABEL_83:
                    std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v73, &v116);
                    v74 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                    if (*((_QWORD *)&v116 + 1))
                    {
                      v75 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                  }
                  v65 = v68 + 2;
                  v66 += 16;
                  v67 = (__int128 *)v68;
                }
                while (v68 + 2 != (_QWORD *)a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v108 = a1 + 1;
            while (v108 != a2)
            {
              v109 = v108;
              if (*(_QWORD *)(*((_QWORD *)a1 + 2) + 24) < *(_QWORD *)(*(_QWORD *)a1 + 24))
              {
                v110 = *((_QWORD *)a1 + 3);
                *(_QWORD *)&v116 = *((_QWORD *)a1 + 2);
                *((_QWORD *)&v116 + 1) = v110;
                *(_QWORD *)v108 = 0;
                *((_QWORD *)v108 + 1) = 0;
                do
                {
                  std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(a1 + 1), a1);
                  v111 = *((_QWORD *)a1-- - 2);
                }
                while (*(_QWORD *)(v116 + 24) < *(_QWORD *)(v111 + 24));
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(a1 + 1), &v116);
                v112 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                if (*((_QWORD *)&v116 + 1))
                {
                  v113 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                  do
                    v114 = __ldaxr(v113);
                  while (__stlxr(v114 - 1, v113));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
              }
              v108 = v109 + 1;
              a1 = v109;
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v77 = (unint64_t)(v10 - 2) >> 1;
            v78 = v77;
            do
            {
              v79 = v78;
              if (v77 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = &a1[v80];
                if (2 * v79 + 2 >= v10)
                {
                  v82 = *(_QWORD *)v81;
                }
                else
                {
                  v82 = *(_QWORD *)v81;
                  if (*(_QWORD *)(*(_QWORD *)v81 + 24) < *(_QWORD *)(*((_QWORD *)v81 + 2) + 24))
                  {
                    v82 = *((_QWORD *)v81++ + 2);
                    v80 = 2 * v79 + 2;
                  }
                }
                v83 = &a1[v79];
                v84 = *(_QWORD *)v83;
                if (*(_QWORD *)(v82 + 24) >= *(_QWORD *)(*(_QWORD *)v83 + 24))
                {
                  *(_QWORD *)&v116 = *(_QWORD *)v83;
                  *((_QWORD *)&v116 + 1) = *((_QWORD *)&a1[v79] + 1);
                  *(_QWORD *)v83 = 0;
                  *((_QWORD *)v83 + 1) = 0;
                  do
                  {
                    v85 = (uint64_t)v81;
                    std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v83, v81);
                    if (v77 < v80)
                      break;
                    v81 = &a1[(2 * v80) | 1];
                    if (2 * v80 + 2 >= v10)
                    {
                      v86 = *(_QWORD *)v81;
                      v80 = (2 * v80) | 1;
                    }
                    else
                    {
                      v86 = *(_QWORD *)v81;
                      if (*(_QWORD *)(*(_QWORD *)v81 + 24) >= *(_QWORD *)(*((_QWORD *)v81 + 2) + 24))
                      {
                        v80 = (2 * v80) | 1;
                      }
                      else
                      {
                        v86 = *((_QWORD *)v81++ + 2);
                        v80 = 2 * v80 + 2;
                      }
                    }
                    v83 = (__int128 *)v85;
                  }
                  while (*(_QWORD *)(v86 + 24) >= *(_QWORD *)(v84 + 24));
                  std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v85, &v116);
                  v87 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                  if (*((_QWORD *)&v116 + 1))
                  {
                    v88 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                }
              }
              v78 = v79 - 1;
            }
            while (v79);
            v90 = (unint64_t)v9 >> 4;
            do
            {
              v91 = 0;
              v115 = *a1;
              *(_QWORD *)a1 = 0;
              *((_QWORD *)a1 + 1) = 0;
              v92 = (uint64_t)a1;
              do
              {
                v93 = (__int128 *)(v92 + 16 * v91 + 16);
                v94 = (2 * v91) | 1;
                v95 = 2 * v91 + 2;
                if (v95 < v90 && *(_QWORD *)(*(_QWORD *)v93 + 24) < *(_QWORD *)(*((_QWORD *)v93 + 2) + 24))
                {
                  ++v93;
                  v94 = v95;
                }
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v92, v93);
                v92 = (uint64_t)v93;
                v91 = v94;
              }
              while (v94 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
              if (v93 == --a2)
              {
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v93, &v115);
              }
              else
              {
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v93, a2);
                std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)a2, &v115);
                v96 = (char *)v93 - (char *)a1 + 16;
                if (v96 >= 17)
                {
                  v97 = (((unint64_t)v96 >> 4) - 2) >> 1;
                  v98 = &a1[v97];
                  v99 = *(_QWORD *)v93;
                  if (*(_QWORD *)(*(_QWORD *)v98 + 24) < *(_QWORD *)(*(_QWORD *)v93 + 24))
                  {
                    v116 = *v93;
                    *(_QWORD *)v93 = 0;
                    *((_QWORD *)v93 + 1) = 0;
                    do
                    {
                      v100 = (uint64_t)v98;
                      std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v93, v98);
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = &a1[v97];
                      v93 = (__int128 *)v100;
                    }
                    while (*(_QWORD *)(*(_QWORD *)v98 + 24) < *(_QWORD *)(v99 + 24));
                    std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v100, &v116);
                    v101 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                    if (*((_QWORD *)&v116 + 1))
                    {
                      v102 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                      do
                        v103 = __ldaxr(v102);
                      while (__stlxr(v103 - 1, v102));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                      }
                    }
                  }
                }
              }
              v104 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
              if (*((_QWORD *)&v115 + 1))
              {
                v105 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
            }
            while (v90-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(v12, a1, (_QWORD *)a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, v12, (_QWORD *)a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>((_QWORD *)a1 + 2, (_QWORD *)v12 - 2, (_QWORD *)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>((_QWORD *)a1 + 4, &a1[v11 + 1], (_QWORD *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>((_QWORD *)v12 - 2, v12, &a1[v11 + 1]);
          v13 = *a1;
          *a1 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(*((_QWORD *)a1 - 2) + 24) >= *(_QWORD *)(v14 + 24))
        {
          v35 = *((_QWORD *)a1 + 1);
          *(_QWORD *)&v116 = *(_QWORD *)a1;
          *((_QWORD *)&v116 + 1) = v35;
          *(_QWORD *)a1 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v36 = *(_QWORD *)(v14 + 24);
          if (v36 >= *(_QWORD *)(*((_QWORD *)a2 - 2) + 24))
          {
            v38 = a1 + 1;
            do
            {
              v8 = v38;
              if (v38 >= a2)
                break;
              ++v38;
            }
            while (v36 >= *(_QWORD *)(*(_QWORD *)v8 + 24));
          }
          else
          {
            v8 = a1;
            do
              v37 = *((_QWORD *)v8++ + 2);
            while (v36 >= *(_QWORD *)(v37 + 24));
          }
          v39 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
              v40 = *((_QWORD *)v39-- - 2);
            while (v36 < *(_QWORD *)(v40 + 24));
          }
          if (v8 < v39)
          {
            v41 = *(_QWORD *)v8;
            v42 = *(_QWORD *)v39;
            do
            {
              *(_QWORD *)v8 = v42;
              *(_QWORD *)v39 = v41;
              v43 = *((_QWORD *)v8 + 1);
              *((_QWORD *)v8 + 1) = *((_QWORD *)v39 + 1);
              *((_QWORD *)v39 + 1) = v43;
              v44 = *(_QWORD *)(v116 + 24);
              do
              {
                v45 = *((_QWORD *)v8++ + 2);
                v41 = v45;
              }
              while (v44 >= *(_QWORD *)(v45 + 24));
              do
              {
                v46 = *((_QWORD *)v39-- - 2);
                v42 = v46;
              }
              while (v44 < *(_QWORD *)(v46 + 24));
            }
            while (v8 < v39);
          }
          if (v8 - 1 != a1)
            std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)a1, v8 - 1);
          std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(v8 - 1), &v116);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
          if (*((_QWORD *)&v116 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          a4 = 0;
          continue;
        }
        v15 = 0;
        v16 = *((_QWORD *)a1 + 1);
        *(_QWORD *)&v116 = *(_QWORD *)a1;
        *((_QWORD *)&v116 + 1) = v16;
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        v17 = *(_QWORD *)(v14 + 24);
        do
          v18 = *(_QWORD *)&a1[++v15];
        while (*(_QWORD *)(v18 + 24) < v17);
        v19 = &a1[v15];
        v20 = a2;
        if (v15 == 1)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *((_QWORD *)v20-- - 2);
          }
          while (*(_QWORD *)(v22 + 24) >= v17);
        }
        else
        {
          do
            v21 = *((_QWORD *)v20-- - 2);
          while (*(_QWORD *)(v21 + 24) >= v17);
        }
        if (v19 >= v20)
        {
          v30 = (uint64_t)(v19 - 1);
        }
        else
        {
          v23 = *(_QWORD *)v20;
          v24 = &a1[v15];
          v25 = v20;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v18;
            v26 = *((_QWORD *)v24 + 1);
            *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
            *((_QWORD *)v25 + 1) = v26;
            v27 = *(_QWORD *)(v116 + 24);
            do
            {
              v28 = *((_QWORD *)v24++ + 2);
              v18 = v28;
            }
            while (*(_QWORD *)(v28 + 24) < v27);
            do
            {
              v29 = *((_QWORD *)v25-- - 2);
              v23 = v29;
            }
            while (*(_QWORD *)(v29 + 24) >= v27);
          }
          while (v24 < v25);
          v30 = (uint64_t)(v24 - 1);
        }
        if ((__int128 *)v30 != a1)
          std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v30);
        std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v30, &v116);
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
        if (*((_QWORD *)&v116 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v19 < v20)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *,false>(a1, v30, a3, a4 & 1);
          a4 = 0;
          v8 = (__int128 *)(v30 + 16);
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>((char *)a1, (char *)v30);
        v8 = (__int128 *)(v30 + 16);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>((char *)(v30 + 16), (char *)a2))
        {
          if (v34)
            continue;
          goto LABEL_36;
        }
        a2 = (__int128 *)v30;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1))
          v24 = (const char *)*(a2 - 1);
        else
          v24 = (const char *)*(a2 - 2);
        if (v9[3])
          v25 = (const char *)v9[3];
        else
          v25 = (const char *)v9[2];
        v26 = strncmp(v24, v25, 0x10uLL);
        v28 = *(a2 - 4);
        v27 = a2 - 4;
        v29 = v28 < *v9;
        if (v26)
          v29 = v26 < 0;
        if (v29)
        {
          v32 = *(_OWORD *)v9;
          v34 = *((_OWORD *)v9 + 1);
          v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 4, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 8, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v15 - 4, v15, &v9[4 * v14 + 4]);
            v31 = *(_OWORD *)v9;
            v33 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          if (*(v9 - 1))
            v17 = (const char *)*(v9 - 1);
          else
            v17 = (const char *)*(v9 - 2);
          if (v9[3])
            v18 = (const char *)v9[3];
          else
            v18 = (const char *)v9[2];
          v19 = strncmp(v17, v18, 0x10uLL);
          v20 = *(v9 - 4) < *v9;
          if (v19)
            v20 = v19 < 0;
          if (!v20)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, a2);
            goto LABEL_24;
          }
LABEL_19:
          v21 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>((__int128 *)v9, a2);
          if ((v22 & 1) == 0)
            goto LABEL_22;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v21);
          v9 = v21 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v21 + 4, a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 4;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,CSCppSegmentRange*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = strncmp(a2 - 16, v9 + 16, 0x10uLL);
        v24 = *((_QWORD *)a2 - 4);
        v23 = a2 - 32;
        v25 = v24 < *(_QWORD *)v9;
        if (v22)
          v25 = v22 < 0;
        if (v25)
        {
          v28 = *(_OWORD *)v9;
          v30 = *((_OWORD *)v9 + 1);
          v26 = *((_OWORD *)v23 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v23;
          *((_OWORD *)v9 + 1) = v26;
          *(_OWORD *)v23 = v28;
          *((_OWORD *)v23 + 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9, v9 + 32, a2 - 32);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((__int128 *)v9, (__int128 *)v9 + 2, (__int128 *)v9 + 4, a2 - 32);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((uint64_t)v9, (uint64_t)(v9 + 32), (uint64_t)(v9 + 64), (__int128 *)v9 + 6, a2 - 32);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[32 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(&v9[32 * (v13 >> 1)], v9, a2 - 32);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9, &v9[32 * (v13 >> 1)], a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9 + 32, v15 - 32, a2 - 64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9 + 64, &v9[32 * v14 + 32], a2 - 96);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v15 - 32, v15, &v9[32 * v14 + 32]);
            v27 = *(_OWORD *)v9;
            v29 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v27;
            *((_OWORD *)v15 + 1) = v29;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v17 = strncmp(v9 - 16, v9 + 16, 0x10uLL);
          v18 = *((_QWORD *)v9 - 4) < *(_QWORD *)v9;
          if (v17)
            v18 = v17 < 0;
          if (!v18)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, a2);
            goto LABEL_18;
          }
LABEL_13:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, (uint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_16;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((uint64_t)v9, (uint64_t)v19);
          v9 = v19 + 32;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((uint64_t)(v19 + 32), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 32;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,MMapSegment*>((uint64_t)v9, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = strncmp(a2 - 16, v9 + 16, 0x10uLL);
        v24 = *((_QWORD *)a2 - 4);
        v23 = a2 - 32;
        v25 = v24 < *(_QWORD *)v9;
        if (v22)
          v25 = v22 < 0;
        if (v25)
        {
          v28 = *(_OWORD *)v9;
          v30 = *((_OWORD *)v9 + 1);
          v26 = *((_OWORD *)v23 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v23;
          *((_OWORD *)v9 + 1) = v26;
          *(_OWORD *)v23 = v28;
          *((_OWORD *)v23 + 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9, v9 + 32, a2 - 32);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((__int128 *)v9, (__int128 *)v9 + 2, (__int128 *)v9 + 4, a2 - 32);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((uint64_t)v9, (uint64_t)(v9 + 32), (uint64_t)(v9 + 64), (__int128 *)v9 + 6, a2 - 32);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[32 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(&v9[32 * (v13 >> 1)], v9, a2 - 32);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9, &v9[32 * (v13 >> 1)], a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9 + 32, v15 - 32, a2 - 64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v9 + 64, &v9[32 * v14 + 32], a2 - 96);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(v15 - 32, v15, &v9[32 * v14 + 32]);
            v27 = *(_OWORD *)v9;
            v29 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v27;
            *((_OWORD *)v15 + 1) = v29;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v17 = strncmp(v9 - 16, v9 + 16, 0x10uLL);
          v18 = *((_QWORD *)v9 - 4) < *(_QWORD *)v9;
          if (v17)
            v18 = v17 < 0;
          if (!v18)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, a2);
            goto LABEL_18;
          }
LABEL_13:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, (uint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_16;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*>((uint64_t)v9, (uint64_t)v19);
          v9 = v19 + 32;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*>((uint64_t)(v19 + 32), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 32;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,MMapSegment*>((uint64_t)v9, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1))
          v24 = (const char *)*(a2 - 1);
        else
          v24 = (const char *)*(a2 - 2);
        if (v9[3])
          v25 = (const char *)v9[3];
        else
          v25 = (const char *)v9[2];
        v26 = strncmp(v24, v25, 0x10uLL);
        v28 = *(a2 - 4);
        v27 = a2 - 4;
        v29 = v28 < *v9;
        if (v26)
          v29 = v26 < 0;
        if (v29)
        {
          v32 = *(_OWORD *)v9;
          v34 = *((_OWORD *)v9 + 1);
          v30 = *((_OWORD *)v27 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v27;
          *((_OWORD *)v9 + 1) = v30;
          *(_OWORD *)v27 = v32;
          *((_OWORD *)v27 + 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 4, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v9 + 8, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(v15 - 4, v15, &v9[4 * v14 + 4]);
            v31 = *(_OWORD *)v9;
            v33 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v31;
            *((_OWORD *)v15 + 1) = v33;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          if (*(v9 - 1))
            v17 = (const char *)*(v9 - 1);
          else
            v17 = (const char *)*(v9 - 2);
          if (v9[3])
            v18 = (const char *)v9[3];
          else
            v18 = (const char *)v9[2];
          v19 = strncmp(v17, v18, 0x10uLL);
          v20 = *(v9 - 4) < *v9;
          if (v19)
            v20 = v19 < 0;
          if (!v20)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(v9, a2);
            goto LABEL_24;
          }
LABEL_19:
          v21 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>((__int128 *)v9, a2);
          if ((v22 & 1) == 0)
            goto LABEL_22;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*>(v9, v21);
          v9 = v21 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*>(v21 + 4, a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 4;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,CSCppSegmentRange*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v44 = *(_QWORD *)(a2 - 40);
        v43 = a2 - 40;
        if (v44 < *(_QWORD *)v8)
        {
          v141 = *(_QWORD *)(v8 + 32);
          v122 = *(_OWORD *)v8;
          v131 = *(_OWORD *)(v8 + 16);
          v45 = *(_OWORD *)v43;
          v46 = *(_OWORD *)(v43 + 16);
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(v43 + 32);
          *(_OWORD *)v8 = v45;
          *(_OWORD *)(v8 + 16) = v46;
          *(_QWORD *)(v43 + 32) = v141;
          *(_OWORD *)v43 = v122;
          *(_OWORD *)(v43 + 16) = v131;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)v8, (unint64_t *)(v8 + 40), (unint64_t *)(a2 - 40));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v8, v8 + 40, v8 + 80, a2 - 40);
        return;
      case 5:
        v47 = (__int128 *)(v8 + 40);
        v48 = (__int128 *)(v8 + 80);
        v49 = (__int128 *)(v8 + 120);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v8, v8 + 40, v8 + 80, v8 + 120);
        v51 = *(_QWORD *)(a2 - 40);
        v50 = a2 - 40;
        if (v51 < *(_QWORD *)(v8 + 120))
        {
          v52 = *v49;
          v132 = *(_OWORD *)(v8 + 136);
          v53 = *(_QWORD *)(v8 + 152);
          v55 = *(_OWORD *)v50;
          v54 = *(_OWORD *)(v50 + 16);
          *(_QWORD *)(v8 + 152) = *(_QWORD *)(v50 + 32);
          *v49 = v55;
          *(_OWORD *)(v8 + 136) = v54;
          *(_QWORD *)(v50 + 32) = v53;
          *(_OWORD *)v50 = v52;
          *(_OWORD *)(v50 + 16) = v132;
          if (*(_QWORD *)v49 < *(_QWORD *)v48)
          {
            v56 = *(_QWORD *)(v8 + 112);
            v58 = *v48;
            v57 = *(_OWORD *)(v8 + 96);
            v59 = *(_OWORD *)(v8 + 136);
            *v48 = *v49;
            *(_OWORD *)(v8 + 96) = v59;
            *(_QWORD *)(v8 + 112) = *(_QWORD *)(v8 + 152);
            *v49 = v58;
            *(_OWORD *)(v8 + 136) = v57;
            *(_QWORD *)(v8 + 152) = v56;
            if (*(_QWORD *)v48 < *(_QWORD *)v47)
            {
              v60 = *(_QWORD *)(v8 + 72);
              v62 = *v47;
              v61 = *(_OWORD *)(v8 + 56);
              v63 = *(_OWORD *)(v8 + 96);
              *v47 = *v48;
              *(_OWORD *)(v8 + 56) = v63;
              *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 112);
              *v48 = v62;
              *(_OWORD *)(v8 + 96) = v61;
              *(_QWORD *)(v8 + 112) = v60;
              if (*(_QWORD *)(v8 + 40) < *(_QWORD *)v8)
              {
                v142 = *(_QWORD *)(v8 + 32);
                v123 = *(_OWORD *)v8;
                v133 = *(_OWORD *)(v8 + 16);
                v64 = *(_OWORD *)(v8 + 56);
                *(_OWORD *)v8 = *v47;
                *(_OWORD *)(v8 + 16) = v64;
                *(_QWORD *)(v8 + 32) = *(_QWORD *)(v8 + 72);
                *v47 = v123;
                *(_OWORD *)(v8 + 56) = v133;
                *(_QWORD *)(v8 + 72) = v142;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 959)
        {
          v65 = v8 + 40;
          v67 = v8 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v8;
              do
              {
                v70 = v65;
                v71 = *(_QWORD *)(v69 + 40);
                if (v71 < *(_QWORD *)v69)
                {
                  v124 = *(_OWORD *)(v69 + 48);
                  v134 = *(_OWORD *)(v69 + 64);
                  v72 = v68;
                  while (1)
                  {
                    v73 = v8 + v72;
                    v74 = *(_OWORD *)(v8 + v72 + 16);
                    *(_OWORD *)(v73 + 40) = *(_OWORD *)(v8 + v72);
                    *(_OWORD *)(v73 + 56) = v74;
                    *(_QWORD *)(v73 + 72) = *(_QWORD *)(v8 + v72 + 32);
                    if (!v72)
                      break;
                    v72 -= 40;
                    if (v71 >= *(_QWORD *)(v73 - 40))
                    {
                      v75 = v8 + v72 + 40;
                      goto LABEL_75;
                    }
                  }
                  v75 = v8;
LABEL_75:
                  *(_QWORD *)v75 = v71;
                  *(_OWORD *)(v75 + 24) = v134;
                  *(_OWORD *)(v75 + 8) = v124;
                }
                v65 = v70 + 40;
                v68 += 40;
                v69 = v70;
              }
              while (v70 + 40 != a2);
            }
          }
          else if (!v67)
          {
            do
            {
              v109 = v65;
              v110 = *(_QWORD *)(a1 + 40);
              if (v110 < *(_QWORD *)a1)
              {
                v127 = *(_OWORD *)(a1 + 48);
                v137 = *(_OWORD *)(a1 + 64);
                do
                {
                  v111 = *(_OWORD *)(v65 - 24);
                  *(_OWORD *)v65 = *(_OWORD *)(v65 - 40);
                  *(_OWORD *)(v65 + 16) = v111;
                  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v65 - 8);
                  v112 = *(_QWORD *)(v65 - 80);
                  v65 -= 40;
                }
                while (v110 < v112);
                *(_QWORD *)v65 = v110;
                *(_OWORD *)(v65 + 24) = v137;
                *(_OWORD *)(v65 + 8) = v127;
              }
              v65 = v109 + 40;
              a1 = v109;
            }
            while (v109 + 40 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v76 = (unint64_t)(v10 - 2) >> 1;
            v77 = v76;
            do
            {
              v78 = v77;
              if (v76 >= v77)
              {
                v79 = (2 * v77) | 1;
                v80 = v8 + 40 * v79;
                if (2 * v78 + 2 >= v10)
                {
                  v81 = *(_QWORD *)v80;
                }
                else
                {
                  v81 = *(_QWORD *)(v80 + 40);
                  v82 = *(_QWORD *)v80 >= v81;
                  if (*(_QWORD *)v80 > v81)
                    v81 = *(_QWORD *)v80;
                  if (!v82)
                  {
                    v80 += 40;
                    v79 = 2 * v78 + 2;
                  }
                }
                v83 = v8 + 40 * v78;
                v84 = *(_QWORD *)v83;
                if (v81 >= *(_QWORD *)v83)
                {
                  v125 = *(_OWORD *)(v83 + 8);
                  v135 = *(_OWORD *)(v83 + 24);
                  do
                  {
                    v85 = v83;
                    v83 = v80;
                    v86 = *(_OWORD *)v80;
                    v87 = *(_OWORD *)(v80 + 16);
                    *(_QWORD *)(v85 + 32) = *(_QWORD *)(v80 + 32);
                    *(_OWORD *)v85 = v86;
                    *(_OWORD *)(v85 + 16) = v87;
                    if (v76 < v79)
                      break;
                    v88 = (2 * v79) | 1;
                    v80 = v8 + 40 * v88;
                    v79 = 2 * v79 + 2;
                    if (v79 >= v10)
                    {
                      v89 = *(_QWORD *)v80;
                      v79 = v88;
                    }
                    else
                    {
                      v89 = *(_QWORD *)v80;
                      v90 = *(_QWORD *)(v80 + 40);
                      if (*(_QWORD *)v80 <= v90)
                        v89 = *(_QWORD *)(v80 + 40);
                      if (*(_QWORD *)v80 >= v90)
                        v79 = v88;
                      else
                        v80 += 40;
                    }
                  }
                  while (v89 >= v84);
                  *(_QWORD *)v83 = v84;
                  *(_OWORD *)(v83 + 24) = v135;
                  *(_OWORD *)(v83 + 8) = v125;
                }
              }
              v77 = v78 - 1;
            }
            while (v78);
            v91 = v9 / 0x28uLL;
            do
            {
              v92 = 0;
              v143 = *(_QWORD *)(v8 + 32);
              v126 = *(_OWORD *)v8;
              v136 = *(_OWORD *)(v8 + 16);
              v93 = v8;
              do
              {
                v94 = v93 + 40 * v92 + 40;
                v95 = (2 * v92) | 1;
                v96 = 2 * v92 + 2;
                if (v96 < v91 && *(_QWORD *)v94 < *(_QWORD *)(v94 + 40))
                {
                  v94 += 40;
                  v95 = v96;
                }
                v97 = *(_OWORD *)v94;
                v98 = *(_OWORD *)(v94 + 16);
                *(_QWORD *)(v93 + 32) = *(_QWORD *)(v94 + 32);
                *(_OWORD *)v93 = v97;
                *(_OWORD *)(v93 + 16) = v98;
                v93 = v94;
                v92 = v95;
              }
              while (v95 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
              a2 -= 40;
              if (v94 == a2)
              {
                *(_QWORD *)(v94 + 32) = v143;
                *(_OWORD *)v94 = v126;
                *(_OWORD *)(v94 + 16) = v136;
              }
              else
              {
                v99 = *(_OWORD *)a2;
                v100 = *(_OWORD *)(a2 + 16);
                *(_QWORD *)(v94 + 32) = *(_QWORD *)(a2 + 32);
                *(_OWORD *)v94 = v99;
                *(_OWORD *)(v94 + 16) = v100;
                *(_QWORD *)(a2 + 32) = v143;
                *(_OWORD *)a2 = v126;
                *(_OWORD *)(a2 + 16) = v136;
                v101 = v94 - v8 + 40;
                if (v101 >= 41)
                {
                  v102 = (v101 / 0x28uLL - 2) >> 1;
                  v103 = v8 + 40 * v102;
                  v104 = *(_QWORD *)v94;
                  if (*(_QWORD *)v103 < *(_QWORD *)v94)
                  {
                    v115 = *(_OWORD *)(v94 + 8);
                    v118 = *(_OWORD *)(v94 + 24);
                    do
                    {
                      v105 = v94;
                      v94 = v103;
                      v106 = *(_OWORD *)v103;
                      v107 = *(_OWORD *)(v103 + 16);
                      *(_QWORD *)(v105 + 32) = *(_QWORD *)(v103 + 32);
                      *(_OWORD *)v105 = v106;
                      *(_OWORD *)(v105 + 16) = v107;
                      if (!v102)
                        break;
                      v102 = (v102 - 1) >> 1;
                      v103 = v8 + 40 * v102;
                    }
                    while (*(_QWORD *)v103 < v104);
                    *(_QWORD *)v94 = v104;
                    *(_OWORD *)(v94 + 24) = v118;
                    *(_OWORD *)(v94 + 8) = v115;
                  }
                }
              }
            }
            while (v91-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 40 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)v12, (unint64_t *)a1, (unint64_t *)(a2 - 40));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)a1, (unint64_t *)v12, (unint64_t *)(a2 - 40));
          v13 = 5 * v11;
          v14 = (unint64_t *)(a1 + 40 * v11 - 40);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)(a1 + 40), v14, (unint64_t *)(a2 - 80));
          v15 = (unint64_t *)(a1 + 40 + 8 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)(a1 + 80), v15, (unint64_t *)(a2 - 120));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)v14, (unint64_t *)v12, v15);
          v138 = *(_QWORD *)(a1 + 32);
          v119 = *(_OWORD *)a1;
          v128 = *(_OWORD *)(a1 + 16);
          v16 = *(_OWORD *)v12;
          v17 = *(_OWORD *)(v12 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v12 + 32);
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(_QWORD *)(v12 + 32) = v138;
          *(_OWORD *)v12 = v119;
          *(_OWORD *)(v12 + 16) = v128;
        }
        --a3;
        v18 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 40) >= v18)
        {
          v114 = *(_OWORD *)(a1 + 8);
          v117 = *(_OWORD *)(a1 + 24);
          if (v18 >= *(_QWORD *)(a2 - 40))
          {
            v34 = a1 + 40;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v34 += 40;
            }
            while (v18 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v33 = *(_QWORD *)(v8 + 40);
              v8 += 40;
            }
            while (v18 >= v33);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v35 = a2;
            do
            {
              v36 = *(_QWORD *)(v35 - 40);
              v35 -= 40;
            }
            while (v18 < v36);
          }
          while (v8 < v35)
          {
            v140 = *(_QWORD *)(v8 + 32);
            v121 = *(_OWORD *)v8;
            v130 = *(_OWORD *)(v8 + 16);
            v37 = *(_OWORD *)v35;
            v38 = *(_OWORD *)(v35 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v35 + 32);
            *(_OWORD *)v8 = v37;
            *(_OWORD *)(v8 + 16) = v38;
            *(_QWORD *)(v35 + 32) = v140;
            *(_OWORD *)v35 = v121;
            *(_OWORD *)(v35 + 16) = v130;
            do
            {
              v39 = *(_QWORD *)(v8 + 40);
              v8 += 40;
            }
            while (v18 >= v39);
            do
            {
              v40 = *(_QWORD *)(v35 - 40);
              v35 -= 40;
            }
            while (v18 < v40);
          }
          if (v8 - 40 != a1)
          {
            v41 = *(_OWORD *)(v8 - 40);
            v42 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v41;
            *(_OWORD *)(a1 + 16) = v42;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 40) = v18;
          *(_OWORD *)(v8 - 32) = v114;
          *(_OWORD *)(v8 - 16) = v117;
          continue;
        }
        v19 = 0;
        v113 = *(_OWORD *)(a1 + 8);
        v116 = *(_OWORD *)(a1 + 24);
        do
        {
          v20 = *(_QWORD *)(a1 + v19 + 40);
          v19 += 40;
        }
        while (v20 < v18);
        v21 = a1 + v19;
        v22 = a2;
        if (v19 == 40)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *(_QWORD *)(v22 - 40);
            v22 -= 40;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            v23 = *(_QWORD *)(v22 - 40);
            v22 -= 40;
          }
          while (v23 >= v18);
        }
        v8 = a1 + v19;
        if (v21 < v22)
        {
          v25 = v22;
          do
          {
            v139 = *(_QWORD *)(v8 + 32);
            v120 = *(_OWORD *)v8;
            v129 = *(_OWORD *)(v8 + 16);
            v26 = *(_OWORD *)v25;
            v27 = *(_OWORD *)(v25 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v25 + 32);
            *(_OWORD *)v8 = v26;
            *(_OWORD *)(v8 + 16) = v27;
            *(_QWORD *)(v25 + 32) = v139;
            *(_OWORD *)v25 = v120;
            *(_OWORD *)(v25 + 16) = v129;
            do
            {
              v28 = *(_QWORD *)(v8 + 40);
              v8 += 40;
            }
            while (v28 < v18);
            do
            {
              v29 = *(_QWORD *)(v25 - 40);
              v25 -= 40;
            }
            while (v29 >= v18);
          }
          while (v8 < v25);
        }
        if (v8 - 40 != a1)
        {
          v30 = *(_OWORD *)(v8 - 40);
          v31 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v30;
          *(_OWORD *)(a1 + 16) = v31;
        }
        *(_QWORD *)(v8 - 40) = v18;
        *(_OWORD *)(v8 - 32) = v113;
        *(_OWORD *)(v8 - 16) = v116;
        if (v21 < v22)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>(a1, v8 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(a1, v8 - 40);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v8, a2))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 40;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = a2[-2].n128_u64[0];
        v35 = (__int128 *)&a2[-2];
        if (v36 < *(_QWORD *)v8)
        {
          v105 = *(_OWORD *)v8;
          v114 = *(_OWORD *)(v8 + 16);
          v37 = v35[1];
          *(_OWORD *)v8 = *v35;
          *(_OWORD *)(v8 + 16) = v37;
          *v35 = v105;
          v35[1] = v114;
        }
        return;
      case 3uLL:
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)v8, (unint64_t *)(v8 + 32), a2[-2].n128_u64);
        return;
      case 4uLL:
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(v8, (__n128 *)(v8 + 32), (__n128 *)(v8 + 64), a2 - 2);
        return;
      case 5uLL:
        v38 = (__int128 *)(v8 + 32);
        v39 = (__int128 *)(v8 + 64);
        v40 = (__int128 *)(v8 + 96);
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(v8, (__n128 *)(v8 + 32), (__n128 *)(v8 + 64), (__n128 *)(v8 + 96));
        v42 = a2[-2].n128_u64[0];
        v41 = a2 - 2;
        if (v42 < *(_QWORD *)(v8 + 96))
        {
          v43 = (__n128)*v40;
          v115 = *(__n128 *)(v8 + 112);
          v44 = v41[1];
          *v40 = (__int128)*v41;
          *(__n128 *)(v8 + 112) = v44;
          *v41 = v43;
          v41[1] = v115;
          if (*(_QWORD *)v40 < *(_QWORD *)v39)
          {
            v46 = *v39;
            v45 = *(_OWORD *)(v8 + 80);
            v47 = *(_OWORD *)(v8 + 112);
            *v39 = *v40;
            *(_OWORD *)(v8 + 80) = v47;
            *v40 = v46;
            *(_OWORD *)(v8 + 112) = v45;
            if (*(_QWORD *)v39 < *(_QWORD *)v38)
            {
              v49 = *v38;
              v48 = *(_OWORD *)(v8 + 48);
              v50 = *(_OWORD *)(v8 + 80);
              *v38 = *v39;
              *(_OWORD *)(v8 + 48) = v50;
              *v39 = v49;
              *(_OWORD *)(v8 + 80) = v48;
              if (*(_QWORD *)(v8 + 32) < *(_QWORD *)v8)
              {
                v106 = *(_OWORD *)v8;
                v116 = *(_OWORD *)(v8 + 16);
                v51 = *(_OWORD *)(v8 + 48);
                *(_OWORD *)v8 = *v38;
                *(_OWORD *)(v8 + 16) = v51;
                *v38 = v106;
                *(_OWORD *)(v8 + 48) = v116;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v52 = (__n128 *)(v8 + 32);
          v54 = (__n128 *)v8 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v8;
              do
              {
                v57 = v52;
                v58 = *(_QWORD *)(v56 + 32);
                if (v58 < *(_QWORD *)v56)
                {
                  v107 = *(_OWORD *)(v56 + 40);
                  v117 = *(_QWORD *)(v56 + 56);
                  v59 = v55;
                  while (1)
                  {
                    v60 = v8 + v59;
                    v61 = *(_OWORD *)(v8 + v59 + 16);
                    *(_OWORD *)(v60 + 32) = *(_OWORD *)(v8 + v59);
                    *(_OWORD *)(v60 + 48) = v61;
                    if (!v59)
                      break;
                    v59 -= 32;
                    if (v58 >= *(_QWORD *)(v60 - 32))
                    {
                      v62 = v8 + v59 + 32;
                      goto LABEL_75;
                    }
                  }
                  v62 = v8;
LABEL_75:
                  *(_QWORD *)v62 = v58;
                  *(_QWORD *)(v62 + 24) = v117;
                  *(_OWORD *)(v62 + 8) = v107;
                }
                v52 = v57 + 2;
                v55 += 32;
                v56 = (unint64_t)v57;
              }
              while (&v57[2] != a2);
            }
          }
          else if (!v54)
          {
            do
            {
              v92 = (uint64_t)v52;
              v93 = *(_QWORD *)(a1 + 32);
              if (v93 < *(_QWORD *)a1)
              {
                v110 = *(__n128 *)(a1 + 40);
                v120 = *(_QWORD *)(a1 + 56);
                do
                {
                  v94 = v52[-1];
                  *v52 = v52[-2];
                  v52[1] = v94;
                  v95 = v52[-4].n128_u64[0];
                  v52 -= 2;
                }
                while (v93 < v95);
                v52->n128_u64[0] = v93;
                v52[1].n128_u64[1] = v120;
                *(__n128 *)((char *)v52 + 8) = v110;
              }
              v52 = (__n128 *)(v92 + 32);
              a1 = v92;
            }
            while ((__n128 *)(v92 + 32) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v63 = (v10 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = v8 + 32 * v66;
                if (2 * v65 + 2 >= (uint64_t)v10)
                {
                  v68 = *(_QWORD *)v67;
                }
                else
                {
                  v68 = *(_QWORD *)(v67 + 32);
                  v69 = *(_QWORD *)v67 >= v68;
                  if (*(_QWORD *)v67 > v68)
                    v68 = *(_QWORD *)v67;
                  if (!v69)
                  {
                    v67 += 32;
                    v66 = 2 * v65 + 2;
                  }
                }
                v70 = v8 + 32 * v65;
                v71 = *(_QWORD *)v70;
                if (v68 >= *(_QWORD *)v70)
                {
                  v118 = *(_QWORD *)(v70 + 24);
                  v108 = *(_OWORD *)(v70 + 8);
                  do
                  {
                    v72 = (_OWORD *)v70;
                    v70 = v67;
                    v73 = *(_OWORD *)(v67 + 16);
                    *v72 = *(_OWORD *)v67;
                    v72[1] = v73;
                    if (v63 < v66)
                      break;
                    v74 = (2 * v66) | 1;
                    v67 = v8 + 32 * v74;
                    v66 = 2 * v66 + 2;
                    if (v66 >= (uint64_t)v10)
                    {
                      v75 = *(_QWORD *)v67;
                      v66 = v74;
                    }
                    else
                    {
                      v75 = *(_QWORD *)v67;
                      v76 = *(_QWORD *)(v67 + 32);
                      if (*(_QWORD *)v67 <= v76)
                        v75 = *(_QWORD *)(v67 + 32);
                      if (*(_QWORD *)v67 >= v76)
                        v66 = v74;
                      else
                        v67 += 32;
                    }
                  }
                  while (v75 >= v71);
                  *(_QWORD *)v70 = v71;
                  *(_QWORD *)(v70 + 24) = v118;
                  *(_OWORD *)(v70 + 8) = v108;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v77 = (unint64_t)v9 >> 5;
            do
            {
              v78 = 0;
              v109 = *(_OWORD *)v8;
              v119 = *(__n128 *)(v8 + 16);
              v79 = (_OWORD *)v8;
              do
              {
                v80 = (uint64_t)&v79[2 * v78 + 2];
                v81 = (2 * v78) | 1;
                v82 = 2 * v78 + 2;
                if (v82 < v77 && *(_QWORD *)v80 < *(_QWORD *)(v80 + 32))
                {
                  v80 += 32;
                  v81 = v82;
                }
                v83 = *(_OWORD *)(v80 + 16);
                *v79 = *(_OWORD *)v80;
                v79[1] = v83;
                v79 = (_OWORD *)v80;
                v78 = v81;
              }
              while (v81 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              a2 -= 2;
              if ((__n128 *)v80 == a2)
              {
                *(_OWORD *)v80 = v109;
                *(__n128 *)(v80 + 16) = v119;
              }
              else
              {
                v84 = a2[1];
                *(__n128 *)v80 = *a2;
                *(__n128 *)(v80 + 16) = v84;
                *a2 = (__n128)v109;
                a2[1] = v119;
                v85 = v80 - v8 + 32;
                if (v85 >= 33)
                {
                  v86 = (((unint64_t)v85 >> 5) - 2) >> 1;
                  v87 = (_OWORD *)(v8 + 32 * v86);
                  v88 = *(_QWORD *)v80;
                  if (*(_QWORD *)v87 < *(_QWORD *)v80)
                  {
                    v101 = *(_QWORD *)(v80 + 24);
                    v98 = *(_OWORD *)(v80 + 8);
                    do
                    {
                      v89 = (_OWORD *)v80;
                      v80 = (uint64_t)v87;
                      v90 = v87[1];
                      *v89 = *v87;
                      v89[1] = v90;
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = (_OWORD *)(v8 + 32 * v86);
                    }
                    while (*(_QWORD *)v87 < v88);
                    *(_QWORD *)v80 = v88;
                    *(_QWORD *)(v80 + 24) = v101;
                    *(_OWORD *)(v80 + 8) = v98;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 32 * (v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)(a1 + 32 * (v10 >> 1)), (unint64_t *)a1, a2[-2].n128_u64);
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)a1, (unint64_t *)(a1 + 32 * (v10 >> 1)), a2[-2].n128_u64);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)(a1 + 32), (unint64_t *)(v12 - 32), a2[-4].n128_u64);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v11), a2[-6].n128_u64);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)(v12 - 32), (unint64_t *)v12, (unint64_t *)(a1 + 32 + 32 * v11));
          v102 = *(_OWORD *)a1;
          v111 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)v12 = v102;
          *(_OWORD *)(v12 + 16) = v111;
        }
        --a3;
        v14 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 32) >= v14)
        {
          v100 = *(_QWORD *)(a1 + 24);
          v97 = *(_OWORD *)(a1 + 8);
          if (v14 >= a2[-2].n128_u64[0])
          {
            v28 = a1 + 32;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 32;
            }
            while (v14 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = *(_QWORD *)(v8 + 32);
              v8 += 32;
            }
            while (v14 >= v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
            {
              v30 = *((_QWORD *)v29 - 4);
              v29 -= 2;
            }
            while (v14 < v30);
          }
          while (v8 < (unint64_t)v29)
          {
            v104 = *(_OWORD *)v8;
            v113 = *(_OWORD *)(v8 + 16);
            v31 = v29[1];
            *(_OWORD *)v8 = *v29;
            *(_OWORD *)(v8 + 16) = v31;
            *v29 = v104;
            v29[1] = v113;
            do
            {
              v32 = *(_QWORD *)(v8 + 32);
              v8 += 32;
            }
            while (v14 >= v32);
            do
            {
              v33 = *((_QWORD *)v29 - 4);
              v29 -= 2;
            }
            while (v14 < v33);
          }
          if (v8 - 32 != a1)
          {
            v34 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 16) = v34;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v14;
          *(_QWORD *)(v8 - 8) = v100;
          *(_OWORD *)(v8 - 24) = v97;
          continue;
        }
        v15 = 0;
        v99 = *(_QWORD *)(a1 + 24);
        v96 = *(_OWORD *)(a1 + 8);
        do
        {
          v16 = *(_QWORD *)(a1 + v15 + 32);
          v15 += 32;
        }
        while (v16 < v14);
        v17 = a1 + v15;
        v18 = a2;
        if (v15 == 32)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = v18[-2].n128_u64[0];
            v18 -= 2;
          }
          while (v20 >= v14);
        }
        else
        {
          do
          {
            v19 = v18[-2].n128_u64[0];
            v18 -= 2;
          }
          while (v19 >= v14);
        }
        v8 = a1 + v15;
        if (v17 < (unint64_t)v18)
        {
          v21 = (__int128 *)v18;
          do
          {
            v103 = *(_OWORD *)v8;
            v112 = *(_OWORD *)(v8 + 16);
            v22 = v21[1];
            *(_OWORD *)v8 = *v21;
            *(_OWORD *)(v8 + 16) = v22;
            *v21 = v103;
            v21[1] = v112;
            do
            {
              v23 = *(_QWORD *)(v8 + 32);
              v8 += 32;
            }
            while (v23 < v14);
            do
            {
              v24 = *((_QWORD *)v21 - 4);
              v21 -= 2;
            }
            while (v24 >= v14);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 32 != a1)
        {
          v25 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 16) = v25;
        }
        *(_QWORD *)(v8 - 32) = v14;
        *(_QWORD *)(v8 - 8) = v99;
        *(_OWORD *)(v8 - 24) = v96;
        if (v17 < (unint64_t)v18)
        {
LABEL_29:
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(a1, v8 - 32);
        if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 32);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v197 = a2 - 14;
  v202 = a2;
  v195 = a2 - 42;
  v196 = a2 - 28;
  v6 = a1;
  while (2)
  {
    a1 = v6;
    v7 = v202;
    v8 = (uint64_t)v202 - v6;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v202 - v6) >> 5);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v64 = v202 - 14;
        if (*((_QWORD *)v202 - 28) < *(_QWORD *)a1)
        {
          v65 = (__int128 *)a1;
          goto LABEL_83;
        }
        return;
      case 3uLL:
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), v197);
        return;
      case 4uLL:
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448), v197);
        return;
      case 5uLL:
        v66 = (_QWORD *)(a1 + 448);
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448), (__int128 *)(a1 + 672));
        if (*((_QWORD *)v202 - 28) < *(_QWORD *)(a1 + 672))
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 672), v202 - 14);
          if (*(_QWORD *)(a1 + 672) < *v66)
          {
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 448), (__int128 *)(a1 + 672));
            if (*v66 < *(_QWORD *)(a1 + 224))
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
              if (*(_QWORD *)(a1 + 224) < *(_QWORD *)a1)
              {
                v65 = (__int128 *)a1;
                v64 = (__int128 *)(a1 + 224);
LABEL_83:
                std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v65, v64);
              }
            }
          }
        }
        return;
      default:
        if (v8 > 5375)
        {
          if (!a3)
          {
            if ((__int128 *)a1 != v202)
            {
              v200 = (v9 - 2) >> 1;
              v91 = v200;
              do
              {
                v92 = v91;
                if (v200 >= v91)
                {
                  v93 = (2 * v91) | 1;
                  v94 = (__int128 *)(a1 + 224 * v93);
                  if (2 * v92 + 2 >= (uint64_t)v9)
                  {
                    v95 = *(_QWORD *)v94;
                  }
                  else
                  {
                    v95 = *(_QWORD *)v94;
                    v96 = *((_QWORD *)v94 + 28);
                    if (*(_QWORD *)v94 <= v96)
                      v95 = *((_QWORD *)v94 + 28);
                    if (*(_QWORD *)v94 < v96)
                    {
                      v94 += 14;
                      v93 = 2 * v92 + 2;
                    }
                  }
                  v97 = a1 + 224 * v92;
                  if (v95 >= *(_QWORD *)v97)
                  {
                    v98 = *(_OWORD *)v97;
                    v99 = *(_OWORD *)(v97 + 32);
                    v223 = *(_OWORD *)(v97 + 16);
                    v224 = v99;
                    v222 = v98;
                    v100 = *(_OWORD *)(v97 + 48);
                    v101 = *(_OWORD *)(v97 + 64);
                    v102 = *(_OWORD *)(v97 + 80);
                    v228 = *(_QWORD *)(v97 + 96);
                    v226 = v101;
                    v227 = v102;
                    v225 = v100;
                    v229.n128_u8[0] = 0;
                    v231 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 128))
                    {
                      v103 = a1 + 224 * v92;
                      v104 = *(__n128 *)(v103 + 104);
                      v230 = *(_QWORD *)(v103 + 120);
                      v229 = v104;
                      *(_QWORD *)(v103 + 112) = 0;
                      *(_QWORD *)(v103 + 120) = 0;
                      *(_QWORD *)(v103 + 104) = 0;
                      v231 = 1;
                    }
                    v232.n128_u8[0] = 0;
                    v234 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 160))
                    {
                      v105 = a1 + 224 * v92;
                      v232 = *(__n128 *)(v105 + 136);
                      v233 = *(_QWORD *)(v105 + 152);
                      *(_QWORD *)(v105 + 136) = 0;
                      *(_QWORD *)(v105 + 144) = 0;
                      *(_QWORD *)(v105 + 152) = 0;
                      v234 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    v237 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 192))
                    {
                      v106 = a1 + 224 * v92;
                      __p = *(__n128 *)(v106 + 168);
                      v236 = *(_QWORD *)(v106 + 184);
                      *(_QWORD *)(v106 + 168) = 0;
                      *(_QWORD *)(v106 + 176) = 0;
                      *(_QWORD *)(v106 + 184) = 0;
                      v237 = 1;
                    }
                    v198 = v92;
                    v107 = a1 + 224 * v92;
                    v238 = *(_OWORD *)(v107 + 200);
                    v239 = *(_QWORD *)(v107 + 216);
                    *(_QWORD *)(v107 + 200) = 0;
                    *(_QWORD *)(v107 + 208) = 0;
                    *(_QWORD *)(v107 + 216) = 0;
                    do
                    {
                      v108 = v94;
                      v109 = *v94;
                      v110 = v94[2];
                      *(_OWORD *)(v97 + 16) = v94[1];
                      *(_OWORD *)(v97 + 32) = v110;
                      *(_OWORD *)v97 = v109;
                      v111 = v94[3];
                      v112 = v94[4];
                      v113 = v94[5];
                      *(_QWORD *)(v97 + 96) = *((_QWORD *)v94 + 12);
                      *(_OWORD *)(v97 + 64) = v112;
                      *(_OWORD *)(v97 + 80) = v113;
                      *(_OWORD *)(v97 + 48) = v111;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v97 + 104, (__n128 *)((char *)v94 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v97 + 136, (__n128 *)((char *)v108 + 136));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v97 + 168, (__n128 *)((char *)v108 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v97 + 200));
                      *(_OWORD *)(v97 + 200) = *(__int128 *)((char *)v108 + 200);
                      *(_QWORD *)(v97 + 216) = *((_QWORD *)v108 + 27);
                      *((_QWORD *)v108 + 25) = 0;
                      *((_QWORD *)v108 + 26) = 0;
                      *((_QWORD *)v108 + 27) = 0;
                      if (v200 < v93)
                        break;
                      v94 = (__int128 *)(a1 + 224 * ((2 * v93) | 1));
                      if (2 * v93 + 2 >= (uint64_t)v9)
                      {
                        v114 = *(_QWORD *)v94;
                        v93 = (2 * v93) | 1;
                      }
                      else
                      {
                        v114 = *(_QWORD *)v94;
                        v115 = *((_QWORD *)v94 + 28);
                        if (*(_QWORD *)v94 <= v115)
                          v114 = *((_QWORD *)v94 + 28);
                        if (*(_QWORD *)v94 >= v115)
                        {
                          v93 = (2 * v93) | 1;
                        }
                        else
                        {
                          v94 += 14;
                          v93 = 2 * v93 + 2;
                        }
                      }
                      v97 = (unint64_t)v108;
                    }
                    while (v114 >= (unint64_t)v222);
                    v116 = v222;
                    v117 = v224;
                    v108[1] = v223;
                    v108[2] = v117;
                    *v108 = v116;
                    v118 = v225;
                    v119 = v226;
                    v120 = v227;
                    *((_QWORD *)v108 + 12) = v228;
                    v108[4] = v119;
                    v108[5] = v120;
                    v108[3] = v118;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v108 + 104, &v229);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v108 + 136, &v232);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v108 + 168, &__p);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v108 + 25);
                    *(__int128 *)((char *)v108 + 200) = v238;
                    *((_QWORD *)v108 + 27) = v239;
                    v238 = 0uLL;
                    v239 = 0;
                    *(_QWORD *)&v203 = &v238;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                    if (v237 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v234 && v232.n128_u64[0])
                    {
                      v232.n128_u64[1] = v232.n128_u64[0];
                      operator delete((void *)v232.n128_u64[0]);
                    }
                    if (v231 && SHIBYTE(v230) < 0)
                      operator delete((void *)v229.n128_u64[0]);
                    v7 = v202;
                    v92 = v198;
                  }
                }
                v91 = v92 - 1;
              }
              while (v92);
              v121 = (((unint64_t)v8 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
              v194 = (__n128 *)(a1 + 104);
              do
              {
                v122 = *(_OWORD *)a1;
                v123 = *(_OWORD *)(a1 + 32);
                v204 = *(_OWORD *)(a1 + 16);
                v205 = v123;
                v203 = v122;
                v124 = *(_OWORD *)(a1 + 48);
                v125 = *(_OWORD *)(a1 + 64);
                v126 = *(_OWORD *)(a1 + 80);
                v209 = *(_QWORD *)(a1 + 96);
                v207 = v125;
                v208 = v126;
                v206 = v124;
                v210.n128_u8[0] = 0;
                v212 = 0;
                if (*(_BYTE *)(a1 + 128))
                {
                  v127 = *v194;
                  v211 = *(_QWORD *)(a1 + 120);
                  v210 = v127;
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  v194->n128_u64[0] = 0;
                  v212 = 1;
                }
                v213.n128_u8[0] = 0;
                v215 = 0;
                if (*(_BYTE *)(a1 + 160))
                {
                  v213 = *(__n128 *)(a1 + 136);
                  v214 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  v215 = 1;
                }
                v201 = v7;
                v216.n128_u8[0] = 0;
                v218 = 0;
                if (*(_BYTE *)(a1 + 192))
                {
                  v216 = *(__n128 *)(a1 + 168);
                  v217 = *(_QWORD *)(a1 + 184);
                  *(_QWORD *)(a1 + 168) = 0;
                  *(_QWORD *)(a1 + 176) = 0;
                  *(_QWORD *)(a1 + 184) = 0;
                  v218 = 1;
                }
                v128 = 0;
                v219 = *(_OWORD *)(a1 + 200);
                v220 = *(_QWORD *)(a1 + 216);
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                *(_QWORD *)(a1 + 216) = 0;
                v129 = a1;
                do
                {
                  v130 = v129 + 224 * v128 + 224;
                  v131 = 2 * v128;
                  v128 = (2 * v128) | 1;
                  if (v131 + 2 < v121 && *(_QWORD *)v130 < *(_QWORD *)(v130 + 224))
                  {
                    v130 += 224;
                    v128 = v131 + 2;
                  }
                  v132 = *(_OWORD *)v130;
                  v133 = *(_OWORD *)(v130 + 32);
                  *(_OWORD *)(v129 + 16) = *(_OWORD *)(v130 + 16);
                  *(_OWORD *)(v129 + 32) = v133;
                  *(_OWORD *)v129 = v132;
                  v134 = *(_OWORD *)(v130 + 48);
                  v135 = *(_OWORD *)(v130 + 64);
                  v136 = *(_OWORD *)(v130 + 80);
                  *(_QWORD *)(v129 + 96) = *(_QWORD *)(v130 + 96);
                  *(_OWORD *)(v129 + 64) = v135;
                  *(_OWORD *)(v129 + 80) = v136;
                  *(_OWORD *)(v129 + 48) = v134;
                  v137 = (__n128 *)(v130 + 104);
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v129 + 104, (__n128 *)(v130 + 104));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v129 + 136, (__n128 *)(v130 + 136));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v129 + 168, (__n128 *)(v130 + 168));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v129 + 200));
                  *(_OWORD *)(v129 + 200) = *(_OWORD *)(v130 + 200);
                  *(_QWORD *)(v129 + 216) = *(_QWORD *)(v130 + 216);
                  *(_QWORD *)(v130 + 200) = 0;
                  *(_QWORD *)(v130 + 208) = 0;
                  *(_QWORD *)(v130 + 216) = 0;
                  v129 = v130;
                }
                while (v128 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
                if ((__int128 *)v130 == v201 - 14)
                {
                  v169 = v203;
                  v170 = v205;
                  *(_OWORD *)(v130 + 16) = v204;
                  *(_OWORD *)(v130 + 32) = v170;
                  *(_OWORD *)v130 = v169;
                  v171 = v206;
                  v172 = v207;
                  v173 = v208;
                  *(_QWORD *)(v130 + 96) = v209;
                  *(_OWORD *)(v130 + 64) = v172;
                  *(_OWORD *)(v130 + 80) = v173;
                  *(_OWORD *)(v130 + 48) = v171;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, &v210);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, &v213);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, &v216);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                  *(_OWORD *)(v130 + 200) = v219;
                  *(_QWORD *)(v130 + 216) = v220;
                  v219 = 0uLL;
                  v220 = 0;
                }
                else
                {
                  v138 = *(v201 - 14);
                  v139 = *(v201 - 12);
                  *(_OWORD *)(v130 + 16) = *(v201 - 13);
                  *(_OWORD *)(v130 + 32) = v139;
                  *(_OWORD *)v130 = v138;
                  v140 = *(v201 - 11);
                  v141 = *(v201 - 10);
                  v142 = *(v201 - 9);
                  *(_QWORD *)(v130 + 96) = *((_QWORD *)v201 - 16);
                  *(_OWORD *)(v130 + 64) = v141;
                  *(_OWORD *)(v130 + 80) = v142;
                  *(_OWORD *)(v130 + 48) = v140;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, (__n128 *)((char *)v201 - 120));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, (__n128 *)((char *)v201 - 88));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, (__n128 *)((char *)v201 - 56));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                  v143 = (_QWORD *)v201 - 3;
                  *(_OWORD *)(v130 + 200) = *(__int128 *)((char *)v201 - 24);
                  *(_QWORD *)(v130 + 216) = *((_QWORD *)v201 - 1);
                  *v143 = 0;
                  v143[1] = 0;
                  v143[2] = 0;
                  v144 = v203;
                  v145 = v205;
                  *(v201 - 13) = v204;
                  *(v201 - 12) = v145;
                  *(v201 - 14) = v144;
                  v146 = v206;
                  v147 = v207;
                  v148 = v208;
                  *((_QWORD *)v201 - 16) = v209;
                  *(v201 - 10) = v147;
                  *(v201 - 9) = v148;
                  *(v201 - 11) = v146;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v201 - 120, &v210);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v201 - 88, &v213);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v201 - 56, &v216);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v201 - 3);
                  *(__int128 *)((char *)v201 - 24) = v219;
                  *((_QWORD *)v201 - 1) = v220;
                  v219 = 0uLL;
                  v220 = 0;
                  v149 = v130 + 224 - a1;
                  if (v149 >= 225)
                  {
                    v150 = (unint64_t)(((((unint64_t)v149 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                            - 2) >> 1;
                    v151 = a1 + 224 * v150;
                    if (*(_QWORD *)v151 < *(_QWORD *)v130)
                    {
                      v152 = *(_OWORD *)v130;
                      v153 = *(_OWORD *)(v130 + 32);
                      v223 = *(_OWORD *)(v130 + 16);
                      v224 = v153;
                      v222 = v152;
                      v154 = *(_OWORD *)(v130 + 48);
                      v155 = *(_OWORD *)(v130 + 64);
                      v156 = *(_OWORD *)(v130 + 80);
                      v228 = *(_QWORD *)(v130 + 96);
                      v226 = v155;
                      v227 = v156;
                      v225 = v154;
                      v229.n128_u8[0] = 0;
                      v231 = 0;
                      if (*(_BYTE *)(v130 + 128))
                      {
                        v157 = *v137;
                        v230 = *(_QWORD *)(v130 + 120);
                        v229 = v157;
                        *(_QWORD *)(v130 + 112) = 0;
                        *(_QWORD *)(v130 + 120) = 0;
                        v137->n128_u64[0] = 0;
                        v231 = 1;
                      }
                      v232.n128_u8[0] = 0;
                      v234 = 0;
                      if (*(_BYTE *)(v130 + 160))
                      {
                        v232 = *(__n128 *)(v130 + 136);
                        v233 = *(_QWORD *)(v130 + 152);
                        *(_QWORD *)(v130 + 136) = 0;
                        *(_QWORD *)(v130 + 144) = 0;
                        *(_QWORD *)(v130 + 152) = 0;
                        v234 = 1;
                      }
                      __p.n128_u8[0] = 0;
                      v237 = 0;
                      if (*(_BYTE *)(v130 + 192))
                      {
                        __p = *(__n128 *)(v130 + 168);
                        v236 = *(_QWORD *)(v130 + 184);
                        *(_QWORD *)(v130 + 168) = 0;
                        *(_QWORD *)(v130 + 176) = 0;
                        *(_QWORD *)(v130 + 184) = 0;
                        v237 = 1;
                      }
                      v238 = *(_OWORD *)(v130 + 200);
                      v239 = *(_QWORD *)(v130 + 216);
                      *(_QWORD *)(v130 + 200) = 0;
                      *(_QWORD *)(v130 + 208) = 0;
                      *(_QWORD *)(v130 + 216) = 0;
                      do
                      {
                        v158 = v151;
                        v159 = *(_OWORD *)v151;
                        v160 = *(_OWORD *)(v151 + 32);
                        *(_OWORD *)(v130 + 16) = *(_OWORD *)(v151 + 16);
                        *(_OWORD *)(v130 + 32) = v160;
                        *(_OWORD *)v130 = v159;
                        v161 = *(_OWORD *)(v151 + 48);
                        v162 = *(_OWORD *)(v151 + 64);
                        v163 = *(_OWORD *)(v151 + 80);
                        *(_QWORD *)(v130 + 96) = *(_QWORD *)(v151 + 96);
                        *(_OWORD *)(v130 + 64) = v162;
                        *(_OWORD *)(v130 + 80) = v163;
                        *(_OWORD *)(v130 + 48) = v161;
                        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, (__n128 *)(v151 + 104));
                        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, (__n128 *)(v158 + 136));
                        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, (__n128 *)(v158 + 168));
                        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                        *(_OWORD *)(v130 + 200) = *(_OWORD *)(v158 + 200);
                        *(_QWORD *)(v130 + 216) = *(_QWORD *)(v158 + 216);
                        *(_QWORD *)(v158 + 200) = 0;
                        *(_QWORD *)(v158 + 208) = 0;
                        *(_QWORD *)(v158 + 216) = 0;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = a1 + 224 * v150;
                        v130 = v158;
                      }
                      while (*(_QWORD *)v151 < (unint64_t)v222);
                      v164 = v222;
                      v165 = v224;
                      *(_OWORD *)(v158 + 16) = v223;
                      *(_OWORD *)(v158 + 32) = v165;
                      *(_OWORD *)v158 = v164;
                      v166 = v225;
                      v167 = v226;
                      v168 = v227;
                      *(_QWORD *)(v158 + 96) = v228;
                      *(_OWORD *)(v158 + 64) = v167;
                      *(_OWORD *)(v158 + 80) = v168;
                      *(_OWORD *)(v158 + 48) = v166;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v158 + 104, &v229);
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v158 + 136, &v232);
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v158 + 168, &__p);
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v158 + 200));
                      *(_OWORD *)(v158 + 200) = v238;
                      *(_QWORD *)(v158 + 216) = v239;
                      v238 = 0uLL;
                      v239 = 0;
                      v221 = (void **)&v238;
                      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v221);
                      if (v237 && __p.n128_u64[0])
                      {
                        __p.n128_u64[1] = __p.n128_u64[0];
                        operator delete((void *)__p.n128_u64[0]);
                      }
                      if (v234 && v232.n128_u64[0])
                      {
                        v232.n128_u64[1] = v232.n128_u64[0];
                        operator delete((void *)v232.n128_u64[0]);
                      }
                      if (v231 && SHIBYTE(v230) < 0)
                        operator delete((void *)v229.n128_u64[0]);
                    }
                  }
                }
                *(_QWORD *)&v222 = &v219;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
                if (v218 && v216.n128_u64[0])
                {
                  v216.n128_u64[1] = v216.n128_u64[0];
                  operator delete((void *)v216.n128_u64[0]);
                }
                if (v215 && v213.n128_u64[0])
                {
                  v213.n128_u64[1] = v213.n128_u64[0];
                  operator delete((void *)v213.n128_u64[0]);
                }
                if (v212 && SHIBYTE(v211) < 0)
                  operator delete((void *)v210.n128_u64[0]);
                v174 = v121-- <= 2;
                v7 = v201 - 14;
              }
              while (!v174);
            }
            return;
          }
          v10 = v9 >> 1;
          v11 = (__int128 *)(a1 + 224 * (v9 >> 1));
          if ((unint64_t)v8 <= 0x7000)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 224 * (v9 >> 1)), (__int128 *)a1, v197);
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224 * (v9 >> 1)), v197);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 224), (__int128 *)(224 * v10 + a1 - 224), v196);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 448), (__int128 *)(a1 + 224 + 224 * v10), v195);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(224 * v10 + a1 - 224), v11, (__int128 *)(a1 + 224 + 224 * v10));
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)a1, v11);
          }
          --a3;
          if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 224) >= *(_QWORD *)a1)
          {
            v40 = *(_OWORD *)a1;
            v41 = *(_OWORD *)(a1 + 32);
            v223 = *(_OWORD *)(a1 + 16);
            v224 = v41;
            v222 = v40;
            v42 = *(_OWORD *)(a1 + 48);
            v43 = *(_OWORD *)(a1 + 64);
            v44 = *(_OWORD *)(a1 + 80);
            v228 = *(_QWORD *)(a1 + 96);
            v226 = v43;
            v227 = v44;
            v225 = v42;
            v229.n128_u8[0] = 0;
            v231 = 0;
            if (*(_BYTE *)(a1 + 128))
            {
              v45 = *(__n128 *)(a1 + 104);
              v230 = *(_QWORD *)(a1 + 120);
              v229 = v45;
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 104) = 0;
              v231 = 1;
            }
            v232.n128_u8[0] = 0;
            v234 = 0;
            if (*(_BYTE *)(a1 + 160))
            {
              v232 = *(__n128 *)(a1 + 136);
              v233 = *(_QWORD *)(a1 + 152);
              *(_QWORD *)(a1 + 136) = 0;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              v234 = 1;
            }
            __p.n128_u8[0] = 0;
            v237 = 0;
            if (*(_BYTE *)(a1 + 192))
            {
              __p = *(__n128 *)(a1 + 168);
              v236 = *(_QWORD *)(a1 + 184);
              *(_QWORD *)(a1 + 168) = 0;
              *(_QWORD *)(a1 + 176) = 0;
              *(_QWORD *)(a1 + 184) = 0;
              v237 = 1;
            }
            v238 = *(_OWORD *)(a1 + 200);
            v239 = *(_QWORD *)(a1 + 216);
            *(_QWORD *)(a1 + 200) = 0;
            *(_QWORD *)(a1 + 208) = 0;
            *(_QWORD *)(a1 + 216) = 0;
            v46 = v222;
            if ((unint64_t)v222 >= *(_QWORD *)v197)
            {
              v48 = a1 + 224;
              do
              {
                v6 = v48;
                if (v48 >= (unint64_t)v202)
                  break;
                v48 += 224;
              }
              while ((unint64_t)v222 >= *(_QWORD *)v6);
            }
            else
            {
              v6 = a1;
              do
              {
                v47 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while ((unint64_t)v222 >= v47);
            }
            v49 = v202;
            if (v6 < (unint64_t)v202)
            {
              v49 = v202;
              do
              {
                v50 = *((_QWORD *)v49 - 28);
                v49 -= 14;
              }
              while ((unint64_t)v222 < v50);
            }
            while (v6 < (unint64_t)v49)
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)v6, v49);
              do
              {
                v51 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while (v46 >= v51);
              do
              {
                v52 = *((_QWORD *)v49 - 28);
                v49 -= 14;
              }
              while (v46 < v52);
            }
            v53 = (__int128 *)(v6 - 224);
            if (v6 - 224 != a1)
            {
              v54 = *v53;
              v55 = *(_OWORD *)(v6 - 192);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 - 208);
              *(_OWORD *)(a1 + 32) = v55;
              *(_OWORD *)a1 = v54;
              v56 = *(_OWORD *)(v6 - 176);
              v57 = *(_OWORD *)(v6 - 160);
              v58 = *(_OWORD *)(v6 - 144);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 - 128);
              *(_OWORD *)(a1 + 64) = v57;
              *(_OWORD *)(a1 + 80) = v58;
              *(_OWORD *)(a1 + 48) = v56;
              std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v6 - 120));
              std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v6 - 88));
              std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v6 - 56));
              std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
              *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(a1 + 216) = *(_QWORD *)(v6 - 8);
              *(_QWORD *)(v6 - 24) = 0;
              *(_QWORD *)(v6 - 16) = 0;
              *(_QWORD *)(v6 - 8) = 0;
            }
            v59 = v222;
            v60 = v224;
            *(_OWORD *)(v6 - 208) = v223;
            *(_OWORD *)(v6 - 192) = v60;
            *v53 = v59;
            v61 = v225;
            v62 = v226;
            v63 = v227;
            *(_QWORD *)(v6 - 128) = v228;
            *(_OWORD *)(v6 - 160) = v62;
            *(_OWORD *)(v6 - 144) = v63;
            *(_OWORD *)(v6 - 176) = v61;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 - 120, &v229);
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 88, &v232);
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 56, &__p);
            std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v6 - 24));
            *(_OWORD *)(v6 - 24) = v238;
            *(_QWORD *)(v6 - 8) = v239;
            v238 = 0uLL;
            v239 = 0;
            *(_QWORD *)&v203 = &v238;
            std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
            if (v237 && __p.n128_u64[0])
            {
              __p.n128_u64[1] = __p.n128_u64[0];
              operator delete((void *)__p.n128_u64[0]);
            }
            if (v234 && v232.n128_u64[0])
            {
              v232.n128_u64[1] = v232.n128_u64[0];
              operator delete((void *)v232.n128_u64[0]);
            }
            if (v231 && SHIBYTE(v230) < 0)
              operator delete((void *)v229.n128_u64[0]);
            goto LABEL_45;
          }
          v12 = *(_OWORD *)a1;
          v13 = *(_OWORD *)(a1 + 32);
          v223 = *(_OWORD *)(a1 + 16);
          v224 = v13;
          v222 = v12;
          v14 = *(_OWORD *)(a1 + 48);
          v15 = *(_OWORD *)(a1 + 64);
          v16 = *(_OWORD *)(a1 + 80);
          v228 = *(_QWORD *)(a1 + 96);
          v226 = v15;
          v227 = v16;
          v225 = v14;
          v229.n128_u8[0] = 0;
          v231 = 0;
          if (*(_BYTE *)(a1 + 128))
          {
            v17 = *(__n128 *)(a1 + 104);
            v230 = *(_QWORD *)(a1 + 120);
            v229 = v17;
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_QWORD *)(a1 + 104) = 0;
            v231 = 1;
          }
          v232.n128_u8[0] = 0;
          v234 = 0;
          if (*(_BYTE *)(a1 + 160))
          {
            v232 = *(__n128 *)(a1 + 136);
            v233 = *(_QWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 136) = 0;
            *(_QWORD *)(a1 + 144) = 0;
            *(_QWORD *)(a1 + 152) = 0;
            v234 = 1;
          }
          __p.n128_u8[0] = 0;
          v237 = 0;
          if (*(_BYTE *)(a1 + 192))
          {
            __p = *(__n128 *)(a1 + 168);
            v236 = *(_QWORD *)(a1 + 184);
            *(_QWORD *)(a1 + 168) = 0;
            *(_QWORD *)(a1 + 176) = 0;
            *(_QWORD *)(a1 + 184) = 0;
            v237 = 1;
          }
          v18 = 0;
          v238 = *(_OWORD *)(a1 + 200);
          v239 = *(_QWORD *)(a1 + 216);
          *(_QWORD *)(a1 + 200) = 0;
          *(_QWORD *)(a1 + 208) = 0;
          *(_QWORD *)(a1 + 216) = 0;
          v19 = v222;
          do
          {
            v20 = *(_QWORD *)(a1 + v18 + 224);
            v18 += 224;
          }
          while (v20 < (unint64_t)v222);
          v21 = a1 + v18;
          v22 = v202;
          if (v18 == 224)
          {
            v22 = v202;
            do
            {
              if (v21 >= (unint64_t)v22)
                break;
              v24 = *((_QWORD *)v22 - 28);
              v22 -= 14;
            }
            while (v24 >= (unint64_t)v222);
          }
          else
          {
            do
            {
              v23 = *((_QWORD *)v22 - 28);
              v22 -= 14;
            }
            while (v23 >= (unint64_t)v222);
          }
          v6 = a1 + v18;
          if (v21 < (unint64_t)v22)
          {
            v25 = v22;
            do
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)v6, v25);
              do
              {
                v26 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while (v26 < v19);
              do
              {
                v27 = *((_QWORD *)v25 - 28);
                v25 -= 14;
              }
              while (v27 >= v19);
            }
            while (v6 < (unint64_t)v25);
          }
          v28 = (__int128 *)(v6 - 224);
          if (v6 - 224 != a1)
          {
            v29 = *v28;
            v30 = *(_OWORD *)(v6 - 192);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 - 208);
            *(_OWORD *)(a1 + 32) = v30;
            *(_OWORD *)a1 = v29;
            v31 = *(_OWORD *)(v6 - 176);
            v32 = *(_OWORD *)(v6 - 160);
            v33 = *(_OWORD *)(v6 - 144);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 - 128);
            *(_OWORD *)(a1 + 64) = v32;
            *(_OWORD *)(a1 + 80) = v33;
            *(_OWORD *)(a1 + 48) = v31;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v6 - 120));
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v6 - 88));
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v6 - 56));
            std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
            *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 - 24);
            *(_QWORD *)(a1 + 216) = *(_QWORD *)(v6 - 8);
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 8) = 0;
          }
          v34 = v222;
          v35 = v224;
          *(_OWORD *)(v6 - 208) = v223;
          *(_OWORD *)(v6 - 192) = v35;
          *v28 = v34;
          v36 = v225;
          v37 = v226;
          v38 = v227;
          *(_QWORD *)(v6 - 128) = v228;
          *(_OWORD *)(v6 - 160) = v37;
          *(_OWORD *)(v6 - 144) = v38;
          *(_OWORD *)(v6 - 176) = v36;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 - 120, &v229);
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 88, &v232);
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 56, &__p);
          std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v6 - 24));
          *(_OWORD *)(v6 - 24) = v238;
          *(_QWORD *)(v6 - 8) = v239;
          v238 = 0uLL;
          v239 = 0;
          *(_QWORD *)&v203 = &v238;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
          if (v237 && __p.n128_u64[0])
          {
            __p.n128_u64[1] = __p.n128_u64[0];
            operator delete((void *)__p.n128_u64[0]);
          }
          if (v234 && v232.n128_u64[0])
          {
            v232.n128_u64[1] = v232.n128_u64[0];
            operator delete((void *)v232.n128_u64[0]);
          }
          if (v231 && SHIBYTE(v230) < 0)
            operator delete((void *)v229.n128_u64[0]);
          if (v21 < (unint64_t)v22)
            goto LABEL_44;
          v39 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((__int128 *)a1, (__int128 *)(v6 - 224));
          if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((__int128 *)v6, v202))
          {
            if (v39)
              continue;
LABEL_44:
            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v6 - 224, a3, a4 & 1);
LABEL_45:
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v6 - 224);
          if (v39)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((__int128 *)a1 != v202)
          {
            v67 = a1 + 224;
            if ((__int128 *)(a1 + 224) != v202)
            {
              v68 = 0;
              v69 = a1;
              do
              {
                v70 = v67;
                if (*(_QWORD *)(v69 + 224) < *(_QWORD *)v69)
                {
                  v71 = *(_OWORD *)v67;
                  v72 = *(_OWORD *)(v67 + 32);
                  v223 = *(_OWORD *)(v67 + 16);
                  v224 = v72;
                  v222 = v71;
                  v73 = *(_OWORD *)(v67 + 48);
                  v74 = *(_OWORD *)(v67 + 64);
                  v75 = *(_OWORD *)(v67 + 80);
                  v228 = *(_QWORD *)(v67 + 96);
                  v226 = v74;
                  v227 = v75;
                  v225 = v73;
                  v229.n128_u8[0] = 0;
                  v231 = 0;
                  if (*(_BYTE *)(v69 + 352))
                  {
                    v230 = *(_QWORD *)(v69 + 344);
                    v229 = *(__n128 *)(v69 + 328);
                    *(_QWORD *)(v69 + 336) = 0;
                    *(_QWORD *)(v69 + 344) = 0;
                    *(_QWORD *)(v69 + 328) = 0;
                    v231 = 1;
                  }
                  v76 = (__n128 *)(v69 + 360);
                  v232.n128_u8[0] = 0;
                  v234 = 0;
                  if (*(_BYTE *)(v69 + 384))
                  {
                    v232 = *v76;
                    v233 = *(_QWORD *)(v69 + 376);
                    v76->n128_u64[0] = 0;
                    *(_QWORD *)(v69 + 368) = 0;
                    *(_QWORD *)(v69 + 376) = 0;
                    v234 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  v237 = 0;
                  if (*(_BYTE *)(v69 + 416))
                  {
                    __p = *(__n128 *)(v69 + 392);
                    v236 = *(_QWORD *)(v69 + 408);
                    *(_QWORD *)(v69 + 392) = 0;
                    *(_QWORD *)(v69 + 400) = 0;
                    *(_QWORD *)(v69 + 408) = 0;
                    v237 = 1;
                  }
                  v238 = *(_OWORD *)(v69 + 424);
                  v239 = *(_QWORD *)(v69 + 440);
                  *(_QWORD *)(v69 + 424) = 0;
                  *(_QWORD *)(v69 + 432) = 0;
                  *(_QWORD *)(v69 + 440) = 0;
                  v77 = v68;
                  while (1)
                  {
                    v78 = v77;
                    v79 = a1 + v77;
                    v80 = *(_OWORD *)(a1 + v77 + 80);
                    *(_OWORD *)(v79 + 288) = *(_OWORD *)(a1 + v77 + 64);
                    *(_OWORD *)(v79 + 304) = v80;
                    *(_QWORD *)(v79 + 320) = *(_QWORD *)(a1 + v77 + 96);
                    v81 = *(_OWORD *)(a1 + v77 + 16);
                    *(_OWORD *)(v79 + 224) = *(_OWORD *)v79;
                    *(_OWORD *)(v79 + 240) = v81;
                    v82 = *(_OWORD *)(a1 + v77 + 48);
                    *(_OWORD *)(v79 + 256) = *(_OWORD *)(a1 + v77 + 32);
                    *(_OWORD *)(v79 + 272) = v82;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v77 + 328, (__n128 *)(a1 + v77 + 104));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v79 + 360, (__n128 *)(v79 + 136));
                    v83 = a1 + v78;
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 392, (__n128 *)(a1 + v78 + 168));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + v78 + 424));
                    *(_OWORD *)(v83 + 424) = *(_OWORD *)(v83 + 200);
                    *(_QWORD *)(v83 + 440) = *(_QWORD *)(v83 + 216);
                    *(_QWORD *)(v83 + 208) = 0;
                    *(_QWORD *)(v83 + 216) = 0;
                    *(_QWORD *)(v83 + 200) = 0;
                    if (!v78)
                      break;
                    v77 = v78 - 224;
                    if ((unint64_t)v222 >= *(_QWORD *)(a1 + v78 - 224))
                    {
                      v84 = a1 + v78;
                      goto LABEL_107;
                    }
                  }
                  v84 = a1;
LABEL_107:
                  v85 = v222;
                  v86 = v224;
                  *(_OWORD *)(v84 + 16) = v223;
                  *(_OWORD *)(v84 + 32) = v86;
                  *(_OWORD *)v84 = v85;
                  v87 = v225;
                  v88 = v226;
                  v89 = v227;
                  *(_QWORD *)(v84 + 96) = v228;
                  *(_OWORD *)(v84 + 64) = v88;
                  *(_OWORD *)(v84 + 80) = v89;
                  *(_OWORD *)(v84 + 48) = v87;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v78 + 104, &v229);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 136, &v232);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 168, &__p);
                  v90 = (uint64_t *)(a1 + v78 + 200);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v90);
                  *v90 = v238;
                  *(_QWORD *)(v84 + 208) = *((_QWORD *)&v238 + 1);
                  *(_QWORD *)(v84 + 216) = v239;
                  v238 = 0uLL;
                  v239 = 0;
                  *(_QWORD *)&v203 = &v238;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                  if (v237 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v234 && v232.n128_u64[0])
                  {
                    v232.n128_u64[1] = v232.n128_u64[0];
                    operator delete((void *)v232.n128_u64[0]);
                  }
                  if (v231 && SHIBYTE(v230) < 0)
                    operator delete((void *)v229.n128_u64[0]);
                  v7 = v202;
                }
                v67 = v70 + 224;
                v68 += 224;
                v69 = v70;
              }
              while ((__int128 *)(v70 + 224) != v7);
            }
          }
        }
        else if ((__int128 *)a1 != v202)
        {
          v175 = a1 + 224;
          if ((__int128 *)(a1 + 224) != v202)
          {
            v176 = a1 - 224;
            do
            {
              v177 = v175;
              if (*(_QWORD *)(a1 + 224) < *(_QWORD *)a1)
              {
                v178 = *(_OWORD *)v175;
                v179 = *(_OWORD *)(v175 + 32);
                v223 = *(_OWORD *)(v175 + 16);
                v224 = v179;
                v222 = v178;
                v180 = *(_OWORD *)(v175 + 48);
                v181 = *(_OWORD *)(v175 + 64);
                v182 = *(_OWORD *)(v175 + 80);
                v228 = *(_QWORD *)(v175 + 96);
                v226 = v181;
                v227 = v182;
                v225 = v180;
                v229.n128_u8[0] = 0;
                v231 = 0;
                if (*(_BYTE *)(a1 + 352))
                {
                  v230 = *(_QWORD *)(a1 + 344);
                  v229 = *(__n128 *)(a1 + 328);
                  *(_QWORD *)(a1 + 336) = 0;
                  *(_QWORD *)(a1 + 344) = 0;
                  *(_QWORD *)(a1 + 328) = 0;
                  v231 = 1;
                }
                v183 = (__n128 *)(a1 + 360);
                v232.n128_u8[0] = 0;
                v234 = 0;
                if (*(_BYTE *)(a1 + 384))
                {
                  v232 = *v183;
                  v233 = *(_QWORD *)(a1 + 376);
                  v183->n128_u64[0] = 0;
                  *(_QWORD *)(a1 + 368) = 0;
                  *(_QWORD *)(a1 + 376) = 0;
                  v234 = 1;
                }
                __p.n128_u8[0] = 0;
                v237 = 0;
                if (*(_BYTE *)(a1 + 416))
                {
                  __p = *(__n128 *)(a1 + 392);
                  v236 = *(_QWORD *)(a1 + 408);
                  *(_QWORD *)(a1 + 392) = 0;
                  *(_QWORD *)(a1 + 400) = 0;
                  *(_QWORD *)(a1 + 408) = 0;
                  v237 = 1;
                }
                v238 = *(_OWORD *)(a1 + 424);
                v239 = *(_QWORD *)(a1 + 440);
                *(_QWORD *)(a1 + 424) = 0;
                *(_QWORD *)(a1 + 432) = 0;
                *(_QWORD *)(a1 + 440) = 0;
                v184 = v176;
                do
                {
                  v185 = *(_OWORD *)(v184 + 304);
                  *(_OWORD *)(v184 + 512) = *(_OWORD *)(v184 + 288);
                  *(_OWORD *)(v184 + 528) = v185;
                  *(_QWORD *)(v184 + 544) = *(_QWORD *)(v184 + 320);
                  v186 = *(_OWORD *)(v184 + 240);
                  *(_OWORD *)(v184 + 448) = *(_OWORD *)(v184 + 224);
                  *(_OWORD *)(v184 + 464) = v186;
                  v187 = *(_OWORD *)(v184 + 272);
                  *(_OWORD *)(v184 + 480) = *(_OWORD *)(v184 + 256);
                  *(_OWORD *)(v184 + 496) = v187;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v184 + 552, (__n128 *)(v184 + 328));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 584, (__n128 *)(v184 + 360));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 616, (__n128 *)(v184 + 392));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v184 + 648));
                  *(_OWORD *)(v184 + 648) = *(_OWORD *)(v184 + 424);
                  *(_QWORD *)(v184 + 664) = *(_QWORD *)(v184 + 440);
                  *(_QWORD *)(v184 + 424) = 0;
                  *(_QWORD *)(v184 + 432) = 0;
                  *(_QWORD *)(v184 + 440) = 0;
                  v188 = *(_QWORD *)v184;
                  v184 -= 224;
                }
                while ((unint64_t)v222 < v188);
                v189 = v222;
                v190 = v224;
                *(_OWORD *)(v184 + 464) = v223;
                *(_OWORD *)(v184 + 480) = v190;
                *(_OWORD *)(v184 + 448) = v189;
                v191 = v225;
                v192 = v226;
                v193 = v227;
                *(_QWORD *)(v184 + 544) = v228;
                *(_OWORD *)(v184 + 512) = v192;
                *(_OWORD *)(v184 + 528) = v193;
                *(_OWORD *)(v184 + 496) = v191;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v184 + 552, &v229);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 584, &v232);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 616, &__p);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v184 + 648));
                *(_OWORD *)(v184 + 648) = v238;
                *(_QWORD *)(v184 + 664) = v239;
                v238 = 0uLL;
                v239 = 0;
                *(_QWORD *)&v203 = &v238;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                if (v237 && __p.n128_u64[0])
                {
                  __p.n128_u64[1] = __p.n128_u64[0];
                  operator delete((void *)__p.n128_u64[0]);
                }
                if (v234 && v232.n128_u64[0])
                {
                  v232.n128_u64[1] = v232.n128_u64[0];
                  operator delete((void *)v232.n128_u64[0]);
                }
                if (v231 && SHIBYTE(v230) < 0)
                  operator delete((void *)v229.n128_u64[0]);
                v7 = v202;
              }
              v175 = v177 + 224;
              v176 += 224;
              a1 = v177;
            }
            while ((__int128 *)(v177 + 224) != v7);
          }
        }
        return;
    }
  }
}

  v197 = a2 - 14;
  v202 = a2;
  v195 = a2 - 42;
  v196 = a2 - 28;
  v6 = a1;
  while (2)
  {
    a1 = v6;
    v7 = v202;
    v8 = (uint64_t)v202 - v6;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v202 - v6) >> 5);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v64 = v202 - 14;
        if (*((_QWORD *)v202 - 28) < *(_QWORD *)a1)
        {
          v65 = (__int128 *)a1;
          goto LABEL_83;
        }
        return;
      case 3uLL:
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), v197);
        return;
      case 4uLL:
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448), v197);
        return;
      case 5uLL:
        v66 = (_QWORD *)(a1 + 448);
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448), (__int128 *)(a1 + 672));
        if (*((_QWORD *)v202 - 28) < *(_QWORD *)(a1 + 672))
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 672), v202 - 14);
          if (*(_QWORD *)(a1 + 672) < *v66)
          {
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 448), (__int128 *)(a1 + 672));
            if (*v66 < *(_QWORD *)(a1 + 224))
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
              if (*(_QWORD *)(a1 + 224) < *(_QWORD *)a1)
              {
                v65 = (__int128 *)a1;
                v64 = (__int128 *)(a1 + 224);
LABEL_83:
                std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v65, v64);
              }
            }
          }
        }
        return;
      default:
        if (v8 > 5375)
        {
          if (!a3)
          {
            if ((__int128 *)a1 != v202)
            {
              v200 = (v9 - 2) >> 1;
              v91 = v200;
              do
              {
                v92 = v91;
                if (v200 >= v91)
                {
                  v93 = (2 * v91) | 1;
                  v94 = (__int128 *)(a1 + 224 * v93);
                  if (2 * v92 + 2 >= (uint64_t)v9)
                  {
                    v95 = *(_QWORD *)v94;
                  }
                  else
                  {
                    v95 = *(_QWORD *)v94;
                    v96 = *((_QWORD *)v94 + 28);
                    if (*(_QWORD *)v94 <= v96)
                      v95 = *((_QWORD *)v94 + 28);
                    if (*(_QWORD *)v94 < v96)
                    {
                      v94 += 14;
                      v93 = 2 * v92 + 2;
                    }
                  }
                  v97 = a1 + 224 * v92;
                  if (v95 >= *(_QWORD *)v97)
                  {
                    v98 = *(_OWORD *)v97;
                    v99 = *(_OWORD *)(v97 + 32);
                    v223 = *(_OWORD *)(v97 + 16);
                    v224 = v99;
                    v222 = v98;
                    v100 = *(_OWORD *)(v97 + 48);
                    v101 = *(_OWORD *)(v97 + 64);
                    v102 = *(_OWORD *)(v97 + 80);
                    v228 = *(_QWORD *)(v97 + 96);
                    v226 = v101;
                    v227 = v102;
                    v225 = v100;
                    v229.n128_u8[0] = 0;
                    v231 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 128))
                    {
                      v103 = a1 + 224 * v92;
                      v104 = *(__n128 *)(v103 + 104);
                      v230 = *(_QWORD *)(v103 + 120);
                      v229 = v104;
                      *(_QWORD *)(v103 + 112) = 0;
                      *(_QWORD *)(v103 + 120) = 0;
                      *(_QWORD *)(v103 + 104) = 0;
                      v231 = 1;
                    }
                    v232.n128_u8[0] = 0;
                    v234 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 160))
                    {
                      v105 = a1 + 224 * v92;
                      v232 = *(__n128 *)(v105 + 136);
                      v233 = *(_QWORD *)(v105 + 152);
                      *(_QWORD *)(v105 + 136) = 0;
                      *(_QWORD *)(v105 + 144) = 0;
                      *(_QWORD *)(v105 + 152) = 0;
                      v234 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    v237 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 192))
                    {
                      v106 = a1 + 224 * v92;
                      __p = *(__n128 *)(v106 + 168);
                      v236 = *(_QWORD *)(v106 + 184);
                      *(_QWORD *)(v106 + 168) = 0;
                      *(_QWORD *)(v106 + 176) = 0;
                      *(_QWORD *)(v106 + 184) = 0;
                      v237 = 1;
                    }
                    v198 = v92;
                    v107 = a1 + 224 * v92;
                    v238 = *(_OWORD *)(v107 + 200);
                    v239 = *(_QWORD *)(v107 + 216);
                    *(_QWORD *)(v107 + 200) = 0;
                    *(_QWORD *)(v107 + 208) = 0;
                    *(_QWORD *)(v107 + 216) = 0;
                    do
                    {
                      v108 = v94;
                      v109 = *v94;
                      v110 = v94[2];
                      *(_OWORD *)(v97 + 16) = v94[1];
                      *(_OWORD *)(v97 + 32) = v110;
                      *(_OWORD *)v97 = v109;
                      v111 = v94[3];
                      v112 = v94[4];
                      v113 = v94[5];
                      *(_QWORD *)(v97 + 96) = *((_QWORD *)v94 + 12);
                      *(_OWORD *)(v97 + 64) = v112;
                      *(_OWORD *)(v97 + 80) = v113;
                      *(_OWORD *)(v97 + 48) = v111;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v97 + 104, (__n128 *)((char *)v94 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v97 + 136, (__n128 *)((char *)v108 + 136));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v97 + 168, (__n128 *)((char *)v108 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v97 + 200));
                      *(_OWORD *)(v97 + 200) = *(__int128 *)((char *)v108 + 200);
                      *(_QWORD *)(v97 + 216) = *((_QWORD *)v108 + 27);
                      *((_QWORD *)v108 + 25) = 0;
                      *((_QWORD *)v108 + 26) = 0;
                      *((_QWORD *)v108 + 27) = 0;
                      if (v200 < v93)
                        break;
                      v94 = (__int128 *)(a1 + 224 * ((2 * v93) | 1));
                      if (2 * v93 + 2 >= (uint64_t)v9)
                      {
                        v114 = *(_QWORD *)v94;
                        v93 = (2 * v93) | 1;
                      }
                      else
                      {
                        v114 = *(_QWORD *)v94;
                        v115 = *((_QWORD *)v94 + 28);
                        if (*(_QWORD *)v94 <= v115)
                          v114 = *((_QWORD *)v94 + 28);
                        if (*(_QWORD *)v94 >= v115)
                        {
                          v93 = (2 * v93) | 1;
                        }
                        else
                        {
                          v94 += 14;
                          v93 = 2 * v93 + 2;
                        }
                      }
                      v97 = (unint64_t)v108;
                    }
                    while (v114 >= (unint64_t)v222);
                    v116 = v222;
                    v117 = v224;
                    v108[1] = v223;
                    v108[2] = v117;
                    *v108 = v116;
                    v118 = v225;
                    v119 = v226;
                    v120 = v227;
                    *((_QWORD *)v108 + 12) = v228;
                    v108[4] = v119;
                    v108[5] = v120;
                    v108[3] = v118;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v108 + 104, &v229);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v108 + 136, &v232);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v108 + 168, &__p);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v108 + 25);
                    *(__int128 *)((char *)v108 + 200) = v238;
                    *((_QWORD *)v108 + 27) = v239;
                    v238 = 0uLL;
                    v239 = 0;
                    *(_QWORD *)&v203 = &v238;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                    if (v237 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v234 && v232.n128_u64[0])
                    {
                      v232.n128_u64[1] = v232.n128_u64[0];
                      operator delete((void *)v232.n128_u64[0]);
                    }
                    if (v231 && SHIBYTE(v230) < 0)
                      operator delete((void *)v229.n128_u64[0]);
                    v7 = v202;
                    v92 = v198;
                  }
                }
                v91 = v92 - 1;
              }
              while (v92);
              v121 = (((unint64_t)v8 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
              v194 = (__n128 *)(a1 + 104);
              do
              {
                v122 = *(_OWORD *)a1;
                v123 = *(_OWORD *)(a1 + 32);
                v204 = *(_OWORD *)(a1 + 16);
                v205 = v123;
                v203 = v122;
                v124 = *(_OWORD *)(a1 + 48);
                v125 = *(_OWORD *)(a1 + 64);
                v126 = *(_OWORD *)(a1 + 80);
                v209 = *(_QWORD *)(a1 + 96);
                v207 = v125;
                v208 = v126;
                v206 = v124;
                v210.n128_u8[0] = 0;
                v212 = 0;
                if (*(_BYTE *)(a1 + 128))
                {
                  v127 = *v194;
                  v211 = *(_QWORD *)(a1 + 120);
                  v210 = v127;
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  v194->n128_u64[0] = 0;
                  v212 = 1;
                }
                v213.n128_u8[0] = 0;
                v215 = 0;
                if (*(_BYTE *)(a1 + 160))
                {
                  v213 = *(__n128 *)(a1 + 136);
                  v214 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  v215 = 1;
                }
                v201 = v7;
                v216.n128_u8[0] = 0;
                v218 = 0;
                if (*(_BYTE *)(a1 + 192))
                {
                  v216 = *(__n128 *)(a1 + 168);
                  v217 = *(_QWORD *)(a1 + 184);
                  *(_QWORD *)(a1 + 168) = 0;
                  *(_QWORD *)(a1 + 176) = 0;
                  *(_QWORD *)(a1 + 184) = 0;
                  v218 = 1;
                }
                v128 = 0;
                v219 = *(_OWORD *)(a1 + 200);
                v220 = *(_QWORD *)(a1 + 216);
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                *(_QWORD *)(a1 + 216) = 0;
                v129 = a1;
                do
                {
                  v130 = v129 + 224 * v128 + 224;
                  v131 = 2 * v128;
                  v128 = (2 * v128) | 1;
                  if (v131 + 2 < v121 && *(_QWORD *)v130 < *(_QWORD *)(v130 + 224))
                  {
                    v130 += 224;
                    v128 = v131 + 2;
                  }
                  v132 = *(_OWORD *)v130;
                  v133 = *(_OWORD *)(v130 + 32);
                  *(_OWORD *)(v129 + 16) = *(_OWORD *)(v130 + 16);
                  *(_OWORD *)(v129 + 32) = v133;
                  *(_OWORD *)v129 = v132;
                  v134 = *(_OWORD *)(v130 + 48);
                  v135 = *(_OWORD *)(v130 + 64);
                  v136 = *(_OWORD *)(v130 + 80);
                  *(_QWORD *)(v129 + 96) = *(_QWORD *)(v130 + 96);
                  *(_OWORD *)(v129 + 64) = v135;
                  *(_OWORD *)(v129 + 80) = v136;
                  *(_OWORD *)(v129 + 48) = v134;
                  v137 = (__n128 *)(v130 + 104);
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v129 + 104, (__n128 *)(v130 + 104));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v129 + 136, (__n128 *)(v130 + 136));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v129 + 168, (__n128 *)(v130 + 168));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v129 + 200));
                  *(_OWORD *)(v129 + 200) = *(_OWORD *)(v130 + 200);
                  *(_QWORD *)(v129 + 216) = *(_QWORD *)(v130 + 216);
                  *(_QWORD *)(v130 + 200) = 0;
                  *(_QWORD *)(v130 + 208) = 0;
                  *(_QWORD *)(v130 + 216) = 0;
                  v129 = v130;
                }
                while (v128 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
                if ((__int128 *)v130 == v201 - 14)
                {
                  v169 = v203;
                  v170 = v205;
                  *(_OWORD *)(v130 + 16) = v204;
                  *(_OWORD *)(v130 + 32) = v170;
                  *(_OWORD *)v130 = v169;
                  v171 = v206;
                  v172 = v207;
                  v173 = v208;
                  *(_QWORD *)(v130 + 96) = v209;
                  *(_OWORD *)(v130 + 64) = v172;
                  *(_OWORD *)(v130 + 80) = v173;
                  *(_OWORD *)(v130 + 48) = v171;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, &v210);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, &v213);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, &v216);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                  *(_OWORD *)(v130 + 200) = v219;
                  *(_QWORD *)(v130 + 216) = v220;
                  v219 = 0uLL;
                  v220 = 0;
                }
                else
                {
                  v138 = *(v201 - 14);
                  v139 = *(v201 - 12);
                  *(_OWORD *)(v130 + 16) = *(v201 - 13);
                  *(_OWORD *)(v130 + 32) = v139;
                  *(_OWORD *)v130 = v138;
                  v140 = *(v201 - 11);
                  v141 = *(v201 - 10);
                  v142 = *(v201 - 9);
                  *(_QWORD *)(v130 + 96) = *((_QWORD *)v201 - 16);
                  *(_OWORD *)(v130 + 64) = v141;
                  *(_OWORD *)(v130 + 80) = v142;
                  *(_OWORD *)(v130 + 48) = v140;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, (__n128 *)((char *)v201 - 120));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, (__n128 *)((char *)v201 - 88));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, (__n128 *)((char *)v201 - 56));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                  v143 = (_QWORD *)v201 - 3;
                  *(_OWORD *)(v130 + 200) = *(__int128 *)((char *)v201 - 24);
                  *(_QWORD *)(v130 + 216) = *((_QWORD *)v201 - 1);
                  *v143 = 0;
                  v143[1] = 0;
                  v143[2] = 0;
                  v144 = v203;
                  v145 = v205;
                  *(v201 - 13) = v204;
                  *(v201 - 12) = v145;
                  *(v201 - 14) = v144;
                  v146 = v206;
                  v147 = v207;
                  v148 = v208;
                  *((_QWORD *)v201 - 16) = v209;
                  *(v201 - 10) = v147;
                  *(v201 - 9) = v148;
                  *(v201 - 11) = v146;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v201 - 120, &v210);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v201 - 88, &v213);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v201 - 56, &v216);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v201 - 3);
                  *(__int128 *)((char *)v201 - 24) = v219;
                  *((_QWORD *)v201 - 1) = v220;
                  v219 = 0uLL;
                  v220 = 0;
                  v149 = v130 + 224 - a1;
                  if (v149 >= 225)
                  {
                    v150 = (unint64_t)(((((unint64_t)v149 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                            - 2) >> 1;
                    v151 = a1 + 224 * v150;
                    if (*(_QWORD *)v151 < *(_QWORD *)v130)
                    {
                      v152 = *(_OWORD *)v130;
                      v153 = *(_OWORD *)(v130 + 32);
                      v223 = *(_OWORD *)(v130 + 16);
                      v224 = v153;
                      v222 = v152;
                      v154 = *(_OWORD *)(v130 + 48);
                      v155 = *(_OWORD *)(v130 + 64);
                      v156 = *(_OWORD *)(v130 + 80);
                      v228 = *(_QWORD *)(v130 + 96);
                      v226 = v155;
                      v227 = v156;
                      v225 = v154;
                      v229.n128_u8[0] = 0;
                      v231 = 0;
                      if (*(_BYTE *)(v130 + 128))
                      {
                        v157 = *v137;
                        v230 = *(_QWORD *)(v130 + 120);
                        v229 = v157;
                        *(_QWORD *)(v130 + 112) = 0;
                        *(_QWORD *)(v130 + 120) = 0;
                        v137->n128_u64[0] = 0;
                        v231 = 1;
                      }
                      v232.n128_u8[0] = 0;
                      v234 = 0;
                      if (*(_BYTE *)(v130 + 160))
                      {
                        v232 = *(__n128 *)(v130 + 136);
                        v233 = *(_QWORD *)(v130 + 152);
                        *(_QWORD *)(v130 + 136) = 0;
                        *(_QWORD *)(v130 + 144) = 0;
                        *(_QWORD *)(v130 + 152) = 0;
                        v234 = 1;
                      }
                      __p.n128_u8[0] = 0;
                      v237 = 0;
                      if (*(_BYTE *)(v130 + 192))
                      {
                        __p = *(__n128 *)(v130 + 168);
                        v236 = *(_QWORD *)(v130 + 184);
                        *(_QWORD *)(v130 + 168) = 0;
                        *(_QWORD *)(v130 + 176) = 0;
                        *(_QWORD *)(v130 + 184) = 0;
                        v237 = 1;
                      }
                      v238 = *(_OWORD *)(v130 + 200);
                      v239 = *(_QWORD *)(v130 + 216);
                      *(_QWORD *)(v130 + 200) = 0;
                      *(_QWORD *)(v130 + 208) = 0;
                      *(_QWORD *)(v130 + 216) = 0;
                      do
                      {
                        v158 = v151;
                        v159 = *(_OWORD *)v151;
                        v160 = *(_OWORD *)(v151 + 32);
                        *(_OWORD *)(v130 + 16) = *(_OWORD *)(v151 + 16);
                        *(_OWORD *)(v130 + 32) = v160;
                        *(_OWORD *)v130 = v159;
                        v161 = *(_OWORD *)(v151 + 48);
                        v162 = *(_OWORD *)(v151 + 64);
                        v163 = *(_OWORD *)(v151 + 80);
                        *(_QWORD *)(v130 + 96) = *(_QWORD *)(v151 + 96);
                        *(_OWORD *)(v130 + 64) = v162;
                        *(_OWORD *)(v130 + 80) = v163;
                        *(_OWORD *)(v130 + 48) = v161;
                        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, (__n128 *)(v151 + 104));
                        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, (__n128 *)(v158 + 136));
                        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, (__n128 *)(v158 + 168));
                        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                        *(_OWORD *)(v130 + 200) = *(_OWORD *)(v158 + 200);
                        *(_QWORD *)(v130 + 216) = *(_QWORD *)(v158 + 216);
                        *(_QWORD *)(v158 + 200) = 0;
                        *(_QWORD *)(v158 + 208) = 0;
                        *(_QWORD *)(v158 + 216) = 0;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = a1 + 224 * v150;
                        v130 = v158;
                      }
                      while (*(_QWORD *)v151 < (unint64_t)v222);
                      v164 = v222;
                      v165 = v224;
                      *(_OWORD *)(v158 + 16) = v223;
                      *(_OWORD *)(v158 + 32) = v165;
                      *(_OWORD *)v158 = v164;
                      v166 = v225;
                      v167 = v226;
                      v168 = v227;
                      *(_QWORD *)(v158 + 96) = v228;
                      *(_OWORD *)(v158 + 64) = v167;
                      *(_OWORD *)(v158 + 80) = v168;
                      *(_OWORD *)(v158 + 48) = v166;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v158 + 104, &v229);
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v158 + 136, &v232);
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v158 + 168, &__p);
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v158 + 200));
                      *(_OWORD *)(v158 + 200) = v238;
                      *(_QWORD *)(v158 + 216) = v239;
                      v238 = 0uLL;
                      v239 = 0;
                      v221 = (void **)&v238;
                      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v221);
                      if (v237 && __p.n128_u64[0])
                      {
                        __p.n128_u64[1] = __p.n128_u64[0];
                        operator delete((void *)__p.n128_u64[0]);
                      }
                      if (v234 && v232.n128_u64[0])
                      {
                        v232.n128_u64[1] = v232.n128_u64[0];
                        operator delete((void *)v232.n128_u64[0]);
                      }
                      if (v231 && SHIBYTE(v230) < 0)
                        operator delete((void *)v229.n128_u64[0]);
                    }
                  }
                }
                *(_QWORD *)&v222 = &v219;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
                if (v218 && v216.n128_u64[0])
                {
                  v216.n128_u64[1] = v216.n128_u64[0];
                  operator delete((void *)v216.n128_u64[0]);
                }
                if (v215 && v213.n128_u64[0])
                {
                  v213.n128_u64[1] = v213.n128_u64[0];
                  operator delete((void *)v213.n128_u64[0]);
                }
                if (v212 && SHIBYTE(v211) < 0)
                  operator delete((void *)v210.n128_u64[0]);
                v174 = v121-- <= 2;
                v7 = v201 - 14;
              }
              while (!v174);
            }
            return;
          }
          v10 = v9 >> 1;
          v11 = (__int128 *)(a1 + 224 * (v9 >> 1));
          if ((unint64_t)v8 <= 0x7000)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 224 * (v9 >> 1)), (__int128 *)a1, v197);
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224 * (v9 >> 1)), v197);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 224), (__int128 *)(224 * v10 + a1 - 224), v196);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 448), (__int128 *)(a1 + 224 + 224 * v10), v195);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(224 * v10 + a1 - 224), v11, (__int128 *)(a1 + 224 + 224 * v10));
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)a1, v11);
          }
          --a3;
          if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 224) >= *(_QWORD *)a1)
          {
            v40 = *(_OWORD *)a1;
            v41 = *(_OWORD *)(a1 + 32);
            v223 = *(_OWORD *)(a1 + 16);
            v224 = v41;
            v222 = v40;
            v42 = *(_OWORD *)(a1 + 48);
            v43 = *(_OWORD *)(a1 + 64);
            v44 = *(_OWORD *)(a1 + 80);
            v228 = *(_QWORD *)(a1 + 96);
            v226 = v43;
            v227 = v44;
            v225 = v42;
            v229.n128_u8[0] = 0;
            v231 = 0;
            if (*(_BYTE *)(a1 + 128))
            {
              v45 = *(__n128 *)(a1 + 104);
              v230 = *(_QWORD *)(a1 + 120);
              v229 = v45;
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 104) = 0;
              v231 = 1;
            }
            v232.n128_u8[0] = 0;
            v234 = 0;
            if (*(_BYTE *)(a1 + 160))
            {
              v232 = *(__n128 *)(a1 + 136);
              v233 = *(_QWORD *)(a1 + 152);
              *(_QWORD *)(a1 + 136) = 0;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              v234 = 1;
            }
            __p.n128_u8[0] = 0;
            v237 = 0;
            if (*(_BYTE *)(a1 + 192))
            {
              __p = *(__n128 *)(a1 + 168);
              v236 = *(_QWORD *)(a1 + 184);
              *(_QWORD *)(a1 + 168) = 0;
              *(_QWORD *)(a1 + 176) = 0;
              *(_QWORD *)(a1 + 184) = 0;
              v237 = 1;
            }
            v238 = *(_OWORD *)(a1 + 200);
            v239 = *(_QWORD *)(a1 + 216);
            *(_QWORD *)(a1 + 200) = 0;
            *(_QWORD *)(a1 + 208) = 0;
            *(_QWORD *)(a1 + 216) = 0;
            v46 = v222;
            if ((unint64_t)v222 >= *(_QWORD *)v197)
            {
              v48 = a1 + 224;
              do
              {
                v6 = v48;
                if (v48 >= (unint64_t)v202)
                  break;
                v48 += 224;
              }
              while ((unint64_t)v222 >= *(_QWORD *)v6);
            }
            else
            {
              v6 = a1;
              do
              {
                v47 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while ((unint64_t)v222 >= v47);
            }
            v49 = v202;
            if (v6 < (unint64_t)v202)
            {
              v49 = v202;
              do
              {
                v50 = *((_QWORD *)v49 - 28);
                v49 -= 14;
              }
              while ((unint64_t)v222 < v50);
            }
            while (v6 < (unint64_t)v49)
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)v6, v49);
              do
              {
                v51 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while (v46 >= v51);
              do
              {
                v52 = *((_QWORD *)v49 - 28);
                v49 -= 14;
              }
              while (v46 < v52);
            }
            v53 = (__int128 *)(v6 - 224);
            if (v6 - 224 != a1)
            {
              v54 = *v53;
              v55 = *(_OWORD *)(v6 - 192);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 - 208);
              *(_OWORD *)(a1 + 32) = v55;
              *(_OWORD *)a1 = v54;
              v56 = *(_OWORD *)(v6 - 176);
              v57 = *(_OWORD *)(v6 - 160);
              v58 = *(_OWORD *)(v6 - 144);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 - 128);
              *(_OWORD *)(a1 + 64) = v57;
              *(_OWORD *)(a1 + 80) = v58;
              *(_OWORD *)(a1 + 48) = v56;
              std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v6 - 120));
              std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v6 - 88));
              std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v6 - 56));
              std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
              *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(a1 + 216) = *(_QWORD *)(v6 - 8);
              *(_QWORD *)(v6 - 24) = 0;
              *(_QWORD *)(v6 - 16) = 0;
              *(_QWORD *)(v6 - 8) = 0;
            }
            v59 = v222;
            v60 = v224;
            *(_OWORD *)(v6 - 208) = v223;
            *(_OWORD *)(v6 - 192) = v60;
            *v53 = v59;
            v61 = v225;
            v62 = v226;
            v63 = v227;
            *(_QWORD *)(v6 - 128) = v228;
            *(_OWORD *)(v6 - 160) = v62;
            *(_OWORD *)(v6 - 144) = v63;
            *(_OWORD *)(v6 - 176) = v61;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 - 120, &v229);
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 88, &v232);
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 56, &__p);
            std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v6 - 24));
            *(_OWORD *)(v6 - 24) = v238;
            *(_QWORD *)(v6 - 8) = v239;
            v238 = 0uLL;
            v239 = 0;
            *(_QWORD *)&v203 = &v238;
            std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
            if (v237 && __p.n128_u64[0])
            {
              __p.n128_u64[1] = __p.n128_u64[0];
              operator delete((void *)__p.n128_u64[0]);
            }
            if (v234 && v232.n128_u64[0])
            {
              v232.n128_u64[1] = v232.n128_u64[0];
              operator delete((void *)v232.n128_u64[0]);
            }
            if (v231 && SHIBYTE(v230) < 0)
              operator delete((void *)v229.n128_u64[0]);
            goto LABEL_45;
          }
          v12 = *(_OWORD *)a1;
          v13 = *(_OWORD *)(a1 + 32);
          v223 = *(_OWORD *)(a1 + 16);
          v224 = v13;
          v222 = v12;
          v14 = *(_OWORD *)(a1 + 48);
          v15 = *(_OWORD *)(a1 + 64);
          v16 = *(_OWORD *)(a1 + 80);
          v228 = *(_QWORD *)(a1 + 96);
          v226 = v15;
          v227 = v16;
          v225 = v14;
          v229.n128_u8[0] = 0;
          v231 = 0;
          if (*(_BYTE *)(a1 + 128))
          {
            v17 = *(__n128 *)(a1 + 104);
            v230 = *(_QWORD *)(a1 + 120);
            v229 = v17;
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_QWORD *)(a1 + 104) = 0;
            v231 = 1;
          }
          v232.n128_u8[0] = 0;
          v234 = 0;
          if (*(_BYTE *)(a1 + 160))
          {
            v232 = *(__n128 *)(a1 + 136);
            v233 = *(_QWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 136) = 0;
            *(_QWORD *)(a1 + 144) = 0;
            *(_QWORD *)(a1 + 152) = 0;
            v234 = 1;
          }
          __p.n128_u8[0] = 0;
          v237 = 0;
          if (*(_BYTE *)(a1 + 192))
          {
            __p = *(__n128 *)(a1 + 168);
            v236 = *(_QWORD *)(a1 + 184);
            *(_QWORD *)(a1 + 168) = 0;
            *(_QWORD *)(a1 + 176) = 0;
            *(_QWORD *)(a1 + 184) = 0;
            v237 = 1;
          }
          v18 = 0;
          v238 = *(_OWORD *)(a1 + 200);
          v239 = *(_QWORD *)(a1 + 216);
          *(_QWORD *)(a1 + 200) = 0;
          *(_QWORD *)(a1 + 208) = 0;
          *(_QWORD *)(a1 + 216) = 0;
          v19 = v222;
          do
          {
            v20 = *(_QWORD *)(a1 + v18 + 224);
            v18 += 224;
          }
          while (v20 < (unint64_t)v222);
          v21 = a1 + v18;
          v22 = v202;
          if (v18 == 224)
          {
            v22 = v202;
            do
            {
              if (v21 >= (unint64_t)v22)
                break;
              v24 = *((_QWORD *)v22 - 28);
              v22 -= 14;
            }
            while (v24 >= (unint64_t)v222);
          }
          else
          {
            do
            {
              v23 = *((_QWORD *)v22 - 28);
              v22 -= 14;
            }
            while (v23 >= (unint64_t)v222);
          }
          v6 = a1 + v18;
          if (v21 < (unint64_t)v22)
          {
            v25 = v22;
            do
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)v6, v25);
              do
              {
                v26 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while (v26 < v19);
              do
              {
                v27 = *((_QWORD *)v25 - 28);
                v25 -= 14;
              }
              while (v27 >= v19);
            }
            while (v6 < (unint64_t)v25);
          }
          v28 = (__int128 *)(v6 - 224);
          if (v6 - 224 != a1)
          {
            v29 = *v28;
            v30 = *(_OWORD *)(v6 - 192);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 - 208);
            *(_OWORD *)(a1 + 32) = v30;
            *(_OWORD *)a1 = v29;
            v31 = *(_OWORD *)(v6 - 176);
            v32 = *(_OWORD *)(v6 - 160);
            v33 = *(_OWORD *)(v6 - 144);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 - 128);
            *(_OWORD *)(a1 + 64) = v32;
            *(_OWORD *)(a1 + 80) = v33;
            *(_OWORD *)(a1 + 48) = v31;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v6 - 120));
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v6 - 88));
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v6 - 56));
            std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
            *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 - 24);
            *(_QWORD *)(a1 + 216) = *(_QWORD *)(v6 - 8);
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 8) = 0;
          }
          v34 = v222;
          v35 = v224;
          *(_OWORD *)(v6 - 208) = v223;
          *(_OWORD *)(v6 - 192) = v35;
          *v28 = v34;
          v36 = v225;
          v37 = v226;
          v38 = v227;
          *(_QWORD *)(v6 - 128) = v228;
          *(_OWORD *)(v6 - 160) = v37;
          *(_OWORD *)(v6 - 144) = v38;
          *(_OWORD *)(v6 - 176) = v36;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 - 120, &v229);
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 88, &v232);
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 56, &__p);
          std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v6 - 24));
          *(_OWORD *)(v6 - 24) = v238;
          *(_QWORD *)(v6 - 8) = v239;
          v238 = 0uLL;
          v239 = 0;
          *(_QWORD *)&v203 = &v238;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
          if (v237 && __p.n128_u64[0])
          {
            __p.n128_u64[1] = __p.n128_u64[0];
            operator delete((void *)__p.n128_u64[0]);
          }
          if (v234 && v232.n128_u64[0])
          {
            v232.n128_u64[1] = v232.n128_u64[0];
            operator delete((void *)v232.n128_u64[0]);
          }
          if (v231 && SHIBYTE(v230) < 0)
            operator delete((void *)v229.n128_u64[0]);
          if (v21 < (unint64_t)v22)
            goto LABEL_44;
          v39 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((__int128 *)a1, (__int128 *)(v6 - 224));
          if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((__int128 *)v6, v202))
          {
            if (v39)
              continue;
LABEL_44:
            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v6 - 224, a3, a4 & 1);
LABEL_45:
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v6 - 224);
          if (v39)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((__int128 *)a1 != v202)
          {
            v67 = a1 + 224;
            if ((__int128 *)(a1 + 224) != v202)
            {
              v68 = 0;
              v69 = a1;
              do
              {
                v70 = v67;
                if (*(_QWORD *)(v69 + 224) < *(_QWORD *)v69)
                {
                  v71 = *(_OWORD *)v67;
                  v72 = *(_OWORD *)(v67 + 32);
                  v223 = *(_OWORD *)(v67 + 16);
                  v224 = v72;
                  v222 = v71;
                  v73 = *(_OWORD *)(v67 + 48);
                  v74 = *(_OWORD *)(v67 + 64);
                  v75 = *(_OWORD *)(v67 + 80);
                  v228 = *(_QWORD *)(v67 + 96);
                  v226 = v74;
                  v227 = v75;
                  v225 = v73;
                  v229.n128_u8[0] = 0;
                  v231 = 0;
                  if (*(_BYTE *)(v69 + 352))
                  {
                    v230 = *(_QWORD *)(v69 + 344);
                    v229 = *(__n128 *)(v69 + 328);
                    *(_QWORD *)(v69 + 336) = 0;
                    *(_QWORD *)(v69 + 344) = 0;
                    *(_QWORD *)(v69 + 328) = 0;
                    v231 = 1;
                  }
                  v76 = (__n128 *)(v69 + 360);
                  v232.n128_u8[0] = 0;
                  v234 = 0;
                  if (*(_BYTE *)(v69 + 384))
                  {
                    v232 = *v76;
                    v233 = *(_QWORD *)(v69 + 376);
                    v76->n128_u64[0] = 0;
                    *(_QWORD *)(v69 + 368) = 0;
                    *(_QWORD *)(v69 + 376) = 0;
                    v234 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  v237 = 0;
                  if (*(_BYTE *)(v69 + 416))
                  {
                    __p = *(__n128 *)(v69 + 392);
                    v236 = *(_QWORD *)(v69 + 408);
                    *(_QWORD *)(v69 + 392) = 0;
                    *(_QWORD *)(v69 + 400) = 0;
                    *(_QWORD *)(v69 + 408) = 0;
                    v237 = 1;
                  }
                  v238 = *(_OWORD *)(v69 + 424);
                  v239 = *(_QWORD *)(v69 + 440);
                  *(_QWORD *)(v69 + 424) = 0;
                  *(_QWORD *)(v69 + 432) = 0;
                  *(_QWORD *)(v69 + 440) = 0;
                  v77 = v68;
                  while (1)
                  {
                    v78 = v77;
                    v79 = a1 + v77;
                    v80 = *(_OWORD *)(a1 + v77 + 80);
                    *(_OWORD *)(v79 + 288) = *(_OWORD *)(a1 + v77 + 64);
                    *(_OWORD *)(v79 + 304) = v80;
                    *(_QWORD *)(v79 + 320) = *(_QWORD *)(a1 + v77 + 96);
                    v81 = *(_OWORD *)(a1 + v77 + 16);
                    *(_OWORD *)(v79 + 224) = *(_OWORD *)v79;
                    *(_OWORD *)(v79 + 240) = v81;
                    v82 = *(_OWORD *)(a1 + v77 + 48);
                    *(_OWORD *)(v79 + 256) = *(_OWORD *)(a1 + v77 + 32);
                    *(_OWORD *)(v79 + 272) = v82;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v77 + 328, (__n128 *)(a1 + v77 + 104));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v79 + 360, (__n128 *)(v79 + 136));
                    v83 = a1 + v78;
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 392, (__n128 *)(a1 + v78 + 168));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + v78 + 424));
                    *(_OWORD *)(v83 + 424) = *(_OWORD *)(v83 + 200);
                    *(_QWORD *)(v83 + 440) = *(_QWORD *)(v83 + 216);
                    *(_QWORD *)(v83 + 208) = 0;
                    *(_QWORD *)(v83 + 216) = 0;
                    *(_QWORD *)(v83 + 200) = 0;
                    if (!v78)
                      break;
                    v77 = v78 - 224;
                    if ((unint64_t)v222 >= *(_QWORD *)(a1 + v78 - 224))
                    {
                      v84 = a1 + v78;
                      goto LABEL_107;
                    }
                  }
                  v84 = a1;
LABEL_107:
                  v85 = v222;
                  v86 = v224;
                  *(_OWORD *)(v84 + 16) = v223;
                  *(_OWORD *)(v84 + 32) = v86;
                  *(_OWORD *)v84 = v85;
                  v87 = v225;
                  v88 = v226;
                  v89 = v227;
                  *(_QWORD *)(v84 + 96) = v228;
                  *(_OWORD *)(v84 + 64) = v88;
                  *(_OWORD *)(v84 + 80) = v89;
                  *(_OWORD *)(v84 + 48) = v87;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v78 + 104, &v229);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 136, &v232);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 168, &__p);
                  v90 = (uint64_t *)(a1 + v78 + 200);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v90);
                  *v90 = v238;
                  *(_QWORD *)(v84 + 208) = *((_QWORD *)&v238 + 1);
                  *(_QWORD *)(v84 + 216) = v239;
                  v238 = 0uLL;
                  v239 = 0;
                  *(_QWORD *)&v203 = &v238;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                  if (v237 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v234 && v232.n128_u64[0])
                  {
                    v232.n128_u64[1] = v232.n128_u64[0];
                    operator delete((void *)v232.n128_u64[0]);
                  }
                  if (v231 && SHIBYTE(v230) < 0)
                    operator delete((void *)v229.n128_u64[0]);
                  v7 = v202;
                }
                v67 = v70 + 224;
                v68 += 224;
                v69 = v70;
              }
              while ((__int128 *)(v70 + 224) != v7);
            }
          }
        }
        else if ((__int128 *)a1 != v202)
        {
          v175 = a1 + 224;
          if ((__int128 *)(a1 + 224) != v202)
          {
            v176 = a1 - 224;
            do
            {
              v177 = v175;
              if (*(_QWORD *)(a1 + 224) < *(_QWORD *)a1)
              {
                v178 = *(_OWORD *)v175;
                v179 = *(_OWORD *)(v175 + 32);
                v223 = *(_OWORD *)(v175 + 16);
                v224 = v179;
                v222 = v178;
                v180 = *(_OWORD *)(v175 + 48);
                v181 = *(_OWORD *)(v175 + 64);
                v182 = *(_OWORD *)(v175 + 80);
                v228 = *(_QWORD *)(v175 + 96);
                v226 = v181;
                v227 = v182;
                v225 = v180;
                v229.n128_u8[0] = 0;
                v231 = 0;
                if (*(_BYTE *)(a1 + 352))
                {
                  v230 = *(_QWORD *)(a1 + 344);
                  v229 = *(__n128 *)(a1 + 328);
                  *(_QWORD *)(a1 + 336) = 0;
                  *(_QWORD *)(a1 + 344) = 0;
                  *(_QWORD *)(a1 + 328) = 0;
                  v231 = 1;
                }
                v183 = (__n128 *)(a1 + 360);
                v232.n128_u8[0] = 0;
                v234 = 0;
                if (*(_BYTE *)(a1 + 384))
                {
                  v232 = *v183;
                  v233 = *(_QWORD *)(a1 + 376);
                  v183->n128_u64[0] = 0;
                  *(_QWORD *)(a1 + 368) = 0;
                  *(_QWORD *)(a1 + 376) = 0;
                  v234 = 1;
                }
                __p.n128_u8[0] = 0;
                v237 = 0;
                if (*(_BYTE *)(a1 + 416))
                {
                  __p = *(__n128 *)(a1 + 392);
                  v236 = *(_QWORD *)(a1 + 408);
                  *(_QWORD *)(a1 + 392) = 0;
                  *(_QWORD *)(a1 + 400) = 0;
                  *(_QWORD *)(a1 + 408) = 0;
                  v237 = 1;
                }
                v238 = *(_OWORD *)(a1 + 424);
                v239 = *(_QWORD *)(a1 + 440);
                *(_QWORD *)(a1 + 424) = 0;
                *(_QWORD *)(a1 + 432) = 0;
                *(_QWORD *)(a1 + 440) = 0;
                v184 = v176;
                do
                {
                  v185 = *(_OWORD *)(v184 + 304);
                  *(_OWORD *)(v184 + 512) = *(_OWORD *)(v184 + 288);
                  *(_OWORD *)(v184 + 528) = v185;
                  *(_QWORD *)(v184 + 544) = *(_QWORD *)(v184 + 320);
                  v186 = *(_OWORD *)(v184 + 240);
                  *(_OWORD *)(v184 + 448) = *(_OWORD *)(v184 + 224);
                  *(_OWORD *)(v184 + 464) = v186;
                  v187 = *(_OWORD *)(v184 + 272);
                  *(_OWORD *)(v184 + 480) = *(_OWORD *)(v184 + 256);
                  *(_OWORD *)(v184 + 496) = v187;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v184 + 552, (__n128 *)(v184 + 328));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 584, (__n128 *)(v184 + 360));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 616, (__n128 *)(v184 + 392));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v184 + 648));
                  *(_OWORD *)(v184 + 648) = *(_OWORD *)(v184 + 424);
                  *(_QWORD *)(v184 + 664) = *(_QWORD *)(v184 + 440);
                  *(_QWORD *)(v184 + 424) = 0;
                  *(_QWORD *)(v184 + 432) = 0;
                  *(_QWORD *)(v184 + 440) = 0;
                  v188 = *(_QWORD *)v184;
                  v184 -= 224;
                }
                while ((unint64_t)v222 < v188);
                v189 = v222;
                v190 = v224;
                *(_OWORD *)(v184 + 464) = v223;
                *(_OWORD *)(v184 + 480) = v190;
                *(_OWORD *)(v184 + 448) = v189;
                v191 = v225;
                v192 = v226;
                v193 = v227;
                *(_QWORD *)(v184 + 544) = v228;
                *(_OWORD *)(v184 + 512) = v192;
                *(_OWORD *)(v184 + 528) = v193;
                *(_OWORD *)(v184 + 496) = v191;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v184 + 552, &v229);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 584, &v232);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 616, &__p);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v184 + 648));
                *(_OWORD *)(v184 + 648) = v238;
                *(_QWORD *)(v184 + 664) = v239;
                v238 = 0uLL;
                v239 = 0;
                *(_QWORD *)&v203 = &v238;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                if (v237 && __p.n128_u64[0])
                {
                  __p.n128_u64[1] = __p.n128_u64[0];
                  operator delete((void *)__p.n128_u64[0]);
                }
                if (v234 && v232.n128_u64[0])
                {
                  v232.n128_u64[1] = v232.n128_u64[0];
                  operator delete((void *)v232.n128_u64[0]);
                }
                if (v231 && SHIBYTE(v230) < 0)
                  operator delete((void *)v229.n128_u64[0]);
                v7 = v202;
              }
              v175 = v177 + 224;
              v176 += 224;
              a1 = v177;
            }
            while ((__int128 *)(v177 + 224) != v7);
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v44 = *(_QWORD *)(a2 - 40);
        v43 = a2 - 40;
        if (v44 < *(_QWORD *)v8)
        {
          v141 = *(_QWORD *)(v8 + 32);
          v122 = *(_OWORD *)v8;
          v131 = *(_OWORD *)(v8 + 16);
          v45 = *(_OWORD *)v43;
          v46 = *(_OWORD *)(v43 + 16);
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(v43 + 32);
          *(_OWORD *)v8 = v45;
          *(_OWORD *)(v8 + 16) = v46;
          *(_QWORD *)(v43 + 32) = v141;
          *(_OWORD *)v43 = v122;
          *(_OWORD *)(v43 + 16) = v131;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)v8, (unint64_t *)(v8 + 40), (unint64_t *)(a2 - 40));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v8, v8 + 40, v8 + 80, a2 - 40);
        return;
      case 5:
        v47 = (__int128 *)(v8 + 40);
        v48 = (__int128 *)(v8 + 80);
        v49 = (__int128 *)(v8 + 120);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v8, v8 + 40, v8 + 80, v8 + 120);
        v51 = *(_QWORD *)(a2 - 40);
        v50 = a2 - 40;
        if (v51 < *(_QWORD *)(v8 + 120))
        {
          v52 = *v49;
          v132 = *(_OWORD *)(v8 + 136);
          v53 = *(_QWORD *)(v8 + 152);
          v55 = *(_OWORD *)v50;
          v54 = *(_OWORD *)(v50 + 16);
          *(_QWORD *)(v8 + 152) = *(_QWORD *)(v50 + 32);
          *v49 = v55;
          *(_OWORD *)(v8 + 136) = v54;
          *(_QWORD *)(v50 + 32) = v53;
          *(_OWORD *)v50 = v52;
          *(_OWORD *)(v50 + 16) = v132;
          if (*(_QWORD *)v49 < *(_QWORD *)v48)
          {
            v56 = *(_QWORD *)(v8 + 112);
            v58 = *v48;
            v57 = *(_OWORD *)(v8 + 96);
            v59 = *(_OWORD *)(v8 + 136);
            *v48 = *v49;
            *(_OWORD *)(v8 + 96) = v59;
            *(_QWORD *)(v8 + 112) = *(_QWORD *)(v8 + 152);
            *v49 = v58;
            *(_OWORD *)(v8 + 136) = v57;
            *(_QWORD *)(v8 + 152) = v56;
            if (*(_QWORD *)v48 < *(_QWORD *)v47)
            {
              v60 = *(_QWORD *)(v8 + 72);
              v62 = *v47;
              v61 = *(_OWORD *)(v8 + 56);
              v63 = *(_OWORD *)(v8 + 96);
              *v47 = *v48;
              *(_OWORD *)(v8 + 56) = v63;
              *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 112);
              *v48 = v62;
              *(_OWORD *)(v8 + 96) = v61;
              *(_QWORD *)(v8 + 112) = v60;
              if (*(_QWORD *)(v8 + 40) < *(_QWORD *)v8)
              {
                v142 = *(_QWORD *)(v8 + 32);
                v123 = *(_OWORD *)v8;
                v133 = *(_OWORD *)(v8 + 16);
                v64 = *(_OWORD *)(v8 + 56);
                *(_OWORD *)v8 = *v47;
                *(_OWORD *)(v8 + 16) = v64;
                *(_QWORD *)(v8 + 32) = *(_QWORD *)(v8 + 72);
                *v47 = v123;
                *(_OWORD *)(v8 + 56) = v133;
                *(_QWORD *)(v8 + 72) = v142;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 959)
        {
          v65 = v8 + 40;
          v67 = v8 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v8;
              do
              {
                v70 = v65;
                v71 = *(_QWORD *)(v69 + 40);
                if (v71 < *(_QWORD *)v69)
                {
                  v124 = *(_OWORD *)(v69 + 48);
                  v134 = *(_OWORD *)(v69 + 64);
                  v72 = v68;
                  while (1)
                  {
                    v73 = v8 + v72;
                    v74 = *(_OWORD *)(v8 + v72 + 16);
                    *(_OWORD *)(v73 + 40) = *(_OWORD *)(v8 + v72);
                    *(_OWORD *)(v73 + 56) = v74;
                    *(_QWORD *)(v73 + 72) = *(_QWORD *)(v8 + v72 + 32);
                    if (!v72)
                      break;
                    v72 -= 40;
                    if (v71 >= *(_QWORD *)(v73 - 40))
                    {
                      v75 = v8 + v72 + 40;
                      goto LABEL_75;
                    }
                  }
                  v75 = v8;
LABEL_75:
                  *(_QWORD *)v75 = v71;
                  *(_OWORD *)(v75 + 24) = v134;
                  *(_OWORD *)(v75 + 8) = v124;
                }
                v65 = v70 + 40;
                v68 += 40;
                v69 = v70;
              }
              while (v70 + 40 != a2);
            }
          }
          else if (!v67)
          {
            do
            {
              v109 = v65;
              v110 = *(_QWORD *)(a1 + 40);
              if (v110 < *(_QWORD *)a1)
              {
                v127 = *(_OWORD *)(a1 + 48);
                v137 = *(_OWORD *)(a1 + 64);
                do
                {
                  v111 = *(_OWORD *)(v65 - 24);
                  *(_OWORD *)v65 = *(_OWORD *)(v65 - 40);
                  *(_OWORD *)(v65 + 16) = v111;
                  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v65 - 8);
                  v112 = *(_QWORD *)(v65 - 80);
                  v65 -= 40;
                }
                while (v110 < v112);
                *(_QWORD *)v65 = v110;
                *(_OWORD *)(v65 + 24) = v137;
                *(_OWORD *)(v65 + 8) = v127;
              }
              v65 = v109 + 40;
              a1 = v109;
            }
            while (v109 + 40 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v76 = (unint64_t)(v10 - 2) >> 1;
            v77 = v76;
            do
            {
              v78 = v77;
              if (v76 >= v77)
              {
                v79 = (2 * v77) | 1;
                v80 = v8 + 40 * v79;
                if (2 * v78 + 2 >= v10)
                {
                  v81 = *(_QWORD *)v80;
                }
                else
                {
                  v81 = *(_QWORD *)(v80 + 40);
                  v82 = *(_QWORD *)v80 >= v81;
                  if (*(_QWORD *)v80 > v81)
                    v81 = *(_QWORD *)v80;
                  if (!v82)
                  {
                    v80 += 40;
                    v79 = 2 * v78 + 2;
                  }
                }
                v83 = v8 + 40 * v78;
                v84 = *(_QWORD *)v83;
                if (v81 >= *(_QWORD *)v83)
                {
                  v125 = *(_OWORD *)(v83 + 8);
                  v135 = *(_OWORD *)(v83 + 24);
                  do
                  {
                    v85 = v83;
                    v83 = v80;
                    v86 = *(_OWORD *)v80;
                    v87 = *(_OWORD *)(v80 + 16);
                    *(_QWORD *)(v85 + 32) = *(_QWORD *)(v80 + 32);
                    *(_OWORD *)v85 = v86;
                    *(_OWORD *)(v85 + 16) = v87;
                    if (v76 < v79)
                      break;
                    v88 = (2 * v79) | 1;
                    v80 = v8 + 40 * v88;
                    v79 = 2 * v79 + 2;
                    if (v79 >= v10)
                    {
                      v89 = *(_QWORD *)v80;
                      v79 = v88;
                    }
                    else
                    {
                      v89 = *(_QWORD *)v80;
                      v90 = *(_QWORD *)(v80 + 40);
                      if (*(_QWORD *)v80 <= v90)
                        v89 = *(_QWORD *)(v80 + 40);
                      if (*(_QWORD *)v80 >= v90)
                        v79 = v88;
                      else
                        v80 += 40;
                    }
                  }
                  while (v89 >= v84);
                  *(_QWORD *)v83 = v84;
                  *(_OWORD *)(v83 + 24) = v135;
                  *(_OWORD *)(v83 + 8) = v125;
                }
              }
              v77 = v78 - 1;
            }
            while (v78);
            v91 = v9 / 0x28uLL;
            do
            {
              v92 = 0;
              v143 = *(_QWORD *)(v8 + 32);
              v126 = *(_OWORD *)v8;
              v136 = *(_OWORD *)(v8 + 16);
              v93 = v8;
              do
              {
                v94 = v93 + 40 * v92 + 40;
                v95 = (2 * v92) | 1;
                v96 = 2 * v92 + 2;
                if (v96 < v91 && *(_QWORD *)v94 < *(_QWORD *)(v94 + 40))
                {
                  v94 += 40;
                  v95 = v96;
                }
                v97 = *(_OWORD *)v94;
                v98 = *(_OWORD *)(v94 + 16);
                *(_QWORD *)(v93 + 32) = *(_QWORD *)(v94 + 32);
                *(_OWORD *)v93 = v97;
                *(_OWORD *)(v93 + 16) = v98;
                v93 = v94;
                v92 = v95;
              }
              while (v95 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
              a2 -= 40;
              if (v94 == a2)
              {
                *(_QWORD *)(v94 + 32) = v143;
                *(_OWORD *)v94 = v126;
                *(_OWORD *)(v94 + 16) = v136;
              }
              else
              {
                v99 = *(_OWORD *)a2;
                v100 = *(_OWORD *)(a2 + 16);
                *(_QWORD *)(v94 + 32) = *(_QWORD *)(a2 + 32);
                *(_OWORD *)v94 = v99;
                *(_OWORD *)(v94 + 16) = v100;
                *(_QWORD *)(a2 + 32) = v143;
                *(_OWORD *)a2 = v126;
                *(_OWORD *)(a2 + 16) = v136;
                v101 = v94 - v8 + 40;
                if (v101 >= 41)
                {
                  v102 = (v101 / 0x28uLL - 2) >> 1;
                  v103 = v8 + 40 * v102;
                  v104 = *(_QWORD *)v94;
                  if (*(_QWORD *)v103 < *(_QWORD *)v94)
                  {
                    v115 = *(_OWORD *)(v94 + 8);
                    v118 = *(_OWORD *)(v94 + 24);
                    do
                    {
                      v105 = v94;
                      v94 = v103;
                      v106 = *(_OWORD *)v103;
                      v107 = *(_OWORD *)(v103 + 16);
                      *(_QWORD *)(v105 + 32) = *(_QWORD *)(v103 + 32);
                      *(_OWORD *)v105 = v106;
                      *(_OWORD *)(v105 + 16) = v107;
                      if (!v102)
                        break;
                      v102 = (v102 - 1) >> 1;
                      v103 = v8 + 40 * v102;
                    }
                    while (*(_QWORD *)v103 < v104);
                    *(_QWORD *)v94 = v104;
                    *(_OWORD *)(v94 + 24) = v118;
                    *(_OWORD *)(v94 + 8) = v115;
                  }
                }
              }
            }
            while (v91-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 40 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)v12, (unint64_t *)a1, (unint64_t *)(a2 - 40));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)a1, (unint64_t *)v12, (unint64_t *)(a2 - 40));
          v13 = 5 * v11;
          v14 = (unint64_t *)(a1 + 40 * v11 - 40);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)(a1 + 40), v14, (unint64_t *)(a2 - 80));
          v15 = (unint64_t *)(a1 + 40 + 8 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)(a1 + 80), v15, (unint64_t *)(a2 - 120));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>((__int128 *)v14, (unint64_t *)v12, v15);
          v138 = *(_QWORD *)(a1 + 32);
          v119 = *(_OWORD *)a1;
          v128 = *(_OWORD *)(a1 + 16);
          v16 = *(_OWORD *)v12;
          v17 = *(_OWORD *)(v12 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v12 + 32);
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(_QWORD *)(v12 + 32) = v138;
          *(_OWORD *)v12 = v119;
          *(_OWORD *)(v12 + 16) = v128;
        }
        --a3;
        v18 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 40) >= v18)
        {
          v114 = *(_OWORD *)(a1 + 8);
          v117 = *(_OWORD *)(a1 + 24);
          if (v18 >= *(_QWORD *)(a2 - 40))
          {
            v34 = a1 + 40;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v34 += 40;
            }
            while (v18 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v33 = *(_QWORD *)(v8 + 40);
              v8 += 40;
            }
            while (v18 >= v33);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v35 = a2;
            do
            {
              v36 = *(_QWORD *)(v35 - 40);
              v35 -= 40;
            }
            while (v18 < v36);
          }
          while (v8 < v35)
          {
            v140 = *(_QWORD *)(v8 + 32);
            v121 = *(_OWORD *)v8;
            v130 = *(_OWORD *)(v8 + 16);
            v37 = *(_OWORD *)v35;
            v38 = *(_OWORD *)(v35 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v35 + 32);
            *(_OWORD *)v8 = v37;
            *(_OWORD *)(v8 + 16) = v38;
            *(_QWORD *)(v35 + 32) = v140;
            *(_OWORD *)v35 = v121;
            *(_OWORD *)(v35 + 16) = v130;
            do
            {
              v39 = *(_QWORD *)(v8 + 40);
              v8 += 40;
            }
            while (v18 >= v39);
            do
            {
              v40 = *(_QWORD *)(v35 - 40);
              v35 -= 40;
            }
            while (v18 < v40);
          }
          if (v8 - 40 != a1)
          {
            v41 = *(_OWORD *)(v8 - 40);
            v42 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v41;
            *(_OWORD *)(a1 + 16) = v42;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 40) = v18;
          *(_OWORD *)(v8 - 32) = v114;
          *(_OWORD *)(v8 - 16) = v117;
          continue;
        }
        v19 = 0;
        v113 = *(_OWORD *)(a1 + 8);
        v116 = *(_OWORD *)(a1 + 24);
        do
        {
          v20 = *(_QWORD *)(a1 + v19 + 40);
          v19 += 40;
        }
        while (v20 < v18);
        v21 = a1 + v19;
        v22 = a2;
        if (v19 == 40)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *(_QWORD *)(v22 - 40);
            v22 -= 40;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            v23 = *(_QWORD *)(v22 - 40);
            v22 -= 40;
          }
          while (v23 >= v18);
        }
        v8 = a1 + v19;
        if (v21 < v22)
        {
          v25 = v22;
          do
          {
            v139 = *(_QWORD *)(v8 + 32);
            v120 = *(_OWORD *)v8;
            v129 = *(_OWORD *)(v8 + 16);
            v26 = *(_OWORD *)v25;
            v27 = *(_OWORD *)(v25 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v25 + 32);
            *(_OWORD *)v8 = v26;
            *(_OWORD *)(v8 + 16) = v27;
            *(_QWORD *)(v25 + 32) = v139;
            *(_OWORD *)v25 = v120;
            *(_OWORD *)(v25 + 16) = v129;
            do
            {
              v28 = *(_QWORD *)(v8 + 40);
              v8 += 40;
            }
            while (v28 < v18);
            do
            {
              v29 = *(_QWORD *)(v25 - 40);
              v25 -= 40;
            }
            while (v29 >= v18);
          }
          while (v8 < v25);
        }
        if (v8 - 40 != a1)
        {
          v30 = *(_OWORD *)(v8 - 40);
          v31 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v30;
          *(_OWORD *)(a1 + 16) = v31;
        }
        *(_QWORD *)(v8 - 40) = v18;
        *(_OWORD *)(v8 - 32) = v113;
        *(_OWORD *)(v8 - 16) = v116;
        if (v21 < v22)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>(a1, v8 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(a1, v8 - 40);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*>(v8, a2))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 40;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = a2[-2].n128_u64[0];
        v35 = (__int128 *)&a2[-2];
        if (v36 < *(_QWORD *)v8)
        {
          v105 = *(_OWORD *)v8;
          v114 = *(_OWORD *)(v8 + 16);
          v37 = v35[1];
          *(_OWORD *)v8 = *v35;
          *(_OWORD *)(v8 + 16) = v37;
          *v35 = v105;
          v35[1] = v114;
        }
        return;
      case 3uLL:
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)v8, (unint64_t *)(v8 + 32), a2[-2].n128_u64);
        return;
      case 4uLL:
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(v8, (__n128 *)(v8 + 32), (__n128 *)(v8 + 64), a2 - 2);
        return;
      case 5uLL:
        v38 = (__int128 *)(v8 + 32);
        v39 = (__int128 *)(v8 + 64);
        v40 = (__int128 *)(v8 + 96);
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEvT1_SP_SP_SP_SI_(v8, (__n128 *)(v8 + 32), (__n128 *)(v8 + 64), (__n128 *)(v8 + 96));
        v42 = a2[-2].n128_u64[0];
        v41 = a2 - 2;
        if (v42 < *(_QWORD *)(v8 + 96))
        {
          v43 = (__n128)*v40;
          v115 = *(__n128 *)(v8 + 112);
          v44 = v41[1];
          *v40 = (__int128)*v41;
          *(__n128 *)(v8 + 112) = v44;
          *v41 = v43;
          v41[1] = v115;
          if (*(_QWORD *)v40 < *(_QWORD *)v39)
          {
            v46 = *v39;
            v45 = *(_OWORD *)(v8 + 80);
            v47 = *(_OWORD *)(v8 + 112);
            *v39 = *v40;
            *(_OWORD *)(v8 + 80) = v47;
            *v40 = v46;
            *(_OWORD *)(v8 + 112) = v45;
            if (*(_QWORD *)v39 < *(_QWORD *)v38)
            {
              v49 = *v38;
              v48 = *(_OWORD *)(v8 + 48);
              v50 = *(_OWORD *)(v8 + 80);
              *v38 = *v39;
              *(_OWORD *)(v8 + 48) = v50;
              *v39 = v49;
              *(_OWORD *)(v8 + 80) = v48;
              if (*(_QWORD *)(v8 + 32) < *(_QWORD *)v8)
              {
                v106 = *(_OWORD *)v8;
                v116 = *(_OWORD *)(v8 + 16);
                v51 = *(_OWORD *)(v8 + 48);
                *(_OWORD *)v8 = *v38;
                *(_OWORD *)(v8 + 16) = v51;
                *v38 = v106;
                *(_OWORD *)(v8 + 48) = v116;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v52 = (__n128 *)(v8 + 32);
          v54 = (__n128 *)v8 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v8;
              do
              {
                v57 = v52;
                v58 = *(_QWORD *)(v56 + 32);
                if (v58 < *(_QWORD *)v56)
                {
                  v107 = *(_OWORD *)(v56 + 40);
                  v117 = *(_QWORD *)(v56 + 56);
                  v59 = v55;
                  while (1)
                  {
                    v60 = v8 + v59;
                    v61 = *(_OWORD *)(v8 + v59 + 16);
                    *(_OWORD *)(v60 + 32) = *(_OWORD *)(v8 + v59);
                    *(_OWORD *)(v60 + 48) = v61;
                    if (!v59)
                      break;
                    v59 -= 32;
                    if (v58 >= *(_QWORD *)(v60 - 32))
                    {
                      v62 = v8 + v59 + 32;
                      goto LABEL_75;
                    }
                  }
                  v62 = v8;
LABEL_75:
                  *(_QWORD *)v62 = v58;
                  *(_QWORD *)(v62 + 24) = v117;
                  *(_OWORD *)(v62 + 8) = v107;
                }
                v52 = v57 + 2;
                v55 += 32;
                v56 = (unint64_t)v57;
              }
              while (&v57[2] != a2);
            }
          }
          else if (!v54)
          {
            do
            {
              v92 = (uint64_t)v52;
              v93 = *(_QWORD *)(a1 + 32);
              if (v93 < *(_QWORD *)a1)
              {
                v110 = *(__n128 *)(a1 + 40);
                v120 = *(_QWORD *)(a1 + 56);
                do
                {
                  v94 = v52[-1];
                  *v52 = v52[-2];
                  v52[1] = v94;
                  v95 = v52[-4].n128_u64[0];
                  v52 -= 2;
                }
                while (v93 < v95);
                v52->n128_u64[0] = v93;
                v52[1].n128_u64[1] = v120;
                *(__n128 *)((char *)v52 + 8) = v110;
              }
              v52 = (__n128 *)(v92 + 32);
              a1 = v92;
            }
            while ((__n128 *)(v92 + 32) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v63 = (v10 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = v8 + 32 * v66;
                if (2 * v65 + 2 >= (uint64_t)v10)
                {
                  v68 = *(_QWORD *)v67;
                }
                else
                {
                  v68 = *(_QWORD *)(v67 + 32);
                  v69 = *(_QWORD *)v67 >= v68;
                  if (*(_QWORD *)v67 > v68)
                    v68 = *(_QWORD *)v67;
                  if (!v69)
                  {
                    v67 += 32;
                    v66 = 2 * v65 + 2;
                  }
                }
                v70 = v8 + 32 * v65;
                v71 = *(_QWORD *)v70;
                if (v68 >= *(_QWORD *)v70)
                {
                  v118 = *(_QWORD *)(v70 + 24);
                  v108 = *(_OWORD *)(v70 + 8);
                  do
                  {
                    v72 = (_OWORD *)v70;
                    v70 = v67;
                    v73 = *(_OWORD *)(v67 + 16);
                    *v72 = *(_OWORD *)v67;
                    v72[1] = v73;
                    if (v63 < v66)
                      break;
                    v74 = (2 * v66) | 1;
                    v67 = v8 + 32 * v74;
                    v66 = 2 * v66 + 2;
                    if (v66 >= (uint64_t)v10)
                    {
                      v75 = *(_QWORD *)v67;
                      v66 = v74;
                    }
                    else
                    {
                      v75 = *(_QWORD *)v67;
                      v76 = *(_QWORD *)(v67 + 32);
                      if (*(_QWORD *)v67 <= v76)
                        v75 = *(_QWORD *)(v67 + 32);
                      if (*(_QWORD *)v67 >= v76)
                        v66 = v74;
                      else
                        v67 += 32;
                    }
                  }
                  while (v75 >= v71);
                  *(_QWORD *)v70 = v71;
                  *(_QWORD *)(v70 + 24) = v118;
                  *(_OWORD *)(v70 + 8) = v108;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v77 = (unint64_t)v9 >> 5;
            do
            {
              v78 = 0;
              v109 = *(_OWORD *)v8;
              v119 = *(__n128 *)(v8 + 16);
              v79 = (_OWORD *)v8;
              do
              {
                v80 = (uint64_t)&v79[2 * v78 + 2];
                v81 = (2 * v78) | 1;
                v82 = 2 * v78 + 2;
                if (v82 < v77 && *(_QWORD *)v80 < *(_QWORD *)(v80 + 32))
                {
                  v80 += 32;
                  v81 = v82;
                }
                v83 = *(_OWORD *)(v80 + 16);
                *v79 = *(_OWORD *)v80;
                v79[1] = v83;
                v79 = (_OWORD *)v80;
                v78 = v81;
              }
              while (v81 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              a2 -= 2;
              if ((__n128 *)v80 == a2)
              {
                *(_OWORD *)v80 = v109;
                *(__n128 *)(v80 + 16) = v119;
              }
              else
              {
                v84 = a2[1];
                *(__n128 *)v80 = *a2;
                *(__n128 *)(v80 + 16) = v84;
                *a2 = (__n128)v109;
                a2[1] = v119;
                v85 = v80 - v8 + 32;
                if (v85 >= 33)
                {
                  v86 = (((unint64_t)v85 >> 5) - 2) >> 1;
                  v87 = (_OWORD *)(v8 + 32 * v86);
                  v88 = *(_QWORD *)v80;
                  if (*(_QWORD *)v87 < *(_QWORD *)v80)
                  {
                    v101 = *(_QWORD *)(v80 + 24);
                    v98 = *(_OWORD *)(v80 + 8);
                    do
                    {
                      v89 = (_OWORD *)v80;
                      v80 = (uint64_t)v87;
                      v90 = v87[1];
                      *v89 = *v87;
                      v89[1] = v90;
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = (_OWORD *)(v8 + 32 * v86);
                    }
                    while (*(_QWORD *)v87 < v88);
                    *(_QWORD *)v80 = v88;
                    *(_QWORD *)(v80 + 24) = v101;
                    *(_OWORD *)(v80 + 8) = v98;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 32 * (v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)(a1 + 32 * (v10 >> 1)), (unint64_t *)a1, a2[-2].n128_u64);
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)a1, (unint64_t *)(a1 + 32 * (v10 >> 1)), a2[-2].n128_u64);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)(a1 + 32), (unint64_t *)(v12 - 32), a2[-4].n128_u64);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v11), a2[-6].n128_u64);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEjT1_SP_SP_SI_((__int128 *)(v12 - 32), (unint64_t *)v12, (unint64_t *)(a1 + 32 + 32 * v11));
          v102 = *(_OWORD *)a1;
          v111 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)v12 = v102;
          *(_OWORD *)(v12 + 16) = v111;
        }
        --a3;
        v14 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 32) >= v14)
        {
          v100 = *(_QWORD *)(a1 + 24);
          v97 = *(_OWORD *)(a1 + 8);
          if (v14 >= a2[-2].n128_u64[0])
          {
            v28 = a1 + 32;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 32;
            }
            while (v14 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = *(_QWORD *)(v8 + 32);
              v8 += 32;
            }
            while (v14 >= v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
            {
              v30 = *((_QWORD *)v29 - 4);
              v29 -= 2;
            }
            while (v14 < v30);
          }
          while (v8 < (unint64_t)v29)
          {
            v104 = *(_OWORD *)v8;
            v113 = *(_OWORD *)(v8 + 16);
            v31 = v29[1];
            *(_OWORD *)v8 = *v29;
            *(_OWORD *)(v8 + 16) = v31;
            *v29 = v104;
            v29[1] = v113;
            do
            {
              v32 = *(_QWORD *)(v8 + 32);
              v8 += 32;
            }
            while (v14 >= v32);
            do
            {
              v33 = *((_QWORD *)v29 - 4);
              v29 -= 2;
            }
            while (v14 < v33);
          }
          if (v8 - 32 != a1)
          {
            v34 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 16) = v34;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v14;
          *(_QWORD *)(v8 - 8) = v100;
          *(_OWORD *)(v8 - 24) = v97;
          continue;
        }
        v15 = 0;
        v99 = *(_QWORD *)(a1 + 24);
        v96 = *(_OWORD *)(a1 + 8);
        do
        {
          v16 = *(_QWORD *)(a1 + v15 + 32);
          v15 += 32;
        }
        while (v16 < v14);
        v17 = a1 + v15;
        v18 = a2;
        if (v15 == 32)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = v18[-2].n128_u64[0];
            v18 -= 2;
          }
          while (v20 >= v14);
        }
        else
        {
          do
          {
            v19 = v18[-2].n128_u64[0];
            v18 -= 2;
          }
          while (v19 >= v14);
        }
        v8 = a1 + v15;
        if (v17 < (unint64_t)v18)
        {
          v21 = (__int128 *)v18;
          do
          {
            v103 = *(_OWORD *)v8;
            v112 = *(_OWORD *)(v8 + 16);
            v22 = v21[1];
            *(_OWORD *)v8 = *v21;
            *(_OWORD *)(v8 + 16) = v22;
            *v21 = v103;
            v21[1] = v112;
            do
            {
              v23 = *(_QWORD *)(v8 + 32);
              v8 += 32;
            }
            while (v23 < v14);
            do
            {
              v24 = *((_QWORD *)v21 - 4);
              v21 -= 2;
            }
            while (v24 >= v14);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 32 != a1)
        {
          v25 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 16) = v25;
        }
        *(_QWORD *)(v8 - 32) = v14;
        *(_QWORD *)(v8 - 8) = v99;
        *(_OWORD *)(v8 - 24) = v96;
        if (v17 < (unint64_t)v18)
        {
LABEL_29:
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(a1, v8 - 32);
        if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentEEbT1_SP_SI_(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 32);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v197 = a2 - 14;
  v202 = a2;
  v195 = a2 - 42;
  v196 = a2 - 28;
  v6 = a1;
  while (2)
  {
    a1 = v6;
    v7 = v202;
    v8 = (uint64_t)v202 - v6;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v202 - v6) >> 5);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v64 = v202 - 14;
        if (*((_QWORD *)v202 - 28) < *(_QWORD *)a1)
        {
          v65 = (__int128 *)a1;
          goto LABEL_83;
        }
        return;
      case 3uLL:
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), v197);
        return;
      case 4uLL:
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448), v197);
        return;
      case 5uLL:
        v66 = (_QWORD *)(a1 + 448);
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448), (__int128 *)(a1 + 672));
        if (*((_QWORD *)v202 - 28) < *(_QWORD *)(a1 + 672))
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 672), v202 - 14);
          if (*(_QWORD *)(a1 + 672) < *v66)
          {
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 448), (__int128 *)(a1 + 672));
            if (*v66 < *(_QWORD *)(a1 + 224))
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
              if (*(_QWORD *)(a1 + 224) < *(_QWORD *)a1)
              {
                v65 = (__int128 *)a1;
                v64 = (__int128 *)(a1 + 224);
LABEL_83:
                std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v65, v64);
              }
            }
          }
        }
        return;
      default:
        if (v8 > 5375)
        {
          if (!a3)
          {
            if ((__int128 *)a1 != v202)
            {
              v200 = (v9 - 2) >> 1;
              v91 = v200;
              do
              {
                v92 = v91;
                if (v200 >= v91)
                {
                  v93 = (2 * v91) | 1;
                  v94 = (__int128 *)(a1 + 224 * v93);
                  if (2 * v92 + 2 >= (uint64_t)v9)
                  {
                    v95 = *(_QWORD *)v94;
                  }
                  else
                  {
                    v95 = *(_QWORD *)v94;
                    v96 = *((_QWORD *)v94 + 28);
                    if (*(_QWORD *)v94 <= v96)
                      v95 = *((_QWORD *)v94 + 28);
                    if (*(_QWORD *)v94 < v96)
                    {
                      v94 += 14;
                      v93 = 2 * v92 + 2;
                    }
                  }
                  v97 = a1 + 224 * v92;
                  if (v95 >= *(_QWORD *)v97)
                  {
                    v98 = *(_OWORD *)v97;
                    v99 = *(_OWORD *)(v97 + 32);
                    v223 = *(_OWORD *)(v97 + 16);
                    v224 = v99;
                    v222 = v98;
                    v100 = *(_OWORD *)(v97 + 48);
                    v101 = *(_OWORD *)(v97 + 64);
                    v102 = *(_OWORD *)(v97 + 80);
                    v228 = *(_QWORD *)(v97 + 96);
                    v226 = v101;
                    v227 = v102;
                    v225 = v100;
                    v229.n128_u8[0] = 0;
                    v231 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 128))
                    {
                      v103 = a1 + 224 * v92;
                      v104 = *(__n128 *)(v103 + 104);
                      v230 = *(_QWORD *)(v103 + 120);
                      v229 = v104;
                      *(_QWORD *)(v103 + 112) = 0;
                      *(_QWORD *)(v103 + 120) = 0;
                      *(_QWORD *)(v103 + 104) = 0;
                      v231 = 1;
                    }
                    v232.n128_u8[0] = 0;
                    v234 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 160))
                    {
                      v105 = a1 + 224 * v92;
                      v232 = *(__n128 *)(v105 + 136);
                      v233 = *(_QWORD *)(v105 + 152);
                      *(_QWORD *)(v105 + 136) = 0;
                      *(_QWORD *)(v105 + 144) = 0;
                      *(_QWORD *)(v105 + 152) = 0;
                      v234 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    v237 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 192))
                    {
                      v106 = a1 + 224 * v92;
                      __p = *(__n128 *)(v106 + 168);
                      v236 = *(_QWORD *)(v106 + 184);
                      *(_QWORD *)(v106 + 168) = 0;
                      *(_QWORD *)(v106 + 176) = 0;
                      *(_QWORD *)(v106 + 184) = 0;
                      v237 = 1;
                    }
                    v198 = v92;
                    v107 = a1 + 224 * v92;
                    v238 = *(_OWORD *)(v107 + 200);
                    v239 = *(_QWORD *)(v107 + 216);
                    *(_QWORD *)(v107 + 200) = 0;
                    *(_QWORD *)(v107 + 208) = 0;
                    *(_QWORD *)(v107 + 216) = 0;
                    do
                    {
                      v108 = v94;
                      v109 = *v94;
                      v110 = v94[2];
                      *(_OWORD *)(v97 + 16) = v94[1];
                      *(_OWORD *)(v97 + 32) = v110;
                      *(_OWORD *)v97 = v109;
                      v111 = v94[3];
                      v112 = v94[4];
                      v113 = v94[5];
                      *(_QWORD *)(v97 + 96) = *((_QWORD *)v94 + 12);
                      *(_OWORD *)(v97 + 64) = v112;
                      *(_OWORD *)(v97 + 80) = v113;
                      *(_OWORD *)(v97 + 48) = v111;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v97 + 104, (__n128 *)((char *)v94 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v97 + 136, (__n128 *)((char *)v108 + 136));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v97 + 168, (__n128 *)((char *)v108 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v97 + 200));
                      *(_OWORD *)(v97 + 200) = *(__int128 *)((char *)v108 + 200);
                      *(_QWORD *)(v97 + 216) = *((_QWORD *)v108 + 27);
                      *((_QWORD *)v108 + 25) = 0;
                      *((_QWORD *)v108 + 26) = 0;
                      *((_QWORD *)v108 + 27) = 0;
                      if (v200 < v93)
                        break;
                      v94 = (__int128 *)(a1 + 224 * ((2 * v93) | 1));
                      if (2 * v93 + 2 >= (uint64_t)v9)
                      {
                        v114 = *(_QWORD *)v94;
                        v93 = (2 * v93) | 1;
                      }
                      else
                      {
                        v114 = *(_QWORD *)v94;
                        v115 = *((_QWORD *)v94 + 28);
                        if (*(_QWORD *)v94 <= v115)
                          v114 = *((_QWORD *)v94 + 28);
                        if (*(_QWORD *)v94 >= v115)
                        {
                          v93 = (2 * v93) | 1;
                        }
                        else
                        {
                          v94 += 14;
                          v93 = 2 * v93 + 2;
                        }
                      }
                      v97 = (unint64_t)v108;
                    }
                    while (v114 >= (unint64_t)v222);
                    v116 = v222;
                    v117 = v224;
                    v108[1] = v223;
                    v108[2] = v117;
                    *v108 = v116;
                    v118 = v225;
                    v119 = v226;
                    v120 = v227;
                    *((_QWORD *)v108 + 12) = v228;
                    v108[4] = v119;
                    v108[5] = v120;
                    v108[3] = v118;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v108 + 104, &v229);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v108 + 136, &v232);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v108 + 168, &__p);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v108 + 25);
                    *(__int128 *)((char *)v108 + 200) = v238;
                    *((_QWORD *)v108 + 27) = v239;
                    v238 = 0uLL;
                    v239 = 0;
                    *(_QWORD *)&v203 = &v238;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                    if (v237 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v234 && v232.n128_u64[0])
                    {
                      v232.n128_u64[1] = v232.n128_u64[0];
                      operator delete((void *)v232.n128_u64[0]);
                    }
                    if (v231 && SHIBYTE(v230) < 0)
                      operator delete((void *)v229.n128_u64[0]);
                    v7 = v202;
                    v92 = v198;
                  }
                }
                v91 = v92 - 1;
              }
              while (v92);
              v121 = (((unint64_t)v8 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
              v194 = (__n128 *)(a1 + 104);
              do
              {
                v122 = *(_OWORD *)a1;
                v123 = *(_OWORD *)(a1 + 32);
                v204 = *(_OWORD *)(a1 + 16);
                v205 = v123;
                v203 = v122;
                v124 = *(_OWORD *)(a1 + 48);
                v125 = *(_OWORD *)(a1 + 64);
                v126 = *(_OWORD *)(a1 + 80);
                v209 = *(_QWORD *)(a1 + 96);
                v207 = v125;
                v208 = v126;
                v206 = v124;
                v210.n128_u8[0] = 0;
                v212 = 0;
                if (*(_BYTE *)(a1 + 128))
                {
                  v127 = *v194;
                  v211 = *(_QWORD *)(a1 + 120);
                  v210 = v127;
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  v194->n128_u64[0] = 0;
                  v212 = 1;
                }
                v213.n128_u8[0] = 0;
                v215 = 0;
                if (*(_BYTE *)(a1 + 160))
                {
                  v213 = *(__n128 *)(a1 + 136);
                  v214 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  v215 = 1;
                }
                v201 = v7;
                v216.n128_u8[0] = 0;
                v218 = 0;
                if (*(_BYTE *)(a1 + 192))
                {
                  v216 = *(__n128 *)(a1 + 168);
                  v217 = *(_QWORD *)(a1 + 184);
                  *(_QWORD *)(a1 + 168) = 0;
                  *(_QWORD *)(a1 + 176) = 0;
                  *(_QWORD *)(a1 + 184) = 0;
                  v218 = 1;
                }
                v128 = 0;
                v219 = *(_OWORD *)(a1 + 200);
                v220 = *(_QWORD *)(a1 + 216);
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                *(_QWORD *)(a1 + 216) = 0;
                v129 = a1;
                do
                {
                  v130 = v129 + 224 * v128 + 224;
                  v131 = 2 * v128;
                  v128 = (2 * v128) | 1;
                  if (v131 + 2 < v121 && *(_QWORD *)v130 < *(_QWORD *)(v130 + 224))
                  {
                    v130 += 224;
                    v128 = v131 + 2;
                  }
                  v132 = *(_OWORD *)v130;
                  v133 = *(_OWORD *)(v130 + 32);
                  *(_OWORD *)(v129 + 16) = *(_OWORD *)(v130 + 16);
                  *(_OWORD *)(v129 + 32) = v133;
                  *(_OWORD *)v129 = v132;
                  v134 = *(_OWORD *)(v130 + 48);
                  v135 = *(_OWORD *)(v130 + 64);
                  v136 = *(_OWORD *)(v130 + 80);
                  *(_QWORD *)(v129 + 96) = *(_QWORD *)(v130 + 96);
                  *(_OWORD *)(v129 + 64) = v135;
                  *(_OWORD *)(v129 + 80) = v136;
                  *(_OWORD *)(v129 + 48) = v134;
                  v137 = (__n128 *)(v130 + 104);
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v129 + 104, (__n128 *)(v130 + 104));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v129 + 136, (__n128 *)(v130 + 136));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v129 + 168, (__n128 *)(v130 + 168));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v129 + 200));
                  *(_OWORD *)(v129 + 200) = *(_OWORD *)(v130 + 200);
                  *(_QWORD *)(v129 + 216) = *(_QWORD *)(v130 + 216);
                  *(_QWORD *)(v130 + 200) = 0;
                  *(_QWORD *)(v130 + 208) = 0;
                  *(_QWORD *)(v130 + 216) = 0;
                  v129 = v130;
                }
                while (v128 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
                if ((__int128 *)v130 == v201 - 14)
                {
                  v169 = v203;
                  v170 = v205;
                  *(_OWORD *)(v130 + 16) = v204;
                  *(_OWORD *)(v130 + 32) = v170;
                  *(_OWORD *)v130 = v169;
                  v171 = v206;
                  v172 = v207;
                  v173 = v208;
                  *(_QWORD *)(v130 + 96) = v209;
                  *(_OWORD *)(v130 + 64) = v172;
                  *(_OWORD *)(v130 + 80) = v173;
                  *(_OWORD *)(v130 + 48) = v171;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, &v210);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, &v213);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, &v216);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                  *(_OWORD *)(v130 + 200) = v219;
                  *(_QWORD *)(v130 + 216) = v220;
                  v219 = 0uLL;
                  v220 = 0;
                }
                else
                {
                  v138 = *(v201 - 14);
                  v139 = *(v201 - 12);
                  *(_OWORD *)(v130 + 16) = *(v201 - 13);
                  *(_OWORD *)(v130 + 32) = v139;
                  *(_OWORD *)v130 = v138;
                  v140 = *(v201 - 11);
                  v141 = *(v201 - 10);
                  v142 = *(v201 - 9);
                  *(_QWORD *)(v130 + 96) = *((_QWORD *)v201 - 16);
                  *(_OWORD *)(v130 + 64) = v141;
                  *(_OWORD *)(v130 + 80) = v142;
                  *(_OWORD *)(v130 + 48) = v140;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, (__n128 *)((char *)v201 - 120));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, (__n128 *)((char *)v201 - 88));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, (__n128 *)((char *)v201 - 56));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                  v143 = (_QWORD *)v201 - 3;
                  *(_OWORD *)(v130 + 200) = *(__int128 *)((char *)v201 - 24);
                  *(_QWORD *)(v130 + 216) = *((_QWORD *)v201 - 1);
                  *v143 = 0;
                  v143[1] = 0;
                  v143[2] = 0;
                  v144 = v203;
                  v145 = v205;
                  *(v201 - 13) = v204;
                  *(v201 - 12) = v145;
                  *(v201 - 14) = v144;
                  v146 = v206;
                  v147 = v207;
                  v148 = v208;
                  *((_QWORD *)v201 - 16) = v209;
                  *(v201 - 10) = v147;
                  *(v201 - 9) = v148;
                  *(v201 - 11) = v146;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v201 - 120, &v210);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v201 - 88, &v213);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v201 - 56, &v216);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v201 - 3);
                  *(__int128 *)((char *)v201 - 24) = v219;
                  *((_QWORD *)v201 - 1) = v220;
                  v219 = 0uLL;
                  v220 = 0;
                  v149 = v130 + 224 - a1;
                  if (v149 >= 225)
                  {
                    v150 = (unint64_t)(((((unint64_t)v149 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                            - 2) >> 1;
                    v151 = a1 + 224 * v150;
                    if (*(_QWORD *)v151 < *(_QWORD *)v130)
                    {
                      v152 = *(_OWORD *)v130;
                      v153 = *(_OWORD *)(v130 + 32);
                      v223 = *(_OWORD *)(v130 + 16);
                      v224 = v153;
                      v222 = v152;
                      v154 = *(_OWORD *)(v130 + 48);
                      v155 = *(_OWORD *)(v130 + 64);
                      v156 = *(_OWORD *)(v130 + 80);
                      v228 = *(_QWORD *)(v130 + 96);
                      v226 = v155;
                      v227 = v156;
                      v225 = v154;
                      v229.n128_u8[0] = 0;
                      v231 = 0;
                      if (*(_BYTE *)(v130 + 128))
                      {
                        v157 = *v137;
                        v230 = *(_QWORD *)(v130 + 120);
                        v229 = v157;
                        *(_QWORD *)(v130 + 112) = 0;
                        *(_QWORD *)(v130 + 120) = 0;
                        v137->n128_u64[0] = 0;
                        v231 = 1;
                      }
                      v232.n128_u8[0] = 0;
                      v234 = 0;
                      if (*(_BYTE *)(v130 + 160))
                      {
                        v232 = *(__n128 *)(v130 + 136);
                        v233 = *(_QWORD *)(v130 + 152);
                        *(_QWORD *)(v130 + 136) = 0;
                        *(_QWORD *)(v130 + 144) = 0;
                        *(_QWORD *)(v130 + 152) = 0;
                        v234 = 1;
                      }
                      __p.n128_u8[0] = 0;
                      v237 = 0;
                      if (*(_BYTE *)(v130 + 192))
                      {
                        __p = *(__n128 *)(v130 + 168);
                        v236 = *(_QWORD *)(v130 + 184);
                        *(_QWORD *)(v130 + 168) = 0;
                        *(_QWORD *)(v130 + 176) = 0;
                        *(_QWORD *)(v130 + 184) = 0;
                        v237 = 1;
                      }
                      v238 = *(_OWORD *)(v130 + 200);
                      v239 = *(_QWORD *)(v130 + 216);
                      *(_QWORD *)(v130 + 200) = 0;
                      *(_QWORD *)(v130 + 208) = 0;
                      *(_QWORD *)(v130 + 216) = 0;
                      do
                      {
                        v158 = v151;
                        v159 = *(_OWORD *)v151;
                        v160 = *(_OWORD *)(v151 + 32);
                        *(_OWORD *)(v130 + 16) = *(_OWORD *)(v151 + 16);
                        *(_OWORD *)(v130 + 32) = v160;
                        *(_OWORD *)v130 = v159;
                        v161 = *(_OWORD *)(v151 + 48);
                        v162 = *(_OWORD *)(v151 + 64);
                        v163 = *(_OWORD *)(v151 + 80);
                        *(_QWORD *)(v130 + 96) = *(_QWORD *)(v151 + 96);
                        *(_OWORD *)(v130 + 64) = v162;
                        *(_OWORD *)(v130 + 80) = v163;
                        *(_OWORD *)(v130 + 48) = v161;
                        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, (__n128 *)(v151 + 104));
                        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, (__n128 *)(v158 + 136));
                        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, (__n128 *)(v158 + 168));
                        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                        *(_OWORD *)(v130 + 200) = *(_OWORD *)(v158 + 200);
                        *(_QWORD *)(v130 + 216) = *(_QWORD *)(v158 + 216);
                        *(_QWORD *)(v158 + 200) = 0;
                        *(_QWORD *)(v158 + 208) = 0;
                        *(_QWORD *)(v158 + 216) = 0;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = a1 + 224 * v150;
                        v130 = v158;
                      }
                      while (*(_QWORD *)v151 < (unint64_t)v222);
                      v164 = v222;
                      v165 = v224;
                      *(_OWORD *)(v158 + 16) = v223;
                      *(_OWORD *)(v158 + 32) = v165;
                      *(_OWORD *)v158 = v164;
                      v166 = v225;
                      v167 = v226;
                      v168 = v227;
                      *(_QWORD *)(v158 + 96) = v228;
                      *(_OWORD *)(v158 + 64) = v167;
                      *(_OWORD *)(v158 + 80) = v168;
                      *(_OWORD *)(v158 + 48) = v166;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v158 + 104, &v229);
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v158 + 136, &v232);
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v158 + 168, &__p);
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v158 + 200));
                      *(_OWORD *)(v158 + 200) = v238;
                      *(_QWORD *)(v158 + 216) = v239;
                      v238 = 0uLL;
                      v239 = 0;
                      v221 = (void **)&v238;
                      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v221);
                      if (v237 && __p.n128_u64[0])
                      {
                        __p.n128_u64[1] = __p.n128_u64[0];
                        operator delete((void *)__p.n128_u64[0]);
                      }
                      if (v234 && v232.n128_u64[0])
                      {
                        v232.n128_u64[1] = v232.n128_u64[0];
                        operator delete((void *)v232.n128_u64[0]);
                      }
                      if (v231 && SHIBYTE(v230) < 0)
                        operator delete((void *)v229.n128_u64[0]);
                    }
                  }
                }
                *(_QWORD *)&v222 = &v219;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
                if (v218 && v216.n128_u64[0])
                {
                  v216.n128_u64[1] = v216.n128_u64[0];
                  operator delete((void *)v216.n128_u64[0]);
                }
                if (v215 && v213.n128_u64[0])
                {
                  v213.n128_u64[1] = v213.n128_u64[0];
                  operator delete((void *)v213.n128_u64[0]);
                }
                if (v212 && SHIBYTE(v211) < 0)
                  operator delete((void *)v210.n128_u64[0]);
                v174 = v121-- <= 2;
                v7 = v201 - 14;
              }
              while (!v174);
            }
            return;
          }
          v10 = v9 >> 1;
          v11 = (__int128 *)(a1 + 224 * (v9 >> 1));
          if ((unint64_t)v8 <= 0x7000)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 224 * (v9 >> 1)), (__int128 *)a1, v197);
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224 * (v9 >> 1)), v197);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 224), (__int128 *)(224 * v10 + a1 - 224), v196);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 448), (__int128 *)(a1 + 224 + 224 * v10), v195);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(224 * v10 + a1 - 224), v11, (__int128 *)(a1 + 224 + 224 * v10));
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)a1, v11);
          }
          --a3;
          if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 224) >= *(_QWORD *)a1)
          {
            v40 = *(_OWORD *)a1;
            v41 = *(_OWORD *)(a1 + 32);
            v223 = *(_OWORD *)(a1 + 16);
            v224 = v41;
            v222 = v40;
            v42 = *(_OWORD *)(a1 + 48);
            v43 = *(_OWORD *)(a1 + 64);
            v44 = *(_OWORD *)(a1 + 80);
            v228 = *(_QWORD *)(a1 + 96);
            v226 = v43;
            v227 = v44;
            v225 = v42;
            v229.n128_u8[0] = 0;
            v231 = 0;
            if (*(_BYTE *)(a1 + 128))
            {
              v45 = *(__n128 *)(a1 + 104);
              v230 = *(_QWORD *)(a1 + 120);
              v229 = v45;
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 104) = 0;
              v231 = 1;
            }
            v232.n128_u8[0] = 0;
            v234 = 0;
            if (*(_BYTE *)(a1 + 160))
            {
              v232 = *(__n128 *)(a1 + 136);
              v233 = *(_QWORD *)(a1 + 152);
              *(_QWORD *)(a1 + 136) = 0;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              v234 = 1;
            }
            __p.n128_u8[0] = 0;
            v237 = 0;
            if (*(_BYTE *)(a1 + 192))
            {
              __p = *(__n128 *)(a1 + 168);
              v236 = *(_QWORD *)(a1 + 184);
              *(_QWORD *)(a1 + 168) = 0;
              *(_QWORD *)(a1 + 176) = 0;
              *(_QWORD *)(a1 + 184) = 0;
              v237 = 1;
            }
            v238 = *(_OWORD *)(a1 + 200);
            v239 = *(_QWORD *)(a1 + 216);
            *(_QWORD *)(a1 + 200) = 0;
            *(_QWORD *)(a1 + 208) = 0;
            *(_QWORD *)(a1 + 216) = 0;
            v46 = v222;
            if ((unint64_t)v222 >= *(_QWORD *)v197)
            {
              v48 = a1 + 224;
              do
              {
                v6 = v48;
                if (v48 >= (unint64_t)v202)
                  break;
                v48 += 224;
              }
              while ((unint64_t)v222 >= *(_QWORD *)v6);
            }
            else
            {
              v6 = a1;
              do
              {
                v47 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while ((unint64_t)v222 >= v47);
            }
            v49 = v202;
            if (v6 < (unint64_t)v202)
            {
              v49 = v202;
              do
              {
                v50 = *((_QWORD *)v49 - 28);
                v49 -= 14;
              }
              while ((unint64_t)v222 < v50);
            }
            while (v6 < (unint64_t)v49)
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)v6, v49);
              do
              {
                v51 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while (v46 >= v51);
              do
              {
                v52 = *((_QWORD *)v49 - 28);
                v49 -= 14;
              }
              while (v46 < v52);
            }
            v53 = (__int128 *)(v6 - 224);
            if (v6 - 224 != a1)
            {
              v54 = *v53;
              v55 = *(_OWORD *)(v6 - 192);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 - 208);
              *(_OWORD *)(a1 + 32) = v55;
              *(_OWORD *)a1 = v54;
              v56 = *(_OWORD *)(v6 - 176);
              v57 = *(_OWORD *)(v6 - 160);
              v58 = *(_OWORD *)(v6 - 144);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 - 128);
              *(_OWORD *)(a1 + 64) = v57;
              *(_OWORD *)(a1 + 80) = v58;
              *(_OWORD *)(a1 + 48) = v56;
              std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v6 - 120));
              std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v6 - 88));
              std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v6 - 56));
              std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
              *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(a1 + 216) = *(_QWORD *)(v6 - 8);
              *(_QWORD *)(v6 - 24) = 0;
              *(_QWORD *)(v6 - 16) = 0;
              *(_QWORD *)(v6 - 8) = 0;
            }
            v59 = v222;
            v60 = v224;
            *(_OWORD *)(v6 - 208) = v223;
            *(_OWORD *)(v6 - 192) = v60;
            *v53 = v59;
            v61 = v225;
            v62 = v226;
            v63 = v227;
            *(_QWORD *)(v6 - 128) = v228;
            *(_OWORD *)(v6 - 160) = v62;
            *(_OWORD *)(v6 - 144) = v63;
            *(_OWORD *)(v6 - 176) = v61;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 - 120, &v229);
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 88, &v232);
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 56, &__p);
            std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v6 - 24));
            *(_OWORD *)(v6 - 24) = v238;
            *(_QWORD *)(v6 - 8) = v239;
            v238 = 0uLL;
            v239 = 0;
            *(_QWORD *)&v203 = &v238;
            std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
            if (v237 && __p.n128_u64[0])
            {
              __p.n128_u64[1] = __p.n128_u64[0];
              operator delete((void *)__p.n128_u64[0]);
            }
            if (v234 && v232.n128_u64[0])
            {
              v232.n128_u64[1] = v232.n128_u64[0];
              operator delete((void *)v232.n128_u64[0]);
            }
            if (v231 && SHIBYTE(v230) < 0)
              operator delete((void *)v229.n128_u64[0]);
            goto LABEL_45;
          }
          v12 = *(_OWORD *)a1;
          v13 = *(_OWORD *)(a1 + 32);
          v223 = *(_OWORD *)(a1 + 16);
          v224 = v13;
          v222 = v12;
          v14 = *(_OWORD *)(a1 + 48);
          v15 = *(_OWORD *)(a1 + 64);
          v16 = *(_OWORD *)(a1 + 80);
          v228 = *(_QWORD *)(a1 + 96);
          v226 = v15;
          v227 = v16;
          v225 = v14;
          v229.n128_u8[0] = 0;
          v231 = 0;
          if (*(_BYTE *)(a1 + 128))
          {
            v17 = *(__n128 *)(a1 + 104);
            v230 = *(_QWORD *)(a1 + 120);
            v229 = v17;
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_QWORD *)(a1 + 104) = 0;
            v231 = 1;
          }
          v232.n128_u8[0] = 0;
          v234 = 0;
          if (*(_BYTE *)(a1 + 160))
          {
            v232 = *(__n128 *)(a1 + 136);
            v233 = *(_QWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 136) = 0;
            *(_QWORD *)(a1 + 144) = 0;
            *(_QWORD *)(a1 + 152) = 0;
            v234 = 1;
          }
          __p.n128_u8[0] = 0;
          v237 = 0;
          if (*(_BYTE *)(a1 + 192))
          {
            __p = *(__n128 *)(a1 + 168);
            v236 = *(_QWORD *)(a1 + 184);
            *(_QWORD *)(a1 + 168) = 0;
            *(_QWORD *)(a1 + 176) = 0;
            *(_QWORD *)(a1 + 184) = 0;
            v237 = 1;
          }
          v18 = 0;
          v238 = *(_OWORD *)(a1 + 200);
          v239 = *(_QWORD *)(a1 + 216);
          *(_QWORD *)(a1 + 200) = 0;
          *(_QWORD *)(a1 + 208) = 0;
          *(_QWORD *)(a1 + 216) = 0;
          v19 = v222;
          do
          {
            v20 = *(_QWORD *)(a1 + v18 + 224);
            v18 += 224;
          }
          while (v20 < (unint64_t)v222);
          v21 = a1 + v18;
          v22 = v202;
          if (v18 == 224)
          {
            v22 = v202;
            do
            {
              if (v21 >= (unint64_t)v22)
                break;
              v24 = *((_QWORD *)v22 - 28);
              v22 -= 14;
            }
            while (v24 >= (unint64_t)v222);
          }
          else
          {
            do
            {
              v23 = *((_QWORD *)v22 - 28);
              v22 -= 14;
            }
            while (v23 >= (unint64_t)v222);
          }
          v6 = a1 + v18;
          if (v21 < (unint64_t)v22)
          {
            v25 = v22;
            do
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)v6, v25);
              do
              {
                v26 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while (v26 < v19);
              do
              {
                v27 = *((_QWORD *)v25 - 28);
                v25 -= 14;
              }
              while (v27 >= v19);
            }
            while (v6 < (unint64_t)v25);
          }
          v28 = (__int128 *)(v6 - 224);
          if (v6 - 224 != a1)
          {
            v29 = *v28;
            v30 = *(_OWORD *)(v6 - 192);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 - 208);
            *(_OWORD *)(a1 + 32) = v30;
            *(_OWORD *)a1 = v29;
            v31 = *(_OWORD *)(v6 - 176);
            v32 = *(_OWORD *)(v6 - 160);
            v33 = *(_OWORD *)(v6 - 144);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 - 128);
            *(_OWORD *)(a1 + 64) = v32;
            *(_OWORD *)(a1 + 80) = v33;
            *(_OWORD *)(a1 + 48) = v31;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v6 - 120));
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v6 - 88));
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v6 - 56));
            std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
            *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 - 24);
            *(_QWORD *)(a1 + 216) = *(_QWORD *)(v6 - 8);
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 8) = 0;
          }
          v34 = v222;
          v35 = v224;
          *(_OWORD *)(v6 - 208) = v223;
          *(_OWORD *)(v6 - 192) = v35;
          *v28 = v34;
          v36 = v225;
          v37 = v226;
          v38 = v227;
          *(_QWORD *)(v6 - 128) = v228;
          *(_OWORD *)(v6 - 160) = v37;
          *(_OWORD *)(v6 - 144) = v38;
          *(_OWORD *)(v6 - 176) = v36;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 - 120, &v229);
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 88, &v232);
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 56, &__p);
          std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v6 - 24));
          *(_OWORD *)(v6 - 24) = v238;
          *(_QWORD *)(v6 - 8) = v239;
          v238 = 0uLL;
          v239 = 0;
          *(_QWORD *)&v203 = &v238;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
          if (v237 && __p.n128_u64[0])
          {
            __p.n128_u64[1] = __p.n128_u64[0];
            operator delete((void *)__p.n128_u64[0]);
          }
          if (v234 && v232.n128_u64[0])
          {
            v232.n128_u64[1] = v232.n128_u64[0];
            operator delete((void *)v232.n128_u64[0]);
          }
          if (v231 && SHIBYTE(v230) < 0)
            operator delete((void *)v229.n128_u64[0]);
          if (v21 < (unint64_t)v22)
            goto LABEL_44;
          v39 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((__int128 *)a1, (__int128 *)(v6 - 224));
          if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((__int128 *)v6, v202))
          {
            if (v39)
              continue;
LABEL_44:
            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v6 - 224, a3, a4 & 1);
LABEL_45:
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v6 - 224);
          if (v39)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((__int128 *)a1 != v202)
          {
            v67 = a1 + 224;
            if ((__int128 *)(a1 + 224) != v202)
            {
              v68 = 0;
              v69 = a1;
              do
              {
                v70 = v67;
                if (*(_QWORD *)(v69 + 224) < *(_QWORD *)v69)
                {
                  v71 = *(_OWORD *)v67;
                  v72 = *(_OWORD *)(v67 + 32);
                  v223 = *(_OWORD *)(v67 + 16);
                  v224 = v72;
                  v222 = v71;
                  v73 = *(_OWORD *)(v67 + 48);
                  v74 = *(_OWORD *)(v67 + 64);
                  v75 = *(_OWORD *)(v67 + 80);
                  v228 = *(_QWORD *)(v67 + 96);
                  v226 = v74;
                  v227 = v75;
                  v225 = v73;
                  v229.n128_u8[0] = 0;
                  v231 = 0;
                  if (*(_BYTE *)(v69 + 352))
                  {
                    v230 = *(_QWORD *)(v69 + 344);
                    v229 = *(__n128 *)(v69 + 328);
                    *(_QWORD *)(v69 + 336) = 0;
                    *(_QWORD *)(v69 + 344) = 0;
                    *(_QWORD *)(v69 + 328) = 0;
                    v231 = 1;
                  }
                  v76 = (__n128 *)(v69 + 360);
                  v232.n128_u8[0] = 0;
                  v234 = 0;
                  if (*(_BYTE *)(v69 + 384))
                  {
                    v232 = *v76;
                    v233 = *(_QWORD *)(v69 + 376);
                    v76->n128_u64[0] = 0;
                    *(_QWORD *)(v69 + 368) = 0;
                    *(_QWORD *)(v69 + 376) = 0;
                    v234 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  v237 = 0;
                  if (*(_BYTE *)(v69 + 416))
                  {
                    __p = *(__n128 *)(v69 + 392);
                    v236 = *(_QWORD *)(v69 + 408);
                    *(_QWORD *)(v69 + 392) = 0;
                    *(_QWORD *)(v69 + 400) = 0;
                    *(_QWORD *)(v69 + 408) = 0;
                    v237 = 1;
                  }
                  v238 = *(_OWORD *)(v69 + 424);
                  v239 = *(_QWORD *)(v69 + 440);
                  *(_QWORD *)(v69 + 424) = 0;
                  *(_QWORD *)(v69 + 432) = 0;
                  *(_QWORD *)(v69 + 440) = 0;
                  v77 = v68;
                  while (1)
                  {
                    v78 = v77;
                    v79 = a1 + v77;
                    v80 = *(_OWORD *)(a1 + v77 + 80);
                    *(_OWORD *)(v79 + 288) = *(_OWORD *)(a1 + v77 + 64);
                    *(_OWORD *)(v79 + 304) = v80;
                    *(_QWORD *)(v79 + 320) = *(_QWORD *)(a1 + v77 + 96);
                    v81 = *(_OWORD *)(a1 + v77 + 16);
                    *(_OWORD *)(v79 + 224) = *(_OWORD *)v79;
                    *(_OWORD *)(v79 + 240) = v81;
                    v82 = *(_OWORD *)(a1 + v77 + 48);
                    *(_OWORD *)(v79 + 256) = *(_OWORD *)(a1 + v77 + 32);
                    *(_OWORD *)(v79 + 272) = v82;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v77 + 328, (__n128 *)(a1 + v77 + 104));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v79 + 360, (__n128 *)(v79 + 136));
                    v83 = a1 + v78;
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 392, (__n128 *)(a1 + v78 + 168));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + v78 + 424));
                    *(_OWORD *)(v83 + 424) = *(_OWORD *)(v83 + 200);
                    *(_QWORD *)(v83 + 440) = *(_QWORD *)(v83 + 216);
                    *(_QWORD *)(v83 + 208) = 0;
                    *(_QWORD *)(v83 + 216) = 0;
                    *(_QWORD *)(v83 + 200) = 0;
                    if (!v78)
                      break;
                    v77 = v78 - 224;
                    if ((unint64_t)v222 >= *(_QWORD *)(a1 + v78 - 224))
                    {
                      v84 = a1 + v78;
                      goto LABEL_107;
                    }
                  }
                  v84 = a1;
LABEL_107:
                  v85 = v222;
                  v86 = v224;
                  *(_OWORD *)(v84 + 16) = v223;
                  *(_OWORD *)(v84 + 32) = v86;
                  *(_OWORD *)v84 = v85;
                  v87 = v225;
                  v88 = v226;
                  v89 = v227;
                  *(_QWORD *)(v84 + 96) = v228;
                  *(_OWORD *)(v84 + 64) = v88;
                  *(_OWORD *)(v84 + 80) = v89;
                  *(_OWORD *)(v84 + 48) = v87;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v78 + 104, &v229);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 136, &v232);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 168, &__p);
                  v90 = (uint64_t *)(a1 + v78 + 200);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v90);
                  *v90 = v238;
                  *(_QWORD *)(v84 + 208) = *((_QWORD *)&v238 + 1);
                  *(_QWORD *)(v84 + 216) = v239;
                  v238 = 0uLL;
                  v239 = 0;
                  *(_QWORD *)&v203 = &v238;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                  if (v237 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v234 && v232.n128_u64[0])
                  {
                    v232.n128_u64[1] = v232.n128_u64[0];
                    operator delete((void *)v232.n128_u64[0]);
                  }
                  if (v231 && SHIBYTE(v230) < 0)
                    operator delete((void *)v229.n128_u64[0]);
                  v7 = v202;
                }
                v67 = v70 + 224;
                v68 += 224;
                v69 = v70;
              }
              while ((__int128 *)(v70 + 224) != v7);
            }
          }
        }
        else if ((__int128 *)a1 != v202)
        {
          v175 = a1 + 224;
          if ((__int128 *)(a1 + 224) != v202)
          {
            v176 = a1 - 224;
            do
            {
              v177 = v175;
              if (*(_QWORD *)(a1 + 224) < *(_QWORD *)a1)
              {
                v178 = *(_OWORD *)v175;
                v179 = *(_OWORD *)(v175 + 32);
                v223 = *(_OWORD *)(v175 + 16);
                v224 = v179;
                v222 = v178;
                v180 = *(_OWORD *)(v175 + 48);
                v181 = *(_OWORD *)(v175 + 64);
                v182 = *(_OWORD *)(v175 + 80);
                v228 = *(_QWORD *)(v175 + 96);
                v226 = v181;
                v227 = v182;
                v225 = v180;
                v229.n128_u8[0] = 0;
                v231 = 0;
                if (*(_BYTE *)(a1 + 352))
                {
                  v230 = *(_QWORD *)(a1 + 344);
                  v229 = *(__n128 *)(a1 + 328);
                  *(_QWORD *)(a1 + 336) = 0;
                  *(_QWORD *)(a1 + 344) = 0;
                  *(_QWORD *)(a1 + 328) = 0;
                  v231 = 1;
                }
                v183 = (__n128 *)(a1 + 360);
                v232.n128_u8[0] = 0;
                v234 = 0;
                if (*(_BYTE *)(a1 + 384))
                {
                  v232 = *v183;
                  v233 = *(_QWORD *)(a1 + 376);
                  v183->n128_u64[0] = 0;
                  *(_QWORD *)(a1 + 368) = 0;
                  *(_QWORD *)(a1 + 376) = 0;
                  v234 = 1;
                }
                __p.n128_u8[0] = 0;
                v237 = 0;
                if (*(_BYTE *)(a1 + 416))
                {
                  __p = *(__n128 *)(a1 + 392);
                  v236 = *(_QWORD *)(a1 + 408);
                  *(_QWORD *)(a1 + 392) = 0;
                  *(_QWORD *)(a1 + 400) = 0;
                  *(_QWORD *)(a1 + 408) = 0;
                  v237 = 1;
                }
                v238 = *(_OWORD *)(a1 + 424);
                v239 = *(_QWORD *)(a1 + 440);
                *(_QWORD *)(a1 + 424) = 0;
                *(_QWORD *)(a1 + 432) = 0;
                *(_QWORD *)(a1 + 440) = 0;
                v184 = v176;
                do
                {
                  v185 = *(_OWORD *)(v184 + 304);
                  *(_OWORD *)(v184 + 512) = *(_OWORD *)(v184 + 288);
                  *(_OWORD *)(v184 + 528) = v185;
                  *(_QWORD *)(v184 + 544) = *(_QWORD *)(v184 + 320);
                  v186 = *(_OWORD *)(v184 + 240);
                  *(_OWORD *)(v184 + 448) = *(_OWORD *)(v184 + 224);
                  *(_OWORD *)(v184 + 464) = v186;
                  v187 = *(_OWORD *)(v184 + 272);
                  *(_OWORD *)(v184 + 480) = *(_OWORD *)(v184 + 256);
                  *(_OWORD *)(v184 + 496) = v187;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v184 + 552, (__n128 *)(v184 + 328));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 584, (__n128 *)(v184 + 360));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 616, (__n128 *)(v184 + 392));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v184 + 648));
                  *(_OWORD *)(v184 + 648) = *(_OWORD *)(v184 + 424);
                  *(_QWORD *)(v184 + 664) = *(_QWORD *)(v184 + 440);
                  *(_QWORD *)(v184 + 424) = 0;
                  *(_QWORD *)(v184 + 432) = 0;
                  *(_QWORD *)(v184 + 440) = 0;
                  v188 = *(_QWORD *)v184;
                  v184 -= 224;
                }
                while ((unint64_t)v222 < v188);
                v189 = v222;
                v190 = v224;
                *(_OWORD *)(v184 + 464) = v223;
                *(_OWORD *)(v184 + 480) = v190;
                *(_OWORD *)(v184 + 448) = v189;
                v191 = v225;
                v192 = v226;
                v193 = v227;
                *(_QWORD *)(v184 + 544) = v228;
                *(_OWORD *)(v184 + 512) = v192;
                *(_OWORD *)(v184 + 528) = v193;
                *(_OWORD *)(v184 + 496) = v191;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v184 + 552, &v229);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 584, &v232);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 616, &__p);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v184 + 648));
                *(_OWORD *)(v184 + 648) = v238;
                *(_QWORD *)(v184 + 664) = v239;
                v238 = 0uLL;
                v239 = 0;
                *(_QWORD *)&v203 = &v238;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                if (v237 && __p.n128_u64[0])
                {
                  __p.n128_u64[1] = __p.n128_u64[0];
                  operator delete((void *)__p.n128_u64[0]);
                }
                if (v234 && v232.n128_u64[0])
                {
                  v232.n128_u64[1] = v232.n128_u64[0];
                  operator delete((void *)v232.n128_u64[0]);
                }
                if (v231 && SHIBYTE(v230) < 0)
                  operator delete((void *)v229.n128_u64[0]);
                v7 = v202;
              }
              v175 = v177 + 224;
              v176 += 224;
              a1 = v177;
            }
            while ((__int128 *)(v177 + 224) != v7);
          }
        }
        return;
    }
  }
}

  v197 = a2 - 14;
  v202 = a2;
  v195 = a2 - 42;
  v196 = a2 - 28;
  v6 = a1;
  while (2)
  {
    a1 = v6;
    v7 = v202;
    v8 = (uint64_t)v202 - v6;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v202 - v6) >> 5);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v64 = v202 - 14;
        if (*((_QWORD *)v202 - 28) < *(_QWORD *)a1)
        {
          v65 = (__int128 *)a1;
          goto LABEL_83;
        }
        return;
      case 3uLL:
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), v197);
        return;
      case 4uLL:
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448), v197);
        return;
      case 5uLL:
        v66 = (_QWORD *)(a1 + 448);
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEvT1_SP_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224), (__int128 *)(a1 + 448), (__int128 *)(a1 + 672));
        if (*((_QWORD *)v202 - 28) < *(_QWORD *)(a1 + 672))
        {
          std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 672), v202 - 14);
          if (*(_QWORD *)(a1 + 672) < *v66)
          {
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 448), (__int128 *)(a1 + 672));
            if (*v66 < *(_QWORD *)(a1 + 224))
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)(a1 + 224), (__int128 *)(a1 + 448));
              if (*(_QWORD *)(a1 + 224) < *(_QWORD *)a1)
              {
                v65 = (__int128 *)a1;
                v64 = (__int128 *)(a1 + 224);
LABEL_83:
                std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>(v65, v64);
              }
            }
          }
        }
        return;
      default:
        if (v8 > 5375)
        {
          if (!a3)
          {
            if ((__int128 *)a1 != v202)
            {
              v200 = (v9 - 2) >> 1;
              v91 = v200;
              do
              {
                v92 = v91;
                if (v200 >= v91)
                {
                  v93 = (2 * v91) | 1;
                  v94 = (__int128 *)(a1 + 224 * v93);
                  if (2 * v92 + 2 >= (uint64_t)v9)
                  {
                    v95 = *(_QWORD *)v94;
                  }
                  else
                  {
                    v95 = *(_QWORD *)v94;
                    v96 = *((_QWORD *)v94 + 28);
                    if (*(_QWORD *)v94 <= v96)
                      v95 = *((_QWORD *)v94 + 28);
                    if (*(_QWORD *)v94 < v96)
                    {
                      v94 += 14;
                      v93 = 2 * v92 + 2;
                    }
                  }
                  v97 = a1 + 224 * v92;
                  if (v95 >= *(_QWORD *)v97)
                  {
                    v98 = *(_OWORD *)v97;
                    v99 = *(_OWORD *)(v97 + 32);
                    v223 = *(_OWORD *)(v97 + 16);
                    v224 = v99;
                    v222 = v98;
                    v100 = *(_OWORD *)(v97 + 48);
                    v101 = *(_OWORD *)(v97 + 64);
                    v102 = *(_OWORD *)(v97 + 80);
                    v228 = *(_QWORD *)(v97 + 96);
                    v226 = v101;
                    v227 = v102;
                    v225 = v100;
                    v229.n128_u8[0] = 0;
                    v231 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 128))
                    {
                      v103 = a1 + 224 * v92;
                      v104 = *(__n128 *)(v103 + 104);
                      v230 = *(_QWORD *)(v103 + 120);
                      v229 = v104;
                      *(_QWORD *)(v103 + 112) = 0;
                      *(_QWORD *)(v103 + 120) = 0;
                      *(_QWORD *)(v103 + 104) = 0;
                      v231 = 1;
                    }
                    v232.n128_u8[0] = 0;
                    v234 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 160))
                    {
                      v105 = a1 + 224 * v92;
                      v232 = *(__n128 *)(v105 + 136);
                      v233 = *(_QWORD *)(v105 + 152);
                      *(_QWORD *)(v105 + 136) = 0;
                      *(_QWORD *)(v105 + 144) = 0;
                      *(_QWORD *)(v105 + 152) = 0;
                      v234 = 1;
                    }
                    __p.n128_u8[0] = 0;
                    v237 = 0;
                    if (*(_BYTE *)(a1 + 224 * v92 + 192))
                    {
                      v106 = a1 + 224 * v92;
                      __p = *(__n128 *)(v106 + 168);
                      v236 = *(_QWORD *)(v106 + 184);
                      *(_QWORD *)(v106 + 168) = 0;
                      *(_QWORD *)(v106 + 176) = 0;
                      *(_QWORD *)(v106 + 184) = 0;
                      v237 = 1;
                    }
                    v198 = v92;
                    v107 = a1 + 224 * v92;
                    v238 = *(_OWORD *)(v107 + 200);
                    v239 = *(_QWORD *)(v107 + 216);
                    *(_QWORD *)(v107 + 200) = 0;
                    *(_QWORD *)(v107 + 208) = 0;
                    *(_QWORD *)(v107 + 216) = 0;
                    do
                    {
                      v108 = v94;
                      v109 = *v94;
                      v110 = v94[2];
                      *(_OWORD *)(v97 + 16) = v94[1];
                      *(_OWORD *)(v97 + 32) = v110;
                      *(_OWORD *)v97 = v109;
                      v111 = v94[3];
                      v112 = v94[4];
                      v113 = v94[5];
                      *(_QWORD *)(v97 + 96) = *((_QWORD *)v94 + 12);
                      *(_OWORD *)(v97 + 64) = v112;
                      *(_OWORD *)(v97 + 80) = v113;
                      *(_OWORD *)(v97 + 48) = v111;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v97 + 104, (__n128 *)((char *)v94 + 104));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v97 + 136, (__n128 *)((char *)v108 + 136));
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v97 + 168, (__n128 *)((char *)v108 + 168));
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v97 + 200));
                      *(_OWORD *)(v97 + 200) = *(__int128 *)((char *)v108 + 200);
                      *(_QWORD *)(v97 + 216) = *((_QWORD *)v108 + 27);
                      *((_QWORD *)v108 + 25) = 0;
                      *((_QWORD *)v108 + 26) = 0;
                      *((_QWORD *)v108 + 27) = 0;
                      if (v200 < v93)
                        break;
                      v94 = (__int128 *)(a1 + 224 * ((2 * v93) | 1));
                      if (2 * v93 + 2 >= (uint64_t)v9)
                      {
                        v114 = *(_QWORD *)v94;
                        v93 = (2 * v93) | 1;
                      }
                      else
                      {
                        v114 = *(_QWORD *)v94;
                        v115 = *((_QWORD *)v94 + 28);
                        if (*(_QWORD *)v94 <= v115)
                          v114 = *((_QWORD *)v94 + 28);
                        if (*(_QWORD *)v94 >= v115)
                        {
                          v93 = (2 * v93) | 1;
                        }
                        else
                        {
                          v94 += 14;
                          v93 = 2 * v93 + 2;
                        }
                      }
                      v97 = (unint64_t)v108;
                    }
                    while (v114 >= (unint64_t)v222);
                    v116 = v222;
                    v117 = v224;
                    v108[1] = v223;
                    v108[2] = v117;
                    *v108 = v116;
                    v118 = v225;
                    v119 = v226;
                    v120 = v227;
                    *((_QWORD *)v108 + 12) = v228;
                    v108[4] = v119;
                    v108[5] = v120;
                    v108[3] = v118;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v108 + 104, &v229);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v108 + 136, &v232);
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v108 + 168, &__p);
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v108 + 25);
                    *(__int128 *)((char *)v108 + 200) = v238;
                    *((_QWORD *)v108 + 27) = v239;
                    v238 = 0uLL;
                    v239 = 0;
                    *(_QWORD *)&v203 = &v238;
                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                    if (v237 && __p.n128_u64[0])
                    {
                      __p.n128_u64[1] = __p.n128_u64[0];
                      operator delete((void *)__p.n128_u64[0]);
                    }
                    if (v234 && v232.n128_u64[0])
                    {
                      v232.n128_u64[1] = v232.n128_u64[0];
                      operator delete((void *)v232.n128_u64[0]);
                    }
                    if (v231 && SHIBYTE(v230) < 0)
                      operator delete((void *)v229.n128_u64[0]);
                    v7 = v202;
                    v92 = v198;
                  }
                }
                v91 = v92 - 1;
              }
              while (v92);
              v121 = (((unint64_t)v8 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
              v194 = (__n128 *)(a1 + 104);
              do
              {
                v122 = *(_OWORD *)a1;
                v123 = *(_OWORD *)(a1 + 32);
                v204 = *(_OWORD *)(a1 + 16);
                v205 = v123;
                v203 = v122;
                v124 = *(_OWORD *)(a1 + 48);
                v125 = *(_OWORD *)(a1 + 64);
                v126 = *(_OWORD *)(a1 + 80);
                v209 = *(_QWORD *)(a1 + 96);
                v207 = v125;
                v208 = v126;
                v206 = v124;
                v210.n128_u8[0] = 0;
                v212 = 0;
                if (*(_BYTE *)(a1 + 128))
                {
                  v127 = *v194;
                  v211 = *(_QWORD *)(a1 + 120);
                  v210 = v127;
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  v194->n128_u64[0] = 0;
                  v212 = 1;
                }
                v213.n128_u8[0] = 0;
                v215 = 0;
                if (*(_BYTE *)(a1 + 160))
                {
                  v213 = *(__n128 *)(a1 + 136);
                  v214 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  v215 = 1;
                }
                v201 = v7;
                v216.n128_u8[0] = 0;
                v218 = 0;
                if (*(_BYTE *)(a1 + 192))
                {
                  v216 = *(__n128 *)(a1 + 168);
                  v217 = *(_QWORD *)(a1 + 184);
                  *(_QWORD *)(a1 + 168) = 0;
                  *(_QWORD *)(a1 + 176) = 0;
                  *(_QWORD *)(a1 + 184) = 0;
                  v218 = 1;
                }
                v128 = 0;
                v219 = *(_OWORD *)(a1 + 200);
                v220 = *(_QWORD *)(a1 + 216);
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                *(_QWORD *)(a1 + 216) = 0;
                v129 = a1;
                do
                {
                  v130 = v129 + 224 * v128 + 224;
                  v131 = 2 * v128;
                  v128 = (2 * v128) | 1;
                  if (v131 + 2 < v121 && *(_QWORD *)v130 < *(_QWORD *)(v130 + 224))
                  {
                    v130 += 224;
                    v128 = v131 + 2;
                  }
                  v132 = *(_OWORD *)v130;
                  v133 = *(_OWORD *)(v130 + 32);
                  *(_OWORD *)(v129 + 16) = *(_OWORD *)(v130 + 16);
                  *(_OWORD *)(v129 + 32) = v133;
                  *(_OWORD *)v129 = v132;
                  v134 = *(_OWORD *)(v130 + 48);
                  v135 = *(_OWORD *)(v130 + 64);
                  v136 = *(_OWORD *)(v130 + 80);
                  *(_QWORD *)(v129 + 96) = *(_QWORD *)(v130 + 96);
                  *(_OWORD *)(v129 + 64) = v135;
                  *(_OWORD *)(v129 + 80) = v136;
                  *(_OWORD *)(v129 + 48) = v134;
                  v137 = (__n128 *)(v130 + 104);
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v129 + 104, (__n128 *)(v130 + 104));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v129 + 136, (__n128 *)(v130 + 136));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v129 + 168, (__n128 *)(v130 + 168));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v129 + 200));
                  *(_OWORD *)(v129 + 200) = *(_OWORD *)(v130 + 200);
                  *(_QWORD *)(v129 + 216) = *(_QWORD *)(v130 + 216);
                  *(_QWORD *)(v130 + 200) = 0;
                  *(_QWORD *)(v130 + 208) = 0;
                  *(_QWORD *)(v130 + 216) = 0;
                  v129 = v130;
                }
                while (v128 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
                if ((__int128 *)v130 == v201 - 14)
                {
                  v169 = v203;
                  v170 = v205;
                  *(_OWORD *)(v130 + 16) = v204;
                  *(_OWORD *)(v130 + 32) = v170;
                  *(_OWORD *)v130 = v169;
                  v171 = v206;
                  v172 = v207;
                  v173 = v208;
                  *(_QWORD *)(v130 + 96) = v209;
                  *(_OWORD *)(v130 + 64) = v172;
                  *(_OWORD *)(v130 + 80) = v173;
                  *(_OWORD *)(v130 + 48) = v171;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, &v210);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, &v213);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, &v216);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                  *(_OWORD *)(v130 + 200) = v219;
                  *(_QWORD *)(v130 + 216) = v220;
                  v219 = 0uLL;
                  v220 = 0;
                }
                else
                {
                  v138 = *(v201 - 14);
                  v139 = *(v201 - 12);
                  *(_OWORD *)(v130 + 16) = *(v201 - 13);
                  *(_OWORD *)(v130 + 32) = v139;
                  *(_OWORD *)v130 = v138;
                  v140 = *(v201 - 11);
                  v141 = *(v201 - 10);
                  v142 = *(v201 - 9);
                  *(_QWORD *)(v130 + 96) = *((_QWORD *)v201 - 16);
                  *(_OWORD *)(v130 + 64) = v141;
                  *(_OWORD *)(v130 + 80) = v142;
                  *(_OWORD *)(v130 + 48) = v140;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, (__n128 *)((char *)v201 - 120));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, (__n128 *)((char *)v201 - 88));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, (__n128 *)((char *)v201 - 56));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                  v143 = (_QWORD *)v201 - 3;
                  *(_OWORD *)(v130 + 200) = *(__int128 *)((char *)v201 - 24);
                  *(_QWORD *)(v130 + 216) = *((_QWORD *)v201 - 1);
                  *v143 = 0;
                  v143[1] = 0;
                  v143[2] = 0;
                  v144 = v203;
                  v145 = v205;
                  *(v201 - 13) = v204;
                  *(v201 - 12) = v145;
                  *(v201 - 14) = v144;
                  v146 = v206;
                  v147 = v207;
                  v148 = v208;
                  *((_QWORD *)v201 - 16) = v209;
                  *(v201 - 10) = v147;
                  *(v201 - 9) = v148;
                  *(v201 - 11) = v146;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v201 - 120, &v210);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v201 - 88, &v213);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>((uint64_t)v201 - 56, &v216);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)v201 - 3);
                  *(__int128 *)((char *)v201 - 24) = v219;
                  *((_QWORD *)v201 - 1) = v220;
                  v219 = 0uLL;
                  v220 = 0;
                  v149 = v130 + 224 - a1;
                  if (v149 >= 225)
                  {
                    v150 = (unint64_t)(((((unint64_t)v149 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                            - 2) >> 1;
                    v151 = a1 + 224 * v150;
                    if (*(_QWORD *)v151 < *(_QWORD *)v130)
                    {
                      v152 = *(_OWORD *)v130;
                      v153 = *(_OWORD *)(v130 + 32);
                      v223 = *(_OWORD *)(v130 + 16);
                      v224 = v153;
                      v222 = v152;
                      v154 = *(_OWORD *)(v130 + 48);
                      v155 = *(_OWORD *)(v130 + 64);
                      v156 = *(_OWORD *)(v130 + 80);
                      v228 = *(_QWORD *)(v130 + 96);
                      v226 = v155;
                      v227 = v156;
                      v225 = v154;
                      v229.n128_u8[0] = 0;
                      v231 = 0;
                      if (*(_BYTE *)(v130 + 128))
                      {
                        v157 = *v137;
                        v230 = *(_QWORD *)(v130 + 120);
                        v229 = v157;
                        *(_QWORD *)(v130 + 112) = 0;
                        *(_QWORD *)(v130 + 120) = 0;
                        v137->n128_u64[0] = 0;
                        v231 = 1;
                      }
                      v232.n128_u8[0] = 0;
                      v234 = 0;
                      if (*(_BYTE *)(v130 + 160))
                      {
                        v232 = *(__n128 *)(v130 + 136);
                        v233 = *(_QWORD *)(v130 + 152);
                        *(_QWORD *)(v130 + 136) = 0;
                        *(_QWORD *)(v130 + 144) = 0;
                        *(_QWORD *)(v130 + 152) = 0;
                        v234 = 1;
                      }
                      __p.n128_u8[0] = 0;
                      v237 = 0;
                      if (*(_BYTE *)(v130 + 192))
                      {
                        __p = *(__n128 *)(v130 + 168);
                        v236 = *(_QWORD *)(v130 + 184);
                        *(_QWORD *)(v130 + 168) = 0;
                        *(_QWORD *)(v130 + 176) = 0;
                        *(_QWORD *)(v130 + 184) = 0;
                        v237 = 1;
                      }
                      v238 = *(_OWORD *)(v130 + 200);
                      v239 = *(_QWORD *)(v130 + 216);
                      *(_QWORD *)(v130 + 200) = 0;
                      *(_QWORD *)(v130 + 208) = 0;
                      *(_QWORD *)(v130 + 216) = 0;
                      do
                      {
                        v158 = v151;
                        v159 = *(_OWORD *)v151;
                        v160 = *(_OWORD *)(v151 + 32);
                        *(_OWORD *)(v130 + 16) = *(_OWORD *)(v151 + 16);
                        *(_OWORD *)(v130 + 32) = v160;
                        *(_OWORD *)v130 = v159;
                        v161 = *(_OWORD *)(v151 + 48);
                        v162 = *(_OWORD *)(v151 + 64);
                        v163 = *(_OWORD *)(v151 + 80);
                        *(_QWORD *)(v130 + 96) = *(_QWORD *)(v151 + 96);
                        *(_OWORD *)(v130 + 64) = v162;
                        *(_OWORD *)(v130 + 80) = v163;
                        *(_OWORD *)(v130 + 48) = v161;
                        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v130 + 104, (__n128 *)(v151 + 104));
                        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 136, (__n128 *)(v158 + 136));
                        std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v130 + 168, (__n128 *)(v158 + 168));
                        std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v130 + 200));
                        *(_OWORD *)(v130 + 200) = *(_OWORD *)(v158 + 200);
                        *(_QWORD *)(v130 + 216) = *(_QWORD *)(v158 + 216);
                        *(_QWORD *)(v158 + 200) = 0;
                        *(_QWORD *)(v158 + 208) = 0;
                        *(_QWORD *)(v158 + 216) = 0;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = a1 + 224 * v150;
                        v130 = v158;
                      }
                      while (*(_QWORD *)v151 < (unint64_t)v222);
                      v164 = v222;
                      v165 = v224;
                      *(_OWORD *)(v158 + 16) = v223;
                      *(_OWORD *)(v158 + 32) = v165;
                      *(_OWORD *)v158 = v164;
                      v166 = v225;
                      v167 = v226;
                      v168 = v227;
                      *(_QWORD *)(v158 + 96) = v228;
                      *(_OWORD *)(v158 + 64) = v167;
                      *(_OWORD *)(v158 + 80) = v168;
                      *(_OWORD *)(v158 + 48) = v166;
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v158 + 104, &v229);
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v158 + 136, &v232);
                      std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v158 + 168, &__p);
                      std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v158 + 200));
                      *(_OWORD *)(v158 + 200) = v238;
                      *(_QWORD *)(v158 + 216) = v239;
                      v238 = 0uLL;
                      v239 = 0;
                      v221 = (void **)&v238;
                      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v221);
                      if (v237 && __p.n128_u64[0])
                      {
                        __p.n128_u64[1] = __p.n128_u64[0];
                        operator delete((void *)__p.n128_u64[0]);
                      }
                      if (v234 && v232.n128_u64[0])
                      {
                        v232.n128_u64[1] = v232.n128_u64[0];
                        operator delete((void *)v232.n128_u64[0]);
                      }
                      if (v231 && SHIBYTE(v230) < 0)
                        operator delete((void *)v229.n128_u64[0]);
                    }
                  }
                }
                *(_QWORD *)&v222 = &v219;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
                if (v218 && v216.n128_u64[0])
                {
                  v216.n128_u64[1] = v216.n128_u64[0];
                  operator delete((void *)v216.n128_u64[0]);
                }
                if (v215 && v213.n128_u64[0])
                {
                  v213.n128_u64[1] = v213.n128_u64[0];
                  operator delete((void *)v213.n128_u64[0]);
                }
                if (v212 && SHIBYTE(v211) < 0)
                  operator delete((void *)v210.n128_u64[0]);
                v174 = v121-- <= 2;
                v7 = v201 - 14;
              }
              while (!v174);
            }
            return;
          }
          v10 = v9 >> 1;
          v11 = (__int128 *)(a1 + 224 * (v9 >> 1));
          if ((unint64_t)v8 <= 0x7000)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 224 * (v9 >> 1)), (__int128 *)a1, v197);
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)a1, (__int128 *)(a1 + 224 * (v9 >> 1)), v197);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 224), (__int128 *)(224 * v10 + a1 - 224), v196);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(a1 + 448), (__int128 *)(a1 + 224 + 224 * v10), v195);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoEEjT1_SP_SP_SI_((__int128 *)(224 * v10 + a1 - 224), v11, (__int128 *)(a1 + 224 + 224 * v10));
            std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)a1, v11);
          }
          --a3;
          if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 224) >= *(_QWORD *)a1)
          {
            v40 = *(_OWORD *)a1;
            v41 = *(_OWORD *)(a1 + 32);
            v223 = *(_OWORD *)(a1 + 16);
            v224 = v41;
            v222 = v40;
            v42 = *(_OWORD *)(a1 + 48);
            v43 = *(_OWORD *)(a1 + 64);
            v44 = *(_OWORD *)(a1 + 80);
            v228 = *(_QWORD *)(a1 + 96);
            v226 = v43;
            v227 = v44;
            v225 = v42;
            v229.n128_u8[0] = 0;
            v231 = 0;
            if (*(_BYTE *)(a1 + 128))
            {
              v45 = *(__n128 *)(a1 + 104);
              v230 = *(_QWORD *)(a1 + 120);
              v229 = v45;
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 104) = 0;
              v231 = 1;
            }
            v232.n128_u8[0] = 0;
            v234 = 0;
            if (*(_BYTE *)(a1 + 160))
            {
              v232 = *(__n128 *)(a1 + 136);
              v233 = *(_QWORD *)(a1 + 152);
              *(_QWORD *)(a1 + 136) = 0;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              v234 = 1;
            }
            __p.n128_u8[0] = 0;
            v237 = 0;
            if (*(_BYTE *)(a1 + 192))
            {
              __p = *(__n128 *)(a1 + 168);
              v236 = *(_QWORD *)(a1 + 184);
              *(_QWORD *)(a1 + 168) = 0;
              *(_QWORD *)(a1 + 176) = 0;
              *(_QWORD *)(a1 + 184) = 0;
              v237 = 1;
            }
            v238 = *(_OWORD *)(a1 + 200);
            v239 = *(_QWORD *)(a1 + 216);
            *(_QWORD *)(a1 + 200) = 0;
            *(_QWORD *)(a1 + 208) = 0;
            *(_QWORD *)(a1 + 216) = 0;
            v46 = v222;
            if ((unint64_t)v222 >= *(_QWORD *)v197)
            {
              v48 = a1 + 224;
              do
              {
                v6 = v48;
                if (v48 >= (unint64_t)v202)
                  break;
                v48 += 224;
              }
              while ((unint64_t)v222 >= *(_QWORD *)v6);
            }
            else
            {
              v6 = a1;
              do
              {
                v47 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while ((unint64_t)v222 >= v47);
            }
            v49 = v202;
            if (v6 < (unint64_t)v202)
            {
              v49 = v202;
              do
              {
                v50 = *((_QWORD *)v49 - 28);
                v49 -= 14;
              }
              while ((unint64_t)v222 < v50);
            }
            while (v6 < (unint64_t)v49)
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)v6, v49);
              do
              {
                v51 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while (v46 >= v51);
              do
              {
                v52 = *((_QWORD *)v49 - 28);
                v49 -= 14;
              }
              while (v46 < v52);
            }
            v53 = (__int128 *)(v6 - 224);
            if (v6 - 224 != a1)
            {
              v54 = *v53;
              v55 = *(_OWORD *)(v6 - 192);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 - 208);
              *(_OWORD *)(a1 + 32) = v55;
              *(_OWORD *)a1 = v54;
              v56 = *(_OWORD *)(v6 - 176);
              v57 = *(_OWORD *)(v6 - 160);
              v58 = *(_OWORD *)(v6 - 144);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 - 128);
              *(_OWORD *)(a1 + 64) = v57;
              *(_OWORD *)(a1 + 80) = v58;
              *(_OWORD *)(a1 + 48) = v56;
              std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v6 - 120));
              std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v6 - 88));
              std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v6 - 56));
              std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
              *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(a1 + 216) = *(_QWORD *)(v6 - 8);
              *(_QWORD *)(v6 - 24) = 0;
              *(_QWORD *)(v6 - 16) = 0;
              *(_QWORD *)(v6 - 8) = 0;
            }
            v59 = v222;
            v60 = v224;
            *(_OWORD *)(v6 - 208) = v223;
            *(_OWORD *)(v6 - 192) = v60;
            *v53 = v59;
            v61 = v225;
            v62 = v226;
            v63 = v227;
            *(_QWORD *)(v6 - 128) = v228;
            *(_OWORD *)(v6 - 160) = v62;
            *(_OWORD *)(v6 - 144) = v63;
            *(_OWORD *)(v6 - 176) = v61;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 - 120, &v229);
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 88, &v232);
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 56, &__p);
            std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v6 - 24));
            *(_OWORD *)(v6 - 24) = v238;
            *(_QWORD *)(v6 - 8) = v239;
            v238 = 0uLL;
            v239 = 0;
            *(_QWORD *)&v203 = &v238;
            std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
            if (v237 && __p.n128_u64[0])
            {
              __p.n128_u64[1] = __p.n128_u64[0];
              operator delete((void *)__p.n128_u64[0]);
            }
            if (v234 && v232.n128_u64[0])
            {
              v232.n128_u64[1] = v232.n128_u64[0];
              operator delete((void *)v232.n128_u64[0]);
            }
            if (v231 && SHIBYTE(v230) < 0)
              operator delete((void *)v229.n128_u64[0]);
            goto LABEL_45;
          }
          v12 = *(_OWORD *)a1;
          v13 = *(_OWORD *)(a1 + 32);
          v223 = *(_OWORD *)(a1 + 16);
          v224 = v13;
          v222 = v12;
          v14 = *(_OWORD *)(a1 + 48);
          v15 = *(_OWORD *)(a1 + 64);
          v16 = *(_OWORD *)(a1 + 80);
          v228 = *(_QWORD *)(a1 + 96);
          v226 = v15;
          v227 = v16;
          v225 = v14;
          v229.n128_u8[0] = 0;
          v231 = 0;
          if (*(_BYTE *)(a1 + 128))
          {
            v17 = *(__n128 *)(a1 + 104);
            v230 = *(_QWORD *)(a1 + 120);
            v229 = v17;
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_QWORD *)(a1 + 104) = 0;
            v231 = 1;
          }
          v232.n128_u8[0] = 0;
          v234 = 0;
          if (*(_BYTE *)(a1 + 160))
          {
            v232 = *(__n128 *)(a1 + 136);
            v233 = *(_QWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 136) = 0;
            *(_QWORD *)(a1 + 144) = 0;
            *(_QWORD *)(a1 + 152) = 0;
            v234 = 1;
          }
          __p.n128_u8[0] = 0;
          v237 = 0;
          if (*(_BYTE *)(a1 + 192))
          {
            __p = *(__n128 *)(a1 + 168);
            v236 = *(_QWORD *)(a1 + 184);
            *(_QWORD *)(a1 + 168) = 0;
            *(_QWORD *)(a1 + 176) = 0;
            *(_QWORD *)(a1 + 184) = 0;
            v237 = 1;
          }
          v18 = 0;
          v238 = *(_OWORD *)(a1 + 200);
          v239 = *(_QWORD *)(a1 + 216);
          *(_QWORD *)(a1 + 200) = 0;
          *(_QWORD *)(a1 + 208) = 0;
          *(_QWORD *)(a1 + 216) = 0;
          v19 = v222;
          do
          {
            v20 = *(_QWORD *)(a1 + v18 + 224);
            v18 += 224;
          }
          while (v20 < (unint64_t)v222);
          v21 = a1 + v18;
          v22 = v202;
          if (v18 == 224)
          {
            v22 = v202;
            do
            {
              if (v21 >= (unint64_t)v22)
                break;
              v24 = *((_QWORD *)v22 - 28);
              v22 -= 14;
            }
            while (v24 >= (unint64_t)v222);
          }
          else
          {
            do
            {
              v23 = *((_QWORD *)v22 - 28);
              v22 -= 14;
            }
            while (v23 >= (unint64_t)v222);
          }
          v6 = a1 + v18;
          if (v21 < (unint64_t)v22)
          {
            v25 = v22;
            do
            {
              std::swap[abi:ne180100]<CSCppCoreFileRegionInfo>((__int128 *)v6, v25);
              do
              {
                v26 = *(_QWORD *)(v6 + 224);
                v6 += 224;
              }
              while (v26 < v19);
              do
              {
                v27 = *((_QWORD *)v25 - 28);
                v25 -= 14;
              }
              while (v27 >= v19);
            }
            while (v6 < (unint64_t)v25);
          }
          v28 = (__int128 *)(v6 - 224);
          if (v6 - 224 != a1)
          {
            v29 = *v28;
            v30 = *(_OWORD *)(v6 - 192);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 - 208);
            *(_OWORD *)(a1 + 32) = v30;
            *(_OWORD *)a1 = v29;
            v31 = *(_OWORD *)(v6 - 176);
            v32 = *(_OWORD *)(v6 - 160);
            v33 = *(_OWORD *)(v6 - 144);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v6 - 128);
            *(_OWORD *)(a1 + 64) = v32;
            *(_OWORD *)(a1 + 80) = v33;
            *(_OWORD *)(a1 + 48) = v31;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 104, (__n128 *)(v6 - 120));
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 136, (__n128 *)(v6 - 88));
            std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + 168, (__n128 *)(v6 - 56));
            std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + 200));
            *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 - 24);
            *(_QWORD *)(a1 + 216) = *(_QWORD *)(v6 - 8);
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 8) = 0;
          }
          v34 = v222;
          v35 = v224;
          *(_OWORD *)(v6 - 208) = v223;
          *(_OWORD *)(v6 - 192) = v35;
          *v28 = v34;
          v36 = v225;
          v37 = v226;
          v38 = v227;
          *(_QWORD *)(v6 - 128) = v228;
          *(_OWORD *)(v6 - 160) = v37;
          *(_OWORD *)(v6 - 144) = v38;
          *(_OWORD *)(v6 - 176) = v36;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v6 - 120, &v229);
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 88, &v232);
          std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v6 - 56, &__p);
          std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v6 - 24));
          *(_OWORD *)(v6 - 24) = v238;
          *(_QWORD *)(v6 - 8) = v239;
          v238 = 0uLL;
          v239 = 0;
          *(_QWORD *)&v203 = &v238;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
          if (v237 && __p.n128_u64[0])
          {
            __p.n128_u64[1] = __p.n128_u64[0];
            operator delete((void *)__p.n128_u64[0]);
          }
          if (v234 && v232.n128_u64[0])
          {
            v232.n128_u64[1] = v232.n128_u64[0];
            operator delete((void *)v232.n128_u64[0]);
          }
          if (v231 && SHIBYTE(v230) < 0)
            operator delete((void *)v229.n128_u64[0]);
          if (v21 < (unint64_t)v22)
            goto LABEL_44;
          v39 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((__int128 *)a1, (__int128 *)(v6 - 224));
          if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoEEbT1_SP_SI_((__int128 *)v6, v202))
          {
            if (v39)
              continue;
LABEL_44:
            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb(a1, v6 - 224, a3, a4 & 1);
LABEL_45:
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v6 - 224);
          if (v39)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((__int128 *)a1 != v202)
          {
            v67 = a1 + 224;
            if ((__int128 *)(a1 + 224) != v202)
            {
              v68 = 0;
              v69 = a1;
              do
              {
                v70 = v67;
                if (*(_QWORD *)(v69 + 224) < *(_QWORD *)v69)
                {
                  v71 = *(_OWORD *)v67;
                  v72 = *(_OWORD *)(v67 + 32);
                  v223 = *(_OWORD *)(v67 + 16);
                  v224 = v72;
                  v222 = v71;
                  v73 = *(_OWORD *)(v67 + 48);
                  v74 = *(_OWORD *)(v67 + 64);
                  v75 = *(_OWORD *)(v67 + 80);
                  v228 = *(_QWORD *)(v67 + 96);
                  v226 = v74;
                  v227 = v75;
                  v225 = v73;
                  v229.n128_u8[0] = 0;
                  v231 = 0;
                  if (*(_BYTE *)(v69 + 352))
                  {
                    v230 = *(_QWORD *)(v69 + 344);
                    v229 = *(__n128 *)(v69 + 328);
                    *(_QWORD *)(v69 + 336) = 0;
                    *(_QWORD *)(v69 + 344) = 0;
                    *(_QWORD *)(v69 + 328) = 0;
                    v231 = 1;
                  }
                  v76 = (__n128 *)(v69 + 360);
                  v232.n128_u8[0] = 0;
                  v234 = 0;
                  if (*(_BYTE *)(v69 + 384))
                  {
                    v232 = *v76;
                    v233 = *(_QWORD *)(v69 + 376);
                    v76->n128_u64[0] = 0;
                    *(_QWORD *)(v69 + 368) = 0;
                    *(_QWORD *)(v69 + 376) = 0;
                    v234 = 1;
                  }
                  __p.n128_u8[0] = 0;
                  v237 = 0;
                  if (*(_BYTE *)(v69 + 416))
                  {
                    __p = *(__n128 *)(v69 + 392);
                    v236 = *(_QWORD *)(v69 + 408);
                    *(_QWORD *)(v69 + 392) = 0;
                    *(_QWORD *)(v69 + 400) = 0;
                    *(_QWORD *)(v69 + 408) = 0;
                    v237 = 1;
                  }
                  v238 = *(_OWORD *)(v69 + 424);
                  v239 = *(_QWORD *)(v69 + 440);
                  *(_QWORD *)(v69 + 424) = 0;
                  *(_QWORD *)(v69 + 432) = 0;
                  *(_QWORD *)(v69 + 440) = 0;
                  v77 = v68;
                  while (1)
                  {
                    v78 = v77;
                    v79 = a1 + v77;
                    v80 = *(_OWORD *)(a1 + v77 + 80);
                    *(_OWORD *)(v79 + 288) = *(_OWORD *)(a1 + v77 + 64);
                    *(_OWORD *)(v79 + 304) = v80;
                    *(_QWORD *)(v79 + 320) = *(_QWORD *)(a1 + v77 + 96);
                    v81 = *(_OWORD *)(a1 + v77 + 16);
                    *(_OWORD *)(v79 + 224) = *(_OWORD *)v79;
                    *(_OWORD *)(v79 + 240) = v81;
                    v82 = *(_OWORD *)(a1 + v77 + 48);
                    *(_OWORD *)(v79 + 256) = *(_OWORD *)(a1 + v77 + 32);
                    *(_OWORD *)(v79 + 272) = v82;
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v77 + 328, (__n128 *)(a1 + v77 + 104));
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v79 + 360, (__n128 *)(v79 + 136));
                    v83 = a1 + v78;
                    std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 392, (__n128 *)(a1 + v78 + 168));
                    std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(a1 + v78 + 424));
                    *(_OWORD *)(v83 + 424) = *(_OWORD *)(v83 + 200);
                    *(_QWORD *)(v83 + 440) = *(_QWORD *)(v83 + 216);
                    *(_QWORD *)(v83 + 208) = 0;
                    *(_QWORD *)(v83 + 216) = 0;
                    *(_QWORD *)(v83 + 200) = 0;
                    if (!v78)
                      break;
                    v77 = v78 - 224;
                    if ((unint64_t)v222 >= *(_QWORD *)(a1 + v78 - 224))
                    {
                      v84 = a1 + v78;
                      goto LABEL_107;
                    }
                  }
                  v84 = a1;
LABEL_107:
                  v85 = v222;
                  v86 = v224;
                  *(_OWORD *)(v84 + 16) = v223;
                  *(_OWORD *)(v84 + 32) = v86;
                  *(_OWORD *)v84 = v85;
                  v87 = v225;
                  v88 = v226;
                  v89 = v227;
                  *(_QWORD *)(v84 + 96) = v228;
                  *(_OWORD *)(v84 + 64) = v88;
                  *(_OWORD *)(v84 + 80) = v89;
                  *(_OWORD *)(v84 + 48) = v87;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v78 + 104, &v229);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 136, &v232);
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(a1 + v78 + 168, &__p);
                  v90 = (uint64_t *)(a1 + v78 + 200);
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate(v90);
                  *v90 = v238;
                  *(_QWORD *)(v84 + 208) = *((_QWORD *)&v238 + 1);
                  *(_QWORD *)(v84 + 216) = v239;
                  v238 = 0uLL;
                  v239 = 0;
                  *(_QWORD *)&v203 = &v238;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                  if (v237 && __p.n128_u64[0])
                  {
                    __p.n128_u64[1] = __p.n128_u64[0];
                    operator delete((void *)__p.n128_u64[0]);
                  }
                  if (v234 && v232.n128_u64[0])
                  {
                    v232.n128_u64[1] = v232.n128_u64[0];
                    operator delete((void *)v232.n128_u64[0]);
                  }
                  if (v231 && SHIBYTE(v230) < 0)
                    operator delete((void *)v229.n128_u64[0]);
                  v7 = v202;
                }
                v67 = v70 + 224;
                v68 += 224;
                v69 = v70;
              }
              while ((__int128 *)(v70 + 224) != v7);
            }
          }
        }
        else if ((__int128 *)a1 != v202)
        {
          v175 = a1 + 224;
          if ((__int128 *)(a1 + 224) != v202)
          {
            v176 = a1 - 224;
            do
            {
              v177 = v175;
              if (*(_QWORD *)(a1 + 224) < *(_QWORD *)a1)
              {
                v178 = *(_OWORD *)v175;
                v179 = *(_OWORD *)(v175 + 32);
                v223 = *(_OWORD *)(v175 + 16);
                v224 = v179;
                v222 = v178;
                v180 = *(_OWORD *)(v175 + 48);
                v181 = *(_OWORD *)(v175 + 64);
                v182 = *(_OWORD *)(v175 + 80);
                v228 = *(_QWORD *)(v175 + 96);
                v226 = v181;
                v227 = v182;
                v225 = v180;
                v229.n128_u8[0] = 0;
                v231 = 0;
                if (*(_BYTE *)(a1 + 352))
                {
                  v230 = *(_QWORD *)(a1 + 344);
                  v229 = *(__n128 *)(a1 + 328);
                  *(_QWORD *)(a1 + 336) = 0;
                  *(_QWORD *)(a1 + 344) = 0;
                  *(_QWORD *)(a1 + 328) = 0;
                  v231 = 1;
                }
                v183 = (__n128 *)(a1 + 360);
                v232.n128_u8[0] = 0;
                v234 = 0;
                if (*(_BYTE *)(a1 + 384))
                {
                  v232 = *v183;
                  v233 = *(_QWORD *)(a1 + 376);
                  v183->n128_u64[0] = 0;
                  *(_QWORD *)(a1 + 368) = 0;
                  *(_QWORD *)(a1 + 376) = 0;
                  v234 = 1;
                }
                __p.n128_u8[0] = 0;
                v237 = 0;
                if (*(_BYTE *)(a1 + 416))
                {
                  __p = *(__n128 *)(a1 + 392);
                  v236 = *(_QWORD *)(a1 + 408);
                  *(_QWORD *)(a1 + 392) = 0;
                  *(_QWORD *)(a1 + 400) = 0;
                  *(_QWORD *)(a1 + 408) = 0;
                  v237 = 1;
                }
                v238 = *(_OWORD *)(a1 + 424);
                v239 = *(_QWORD *)(a1 + 440);
                *(_QWORD *)(a1 + 424) = 0;
                *(_QWORD *)(a1 + 432) = 0;
                *(_QWORD *)(a1 + 440) = 0;
                v184 = v176;
                do
                {
                  v185 = *(_OWORD *)(v184 + 304);
                  *(_OWORD *)(v184 + 512) = *(_OWORD *)(v184 + 288);
                  *(_OWORD *)(v184 + 528) = v185;
                  *(_QWORD *)(v184 + 544) = *(_QWORD *)(v184 + 320);
                  v186 = *(_OWORD *)(v184 + 240);
                  *(_OWORD *)(v184 + 448) = *(_OWORD *)(v184 + 224);
                  *(_OWORD *)(v184 + 464) = v186;
                  v187 = *(_OWORD *)(v184 + 272);
                  *(_OWORD *)(v184 + 480) = *(_OWORD *)(v184 + 256);
                  *(_OWORD *)(v184 + 496) = v187;
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v184 + 552, (__n128 *)(v184 + 328));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 584, (__n128 *)(v184 + 360));
                  std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 616, (__n128 *)(v184 + 392));
                  std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v184 + 648));
                  *(_OWORD *)(v184 + 648) = *(_OWORD *)(v184 + 424);
                  *(_QWORD *)(v184 + 664) = *(_QWORD *)(v184 + 440);
                  *(_QWORD *)(v184 + 424) = 0;
                  *(_QWORD *)(v184 + 432) = 0;
                  *(_QWORD *)(v184 + 440) = 0;
                  v188 = *(_QWORD *)v184;
                  v184 -= 224;
                }
                while ((unint64_t)v222 < v188);
                v189 = v222;
                v190 = v224;
                *(_OWORD *)(v184 + 464) = v223;
                *(_OWORD *)(v184 + 480) = v190;
                *(_OWORD *)(v184 + 448) = v189;
                v191 = v225;
                v192 = v226;
                v193 = v227;
                *(_QWORD *)(v184 + 544) = v228;
                *(_OWORD *)(v184 + 512) = v192;
                *(_OWORD *)(v184 + 528) = v193;
                *(_OWORD *)(v184 + 496) = v191;
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v184 + 552, &v229);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 584, &v232);
                std::__optional_storage_base<std::vector<unsigned long long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long long>,false>>(v184 + 616, &__p);
                std::vector<CSCppCoreFileRegionInfo>::__vdeallocate((uint64_t *)(v184 + 648));
                *(_OWORD *)(v184 + 648) = v238;
                *(_QWORD *)(v184 + 664) = v239;
                v238 = 0uLL;
                v239 = 0;
                *(_QWORD *)&v203 = &v238;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
                if (v237 && __p.n128_u64[0])
                {
                  __p.n128_u64[1] = __p.n128_u64[0];
                  operator delete((void *)__p.n128_u64[0]);
                }
                if (v234 && v232.n128_u64[0])
                {
                  v232.n128_u64[1] = v232.n128_u64[0];
                  operator delete((void *)v232.n128_u64[0]);
                }
                if (v231 && SHIBYTE(v230) < 0)
                  operator delete((void *)v229.n128_u64[0]);
                v7 = v202;
              }
              v175 = v177 + 224;
              v176 += 224;
              a1 = v177;
            }
            while ((__int128 *)(v177 + 224) != v7);
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*((_QWORD *)a2 - 3) < *(_QWORD *)(v8 + 8))
        {
          v112 = *(_OWORD *)v8;
          v121 = *(_OWORD *)(v8 + 16);
          v42 = *(a2 - 1);
          *(_OWORD *)v8 = *(a2 - 2);
          *(_OWORD *)(v8 + 16) = v42;
          *(a2 - 2) = v112;
          *(a2 - 1) = v121;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((__int128 *)v8, (__int128 *)(v8 + 32), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(v8, v8 + 32, v8 + 64, (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        v43 = (__int128 *)(v8 + 32);
        v44 = (__int128 *)(v8 + 64);
        v45 = (__int128 *)(v8 + 96);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(v8, v8 + 32, v8 + 64, v8 + 96);
        if (*((_QWORD *)a2 - 3) < *(_QWORD *)(v8 + 104))
        {
          v46 = *v45;
          v122 = *(_OWORD *)(v8 + 112);
          v47 = *(a2 - 1);
          *v45 = *(a2 - 2);
          *(_OWORD *)(v8 + 112) = v47;
          *(a2 - 2) = v46;
          *(a2 - 1) = v122;
          if (*(_QWORD *)(v8 + 104) < *(_QWORD *)(v8 + 72))
          {
            v49 = *v44;
            v48 = *(_OWORD *)(v8 + 80);
            v50 = *(_OWORD *)(v8 + 112);
            *v44 = *v45;
            *(_OWORD *)(v8 + 80) = v50;
            *v45 = v49;
            *(_OWORD *)(v8 + 112) = v48;
            if (*(_QWORD *)(v8 + 72) < *(_QWORD *)(v8 + 40))
            {
              v52 = *v43;
              v51 = *(_OWORD *)(v8 + 48);
              v53 = *(_OWORD *)(v8 + 80);
              *v43 = *v44;
              *(_OWORD *)(v8 + 48) = v53;
              *v44 = v52;
              *(_OWORD *)(v8 + 80) = v51;
              if (*(_QWORD *)(v8 + 40) < *(_QWORD *)(v8 + 8))
              {
                v113 = *(_OWORD *)v8;
                v123 = *(_OWORD *)(v8 + 16);
                v54 = *(_OWORD *)(v8 + 48);
                *(_OWORD *)v8 = *v43;
                *(_OWORD *)(v8 + 16) = v54;
                *v43 = v113;
                *(_OWORD *)(v8 + 48) = v123;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v55 = (__int128 *)(v8 + 32);
          v57 = (__int128 *)v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = (_QWORD *)v8;
              do
              {
                v60 = v55;
                v61 = v59[5];
                if (v61 < v59[1])
                {
                  v62 = *(_QWORD *)v60;
                  v114 = *((_OWORD *)v59 + 3);
                  v63 = v58;
                  while (1)
                  {
                    v64 = v8 + v63;
                    v65 = *(_OWORD *)(v8 + v63 + 16);
                    *(_OWORD *)(v64 + 32) = *(_OWORD *)(v8 + v63);
                    *(_OWORD *)(v64 + 48) = v65;
                    if (!v63)
                      break;
                    v63 -= 32;
                    if (v61 >= *(_QWORD *)(v64 - 24))
                    {
                      v66 = v8 + v63 + 32;
                      goto LABEL_78;
                    }
                  }
                  v66 = v8;
LABEL_78:
                  *(_QWORD *)v66 = v62;
                  *(_QWORD *)(v66 + 8) = v61;
                  *(_OWORD *)(v66 + 16) = v114;
                }
                v55 = v60 + 2;
                v58 += 32;
                v59 = v60;
              }
              while (v60 + 2 != a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v100 = v55;
              v101 = *(_QWORD *)(a1 + 40);
              if (v101 < *(_QWORD *)(a1 + 8))
              {
                v102 = *(_QWORD *)v55;
                v117 = *(_OWORD *)(a1 + 48);
                v103 = v100;
                do
                {
                  v104 = *(v103 - 1);
                  *v103 = *(v103 - 2);
                  v103[1] = v104;
                  v105 = *((_QWORD *)v103 - 7);
                  v103 -= 2;
                }
                while (v101 < v105);
                *(_QWORD *)v103 = v102;
                *((_QWORD *)v103 + 1) = v101;
                v103[1] = v117;
              }
              v55 = v100 + 2;
              a1 = (uint64_t)v100;
            }
            while (v100 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 != a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v8 + 32 * v70;
                if (2 * v69 + 2 < (uint64_t)v10)
                {
                  v72 = *(_QWORD *)(v71 + 8);
                  v73 = *(_QWORD *)(v71 + 40);
                  v71 += 32 * (v72 < v73);
                  if (v72 < v73)
                    v70 = 2 * v69 + 2;
                }
                v74 = *(_QWORD *)(v8 + 32 * v69 + 8);
                if (*(_QWORD *)(v71 + 8) >= v74)
                {
                  v75 = v8 + 32 * v69;
                  v76 = *(_QWORD *)v75;
                  v115 = *(_OWORD *)(v75 + 16);
                  do
                  {
                    v77 = (_OWORD *)v75;
                    v75 = v71;
                    v78 = *(_OWORD *)(v71 + 16);
                    *v77 = *(_OWORD *)v71;
                    v77[1] = v78;
                    if (v67 < v70)
                      break;
                    v79 = (2 * v70) | 1;
                    v71 = v8 + 32 * v79;
                    v80 = 2 * v70 + 2;
                    if (v80 < (uint64_t)v10)
                    {
                      v81 = *(_QWORD *)(v71 + 8);
                      v82 = *(_QWORD *)(v71 + 40);
                      v71 += 32 * (v81 < v82);
                      if (v81 < v82)
                        v79 = v80;
                    }
                    v70 = v79;
                  }
                  while (*(_QWORD *)(v71 + 8) >= v74);
                  *(_QWORD *)v75 = v76;
                  *(_QWORD *)(v75 + 8) = v74;
                  *(_OWORD *)(v75 + 16) = v115;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v83 = (unint64_t)v9 >> 5;
            do
            {
              v84 = 0;
              v116 = *(_OWORD *)v8;
              v124 = *(_OWORD *)(v8 + 16);
              v85 = (_OWORD *)v8;
              do
              {
                v86 = &v85[2 * v84 + 2];
                v87 = (2 * v84) | 1;
                v88 = 2 * v84 + 2;
                if (v88 < v83)
                {
                  v89 = *((_QWORD *)v86 + 1);
                  v90 = *((_QWORD *)v86 + 5);
                  v86 += 2 * (v89 < v90);
                  if (v89 < v90)
                    v87 = v88;
                }
                v91 = v86[1];
                *v85 = *v86;
                v85[1] = v91;
                v85 = v86;
                v84 = v87;
              }
              while (v87 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              a2 -= 2;
              if (v86 == a2)
              {
                *v86 = v116;
                v86[1] = v124;
              }
              else
              {
                v92 = a2[1];
                *v86 = *a2;
                v86[1] = v92;
                *a2 = v116;
                a2[1] = v124;
                v93 = (uint64_t)v86 - v8 + 32;
                if (v93 >= 33)
                {
                  v94 = (((unint64_t)v93 >> 5) - 2) >> 1;
                  v95 = *((_QWORD *)v86 + 1);
                  if (*(_QWORD *)(v8 + 32 * v94 + 8) < v95)
                  {
                    v96 = *(_QWORD *)v86;
                    v108 = v86[1];
                    do
                    {
                      v97 = v86;
                      v86 = (__int128 *)(v8 + 32 * v94);
                      v98 = v86[1];
                      *v97 = *v86;
                      v97[1] = v98;
                      if (!v94)
                        break;
                      v94 = (v94 - 1) >> 1;
                    }
                    while (*(_QWORD *)(v8 + 32 * v94 + 8) < v95);
                    *(_QWORD *)v86 = v96;
                    *((_QWORD *)v86 + 1) = v95;
                    v86[1] = v108;
                  }
                }
              }
            }
            while (v83-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (__int128 *)(v8 + 32 * (v10 >> 1));
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((__int128 *)(a1 + 32 * (v10 >> 1)), (__int128 *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((__int128 *)a1, (__int128 *)(a1 + 32 * (v10 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((__int128 *)(a1 + 32), v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v11), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(v12 - 2, v12, (__int128 *)(a1 + 32 + 32 * v11));
          v109 = *(_OWORD *)a1;
          v118 = *(_OWORD *)(a1 + 16);
          v13 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v13;
          *v12 = v109;
          v12[1] = v118;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(a1 - 24) < v14)
            goto LABEL_11;
          v30 = *(_QWORD *)a1;
          v107 = *(_OWORD *)(a1 + 16);
          if (v14 >= *((_QWORD *)a2 - 3))
          {
            v33 = a1 + 32;
            do
            {
              v8 = v33;
              if (v33 >= (unint64_t)a2)
                break;
              v34 = *(_QWORD *)(v33 + 8);
              v33 += 32;
            }
            while (v14 >= v34);
          }
          else
          {
            v31 = a1;
            do
            {
              v8 = v31 + 32;
              v32 = *(_QWORD *)(v31 + 40);
              v31 += 32;
            }
            while (v14 >= v32);
          }
          v35 = a2;
          if (v8 < (unint64_t)a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 2;
              v37 = *((_QWORD *)v36 - 3);
              v36 -= 2;
            }
            while (v14 < v37);
          }
          while (v8 < (unint64_t)v35)
          {
            v111 = *(_OWORD *)v8;
            v120 = *(_OWORD *)(v8 + 16);
            v38 = v35[1];
            *(_OWORD *)v8 = *v35;
            *(_OWORD *)(v8 + 16) = v38;
            *v35 = v111;
            v35[1] = v120;
            do
            {
              v39 = *(_QWORD *)(v8 + 40);
              v8 += 32;
            }
            while (v14 >= v39);
            do
            {
              v40 = *((_QWORD *)v35 - 3);
              v35 -= 2;
            }
            while (v14 < v40);
          }
          if (v8 - 32 != a1)
          {
            v41 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 16) = v41;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v30;
          *(_QWORD *)(v8 - 24) = v14;
          *(_OWORD *)(v8 - 16) = v107;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v15 = 0;
        v16 = *(_QWORD *)a1;
        v106 = *(_OWORD *)(a1 + 16);
        do
        {
          v17 = *(_QWORD *)(a1 + v15 + 40);
          v15 += 32;
        }
        while (v17 < v14);
        v18 = a1 + v15;
        v19 = a2;
        if (v15 == 32)
        {
          v22 = a2;
          while (v18 < (unint64_t)v22)
          {
            v20 = v22 - 2;
            v23 = *((_QWORD *)v22 - 3);
            v22 -= 2;
            if (v23 < v14)
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *((_QWORD *)v19 - 3);
            v19 -= 2;
          }
          while (v21 >= v14);
        }
LABEL_21:
        v8 = v18;
        if (v18 < (unint64_t)v20)
        {
          v24 = v20;
          do
          {
            v110 = *(_OWORD *)v8;
            v119 = *(_OWORD *)(v8 + 16);
            v25 = v24[1];
            *(_OWORD *)v8 = *v24;
            *(_OWORD *)(v8 + 16) = v25;
            *v24 = v110;
            v24[1] = v119;
            do
            {
              v26 = *(_QWORD *)(v8 + 40);
              v8 += 32;
            }
            while (v26 < v14);
            do
            {
              v27 = *((_QWORD *)v24 - 3);
              v24 -= 2;
            }
            while (v27 >= v14);
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 32 != a1)
        {
          v28 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 16) = v28;
        }
        *(_QWORD *)(v8 - 32) = v16;
        *(_QWORD *)(v8 - 24) = v14;
        *(_OWORD *)(v8 - 16) = v106;
        if (v18 < (unint64_t)v20)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *,false>(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(a1, v8 - 32);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfoForBinary::ParseEHFrameData(void)::$_0 &,CSCallFrameInfoForBinary::FDE *>(v8, (uint64_t)a2))
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = (__int128 *)(v8 - 32);
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if (result != a2)
  {
    v2 = result + 32;
    if (result + 32 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 32);
        if (v6 < *(_QWORD *)v4)
        {
          v11 = *(_OWORD *)(v4 + 40);
          v12 = *(_QWORD *)(v4 + 56);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 48) = v9;
            if (!v7)
              break;
            v7 -= 32;
            if (v6 >= *(_QWORD *)(v8 - 32))
            {
              v10 = result + v7 + 32;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_QWORD *)v10 = v6;
          *(_OWORD *)(v10 + 8) = v11;
          *(_QWORD *)(v10 + 24) = v12;
        }
        v2 = v5 + 32;
        v3 += 32;
        v4 = v5;
      }
      while (v5 + 32 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(__int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      v6 = *a1;
      v5 = a1[1];
      v7 = *((_OWORD *)a3 + 1);
      *a1 = *(_OWORD *)a3;
      a1[1] = v7;
      *(_OWORD *)a3 = v6;
      *((_OWORD *)a3 + 1) = v5;
      return 1;
    }
    v15 = *a1;
    v14 = a1[1];
    v16 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v16;
    *(_OWORD *)a2 = v15;
    *((_OWORD *)a2 + 1) = v14;
    if (*a3 >= *a2)
      return 1;
    v18 = *(_OWORD *)a2;
    v17 = *((_OWORD *)a2 + 1);
    v19 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v19;
    *(_OWORD *)a3 = v18;
    *((_OWORD *)a3 + 1) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v9 = *(_OWORD *)a2;
    v8 = *((_OWORD *)a2 + 1);
    v10 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v10;
    *(_OWORD *)a3 = v9;
    *((_OWORD *)a3 + 1) = v8;
    if (*a2 >= *(_QWORD *)a1)
      return 1;
    v12 = *a1;
    v11 = a1[1];
    v13 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v13;
    *(_OWORD *)a2 = v12;
    *((_OWORD *)a2 + 1) = v11;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::__less<void,void> &>(unint64_t a1, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)a1;
  v14 = *(_OWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)a1 >= *((_QWORD *)a2 - 4))
  {
    v5 = a1 + 32;
    do
    {
      v3 = v5;
      if (v5 >= (unint64_t)a2)
        break;
      v5 += 32;
    }
    while (v2 >= *(_QWORD *)v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      v3 += 32;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t)a2)
  {
    do
    {
      v6 = *((_QWORD *)a2 - 4);
      a2 -= 2;
    }
    while (v2 < v6);
  }
  while (v3 < (unint64_t)a2)
  {
    v12 = *(_OWORD *)v3;
    v13 = *(_OWORD *)(v3 + 16);
    v7 = a2[1];
    *(_OWORD *)v3 = *a2;
    *(_OWORD *)(v3 + 16) = v7;
    *a2 = v12;
    a2[1] = v13;
    do
    {
      v8 = *(_QWORD *)(v3 + 32);
      v3 += 32;
    }
    while (v2 >= v8);
    do
    {
      v9 = *((_QWORD *)a2 - 4);
      a2 -= 2;
    }
    while (v2 < v9);
  }
  if (v3 - 32 != a1)
  {
    v10 = *(_OWORD *)(v3 - 16);
    *(_OWORD *)a1 = *(_OWORD *)(v3 - 32);
    *(_OWORD *)(a1 + 16) = v10;
  }
  *(_QWORD *)(v3 - 32) = v2;
  *(_QWORD *)(v3 - 8) = v15;
  *(_OWORD *)(v3 - 24) = v14;
  return v3;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::__less<void,void> &>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = 0;
  v3 = *a1;
  v17 = *(_OWORD *)(a1 + 1);
  v18 = a1[3];
  do
  {
    v4 = a1[v2 + 4];
    v2 += 4;
  }
  while (v4 < v3);
  v5 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      v7 = *((_QWORD *)a2 - 4);
      a2 -= 2;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *((_QWORD *)a2 - 4);
      a2 -= 2;
    }
    while (v6 >= v3);
  }
  v8 = (unint64_t)&a1[v2];
  if (v5 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_OWORD *)v8;
      v16 = *(_OWORD *)(v8 + 16);
      v11 = v9[1];
      *(_OWORD *)v8 = *v9;
      *(_OWORD *)(v8 + 16) = v11;
      *v9 = v10;
      v9[1] = v16;
      do
      {
        v12 = *(_QWORD *)(v8 + 32);
        v8 += 32;
      }
      while (v12 < v3);
      do
      {
        v13 = *((_QWORD *)v9 - 4);
        v9 -= 2;
      }
      while (v13 >= v3);
    }
    while (v8 < (unint64_t)v9);
  }
  if ((uint64_t *)(v8 - 32) != a1)
  {
    v14 = *(_OWORD *)(v8 - 16);
    *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
    *((_OWORD *)a1 + 1) = v14;
  }
  *(_QWORD *)(v8 - 32) = v3;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)(v8 - 24) = v17;
  return v8 - 32;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 32);
      if (*(_QWORD *)(a2 - 32) < *(_QWORD *)a1)
      {
        v8 = *(_OWORD *)a1;
        v7 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_OWORD *)(a2 - 16) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32));
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a1 + 64));
      v11 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *v10)
    {
      v19 = *(_OWORD *)(v11 + 8);
      v20 = *(_QWORD *)(v11 + 24);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 80);
        *(_OWORD *)(v16 + 96) = *(_OWORD *)(a1 + v15 + 64);
        *(_OWORD *)(v16 + 112) = v17;
        if (v15 == -64)
          break;
        v15 -= 32;
        if (v14 >= *(_QWORD *)(v16 + 32))
        {
          v18 = a1 + v15 + 96;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(_OWORD *)(v18 + 8) = v19;
      *(_QWORD *)(v18 + 24) = v20;
      if (++v13 == 8)
        return v11 + 32 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __int128 v13;
  __n128 v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>((__int128 *)a1, a2->n128_u64, a3->n128_u64);
  if (a4->n128_u64[0] < a3->n128_u64[0])
  {
    v9 = *a3;
    result = a3[1];
    v10 = a4[1];
    *a3 = *a4;
    a3[1] = v10;
    *a4 = v9;
    a4[1] = result;
    if (a3->n128_u64[0] < a2->n128_u64[0])
    {
      v11 = *a2;
      result = a2[1];
      v12 = a3[1];
      *a2 = *a3;
      a2[1] = v12;
      *a3 = v11;
      a3[1] = result;
      if (a2->n128_u64[0] < *(_QWORD *)a1)
      {
        v13 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 16);
        v14 = a2[1];
        *(__n128 *)a1 = *a2;
        *(__n128 *)(a1 + 16) = v14;
        *a2 = (__n128)v13;
        a2[1] = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    v11 = *a4;
    result = a4[1];
    v12 = a5[1];
    *a4 = *a5;
    a4[1] = v12;
    *a5 = v11;
    a5[1] = result;
    if (a4->n128_u64[0] < a3->n128_u64[0])
    {
      v13 = *a3;
      result = a3[1];
      v14 = a4[1];
      *a3 = *a4;
      a3[1] = v14;
      *a4 = v13;
      a4[1] = result;
      if (a3->n128_u64[0] < a2->n128_u64[0])
      {
        v15 = *a2;
        result = a2[1];
        v16 = a3[1];
        *a2 = *a3;
        a2[1] = v16;
        *a3 = v15;
        a3[1] = result;
        if (a2->n128_u64[0] < *(_QWORD *)a1)
        {
          v17 = *(__n128 *)a1;
          result = *(__n128 *)(a1 + 16);
          v18 = a2[1];
          *(__n128 *)a1 = *a2;
          *(__n128 *)(a1 + 16) = v18;
          *a2 = v17;
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *,CSCppSegmentRange *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v28;
  __int128 v29;

  if ((__int128 *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (unint64_t *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_QWORD *)v14 < *(_QWORD *)a1)
        {
          v16 = *v14;
          v15 = v14[1];
          v17 = *(_OWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          v14[1] = v17;
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(a1, a4, v9, (unint64_t *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v18 = (unint64_t)v8 >> 5;
      do
      {
        v19 = 0;
        v28 = *(_OWORD *)a1;
        v29 = *(_OWORD *)(a1 + 16);
        v20 = (_OWORD *)a1;
        do
        {
          v21 = (uint64_t)&v20[2 * v19 + 2];
          v22 = (2 * v19) | 1;
          v23 = 2 * v19 + 2;
          if (v23 < v18 && *(_QWORD *)v21 < *(_QWORD *)(v21 + 32))
          {
            v21 += 32;
            v22 = v23;
          }
          v24 = *(_OWORD *)(v21 + 16);
          *v20 = *(_OWORD *)v21;
          v20[1] = v24;
          v20 = (_OWORD *)v21;
          v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 -= 2;
        if ((__int128 *)v21 == v6)
        {
          *(_OWORD *)v21 = v28;
          *(_OWORD *)(v21 + 16) = v29;
        }
        else
        {
          v25 = v6[1];
          *(_OWORD *)v21 = *v6;
          *(_OWORD *)(v21 + 16) = v25;
          *v6 = v28;
          v6[1] = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(a1, v21 + 32, a4, (v21 + 32 - a1) >> 5);
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 result;
  __n128 v19;
  unint64_t v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - a1;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - a1) >> 5)
    {
      v6 = v4 >> 4;
      v7 = (v4 >> 4) + 1;
      v8 = (unint64_t *)(a1 + 32 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[4];
        if (*v8 <= v11)
          v10 = v8[4];
        if (*v8 < v11)
        {
          v8 += 4;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        v19 = *(__n128 *)(a4 + 1);
        v20 = a4[3];
        do
        {
          v13 = a4;
          a4 = v8;
          v14 = *((_OWORD *)v8 + 1);
          *(_OWORD *)v13 = *(_OWORD *)v8;
          *((_OWORD *)v13 + 1) = v14;
          if (v5 < v7)
            break;
          v15 = (2 * v7) | 1;
          v8 = (unint64_t *)(a1 + 32 * v15);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v16 = *v8;
            v7 = v15;
          }
          else
          {
            v16 = *v8;
            v17 = v8[4];
            if (*v8 <= v17)
              v16 = v8[4];
            if (*v8 >= v17)
              v7 = v15;
            else
              v8 += 4;
          }
        }
        while (v16 >= v12);
        *a4 = v12;
        result = v19;
        a4[3] = v20;
        *(__n128 *)(a4 + 1) = v19;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __n128 result;
  __n128 v12;
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(a1 + 32 * (v4 >> 1));
    v7 = (_OWORD *)(a2 - 32);
    v8 = *(_QWORD *)(a2 - 32);
    if (*(_QWORD *)v6 < v8)
    {
      v12 = *(__n128 *)(a2 - 24);
      v13 = *(_QWORD *)(a2 - 8);
      do
      {
        v9 = v7;
        v7 = v6;
        v10 = v6[1];
        *v9 = *v6;
        v9[1] = v10;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(a1 + 32 * v5);
      }
      while (*(_QWORD *)v6 < v8);
      *(_QWORD *)v7 = v8;
      result = v12;
      *(__n128 *)((char *)v7 + 8) = v12;
      *((_QWORD *)v7 + 3) = v13;
    }
  }
  return result;
}

void ***std::back_insert_iterator<std::vector<CSCppFlatbufferRelocation>>::operator=[abi:ne180100](void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*v4) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v7, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v18 = &v16[24 * v15];
    v19 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v19;
    v11 = v17 + 24;
    v21 = (char *)*v4;
    v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v17 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v10 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v10;
    v11 = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

unsigned int **FlatbufferSymbolOwnerData::findMatchingEntryForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>>@<X0>(unsigned int **a1@<X1>, unsigned int **a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unsigned int **a5@<X8>)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int **result;
  unsigned int *v13;
  int *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;

  v10 = *a1;
  v11 = *a2;
  v20 = a3;
  v22 = v11;
  v23 = v10;
  result = std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>,unsigned long long,std::__identity>(&v23, &v22, &v20, &v21);
  if (v21 == *a1)
    goto LABEL_13;
  v13 = v21 - 1;
  v14 = (int *)((char *)v21 + *(v21 - 1) - 4);
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  v16 = *v15;
  if (v16 < 7)
  {
    v18 = 0;
    v17 = -1;
  }
  else
  {
    v17 = v15[3] ? *(_QWORD *)((char *)v14 + v15[3]) : -1;
    if (v16 >= 9 && (v19 = v15[4]) != 0)
      v18 = *(_QWORD *)((char *)v14 + v19);
    else
      v18 = 0;
  }
  if (a3 < v17 || a4 + a3 > v18 + v17)
LABEL_13:
    v13 = *a2;
  *a5 = v13;
  return result;
}

unsigned int **std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>,unsigned long long,std::__identity>@<X0>(unsigned int **result@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  int *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = *result;
  v5 = *a2 - (_QWORD)*result;
  if (v5 >= 4)
  {
    v6 = v5 >> 2;
    v7 = *a3;
    do
    {
      v8 = (unsigned int *)((char *)v4 + ((2 * v6) & 0x3FFFFFFFCLL));
      v9 = (int *)((char *)v8 + *v8);
      v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 7u && (v11 = v10[3]) != 0)
        v12 = *(_QWORD *)((char *)v9 + v11);
      else
        v12 = -1;
      v13 = v6 >> 1;
      if (v12 <= v7)
      {
        v4 = v8 + 1;
        *result = v8 + 1;
        v13 = v6 + ~v13;
      }
      v6 = v13;
    }
    while (v13);
  }
  *a4 = v4;
  return result;
}

unsigned int **FlatbufferSymbolOwnerData::findMatchingEntryForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>>@<X0>(unsigned int **a1@<X1>, unsigned int **a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unsigned int **a5@<X8>)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int **result;
  unsigned int *v13;
  int *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;

  v10 = *a1;
  v11 = *a2;
  v20 = a3;
  v22 = v11;
  v23 = v10;
  result = std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>,unsigned long long,std::__identity>(&v23, &v22, &v20, &v21);
  if (v21 == *a1)
    goto LABEL_13;
  v13 = v21 - 1;
  v14 = (int *)((char *)v21 + *(v21 - 1) - 4);
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  v16 = *v15;
  if (v16 < 5)
  {
    v18 = 0;
    v17 = -1;
  }
  else
  {
    v17 = v15[2] ? *(_QWORD *)((char *)v14 + v15[2]) : -1;
    if (v16 >= 7 && (v19 = v15[3]) != 0)
      v18 = *(_QWORD *)((char *)v14 + v19);
    else
      v18 = 0;
  }
  if (a3 < v17 || a4 + a3 > v18 + v17)
LABEL_13:
    v13 = *a2;
  *a5 = v13;
  return result;
}

unsigned int **std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>,unsigned long long,std::__identity>@<X0>(unsigned int **result@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  int *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = *result;
  v5 = *a2 - (_QWORD)*result;
  if (v5 >= 4)
  {
    v6 = v5 >> 2;
    v7 = *a3;
    do
    {
      v8 = (unsigned int *)((char *)v4 + ((2 * v6) & 0x3FFFFFFFCLL));
      v9 = (int *)((char *)v8 + *v8);
      v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 5u && (v11 = v10[2]) != 0)
        v12 = *(_QWORD *)((char *)v9 + v11);
      else
        v12 = -1;
      v13 = v6 >> 1;
      if (v12 <= v7)
      {
        v4 = v8 + 1;
        *result = v8 + 1;
        v13 = v6 + ~v13;
      }
      v6 = v13;
    }
    while (v13);
  }
  *a4 = v4;
  return result;
}

uint64_t std::unique_ptr<CSCppTextSectionDescriptorMap<Pointer64>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CSCppTextSectionDescriptorMap<Pointer64>::~CSCppTextSectionDescriptorMap(result);
    JUMPOUT(0x1B5E36940);
  }
  return result;
}

uint64_t CSCppTextSectionDescriptorMap<Pointer64>::~CSCppTextSectionDescriptorMap(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  void **v9;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v4 = v3[6];
      if (v4)
      {
        std::mutex::~mutex((std::mutex *)(v4 + 144));
        v9 = (void **)(v4 + 88);
        std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v4 + 79) < 0)
          operator delete(*(void **)(v4 + 56));
        std::__tree<TRange<Pointer64>>::destroy(v4 + 24, *(_QWORD **)(v4 + 32));
        MEMORY[0x1B5E36940](v4, 0x1032C40C9A27EF9);
      }
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::__tree<TRange<Pointer64>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL CSCppFlatbufferRelocation::is_skippable(CSCppFlatbufferRelocation *this)
{
  const char *v1;
  const char *v2;
  uint64_t v3;

  v1 = (const char *)*((_QWORD *)this + 2);
  if (v1 && (v2 = &v1[-*(int *)v1], *(unsigned __int16 *)v2 >= 5u) && (v3 = *((unsigned __int16 *)v2 + 2)) != 0)
    return is_relocation_skippable(&v1[v3 + 4 + *(unsigned int *)&v1[v3]]);
  else
    return is_relocation_skippable(0);
}

_QWORD *std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B40E3484(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CSCppFlatbufferRelocation>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppFlatbufferRelocation const*>,std::__wrap_iter<CSCppFlatbufferRelocation const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B40E34FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  const char *v17;
  const char *v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  char v22;
  BOOL v23;
  const char *v24;
  const char *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  const char *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  const char *v18;
  BOOL v19;
  unint64_t *v20;

  if (result != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = result + 4;
    if (result + 4 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = v4;
        v9 = v6[6];
        v8 = v6[7];
        if (v8)
          v10 = (const char *)v6[7];
        else
          v10 = (const char *)v6[6];
        if (v6[3])
          v11 = (const char *)v6[3];
        else
          v11 = (const char *)v6[2];
        result = (unint64_t *)strncmp(v10, v11, 0x10uLL);
        v12 = v6[4];
        v13 = v12 < *v6;
        if ((_DWORD)result)
          v13 = (int)result < 0;
        if (v13)
        {
          v14 = v6[5];
          v15 = v5;
          while (1)
          {
            v16 = (char *)v3 + v15;
            v17 = *(_OWORD *)((char *)v3 + v15 + 16);
            *((_OWORD *)v16 + 2) = *(_OWORD *)((char *)v3 + v15);
            *((_OWORD *)v16 + 3) = v17;
            if (!v15)
              break;
            if (*((_QWORD *)v16 - 1))
              v18 = (const char *)*((_QWORD *)v16 - 1);
            else
              v18 = (const char *)*((_QWORD *)v16 - 2);
            result = (unint64_t *)strncmp(v10, v18, 0x10uLL);
            v19 = v12 < *((_QWORD *)v16 - 4);
            if ((_DWORD)result)
              v19 = (int)result < 0;
            v15 -= 32;
            if (!v19)
            {
              v20 = (unint64_t *)((char *)v3 + v15 + 32);
              goto LABEL_23;
            }
          }
          v20 = v3;
LABEL_23:
          *v20 = v12;
          v20[1] = v14;
          v20[2] = v9;
          v20[3] = v8;
          v2 = a2;
        }
        v4 = v7 + 4;
        v5 += 32;
        v6 = v7;
      }
      while (v7 + 4 != v2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(_QWORD *result, _QWORD *a2)
{
  unint64_t *v3;
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  const char *v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t *v14;
  __int128 v15;
  const char *v16;
  BOOL v17;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 4;
    while (v4 != (_OWORD *)a2)
    {
      v5 = v4;
      v7 = v3[6];
      v6 = v3[7];
      if (v6)
        v8 = (const char *)v3[7];
      else
        v8 = (const char *)v3[6];
      if (v3[3])
        v9 = (const char *)v3[3];
      else
        v9 = (const char *)v3[2];
      result = (_QWORD *)strncmp(v8, v9, 0x10uLL);
      v10 = v3[4];
      v11 = v10 < *v3;
      if ((_DWORD)result)
        v11 = (int)result < 0;
      if (v11)
      {
        v12 = v3[5];
        v13 = v5;
        do
        {
          v15 = *(v13 - 1);
          *v13 = *(v13 - 2);
          v13[1] = v15;
          if (*((_QWORD *)v13 - 5))
            v16 = (const char *)*((_QWORD *)v13 - 5);
          else
            v16 = (const char *)*((_QWORD *)v13 - 6);
          result = (_QWORD *)strncmp(v8, v16, 0x10uLL);
          v17 = v10 < *((_QWORD *)v13 - 8);
          if ((_DWORD)result)
            v17 = (int)result < 0;
          v14 = (unint64_t *)(v13 - 2);
          v13 -= 2;
        }
        while (v17);
        *v14 = v10;
        v14[1] = v12;
        v14[2] = v7;
        v14[3] = v6;
      }
      v4 = v5 + 2;
      v3 = (unint64_t *)v5;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  const char *v6;
  const char *v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  const char *v11;
  int v12;
  _BOOL4 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  const char *v21;
  int v22;
  _BOOL4 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const char *v30;
  const char *v31;
  int v32;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if (a2[3])
    v6 = (const char *)a2[3];
  else
    v6 = (const char *)a2[2];
  if (a1[3])
    v7 = (const char *)a1[3];
  else
    v7 = (const char *)a1[2];
  v8 = strncmp(v6, v7, 0x10uLL);
  v9 = *a2;
  if (v8)
    v10 = v8 < 0;
  else
    v10 = *a2 < *a1;
  if (a3[3])
    v11 = (const char *)a3[3];
  else
    v11 = (const char *)a3[2];
  v12 = strncmp(v11, v6, 0x10uLL);
  v13 = *a3 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v10)
  {
    if (v13)
    {
      v15 = *(_OWORD *)a1;
      v14 = *((_OWORD *)a1 + 1);
      v16 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v16;
      *(_OWORD *)a3 = v15;
      *((_OWORD *)a3 + 1) = v14;
      return 1;
    }
    v28 = *(_OWORD *)a1;
    v27 = *((_OWORD *)a1 + 1);
    v29 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v29;
    *(_OWORD *)a2 = v28;
    *((_OWORD *)a2 + 1) = v27;
    if (a3[3])
      v30 = (const char *)a3[3];
    else
      v30 = (const char *)a3[2];
    if (a2[3])
      v31 = (const char *)a2[3];
    else
      v31 = (const char *)a2[2];
    v32 = strncmp(v30, v31, 0x10uLL);
    v33 = *a3 < *a2;
    if (v32)
      v33 = v32 < 0;
    if (!v33)
      return 1;
    v35 = *(_OWORD *)a2;
    v34 = *((_OWORD *)a2 + 1);
    v36 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v36;
    *(_OWORD *)a3 = v35;
    *((_OWORD *)a3 + 1) = v34;
    return 2;
  }
  if (v13)
  {
    v18 = *(_OWORD *)a2;
    v17 = *((_OWORD *)a2 + 1);
    v19 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v19;
    *(_OWORD *)a3 = v18;
    *((_OWORD *)a3 + 1) = v17;
    if (a2[3])
      v20 = (const char *)a2[3];
    else
      v20 = (const char *)a2[2];
    if (a1[3])
      v21 = (const char *)a1[3];
    else
      v21 = (const char *)a1[2];
    v22 = strncmp(v20, v21, 0x10uLL);
    v23 = *a2 < *a1;
    if (v22)
      v23 = v22 < 0;
    if (!v23)
      return 1;
    v25 = *(_OWORD *)a1;
    v24 = *((_OWORD *)a1 + 1);
    v26 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v26;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v24;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  const char *v9;
  int v10;
  BOOL v11;
  unint64_t *v12;
  const char *v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  unint64_t *v17;
  const char *v18;
  int v19;
  _BOOL4 v20;
  const char *v21;
  int v22;
  unint64_t v23;
  BOOL v24;
  __int128 v25;
  const char *v26;
  int v27;
  unint64_t v28;
  _BOOL4 v29;
  const char *v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  __int128 v34;
  __int128 v36;
  __int128 v37;

  v2 = a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  if (v7)
    v8 = (const char *)a1[3];
  else
    v8 = (const char *)a1[2];
  if (*(a2 - 1))
    v9 = (const char *)*(a2 - 1);
  else
    v9 = (const char *)*(a2 - 2);
  v10 = strncmp(v8, v9, 0x10uLL);
  v11 = v4 < *(v2 - 4);
  if (v10)
    v11 = v10 < 0;
  if (v11)
  {
    v12 = a1;
    do
    {
      if (v12[7])
        v13 = (const char *)v12[7];
      else
        v13 = (const char *)v12[6];
      v14 = strncmp(v8, v13, 0x10uLL);
      v15 = v12[4];
      v12 += 4;
      v16 = v4 < v15;
      if (v14)
        v16 = v14 < 0;
    }
    while (!v16);
  }
  else
  {
    v17 = a1 + 4;
    do
    {
      v12 = v17;
      if (v17 >= v2)
        break;
      if (v17[3])
        v18 = (const char *)v17[3];
      else
        v18 = (const char *)v17[2];
      v19 = strncmp(v8, v18, 0x10uLL);
      v20 = v19 < 0;
      if (!v19)
        v20 = v4 < *v12;
      v17 = v12 + 4;
    }
    while (!v20);
  }
  if (v12 < v2)
  {
    do
    {
      if (*(v2 - 1))
        v21 = (const char *)*(v2 - 1);
      else
        v21 = (const char *)*(v2 - 2);
      v22 = strncmp(v8, v21, 0x10uLL);
      v23 = *(v2 - 4);
      v2 -= 4;
      v24 = v4 < v23;
      if (v22)
        v24 = v22 < 0;
    }
    while (v24);
  }
  while (v12 < v2)
  {
    v36 = *(_OWORD *)v12;
    v37 = *((_OWORD *)v12 + 1);
    v25 = *((_OWORD *)v2 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v2;
    *((_OWORD *)v12 + 1) = v25;
    *(_OWORD *)v2 = v36;
    *((_OWORD *)v2 + 1) = v37;
    do
    {
      if (v12[7])
        v26 = (const char *)v12[7];
      else
        v26 = (const char *)v12[6];
      v27 = strncmp(v8, v26, 0x10uLL);
      v28 = v12[4];
      v12 += 4;
      v29 = v4 < v28;
      if (v27)
        v29 = v27 < 0;
    }
    while (!v29);
    do
    {
      if (*(v2 - 1))
        v30 = (const char *)*(v2 - 1);
      else
        v30 = (const char *)*(v2 - 2);
      v31 = strncmp(v8, v30, 0x10uLL);
      v32 = *(v2 - 4);
      v2 -= 4;
      v33 = v4 < v32;
      if (v31)
        v33 = v31 < 0;
    }
    while (v33);
  }
  if (v12 - 4 != a1)
  {
    v34 = *((_OWORD *)v12 - 1);
    *(_OWORD *)a1 = *((_OWORD *)v12 - 2);
    *((_OWORD *)a1 + 1) = v34;
  }
  *(v12 - 4) = v4;
  *(v12 - 3) = v5;
  *(v12 - 2) = v6;
  *(v12 - 1) = v7;
  return v12;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSegmentRange *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(__int128 *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  const char *v13;
  int v14;
  unint64_t v15;
  _BOOL4 v16;
  const char *v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  const char *v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  const char *v29;
  int v30;
  unint64_t v31;
  _BOOL4 v32;
  __int128 *result;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v4 = 0;
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  if (v6)
    v7 = (const char *)*((_QWORD *)a1 + 3);
  else
    v7 = (const char *)*((_QWORD *)a1 + 2);
  v35 = *a1;
  v8 = *(_QWORD *)a1;
  do
  {
    if (*((_QWORD *)&a1[v4 + 3] + 1))
      v9 = (const char *)*((_QWORD *)&a1[v4 + 3] + 1);
    else
      v9 = *(const char **)&a1[v4 + 3];
    v10 = strncmp(v9, v7, 0x10uLL);
    v11 = *(_QWORD *)&a1[v4 + 2] < v8;
    if (v10)
      v11 = v10 < 0;
    v4 += 2;
  }
  while (v11);
  v12 = (unint64_t)&a1[v4];
  if (v4 == 2)
  {
    do
    {
      if (v12 >= (unint64_t)a2)
        break;
      if (*((_QWORD *)a2 - 1))
        v17 = (const char *)*((_QWORD *)a2 - 1);
      else
        v17 = (const char *)*((_QWORD *)a2 - 2);
      v18 = strncmp(v17, v7, 0x10uLL);
      v19 = *((_QWORD *)a2 - 4);
      a2 -= 2;
      v20 = v19 < v8;
      if (v18)
        v20 = v18 < 0;
    }
    while (!v20);
  }
  else
  {
    do
    {
      if (*((_QWORD *)a2 - 1))
        v13 = (const char *)*((_QWORD *)a2 - 1);
      else
        v13 = (const char *)*((_QWORD *)a2 - 2);
      v14 = strncmp(v13, v7, 0x10uLL);
      v15 = *((_QWORD *)a2 - 4);
      a2 -= 2;
      v16 = v15 < v8;
      if (v14)
        v16 = v14 < 0;
    }
    while (!v16);
  }
  v21 = (unint64_t)&a1[v4];
  if (v12 < (unint64_t)a2)
  {
    v22 = a2;
    do
    {
      v23 = *(_OWORD *)v21;
      v36 = *(_OWORD *)(v21 + 16);
      v24 = v22[1];
      *(_OWORD *)v21 = *v22;
      *(_OWORD *)(v21 + 16) = v24;
      *v22 = v23;
      v22[1] = v36;
      do
      {
        if (*(_QWORD *)(v21 + 56))
          v25 = *(const char **)(v21 + 56);
        else
          v25 = *(const char **)(v21 + 48);
        v26 = strncmp(v25, v7, 0x10uLL);
        v27 = *(_QWORD *)(v21 + 32);
        v21 += 32;
        v28 = v27 < v8;
        if (v26)
          v28 = v26 < 0;
      }
      while (v28);
      do
      {
        if (*((_QWORD *)v22 - 1))
          v29 = (const char *)*((_QWORD *)v22 - 1);
        else
          v29 = (const char *)*((_QWORD *)v22 - 2);
        v30 = strncmp(v29, v7, 0x10uLL);
        v31 = *((_QWORD *)v22 - 4);
        v22 -= 2;
        v32 = v31 < v8;
        if (v30)
          v32 = v30 < 0;
      }
      while (!v32);
    }
    while (v21 < (unint64_t)v22);
  }
  result = (__int128 *)(v21 - 32);
  if ((__int128 *)(v21 - 32) != a1)
  {
    v34 = *(_OWORD *)(v21 - 16);
    *a1 = *result;
    a1[1] = v34;
  }
  *(_OWORD *)(v21 - 32) = v35;
  *(_QWORD *)(v21 - 16) = v5;
  *(_QWORD *)(v21 - 8) = v6;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  const char *v29;
  int v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1))
        v6 = (const char *)*(a2 - 1);
      else
        v6 = (const char *)*(a2 - 2);
      if (a1[3])
        v7 = (const char *)a1[3];
      else
        v7 = (const char *)a1[2];
      v8 = strncmp(v6, v7, 0x10uLL);
      v10 = *(v2 - 4);
      v9 = v2 - 4;
      v11 = v10 < *a1;
      if (v8)
        v11 = v8 < 0;
      if (v11)
      {
        v13 = *(_OWORD *)a1;
        v12 = *((_OWORD *)a1 + 1);
        v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      v16 = a1 + 12;
      if (a1 + 12 == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v33 = v2;
      break;
  }
  while (1)
  {
    v20 = v16[2];
    v19 = v16[3];
    if (v19)
      v21 = (const char *)v16[3];
    else
      v21 = (const char *)v16[2];
    if (v15[3])
      v22 = (const char *)v15[3];
    else
      v22 = (const char *)v15[2];
    v23 = strncmp(v21, v22, 0x10uLL);
    v24 = *v16;
    v25 = *v16 < *v15;
    if (v23)
      v25 = v23 < 0;
    if (v25)
    {
      v34 = v16[1];
      v26 = v17;
      while (1)
      {
        v27 = (char *)a1 + v26;
        v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64)
          break;
        if (*((_QWORD *)v27 + 7))
          v29 = (const char *)*((_QWORD *)v27 + 7);
        else
          v29 = (const char *)*((_QWORD *)v27 + 6);
        v30 = strncmp(v21, v29, 0x10uLL);
        v31 = v24 < *((_QWORD *)v27 + 4);
        if (v30)
          v31 = v30 < 0;
        v26 -= 32;
        if (!v31)
        {
          v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      v32 = a1;
LABEL_33:
      v2 = v33;
      *v32 = v24;
      v32[1] = v34;
      v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8)
        return v16 + 4 == v33;
    }
    v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  const char *v8;
  const char *v9;
  int v10;
  __n128 result;
  _BOOL4 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  const char *v17;
  int v18;
  _BOOL4 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  const char *v23;
  const char *v24;
  int v25;
  _BOOL4 v26;
  __int128 v27;
  __int128 v28;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a2, a3);
  if (a4[3])
    v8 = (const char *)a4[3];
  else
    v8 = (const char *)a4[2];
  if (a3[3])
    v9 = (const char *)a3[3];
  else
    v9 = (const char *)a3[2];
  v10 = strncmp(v8, v9, 0x10uLL);
  v12 = *a4 < *a3;
  if (v10)
    v12 = v10 < 0;
  if (v12)
  {
    v14 = *(_OWORD *)a3;
    v13 = *((_OWORD *)a3 + 1);
    v15 = *((_OWORD *)a4 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_OWORD *)a3 + 1) = v15;
    *(_OWORD *)a4 = v14;
    *((_OWORD *)a4 + 1) = v13;
    if (a3[3])
      v16 = (const char *)a3[3];
    else
      v16 = (const char *)a3[2];
    if (a2[3])
      v17 = (const char *)a2[3];
    else
      v17 = (const char *)a2[2];
    v18 = strncmp(v16, v17, 0x10uLL);
    v19 = *a3 < *a2;
    if (v18)
      v19 = v18 < 0;
    if (v19)
    {
      v21 = *(_OWORD *)a2;
      v20 = *((_OWORD *)a2 + 1);
      v22 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v22;
      *(_OWORD *)a3 = v21;
      *((_OWORD *)a3 + 1) = v20;
      if (a2[3])
        v23 = (const char *)a2[3];
      else
        v23 = (const char *)a2[2];
      if (a1[3])
        v24 = (const char *)a1[3];
      else
        v24 = (const char *)a1[2];
      v25 = strncmp(v23, v24, 0x10uLL);
      v26 = *a2 < *a1;
      if (v25)
        v26 = v25 < 0;
      if (v26)
      {
        v27 = *(_OWORD *)a1;
        result = *((__n128 *)a1 + 1);
        v28 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v28;
        *(_OWORD *)a2 = v27;
        *((__n128 *)a2 + 1) = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  const char *v10;
  const char *v11;
  int v12;
  __n128 result;
  _BOOL4 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const char *v18;
  const char *v19;
  int v20;
  _BOOL4 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  const char *v25;
  const char *v26;
  int v27;
  _BOOL4 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  const char *v32;
  const char *v33;
  int v34;
  _BOOL4 v35;
  __int128 v36;
  __int128 v37;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a2, a3, a4);
  if (a5[3])
    v10 = (const char *)a5[3];
  else
    v10 = (const char *)a5[2];
  if (a4[3])
    v11 = (const char *)a4[3];
  else
    v11 = (const char *)a4[2];
  v12 = strncmp(v10, v11, 0x10uLL);
  v14 = *a5 < *a4;
  if (v12)
    v14 = v12 < 0;
  if (v14)
  {
    v16 = *(_OWORD *)a4;
    v15 = *((_OWORD *)a4 + 1);
    v17 = *((_OWORD *)a5 + 1);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((_OWORD *)a4 + 1) = v17;
    *(_OWORD *)a5 = v16;
    *((_OWORD *)a5 + 1) = v15;
    if (a4[3])
      v18 = (const char *)a4[3];
    else
      v18 = (const char *)a4[2];
    if (a3[3])
      v19 = (const char *)a3[3];
    else
      v19 = (const char *)a3[2];
    v20 = strncmp(v18, v19, 0x10uLL);
    v21 = *a4 < *a3;
    if (v20)
      v21 = v20 < 0;
    if (v21)
    {
      v23 = *(_OWORD *)a3;
      v22 = *((_OWORD *)a3 + 1);
      v24 = *((_OWORD *)a4 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_OWORD *)a3 + 1) = v24;
      *(_OWORD *)a4 = v23;
      *((_OWORD *)a4 + 1) = v22;
      if (a3[3])
        v25 = (const char *)a3[3];
      else
        v25 = (const char *)a3[2];
      if (a2[3])
        v26 = (const char *)a2[3];
      else
        v26 = (const char *)a2[2];
      v27 = strncmp(v25, v26, 0x10uLL);
      v28 = *a3 < *a2;
      if (v27)
        v28 = v27 < 0;
      if (v28)
      {
        v30 = *(_OWORD *)a2;
        v29 = *((_OWORD *)a2 + 1);
        v31 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v31;
        *(_OWORD *)a3 = v30;
        *((_OWORD *)a3 + 1) = v29;
        if (a2[3])
          v32 = (const char *)a2[3];
        else
          v32 = (const char *)a2[2];
        if (a1[3])
          v33 = (const char *)a1[3];
        else
          v33 = (const char *)a1[2];
        v34 = strncmp(v32, v33, 0x10uLL);
        v35 = *a2 < *a1;
        if (v34)
          v35 = v34 < 0;
        if (v35)
        {
          v36 = *(_OWORD *)a1;
          result = *((__n128 *)a1 + 1);
          v37 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v37;
          *(_OWORD *)a2 = v36;
          *((__n128 *)a2 + 1) = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  const char *v15;
  const char *v16;
  int v17;
  _BOOL4 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  __int128 v25;
  __int128 v28;
  __int128 v29;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (v14[3])
          v15 = (const char *)v14[3];
        else
          v15 = (const char *)v14[2];
        if (a1[3])
          v16 = (const char *)a1[3];
        else
          v16 = (const char *)a1[2];
        v17 = strncmp(v15, v16, 0x10uLL);
        v18 = *v14 < *a1;
        if (v17)
          v18 = v17 < 0;
        if (v18)
        {
          v20 = *(_OWORD *)v14;
          v19 = *((_OWORD *)v14 + 1);
          v21 = *((_OWORD *)a1 + 1);
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *((_OWORD *)v14 + 1) = v21;
          *(_OWORD *)a1 = v20;
          *((_OWORD *)a1 + 1) = v19;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v22 = (unint64_t)v8 >> 5;
      v23 = a2 - 4;
      do
      {
        v28 = *(_OWORD *)a1;
        v29 = *((_OWORD *)a1 + 1);
        v24 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a4, v22);
        if (v23 == v24)
        {
          *(_OWORD *)v24 = v28;
          *((_OWORD *)v24 + 1) = v29;
        }
        else
        {
          v25 = *((_OWORD *)v23 + 1);
          *(_OWORD *)v24 = *(_OWORD *)v23;
          *((_OWORD *)v24 + 1) = v25;
          *(_OWORD *)v23 = v28;
          *((_OWORD *)v23 + 1) = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>((uint64_t)a1, (uint64_t)(v24 + 4), a4, ((char *)(v24 + 4) - (char *)a1) >> 5);
        }
        v23 -= 4;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  int v15;
  _BOOL4 v16;
  unint64_t v17;
  const char *v18;
  const char *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t *v22;
  __int128 v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  int v27;
  _BOOL4 v28;
  unint64_t v29;
  const char *v30;
  _BOOL4 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 5)
    {
      v9 = ((uint64_t)a4 - result) >> 4;
      v10 = v9 + 1;
      v11 = (unint64_t *)(result + 32 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        v17 = *v11;
      }
      else
      {
        if (v11[3])
          v13 = (const char *)v11[3];
        else
          v13 = (const char *)v11[2];
        if (v11[7])
          v14 = (const char *)v11[7];
        else
          v14 = (const char *)v11[6];
        v15 = strncmp(v13, v14, 0x10uLL);
        v16 = *v11 < v11[4];
        if (v15)
          v16 = v15 < 0;
        if (v16)
          v17 = v11[4];
        else
          v17 = *v11;
        if (v16)
        {
          v11 += 4;
          v10 = v12;
        }
      }
      if (v11[3])
        v18 = (const char *)v11[3];
      else
        v18 = (const char *)v11[2];
      v33 = v5[2];
      v34 = v5[3];
      if (v34)
        v19 = (const char *)v5[3];
      else
        v19 = (const char *)v5[2];
      result = strncmp(v18, v19, 0x10uLL);
      v20 = *v5;
      v21 = v17 < *v5;
      if ((_DWORD)result)
        v21 = (int)result < 0;
      if (!v21)
      {
        v32 = v5[1];
        do
        {
          v22 = v5;
          v5 = v11;
          v23 = *((_OWORD *)v11 + 1);
          *(_OWORD *)v22 = *(_OWORD *)v11;
          *((_OWORD *)v22 + 1) = v23;
          if (v7 < v10)
            break;
          v24 = (2 * v10) | 1;
          v11 = (unint64_t *)(v6 + 32 * v24);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v29 = *v11;
            v10 = v24;
          }
          else
          {
            if (v11[3])
              v25 = (const char *)v11[3];
            else
              v25 = (const char *)v11[2];
            if (v11[7])
              v26 = (const char *)v11[7];
            else
              v26 = (const char *)v11[6];
            v27 = strncmp(v25, v26, 0x10uLL);
            v28 = *v11 < v11[4];
            if (v27)
              v28 = v27 < 0;
            v29 = v28 ? v11[4] : *v11;
            if (v28)
              v11 += 4;
            else
              v10 = v24;
          }
          v30 = (const char *)(v11[3] ? v11[3] : v11[2]);
          result = strncmp(v30, v19, 0x10uLL);
          v31 = v29 < v20;
          if ((_DWORD)result)
            v31 = (int)result < 0;
        }
        while (!v31);
        *v5 = v20;
        v5[1] = v32;
        v5[2] = v33;
        v5[3] = v34;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  int v13;
  _BOOL4 v14;
  __int128 v15;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[2 * v5 + 2];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      if (v8[3])
        v11 = (const char *)v8[3];
      else
        v11 = (const char *)v8[2];
      if (v8[7])
        v12 = (const char *)v8[7];
      else
        v12 = (const char *)v8[6];
      v13 = strncmp(v11, v12, 0x10uLL);
      v14 = *v8 < v8[4];
      if (v13)
        v14 = v13 < 0;
      if (v14)
      {
        v8 += 4;
        v9 = v10;
      }
    }
    v15 = *((_OWORD *)v8 + 1);
    *a1 = *(_OWORD *)v8;
    a1[1] = v15;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t *v17;
  __int128 v18;
  const char *v19;
  BOOL v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (unint64_t *)(result + 32 * (v4 >> 1));
    if (v8[3])
      v9 = (const char *)v8[3];
    else
      v9 = (const char *)v8[2];
    v11 = *(_QWORD *)(a2 - 16);
    v10 = *(_QWORD *)(a2 - 8);
    if (v10)
      v12 = *(const char **)(a2 - 8);
    else
      v12 = *(const char **)(a2 - 16);
    result = strncmp(v9, v12, 0x10uLL);
    v13 = (unint64_t *)(a2 - 32);
    v14 = *(_QWORD *)(a2 - 32);
    v15 = *v8 < v14;
    if ((_DWORD)result)
      v15 = (int)result < 0;
    if (v15)
    {
      v16 = *(_QWORD *)(a2 - 24);
      do
      {
        v17 = v13;
        v13 = v8;
        v18 = *((_OWORD *)v8 + 1);
        *(_OWORD *)v17 = *(_OWORD *)v8;
        *((_OWORD *)v17 + 1) = v18;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (unint64_t *)(v6 + 32 * v7);
        v19 = (const char *)(v8[3] ? v8[3] : v8[2]);
        result = strncmp(v19, v12, 0x10uLL);
        v20 = *v8 < v14;
        if ((_DWORD)result)
          v20 = (int)result < 0;
      }
      while (v20);
      *v13 = v14;
      v13[1] = v16;
      v13[2] = v11;
      v13[3] = v10;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*,false>(__n128 *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  __n128 v20;
  unsigned int *v21;
  const char *v22;
  const char *v23;
  int v24;
  BOOL v25;
  unint64_t *v26;
  __n128 v27;
  unint64_t *v28;
  char v29;
  BOOL v30;
  unsigned int *v31;
  const char *v32;
  const char *v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  _BOOL4 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  int *v8;
  unsigned int *v9;
  const char *v10;
  const char *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int *v17;
  const char *v18;
  const char *v19;
  BOOL v20;
  unint64_t *v21;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 3;
    if (result + 3 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = v4;
        v8 = (int *)v6[5];
        v9 = (unsigned int *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 4));
        v10 = (char *)v9 + *v9 + 4;
        v11 = (const char *)(v6[2] + *(unsigned __int16 *)(v6[2] - *(int *)v6[2] + 4));
        result = (unint64_t *)strncmp(v10, &v11[*(unsigned int *)v11 + 4], 0x10uLL);
        v12 = v6[3];
        v13 = v12 < *v6;
        if ((_DWORD)result)
          v13 = (int)result < 0;
        if (v13)
        {
          v14 = v6[4];
          v15 = v5;
          while (1)
          {
            v16 = (char *)v3 + v15;
            *(_OWORD *)(v16 + 24) = *(_OWORD *)((char *)v3 + v15);
            *((_QWORD *)v16 + 5) = *(unint64_t *)((char *)v3 + v15 + 16);
            if (!v15)
              break;
            v17 = (unsigned int *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 4));
            v18 = (char *)v17 + *v17 + 4;
            v19 = (const char *)(*((_QWORD *)v16 - 1)
                               + *(unsigned __int16 *)(*((_QWORD *)v16 - 1) - **((int **)v16 - 1) + 4));
            result = (unint64_t *)strncmp(v18, &v19[*(unsigned int *)v19 + 4], 0x10uLL);
            v20 = v12 < *((_QWORD *)v16 - 3);
            if ((_DWORD)result)
              v20 = (int)result < 0;
            v15 -= 24;
            if (!v20)
            {
              v21 = (unint64_t *)((char *)v3 + v15 + 24);
              goto LABEL_14;
            }
          }
          v21 = v3;
LABEL_14:
          *v21 = v12;
          v21[1] = v14;
          v21[2] = (unint64_t)v8;
        }
        v4 = v7 + 3;
        v5 += 24;
        v6 = v7;
      }
      while (v7 + 3 != a2);
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  int *v6;
  unsigned int *v7;
  const char *v8;
  const char *v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unsigned int *v15;
  const char *v16;
  const char *v17;
  BOOL v18;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 3;
    while (v4 != a2)
    {
      v5 = v4;
      v6 = (int *)v3[5];
      v7 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
      v8 = (char *)v7 + *v7 + 4;
      v9 = (const char *)(v3[2] + *(unsigned __int16 *)(v3[2] - *(int *)v3[2] + 4));
      result = (unint64_t *)strncmp(v8, &v9[*(unsigned int *)v9 + 4], 0x10uLL);
      v10 = v3[3];
      v11 = v10 < *v3;
      if ((_DWORD)result)
        v11 = (int)result < 0;
      if (v11)
      {
        v12 = v3[4];
        v13 = v5;
        do
        {
          *(_OWORD *)v13 = *(_OWORD *)(v13 - 3);
          v13[2] = *(v13 - 1);
          v15 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
          v16 = (char *)v15 + *v15 + 4;
          v17 = (const char *)(*(v13 - 4) + *(unsigned __int16 *)(*(v13 - 4) - *(int *)*(v13 - 4) + 4));
          result = (unint64_t *)strncmp(v16, &v17[*(unsigned int *)v17 + 4], 0x10uLL);
          v18 = v10 < *(v13 - 6);
          if ((_DWORD)result)
            v18 = (int)result < 0;
          v14 = v13 - 3;
          v13 -= 3;
        }
        while (v18);
        *v14 = v10;
        v14[1] = v12;
        v14[2] = (unint64_t)v6;
      }
      v4 = v5 + 3;
      v3 = v5;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unsigned int *v6;
  const char *v7;
  const char *v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  const char *v12;
  int v13;
  _BOOL4 v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unsigned int *v21;
  const char *v22;
  const char *v23;
  int v24;
  _BOOL4 v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unsigned int *v32;
  const char *v33;
  const char *v34;
  int v35;
  _BOOL4 v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;

  v6 = (unsigned int *)(a2[2] + *(unsigned __int16 *)(a2[2] - *(int *)a2[2] + 4));
  v7 = (char *)v6 + *v6 + 4;
  v8 = (const char *)(a1[2] + *(unsigned __int16 *)(a1[2] - *(int *)a1[2] + 4));
  v9 = strncmp(v7, &v8[*(unsigned int *)v8 + 4], 0x10uLL);
  v10 = *a2;
  if (v9)
    v11 = v9 < 0;
  else
    v11 = *a2 < *a1;
  v12 = (const char *)(a3[2] + *(unsigned __int16 *)(a3[2] - *(int *)a3[2] + 4));
  v13 = strncmp(&v12[*(unsigned int *)v12 + 4], v7, 0x10uLL);
  v14 = *a3 < v10;
  if (v13)
    v14 = v13 < 0;
  if (v11)
  {
    if (v14)
    {
      v15 = a1[2];
      v16 = *(_OWORD *)a1;
      v17 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v17;
      *(_OWORD *)a3 = v16;
      a3[2] = v15;
      return 1;
    }
    v29 = a1[2];
    v30 = *(_OWORD *)a1;
    v31 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v31;
    *(_OWORD *)a2 = v30;
    a2[2] = v29;
    v32 = (unsigned int *)(a3[2] + *(unsigned __int16 *)(a3[2] - *(int *)a3[2] + 4));
    v33 = (char *)v32 + *v32 + 4;
    v34 = (const char *)(a2[2] + *(unsigned __int16 *)(a2[2] - *(int *)a2[2] + 4));
    v35 = strncmp(v33, &v34[*(unsigned int *)v34 + 4], 0x10uLL);
    v36 = *a3 < *a2;
    if (v35)
      v36 = v35 < 0;
    if (!v36)
      return 1;
    v37 = a2[2];
    v38 = *(_OWORD *)a2;
    v39 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v39;
    *(_OWORD *)a3 = v38;
    a3[2] = v37;
    return 2;
  }
  if (v14)
  {
    v18 = a2[2];
    v19 = *(_OWORD *)a2;
    v20 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v20;
    *(_OWORD *)a3 = v19;
    a3[2] = v18;
    v21 = (unsigned int *)(a2[2] + *(unsigned __int16 *)(a2[2] - *(int *)a2[2] + 4));
    v22 = (char *)v21 + *v21 + 4;
    v23 = (const char *)(a1[2] + *(unsigned __int16 *)(a1[2] - *(int *)a1[2] + 4));
    v24 = strncmp(v22, &v23[*(unsigned int *)v23 + 4], 0x10uLL);
    v25 = *a2 < *a1;
    if (v24)
      v25 = v24 < 0;
    if (!v25)
      return 1;
    v26 = a1[2];
    v27 = *(_OWORD *)a1;
    v28 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v28;
    *(_OWORD *)a2 = v27;
    a2[2] = v26;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppFlatbufferRelocation *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  unsigned int *v7;
  const char *v8;
  const char *v9;
  int v10;
  BOOL v11;
  unint64_t *v12;
  const char *v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  unint64_t *v17;
  const char *v18;
  int v19;
  _BOOL4 v20;
  const char *v21;
  int v22;
  unint64_t v23;
  BOOL v24;
  __int128 v25;
  unsigned int *v26;
  const char *v27;
  const char *v28;
  int v29;
  unint64_t v30;
  _BOOL4 v31;
  const char *v32;
  int v33;
  unint64_t v34;
  BOOL v35;
  __int128 v36;
  __int128 v38;
  unint64_t v39;

  v2 = a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = (int *)a1[2];
  v7 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
  v8 = (char *)v7 + *v7 + 4;
  v9 = (const char *)(*(_QWORD *)(a2 - 8) + *(unsigned __int16 *)(*(_QWORD *)(a2 - 8) - **(int **)(a2 - 8) + 4));
  v10 = strncmp(v8, &v9[*(unsigned int *)v9 + 4], 0x10uLL);
  v11 = v4 < *(_QWORD *)(v2 - 24);
  if (v10)
    v11 = v10 < 0;
  if (v11)
  {
    v12 = a1;
    do
    {
      v13 = (const char *)(v12[5] + *(unsigned __int16 *)(v12[5] - *(int *)v12[5] + 4));
      v14 = strncmp(v8, &v13[*(unsigned int *)v13 + 4], 0x10uLL);
      v15 = v12[3];
      v12 += 3;
      v16 = v4 < v15;
      if (v14)
        v16 = v14 < 0;
    }
    while (!v16);
  }
  else
  {
    v17 = a1 + 3;
    do
    {
      v12 = v17;
      if ((unint64_t)v17 >= v2)
        break;
      v18 = (const char *)(v17[2] + *(unsigned __int16 *)(v17[2] - *(int *)v17[2] + 4));
      v19 = strncmp(v8, &v18[*(unsigned int *)v18 + 4], 0x10uLL);
      v20 = v19 < 0;
      if (!v19)
        v20 = v4 < *v12;
      v17 = v12 + 3;
    }
    while (!v20);
  }
  if ((unint64_t)v12 < v2)
  {
    do
    {
      v21 = (const char *)(*(_QWORD *)(v2 - 8) + *(unsigned __int16 *)(*(_QWORD *)(v2 - 8) - **(int **)(v2 - 8) + 4));
      v22 = strncmp(v8, &v21[*(unsigned int *)v21 + 4], 0x10uLL);
      v23 = *(_QWORD *)(v2 - 24);
      v2 -= 24;
      v24 = v4 < v23;
      if (v22)
        v24 = v22 < 0;
    }
    while (v24);
  }
  while ((unint64_t)v12 < v2)
  {
    v39 = v12[2];
    v38 = *(_OWORD *)v12;
    v25 = *(_OWORD *)v2;
    v12[2] = *(_QWORD *)(v2 + 16);
    *(_OWORD *)v12 = v25;
    *(_QWORD *)(v2 + 16) = v39;
    *(_OWORD *)v2 = v38;
    v26 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
    v27 = (char *)v26 + *v26 + 4;
    do
    {
      v28 = (const char *)(v12[5] + *(unsigned __int16 *)(v12[5] - *(int *)v12[5] + 4));
      v29 = strncmp(v27, &v28[*(unsigned int *)v28 + 4], 0x10uLL);
      v30 = v12[3];
      v12 += 3;
      v31 = v4 < v30;
      if (v29)
        v31 = v29 < 0;
    }
    while (!v31);
    do
    {
      v32 = (const char *)(*(_QWORD *)(v2 - 8) + *(unsigned __int16 *)(*(_QWORD *)(v2 - 8) - **(int **)(v2 - 8) + 4));
      v33 = strncmp(v27, &v32[*(unsigned int *)v32 + 4], 0x10uLL);
      v34 = *(_QWORD *)(v2 - 24);
      v2 -= 24;
      v35 = v4 < v34;
      if (v33)
        v35 = v33 < 0;
    }
    while (v35);
  }
  if (v12 - 3 != a1)
  {
    v36 = *(_OWORD *)(v12 - 3);
    a1[2] = *(v12 - 1);
    *(_OWORD *)a1 = v36;
  }
  *(v12 - 3) = v4;
  *(v12 - 2) = v5;
  *(v12 - 1) = (unint64_t)v6;
  return v12;
}

__n128 std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppFlatbufferRelocation *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(__n128 *a1, unint64_t a2)
{
  uint64_t v4;
  int *v5;
  unsigned int *v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  int v10;
  BOOL v11;
  char *v12;
  const char *v13;
  int v14;
  unint64_t v15;
  _BOOL4 v16;
  const char *v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  const char *v27;
  const char *v28;
  int v29;
  unint64_t v30;
  BOOL v31;
  const char *v32;
  int v33;
  unint64_t v34;
  _BOOL4 v35;
  __n128 v36;
  __n128 result;
  __n128 v38;

  v4 = 0;
  v5 = (int *)a1[1].n128_u64[0];
  v6 = (unsigned int *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 4));
  v7 = (char *)v6 + *v6 + 4;
  v38 = *a1;
  v8 = a1->n128_u64[0];
  do
  {
    v9 = (const char *)(a1[2].n128_u64[v4 + 1]
                      + *(unsigned __int16 *)(a1[2].n128_u64[v4 + 1] - *(int *)a1[2].n128_u64[v4 + 1] + 4));
    v10 = strncmp(&v9[*(unsigned int *)v9 + 4], v7, 0x10uLL);
    v11 = a1[1].n128_u64[v4 + 1] < v8;
    if (v10)
      v11 = v10 < 0;
    v4 += 3;
  }
  while (v11);
  v12 = (char *)a1 + v4 * 8;
  if (v4 == 3)
  {
    do
    {
      if ((unint64_t)v12 >= a2)
        break;
      v17 = (const char *)(*(_QWORD *)(a2 - 8) + *(unsigned __int16 *)(*(_QWORD *)(a2 - 8) - **(int **)(a2 - 8) + 4));
      v18 = strncmp(&v17[*(unsigned int *)v17 + 4], v7, 0x10uLL);
      v19 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
      v20 = v19 < v8;
      if (v18)
        v20 = v18 < 0;
    }
    while (!v20);
  }
  else
  {
    do
    {
      v13 = (const char *)(*(_QWORD *)(a2 - 8) + *(unsigned __int16 *)(*(_QWORD *)(a2 - 8) - **(int **)(a2 - 8) + 4));
      v14 = strncmp(&v13[*(unsigned int *)v13 + 4], v7, 0x10uLL);
      v15 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
      v16 = v15 < v8;
      if (v14)
        v16 = v14 < 0;
    }
    while (!v16);
  }
  v21 = (char *)a1 + v4 * 8;
  if ((unint64_t)v12 < a2)
  {
    v22 = a2;
    do
    {
      v23 = *(_OWORD *)v21;
      v24 = *((_QWORD *)v21 + 2);
      v25 = *(_QWORD *)(v22 + 16);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_QWORD *)v21 + 2) = v25;
      *(_QWORD *)(v22 + 16) = v24;
      *(_OWORD *)v22 = v23;
      v26 = (unsigned int *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 4));
      v27 = (char *)v26 + *v26 + 4;
      do
      {
        v28 = (const char *)(*((_QWORD *)v21 + 5)
                           + *(unsigned __int16 *)(*((_QWORD *)v21 + 5) - **((int **)v21 + 5) + 4));
        v29 = strncmp(&v28[*(unsigned int *)v28 + 4], v27, 0x10uLL);
        v30 = *((_QWORD *)v21 + 3);
        v21 += 24;
        v31 = v30 < v8;
        if (v29)
          v31 = v29 < 0;
      }
      while (v31);
      do
      {
        v32 = (const char *)(*(_QWORD *)(v22 - 8)
                           + *(unsigned __int16 *)(*(_QWORD *)(v22 - 8) - **(int **)(v22 - 8) + 4));
        v33 = strncmp(&v32[*(unsigned int *)v32 + 4], v27, 0x10uLL);
        v34 = *(_QWORD *)(v22 - 24);
        v22 -= 24;
        v35 = v34 < v8;
        if (v33)
          v35 = v33 < 0;
      }
      while (!v35);
    }
    while ((unint64_t)v21 < v22);
  }
  if (v21 - 24 != (char *)a1)
  {
    v36 = *(__n128 *)(v21 - 24);
    a1[1].n128_u64[0] = *((_QWORD *)v21 - 1);
    *a1 = v36;
  }
  result = v38;
  *(__n128 *)(v21 - 24) = v38;
  *((_QWORD *)v21 - 1) = v5;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  const char *v7;
  const char *v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  int v19;
  int *v20;
  unsigned int *v21;
  const char *v22;
  const char *v23;
  int v24;
  unint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int *v30;
  const char *v31;
  const char *v32;
  int v33;
  BOOL v34;
  unint64_t *v35;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (unsigned int *)(*(a2 - 1) + *(unsigned __int16 *)(*(a2 - 1) - *(int *)*(a2 - 1) + 4));
      v7 = (char *)v6 + *v6 + 4;
      v8 = (const char *)(a1[2] + *(unsigned __int16 *)(a1[2] - *(int *)a1[2] + 4));
      v9 = strncmp(v7, &v8[*(unsigned int *)v8 + 4], 0x10uLL);
      v11 = *(a2 - 3);
      v10 = a2 - 3;
      v12 = v11 < *a1;
      if (v9)
        v12 = v9 < 0;
      if (v12)
      {
        v13 = a1[2];
        v14 = *(_OWORD *)a1;
        v15 = v10[2];
        *(_OWORD *)a1 = *(_OWORD *)v10;
        a1[2] = v15;
        *(_OWORD *)v10 = v14;
        v10[2] = v13;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v16 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a1 + 3, a1 + 6);
      v17 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = (int *)v17[2];
    v21 = (unsigned int *)((char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 4));
    v22 = (char *)v21 + *v21 + 4;
    v23 = (const char *)(v16[2] + *(unsigned __int16 *)(v16[2] - *(int *)v16[2] + 4));
    v24 = strncmp(v22, &v23[*(unsigned int *)v23 + 4], 0x10uLL);
    v25 = *v17;
    v26 = *v17 < *v16;
    if (v24)
      v26 = v24 < 0;
    if (v26)
    {
      v27 = v17[1];
      v28 = v18;
      while (1)
      {
        v29 = (char *)a1 + v28;
        *(_OWORD *)(v29 + 72) = *(_OWORD *)((char *)a1 + v28 + 48);
        *((_QWORD *)v29 + 11) = *(unint64_t *)((char *)a1 + v28 + 64);
        if (v28 == -48)
          break;
        v30 = (unsigned int *)((char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 4));
        v31 = (char *)v30 + *v30 + 4;
        v32 = (const char *)(*((_QWORD *)v29 + 5)
                           + *(unsigned __int16 *)(*((_QWORD *)v29 + 5) - **((int **)v29 + 5) + 4));
        v33 = strncmp(v31, &v32[*(unsigned int *)v32 + 4], 0x10uLL);
        v34 = v25 < *((_QWORD *)v29 + 3);
        if (v33)
          v34 = v33 < 0;
        v28 -= 24;
        if (!v34)
        {
          v35 = (unint64_t *)((char *)a1 + v28 + 72);
          goto LABEL_18;
        }
      }
      v35 = a1;
LABEL_18:
      *v35 = v25;
      v35[1] = v27;
      v35[2] = (unint64_t)v20;
      if (++v19 == 8)
        return v17 + 3 == a2;
    }
    v16 = v17;
    v18 += 24;
    v17 += 3;
    if (v17 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unsigned int *v8;
  const char *v9;
  const char *v10;
  int v11;
  __n128 result;
  _BOOL4 v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unsigned int *v17;
  const char *v18;
  const char *v19;
  int v20;
  _BOOL4 v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unsigned int *v25;
  const char *v26;
  const char *v27;
  int v28;
  _BOOL4 v29;
  unint64_t v30;
  unint64_t v31;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a2, a3);
  v8 = (unsigned int *)(a4[2] + *(unsigned __int16 *)(a4[2] - *(int *)a4[2] + 4));
  v9 = (char *)v8 + *v8 + 4;
  v10 = (const char *)(a3[2] + *(unsigned __int16 *)(a3[2] - *(int *)a3[2] + 4));
  v11 = strncmp(v9, &v10[*(unsigned int *)v10 + 4], 0x10uLL);
  v13 = *a4 < *a3;
  if (v11)
    v13 = v11 < 0;
  if (v13)
  {
    v14 = a3[2];
    v15 = *(_OWORD *)a3;
    v16 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v16;
    *(_OWORD *)a4 = v15;
    a4[2] = v14;
    v17 = (unsigned int *)(a3[2] + *(unsigned __int16 *)(a3[2] - *(int *)a3[2] + 4));
    v18 = (char *)v17 + *v17 + 4;
    v19 = (const char *)(a2[2] + *(unsigned __int16 *)(a2[2] - *(int *)a2[2] + 4));
    v20 = strncmp(v18, &v19[*(unsigned int *)v19 + 4], 0x10uLL);
    v21 = *a3 < *a2;
    if (v20)
      v21 = v20 < 0;
    if (v21)
    {
      v22 = a2[2];
      v23 = *(_OWORD *)a2;
      v24 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v24;
      *(_OWORD *)a3 = v23;
      a3[2] = v22;
      v25 = (unsigned int *)(a2[2] + *(unsigned __int16 *)(a2[2] - *(int *)a2[2] + 4));
      v26 = (char *)v25 + *v25 + 4;
      v27 = (const char *)(a1[2] + *(unsigned __int16 *)(a1[2] - *(int *)a1[2] + 4));
      v28 = strncmp(v26, &v27[*(unsigned int *)v27 + 4], 0x10uLL);
      v29 = *a2 < *a1;
      if (v28)
        v29 = v28 < 0;
      if (v29)
      {
        v30 = a1[2];
        result = *(__n128 *)a1;
        v31 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v31;
        *(__n128 *)a2 = result;
        a2[2] = v30;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unsigned int *v10;
  const char *v11;
  const char *v12;
  int v13;
  __n128 result;
  _BOOL4 v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unsigned int *v19;
  const char *v20;
  const char *v21;
  int v22;
  _BOOL4 v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unsigned int *v27;
  const char *v28;
  const char *v29;
  int v30;
  _BOOL4 v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unsigned int *v35;
  const char *v36;
  const char *v37;
  int v38;
  _BOOL4 v39;
  unint64_t v40;
  unint64_t v41;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a2, a3, a4);
  v10 = (unsigned int *)(a5[2] + *(unsigned __int16 *)(a5[2] - *(int *)a5[2] + 4));
  v11 = (char *)v10 + *v10 + 4;
  v12 = (const char *)(a4[2] + *(unsigned __int16 *)(a4[2] - *(int *)a4[2] + 4));
  v13 = strncmp(v11, &v12[*(unsigned int *)v12 + 4], 0x10uLL);
  v15 = *a5 < *a4;
  if (v13)
    v15 = v13 < 0;
  if (v15)
  {
    v16 = a4[2];
    v17 = *(_OWORD *)a4;
    v18 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v18;
    *(_OWORD *)a5 = v17;
    a5[2] = v16;
    v19 = (unsigned int *)(a4[2] + *(unsigned __int16 *)(a4[2] - *(int *)a4[2] + 4));
    v20 = (char *)v19 + *v19 + 4;
    v21 = (const char *)(a3[2] + *(unsigned __int16 *)(a3[2] - *(int *)a3[2] + 4));
    v22 = strncmp(v20, &v21[*(unsigned int *)v21 + 4], 0x10uLL);
    v23 = *a4 < *a3;
    if (v22)
      v23 = v22 < 0;
    if (v23)
    {
      v24 = a3[2];
      v25 = *(_OWORD *)a3;
      v26 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v26;
      *(_OWORD *)a4 = v25;
      a4[2] = v24;
      v27 = (unsigned int *)(a3[2] + *(unsigned __int16 *)(a3[2] - *(int *)a3[2] + 4));
      v28 = (char *)v27 + *v27 + 4;
      v29 = (const char *)(a2[2] + *(unsigned __int16 *)(a2[2] - *(int *)a2[2] + 4));
      v30 = strncmp(v28, &v29[*(unsigned int *)v29 + 4], 0x10uLL);
      v31 = *a3 < *a2;
      if (v30)
        v31 = v30 < 0;
      if (v31)
      {
        v32 = a2[2];
        v33 = *(_OWORD *)a2;
        v34 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v34;
        *(_OWORD *)a3 = v33;
        a3[2] = v32;
        v35 = (unsigned int *)(a2[2] + *(unsigned __int16 *)(a2[2] - *(int *)a2[2] + 4));
        v36 = (char *)v35 + *v35 + 4;
        v37 = (const char *)(a1[2] + *(unsigned __int16 *)(a1[2] - *(int *)a1[2] + 4));
        v38 = strncmp(v36, &v37[*(unsigned int *)v37 + 4], 0x10uLL);
        v39 = *a2 < *a1;
        if (v38)
          v39 = v38 < 0;
        if (v39)
        {
          v40 = a1[2];
          result = *(__n128 *)a1;
          v41 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          a1[2] = v41;
          *(__n128 *)a2 = result;
          a2[2] = v40;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*,CSCppFlatbufferRelocation*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unsigned int *v15;
  const char *v16;
  const char *v17;
  int v18;
  _BOOL4 v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  int64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  __int128 v26;
  __int128 v29;
  unint64_t v30;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[3 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = (unsigned int *)(v14[2] + *(unsigned __int16 *)(v14[2] - *(int *)v14[2] + 4));
        v16 = (char *)v15 + *v15 + 4;
        v17 = (const char *)(a1[2] + *(unsigned __int16 *)(a1[2] - *(int *)a1[2] + 4));
        v18 = strncmp(v16, &v17[*(unsigned int *)v17 + 4], 0x10uLL);
        v19 = *v14 < *a1;
        if (v18)
          v19 = v18 < 0;
        if (v19)
        {
          v20 = v14[2];
          v21 = *(_OWORD *)v14;
          v22 = a1[2];
          *(_OWORD *)v14 = *(_OWORD *)a1;
          v14[2] = v22;
          *(_OWORD *)a1 = v21;
          a1[2] = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v23 = v8 / 0x18uLL;
      v24 = a2 - 3;
      do
      {
        v29 = *(_OWORD *)a1;
        v30 = a1[2];
        v25 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a4, v23);
        if (v24 == v25)
        {
          *(_OWORD *)v25 = v29;
          v25[2] = v30;
        }
        else
        {
          v26 = *(_OWORD *)v24;
          v25[2] = v24[2];
          *(_OWORD *)v25 = v26;
          *(_OWORD *)v24 = v29;
          v24[2] = v30;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>((uint64_t)a1, (uint64_t)(v25 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (v25 + 3 - a1));
        }
        v24 -= 3;
      }
      while (v23-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  const char *v13;
  const char *v14;
  int v15;
  _BOOL4 v16;
  unint64_t v17;
  unsigned int *v18;
  const char *v19;
  int *v20;
  const char *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t *v24;
  __int128 v25;
  uint64_t v26;
  unsigned int *v27;
  const char *v28;
  const char *v29;
  int v30;
  _BOOL4 v31;
  unint64_t v32;
  unsigned int *v33;
  const char *v34;
  const char *v35;
  _BOOL4 v36;
  unint64_t v37;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      v9 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      v10 = (unint64_t *)(result + 24 * v9);
      v11 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
      if (v11 >= a3)
      {
        v17 = *v10;
      }
      else
      {
        v12 = (unsigned int *)(*(_QWORD *)(result + 24 * v9 + 16)
                             + *(unsigned __int16 *)(*(_QWORD *)(result + 24 * v9 + 16)
                                                   - **(int **)(result + 24 * v9 + 16)
                                                   + 4));
        v13 = (char *)v12 + *v12 + 4;
        v14 = (const char *)(v10[5] + *(unsigned __int16 *)(v10[5] - *(int *)v10[5] + 4));
        v15 = strncmp(v13, &v14[*(unsigned int *)v14 + 4], 0x10uLL);
        v16 = *v10 < v10[3];
        if (v15)
          v16 = v15 < 0;
        if (v16)
          v17 = v10[3];
        else
          v17 = *v10;
        if (v16)
        {
          v10 += 3;
          v9 = v11;
        }
      }
      v18 = (unsigned int *)(v10[2] + *(unsigned __int16 *)(v10[2] - *(int *)v10[2] + 4));
      v19 = (char *)v18 + *v18 + 4;
      v20 = (int *)v5[2];
      v21 = (char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 4);
      result = strncmp(v19, &v21[*(unsigned int *)v21 + 4], 0x10uLL);
      v22 = *v5;
      v23 = v17 < *v5;
      if ((_DWORD)result)
        v23 = (int)result < 0;
      if (!v23)
      {
        v37 = v5[1];
        do
        {
          v24 = v5;
          v5 = v10;
          v25 = *(_OWORD *)v10;
          v24[2] = v10[2];
          *(_OWORD *)v24 = v25;
          if (v7 < v9)
            break;
          v26 = (2 * v9) | 1;
          v10 = (unint64_t *)(v6 + 24 * v26);
          v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            v32 = *v10;
            v9 = v26;
          }
          else
          {
            v27 = (unsigned int *)(*(_QWORD *)(v6 + 24 * v26 + 16)
                                 + *(unsigned __int16 *)(*(_QWORD *)(v6 + 24 * v26 + 16)
                                                       - **(int **)(v6 + 24 * v26 + 16)
                                                       + 4));
            v28 = (char *)v27 + *v27 + 4;
            v29 = (const char *)(v10[5] + *(unsigned __int16 *)(v10[5] - *(int *)v10[5] + 4));
            v30 = strncmp(v28, &v29[*(unsigned int *)v29 + 4], 0x10uLL);
            v31 = *v10 < v10[3];
            if (v30)
              v31 = v30 < 0;
            v32 = v31 ? v10[3] : *v10;
            if (v31)
              v10 += 3;
            else
              v9 = v26;
          }
          v33 = (unsigned int *)(v10[2] + *(unsigned __int16 *)(v10[2] - *(int *)v10[2] + 4));
          v34 = (char *)v33 + *v33 + 4;
          v35 = (char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 4);
          result = strncmp(v34, &v35[*(unsigned int *)v35 + 4], 0x10uLL);
          v36 = v32 < v22;
          if ((_DWORD)result)
            v36 = (int)result < 0;
        }
        while (!v36);
        *v5 = v22;
        v5[1] = v37;
        v5[2] = (unint64_t)v20;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  const char *v12;
  const char *v13;
  int v14;
  _BOOL4 v15;
  __int128 v16;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[3 * v5 + 3];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      v11 = (unsigned int *)(a1[3 * v5 + 5] + *(unsigned __int16 *)(a1[3 * v5 + 5] - *(int *)a1[3 * v5 + 5] + 4));
      v12 = (char *)v11 + *v11 + 4;
      v13 = (const char *)(v8[5] + *(unsigned __int16 *)(v8[5] - *(int *)v8[5] + 4));
      v14 = strncmp(v12, &v13[*(unsigned int *)v13 + 4], 0x10uLL);
      v15 = *v8 < v8[3];
      if (v14)
        v15 = v14 < 0;
      if (v15)
      {
        v8 += 3;
        v9 = v10;
      }
    }
    v16 = *(_OWORD *)v8;
    a1[2] = v8[2];
    *(_OWORD *)a1 = v16;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unsigned int *v9;
  const char *v10;
  int *v11;
  const char *v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t *v17;
  __int128 v18;
  unsigned int *v19;
  const char *v20;
  const char *v21;
  BOOL v22;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (unint64_t *)(result + 24 * (v4 >> 1));
    v9 = (unsigned int *)(v8[2] + *(unsigned __int16 *)(v8[2] - *(int *)v8[2] + 4));
    v10 = (char *)v9 + *v9 + 4;
    v11 = *(int **)(a2 - 8);
    v12 = (char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 4);
    result = strncmp(v10, &v12[*(unsigned int *)v12 + 4], 0x10uLL);
    v13 = (unint64_t *)(a2 - 24);
    v14 = *(_QWORD *)(a2 - 24);
    v15 = *v8 < v14;
    if ((_DWORD)result)
      v15 = (int)result < 0;
    if (v15)
    {
      v16 = *(_QWORD *)(a2 - 16);
      do
      {
        v17 = v13;
        v13 = v8;
        v18 = *(_OWORD *)v8;
        v17[2] = v8[2];
        *(_OWORD *)v17 = v18;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (unint64_t *)(v6 + 24 * v7);
        v19 = (unsigned int *)(v8[2] + *(unsigned __int16 *)(v8[2] - *(int *)v8[2] + 4));
        v20 = (char *)v19 + *v19 + 4;
        v21 = (char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 4);
        result = strncmp(v20, &v21[*(unsigned int *)v21 + 4], 0x10uLL);
        v22 = *v8 < v14;
        if ((_DWORD)result)
          v22 = (int)result < 0;
      }
      while (v22);
      *v13 = v14;
      v13[1] = v16;
      v13[2] = (unint64_t)v11;
    }
  }
  return result;
}

BOOL is_relocation_skippable(const char *a1)
{
  return !strncmp(a1, "__PAGEZERO", 0xBuLL)
      || !strncmp(a1, "__LINKEDIT", 0xBuLL)
      || !strncmp(a1, "__LINKINFO", 0xBuLL)
      || !strncmp(a1, "__PRELINK", 9uLL)
      || !strncmp(a1, "__OBJC_R", 8uLL)
      || !strncmp(a1, "__DWARF", 7uLL)
      || strncmp(a1, "__PLK", 5uLL) == 0;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  __int128 *v18;
  unint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  char v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 24);
        if (v6 < *(_QWORD *)v4)
        {
          v10 = *(_OWORD *)(v4 + 32);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v6 >= *(_QWORD *)(v8 - 24))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_QWORD *)v9 = v6;
          *(_OWORD *)(v9 + 8) = v10;
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(__int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *((_QWORD *)a1 + 2);
      v6 = *a1;
      v7 = a3[2];
      *a1 = *(_OWORD *)a3;
      *((_QWORD *)a1 + 2) = v7;
      *(_OWORD *)a3 = v6;
      a3[2] = v5;
      return 1;
    }
    v14 = *((_QWORD *)a1 + 2);
    v15 = *a1;
    v16 = a2[2];
    *a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = v16;
    *(_OWORD *)a2 = v15;
    a2[2] = v14;
    if (*a3 >= *a2)
      return 1;
    v17 = a2[2];
    v18 = *(_OWORD *)a2;
    v19 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v19;
    *(_OWORD *)a3 = v18;
    a3[2] = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = a2[2];
    v9 = *(_OWORD *)a2;
    v10 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v10;
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
    if (*a2 >= *(_QWORD *)a1)
      return 1;
    v11 = *((_QWORD *)a1 + 2);
    v12 = *a1;
    v13 = a2[2];
    *a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = v13;
    *(_OWORD *)a2 = v12;
    a2[2] = v11;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v12;
  unint64_t v13;
  __int128 v14;

  v2 = *a1;
  v14 = *(_OWORD *)(a1 + 1);
  if (*a1 >= *(_QWORD *)(a2 - 24))
  {
    v5 = a1 + 3;
    do
    {
      v3 = v5;
      if ((unint64_t)v5 >= a2)
        break;
      v5 += 3;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      v6 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v6);
  }
  while ((unint64_t)v3 < a2)
  {
    v13 = v3[2];
    v12 = *(_OWORD *)v3;
    v7 = *(_OWORD *)a2;
    v3[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v3 = v7;
    *(_QWORD *)(a2 + 16) = v13;
    *(_OWORD *)a2 = v12;
    do
    {
      v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      v9 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    v10 = *(_OWORD *)(v3 - 3);
    a1[2] = *(v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_OWORD *)v3 - 1) = v14;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v17;

  v2 = 0;
  v3 = *a1;
  v17 = *(_OWORD *)(a1 + 1);
  do
  {
    v4 = a1[v2 + 3];
    v2 += 3;
  }
  while (v4 < v3);
  v5 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    do
    {
      if (v5 >= a2)
        break;
      v7 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  v8 = &a1[v2];
  if (v5 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_OWORD *)v8;
      v11 = v8[2];
      v12 = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v12;
      *(_QWORD *)(v9 + 16) = v11;
      *(_OWORD *)v9 = v10;
      do
      {
        v13 = v8[3];
        v8 += 3;
      }
      while (v13 < v3);
      do
      {
        v14 = *(_QWORD *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if (v8 - 3 != a1)
  {
    v15 = *(_OWORD *)(v8 - 3);
    a1[2] = *(v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *(v8 - 3) = v3;
  *((_OWORD *)v8 - 1) = v17;
  return v8 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) < *(_QWORD *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *v10)
    {
      v18 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    v9 = a3[2];
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if (*a3 < *a2)
    {
      v11 = a2[2];
      result = *(__n128 *)a2;
      v12 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      a3[2] = v11;
      if (*a2 < *(_QWORD *)a1)
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(__n128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    v11 = a4[1].n128_u64[0];
    result = *a4;
    v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    if (a4->n128_u64[0] < *a3)
    {
      v13 = a3[2];
      result = *(__n128 *)a3;
      v14 = a4[1].n128_u64[0];
      *(__n128 *)a3 = *a4;
      a3[2] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      if (*a3 < *a2)
      {
        v15 = a2[2];
        result = *(__n128 *)a2;
        v16 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v16;
        *(__n128 *)a3 = result;
        a3[2] = v15;
        if (*a2 < a1->n128_u64[0])
        {
          v17 = a1[1].n128_u64[0];
          result = *a1;
          v18 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v18;
          *(__n128 *)a2 = result;
          a2[2] = v17;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,TRangeValue<Pointer64,unsigned long long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v28;
  unint64_t v29;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[3 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = v14[2];
          v16 = *(_OWORD *)v14;
          v17 = a1[2];
          *(_OWORD *)v14 = *(_OWORD *)a1;
          v14[2] = v17;
          *(_OWORD *)a1 = v16;
          a1[2] = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      do
      {
        v19 = 0;
        v28 = *(_OWORD *)a1;
        v29 = a1[2];
        v20 = a1;
        do
        {
          v21 = &v20[3 * v19 + 3];
          v22 = (2 * v19) | 1;
          v23 = 2 * v19 + 2;
          if (v23 < v18 && *v21 < v21[3])
          {
            v21 += 3;
            v22 = v23;
          }
          v24 = *(_OWORD *)v21;
          v20[2] = v21[2];
          *(_OWORD *)v20 = v24;
          v20 = v21;
          v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 -= 3;
        if (v21 == v6)
        {
          v21[2] = v29;
          *(_OWORD *)v21 = v28;
        }
        else
        {
          v25 = *(_OWORD *)v6;
          v21[2] = v6[2];
          *(_OWORD *)v21 = v25;
          *(_OWORD *)v6 = v28;
          v6[2] = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((uint64_t)a1, (uint64_t)(v21 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (v21 + 3 - a1));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 result;
  __n128 v16;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v6 = (unint64_t *)(a1 + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2 >= a3)
      {
        v7 = *v6;
      }
      else
      {
        v7 = *v6;
        v8 = v6[3];
        if (*v6 <= v8)
          v7 = v6[3];
        if (*v6 < v8)
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      v9 = *a4;
      if (v7 >= *a4)
      {
        v16 = *(__n128 *)(a4 + 1);
        do
        {
          v10 = a4;
          a4 = v6;
          v11 = *(_OWORD *)v6;
          v10[2] = v6[2];
          *(_OWORD *)v10 = v11;
          if (v4 < v5)
            break;
          v12 = (2 * v5) | 1;
          v6 = (unint64_t *)(a1 + 24 * v12);
          v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            v13 = *v6;
            v5 = v12;
          }
          else
          {
            v13 = *v6;
            v14 = v6[3];
            if (*v6 <= v14)
              v13 = v6[3];
            if (*v6 >= v14)
              v5 = v12;
            else
              v6 += 3;
          }
        }
        while (v13 >= v9);
        *a4 = v9;
        result = v16;
        *(__n128 *)(a4 + 1) = v16;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  __n128 result;
  __n128 v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (__int128 *)(a1 + 24 * v4);
    v6 = (__int128 *)(a2 - 24);
    v7 = *(_QWORD *)(a2 - 24);
    if (*(_QWORD *)v5 < v7)
    {
      v11 = *(__n128 *)(a2 - 16);
      do
      {
        v8 = v6;
        v6 = v5;
        v9 = *v5;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v5 + 2);
        *v8 = v9;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (__int128 *)(a1 + 24 * v4);
      }
      while (*(_QWORD *)v5 < v7);
      *(_QWORD *)v6 = v7;
      result = v11;
      *(__int128 *)((char *)v6 + 8) = (__int128)v11;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppFlatbufferRelocation*,false>(__n128 *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  __n128 v20;
  unsigned int *v21;
  const char *v22;
  const char *v23;
  int v24;
  BOOL v25;
  unint64_t *v26;
  __n128 v27;
  unint64_t *v28;
  char v29;
  BOOL v30;
  unsigned int *v31;
  const char *v32;
  const char *v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  _BOOL4 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppFlatbufferRelocation*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  const char *v7;
  const char *v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  int v19;
  int *v20;
  unsigned int *v21;
  const char *v22;
  const char *v23;
  int v24;
  unint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int *v30;
  const char *v31;
  const char *v32;
  int v33;
  BOOL v34;
  unint64_t *v35;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (unsigned int *)(*(a2 - 1) + *(unsigned __int16 *)(*(a2 - 1) - *(int *)*(a2 - 1) + 4));
      v7 = (char *)v6 + *v6 + 4;
      v8 = (const char *)(a1[2] + *(unsigned __int16 *)(a1[2] - *(int *)a1[2] + 4));
      v9 = strncmp(v7, &v8[*(unsigned int *)v8 + 4], 0x10uLL);
      v11 = *(a2 - 3);
      v10 = a2 - 3;
      v12 = v11 < *a1;
      if (v9)
        v12 = v9 < 0;
      if (v12)
      {
        v13 = a1[2];
        v14 = *(_OWORD *)a1;
        v15 = v10[2];
        *(_OWORD *)a1 = *(_OWORD *)v10;
        a1[2] = v15;
        *(_OWORD *)v10 = v14;
        v10[2] = v13;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v16 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppFlatbufferRelocation*>(a1, a1 + 3, a1 + 6);
      v17 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = (int *)v17[2];
    v21 = (unsigned int *)((char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 4));
    v22 = (char *)v21 + *v21 + 4;
    v23 = (const char *)(v16[2] + *(unsigned __int16 *)(v16[2] - *(int *)v16[2] + 4));
    v24 = strncmp(v22, &v23[*(unsigned int *)v23 + 4], 0x10uLL);
    v25 = *v17;
    v26 = *v17 < *v16;
    if (v24)
      v26 = v24 < 0;
    if (v26)
    {
      v27 = v17[1];
      v28 = v18;
      while (1)
      {
        v29 = (char *)a1 + v28;
        *(_OWORD *)(v29 + 72) = *(_OWORD *)((char *)a1 + v28 + 48);
        *((_QWORD *)v29 + 11) = *(unint64_t *)((char *)a1 + v28 + 64);
        if (v28 == -48)
          break;
        v30 = (unsigned int *)((char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 4));
        v31 = (char *)v30 + *v30 + 4;
        v32 = (const char *)(*((_QWORD *)v29 + 5)
                           + *(unsigned __int16 *)(*((_QWORD *)v29 + 5) - **((int **)v29 + 5) + 4));
        v33 = strncmp(v31, &v32[*(unsigned int *)v32 + 4], 0x10uLL);
        v34 = v25 < *((_QWORD *)v29 + 3);
        if (v33)
          v34 = v33 < 0;
        v28 -= 24;
        if (!v34)
        {
          v35 = (unint64_t *)((char *)a1 + v28 + 72);
          goto LABEL_18;
        }
      }
      v35 = a1;
LABEL_18:
      *v35 = v25;
      v35[1] = v27;
      v35[2] = (unint64_t)v20;
      if (++v19 == 8)
        return v17 + 3 == a2;
    }
    v16 = v17;
    v18 += 24;
    v17 += 3;
    if (v17 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  const char *v17;
  const char *v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  char v22;
  BOOL v23;
  const char *v24;
  const char *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppFlatbufferRelocation,CSCppSegmentRange>(std::vector<CSCppFlatbufferRelocation> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppFlatbufferRelocation&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  const char *v29;
  int v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1))
        v6 = (const char *)*(a2 - 1);
      else
        v6 = (const char *)*(a2 - 2);
      if (a1[3])
        v7 = (const char *)a1[3];
      else
        v7 = (const char *)a1[2];
      v8 = strncmp(v6, v7, 0x10uLL);
      v10 = *(v2 - 4);
      v9 = v2 - 4;
      v11 = v10 < *a1;
      if (v8)
        v11 = v8 < 0;
      if (v11)
      {
        v13 = *(_OWORD *)a1;
        v12 = *((_OWORD *)a1 + 1);
        v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      v16 = a1 + 12;
      if (a1 + 12 == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v33 = v2;
      break;
  }
  while (1)
  {
    v20 = v16[2];
    v19 = v16[3];
    if (v19)
      v21 = (const char *)v16[3];
    else
      v21 = (const char *)v16[2];
    if (v15[3])
      v22 = (const char *)v15[3];
    else
      v22 = (const char *)v15[2];
    v23 = strncmp(v21, v22, 0x10uLL);
    v24 = *v16;
    v25 = *v16 < *v15;
    if (v23)
      v25 = v23 < 0;
    if (v25)
    {
      v34 = v16[1];
      v26 = v17;
      while (1)
      {
        v27 = (char *)a1 + v26;
        v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64)
          break;
        if (*((_QWORD *)v27 + 7))
          v29 = (const char *)*((_QWORD *)v27 + 7);
        else
          v29 = (const char *)*((_QWORD *)v27 + 6);
        v30 = strncmp(v21, v29, 0x10uLL);
        v31 = v24 < *((_QWORD *)v27 + 4);
        if (v30)
          v31 = v30 < 0;
        v26 -= 32;
        if (!v31)
        {
          v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      v32 = a1;
LABEL_33:
      v2 = v33;
      *v32 = v24;
      v32[1] = v34;
      v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8)
        return v16 + 4 == v33;
    }
    v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2)
      return 1;
  }
}

_QWORD *std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B40E8768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned int **FlatbufferSymbolOwnerData::findUpperAndLowerRangeForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Section>,FlatbufferSymbols::Section const*>>@<X0>(unsigned int **a1@<X1>, unsigned int **a2@<X2>, unsigned int *a3@<X3>, uint64_t a4@<X4>, unsigned int **a5@<X8>)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int **result;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;

  v10 = *a1;
  v11 = *a2;
  v26 = a3;
  v28 = v11;
  v29 = v10;
  std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>,unsigned long long,std::__identity>(&v29, &v28, (unint64_t *)&v26, &v27);
  v12 = *a1;
  v13 = v27;
  if (v27 == *a1)
  {
LABEL_11:
    v13 = v12;
  }
  else
  {
    v14 = v27;
    while (1)
    {
      v16 = *--v14;
      v15 = v16;
      v17 = v16 - (uint64_t)*(int *)((char *)v13 + v16 - 4);
      v18 = *(unsigned __int16 *)((char *)v13 + v17 - 4);
      if (v18 < 7)
        break;
      v19 = *(_WORD *)((char *)v13 + v17 + 2)
          ? *(_QWORD *)((char *)v13 + v15 + *(unsigned __int16 *)((char *)v13 + v17 + 2) - 4)
          : -1;
      if (v18 < 9)
        break;
      v20 = *(unsigned __int16 *)((char *)v13 + v17 + 4);
      if (!v20 || (unint64_t)a3 - v19 >= *(_QWORD *)((char *)v13 + v15 + v20 - 4))
        break;
      v27 = v14;
      v13 = v14;
      if (v14 == v12)
        goto LABEL_11;
    }
  }
  v21 = *a2;
  v25 = (uint64_t)a3 + a4 - 1;
  v28 = v21;
  v29 = v13;
  result = std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Segment>,FlatbufferSymbols::Segment const*>,unsigned long long,std::__identity>(&v29, &v28, (unint64_t *)&v25, &v26);
  v24 = v26;
  v23 = v27;
  if (v27 == v26)
  {
    v23 = *a2;
    v24 = *a2;
  }
  *a5 = v23;
  a5[1] = v24;
  return result;
}

unsigned int **std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,StringComparison &,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity>@<X0>(unsigned int **result@<X0>, char **a2@<X1>, const char **a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned int *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  int *v13;
  const char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  unsigned int *v18;
  char *v19;
  unsigned int *v20;
  unsigned int *v21;
  char *v22;
  unsigned int *v23;
  unsigned int *v24;

  v5 = *result;
  v6 = *a2;
  v7 = *a2 - (char *)*result;
  if (v7 >= 4)
  {
    v9 = result;
    v10 = v7 >> 2;
    do
    {
      v11 = v10 >> 1;
      v12 = (unsigned int *)((char *)v5 + ((2 * v10) & 0x3FFFFFFFCLL));
      v13 = (int *)((char *)v12 + *v12);
      v14 = *a3;
      v15 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v15 >= 5u && (v16 = v15[2]) != 0)
      {
        v17 = (char *)v13 + v16 + *(unsigned int *)((char *)v13 + v16);
        result = (unsigned int **)strcmp(v17 + 4, *a3);
        if ((result & 0x80000000) != 0)
          goto LABEL_8;
      }
      else
      {
        result = (unsigned int **)strcmp((const char *)4, *a3);
        if ((result & 0x80000000) != 0)
        {
LABEL_8:
          v5 = v12 + 1;
          *v9 = v12 + 1;
          v11 = v10 + ~v11;
          goto LABEL_12;
        }
        v17 = 0;
      }
      result = (unsigned int **)strcmp(v17 + 4, v14);
      if ((int)result <= 0)
      {
        v22 = (char *)v5 + ((2 * v10) & 0x3FFFFFFFCLL);
        v23 = v5;
        std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity,StringComparison>(&v23, &v22, a3, &v24);
        v19 = v6;
        v20 = v12 + 1;
        result = std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,StringComparison &,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity &>(&v20, &v19, a3, &v21);
        v18 = v21;
        *a4 = v24;
        a4[1] = v18;
        return result;
      }
      v6 = (char *)v5 + ((2 * v10) & 0x3FFFFFFFCLL);
LABEL_12:
      v10 = v11;
    }
    while (v11);
  }
  *a4 = v5;
  a4[1] = v5;
  return result;
}

unsigned int **std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity,StringComparison>@<X0>(unsigned int **result@<X0>, _QWORD *a2@<X1>, const char **a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned int *v5;
  unint64_t v6;
  unsigned int **v8;
  unint64_t v9;
  unsigned int *v10;
  int *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;

  v5 = *result;
  v6 = *a2 - (_QWORD)*result;
  if (v6 >= 4)
  {
    v8 = result;
    v9 = v6 >> 2;
    do
    {
      v10 = (unsigned int *)((char *)v5 + ((2 * v9) & 0x3FFFFFFFCLL));
      v11 = (int *)((char *)v10 + *v10);
      v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 5u && (v13 = v12[2]) != 0)
        v14 = (char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13);
      else
        v14 = 0;
      v15 = v9 >> 1;
      result = (unsigned int **)strcmp(v14 + 4, *a3);
      if ((result & 0x80000000) != 0)
      {
        v5 = v10 + 1;
        *v8 = v10 + 1;
        v15 = v9 + ~v15;
      }
      v9 = v15;
    }
    while (v15);
  }
  *a4 = v5;
  return result;
}

unsigned int **std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,StringComparison &,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SymbolNameEntry>,FlatbufferSymbols::SymbolNameEntry const*>,char const*,std::__identity &>@<X0>(unsigned int **result@<X0>, _QWORD *a2@<X1>, const char **a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned int *v5;
  unint64_t v6;
  unsigned int **v8;
  unint64_t v9;
  unsigned int *v10;
  int *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;

  v5 = *result;
  v6 = *a2 - (_QWORD)*result;
  if (v6 >= 4)
  {
    v8 = result;
    v9 = v6 >> 2;
    do
    {
      v10 = (unsigned int *)((char *)v5 + ((2 * v9) & 0x3FFFFFFFCLL));
      v11 = (int *)((char *)v10 + *v10);
      v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 5u && (v13 = v12[2]) != 0)
        v14 = (char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13);
      else
        v14 = 0;
      v15 = v9 >> 1;
      result = (unsigned int **)strcmp(v14 + 4, *a3);
      if ((int)result <= 0)
      {
        v5 = v10 + 1;
        *v8 = v10 + 1;
        v15 = v9 + ~v15;
      }
      v9 = v15;
    }
    while (v15);
  }
  *a4 = v5;
  return result;
}

unsigned int **FlatbufferSymbolOwnerData::findUpperAndLowerRangeForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>>@<X0>(unsigned int **a1@<X1>, unsigned int **a2@<X2>, unsigned int *a3@<X3>, uint64_t a4@<X4>, unsigned int **a5@<X8>)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v21;
  unsigned int **result;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;

  v10 = *a1;
  v11 = *a2;
  v26 = a3;
  v28 = v11;
  v29 = v10;
  std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>,unsigned long long,std::__identity>(&v29, &v28, (unint64_t *)&v26, &v27);
  v12 = *a1;
  v13 = v27;
  if (v27 != *a1)
  {
    v14 = v27 - 1;
    while (1)
    {
      v15 = *v14;
      v16 = v15 - *(int *)((char *)v14 + v15);
      v17 = *(unsigned __int16 *)((char *)v14 + v16);
      if (v17 < 5)
        break;
      if (*(_WORD *)((char *)v14 + v16 + 4))
        v18 = *(_QWORD *)((char *)v14 + v15 + *(unsigned __int16 *)((char *)v14 + v16 + 4));
      else
        v18 = -1;
      if (v17 < 7
        || (v19 = *(unsigned __int16 *)((char *)v14 + v16 + 6)) == 0
        || (unint64_t)a3 - v18 >= *(_QWORD *)((char *)v14 + v15 + v19))
      {
        v12 = v13;
        goto LABEL_15;
      }
      --v13;
      v27 = v14;
      if (v14-- == v12)
        goto LABEL_15;
    }
    v12 = v14 + 1;
  }
LABEL_15:
  v21 = *a2;
  v25 = (uint64_t)a3 + a4 - 1;
  v28 = v21;
  v29 = v12;
  result = std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::Symbol>,FlatbufferSymbols::Symbol const*>,unsigned long long,std::__identity>(&v29, &v28, (unint64_t *)&v25, &v26);
  v24 = v26;
  v23 = v27;
  if (v27 == v26)
  {
    v23 = *a2;
    v24 = *a2;
  }
  *a5 = v23;
  a5[1] = v24;
  return result;
}

uint64_t FlatbufferSymbols::Symbol::source_infos(FlatbufferSymbols::Symbol *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 0xDu && (v2 = v1[6]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

unsigned int **FlatbufferSymbolOwnerData::findUpperAndLowerRangeForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>>@<X0>(unsigned int **a1@<X1>, unsigned int **a2@<X2>, unsigned int *a3@<X3>, uint64_t a4@<X4>, unsigned int **a5@<X8>)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int **result;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;

  v10 = *a1;
  v11 = *a2;
  v27 = a3;
  v29 = v11;
  v30 = v10;
  std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>,unsigned long long,std::__identity>(&v30, &v29, (unint64_t *)&v27, &v28);
  v12 = *a1;
  v13 = v28;
  if (v28 == *a1)
  {
LABEL_14:
    v13 = v12;
  }
  else
  {
    v14 = v28;
    while (1)
    {
      v16 = *--v14;
      v15 = v16;
      v17 = v16 - (uint64_t)*(int *)((char *)v13 + v16 - 4);
      v18 = *(unsigned __int16 *)((char *)v13 + v17 - 4);
      if (v18 < 0xD)
      {
        v20 = 0;
        v19 = -1;
      }
      else
      {
        v19 = *(_WORD *)((char *)v13 + v17 + 8)
            ? *(_QWORD *)((char *)v13 + v15 + *(unsigned __int16 *)((char *)v13 + v17 + 8) - 4)
            : -1;
        if (v18 >= 0xF && (v21 = *(unsigned __int16 *)((char *)v13 + v17 + 10)) != 0)
          v20 = *(unsigned int *)((char *)v13 + v15 + v21 - 4);
        else
          v20 = 0;
      }
      if ((unint64_t)a3 - v19 >= v20)
        break;
      v28 = v14;
      v13 = v14;
      if (v14 == v12)
        goto LABEL_14;
    }
  }
  v22 = *a2;
  v26 = (uint64_t)a3 + a4 - 1;
  v29 = v22;
  v30 = v13;
  result = std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>,unsigned long long,std::__identity>(&v30, &v29, (unint64_t *)&v26, &v27);
  v25 = v27;
  v24 = v28;
  if (v28 == v27)
  {
    v24 = *a2;
    v25 = *a2;
  }
  *a5 = v24;
  a5[1] = v25;
  return result;
}

unsigned int **std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>,unsigned long long,std::__identity>@<X0>(unsigned int **result@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  int *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = *result;
  v5 = *a2 - (_QWORD)*result;
  if (v5 >= 4)
  {
    v6 = v5 >> 2;
    v7 = *a3;
    do
    {
      v8 = (unsigned int *)((char *)v4 + ((2 * v6) & 0x3FFFFFFFCLL));
      v9 = (int *)((char *)v8 + *v8);
      v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 0xDu && (v11 = v10[6]) != 0)
        v12 = *(_QWORD *)((char *)v9 + v11);
      else
        v12 = -1;
      v13 = v6 >> 1;
      if (v12 <= v7)
      {
        v4 = v8 + 1;
        *result = v8 + 1;
        v13 = v6 + ~v13;
      }
      v6 = v13;
    }
    while (v13);
  }
  *a4 = v4;
  return result;
}

uint64_t FlatbufferSymbols::Symbol::inline_symbols(FlatbufferSymbols::Symbol *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 0x11u && (v2 = v1[8]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

unsigned int *FlatbufferSymbolOwnerData::findMatchingEntryInFlatbufferTypeWithVMAddressRange<FlatbufferSymbols::Symbol,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>> const* (FlatbufferSymbols::Symbol::*)(void)const,FlatbufferSymbols::SourceInfo const*>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  unsigned int *result;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;

  if (!a2)
    return 0;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *))(*v8 + a3);
  result = (unsigned int *)a3(v8);
  if (result)
  {
    v10 = result;
    v11 = result + 1;
    v13 = result + 1;
    v12 = &result[*result + 1];
    FlatbufferSymbolOwnerData::findMatchingEntryForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>>(&v13, &v12, a5, a6, &v14);
    if (v14 == &v11[*v10])
      return 0;
    else
      return (unsigned int *)((char *)v14 + *v14);
  }
  return result;
}

unsigned int **FlatbufferSymbolOwnerData::findMatchingEntryForVMAddressRange<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>>@<X0>(unsigned int **a1@<X1>, unsigned int **a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unsigned int **a5@<X8>)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int **result;
  unsigned int *v13;
  int *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;

  v10 = *a1;
  v11 = *a2;
  v20 = a3;
  v22 = v11;
  v23 = v10;
  result = std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,AddressComparison,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>,flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SourceInfo>,FlatbufferSymbols::SourceInfo const*>,unsigned long long,std::__identity>(&v23, &v22, &v20, &v21);
  if (v21 == *a1)
    goto LABEL_13;
  v13 = v21 - 1;
  v14 = (int *)((char *)v21 + *(v21 - 1) - 4);
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  v16 = *v15;
  if (v16 < 0xD)
  {
    v18 = 0;
    v17 = -1;
  }
  else
  {
    v17 = v15[6] ? *(_QWORD *)((char *)v14 + v15[6]) : -1;
    if (v16 >= 0xF && (v19 = v15[7]) != 0)
      v18 = *(unsigned int *)((char *)v14 + v19);
    else
      v18 = 0;
  }
  if (a3 < v17 || a4 + a3 > v18 + v17)
LABEL_13:
    v13 = *a2;
  *a5 = v13;
  return result;
}

uint64_t FlatbufferSymbols::InlineSymbol::inline_symbols(FlatbufferSymbols::InlineSymbol *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 0xFu && (v2 = v1[7]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

uint64_t FlatbufferSymbolOwnerData::forEachInlinedSymbolInSymbol<FlatbufferSymbols::InlineSymbol,unsigned long FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(CSCppSymbolOwner *,FlatbufferSymbols::InlineSymbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))::{lambda(FlatbufferSymbols::InlineSymbol const*)#1}>(uint64_t a1, int *a2, uint64_t *a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (!a2)
    return 0;
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 < 0xFu)
    return 0;
  v4 = v3[7];
  if (!v4)
    return 0;
  v5 = (unsigned int *)((char *)a2 + v4 + *(unsigned int *)((char *)a2 + v4));
  v8 = *v5;
  v6 = v5 + 1;
  v7 = v8;
  if (!v8)
    return 0;
  v10 = 4 * v7;
  v11 = v6;
  do
  {
    v12 = *v11++;
    FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(CSCppSymbolOwner *,FlatbufferSymbols::InlineSymbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))const::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}>(a3, (uint64_t)v6 + v12, (uint64_t)a3);
    v6 = v11;
    v10 -= 4;
  }
  while (v10);
  return v7;
}

uint64_t FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(CSCppSymbolOwner *,FlatbufferSymbols::InlineSymbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))const::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  unint64_t v65;
  uint64_t result;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;

  v6 = a1[7];
  v7 = *((_DWORD *)a1 + 6);
  v8 = (unsigned __int16 *)(a2 - *(int *)a2);
  v9 = *v8;
  if (v9 < 5)
  {
    v11 = 0;
    v10 = -1;
  }
  else
  {
    if (v8[2])
      v10 = *(_QWORD *)(a2 + v8[2]);
    else
      v10 = -1;
    if (v9 >= 7 && (v12 = v8[3]) != 0)
      v11 = *(_QWORD *)(a2 + v12);
    else
      v11 = 0;
  }
  v13 = *(_QWORD *)a1[2];
  v82 = 0;
  v14 = (_QWORD *)(v6 + 128);
  v15 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(v6 + 128), v13, &v82);
  if (v15)
    v16 = v82;
  else
    v16 = 0;
  if (v7 == -1)
  {
    v17 = (unint64_t *)a1[2];
    v18 = v10 - *v17;
    if (v10 > *v17)
    {
      if (v15)
      {
        ++*(_QWORD *)a1[5];
        v19 = a1[4];
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(v19 + 16))(v19, v16, v18);
          v17 = (unint64_t *)a1[2];
        }
      }
      *v17 = v10;
      v82 = 0;
      v15 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(v6 + 128), v10, &v82);
      if (v15)
        v16 = v82;
      else
        v16 = 0;
    }
  }
  v20 = (unsigned __int16 *)(a2 - *(int *)a2);
  v77 = v6;
  v79 = v11;
  v80 = v10;
  v78 = v15;
  if (*v20 >= 0xDu && (v21 = v20[6]) != 0)
    v22 = a2 + v21 + *(unsigned int *)(a2 + v21);
  else
    v22 = 0;
  v23 = *a1;
  v24 = a1[6] | 2;
  v25 = a2 | 1;
  v26 = *(uint64_t **)(*a1 + 8);
  v27 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v26 >= v27)
  {
    v76 = a3;
    v29 = v16;
    v30 = v7;
    v31 = v14;
    v32 = *(uint64_t **)v23;
    v33 = ((uint64_t)v26 - *(_QWORD *)v23) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      goto LABEL_100;
    v35 = v27 - (_QWORD)v32;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(*a1 + 16, v36);
      v32 = *(uint64_t **)v23;
      v26 = *(uint64_t **)(v23 + 8);
    }
    else
    {
      v37 = 0;
    }
    v38 = (uint64_t *)&v37[16 * v33];
    v39 = &v37[16 * v36];
    *v38 = v24;
    v38[1] = v25;
    v28 = v38 + 2;
    v14 = v31;
    if (v26 != v32)
    {
      do
      {
        *((_OWORD *)v38 - 1) = *((_OWORD *)v26 - 1);
        v38 -= 2;
        v26 -= 2;
      }
      while (v26 != v32);
      v32 = *(uint64_t **)v23;
    }
    v7 = v30;
    *(_QWORD *)v23 = v38;
    *(_QWORD *)(v23 + 8) = v28;
    *(_QWORD *)(v23 + 16) = v39;
    v16 = v29;
    if (v32)
      operator delete(v32);
    a3 = v76;
  }
  else
  {
    *v26 = v24;
    v26[1] = v25;
    v28 = v26 + 2;
  }
  *(_QWORD *)(v23 + 8) = v28;
  v40 = a1[1];
  v41 = a1[6];
  if (!v22)
  {
    v45 = *(_QWORD *)(v40 + 16);
    v44 = *(uint64_t **)(v40 + 8);
    if ((unint64_t)v44 < v45)
    {
      *v44 = v41;
      v44[1] = 0;
      goto LABEL_47;
    }
    v57 = v14;
    v51 = *(uint64_t **)v40;
    v58 = ((uint64_t)v44 - *(_QWORD *)v40) >> 4;
    v59 = v58 + 1;
    if (!((unint64_t)(v58 + 1) >> 60))
    {
      v60 = v45 - (_QWORD)v51;
      if (v60 >> 3 > v59)
        v59 = v60 >> 3;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
        v61 = 0xFFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
      {
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v40 + 16, v61);
        v51 = *(uint64_t **)v40;
        v44 = *(uint64_t **)(v40 + 8);
      }
      else
      {
        v62 = 0;
      }
      v74 = &v62[16 * v58];
      v75 = &v62[16 * v61];
      *(_QWORD *)v74 = v41;
      *((_QWORD *)v74 + 1) = 0;
      v46 = v74 + 16;
      v14 = v57;
      if (v44 == v51)
      {
        v47 = v79;
        v48 = v80;
      }
      else
      {
        v48 = v80;
        do
        {
          *((_OWORD *)v74 - 1) = *((_OWORD *)v44 - 1);
          v74 -= 16;
          v44 -= 2;
        }
        while (v44 != v51);
        v51 = *(uint64_t **)v40;
        v47 = v79;
      }
      *(_QWORD *)v40 = v74;
      *(_QWORD *)(v40 + 8) = v46;
      *(_QWORD *)(v40 + 16) = v75;
      if (v51)
        goto LABEL_71;
      goto LABEL_72;
    }
LABEL_100:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  v42 = v41 | 6;
  v43 = *(_QWORD *)(v40 + 16);
  v44 = *(uint64_t **)(v40 + 8);
  if ((unint64_t)v44 < v43)
  {
    *v44 = v42;
    v44[1] = v22;
LABEL_47:
    v46 = v44 + 2;
    v47 = v79;
    v48 = v80;
    goto LABEL_72;
  }
  v49 = v7;
  v50 = v14;
  v51 = *(uint64_t **)v40;
  v52 = ((uint64_t)v44 - *(_QWORD *)v40) >> 4;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 60)
    goto LABEL_100;
  v54 = v43 - (_QWORD)v51;
  if (v54 >> 3 > v53)
    v53 = v54 >> 3;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
    v55 = 0xFFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v40 + 16, v55);
    v51 = *(uint64_t **)v40;
    v44 = *(uint64_t **)(v40 + 8);
  }
  else
  {
    v56 = 0;
  }
  v63 = (uint64_t *)&v56[16 * v52];
  v64 = &v56[16 * v55];
  *v63 = v42;
  v63[1] = v22;
  v46 = v63 + 2;
  v14 = v50;
  if (v44 == v51)
  {
    v7 = v49;
    v47 = v79;
  }
  else
  {
    v47 = v79;
    do
    {
      *((_OWORD *)v63 - 1) = *((_OWORD *)v44 - 1);
      v63 -= 2;
      v44 -= 2;
    }
    while (v44 != v51);
    v51 = *(uint64_t **)v40;
    v7 = v49;
  }
  *(_QWORD *)v40 = v63;
  *(_QWORD *)(v40 + 8) = v46;
  *(_QWORD *)(v40 + 16) = v64;
  v48 = v80;
  if (v51)
LABEL_71:
    operator delete(v51);
LABEL_72:
  *(_QWORD *)(v40 + 8) = v46;
  v65 = v47 + v48;
  v81 = v47 + v48;
  if (*((int *)a1 + 6) + 1 == (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4)
  {
    v82 = 0;
    result = TThreadsafeAddressRelocator<Pointer64>::relocate(v14, v48, &v82);
    if ((_DWORD)result)
    {
      v67 = v82;
      ++*(_QWORD *)a1[5];
      result = a1[4];
      if (result)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, v67, v47);
    }
  }
  else
  {
    result = FlatbufferSymbolOwnerData::forEachElementInFlatbufferTypeWithAccessor<FlatbufferSymbols::InlineSymbol,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>> const* (FlatbufferSymbols::InlineSymbol::*)(void)const,void unsigned long FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(CSCppSymbolOwner *,FlatbufferSymbols::InlineSymbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}> const(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)::{lambda(FlatbufferSymbols::InlineSymbol const*)#1}>(v77, a2, (uint64_t (*)(_QWORD *))FlatbufferSymbols::InlineSymbol::inline_symbols, 0, a3, &v81);
  }
  if (v7 == -1)
  {
    v68 = v81;
    v69 = (unint64_t *)a1[2];
    v70 = *v69;
    v71 = v81 - *v69;
    if (v81 > *v69)
    {
      if (v78)
      {
        ++*(_QWORD *)a1[5];
        v72 = a1[4];
        if (v72)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(v72 + 16))(v72, v16, v71);
          v68 = v81;
          v69 = (unint64_t *)a1[2];
        }
      }
      *v69 = v68;
      v82 = 0;
      result = TThreadsafeAddressRelocator<Pointer64>::relocate(v14, v68, &v82);
      v78 = result;
      if ((_DWORD)result)
        v16 = v82;
      else
        v16 = 0;
      v69 = (unint64_t *)a1[2];
      v70 = *v69;
    }
    if (v65 > v70)
    {
      if (v78)
      {
        ++*(_QWORD *)a1[5];
        v73 = a1[4];
        if (v73)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(v73 + 16))(v73, v16, v65 - v70);
          v69 = (unint64_t *)a1[2];
        }
      }
      *v69 = v65;
      v82 = 0;
      result = TThreadsafeAddressRelocator<Pointer64>::relocate(v14, v47 + v48, &v82);
    }
  }
  *(_QWORD *)(*a1 + 8) -= 16;
  *(_QWORD *)(a1[1] + 8) -= 16;
  return result;
}

uint64_t FlatbufferSymbolOwnerData::forEachElementInFlatbufferTypeWithAccessor<FlatbufferSymbols::InlineSymbol,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>> const* (FlatbufferSymbols::InlineSymbol::*)(void)const,void unsigned long FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(CSCppSymbolOwner *,FlatbufferSymbols::InlineSymbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}> const(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)::{lambda(FlatbufferSymbols::InlineSymbol const*)#1}>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t i;
  unsigned int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
    return 0;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *))(*v8 + a3);
  v9 = (unsigned int *)a3(v8);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = *v9;
  if (!(_DWORD)v11)
    return 0;
  for (i = 0; i != v11; ++i)
  {
    v13 = &v10[i];
    v14 = v10[i + 1];
    v15 = (char *)&v10[i] + v14;
    FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::InlineSymbol const>(CSCppSymbolOwner *,FlatbufferSymbols::InlineSymbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))const::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::InlineSymbol const&)#1}>(a5, v15 + 4, a5);
    v16 = v14 - *((int *)v15 + 1);
    v17 = *(unsigned __int16 *)((char *)&v10[i + 1] + v16);
    if (v17 < 5)
    {
      v19 = 0;
      v18 = -1;
    }
    else
    {
      if (*(_WORD *)((char *)v13 + v16 + 8))
        v18 = *(_QWORD *)((char *)&v10[i + 1] + v14 + *(unsigned __int16 *)((char *)v13 + v16 + 8));
      else
        v18 = -1;
      if (v17 < 7)
      {
        v19 = 0;
      }
      else
      {
        v19 = *(unsigned __int16 *)((char *)&v10[i + 2] + v16 + 2);
        if (v19)
          v19 = *(_QWORD *)((char *)&v10[i + 1] + v14 + v19);
      }
    }
    *a6 = v19 + v18;
  }
  return v11;
}

uint64_t FlatbufferSymbolOwnerData::forEachInlinedSymbolInSymbol<FlatbufferSymbols::Symbol,unsigned long FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(CSCppSymbolOwner *,FlatbufferSymbols::Symbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))::{lambda(FlatbufferSymbols::InlineSymbol const*)#1}>(uint64_t a1, int *a2, uint64_t *a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (!a2)
    return 0;
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 < 0x11u)
    return 0;
  v4 = v3[8];
  if (!v4)
    return 0;
  v5 = (unsigned int *)((char *)a2 + v4 + *(unsigned int *)((char *)a2 + v4));
  v8 = *v5;
  v6 = v5 + 1;
  v7 = v8;
  if (!v8)
    return 0;
  v10 = 4 * v7;
  v11 = v6;
  do
  {
    v12 = *v11++;
    FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(CSCppSymbolOwner *,FlatbufferSymbols::Symbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))const::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}>(a3, (uint64_t)v6 + v12, (uint64_t)a3);
    v6 = v11;
    v10 -= 4;
  }
  while (v10);
  return v7;
}

uint64_t FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(CSCppSymbolOwner *,FlatbufferSymbols::Symbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))const::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  unint64_t v65;
  uint64_t result;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;

  v6 = a1[7];
  v7 = *((_DWORD *)a1 + 6);
  v8 = (unsigned __int16 *)(a2 - *(int *)a2);
  v9 = *v8;
  if (v9 < 5)
  {
    v11 = 0;
    v10 = -1;
  }
  else
  {
    if (v8[2])
      v10 = *(_QWORD *)(a2 + v8[2]);
    else
      v10 = -1;
    if (v9 >= 7 && (v12 = v8[3]) != 0)
      v11 = *(_QWORD *)(a2 + v12);
    else
      v11 = 0;
  }
  v13 = *(_QWORD *)a1[2];
  v82 = 0;
  v14 = (_QWORD *)(v6 + 128);
  v15 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(v6 + 128), v13, &v82);
  if (v15)
    v16 = v82;
  else
    v16 = 0;
  if (v7 == -1)
  {
    v17 = (unint64_t *)a1[2];
    v18 = v10 - *v17;
    if (v10 > *v17)
    {
      if (v15)
      {
        ++*(_QWORD *)a1[5];
        v19 = a1[4];
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(v19 + 16))(v19, v16, v18);
          v17 = (unint64_t *)a1[2];
        }
      }
      *v17 = v10;
      v82 = 0;
      v15 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(v6 + 128), v10, &v82);
      if (v15)
        v16 = v82;
      else
        v16 = 0;
    }
  }
  v20 = (unsigned __int16 *)(a2 - *(int *)a2);
  v77 = v6;
  v79 = v11;
  v80 = v10;
  v78 = v15;
  if (*v20 >= 0xDu && (v21 = v20[6]) != 0)
    v22 = a2 + v21 + *(unsigned int *)(a2 + v21);
  else
    v22 = 0;
  v23 = *a1;
  v24 = a1[6] | 2;
  v25 = a2 | 1;
  v26 = *(uint64_t **)(*a1 + 8);
  v27 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v26 >= v27)
  {
    v76 = a3;
    v29 = v16;
    v30 = v7;
    v31 = v14;
    v32 = *(uint64_t **)v23;
    v33 = ((uint64_t)v26 - *(_QWORD *)v23) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      goto LABEL_100;
    v35 = v27 - (_QWORD)v32;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(*a1 + 16, v36);
      v32 = *(uint64_t **)v23;
      v26 = *(uint64_t **)(v23 + 8);
    }
    else
    {
      v37 = 0;
    }
    v38 = (uint64_t *)&v37[16 * v33];
    v39 = &v37[16 * v36];
    *v38 = v24;
    v38[1] = v25;
    v28 = v38 + 2;
    v14 = v31;
    if (v26 != v32)
    {
      do
      {
        *((_OWORD *)v38 - 1) = *((_OWORD *)v26 - 1);
        v38 -= 2;
        v26 -= 2;
      }
      while (v26 != v32);
      v32 = *(uint64_t **)v23;
    }
    v7 = v30;
    *(_QWORD *)v23 = v38;
    *(_QWORD *)(v23 + 8) = v28;
    *(_QWORD *)(v23 + 16) = v39;
    v16 = v29;
    if (v32)
      operator delete(v32);
    a3 = v76;
  }
  else
  {
    *v26 = v24;
    v26[1] = v25;
    v28 = v26 + 2;
  }
  *(_QWORD *)(v23 + 8) = v28;
  v40 = a1[1];
  v41 = a1[6];
  if (!v22)
  {
    v45 = *(_QWORD *)(v40 + 16);
    v44 = *(uint64_t **)(v40 + 8);
    if ((unint64_t)v44 < v45)
    {
      *v44 = v41;
      v44[1] = 0;
      goto LABEL_47;
    }
    v57 = v14;
    v51 = *(uint64_t **)v40;
    v58 = ((uint64_t)v44 - *(_QWORD *)v40) >> 4;
    v59 = v58 + 1;
    if (!((unint64_t)(v58 + 1) >> 60))
    {
      v60 = v45 - (_QWORD)v51;
      if (v60 >> 3 > v59)
        v59 = v60 >> 3;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
        v61 = 0xFFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
      {
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v40 + 16, v61);
        v51 = *(uint64_t **)v40;
        v44 = *(uint64_t **)(v40 + 8);
      }
      else
      {
        v62 = 0;
      }
      v74 = &v62[16 * v58];
      v75 = &v62[16 * v61];
      *(_QWORD *)v74 = v41;
      *((_QWORD *)v74 + 1) = 0;
      v46 = v74 + 16;
      v14 = v57;
      if (v44 == v51)
      {
        v47 = v79;
        v48 = v80;
      }
      else
      {
        v48 = v80;
        do
        {
          *((_OWORD *)v74 - 1) = *((_OWORD *)v44 - 1);
          v74 -= 16;
          v44 -= 2;
        }
        while (v44 != v51);
        v51 = *(uint64_t **)v40;
        v47 = v79;
      }
      *(_QWORD *)v40 = v74;
      *(_QWORD *)(v40 + 8) = v46;
      *(_QWORD *)(v40 + 16) = v75;
      if (v51)
        goto LABEL_71;
      goto LABEL_72;
    }
LABEL_100:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  v42 = v41 | 6;
  v43 = *(_QWORD *)(v40 + 16);
  v44 = *(uint64_t **)(v40 + 8);
  if ((unint64_t)v44 < v43)
  {
    *v44 = v42;
    v44[1] = v22;
LABEL_47:
    v46 = v44 + 2;
    v47 = v79;
    v48 = v80;
    goto LABEL_72;
  }
  v49 = v7;
  v50 = v14;
  v51 = *(uint64_t **)v40;
  v52 = ((uint64_t)v44 - *(_QWORD *)v40) >> 4;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 60)
    goto LABEL_100;
  v54 = v43 - (_QWORD)v51;
  if (v54 >> 3 > v53)
    v53 = v54 >> 3;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
    v55 = 0xFFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v40 + 16, v55);
    v51 = *(uint64_t **)v40;
    v44 = *(uint64_t **)(v40 + 8);
  }
  else
  {
    v56 = 0;
  }
  v63 = (uint64_t *)&v56[16 * v52];
  v64 = &v56[16 * v55];
  *v63 = v42;
  v63[1] = v22;
  v46 = v63 + 2;
  v14 = v50;
  if (v44 == v51)
  {
    v7 = v49;
    v47 = v79;
  }
  else
  {
    v47 = v79;
    do
    {
      *((_OWORD *)v63 - 1) = *((_OWORD *)v44 - 1);
      v63 -= 2;
      v44 -= 2;
    }
    while (v44 != v51);
    v51 = *(uint64_t **)v40;
    v7 = v49;
  }
  *(_QWORD *)v40 = v63;
  *(_QWORD *)(v40 + 8) = v46;
  *(_QWORD *)(v40 + 16) = v64;
  v48 = v80;
  if (v51)
LABEL_71:
    operator delete(v51);
LABEL_72:
  *(_QWORD *)(v40 + 8) = v46;
  v65 = v47 + v48;
  v81 = v47 + v48;
  if (*((int *)a1 + 6) + 1 == (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4)
  {
    v82 = 0;
    result = TThreadsafeAddressRelocator<Pointer64>::relocate(v14, v48, &v82);
    if ((_DWORD)result)
    {
      v67 = v82;
      ++*(_QWORD *)a1[5];
      result = a1[4];
      if (result)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, v67, v47);
    }
  }
  else
  {
    result = FlatbufferSymbolOwnerData::forEachElementInFlatbufferTypeWithAccessor<FlatbufferSymbols::InlineSymbol,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>> const* (FlatbufferSymbols::InlineSymbol::*)(void)const,void unsigned long FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(CSCppSymbolOwner *,FlatbufferSymbols::Symbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}> const(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)::{lambda(FlatbufferSymbols::InlineSymbol const*)#1}>(v77, a2, (uint64_t (*)(_QWORD *))FlatbufferSymbols::InlineSymbol::inline_symbols, 0, a3, &v81);
  }
  if (v7 == -1)
  {
    v68 = v81;
    v69 = (unint64_t *)a1[2];
    v70 = *v69;
    v71 = v81 - *v69;
    if (v81 > *v69)
    {
      if (v78)
      {
        ++*(_QWORD *)a1[5];
        v72 = a1[4];
        if (v72)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(v72 + 16))(v72, v16, v71);
          v68 = v81;
          v69 = (unint64_t *)a1[2];
        }
      }
      *v69 = v68;
      v82 = 0;
      result = TThreadsafeAddressRelocator<Pointer64>::relocate(v14, v68, &v82);
      v78 = result;
      if ((_DWORD)result)
        v16 = v82;
      else
        v16 = 0;
      v69 = (unint64_t *)a1[2];
      v70 = *v69;
    }
    if (v65 > v70)
    {
      if (v78)
      {
        ++*(_QWORD *)a1[5];
        v73 = a1[4];
        if (v73)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(v73 + 16))(v73, v16, v65 - v70);
          v69 = (unint64_t *)a1[2];
        }
      }
      *v69 = v65;
      v82 = 0;
      result = TThreadsafeAddressRelocator<Pointer64>::relocate(v14, v47 + v48, &v82);
    }
  }
  *(_QWORD *)(*a1 + 8) -= 16;
  *(_QWORD *)(a1[1] + 8) -= 16;
  return result;
}

uint64_t FlatbufferSymbolOwnerData::forEachElementInFlatbufferTypeWithAccessor<FlatbufferSymbols::InlineSymbol,flatbuffers::Vector<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>> const* (FlatbufferSymbols::InlineSymbol::*)(void)const,void unsigned long FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(CSCppSymbolOwner *,FlatbufferSymbols::Symbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}> const(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)::{lambda(FlatbufferSymbols::InlineSymbol const*)#1}>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t i;
  unsigned int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
    return 0;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *))(*v8 + a3);
  v9 = (unsigned int *)a3(v8);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = *v9;
  if (!(_DWORD)v11)
    return 0;
  for (i = 0; i != v11; ++i)
  {
    v13 = &v10[i];
    v14 = v10[i + 1];
    v15 = (char *)&v10[i] + v14;
    FlatbufferSymbolOwnerData::for_each_inline_range_for_symbol_at_depth_impl<FlatbufferSymbols::Symbol const>(CSCppSymbolOwner *,FlatbufferSymbols::Symbol const *,int,void({block_pointer})(_CSRange,_CSTypeRef *,_CSTypeRef *,unsigned long))const::{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}::operator()<{lambda(FlatbufferSymbols::InlineSymbol const*,FlatbufferSymbols::Symbol const&)#1}>(a5, v15 + 4, a5);
    v16 = v14 - *((int *)v15 + 1);
    v17 = *(unsigned __int16 *)((char *)&v10[i + 1] + v16);
    if (v17 < 5)
    {
      v19 = 0;
      v18 = -1;
    }
    else
    {
      if (*(_WORD *)((char *)v13 + v16 + 8))
        v18 = *(_QWORD *)((char *)&v10[i + 1] + v14 + *(unsigned __int16 *)((char *)v13 + v16 + 8));
      else
        v18 = -1;
      if (v17 < 7)
      {
        v19 = 0;
      }
      else
      {
        v19 = *(unsigned __int16 *)((char *)&v10[i + 2] + v16 + 2);
        if (v19)
          v19 = *(_QWORD *)((char *)&v10[i + 1] + v14 + v19);
      }
    }
    *a6 = v19 + v18;
  }
  return v11;
}

void CSCppTextSectionDataDescriptor::get_text_section<Pointer64>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  std::mutex *v8;
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  CSCppTextSectionDataDescriptor::_get_text_section_locked<Pointer64>(a1, v9, a4, a5);
  std::mutex::unlock(v8);
}

void sub_1B40EA0D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void CSCppTextSectionDataDescriptor::_perform_partial_mapping_for_file<Pointer64>(unint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int64x2_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ***v69;
  uint64_t **v70;
  int64x2_t v71;
  char *v72;
  uint64_t *v73;

  if (!*((_BYTE *)a1 + 80))
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_QWORD *)(a4 + 16) = a1[2];
    return;
  }
  v8 = *a1;
  if (a2 < *a1 || (v9 = a2, a3 + a2 > a1[1] + v8))
    v9 = v8 + a2 - a1[14];
  if (v9 < v8 || v9 + a3 > a1[1] + v8)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return;
  }
  std::mutex::lock((std::mutex *)(a1 + 18));
  v10 = v9 - *a1 + a1[14] + a1[15];
  v11 = (uint64_t *)(a1 + 4);
  v12 = (_QWORD *)a1[4];
  if (v12)
  {
    do
    {
      v13 = v12[4];
      v14 = v10 >= v13;
      if (v10 >= v13)
        v15 = v12 + 1;
      else
        v15 = v12;
      if (!v14)
        v11 = v12;
      v12 = (_QWORD *)*v15;
    }
    while (*v15);
  }
  if (v11 == (uint64_t *)a1[3])
    goto LABEL_31;
  v16 = (uint64_t *)*v11;
  if (*v11)
  {
    do
    {
      v17 = v16;
      v16 = (uint64_t *)v16[1];
    }
    while (v16);
  }
  else
  {
    do
    {
      v17 = (uint64_t *)v11[2];
      v18 = *v17 == (_QWORD)v11;
      v11 = v17;
    }
    while (v18);
  }
  v20 = v17[4];
  v19 = v17[5];
  v21 = v10 + a3;
  v22 = v19 + v20;
  if (v10 < v20 || v21 > v22)
  {
    if (v20 >= v10 && v22 <= v21)
    {
      std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)a1 + 3, v17);
      operator delete(v17);
    }
LABEL_31:
    if (*((_BYTE *)a1 + 48))
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_QWORD *)(a4 + 16) = a1[2];
    }
    else
    {
      v25 = a1 + 7;
      if (*((char *)a1 + 79) < 0)
        v25 = (_QWORD *)*v25;
      v26 = (_QWORD *)operator new();
      CSCppFileMemory::CSCppFileMemory(v26, v25, v10);
      v27 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v26 + 32))(v26, 0, 0);
      if (v27
        && (v28 = v26[4], v66 = v10 & ~*MEMORY[0x1E0C85AC0], v67 = v28, v68 = v27 - v10 + v66, v10 + a3 <= v28 + v66))
      {
        v65 = a1;
        v40 = atomic_load(a1 + 16);
        if (v40 != -1)
        {
          v70 = (uint64_t **)&v65;
          v69 = &v70;
          std::__call_once(a1 + 16, &v69, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TRangeValue<Pointer64,unsigned char *> CSCppTextSectionDataDescriptor::_perform_partial_mapping_for_file<Pointer64>(TRange<Pointer64>)::{lambda(void)#1} &&>>);
        }
        std::__tree<TRangeValue<Pointer64,unsigned char *>>::__emplace_unique_key_args<TRangeValue<Pointer64,unsigned char *>,TRangeValue<Pointer64,unsigned char *> const&>((uint64_t **)a1 + 3, &v66, (uint64_t)&v66);
        v41 = a1[13];
        v42 = (_QWORD *)a1[12];
        if ((unint64_t)v42 >= v41)
        {
          v44 = a1[11];
          v45 = (uint64_t)((uint64_t)v42 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v46 = v41 - v44;
          v47 = v46 >> 2;
          if (v46 >> 2 <= (unint64_t)(v45 + 1))
            v47 = v45 + 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          v73 = (uint64_t *)(a1 + 13);
          if (v48)
            v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 13), v48);
          else
            v49 = 0;
          v50 = &v49[8 * v45];
          v51 = &v49[8 * v48];
          v72 = v51;
          *(_QWORD *)v50 = v26;
          v43 = v50 + 8;
          v71.i64[1] = (uint64_t)(v50 + 8);
          v53 = (_QWORD *)a1[11];
          v52 = (_QWORD *)a1[12];
          if (v52 == v53)
          {
            v55 = vdupq_n_s64((unint64_t)v52);
          }
          else
          {
            do
            {
              v54 = *--v52;
              *v52 = 0;
              *((_QWORD *)v50 - 1) = v54;
              v50 -= 8;
            }
            while (v52 != v53);
            v55 = *(int64x2_t *)(a1 + 11);
            v43 = (_QWORD *)v71.i64[1];
            v51 = v72;
          }
          a1[11] = (unint64_t)v50;
          a1[12] = (unint64_t)v43;
          v71 = v55;
          v56 = (char *)a1[13];
          a1[13] = (unint64_t)v51;
          v72 = v56;
          v70 = (uint64_t **)v55.i64[0];
          std::__split_buffer<std::unique_ptr<CSCppMemory>>::~__split_buffer((uint64_t)&v70);
        }
        else
        {
          *v42 = v26;
          v43 = v42 + 1;
        }
        a1[12] = (unint64_t)v43;
        v57 = v67;
        v58 = v68;
        v59 = v10 - a2 - v66;
        v60 = v67 - v59;
        v61 = v68 + v59;
        v62 = v66 - (v10 - a2);
        if (v66 < v10 - a2)
          v63 = v61;
        else
          v63 = v68;
        if (v66 < v10 - a2)
          v64 = v60;
        else
          v64 = v67;
        if (v66 < v10 - a2)
          v62 = 0;
        if (v10 <= a2)
        {
          v62 = a2 - v10 + v66;
        }
        else
        {
          v58 = v63;
          v57 = v64;
        }
        *(_QWORD *)a4 = v62;
        *(_QWORD *)(a4 + 8) = v57;
        *(_QWORD *)(a4 + 16) = v58;
      }
      else
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
      }
    }
    goto LABEL_84;
  }
  v29 = a2 - v10 + v20;
  v30 = v10 - a2 - v20;
  v31 = v19 - v30;
  v32 = v17[6] + v30;
  v33 = v20 >= v10 - a2;
  v34 = v20 - (v10 - a2);
  if (v33)
    v35 = v17[6];
  else
    v35 = v32;
  if (v33)
    v36 = v17[5];
  else
    v36 = v31;
  if (v33)
    v37 = v34;
  else
    v37 = 0;
  if (v10 > a2)
    v38 = v35;
  else
    v38 = v17[6];
  if (v10 <= a2)
  {
    v39 = v29;
  }
  else
  {
    v19 = v36;
    v39 = v37;
  }
  *(_QWORD *)a4 = v39;
  *(_QWORD *)(a4 + 8) = v19;
  *(_QWORD *)(a4 + 16) = v38;
LABEL_84:
  std::mutex::unlock((std::mutex *)(a1 + 18));
}

void sub_1B40EA4F4(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_get_text_section_locked<Pointer64>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  char is_little_endian;
  uint64_t v9;

  v4 = result;
  if (*(_QWORD *)(result + 96) == *(_QWORD *)(result + 88) && !*(_BYTE *)(result + 208))
  {
    *(_BYTE *)(result + 208) = 1;
    v9 = *(_QWORD *)(a3 + 112);
    is_little_endian = CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v9);
    result = CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v9);
    if ((is_little_endian & 1) != 0)
    {
      if ((result & 1) != 0)
        return CSCppTextSectionDataDescriptor::_fault_text<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(v4, a2, a3, (uint64_t)a4);
      else
        return CSCppTextSectionDataDescriptor::_fault_text<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(v4, a2, a3, (uint64_t)a4);
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)result;
    a4[2] = *(_QWORD *)(result + 16);
  }
  return result;
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v9;
  __int128 v10;
  uint64_t v11;

  v4 = result;
  if (!*(_QWORD *)(result + 16))
  {
    if (!*(_BYTE *)(result + 48))
      goto LABEL_20;
    result = CSCppTextSectionDataDescriptor::_fault_text_from_local_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(result, a2, a3, (uint64_t)&v10);
    if (v11)
    {
      v9 = 3;
LABEL_14:
      *(_DWORD *)(v4 + 136) = v9;
      *(_OWORD *)a4 = v10;
      v6 = v11;
      goto LABEL_15;
    }
    if (!*(_QWORD *)(v4 + 16))
    {
LABEL_20:
      if (!*(_QWORD *)(a3 + 120))
        goto LABEL_11;
      result = CSCppTextSectionDataDescriptor::_fault_text_from_path<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(v4, a2, a3, (uint64_t)&v10);
      if (v11)
      {
        v9 = 1;
        goto LABEL_14;
      }
      if (!*(_QWORD *)(v4 + 16))
      {
LABEL_11:
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 40))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
        if ((_DWORD)result)
        {
          result = CSCppTextSectionDataDescriptor::_fault_text_from_task<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(v4, a2, a3, (uint64_t)&v10);
          if (v11)
          {
            v9 = 2;
            goto LABEL_14;
          }
        }
      }
    }
    *(_DWORD *)(v4 + 136) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    return result;
  }
  *(_OWORD *)a4 = *(_OWORD *)result;
  v6 = *(_QWORD *)(result + 16);
LABEL_15:
  *(_QWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v9;
  __int128 v10;
  uint64_t v11;

  v4 = result;
  if (!*(_QWORD *)(result + 16))
  {
    if (!*(_BYTE *)(result + 48))
      goto LABEL_20;
    result = CSCppTextSectionDataDescriptor::_fault_text_from_local_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(result, a2, a3, (uint64_t)&v10);
    if (v11)
    {
      v9 = 3;
LABEL_14:
      *(_DWORD *)(v4 + 136) = v9;
      *(_OWORD *)a4 = v10;
      v6 = v11;
      goto LABEL_15;
    }
    if (!*(_QWORD *)(v4 + 16))
    {
LABEL_20:
      if (!*(_QWORD *)(a3 + 120))
        goto LABEL_11;
      result = CSCppTextSectionDataDescriptor::_fault_text_from_path<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(v4, a2, a3, (uint64_t)&v10);
      if (v11)
      {
        v9 = 1;
        goto LABEL_14;
      }
      if (!*(_QWORD *)(v4 + 16))
      {
LABEL_11:
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 40))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
        if ((_DWORD)result)
        {
          result = CSCppTextSectionDataDescriptor::_fault_text_from_task<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(v4, a2, a3, (uint64_t)&v10);
          if (v11)
          {
            v9 = 2;
            goto LABEL_14;
          }
        }
      }
    }
    *(_DWORD *)(v4 + 136) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    return result;
  }
  *(_OWORD *)a4 = *(_OWORD *)result;
  v6 = *(_QWORD *)(result + 16);
LABEL_15:
  *(_QWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_local_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  __int128 v18;
  uint64_t v19;
  const char **v20;

  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775588;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_DWORD *)(v8 + 304) = 1065353216;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_DWORD *)(v8 + 344) = 1065353216;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_BYTE *)(v8 + 400) = 0;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_DWORD *)(v8 + 440) = 1065353216;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_DWORD *)(v8 + 480) = 1065353216;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 488) = 0;
  sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, (_QWORD *)v8, 0, 0, &v19);
  v9 = v19;
  if (v19)
  {
    if (a2)
    {
      extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(v19, v8, *a2, a2[1]);
    }
    else
    {
      v10 = *(_BYTE *)(a1 + 81);
      v17 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(v19, v10, (const char **)&v17);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(v9, v8, (uint64_t)v17);
    }
    v17 = *(char **)(v8 + 136);
    v11 = (uint64_t *)v17;
    v18 = *(_OWORD *)(v8 + 144);
    v12 = (uint64_t *)v18;
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v11, v12, v12 - v11);
    v13 = *(_QWORD *)(v8 + 240);
    v14 = HIDWORD(*(_QWORD *)(v8 + 232));
    *(_QWORD *)a1 = *(_QWORD *)(v8 + 232);
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a4 + 16) = v13;
    *(_OWORD *)a4 = *(_OWORD *)a1;
    v20 = (const char **)&v17;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    v15 = v19;
    v19 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40EAA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v16;

  a14 = (void **)&a10;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = a13;
  a13 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_path<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t text_section_data_from_header_for;
  unsigned __int8 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v27;
  void **v28;
  CSCppDsymData *v29;
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _BYTE v35[1024];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775588;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_DWORD *)(v8 + 304) = 1065353216;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_DWORD *)(v8 + 344) = 1065353216;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_BYTE *)(v8 + 400) = 0;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_DWORD *)(v8 + 440) = 1065353216;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_DWORD *)(v8 + 480) = 1065353216;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 488) = 0;
  v9 = *(char **)(a3 + 128);
  if (v9 || (v9 = *(char **)(a3 + 120)) != 0)
    v10 = strstr(v9, ".dSYM");
  else
    v10 = 0;
  if ((*(_BYTE *)(a3 + 109) & 1) != 0 || v10)
  {
    v28 = 0;
    v29 = 0;
    make_dsym_data_from_path_and_uuid(v9, (const CFUUIDBytes *)(a3 + 16), (uint64_t)v30);
    if (v36)
    {
      v12 = operator new();
      *(_OWORD *)v12 = *(_OWORD *)v30;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)&v30[16];
      *(_OWORD *)v30 = 0uLL;
      *(_OWORD *)(v12 + 24) = v31;
      *(_QWORD *)(v12 + 40) = v32;
      *(_QWORD *)&v30[16] = 0;
      v31 = 0uLL;
      v32 = 0;
      *(_OWORD *)(v12 + 48) = v33;
      *(_QWORD *)(v12 + 64) = v34;
      v34 = 0;
      v33 = 0uLL;
      memcpy((void *)(v12 + 72), v35, 0x400uLL);
      v13 = (void **)v29;
      v29 = (CSCppDsymData *)v12;
      if (v13)
      {
        CSCppDsymData::~CSCppDsymData(v13);
        MEMORY[0x1B5E36940]();
        v12 = (uint64_t)v29;
      }
      v28 = (void **)v12;
    }
    sod_header_from_debug_symbols<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, (void ***)&v29, (CSCppDsymData **)&v28, &v27);
    v11 = v27;
    if (!v27)
    {
      sod_header_from_colocated_dsym<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, (void ***)&v29, &v28, &v27);
      v11 = v27;
    }
    if (v36)
      CSCppDsymData::~CSCppDsymData((void **)v30);
    v14 = (void **)v29;
    v29 = 0;
    if (v14)
    {
      CSCppDsymData::~CSCppDsymData(v14);
      MEMORY[0x1B5E36940]();
    }
  }
  else
  {
    sod_header_from_on_disk_binary<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, (uint64_t *)v30);
    v11 = *(_QWORD *)v30;
  }
  if (v11
    || (sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, 0, 0, v30), (v11 = *(_QWORD *)v30) != 0))
  {
    std::string::__assign_external((std::string *)(a1 + 56), *(const std::string::value_type **)(v11 + 40));
    v15 = CSCppTextSectionDataDescriptor::_compute_slide_between_symbol_owner_and_header<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, v11, a3);
    v16 = v15;
    if (a2)
    {
      v17 = a2[1];
      v18 = *a2 - v15;
      *a2 = v18;
      text_section_data_from_header_for = extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(v11, v8, v18, v17);
    }
    else
    {
      v20 = *(_BYTE *)(a1 + 81);
      *(_QWORD *)v30 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(v11, v20, (const char **)v30);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(v11, v8, *(uint64_t *)v30);
      text_section_data_from_header_for = *(_QWORD *)v30;
    }
    v21 = *(_QWORD *)(v8 + 232);
    v22 = *(_QWORD *)(v8 + 240);
    *(_QWORD *)(a1 + 8) = HIDWORD(v21);
    *(_QWORD *)(a1 + 16) = v22;
    *(_QWORD *)a1 = v16 + v21;
    if (*(_BYTE *)(v11 + 64))
      *(_QWORD *)(a1 + 120) = *(unsigned int *)(v11 + 56);
    if (text_section_data_from_header_for)
      v23 = *(unsigned int *)(text_section_data_from_header_for + 40);
    else
      v23 = 0;
    *(_QWORD *)(a1 + 112) = v23;
    *(_QWORD *)v30 = *(_QWORD *)(v8 + 136);
    v24 = *(uint64_t **)v30;
    *(_OWORD *)&v30[8] = *(_OWORD *)(v8 + 144);
    v25 = *(uint64_t **)&v30[8];
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v24, v25, v25 - v24);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
    v29 = (CSCppDsymData *)v30;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40EAEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v6;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, void **);
  if (LOBYTE(STACK[0x468]))
    CSCppDsymData::~CSCppDsymData((void **)va1);
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)va, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_task<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  const char **v22;

  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775588;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_DWORD *)(v8 + 304) = 1065353216;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_DWORD *)(v8 + 344) = 1065353216;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_BYTE *)(v8 + 400) = 0;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_DWORD *)(v8 + 440) = 1065353216;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_DWORD *)(v8 + 480) = 1065353216;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 488) = 0;
  v21 = 0;
  sod_header_from_task_fault<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, &v21, &v20);
  if (v21)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 16))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
    task_resume(*(_DWORD *)(v9 + 8));
  }
  v10 = v20;
  if (v20)
  {
    if (a2)
    {
      extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(v20, v8, *a2, a2[1]);
    }
    else
    {
      v11 = *(_BYTE *)(a1 + 81);
      v18 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(v20, v11, (const char **)&v18);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(v10, v8, (uint64_t)v18);
    }
    v18 = *(char **)(v8 + 136);
    v12 = (uint64_t *)v18;
    v19 = *(_OWORD *)(v8 + 144);
    v13 = (uint64_t *)v19;
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v12, v13, v13 - v12);
    v14 = *(_QWORD *)(v8 + 240);
    v15 = HIDWORD(*(_QWORD *)(v8 + 232));
    *(_QWORD *)a1 = *(_QWORD *)(v8 + 232);
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a4 + 16) = v14;
    *(_OWORD *)a4 = *(_OWORD *)a1;
    v22 = (const char **)&v18;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40EB1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v16;

  a14 = (void **)&a9;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = a12;
  a12 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  CSCppDyldSplitSharedCacheMemory *v11;
  __int128 v12;
  uint64_t result;
  CSCppDyldSplitSharedCacheMemory *v14;
  _OWORD v15[2];
  uint64_t v16;

  v10 = *(_QWORD *)(a1 + 112);
  v11 = (CSCppDyldSplitSharedCacheMemory *)operator new();
  CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v11, *MEMORY[0x1E0C83DA0], v10, 0);
  _do_sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, (uint64_t)a2, v11, &v16);
  if (v16)
  {
    if (a3)
    {
      _do_obtain_stripped_locals_data<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, &v16, v11, a2, a4, v15);
      v12 = v15[1];
      *a3 = v15[0];
      a3[1] = v12;
    }
    v14 = v11;
    TRawSymbolOwnerData<Pointer32>::add_memory(a2, (uint64_t *)&v14);
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *a5 = v16;
  }
  else
  {
    *a5 = 0;
    return (*(uint64_t (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v11 + 8))(v11);
  }
  return result;
}

void sub_1B40EB318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  _QWORD v8[3];
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  uint64_t *v12;
  uint64_t v13;

  v13 = 0;
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = &off_1E67756C8;
  v6 = *(_OWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a1 + 8);
  v10 = v6;
  v11[0] = *(_OWORD *)(a1 + 40);
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)(a1 + 49);
  v12 = &v13;
  _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,TRange<Pointer64>)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(a1, (uint64_t)v8);
  _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(a1, a2, v13);
  return v13;
}

uint64_t TRawSymbolOwnerData<Pointer32>::_augment_data_to_include_text_section(uint64_t a1, CSCppSymbolOwner *a2)
{
  CSCppSymbolOwnerData::_perform_operation_under_text_section_dclp<TRawSymbolOwnerData<Pointer32>::_augment_data_to_include_text_section(CSCppSymbolOwner *)::{lambda(void)#1}>(a1, a1, a2);
  return a1;
}

uint64_t TRawSymbolOwnerData<Pointer32>::type_id()
{
  return 1;
}

uint64_t TRawSymbolOwnerData<Pointer32>::footprint(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[17];
  v3 = (uint64_t *)a1[18];
  if (v2 == v3)
  {
    v6 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
    while (v2 != v3);
    v6 = v4;
  }
  return v6 + a1[21] + a1[24] + a1[27] - (a1[20] + a1[23] + a1[26]);
}

uint64_t TRawSymbolOwnerData<Pointer32>::dsym_path(uint64_t a1)
{
  return *(_QWORD *)(a1 + 248);
}

uint64_t TRawSymbolOwnerData<Pointer32>::dylib_current_version(uint64_t a1)
{
  return *(unsigned int *)(a1 + 256);
}

uint64_t TRawSymbolOwnerData<Pointer32>::dylib_compatibility_version(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

uint64_t TRawSymbolOwnerData<Pointer32>::version(uint64_t a1)
{
  return *(_QWORD *)(a1 + 264);
}

uint64_t TRawSymbolOwnerData<Pointer32>::is_string_pointer_valid()
{
  return 1;
}

unint64_t TRawSymbolOwnerData<Pointer32>::regions_in_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;

  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 168) || a3 > 0xFFFFFFFE)
    return 0;
  if ((a4 + a3) >> 32)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = (a4 + a3);
  v12 = 0;
  v13 = 0;
  v6 = 0;
  if (find_lower_and_upper_bounds_of_range<Pointer64,CSCppSectionRange>(a3, v9, (_QWORD *)(a1 + 160), &v13, &v12))
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v13) >> 3);
    if (a5)
    {
      v10 = a2 | 4;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
        v13 += 24;
      }
      while (v13 < v12);
    }
  }
  return v6;
}

unint64_t TRawSymbolOwnerData<Pointer32>::symbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  if (a3)
  {
    v5 = *(_QWORD *)(a1 + 184);
    v4 = *(_QWORD *)(a1 + 192);
    if (v5 < v4)
    {
      v7 = a2 | 5;
      v8 = *(_QWORD *)(a1 + 184);
      do
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(a3 + 16))(a3, v7, v5);
        v8 += 96;
        v4 = *(_QWORD *)(a1 + 192);
        v5 += 96;
      }
      while (v8 < v4);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 192);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(_QWORD *)(a1 + 184)) >> 5);
}

uint64_t TRawSymbolOwnerData<Pointer32>::symbols_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  TRawSymbolOwnerData<Pointer32>::_initialize_demangled_names_hash_once(a1);
  return TRawSymbolOwnerData<Pointer32>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer32>>>(a1, a2, a3, a4, (_QWORD *)(a1 + 272), (_QWORD *)(a1 + 184), 1);
}

uint64_t TRawSymbolOwnerData<Pointer32>::symbols_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  TRawSymbolOwnerData<Pointer32>::_initialize_mangled_names_hash_once(a1);
  return TRawSymbolOwnerData<Pointer32>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer32>>>(a1, a2, a3, a4, (_QWORD *)(a1 + 312), (_QWORD *)(a1 + 184), 1);
}

uint64_t TRawSymbolOwnerData<Pointer32>::symbol_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  TRawSymbolOwnerData<Pointer32>::_initialize_demangled_names_hash_once(a1);
  return TRawSymbolOwnerData<Pointer32>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer32>>>(a1, a2, a3, a4, (_QWORD *)(a1 + 272), (_QWORD *)(a1 + 184), 0);
}

uint64_t TRawSymbolOwnerData<Pointer32>::symbol_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  TRawSymbolOwnerData<Pointer32>::_initialize_mangled_names_hash_once(a1);
  return TRawSymbolOwnerData<Pointer32>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer32>>>(a1, a2, a3, a4, (_QWORD *)(a1 + 312), (_QWORD *)(a1 + 184), 0);
}

unint64_t TRawSymbolOwnerData<Pointer32>::symbols_in_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;

  if (a3 > 0xFFFFFFFE || *(_QWORD *)(a1 + 184) == *(_QWORD *)(a1 + 192))
    return 0;
  if ((a4 + a3) >> 32)
    v7 = -1;
  else
    v7 = a4 + a3;
  v11 = 0;
  v12 = 0;
  v8 = 0;
  if (find_lower_and_upper_bounds_of_range<Pointer32,TRawSymbol<Pointer32>>(a3, v7, (char **)(a1 + 184), &v12, &v11))
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 5);
    if (a5)
    {
      v9 = a2 | 5;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v9);
        v12 += 96;
      }
      while (v12 < v11);
    }
  }
  return v8;
}

uint64_t TRawSymbolOwnerData<Pointer32>::symbol_for_address(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3802000000;
  v9 = __Block_byref_object_copy__2;
  v10 = __Block_byref_object_dispose__2;
  v11 = 0;
  v12 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19TRawSymbolOwnerDataI9Pointer32E18symbol_for_addressEP16CSCppSymbolOwnery_block_invoke;
  v5[3] = &unk_1E6775698;
  v5[4] = &v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 128))(a1, a2, a3, 1, v5);
  v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B40EB91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbolOwnerData<Pointer32>::source_infos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  if (a3)
  {
    v5 = *(_QWORD *)(a1 + 208);
    v4 = *(_QWORD *)(a1 + 216);
    if (v5 < v4)
    {
      v7 = a2 | 6;
      v8 = *(_QWORD *)(a1 + 208);
      do
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(a3 + 16))(a3, v7, v5);
        v8 += 32;
        v4 = *(_QWORD *)(a1 + 216);
        v5 += 32;
      }
      while (v8 < v4);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 216);
  }
  return (uint64_t)(v4 - *(_QWORD *)(a1 + 208)) >> 5;
}

int64_t TRawSymbolOwnerData<Pointer32>::source_infos_in_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  int v9;
  uint64_t v10;
  char *v12;
  char *v13;

  if (*(_QWORD *)(a1 + 208) == *(_QWORD *)(a1 + 216) || a3 > 0xFFFFFFFE)
    return 0;
  if ((a4 + a3) >> 32)
    v9 = -1;
  else
    v9 = a4 + a3;
  v12 = 0;
  v13 = 0;
  v6 = 0;
  if (find_lower_and_upper_bounds_of_range<Pointer32,TRawSourceInfo<Pointer32>>(a3, v9, (char **)(a1 + 208), &v13, &v12))
  {
    v6 = (v12 - v13) >> 5;
    if (a5)
    {
      v10 = a2 | 6;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
        v13 += 32;
      }
      while (v13 < v12);
    }
  }
  return v6;
}

uint64_t TRawSymbolOwnerData<Pointer32>::source_info_for_address(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  char *v4;
  char *v5;
  int v7;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  char *v24;
  unsigned int v25;
  unsigned int v27[2];

  v5 = (char *)a1[26];
  v4 = (char *)a1[27];
  if (a3 <= 0xFFFFFFFE && v5 != v4)
  {
    v7 = a3;
    v27[0] = a3;
    v27[1] = 1;
    v9 = (_DWORD *)a1[23];
    v10 = a1[24] - (_QWORD)v9;
    if (v10)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 5);
      v12 = (_DWORD *)a1[23];
      do
      {
        v13 = v11 >> 1;
        v14 = &v12[24 * (v11 >> 1)];
        v16 = *v14;
        v15 = v14 + 24;
        v11 += ~(v11 >> 1);
        if (v16 > a3)
          v11 = v13;
        else
          v12 = v15;
      }
      while (v11);
      if (v12 != v9)
      {
        v18 = *(v12 - 24);
        v19 = *(v12 - 23);
        v17 = (uint64_t)(v12 - 24);
        if ((int)a3 - v18 < v19)
        {
          if (TRawSymbol<Pointer32>::find_enclosing_inlined_function(v17, v27))
          {
            v20 = 5;
            return v20 | a2;
          }
          v5 = (char *)a1[26];
          v4 = (char *)a1[27];
        }
      }
    }
    if (v4 != v5)
    {
      v21 = (v4 - v5) >> 5;
      v4 = v5;
      do
      {
        v22 = v21 >> 1;
        v23 = (unsigned int *)&v4[32 * (v21 >> 1)];
        v25 = *v23;
        v24 = (char *)(v23 + 8);
        v21 += ~(v21 >> 1);
        if (v27[0] < v25)
          v21 = v22;
        else
          v4 = v24;
      }
      while (v21);
    }
    if (v4 != v5 && (v7 - *((_DWORD *)v4 - 8)) < *((_DWORD *)v4 - 7))
    {
      v20 = 6;
      return v20 | a2;
    }
  }
  return 0;
}

uint64_t TRawSymbolOwnerData<Pointer32>::for_each_stack_frame_at_address(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *enclosing_inlined_function;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v33[2];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 136))(a1);
  v10 = v9;
  if (CSIsNull(v8, v9))
    return 0;
  v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  v33[0] = a3;
  v33[1] = 1;
  v12 = (_DWORD *)a1[26];
  v13 = a1[27] - (_QWORD)v12;
  if (!v13)
    goto LABEL_14;
  v14 = v13 >> 5;
  v15 = (_DWORD *)a1[26];
  do
  {
    v16 = v14 >> 1;
    v17 = &v15[8 * (v14 >> 1)];
    v19 = *v17;
    v18 = v17 + 8;
    v14 += ~(v14 >> 1);
    if (v19 > a3)
      v14 = v16;
    else
      v15 = v18;
  }
  while (v14);
  if (v15 == v12)
  {
LABEL_14:
    v23 = 0;
    if (v11)
      goto LABEL_15;
    return 0;
  }
  v20 = *(v15 - 8);
  v22 = *(v15 - 7);
  v21 = v15 - 8;
  if (a3 - v20 >= v22)
    v23 = 0;
  else
    v23 = v21;
  if (!v11)
    return 0;
LABEL_15:
  v25 = a2 | 5;
  v26 = a2 | 6;
  enclosing_inlined_function = TRawSymbol<Pointer32>::find_enclosing_inlined_function(v11, v33);
  if (enclosing_inlined_function)
  {
    v28 = enclosing_inlined_function;
    v24 = 1;
    do
    {
      v29 = atomic_load(v28 + 5);
      if ((v29 & 0x80000000) != 0 && *((_QWORD *)v28 + 5))
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *))(a4 + 16))(a4, v25, v11, v25, v28);
      else
        (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(a4 + 16))(a4, v25, v11, 0, 0);
      v11 = (unint64_t)v28;
      ++v24;
      v28 = TRawSymbol<Pointer32>::find_enclosing_inlined_function((uint64_t)v28, v33);
    }
    while (v28);
  }
  else
  {
    v24 = 1;
  }
  if (v23)
    v30 = v26;
  else
    v30 = 0;
  if (v23)
    v31 = v23;
  else
    v31 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *))(a4 + 16))(a4, v25, v11, v30, v31);
  return v24;
}

uint64_t TRawSymbolOwnerData<Pointer32>::for_each_inline_range_for_symbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TRawSymbolOwnerData<Pointer32>::for_each_inline_range_for_symbol_at_depth(a1, a2, a3, a4, -1, a5);
}

uint64_t TRawSymbolOwnerData<Pointer32>::for_each_inline_range_for_symbol_at_depth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  int v10;
  void *__p;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17[5];
  int v18;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  __p = 0;
  v12 = 0;
  v13 = 0;
  v10 = *(_DWORD *)(a4 & 0xFFFFFFFFFFFFFFFCLL);
  v8[1] = a6;
  v9 = 0;
  v8[0] = &v9;
  v17[0] = (uint64_t)&v14;
  v17[1] = (uint64_t)&__p;
  v17[2] = a2;
  v17[3] = (uint64_t)v8;
  v17[4] = (uint64_t)&v10;
  v18 = a5;
  _ZZZN19TRawSymbolOwnerDataI9Pointer32E41for_each_inline_range_for_symbol_at_depthEP16CSCppSymbolOwner10_CSTypeRefiU13block_pointerFv8_CSRangePS4_S6_mEENKUlP10TRawSymbolIS0_EE_clESB_ENKUlSB_RT_E_clISF_EEvSB_SE_(v17, a4 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)v17);
  v6 = v9;
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  return v6;
}

void sub_1B40EBDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

unint64_t TRawSymbolOwnerData<Pointer32>::raw_bytes_for_range(uint64_t a1, os_unfair_lock_s **a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a1 + 232);
  v5 = a3 - v4;
  if (a3 >= v4 && a4 + a3 <= *(_DWORD *)(a1 + 236) + v4 && (v6 = *(_QWORD *)(a1 + 240)) != 0)
    return v6 + v5;
  else
    return TRawSymbolOwnerData<Pointer32>::_raw_bytes_for_range_on_demand_fault(a1, a2, a3 | ((unint64_t)a4 << 32));
}

uint64_t TRawSymbolOwnerData<Pointer32>::optional_symbolicator_flags(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 404))
    return a1 + 400;
  else
    return 0;
}

uint64_t TRawSymbolOwnerData<Pointer32>::relinked_subdylib_path_for_address(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  char *v4;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unsigned int *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;

  v3 = *(char **)(a1 + 488);
  v4 = *(char **)(a1 + 496);
  if (a3 > 0xFFFFFFFE || v3 == v4)
    return 0;
  v6 = (v4 - v3) >> 4;
  v7 = *(char **)(a1 + 488);
  do
  {
    v8 = v6 >> 1;
    v9 = (unsigned int *)&v7[16 * (v6 >> 1)];
    v11 = *v9;
    v10 = (char *)(v9 + 4);
    v6 += ~(v6 >> 1);
    if (v11 > a3)
      v6 = v8;
    else
      v7 = v10;
  }
  while (v6);
  v12 = v7 == v3 ? 0 : -1;
  v13 = &v7[16 * v12];
  if ((a3 - *(_DWORD *)v13) >= *((_DWORD *)v13 + 1))
    return 0;
  else
    return *((_QWORD *)v13 + 1);
}

const char *TRawSymbolOwnerData<Pointer32>::relinked_subdylib_name_for_address(uint64_t a1)
{
  const char *result;

  result = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  if (result)
    return filename_from_path(result);
  return result;
}

uint64_t TRawSymbolOwnerData<Pointer32>::unique_relinked_subdylib_count(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  int v7;

  v5 = 0u;
  v6 = 0u;
  v7 = 1065353216;
  v1 = *(_QWORD *)(a1 + 488);
  v2 = *(_QWORD *)(a1 + 496);
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    do
    {
      std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::__emplace_unique_key_args<char const*,char const* const&>((uint64_t)&v5, (_QWORD *)(v1 + 8), (_QWORD *)(v1 + 8));
      v1 += 16;
    }
    while (v1 != v2);
    v3 = *((_QWORD *)&v6 + 1);
  }
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v5);
  return v3;
}

void sub_1B40EBF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer32>::get_description(std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::pointer i;
  char *v5;
  void **v6;
  std::string::size_type v7;
  void *__p[2];
  unsigned __int8 v9;

  CSCppSymbolOwnerData::get_description(a1, a2);
  v5 = (char *)a1[5].__r_.__value_.__r.__words[2];
  for (i = a1[6].__r_.__value_.__l.__data_; v5 != i; v5 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v5 + 48))(__p);
    if ((v9 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v7 = v9;
    else
      v7 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v6, v7);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
}

void sub_1B40EC014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void CSCppSymbolOwnerData::_perform_operation_under_text_section_dclp<TRawSymbolOwnerData<Pointer32>::_augment_data_to_include_text_section(CSCppSymbolOwner *)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, CSCppSymbolOwner *a3)
{
  unsigned int *v3;
  __int16 v4;
  std::mutex *v7;
  __int16 v8;

  v3 = (unsigned int *)(a1 + 12);
  v4 = atomic_load((unsigned int *)(a1 + 12));
  if ((v4 & 0x1000) == 0)
  {
    v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    v8 = atomic_load(v3);
    if ((v8 & 0x1000) == 0)
      TRawSymbolOwnerData<Pointer32>::_update_text_section_data_locked(a2, a3);
    std::mutex::unlock(v7);
  }
}

void sub_1B40EC0B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL find_lower_and_upper_bounds_of_range<Pointer64,CSCppSectionRange>(unint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;

  v5 = (_QWORD *)*a3;
  v6 = a3[1] - *a3;
  if (v6)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[3 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 3;
      v7 += ~(v7 >> 1);
      if (v11 > a1)
        v7 = v8;
      else
        v5 = v10;
    }
    while (v7);
  }
  v12 = v5;
  do
  {
    v13 = v12;
    v14 = v5;
    *a4 = v12;
    if (v12 == (_QWORD *)*a3)
      break;
    v15 = *(v12 - 2);
    v12 -= 3;
    v5 -= 3;
  }
  while (a1 - *(v13 - 3) < v15);
  v16 = (_QWORD *)a3[1];
  if (v13 != v16)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * (v16 - v14);
    do
    {
      v18 = v17 >> 1;
      v19 = &v13[3 * (v17 >> 1)];
      v21 = *v19;
      v20 = v19 + 3;
      v17 += ~(v17 >> 1);
      if (a2 - 1 < v21)
        v17 = v18;
      else
        v13 = v20;
    }
    while (v17);
  }
  *a5 = v13;
  return *a4 != (_QWORD)v13;
}

void TRawSymbolOwnerData<Pointer32>::_initialize_demangled_names_hash_once(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 352);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TRawSymbolOwnerData<Pointer32>::_initialize_demangled_names_hash_once(void)::{lambda(void)#1} &&>>);
  }
}

_QWORD ***std::__call_once_param<std::tuple<TRawSymbolOwnerData<Pointer32>::_initialize_demangled_names_hash_once(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>(_QWORD ***result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  char *v6;

  v1 = (_QWORD *)***result;
  v2 = v1[23];
  if (v2 != v1[24])
  {
    v3 = v1[23];
    do
    {
      v4 = atomic_load((unsigned int *)(v3 + 20));
      if ((v4 & 0x1C000) != 0)
      {
        v6 = (char *)TRawSymbol<Pointer32>::_resolve_name(v3, 0, 0);
        v5 = -1431655765 * ((unint64_t)(v2 - v1[23]) >> 5);
        result = (_QWORD ***)std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__emplace_multi<char const*,unsigned int>(v1 + 34, &v6, &v5);
      }
      v3 += 96;
      v2 += 96;
    }
    while (v3 != v1[24]);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__emplace_multi<char const*,unsigned int>(_QWORD *a1, char **a2, _DWORD *a3)
{
  uint64_t v5[3];

  std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__construct_node<char const*,unsigned int>((uint64_t)a1, a2, a3, (uint64_t)v5);
  return std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__node_insert_multi(a1, v5[0]);
}

void sub_1B40EC2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__construct_node<char const*,unsigned int>@<X0>(uint64_t a1@<X0>, char **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  size_t v11;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x28uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *v9 = 0;
  v9[1] = 0;
  v10 = *a2;
  v9[2] = v10;
  v11 = strlen(v10);
  v9[3] = v11;
  *((_DWORD *)v9 + 8) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t *)v10, v11);
  v9[1] = result;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *inserted;

  v4 = a2 + 16;
  v5 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a2 + 8) = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_perform(a1, (_QWORD *)a2, inserted);
  return a2;
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  size_t v18;
  const void *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  int v24;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__rehash<false>(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  v19 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  do
  {
    v20 = v16;
    v16 = (uint64_t *)*v16;
    if (!v16)
      break;
    v21 = v16[1];
    if (v14 > 1)
    {
      v22 = v16[1];
      if (v21 >= v6)
        v22 = v21 % v6;
    }
    else
    {
      v22 = v21 & (v6 - 1);
    }
    if (v22 != v15)
      break;
    v23 = v21 == a2 && v16[3] == v18 && memcmp((const void *)v16[2], v19, v18) == 0;
    v24 = v17 & !v23;
    v17 |= v23;
  }
  while (v24 != 1);
  return v20;
}

void std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *i;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  size_t v16;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else
        {
          v14 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            do
            {
              v15 = v14;
              v14 = (uint64_t *)*v14;
              if (!v14)
                break;
              v16 = i[3];
              if (v16 != v14[3])
                break;
            }
            while (!memcmp((const void *)i[2], (const void *)v14[2], v16));
            *v7 = v14;
            *v15 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (uint64_t **)i;
            v8 = v13;
          }
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t TRawSymbolOwnerData<Pointer32>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer32>>>(int a1, uint64_t a2, char *__s, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7)
{
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  const void *v20[2];

  v20[0] = __s;
  v20[1] = (const void *)strlen(__s);
  v12 = std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__equal_range_multi<std::string_view>(a5, v20);
  v14 = v12;
  v15 = v13;
  if (a7)
  {
    if (v12 != v13)
    {
      v16 = 0;
      v17 = a2 | 5;
      do
      {
        if (a4)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, v17, *a6 + 96 * *((unsigned int *)v14 + 8));
        ++v16;
        v14 = (uint64_t **)*v14;
      }
      while (v14 != v15);
      return v16;
    }
    return 0;
  }
  if (v12 == v13)
    return 0;
  v16 = 0;
  v18 = v12;
  do
  {
    ++v16;
    v18 = (uint64_t **)*v18;
  }
  while (v18 != v13);
  if (v16 == 1)
  {
    if (a4)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a2 | 5, *a6 + 96 * *((unsigned int *)v12 + 8));
    return 1;
  }
  return v16;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__equal_range_multi<std::string_view>(_QWORD *a1, const void **a2)
{
  uint64_t **v3;
  uint64_t **v4;
  size_t v5;
  const void *v6;
  uint64_t **v7;

  v3 = std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::find<std::string_view>(a1, (uint64_t)a2);
  v4 = v3;
  if (v3)
  {
    v6 = *a2;
    v5 = (size_t)a2[1];
    v7 = v3;
    do
      v7 = (uint64_t **)*v7;
    while (v7 && v7[3] == (uint64_t *)v5 && !memcmp(v7[2], v6, v5));
  }
  return v4;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void TRawSymbolOwnerData<Pointer32>::_initialize_mangled_names_hash_once(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 360);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TRawSymbolOwnerData<Pointer32>::_initialize_mangled_names_hash_once(void)::{lambda(void)#1} &&>>);
  }
}

_QWORD ***std::__call_once_param<std::tuple<TRawSymbolOwnerData<Pointer32>::_initialize_mangled_names_hash_once(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>(_QWORD ***result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  char *v6;

  v1 = (_QWORD *)***result;
  v2 = v1[23];
  if (v2 != v1[24])
  {
    v3 = v1[23];
    do
    {
      v4 = atomic_load((unsigned int *)(v3 + 20));
      if ((v4 & 0x1C000) != 0)
      {
        v6 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>(v3);
        v5 = -1431655765 * ((unint64_t)(v2 - v1[23]) >> 5);
        result = (_QWORD ***)std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__emplace_multi<char const*,unsigned int>(v1 + 39, &v6, &v5);
      }
      v3 += 96;
      v2 += 96;
    }
    while (v3 != v1[24]);
  }
  return result;
}

BOOL find_lower_and_upper_bounds_of_range<Pointer32,TRawSymbol<Pointer32>>(unsigned int a1, int a2, char **a3, char **a4, char **a5)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  char *v20;
  unsigned int v21;

  v5 = *a3;
  v6 = a3[1] - *a3;
  if (v6)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 5);
    do
    {
      v8 = v7 >> 1;
      v9 = (unsigned int *)&v5[96 * (v7 >> 1)];
      v11 = *v9;
      v10 = (char *)(v9 + 24);
      v7 += ~(v7 >> 1);
      if (v11 > a1)
        v7 = v8;
      else
        v5 = v10;
    }
    while (v7);
  }
  v12 = v5;
  do
  {
    v13 = v12;
    v14 = v5;
    *a4 = v12;
    if (v12 == *a3)
      break;
    v15 = *((_DWORD *)v12 - 23);
    v12 -= 96;
    v5 -= 96;
  }
  while (a1 - *((_DWORD *)v13 - 24) < v15);
  v16 = a3[1];
  if (v13 != v16)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v14) >> 5);
    do
    {
      v18 = v17 >> 1;
      v19 = (unsigned int *)&v13[96 * (v17 >> 1)];
      v21 = *v19;
      v20 = (char *)(v19 + 24);
      v17 += ~(v17 >> 1);
      if (a2 - 1 < v21)
        v17 = v18;
      else
        v13 = v20;
    }
    while (v17);
  }
  *a5 = v13;
  return *a4 != v13;
}

uint64_t ___ZN19TRawSymbolOwnerDataI9Pointer32E18symbol_for_addressEP16CSCppSymbolOwnery_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  uint64_t v4;

  v3 = atomic_load((unsigned int *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 20));
  if ((v3 & 0x200) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_QWORD *)(v4 + 40) = a2;
    *(_QWORD *)(v4 + 48) = a3;
  }
  return result;
}

BOOL find_lower_and_upper_bounds_of_range<Pointer32,TRawSourceInfo<Pointer32>>(unsigned int a1, int a2, char **a3, char **a4, char **a5)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  char *v20;
  unsigned int v21;

  v5 = *a3;
  v6 = a3[1] - *a3;
  if (v6)
  {
    v7 = v6 >> 5;
    do
    {
      v8 = v7 >> 1;
      v9 = (unsigned int *)&v5[32 * (v7 >> 1)];
      v11 = *v9;
      v10 = (char *)(v9 + 8);
      v7 += ~(v7 >> 1);
      if (v11 > a1)
        v7 = v8;
      else
        v5 = v10;
    }
    while (v7);
  }
  v12 = v5;
  do
  {
    v13 = v12;
    v14 = v5;
    *a4 = v12;
    if (v12 == *a3)
      break;
    v15 = *((_DWORD *)v12 - 7);
    v12 -= 32;
    v5 -= 32;
  }
  while (a1 - *((_DWORD *)v13 - 8) < v15);
  v16 = a3[1];
  if (v13 != v16)
  {
    v17 = (v16 - v14) >> 5;
    do
    {
      v18 = v17 >> 1;
      v19 = (unsigned int *)&v13[32 * (v17 >> 1)];
      v21 = *v19;
      v20 = (char *)(v19 + 8);
      v17 += ~(v17 >> 1);
      if (a2 - 1 < v21)
        v17 = v18;
      else
        v13 = v20;
    }
    while (v17);
  }
  *a5 = v13;
  return *a4 != v13;
}

_DWORD *TRawSymbol<Pointer32>::find_enclosing_inlined_function(uint64_t a1, unsigned int *a2)
{
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_DWORD **)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64) - (_QWORD)v2;
  if (!v3)
    return 0;
  v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 5);
  v5 = *(_DWORD **)(a1 + 56);
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[24 * (v4 >> 1)];
    v9 = *v7;
    v8 = v7 + 24;
    v4 += ~(v4 >> 1);
    if (*a2 < v9)
      v4 = v6;
    else
      v5 = v8;
  }
  while (v4);
  if (v5 == v2)
    return 0;
  v10 = *(v5 - 24);
  if (*a2 < v10)
    return 0;
  if (a2[1] + *a2 <= *(v5 - 23) + v10)
    return v5 - 24;
  return 0;
}

void _ZZZN19TRawSymbolOwnerDataI9Pointer32E41for_each_inline_range_for_symbol_at_depthEP16CSCppSymbolOwner10_CSTypeRefiU13block_pointerFv8_CSRangePS4_S6_mEENKUlP10TRawSymbolIS0_EE_clESB_ENKUlSB_RT_E_clISF_EEvSB_SE_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;

  if (*((_DWORD *)a1 + 10) == -1 && *(_DWORD *)a2 > *(_DWORD *)a1[4])
  {
    v6 = a1[3];
    (*(void (**)(void))(*(_QWORD *)(v6 + 8) + 16))();
    ++**(_QWORD **)v6;
    *(_DWORD *)a1[4] = *(_DWORD *)a2;
  }
  v7 = *a1;
  v8 = a1[2] | 5;
  v9 = *(uint64_t **)(*a1 + 8);
  v10 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v9 >= v10)
  {
    v12 = *(uint64_t **)v7;
    v13 = ((uint64_t)v9 - *(_QWORD *)v7) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      goto LABEL_52;
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(*a1 + 16, v16);
      v12 = *(uint64_t **)v7;
      v9 = *(uint64_t **)(v7 + 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)&v17[16 * v13];
    v19 = &v17[16 * v16];
    *v18 = v8;
    v18[1] = a2;
    v11 = v18 + 2;
    if (v9 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 2;
        v9 -= 2;
      }
      while (v9 != v12);
      v12 = *(uint64_t **)v7;
    }
    *(_QWORD *)v7 = v18;
    *(_QWORD *)(v7 + 8) = v11;
    *(_QWORD *)(v7 + 16) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v9 = v8;
    v9[1] = a2;
    v11 = v9 + 2;
  }
  *(_QWORD *)(v7 + 8) = v11;
  v20 = a1[1];
  v21 = atomic_load((unsigned int *)(a2 + 20));
  if ((v21 & 0x80000000) != 0)
  {
    v22 = 5;
    if (!*(_QWORD *)(a2 + 40))
      v22 = 0;
  }
  else
  {
    v22 = 0;
  }
  v23 = v22 | a1[2];
  v24 = *(_QWORD *)(v20 + 16);
  v25 = *(uint64_t **)(v20 + 8);
  if ((unint64_t)v25 < v24)
  {
    *v25 = v23;
    v25[1] = a2;
    v26 = v25 + 2;
    goto LABEL_40;
  }
  v27 = *(uint64_t **)v20;
  v28 = ((uint64_t)v25 - *(_QWORD *)v20) >> 4;
  v29 = v28 + 1;
  if ((unint64_t)(v28 + 1) >> 60)
LABEL_52:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v30 = v24 - (_QWORD)v27;
  if (v30 >> 3 > v29)
    v29 = v30 >> 3;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
    v31 = 0xFFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (v31)
  {
    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v20 + 16, v31);
    v27 = *(uint64_t **)v20;
    v25 = *(uint64_t **)(v20 + 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = (uint64_t *)&v32[16 * v28];
  v34 = &v32[16 * v31];
  *v33 = v23;
  v33[1] = a2;
  v26 = v33 + 2;
  if (v25 != v27)
  {
    do
    {
      *((_OWORD *)v33 - 1) = *((_OWORD *)v25 - 1);
      v33 -= 2;
      v25 -= 2;
    }
    while (v25 != v27);
    v27 = *(uint64_t **)v20;
  }
  *(_QWORD *)v20 = v33;
  *(_QWORD *)(v20 + 8) = v26;
  *(_QWORD *)(v20 + 16) = v34;
  if (v27)
    operator delete(v27);
LABEL_40:
  *(_QWORD *)(v20 + 8) = v26;
  if (*((int *)a1 + 10) + 1 == (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4)
  {
    v35 = a1[3];
    CSSymbolGetRange(a1[2] | 5, a2);
    (*(void (**)(void))(*(_QWORD *)(v35 + 8) + 16))();
    ++**(_QWORD **)v35;
  }
  v36 = *(_QWORD *)(a2 + 56);
  v37 = *(_QWORD *)(a2 + 64);
  if (v36 == v37)
  {
    v38 = *(_DWORD *)a2;
    v39 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      _ZZZN19TRawSymbolOwnerDataI9Pointer32E41for_each_inline_range_for_symbol_at_depthEP16CSCppSymbolOwner10_CSTypeRefiU13block_pointerFv8_CSRangePS4_S6_mEENKUlP10TRawSymbolIS0_EE_clESB_ENKUlSB_RT_E_clISF_EEvSB_SE_(a3, v36, a3);
      v36 += 96;
    }
    while (v36 != v37);
    v38 = *(_DWORD *)(v36 - 96);
    v39 = *(_DWORD *)(v36 - 92);
  }
  v40 = v39 + v38;
  if (*((_DWORD *)a1 + 10) == -1)
  {
    v42 = *(_DWORD *)a1[4];
    if (v40 <= v42
      || (v43 = a1[3],
          (*(void (**)(void))(*(_QWORD *)(v43 + 8) + 16))(),
          ++**(_QWORD **)v43,
          *(_DWORD *)a1[4] = v40,
          v42 = v40,
          *((_DWORD *)a1 + 10) == -1))
    {
      if (*(_DWORD *)(a2 + 4) + *(_DWORD *)a2 > v42)
      {
        v44 = a1[3];
        (*(void (**)(void))(*(_QWORD *)(v44 + 8) + 16))();
        ++**(_QWORD **)v44;
        *(_DWORD *)a1[4] = *(_DWORD *)(a2 + 4) + *(_DWORD *)a2;
      }
    }
  }
  v41 = a1[1];
  *(_QWORD *)(*a1 + 8) -= 16;
  *(_QWORD *)(v41 + 8) -= 16;
}

_QWORD *std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::__emplace_unique_key_args<char const*,char const* const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B40ED424(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void _do_sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(uint64_t a1@<X0>, uint64_t a2@<X1>, CSCppDyldSplitSharedCacheMemory *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  CSCppDyldSharedCache *v11;
  uint64_t v12;
  CSCppDyldSharedCache *v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8)) & 0x400000) == 0
    && (*(_DWORD *)(a1 + 108) & 0x4200) == 0x200)
  {
    v8 = *(uint64_t **)(a1 + 32);
    v9 = *(uint64_t **)(a1 + 40);
    if (v8 != v9)
    {
      while (!*v8)
      {
        v8 += 4;
        if (v8 == v9)
          goto LABEL_19;
      }
    }
    if (v8 != v9)
    {
      v30 = 0;
      v10 = *v8;
      v30 = *v8;
      v11 = (CSCppDyldSharedCache *)CSCppDyldSplitSharedCacheMemory::primary_shared_cache(a3);
      v12 = *((_QWORD *)a3 + 4);
      if (v12)
      {
        v13 = v11;
        v14 = *(_QWORD *)(v12 + 32);
        if (v14 && v11 != 0)
        {
          v16 = (_QWORD *)CSCppDyldSharedCache::dsc_uuid(v11);
          v17 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
          if (v16)
          {
            if (v17)
            {
              if (*v16 == *v17 && v16[1] == v17[1])
              {
                v19 = CSCppDyldSharedCache::text_segment_range(v13);
                if ((*(_BYTE *)(a1 + 109) & 4) == 0)
                {
                  v10 += v14 - v19;
                  v30 = v10;
                }
                if (CSCppDyldSplitSharedCacheMemory::contains_address(a3, v10))
                {
                  v20 = 28;
                  while (1)
                  {
                    v21 = (_DWORD *)(*(uint64_t (**)(CSCppDyldSplitSharedCacheMemory *, _QWORD, unint64_t))(*(_QWORD *)a3 + 32))(a3, v10, v20);
                    if (!v21 || *v21 != -17958194)
                      break;
                    v20 = v21[5] + 28;
                    if (v20 <= v22)
                    {
                      *(_QWORD *)buf = v21;
                      v28 = *(_QWORD *)(a1 + 120);
                      v23 = *(_DWORD *)(a1 + 104);
                      v26 = 0;
                      v27 = v23;
                      std::make_unique[abi:ne180100]<TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>,CSCppDyldSplitSharedCacheMemory &,unsigned long &,TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> const*&,char const*,unsigned int,int>((uint64_t)a3, (int *)&v30, (uint64_t *)buf, &v28, &v27, &v26, &v29);
                      if (uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(v29, a1))
                      {
                        v24 = atomic_load((unsigned int *)(a2 + 12));
                        atomic_store(v24 | 4, (unsigned int *)(a2 + 12));
                        *a4 = v29;
                      }
                      else
                      {
                        *a4 = 0;
                        v25 = v29;
                        v29 = 0;
                        if (v25)
                          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
                      }
                      return;
                    }
                  }
                }
                else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = v10;
                  _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Dyld shared cache binary not found in dsc text segment: %p\n", buf, 0xCu);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  *a4 = 0;
}

void sub_1B40ED6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t _do_obtain_stripped_locals_data<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, CSCppDyldSplitSharedCacheMemory *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CSCppDyldSharedCache *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  if (!a5
    || (result = uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(*a2, result), (result & 1) == 0)
    || ((v11 = *((_QWORD *)a3 + 4)) == 0 ? (v12 = 0) : (v12 = *(_QWORD *)(v11 + 32)),
        (v13 = *(unsigned int *)(*a2 + 16),
         v14 = (CSCppDyldSharedCache *)CSCppDyldSplitSharedCacheMemory::local_symbols_shared_cache(a3),
         result = CSCppDyldSplitSharedCacheMemory::local_symbols_shared_cache_path(a3),
         !v14)
     || (v15 = (char *)result) == 0))
  {
    *(_QWORD *)&v20 = -1;
    *((_QWORD *)&v20 + 1) = -1;
    *a6 = v20;
    a6[1] = v20;
    return result;
  }
  if (verify_inmemory_and_ondisk_uuid(v14, (char *)result) && CSCppDyldSharedCache::has_stripped_locals_data(v14))
  {
    v16 = CSCppDyldSharedCache::local_symbols_range(v14);
    v18 = v17;
    v19 = operator new();
    CSCppFileMemory::CSCppFileMemory(v19, v15, v16, v18);
  }
  else
  {
    v19 = 0;
  }
  result = CSCppDyldSharedCache::local_symbols_range(v14);
  if (!v19)
    goto LABEL_21;
  if (!v21)
    goto LABEL_21;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, result, v21);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v22;
  if (!v22)
    goto LABEL_21;
  v25 = v19;
  TRawSymbolOwnerData<Pointer32>::add_memory(a4, &v25);
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = CSCppDyldSharedCache::stripped_locals_data_for ((uint64_t)v14, v13 - v12, *(unsigned int **)a5, (uint64_t)a6);
  if ((result & 1) == 0)
  {
    v19 = 0;
LABEL_21:
    *(_QWORD *)&v24 = -1;
    *((_QWORD *)&v24 + 1) = -1;
    *a6 = v24;
    a6[1] = v24;
    if (v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return result;
}

void sub_1B40ED8C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x1093C406FCC8570);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbolOwnerData<Pointer32>::add_memory(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;

  v6 = a1[19];
  result = (uint64_t)(a1 + 19);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (int64x2_t *)(result - 16);
    v11 = *(_QWORD *)(result - 16);
    v12 = ((uint64_t)v7 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v13 = v5 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v28 = result;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(result, v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    v27 = v18;
    v19 = *a2;
    *a2 = 0;
    *(_QWORD *)v17 = v19;
    v9 = v17 + 8;
    v26.i64[1] = (uint64_t)(v17 + 8);
    v21 = (_QWORD *)a1[17];
    v20 = (_QWORD *)a1[18];
    if (v20 == v21)
    {
      v23 = vdupq_n_s64((unint64_t)v20);
    }
    else
    {
      do
      {
        v22 = *--v20;
        *v20 = 0;
        *((_QWORD *)v17 - 1) = v22;
        v17 -= 8;
      }
      while (v20 != v21);
      v23 = *v10;
      v9 = (_QWORD *)v26.i64[1];
      v18 = v27;
    }
    a1[17] = v17;
    a1[18] = v9;
    v26 = v23;
    v24 = (char *)a1[19];
    a1[19] = v18;
    v27 = v24;
    v25 = v23.i64[0];
    result = std::__split_buffer<std::unique_ptr<CSCppMemory>>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *v7 = v8;
    v9 = v7 + 1;
  }
  a1[18] = v9;
  return result;
}

uint64_t std::make_unique[abi:ne180100]<TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>,CSCppDyldSplitSharedCacheMemory &,unsigned long &,TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> const*&,char const*,unsigned int,int>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int *a5@<X4>, int *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v14 = operator new();
  result = TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(v14, a1, *a2, *a3, *a4, *a5, *a6, v15, 0, 0);
  *a7 = v14;
  return result;
}

void sub_1B40EDAD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x10F1C40D39611B8);
  _Unwind_Resume(a1);
}

BOOL uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t *v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  char *v18;
  _BYTE *v19;
  uint64_t v20;

  v2 = 0;
  if (a1 && a2)
  {
    v5 = (_QWORD *)(a2 + 16);
    if (UUID::is_null((UUID *)(a2 + 16)))
    {
      v6 = *(_DWORD *)(a2 + 104);
      if (v6 && (v7 = *(_DWORD *)(a1 + 36)) != 0 && v7 != v6)
      {
        return 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::extract_segments_and_sections(a1, (void **)&v18, 0);
        v10 = v18;
        v12 = *(char **)(a2 + 32);
        v11 = *(char **)(a2 + 40);
        if (v19 - v18 == v11 - v12)
        {
          v13 = v18 + 16;
          while (1)
          {
            v14 = (const char *)*((_QWORD *)v13 + 1);
            if (!v14)
              v14 = *(const char **)v13;
            v15 = (const char *)*((_QWORD *)v12 + 3);
            v16 = v15;
            if (!v15)
              v16 = (const char *)*((_QWORD *)v12 + 2);
            if (strncmp(v14, v16, 0x10uLL))
              break;
            if (*((_QWORD *)v13 - 1) != *((_QWORD *)v12 + 1))
            {
              if (!v15)
                v15 = (const char *)*((_QWORD *)v12 + 2);
              if (!is_relocation_skippable(v15))
                break;
            }
            v12 += 32;
            v13 += 32;
            if (v12 == v11)
            {
              v2 = 1;
              goto LABEL_28;
            }
          }
        }
        v2 = 0;
LABEL_28:
        if (v10)
        {
          v19 = v10;
          operator delete(v10);
        }
      }
    }
    else
    {
      v8 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::uuid(*(_QWORD *)(a1 + 24));
      return *v5 == *v8 && *(_QWORD *)(a2 + 24) == v8[1];
    }
  }
  return v2;
}

void sub_1B40EDC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, int a10)
{
  unint64_t v11;
  unint64_t v12;

  *(_QWORD *)a1 = &off_1E67756C8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a6;
  *(_QWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = a7;
  *(_BYTE *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 64) = a10;
  v11 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(a4, "__TEXT");
  if (v11)
  {
    v12 = v11;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 16) - *(_DWORD *)(v12 + 24);
    else
      *(_BYTE *)(a1 + 52) = *(_DWORD *)(v12 + 24) != 0;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 12) == 10)
    *(_DWORD *)(a1 + 48) |= extract_dsym_version<SizeAndEndianness<Pointer32,LittleEndian>>(a1);
  return a1;
}

unint64_t TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(uint64_t a1, const char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 20);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = a1;
  v9 = a1 + 28 + v3;
  v10 = a1 + 28;
  do
  {
    v4 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v7);
    v5 = v4;
  }
  while (v4 && (*(_DWORD *)v4 != 1 || strncmp(a2, (const char *)(v4 + 8), 0xFuLL)));
  return v5;
}

unint64_t extract_dsym_version<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1)
{
  unint64_t result;
  uint64_t v2;
  int *v3;
  int v4;

  result = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__TEXT");
  if (result)
  {
    v2 = *(unsigned int *)(result + 48);
    if ((_DWORD)v2)
    {
      v3 = (int *)(result + 92);
      while (1)
      {
        v4 = *v3;
        v3 += 17;
        if (v4)
          break;
        if (!--v2)
          return 0x8000000;
      }
      return 0x10000000;
    }
    else
    {
      return 0x8000000;
    }
  }
  return result;
}

void TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::~TExtendedMachOHeader()
{
  JUMPOUT(0x1B5E36940);
}

unint64_t TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command(uint64_t a1)
{
  unint64_t result;
  unint64_t v4;
  _BOOL4 v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1)-- < 1)
    return 0;
  result = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 <= result || *(_QWORD *)(a1 + 8) > result;
  v6 = result + *(unsigned int *)(result + 4);
  if (v4 < v6 || (*(_QWORD *)(a1 + 8) >= v6 ? (v7 = 1) : (v7 = v5), v7 == 1))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = 134217984;
      v10 = v8;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Corrupt macho header at %#llx\n", (uint8_t *)&v9, 0xCu);
    }
    result = 0;
    *(_DWORD *)a1 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v6;
  }
  return result;
}

void TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::extract_segments_and_sections(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CSCppNamedRange *v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  _QWORD v73[2];
  void (*v74)(uint64_t, char *);
  void *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  CSCppNamedRange *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned int *)(v6 + 20);
  v89 = *(_DWORD *)(v6 + 16);
  v90 = v6;
  v91 = v6 + 28 + v7;
  v92 = v6 + 28;
  v8 = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v89);
  if (!v8)
    return;
  v9 = 0;
  v10 = 0;
  do
  {
    if (*v8 == 1 && v8[7])
    {
      ++v9;
      v10 += v8[12];
    }
    v8 = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v89);
  }
  while (v8);
  if (!v9)
    return;
  if (a2)
    std::vector<CSCppSegmentRange>::reserve(a2, v9);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 12);
  if (v11 == 9)
  {
    v14 = 2;
  }
  else if (v11 == 10)
  {
    v12 = *(_DWORD *)(a1 + 48);
    if ((v12 & 0x38000000) == 0x8000000)
      v13 = 2;
    else
      v13 = 1;
    if ((v12 & 0x38000000) != 0)
      v14 = v13;
    else
      v14 = 4;
  }
  else
  {
    v14 = 1;
  }
  v71 = v14;
  if (a3)
  {
    if (v14 == 1)
    {
      v18 = v10;
    }
    else
    {
      if (v14 != 2)
      {
        v15 = *(_QWORD *)(a3 + 16);
        v16 = *(_QWORD *)(a3 + 8);
        if (v16 >= v15)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a3) >> 3);
          if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_97:
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a3) >> 3);
          v21 = 2 * v20;
          if (2 * v20 <= v19 + 1)
            v21 = v19 + 1;
          if (v20 >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          if (v22)
          {
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(a3 + 16, v22);
            v25 = v24;
          }
          else
          {
            v23 = 0;
            v25 = 0;
          }
          v26 = &v23[24 * v19];
          *(_OWORD *)v26 = xmmword_1B41A83A0;
          v27 = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)"UNIVERSE", (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
          v28 = &v23[24 * v25];
          *((_QWORD *)v26 + 2) = v27;
          v17 = v26 + 24;
          v30 = *(char **)a3;
          v29 = *(char **)(a3 + 8);
          if (v29 != *(char **)a3)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 24);
              *((_QWORD *)v26 - 1) = *((_QWORD *)v29 - 1);
              *(_OWORD *)(v26 - 24) = v31;
              v26 -= 24;
              v29 -= 24;
            }
            while (v29 != v30);
            v29 = *(char **)a3;
          }
          *(_QWORD *)a3 = v26;
          *(_QWORD *)(a3 + 8) = v17;
          *(_QWORD *)(a3 + 16) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_OWORD *)v16 = xmmword_1B41A83A0;
          *(_QWORD *)(v16 + 16) = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)"UNIVERSE", (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
          v17 = (char *)(v16 + 24);
          *(_QWORD *)(a3 + 8) = v17;
        }
        *(_QWORD *)(a3 + 8) = v17;
        goto LABEL_43;
      }
      v18 = v9;
    }
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve((void **)a3, v18);
  }
LABEL_43:
  v32 = *(_QWORD *)(a1 + 24);
  v33 = *(unsigned int *)(v32 + 20);
  v89 = *(_DWORD *)(v32 + 16);
  v90 = v32;
  v91 = v32 + 28 + v33;
  v92 = v32 + 28;
  v34 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v89);
  if (v34)
  {
    v35 = v34;
    v36 = a3 + 16;
    do
    {
      if (*(_DWORD *)v35 == 1)
      {
        v37 = *(unsigned int *)(v35 + 28);
        if ((_DWORD)v37)
        {
          v38 = (CSCppNamedRange *)(v35 + 8);
          if (strcmp((const char *)(v35 + 8), "__LINKINFO"))
          {
            if (strncmp((const char *)(v35 + 8), "__PLK", 5uLL) && strncmp((const char *)(v35 + 8), "__PRELINK", 9uLL))
            {
              v39 = *(_DWORD *)(a1 + 32);
              if (!strncmp((const char *)(v35 + 8), "__PAGEZERO", 0xBuLL)
                || (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 26) & 0x20) == 0
                && !strncmp((const char *)(v35 + 8), "__UNIXSTACK", 0xCuLL))
              {
                v39 = 0;
              }
              v40 = *(_DWORD *)(v35 + 24);
              v41 = (v40 + v39);
              if (a2)
              {
                v83 = (v40 + v39);
                v88 = v37;
                v87 = (CSCppNamedRange *)(v35 + 8);
                std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char const*>(a2, &v83, &v88, &v87);
              }
              if (a3)
              {
                if (v71 == 2)
                {
                  v46 = *(unsigned int *)(v35 + 28);
                  v47 = (*(_DWORD *)(v35 + 24) + v39);
                  v49 = *(_QWORD **)(a3 + 8);
                  v48 = *(_QWORD *)(a3 + 16);
                  if ((unint64_t)v49 >= v48)
                  {
                    v51 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v49 - *(_QWORD *)a3) >> 3);
                    v52 = v51 + 1;
                    if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_97;
                    v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *(_QWORD *)a3) >> 3);
                    if (2 * v53 > v52)
                      v52 = 2 * v53;
                    if (v53 >= 0x555555555555555)
                      v54 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v54 = v52;
                    v70 = v36;
                    if (v54)
                    {
                      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v36, v54);
                      v57 = v56;
                    }
                    else
                    {
                      v55 = 0;
                      v57 = 0;
                    }
                    v61 = &v55[24 * v51];
                    *(_QWORD *)v61 = v47;
                    *((_QWORD *)v61 + 1) = v46;
                    *((_QWORD *)v61 + 2) = CSCppNamedRange::unique_macho_string(v38, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
                    v63 = *(char **)a3;
                    v62 = *(char **)(a3 + 8);
                    v64 = v61;
                    if (v62 != *(char **)a3)
                    {
                      do
                      {
                        v65 = *(_OWORD *)(v62 - 24);
                        *((_QWORD *)v64 - 1) = *((_QWORD *)v62 - 1);
                        *(_OWORD *)(v64 - 24) = v65;
                        v64 -= 24;
                        v62 -= 24;
                      }
                      while (v62 != v63);
                      v62 = *(char **)a3;
                    }
                    v50 = v61 + 24;
                    *(_QWORD *)a3 = v64;
                    *(_QWORD *)(a3 + 8) = v61 + 24;
                    *(_QWORD *)(a3 + 16) = &v55[24 * v57];
                    if (v62)
                      operator delete(v62);
                    v36 = v70;
                  }
                  else
                  {
                    *v49 = v47;
                    v49[1] = v46;
                    v49[2] = CSCppNamedRange::unique_macho_string(v38, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
                    v50 = v49 + 3;
                    *(_QWORD *)(a3 + 8) = v49 + 3;
                  }
                  *(_QWORD *)(a3 + 8) = v50;
                }
                else if (v71 == 1)
                {
                  v69 = v36;
                  v83 = 0;
                  v84 = &v83;
                  v85 = 0x2000000000;
                  v86 = -1;
                  v73[0] = MEMORY[0x1E0C809B0];
                  v73[1] = 0x40000000;
                  v74 = ___ZNK20TExtendedMachOHeaderI17SizeAndEndiannessI9Pointer3212LittleEndianEE29extract_segments_and_sectionsEPNSt3__16vectorI17CSCppSegmentRangeNS5_9allocatorIS7_EEEEPNS6_I17CSCppSectionRangeNS8_ISC_EEEE_block_invoke;
                  v75 = &unk_1E67756F0;
                  v76 = &v83;
                  v77 = a1;
                  v82 = v39;
                  v78 = v41;
                  v79 = v37;
                  v80 = v35;
                  v81 = a3;
                  v42 = *(unsigned int *)(v35 + 48);
                  LOBYTE(v88) = 0;
                  if ((_DWORD)v42)
                  {
                    v43 = v35 + 56;
                    v44 = 1;
                    do
                    {
                      ((void (*)(_QWORD *, unint64_t, uint64_t *))v74)(v73, v43, &v88);
                      if ((_BYTE)v88)
                        v45 = 1;
                      else
                        v45 = v44 >= v42;
                      ++v44;
                      v43 += 68;
                    }
                    while (!v45);
                  }
                  v36 = v69;
                  if (!strcmp((const char *)(v35 + 8), "__TEXT"))
                  {
                    v58 = *((_DWORD *)v84 + 6);
                    if (v58 != -1)
                    {
                      v59 = *(_DWORD *)(v35 + 24);
                      v45 = v58 >= v59;
                      v60 = v58 - v59;
                      if (v60 != 0 && v45)
                      {
                        LODWORD(v87) = v59 + v39;
                        v72 = v60;
                        v88 = 0;
                        std::vector<CSCppSectionRange>::emplace_back<unsigned int,unsigned int,char const(&)[12],decltype(nullptr)>(a3, (unsigned int *)&v87, &v72, (CSCppNamedRange *)"MACH_HEADER");
                      }
                    }
                  }
                  _Block_object_dispose(&v83, 8);
                }
              }
            }
          }
        }
      }
      v35 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v89);
    }
    while (v35);
  }
  if (a3)
  {
    v66 = *(unint64_t **)(a3 + 8);
    v67 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v66 - *(_QWORD *)a3) >> 3));
    if (v66 == *(unint64_t **)a3)
      v68 = 0;
    else
      v68 = v67;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(*(_QWORD *)a3, v66, (uint64_t)&v83, v68, 1);
  }
}

void sub_1B40EE534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::vector<CSCppSegmentRange>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void ___ZNK20TExtendedMachOHeaderI17SizeAndEndiannessI9Pointer3212LittleEndianEE29extract_segments_and_sectionsEPNSt3__16vectorI17CSCppSegmentRangeNS5_9allocatorIS7_EEEEPNS6_I17CSCppSectionRangeNS8_ISC_EEEE_block_invoke(uint64_t a1, char *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 8);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)(v6 + 24) < v4)
    v4 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v4;
  v7 = *((unsigned int *)a2 + 9);
  v8 = (*(_DWORD *)(a1 + 80) + *((_DWORD *)a2 + 8));
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 <= v8 && v7 + v8 <= *(_QWORD *)(a1 + 56) + v9)
  {
    if ((_DWORD)v7)
    {
      v14 = *(void ***)(a1 + 72);
      v15 = (unint64_t *)v14[1];
      v16 = (unint64_t)v14[2];
      if ((unint64_t)v15 >= v16)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (_BYTE *)*v14) >> 3);
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)*v14) >> 3);
        v20 = 2 * v19;
        if (2 * v19 <= v18 + 1)
          v20 = v18 + 1;
        if (v19 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(v14 + 2), v21);
          v24 = v23;
        }
        else
        {
          v22 = 0;
          v24 = 0;
        }
        v25 = &v22[24 * v18];
        *(_QWORD *)v25 = v8;
        *((_QWORD *)v25 + 1) = v7;
        *((_QWORD *)v25 + 2) = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)(a2 + 16), (CSCppNamedRange *)a2, (const char *)0x10);
        v17 = v25 + 24;
        v27 = (char *)*v14;
        v26 = (char *)v14[1];
        if (v26 != *v14)
        {
          do
          {
            v28 = *(_OWORD *)(v26 - 24);
            *((_QWORD *)v25 - 1) = *((_QWORD *)v26 - 1);
            *(_OWORD *)(v25 - 24) = v28;
            v25 -= 24;
            v26 -= 24;
          }
          while (v26 != v27);
          v26 = (char *)*v14;
        }
        *v14 = v25;
        v14[1] = v17;
        v14[2] = &v22[24 * v24];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v15 = v8;
        v15[1] = v7;
        v15[2] = (unint64_t)CSCppNamedRange::unique_macho_string((CSCppNamedRange *)(a2 + 16), (CSCppNamedRange *)a2, (const char *)0x10);
        v17 = v15 + 3;
        v14[1] = v15 + 3;
      }
      v14[1] = v17;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(v5 + 40);
      v11 = v7 + v8;
      v12 = *(_QWORD *)(a1 + 64) + 8;
      v13 = *(_QWORD *)(a1 + 56) + v9;
      *(_DWORD *)buf = 136317698;
      v30 = v10;
      v31 = 1040;
      v32 = 16;
      v33 = 2080;
      v34 = a2 + 16;
      v35 = 1040;
      v36 = 16;
      v37 = 2080;
      v38 = a2;
      v39 = 2048;
      v40 = v8;
      v41 = 2048;
      v42 = v7 + v8;
      v43 = 1040;
      v44 = 16;
      v45 = 2080;
      v46 = v12;
      v47 = 2048;
      v48 = v9;
      v49 = 2048;
      v50 = v13;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[header: %s] Ignoring '%.16s %.16s' section [%#llx-%#llx] not contained in '%.16s' segment range [%#llx-%#llx]\n", buf, 0x64u);
      v9 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v11 = v7 + v8;
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[header: %s] Ignoring '%.16s %.16s' section [%#llx-%#llx] not contained in '%.16s' segment range [%#llx-%#llx]\n", *(const char **)(v5 + 40), a2 + 16, a2, v8, v11, (const char *)(*(_QWORD *)(a1 + 64) + 8), v9, *(_QWORD *)(a1 + 56) + v9);
  }
}

void sub_1B40EE918(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CSCppSectionRange>::emplace_back<unsigned int,unsigned int,char const(&)[12],decltype(nullptr)>(uint64_t a1, unsigned int *a2, unsigned int *a3, CSCppNamedRange *this)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
  {
    v7 = std::vector<CSCppSectionRange>::__emplace_back_slow_path<unsigned int,unsigned int,char const(&)[12],decltype(nullptr)>((void **)a1, a2, a3, this);
  }
  else
  {
    v6 = *a3;
    *v5 = *a2;
    v5[1] = v6;
    v5[2] = CSCppNamedRange::unique_macho_string(this, 0, (const char *)0x10);
    v7 = v5 + 3;
    *(_QWORD *)(a1 + 8) = v5 + 3;
  }
  *(_QWORD *)(a1 + 8) = v7;
  return v7 - 3;
}

void sub_1B40EE99C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CSCppSectionRange>::__emplace_back_slow_path<unsigned int,unsigned int,char const(&)[12],decltype(nullptr)>(void **a1, unsigned int *a2, unsigned int *a3, CSCppNamedRange *a4)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v5 = (char *)*a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x555555555555555)
    v13 = 0xAAAAAAAAAAAAAAALL;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = *a3;
  v18 = &v14[24 * v6];
  *(_QWORD *)v18 = *a2;
  *((_QWORD *)v18 + 1) = v17;
  *((_QWORD *)v18 + 2) = CSCppNamedRange::unique_macho_string(a4, 0, (const char *)0x10);
  v19 = v18 + 24;
  v21 = (char *)*a1;
  v20 = (char *)a1[1];
  if (v20 != *a1)
  {
    do
    {
      v22 = *(_OWORD *)(v20 - 24);
      *((_QWORD *)v18 - 1) = *((_QWORD *)v20 - 1);
      *(_OWORD *)(v18 - 24) = v22;
      v18 -= 24;
      v20 -= 24;
    }
    while (v20 != v21);
    v20 = (char *)*a1;
  }
  *a1 = v18;
  a1[1] = v19;
  a1[2] = &v14[24 * v16];
  if (v20)
    operator delete(v20);
  return v19;
}

void sub_1B40EEADC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  __int128 *v18;
  unint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  char v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) < *(_QWORD *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *v10)
    {
      v18 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

uint64_t *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::uuid(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = a1;
  v6 = a1 + 28 + v1;
  v7 = a1 + 28;
  while (1)
  {
    v2 = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4);
    if (!v2)
      break;
    if (*v2 == 27)
      return (uint64_t *)(v2 + 2);
  }
  return UUID::null_uuid(0);
}

BOOL verify_inmemory_and_ondisk_uuid(const CSCppDyldSharedCache *a1, char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)CSCppDyldSharedCache::dsc_uuid(a1);
  v4 = operator new();
  CSCppFileMemory::CSCppFileMemory(v4, a2, 0, 0x208uLL);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 32))(v4, 0, 520);
  if (v6)
  {
    v13 = *(_OWORD *)(v5 + 88);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return (_QWORD)v13 == *v3 && *((_QWORD *)&v13 + 1) == v3[1];
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v9 = 134218240;
      v10 = 0;
      v11 = 2048;
      v12 = 520;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Couldn't find a valid DSC header in mapped range %llx - %llx", (uint8_t *)&v9, 0x16u);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
}

void sub_1B40EF2FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<CSCppMemory>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_DWORD *_iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer64>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,TRange<Pointer64>)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *result;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(v3 + 20);
  v8 = *(_DWORD *)(v3 + 16);
  v9 = v3;
  v10 = v3 + 28 + v4;
  v12 = 0;
  v13 = 0;
  v11 = v3 + 28;
  while (1)
  {
    result = TSectionIterator<SizeAndEndianness<Pointer32,LittleEndian>>::section((uint64_t)&v8);
    if (!result)
      break;
    v6 = result[9];
    if ((_DWORD)v6)
    {
      v7 = (*(_DWORD *)(a2 + 48) + result[8]);
      if (*(_QWORD *)a2 >= v7 && *(_QWORD *)(a2 + 8) + *(_QWORD *)a2 <= v7 + v6)
      {
        **(_QWORD **)(a2 + 88) = result;
        return result;
      }
    }
  }
  return result;
}

uint64_t _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  if (!a3)
  {
    *(_QWORD *)(a2 + 232) = 0;
    return result;
  }
  v5 = result;
  v6 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 232) = *(_DWORD *)(result + 32) + *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a3 + 36);
  if ((*(_BYTE *)(a3 + 56) & 1) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
    {
      v7 = *(_DWORD *)(a3 + 32);
      v8 = *(_DWORD *)(v5 + 32);
    }
    else
    {
      if ((*(_BYTE *)(v5 + 50) & 8) != 0)
      {
        v10 = *(_DWORD *)(v5 + 56);
        if (!*(_BYTE *)(v5 + 64))
          v10 = 0;
        v9 = *(_DWORD *)(a3 + 40) + *(_DWORD *)(v5 + 16) - v10;
        goto LABEL_13;
      }
      v7 = *(_DWORD *)(v5 + 16);
      v8 = *(_DWORD *)(a3 + 40);
    }
    v9 = v8 + v7;
LABEL_13:
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, v9, *(unsigned int *)(a2 + 236));
    goto LABEL_14;
  }
  result = 0;
LABEL_14:
  *(_QWORD *)(a2 + 240) = result;
  v11 = atomic_load((unsigned int *)(a2 + 12));
  atomic_store(v11 | 0x1000, (unsigned int *)(a2 + 12));
  return result;
}

_DWORD *TSectionIterator<SizeAndEndianness<Pointer32,LittleEndian>>::section(uint64_t a1)
{
  unsigned int v2;
  unsigned int i;
  _DWORD *result;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 32);
  for (i = *(_DWORD *)(a1 + 36); v2 >= i; i = *(_DWORD *)(a1 + 36))
  {
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command(a1);
    if (!result)
      return result;
    if (*result == 1)
    {
      if (result[7])
      {
        *(_QWORD *)(a1 + 40) = result + 14;
        *(_DWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 36) = result[12];
      }
    }
    v2 = *(_DWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 32) = v2 + 1;
  return (_DWORD *)(v5 + 68 * v2);
}

const char *_iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(uint64_t a1, unsigned __int8 a2, const char **a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *result;
  const char *v8;
  BOOL v9;
  BOOL v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(v5 + 20);
  v13 = *(_DWORD *)(v5 + 16);
  v14 = v5;
  v15 = v5 + 28 + v6;
  v17 = 0;
  v18 = 0;
  v16 = v5 + 28;
  result = (const char *)TSectionIterator<SizeAndEndianness<Pointer32,LittleEndian>>::section((uint64_t)&v13);
  if (result)
  {
    v8 = result;
    while (1)
    {
      if (*((_DWORD *)v8 + 9))
      {
        v9 = strcmp(v8 + 16, "__TEXT") || strcmp(v8, "__text") != 0;
        result = (const char *)strcmp(v8 + 16, "__TEXT_EXEC");
        if ((_DWORD)result)
        {
          v10 = 1;
        }
        else
        {
          result = (const char *)strcmp(v8, "__text");
          v10 = (_DWORD)result != 0;
        }
        if (*a3)
          v11 = 1;
        else
          v11 = v9;
        v12 = a2;
        if ((v11 & 1) == 0)
        {
          *a3 = v8;
          if (!a2)
            return result;
          v12 = 1;
        }
        if (!v12)
          v10 = 1;
        if (!v10)
          break;
      }
      result = (const char *)TSectionIterator<SizeAndEndianness<Pointer32,LittleEndian>>::section((uint64_t)&v13);
      v8 = result;
      if (!result)
        return result;
    }
    *a3 = v8;
  }
  return result;
}

uint64_t *std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD v33[5];

  v5 = a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
    if (v14 >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v15 = ((uint64_t)a2 - v13) >> 3;
    v16 = v10 - v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    v33[0] = v18;
    v33[1] = v28;
    v33[3] = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *a3;
      *a3++ = 0;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v33[2] = v30;
    v5 = (uint64_t *)std::vector<std::unique_ptr<CSCppMemory>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::unique_ptr<CSCppMemory>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
LABEL_18:
    std::vector<std::unique_ptr<CSCppMemory>>::__move_range((uint64_t)a1, a2, v12, (uint64_t)&a2[a5]);
    if (v20 != a3)
    {
      v25 = v5;
      do
      {
        v26 = *a3;
        *a3 = 0;
        v27 = *v25;
        *v25 = v26;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        ++a3;
        ++v25;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(_QWORD *)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(_QWORD **)(v9 - 8);
    do
    {
      v24 = *v22;
      *v22++ = 0;
      *v23++ = v24;
      v21 += 8;
    }
    while (v22 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v12 - (_QWORD)a2) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1B40EF860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<CSCppMemory>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<CSCppMemory>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = (_QWORD *)((char *)v6 + (_QWORD)a2 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      v10 = *v9;
      *v9++ = 0;
      *v8++ = v10;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::unique_ptr<CSCppMemory> *,std::unique_ptr<CSCppMemory> *,std::unique_ptr<CSCppMemory> *,0>(a2, v7, v6);
}

uint64_t std::vector<std::unique_ptr<CSCppMemory>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v6 = a2[1];
    v7 = a3;
    do
    {
      v8 = *--v7;
      *v7 = 0;
      *(_QWORD *)(v6 - 8) = v8;
      v6 -= 8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      v11 = *a3;
      *a3++ = 0;
      *v10++ = v11;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v12 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::unique_ptr<CSCppMemory> *,std::unique_ptr<CSCppMemory> *,std::unique_ptr<CSCppMemory> *,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v8 = *--v6;
      v7 = v8;
      *v6 = 0;
      v10 = *--a3;
      v9 = v10;
      *a3 = v7;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sod_header_from_debug_symbols<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void ***a3@<X2>, CSCppDsymData **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  void **v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;

  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x10180000) != 0)
    goto LABEL_17;
  if ((*(_BYTE *)(a1 + 109) & 0x40) != 0)
    goto LABEL_17;
  result = (uint64_t)*a4;
  if (!*a4)
  {
    v11 = (void **)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0);
    std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](a3, v11);
    result = (uint64_t)*a3;
    *a4 = (CSCppDsymData *)*a3;
    if (!result)
      goto LABEL_17;
  }
  result = (uint64_t)CSCppDsymData::binary_path((CSCppDsymData *)result);
  if (!result
    || (v12 = (char *)CSCppDsymData::binary_path(*a4),
        (result = find_uuid_and_create_file_memory(v12, a1 + 16, *(_QWORD *)(a1 + 112), 2)) == 0))
  {
LABEL_17:
    *a5 = 0;
    return result;
  }
  v13 = result;
  v14 = 28;
  do
  {
    v15 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v13 + 32))(v13, 0, v14);
    v17 = (uint64_t)v15;
    if (!v15 || *v15 != -17958194)
    {
      *a5 = 0;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    v14 = v15[5] + 28;
  }
  while (v14 > v16);
  v18 = (_QWORD *)(v13 + 64);
  if (*(char *)(v13 + 87) < 0)
    v18 = (_QWORD *)*v18;
  v19 = *(_DWORD *)(v13 + 56);
  v20 = *(unsigned int *)(v13 + 48);
  v21 = *(_QWORD *)(v13 + 32);
  v22 = operator new();
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(v22, v13, 0, v17, (uint64_t)v18, v19, 0, v23, v20 | (v21 << 32), 1);
  if (!uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(v22, a1))
  {
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v24 = atomic_load((unsigned int *)(a2 + 12));
  atomic_store(v24 | 0x41, (unsigned int *)(a2 + 12));
  v25 = v13;
  TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, &v25);
  result = v25;
  v25 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a5 = v22;
  return result;
}

void sub_1B40EFBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void sod_header_from_colocated_dsym<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(uint64_t a1@<X0>, uint64_t a2@<X1>, void ***a3@<X2>, void ***a4@<X3>, uint64_t *a5@<X8>)
{
  void **v10;
  void **v11;
  std::string *p_str;
  std::string::size_type size;
  std::string::size_type v14;
  std::string *v15;
  unsigned __int8 *v16;
  std::string *v17;
  std::string *v18;
  uint64_t v19;
  int v20;
  int v21;
  std::string::size_type v22;
  std::string::size_type v24;
  std::string *v25;
  uint64_t file_memory;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  std::string v40;
  std::string __str;
  char v42;

  if ((CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8)) & 0x8180000) != 0
    || (*(_BYTE *)(a1 + 109) & 0x40) != 0
    || (v10 = *a4) == 0
    && (v11 = (void **)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0),
        std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](a3, v11),
        v10 = *a3,
        *a4 = *a3,
        !v10))
  {
    *a5 = 0;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)v10 + 72);
  std::string::basic_string[abi:ne180100]<0>(&v40, ".dSYM");
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v14 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v40;
  else
    v15 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = v40.__r_.__value_.__l.__size_;
  v16 = (unsigned __int8 *)p_str + size;
  if (size && v14)
  {
    v17 = p_str;
    v18 = (std::string *)((char *)p_str + size);
    do
    {
      if (v17->__r_.__value_.__s.__data_[0] == v15->__r_.__value_.__s.__data_[0])
      {
        v19 = 1;
        while (v14 != v19)
        {
          if ((unsigned __int8 *)((char *)v17 + v19) == v16)
            goto LABEL_31;
          v20 = v17->__r_.__value_.__s.__data_[v19];
          v21 = v15->__r_.__value_.__s.__data_[v19++];
          if (v20 != v21)
            goto LABEL_20;
        }
        v18 = v17;
      }
LABEL_20:
      v17 = (std::string *)((char *)v17 + 1);
    }
    while (v17 != (std::string *)v16);
  }
  else
  {
    v18 = (std::string *)((char *)p_str + size);
  }
LABEL_31:
  v22 = (char *)v18 - (char *)p_str;
  if (v18 != (std::string *)v16 || v14 == 0)
    v24 = v22;
  else
    v24 = -1;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v24 == -1)
  {
    *a5 = 0;
    goto LABEL_60;
  }
  std::string::basic_string(&v40, &__str, 0, v24, (std::allocator<char> *)&v42);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v40;
  else
    v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
  file_memory = find_uuid_and_create_file_memory((char *)v25, a1 + 16, *(_QWORD *)(a1 + 112), 2);
  if (!file_memory)
  {
    *a5 = 0;
    goto LABEL_58;
  }
  v27 = 28;
  do
  {
    v28 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)file_memory + 32))(file_memory, 0, v27);
    v30 = (uint64_t)v28;
    if (!v28 || *v28 != -17958194)
    {
      *a5 = 0;
LABEL_56:
      (*(void (**)(uint64_t))(*(_QWORD *)file_memory + 8))(file_memory);
      goto LABEL_58;
    }
    v27 = v28[5] + 28;
  }
  while (v27 > v29);
  v31 = (_QWORD *)(file_memory + 64);
  if (*(char *)(file_memory + 87) < 0)
    v31 = (_QWORD *)*v31;
  v32 = *(_DWORD *)(file_memory + 56);
  v33 = *(unsigned int *)(file_memory + 48);
  v34 = *(_QWORD *)(file_memory + 32);
  v35 = operator new();
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(v35, file_memory, 0, v30, (uint64_t)v31, v32, 0, v36, v33 | (v34 << 32), 1);
  if (!uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(v35, a1))
  {
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    goto LABEL_56;
  }
  v37 = atomic_load((unsigned int *)(a2 + 12));
  atomic_store(v37 | 0x21, (unsigned int *)(a2 + 12));
  v39 = file_memory;
  TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, &v39);
  v38 = v39;
  v39 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  *a5 = v35;
LABEL_58:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
LABEL_60:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1B40EFF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sod_header_from_on_disk_binary<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8)) & 0x100000) != 0
    || (v6 = *(_DWORD *)(a1 + 108),
        get_symbol_owner_on_disk_memory<SizeAndEndianness<Pointer32,LittleEndian>>(a1, &v27),
        (v7 = v27) == 0))
  {
    *a3 = 0;
  }
  else
  {
    v8 = v6 & 0x80000;
    v9 = 28;
    do
    {
      v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v7 + 32))(v7, 0, v9);
      v12 = (uint64_t)v10;
      if (!v10 || *v10 != -17958194)
      {
        v16 = 0;
LABEL_13:
        v17 = 0;
        goto LABEL_14;
      }
      v9 = v10[5] + 28;
    }
    while (v9 > v11);
    if ((*(_BYTE *)(a1 + 109) & 0x40) != 0)
    {
      v25 = *(_QWORD *)(a1 + 120);
      v8 |= 0x4000u;
      v15 = (int *)(a1 + 104);
      v14 = v27;
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 128);
      if (!v13)
        v13 = *(_QWORD *)(a1 + 120);
      v25 = v13;
      v14 = v27;
      v15 = (int *)(v27 + 56);
    }
    v19 = *v15;
    v20 = *(unsigned int *)(v14 + 48);
    v21 = *(_QWORD *)(v14 + 32);
    v17 = operator new();
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(v17, v14, 0, v12, v25, v19, v8, v22, v20 | (v21 << 32), 1);
    if (uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(v17, a1))
    {
      v23 = atomic_load((unsigned int *)(a2 + 12));
      atomic_store(v23 | 1, (unsigned int *)(a2 + 12));
      v26 = v27;
      v27 = 0;
      TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, &v26);
      v24 = v26;
      v26 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v16 = v17;
      goto LABEL_13;
    }
    v16 = 0;
LABEL_14:
    *a3 = v16;
    v18 = v27;
    v27 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1B40F0210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CSCppDyldSplitSharedCacheMemory *v15;
  char *v16;
  char *v17;
  char *v18;
  CSCppDyldSplitSharedCacheMemory *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  _OWORD *v40;
  CSCppDyldSplitSharedCacheMemory *v41;
  void *__p[2];
  __int128 v43;
  void *v44;
  char *v45;
  uint64_t v46;

  v46 = 0;
  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x20000000) != 0 || (*(_DWORD *)(a1 + 108) & 0x4200) != 0x200)
  {
    *a5 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
    v12 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 8);
    v13 = *(_QWORD *)(a1 + 112);
    v14 = *(_QWORD *)(a1 + 120);
    v15 = (CSCppDyldSplitSharedCacheMemory *)operator new();
    CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v15, v12, v13, v14);
    v40 = a3;
    if (!CSCppDyldSplitSharedCacheMemory::text_address(v15)
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) & 1) == 0)
    {
      shared_cache_search_directories(&v44);
      v16 = (char *)v44;
      v17 = v45;
      if (v44 != v45)
      {
        v38 = a2;
        v18 = (char *)v44 + 16;
        v19 = v15;
        do
        {
          v20 = (char *)*((_QWORD *)v18 - 2);
          v22 = *(_QWORD *)(a1 + 112);
          v21 = *(_QWORD *)(a1 + 120);
          v15 = (CSCppDyldSplitSharedCacheMemory *)operator new();
          std::string::basic_string[abi:ne180100]<0>(__p, v20);
          CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v15, v22, __p, 0, v21);
          if (SBYTE7(v43) < 0)
            operator delete(__p[0]);
          (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v19 + 8))(v19);
          if (CSCppDyldSplitSharedCacheMemory::text_address(v15))
            break;
          v19 = v15;
          v23 = v18 == v17;
          v18 += 16;
        }
        while (!v23);
        v16 = (char *)v44;
        a2 = v38;
      }
      if (v16)
      {
        v45 = v16;
        operator delete(v16);
      }
    }
    v24 = CSCppDyldSplitSharedCacheMemory::text_address(v15);
    if (v24)
    {
      v25 = 28;
      while (1)
      {
        v26 = (_DWORD *)(*(uint64_t (**)(CSCppDyldSplitSharedCacheMemory *, _QWORD, unint64_t))(*(_QWORD *)v15 + 32))(v15, v24, v25);
        v28 = (uint64_t)v26;
        if (!v26 || *v26 != -17958194)
          break;
        v25 = v26[5] + 28;
        if (v25 <= v27)
        {
          v29 = CSCppDyldSplitSharedCacheMemory::file_range_for_memory_range((uint64_t)v15, v24, 1uLL, 0);
          v39 = v30;
          v31 = v29;
          v32 = *(_QWORD *)(a1 + 120);
          v33 = operator new();
          TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(v33, (uint64_t)v15, v24, v28, v32, 0, 0, v34, v31 | ((unint64_t)v39 << 32), 1);
          v35 = v46;
          v46 = v33;
          if (v35)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          if (uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(v33, a1))
          {
            if (v40 && a4)
            {
              _do_obtain_stripped_locals_data<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, &v46, v15, (_QWORD *)a2, a4, __p);
              v36 = v43;
              *v40 = *(_OWORD *)__p;
              v40[1] = v36;
            }
            v37 = atomic_load((unsigned int *)(a2 + 12));
            atomic_store(v37 | 8, (unsigned int *)(a2 + 12));
            v41 = v15;
            TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, (uint64_t *)&v41);
            result = (uint64_t)v41;
            v41 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            *a5 = v46;
            return result;
          }
          break;
        }
      }
    }
    *a5 = 0;
    (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v15 + 8))(v15);
    result = v46;
    if (v46)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  }
  return result;
}

void sub_1B40F05C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v26 = *(_QWORD *)(v24 - 88);
  *(_QWORD *)(v24 - 88) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_compute_slide_between_symbol_owner_and_header<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char **v7;
  const char **v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  const char **v13;
  const char **v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a3 + 32);
  v5 = *(_QWORD *)(a3 + 40);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 24) ? *(const char **)(v4 + 24) : *(const char **)(v4 + 16);
      if (strncmp(v6, "__PAGEZERO", 0xBuLL))
        break;
      v4 += 32;
      if (v4 == v5)
        return 0;
    }
  }
  if (v4 == v5)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::extract_segments_and_sections(a2, (void **)&v13, 0);
  v7 = v13;
  v8 = v14;
  v9 = v13;
  if (v13 != v14)
  {
    v10 = *(const char **)(v4 + 16);
    v9 = v13;
    while (strcmp(v10, v9[2]))
    {
      v9 += 4;
      if (v9 == v8)
        goto LABEL_18;
    }
  }
  if (v9 != v8)
  {
    v11 = (*(_DWORD *)v4 - *(_DWORD *)v9);
    if (!v7)
      return v11;
    goto LABEL_19;
  }
LABEL_18:
  v11 = 0;
  if (v7)
  {
LABEL_19:
    v14 = v7;
    operator delete(v7);
  }
  return v11;
}

void sub_1B40F07E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CSCppDsymData::~CSCppDsymData(result);
    JUMPOUT(0x1B5E36940);
  }
  return result;
}

void CSCppDsymData::~CSCppDsymData(void **this)
{
  void **v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t dsym_data_for_symbol_owner(const CSCppSymbolOwner *a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  const CFUUIDBytes *v6;
  const char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  stat v16;
  CSCppDsymData *v17;
  char __dst[1024];
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE v25[1024];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v6 = (const CFUUIDBytes *)((char *)a1 + 16);
  if (!UUID::is_null((UUID *)((uint8_t *)a1 + 1))
    && (*((_BYTE *)a1 + 109) & 1) != 0
    && (v12 = (const char *)*((_QWORD *)a1 + 15)) != 0
    && (make_dsym_data_from_path_and_uuid(v12, v6, (uint64_t)&v19), v26))
  {
    v11 = operator new();
    v13 = v22;
    *(_QWORD *)(v11 + 16) = v20;
    *(_OWORD *)v11 = v19;
    v19 = 0uLL;
    *(_OWORD *)(v11 + 24) = v21;
    *(_QWORD *)(v11 + 40) = v13;
    v20 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_OWORD *)(v11 + 48) = v23;
    *(_QWORD *)(v11 + 64) = v24;
    v24 = 0;
    v23 = 0uLL;
    memcpy((void *)(v11 + 72), v25, 0x400uLL);
    if (v26)
      CSCppDsymData::~CSCppDsymData((void **)&v19);
  }
  else
  {
    v7 = (const char *)*((_QWORD *)a1 + 15);
    v8 = utility_basename(v7);
    strlcpy(__dst, v7, 0x3FFuLL);
    v9 = strlen(__dst);
    if (v9 < 1)
    {
      v11 = 0;
    }
    else
    {
      v10 = &__dst[v9];
      while (1)
      {
        strlcat(__dst, ".dSYM/Contents/Resources/DWARF/", 0x3FFuLL);
        strlcat(__dst, v8, 0x3FFuLL);
        if (!stat(__dst, &v16) && (__int16)v16.st_mode < 0)
        {
          make_dsym_data_from_path_and_uuid(__dst, v6, (uint64_t)&v19);
          if (v26)
            break;
        }
        if (v10 > __dst)
        {
          while (*v10 != 47)
          {
            if (--v10 <= __dst)
            {
              v10 = __dst;
              break;
            }
          }
        }
        *v10 = 0;
        if (v10 <= __dst)
        {
          v11 = (uint64_t)v17;
          goto LABEL_23;
        }
      }
      v11 = operator new();
      v14 = v22;
      *(_QWORD *)(v11 + 16) = v20;
      *(_OWORD *)v11 = v19;
      v19 = 0uLL;
      *(_OWORD *)(v11 + 24) = v21;
      *(_QWORD *)(v11 + 40) = v14;
      v20 = 0;
      v21 = 0uLL;
      v22 = 0;
      *(_OWORD *)(v11 + 48) = v23;
      *(_QWORD *)(v11 + 64) = v24;
      v24 = 0;
      v23 = 0uLL;
      memcpy((void *)(v11 + 72), v25, 0x400uLL);
      if (v17)
      {
        CSCppDsymData::~CSCppDsymData((void **)v17);
        MEMORY[0x1B5E36940]();
      }
      if (v26)
        CSCppDsymData::~CSCppDsymData((void **)&v19);
    }
LABEL_23:
    free(v8);
  }
  return v11;
}

void sub_1B40F0BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  if (LOBYTE(STACK[0x8E8]))
    CSCppDsymData::~CSCppDsymData((void **)&STACK[0x4A0]);
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](&a28, 0);
  _Unwind_Resume(a1);
}

uint64_t find_uuid_and_create_file_memory(char *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  DIR *v8;
  BOOL v9;
  uint64_t v10;
  dirent *v11;
  int d_type;
  uint64_t file_memory;
  const char *d_name;
  std::string::size_type size;
  std::string *v16;
  char *v17;
  std::string::size_type v18;
  int v19;
  int v20;
  BOOL v21;
  std::string::size_type v22;
  std::string *v23;
  std::string v25;
  DIR *v26;
  char v27;
  char v28;
  char v29;
  std::string __str[42];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  FileOpener::FileOpener((FileOpener *)&v26, a1);
  v8 = v26;
  if (v27)
    v9 = v26 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    while (1)
    {
      v11 = readdir(v8);
      if (!v11)
        goto LABEL_19;
      d_type = v11->d_type;
      if (d_type == 4)
      {
        d_name = v11->d_name;
        if (!strcmp(v11->d_name, ".") || !strcmp(d_name, ".."))
          goto LABEL_18;
        snprintf((char *)__str, 0x400uLL, "%s/%s", a1, d_name);
        file_memory = find_uuid_and_create_file_memory(__str, a2, a3, a4);
      }
      else
      {
        if (d_type != 8)
          goto LABEL_18;
        snprintf((char *)__str, 0x400uLL, "%s/%s", a1, v11->d_name);
        file_memory = new_file_memory_for_uuid_and_arch((char *)__str, a2, a3, a4);
      }
      v10 = file_memory;
      if (file_memory)
        goto LABEL_46;
LABEL_18:
      v8 = v26;
    }
  }
  if (v28)
  {
    v10 = new_file_memory_for_uuid_and_arch(a1, a2, a3, a4);
  }
  else
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(__str, a1);
    size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = __str;
    else
      v16 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str[0].__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_43;
    v17 = (char *)&v16[-1].__r_.__value_.__r.__words[2] + 7;
    v18 = size;
    do
    {
      if (!v18)
      {
        v18 = -1;
        break;
      }
      v19 = v17[v18--];
    }
    while (v19 != 46);
    while (size)
    {
      v20 = v17[size--];
      if (v20 == 47)
        goto LABEL_34;
    }
    size = -1;
LABEL_34:
    if (v18 == -1)
      goto LABEL_43;
    v21 = __CFADD__(size, 1);
    v22 = size + 1;
    if (!v21 && v22 >= v18)
      goto LABEL_43;
    std::string::basic_string(&v25, __str, 0, v18, (std::allocator<char> *)&v29);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v25;
    else
      v23 = (std::string *)v25.__r_.__value_.__r.__words[0];
    v10 = find_uuid_and_create_file_memory(v23, a2, a3, a4);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (!v10)
LABEL_43:
      v10 = 0;
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
  }
LABEL_46:
  FileOpener::~FileOpener(&v26);
  return v10;
}

void sub_1B40F0EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, DIR *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a17 < 0)
    operator delete(__p);
  if (a44 < 0)
    operator delete(a39);
  FileOpener::~FileOpener(&a18);
  _Unwind_Resume(a1);
}

uint64_t new_file_memory_for_uuid_and_arch(char *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  unint64_t v17;

  v17 = a3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3002000000;
  v12 = __Block_byref_object_copy__44;
  v13 = __Block_byref_object_dispose__45;
  v14 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___Z33new_file_memory_for_uuid_and_archPKcRK4UUID17CSCppArchitecturej_block_invoke;
  v7[3] = &unk_1E6775718;
  v7[6] = a2;
  v7[7] = a3;
  v7[4] = v15;
  v7[5] = &v9;
  v8 = a4;
  iterate_symbol_owners_from_memory(0, a1, 0, 0, 0, &v17, 0, 0, (uint64_t)v7);
  v4 = v10[5];
  v10[5] = 0;
  _Block_object_dispose(&v9, 8);
  v5 = v14;
  v14 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Block_object_dispose(v15, 8);
  return v4;
}

void FileOpener::FileOpener(FileOpener *this, const char *a2)
{
  unsigned int v4;

  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = 0;
  if (!stat(a2, (stat *)((char *)this + 16)))
  {
    v4 = *((unsigned __int16 *)this + 10);
    *((_BYTE *)this + 8) = (v4 & 0x4000) != 0;
    *((_BYTE *)this + 9) = v4 >> 15;
    if ((v4 & 0x4000) != 0)
      *(_QWORD *)this = opendir(a2);
  }
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__45(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___Z33new_file_memory_for_uuid_and_archPKcRK4UUID17CSCppArchitecturej_block_invoke(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
    return result;
  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  result = UUID::is_null((UUID *)(*(_QWORD *)a2 + 16));
  if ((result & 1) != 0)
  {
    result = (uint64_t)(v3 + 7);
    if (v3[7] == v4)
    {
      *(_BYTE *)(*(_QWORD *)(v3[4] + 8) + 24) = 1;
    }
    else
    {
      if (*(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 40))
        return result;
      result = CSCppArchitecture::matches((CSCppArchitecture *)result, v4);
      if (!(_DWORD)result)
        return result;
    }
    goto LABEL_15;
  }
  v5 = (uint64_t *)v3[6];
  v7 = *v5;
  v6 = v5[1];
  if (v7 != *(_QWORD *)(*(_QWORD *)a2 + 16) || v6 != *(_QWORD *)(*(_QWORD *)a2 + 24))
  {
    *(_BYTE *)(*(_QWORD *)(v3[4] + 8) + 24) = 0;
    return result;
  }
  result = CSCppArchitecture::matches((CSCppArchitecture *)(v3 + 7), v4);
  *(_BYTE *)(*(_QWORD *)(v3[4] + 8) + 24) = result;
  if ((result & 1) != 0)
  {
LABEL_15:
    v9 = *(_QWORD *)(v3[5] + 8);
    v10 = *(_QWORD *)(v9 + 40);
    if (v10)
    {
      *(_QWORD *)(v9 + 40) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    v11 = *(_QWORD *)(*(_QWORD *)a2 + 152);
    v12 = *(_QWORD *)(*(_QWORD *)a2 + 120);
    v13 = operator new();
    CSCppFileMemory::CSCppFileMemory(v13, v12, v11);
    v14 = *(_QWORD *)(v3[5] + 8);
    result = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1B40F1284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x1093C406FCC8570);
  _Unwind_Resume(a1);
}

void FileOpener::~FileOpener(DIR **this)
{
  DIR *v1;

  v1 = *this;
  if (v1)
    closedir(v1);
}

void get_symbol_owner_on_disk_memory<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  const char *v10;
  size_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  void *__p[2];
  char v21;
  void *__dst[2];
  char v23;

  v4 = *(_DWORD *)(a1 + 108);
  *a2 = 0;
  if ((v4 & 0x4000) != 0)
  {
    v8 = *(char **)(a1 + 120);
    v9 = split_static_library_path(v8);
    v10 = v9;
    if (v9)
    {
      std::string::basic_string[abi:ne180100](__dst, v8, v9 - v8);
      v11 = strlen(v10);
      std::string::basic_string[abi:ne180100](__p, (void *)(v10 + 1), v11 - 2);
      if (*(_QWORD *)(a1 + 160))
      {
        v12 = *(_QWORD *)(a1 + 152);
        v13 = v23;
        v14 = (void **)__dst[0];
        v15 = operator new();
        v16 = v15;
        if (v13 >= 0)
          v17 = __dst;
        else
          v17 = v14;
        CSCppFileMemory::CSCppFileMemory(v15, v17, v12);
      }
      else
      {
        if (v23 >= 0)
          v18 = (char *)__dst;
        else
          v18 = (char *)__dst[0];
        if (v21 >= 0)
          v19 = (char *)__p;
        else
          v19 = (char *)__p[0];
        v16 = new_memory_for_object_in_archive(v18, v19, *(_DWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), 0, 2);
      }
      *a2 = v16;
      if (v21 < 0)
        operator delete(__p[0]);
      if (v23 < 0)
        operator delete(__dst[0]);
    }
  }
  else
  {
    v5 = *(char **)(a1 + 128);
    if (!v5)
      v5 = *(char **)(a1 + 120);
    if (*(_QWORD *)(a1 + 160))
    {
      v6 = *(_QWORD *)(a1 + 152);
      v7 = operator new();
      CSCppFileMemory::CSCppFileMemory(v7, v5, v6);
      *a2 = v7;
    }
    else
    {
      *a2 = new_file_memory_for_uuid_and_arch(v5, a1 + 16, *(_QWORD *)(a1 + 112), 2);
    }
  }
}

void sub_1B40F147C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  *v20 = 0;
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

uint64_t sod_header_from_task_fault<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CSCppTaskMemory *v14;
  CSCppMachTaskContainer *v15;
  BOOL v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  CSCppTaskMemory *v26;

  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x200000) != 0)
    goto LABEL_12;
  if ((*(_BYTE *)(a1 + 109) & 0x40) != 0)
    goto LABEL_12;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
  if ((result & 1) == 0 && !*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120))
    goto LABEL_12;
  v9 = *(_QWORD **)(a1 + 32);
  v10 = *(_QWORD **)(a1 + 40);
  if (v9 != v10)
  {
    while (!*v9)
    {
      v9 += 4;
      if (v9 == v10)
        goto LABEL_12;
    }
  }
  if (v9 == v10)
  {
LABEL_12:
    *a4 = 0;
    return result;
  }
  v11 = *(unsigned int *)v9;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 120);
  if (v13)
  {
    v14 = (CSCppTaskMemory *)operator new();
    CSCppCoreFileMemory::CSCppCoreFileMemory(v14, v13);
  }
  else
  {
    v15 = (CSCppMachTaskContainer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 56) + 16))(*(_QWORD *)(v12 + 56));
    v16 = !CSCppMachTaskContainer::is_self_task(v15);
    v14 = (CSCppTaskMemory *)operator new();
    CSCppTaskMemory::CSCppTaskMemory(v14, v15, v16);
  }
  v17 = 28;
  do
  {
    v18 = (_DWORD *)(*(uint64_t (**)(CSCppTaskMemory *, uint64_t, unint64_t))(*(_QWORD *)v14 + 32))(v14, v11, v17);
    v20 = (uint64_t)v18;
    if (!v18 || *v18 != -17958194)
    {
      *a4 = 0;
      return (*(uint64_t (**)(CSCppTaskMemory *))(*(_QWORD *)v14 + 8))(v14);
    }
    v17 = v18[5] + 28;
  }
  while (v17 > v19);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_DWORD *)(a1 + 104);
  v23 = operator new();
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(v23, (uint64_t)v14, v11, v20, v21, v22, 0, v24, 0, 0);
  if (!uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(v23, a1))
  {
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    return (*(uint64_t (**)(CSCppTaskMemory *))(*(_QWORD *)v14 + 8))(v14);
  }
  v25 = atomic_load((unsigned int *)(a2 + 12));
  atomic_store(v25 | 2, (unsigned int *)(a2 + 12));
  v26 = v14;
  TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, (uint64_t *)&v26);
  result = (uint64_t)v26;
  v26 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a4 = v23;
  return result;
}

void sub_1B40F1870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_local_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void **v20;

  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775758;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 312) = 1065353216;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_DWORD *)(v8 + 352) = 1065353216;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_BYTE *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(v8 + 448) = 1065353216;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_DWORD *)(v8 + 488) = 1065353216;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, (_QWORD *)v8, 0, 0, &v19);
  v9 = v19;
  if (v19)
  {
    if (a2)
    {
      extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(v19, v8, *a2, a2[1]);
    }
    else
    {
      v10 = *(_BYTE *)(a1 + 81);
      v17 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(v19, v10, (unint64_t *)&v17);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(v9, v8, v17);
    }
    v17 = *(_QWORD *)(v8 + 136);
    v11 = (uint64_t *)v17;
    v18 = *(_OWORD *)(v8 + 144);
    v12 = (uint64_t *)v18;
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v11, v12, v12 - v11);
    v13 = *(_OWORD *)(v8 + 232);
    *(_OWORD *)a1 = v13;
    v14 = *(_QWORD *)(v8 + 248);
    *(_QWORD *)(a1 + 16) = v14;
    *(_OWORD *)a4 = v13;
    *(_QWORD *)(a4 + 16) = v14;
    v20 = (void **)&v17;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v20);
    v15 = v19;
    v19 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40F1B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v16;

  a14 = (void **)&a10;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = a13;
  a13 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_path<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t text_section_data_from_header_for;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  void **v26;
  CSCppDsymData *v27;
  _BYTE v28[24];
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[1024];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775758;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 312) = 1065353216;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_DWORD *)(v8 + 352) = 1065353216;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_BYTE *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(v8 + 448) = 1065353216;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_DWORD *)(v8 + 488) = 1065353216;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  v9 = *(char **)(a3 + 128);
  if (v9 || (v9 = *(char **)(a3 + 120)) != 0)
    v10 = strstr(v9, ".dSYM");
  else
    v10 = 0;
  if ((*(_BYTE *)(a3 + 109) & 1) != 0 || v10)
  {
    v26 = 0;
    v27 = 0;
    make_dsym_data_from_path_and_uuid(v9, (const CFUUIDBytes *)(a3 + 16), (uint64_t)v28);
    if (v34)
    {
      v12 = operator new();
      *(_OWORD *)v12 = *(_OWORD *)v28;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)&v28[16];
      *(_OWORD *)v28 = 0uLL;
      *(_OWORD *)(v12 + 24) = v29;
      *(_QWORD *)(v12 + 40) = v30;
      *(_QWORD *)&v28[16] = 0;
      v29 = 0uLL;
      v30 = 0;
      *(_OWORD *)(v12 + 48) = v31;
      *(_QWORD *)(v12 + 64) = v32;
      v32 = 0;
      v31 = 0uLL;
      memcpy((void *)(v12 + 72), v33, 0x400uLL);
      v13 = (void **)v27;
      v27 = (CSCppDsymData *)v12;
      if (v13)
      {
        CSCppDsymData::~CSCppDsymData(v13);
        MEMORY[0x1B5E36940]();
        v12 = (uint64_t)v27;
      }
      v26 = (void **)v12;
    }
    sod_header_from_debug_symbols<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, (void ***)&v27, (CSCppDsymData **)&v26, &v25);
    v11 = v25;
    if (!v25)
    {
      sod_header_from_colocated_dsym<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, (void ***)&v27, &v26, &v25);
      v11 = v25;
    }
    if (v34)
      CSCppDsymData::~CSCppDsymData((void **)v28);
    v14 = (void **)v27;
    v27 = 0;
    if (v14)
    {
      CSCppDsymData::~CSCppDsymData(v14);
      MEMORY[0x1B5E36940]();
    }
  }
  else
  {
    sod_header_from_on_disk_binary<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, (uint64_t *)v28);
    v11 = *(_QWORD *)v28;
  }
  if (v11
    || (sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, 0, 0, v28), (v11 = *(_QWORD *)v28) != 0))
  {
    std::string::__assign_external((std::string *)(a1 + 56), *(const std::string::value_type **)(v11 + 48));
    v15 = CSCppTextSectionDataDescriptor::_compute_slide_between_symbol_owner_and_header<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v11, a3);
    v16 = v15;
    if (a2)
    {
      v17 = a2[1];
      v18 = *a2 - v15;
      *a2 = v18;
      text_section_data_from_header_for = extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(v11, v8, v18, v17);
    }
    else
    {
      v20 = *(_BYTE *)(a1 + 81);
      *(_QWORD *)v28 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(v11, v20, (unint64_t *)v28);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(v11, v8, *(uint64_t *)v28);
      text_section_data_from_header_for = *(_QWORD *)v28;
    }
    *(_OWORD *)a1 = *(_OWORD *)(v8 + 232);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 248);
    *(_QWORD *)a1 += v16;
    if (*(_BYTE *)(v11 + 80))
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(v11 + 64);
    if (text_section_data_from_header_for)
      v21 = *(unsigned int *)(text_section_data_from_header_for + 48);
    else
      v21 = 0;
    *(_QWORD *)(a1 + 112) = v21;
    *(_QWORD *)v28 = *(_QWORD *)(v8 + 136);
    v22 = *(uint64_t **)v28;
    *(_OWORD *)&v28[8] = *(_OWORD *)(v8 + 144);
    v23 = *(uint64_t **)&v28[8];
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v22, v23, v23 - v22);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
    v27 = (CSCppDsymData *)v28;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40F1FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v6;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, void **);
  if (LOBYTE(STACK[0x468]))
    CSCppDsymData::~CSCppDsymData((void **)va1);
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)va, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_task<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  void **v22;

  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775758;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 312) = 1065353216;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_DWORD *)(v8 + 352) = 1065353216;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_BYTE *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(v8 + 448) = 1065353216;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_DWORD *)(v8 + 488) = 1065353216;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  v21 = 0;
  sod_header_from_task_fault<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, &v21, &v20);
  if (v21)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 16))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
    task_resume(*(_DWORD *)(v9 + 8));
  }
  v10 = v20;
  if (v20)
  {
    if (a2)
    {
      extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(v20, v8, *a2, a2[1]);
    }
    else
    {
      v11 = *(_BYTE *)(a1 + 81);
      v18 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(v20, v11, (unint64_t *)&v18);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(v10, v8, v18);
    }
    v18 = *(_QWORD *)(v8 + 136);
    v12 = (uint64_t *)v18;
    v19 = *(_OWORD *)(v8 + 144);
    v13 = (uint64_t *)v19;
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v12, v13, v13 - v12);
    v14 = *(_OWORD *)(v8 + 232);
    *(_OWORD *)a1 = v14;
    v15 = *(_QWORD *)(v8 + 248);
    *(_QWORD *)(a1 + 16) = v15;
    *(_OWORD *)a4 = v14;
    *(_QWORD *)(a4 + 16) = v15;
    v22 = (void **)&v18;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v22);
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40F22A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v16;

  a14 = (void **)&a9;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = a12;
  a12 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  CSCppDyldSplitSharedCacheMemory *v11;
  __int128 v12;
  uint64_t result;
  CSCppDyldSplitSharedCacheMemory *v14;
  _OWORD v15[2];
  uint64_t v16;

  v10 = *(_QWORD *)(a1 + 112);
  v11 = (CSCppDyldSplitSharedCacheMemory *)operator new();
  CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v11, *MEMORY[0x1E0C83DA0], v10, 0);
  _do_sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, (uint64_t)a2, v11, &v16);
  if (v16)
  {
    if (a3)
    {
      _do_obtain_stripped_locals_data<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, &v16, v11, a2, a4, v15);
      v12 = v15[1];
      *a3 = v15[0];
      a3[1] = v12;
    }
    v14 = v11;
    TRawSymbolOwnerData<Pointer32>::add_memory(a2, (uint64_t *)&v14);
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *a5 = v16;
  }
  else
  {
    *a5 = 0;
    return (*(uint64_t (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v11 + 8))(v11);
  }
  return result;
}

void sub_1B40F2410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  _QWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t *v13;
  uint64_t v14;

  v14 = 0;
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = &off_1E6775898;
  v6 = *(_OWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 24);
  v11 = v6;
  v12[0] = *(_OWORD *)(a1 + 56);
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(a1 + 65);
  v9 = *(_OWORD *)(a1 + 8);
  v13 = &v14;
  _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,TRange<Pointer64>)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(a1, (uint64_t)v8);
  _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2, v14);
  return v14;
}

uint64_t TRawSymbolOwnerData<Pointer64>::_augment_data_to_include_text_section(uint64_t a1, CSCppSymbolOwner *a2)
{
  CSCppSymbolOwnerData::_perform_operation_under_text_section_dclp<TRawSymbolOwnerData<Pointer64>::_augment_data_to_include_text_section(CSCppSymbolOwner *)::{lambda(void)#1}>(a1, a1, a2);
  return a1;
}

uint64_t TRawSymbolOwnerData<Pointer64>::type_id()
{
  return 2;
}

uint64_t TRawSymbolOwnerData<Pointer64>::footprint(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[17];
  v3 = (uint64_t *)a1[18];
  if (v2 == v3)
  {
    v6 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
    while (v2 != v3);
    v6 = v4;
  }
  return v6 + a1[21] + a1[24] + a1[27] - (a1[20] + a1[23] + a1[26]);
}

uint64_t TRawSymbolOwnerData<Pointer64>::dsym_path(uint64_t a1)
{
  return *(_QWORD *)(a1 + 256);
}

uint64_t TRawSymbolOwnerData<Pointer64>::dylib_current_version(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

uint64_t TRawSymbolOwnerData<Pointer64>::dylib_compatibility_version(uint64_t a1)
{
  return *(unsigned int *)(a1 + 268);
}

uint64_t TRawSymbolOwnerData<Pointer64>::version(uint64_t a1)
{
  return *(_QWORD *)(a1 + 272);
}

uint64_t TRawSymbolOwnerData<Pointer64>::is_string_pointer_valid()
{
  return 1;
}

unint64_t TRawSymbolOwnerData<Pointer64>::regions_in_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  _BOOL4 lower_and_upper_bounds_of;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;

  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 168) || a3 == -1)
    return 0;
  v12 = 0;
  v13 = 0;
  lower_and_upper_bounds_of = find_lower_and_upper_bounds_of_range<Pointer64,CSCppSectionRange>(a3, a4 + a3, (_QWORD *)(a1 + 160), &v13, &v12);
  v6 = 0;
  if (lower_and_upper_bounds_of)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v13) >> 3);
    if (a5)
    {
      v10 = a2 | 4;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
        v13 += 24;
      }
      while (v13 < v12);
    }
  }
  return v6;
}

uint64_t TRawSymbolOwnerData<Pointer64>::symbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  if (a3)
  {
    v5 = *(_QWORD *)(a1 + 184);
    v4 = *(_QWORD *)(a1 + 192);
    if (v5 < v4)
    {
      v7 = a2 | 5;
      v8 = *(_QWORD *)(a1 + 184);
      do
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(a3 + 16))(a3, v7, v5);
        v8 += 104;
        v4 = *(_QWORD *)(a1 + 192);
        v5 += 104;
      }
      while (v8 < v4);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 192);
  }
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - *(_QWORD *)(a1 + 184)) >> 3);
}

uint64_t TRawSymbolOwnerData<Pointer64>::symbols_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  TRawSymbolOwnerData<Pointer64>::_initialize_demangled_names_hash_once(a1);
  return TRawSymbolOwnerData<Pointer64>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer64>>>(a1, a2, a3, a4, (_QWORD *)(a1 + 280), (_QWORD *)(a1 + 184), 1);
}

uint64_t TRawSymbolOwnerData<Pointer64>::symbols_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  TRawSymbolOwnerData<Pointer64>::_initialize_mangled_names_hash_once(a1);
  return TRawSymbolOwnerData<Pointer64>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer64>>>(a1, a2, a3, a4, (_QWORD *)(a1 + 320), (_QWORD *)(a1 + 184), 1);
}

uint64_t TRawSymbolOwnerData<Pointer64>::symbol_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  TRawSymbolOwnerData<Pointer64>::_initialize_demangled_names_hash_once(a1);
  return TRawSymbolOwnerData<Pointer64>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer64>>>(a1, a2, a3, a4, (_QWORD *)(a1 + 280), (_QWORD *)(a1 + 184), 0);
}

uint64_t TRawSymbolOwnerData<Pointer64>::symbol_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  TRawSymbolOwnerData<Pointer64>::_initialize_mangled_names_hash_once(a1);
  return TRawSymbolOwnerData<Pointer64>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer64>>>(a1, a2, a3, a4, (_QWORD *)(a1 + 320), (_QWORD *)(a1 + 184), 0);
}

uint64_t TRawSymbolOwnerData<Pointer64>::symbols_in_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;

  if (a3 == -1 || *(_QWORD *)(a1 + 184) == *(_QWORD *)(a1 + 192))
    return 0;
  v10 = 0;
  v11 = 0;
  v7 = 0;
  if (find_lower_and_upper_bounds_of_range<Pointer64,TRawSymbol<Pointer64>>(a3, a4 + a3, (_QWORD *)(a1 + 184), &v11, &v10))
  {
    v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v10 - v11) >> 3);
    if (a5)
    {
      v8 = a2 | 5;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v8);
        v11 += 104;
      }
      while (v11 < v10);
    }
  }
  return v7;
}

uint64_t TRawSymbolOwnerData<Pointer64>::symbol_for_address(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3802000000;
  v9 = __Block_byref_object_copy__2;
  v10 = __Block_byref_object_dispose__2;
  v11 = 0;
  v12 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19TRawSymbolOwnerDataI9Pointer64E18symbol_for_addressEP16CSCppSymbolOwnery_block_invoke;
  v5[3] = &unk_1E6775868;
  v5[4] = &v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 128))(a1, a2, a3, 1, v5);
  v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B40F2A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t TRawSymbolOwnerData<Pointer64>::source_infos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  if (a3)
  {
    v5 = *(_QWORD *)(a1 + 208);
    v4 = *(_QWORD *)(a1 + 216);
    if (v5 < v4)
    {
      v7 = a2 | 6;
      v8 = *(_QWORD *)(a1 + 208);
      do
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(a3 + 16))(a3, v7, v5);
        v8 += 40;
        v4 = *(_QWORD *)(a1 + 216);
        v5 += 40;
      }
      while (v8 < v4);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 216);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *(_QWORD *)(a1 + 208)) >> 3);
}

unint64_t TRawSymbolOwnerData<Pointer64>::source_infos_in_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  _BOOL4 lower_and_upper_bounds_of;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;

  if (*(_QWORD *)(a1 + 208) == *(_QWORD *)(a1 + 216) || a3 == -1)
    return 0;
  v12 = 0;
  v13 = 0;
  lower_and_upper_bounds_of = find_lower_and_upper_bounds_of_range<Pointer64,TRawSourceInfo<Pointer64>>(a3, a4 + a3, (_QWORD *)(a1 + 208), &v13, &v12);
  v6 = 0;
  if (lower_and_upper_bounds_of)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v13) >> 3);
    if (a5)
    {
      v10 = a2 | 6;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
        v13 += 40;
      }
      while (v13 < v12);
    }
  }
  return v6;
}

uint64_t TRawSymbolOwnerData<Pointer64>::source_info_for_address(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26[2];

  result = 0;
  if (a3 != -1)
  {
    v7 = (_QWORD *)a1[26];
    v6 = (_QWORD *)a1[27];
    if (v7 != v6)
    {
      v26[0] = a3;
      v26[1] = 1;
      v9 = (_QWORD *)a1[23];
      v10 = a1[24] - (_QWORD)v9;
      if (v10)
      {
        v11 = 0x4EC4EC4EC4EC4EC5 * (v10 >> 3);
        v12 = (_QWORD *)a1[23];
        do
        {
          v13 = v11 >> 1;
          v14 = &v12[13 * (v11 >> 1)];
          v16 = *v14;
          v15 = v14 + 13;
          v11 += ~(v11 >> 1);
          if (v16 > a3)
            v11 = v13;
          else
            v12 = v15;
        }
        while (v11);
        if (v12 != v9)
        {
          v18 = *(v12 - 13);
          v19 = *(v12 - 12);
          v17 = (uint64_t)(v12 - 13);
          if (a3 - v18 < v19)
          {
            if (TRawSymbol<Pointer64>::find_enclosing_inlined_function(v17, v26))
            {
              v20 = 5;
              return v20 | a2;
            }
            v7 = (_QWORD *)a1[26];
            v6 = (_QWORD *)a1[27];
          }
        }
      }
      if (v6 != v7)
      {
        v21 = 0xCCCCCCCCCCCCCCCDLL * (v6 - v7);
        v6 = v7;
        do
        {
          v22 = v21 >> 1;
          v23 = &v6[5 * (v21 >> 1)];
          v25 = *v23;
          v24 = v23 + 5;
          v21 += ~(v21 >> 1);
          if (v26[0] < v25)
            v21 = v22;
          else
            v6 = v24;
        }
        while (v21);
      }
      if (v6 != v7 && a3 - *(v6 - 5) < *(v6 - 4))
      {
        v20 = 6;
        return v20 | a2;
      }
      return 0;
    }
  }
  return result;
}

uint64_t TRawSymbolOwnerData<Pointer64>::for_each_stack_frame_at_address(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *enclosing_inlined_function;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v33[2];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 136))(a1);
  v10 = v9;
  if (CSIsNull(v8, v9))
    return 0;
  v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  v33[0] = a3;
  v33[1] = 1;
  v12 = (_QWORD *)a1[26];
  v13 = a1[27] - (_QWORD)v12;
  if (!v13)
    goto LABEL_14;
  v14 = 0xCCCCCCCCCCCCCCCDLL * (v13 >> 3);
  v15 = (_QWORD *)a1[26];
  do
  {
    v16 = v14 >> 1;
    v17 = &v15[5 * (v14 >> 1)];
    v19 = *v17;
    v18 = v17 + 5;
    v14 += ~(v14 >> 1);
    if (v19 > a3)
      v14 = v16;
    else
      v15 = v18;
  }
  while (v14);
  if (v15 == v12)
  {
LABEL_14:
    v23 = 0;
    if (v11)
      goto LABEL_15;
    return 0;
  }
  v20 = *(v15 - 5);
  v22 = *(v15 - 4);
  v21 = v15 - 5;
  if (a3 - v20 >= v22)
    v23 = 0;
  else
    v23 = v21;
  if (!v11)
    return 0;
LABEL_15:
  v25 = a2 | 5;
  v26 = a2 | 6;
  enclosing_inlined_function = (unsigned int *)TRawSymbol<Pointer64>::find_enclosing_inlined_function(v11, v33);
  if (enclosing_inlined_function)
  {
    v28 = enclosing_inlined_function;
    v24 = 1;
    do
    {
      v29 = atomic_load(v28 + 7);
      if ((v29 & 0x80000000) != 0 && *((_QWORD *)v28 + 6))
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unsigned int *))(a4 + 16))(a4, v25, v11, v25, v28);
      else
        (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(a4 + 16))(a4, v25, v11, 0, 0);
      v11 = (unint64_t)v28;
      ++v24;
      v28 = (unsigned int *)TRawSymbol<Pointer64>::find_enclosing_inlined_function((uint64_t)v28, v33);
    }
    while (v28);
  }
  else
  {
    v24 = 1;
  }
  if (v23)
    v30 = v26;
  else
    v30 = 0;
  if (v23)
    v31 = v23;
  else
    v31 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD *))(a4 + 16))(a4, v25, v11, v30, v31);
  return v24;
}

uint64_t TRawSymbolOwnerData<Pointer64>::for_each_inline_range_for_symbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TRawSymbolOwnerData<Pointer64>::for_each_inline_range_for_symbol_at_depth(a1, a2, a3, a4, -1, a5);
}

uint64_t TRawSymbolOwnerData<Pointer64>::for_each_inline_range_for_symbol_at_depth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[5];
  int v19;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  __p = 0;
  v13 = 0;
  v14 = 0;
  v6 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = 0;
  v11 = v6;
  v9[0] = &v10;
  v9[1] = a6;
  v18[0] = (uint64_t)&v15;
  v18[1] = (uint64_t)&__p;
  v18[2] = a2;
  v18[3] = (uint64_t)v9;
  v18[4] = (uint64_t)&v11;
  v19 = a5;
  _ZZZN19TRawSymbolOwnerDataI9Pointer64E41for_each_inline_range_for_symbol_at_depthEP16CSCppSymbolOwner10_CSTypeRefiU13block_pointerFv8_CSRangePS4_S6_mEENKUlP10TRawSymbolIS0_EE_clESB_ENKUlSB_RT_E_clISF_EEvSB_SE_(v18, a4 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)v18);
  v7 = v10;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  return v7;
}

void sub_1B40F2F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t TRawSymbolOwnerData<Pointer64>::raw_bytes_for_range(_QWORD *a1, os_unfair_lock_s **a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1[29];
  v5 = a3 - v4;
  if (a3 >= v4 && a4 + a3 <= a1[30] + v4 && (v6 = a1[31]) != 0)
    return v6 + v5;
  else
    return TRawSymbolOwnerData<Pointer64>::_raw_bytes_for_range_on_demand_fault((uint64_t)a1, a2, a3, a4);
}

uint64_t TRawSymbolOwnerData<Pointer64>::optional_symbolicator_flags(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 412))
    return a1 + 408;
  else
    return 0;
}

uint64_t TRawSymbolOwnerData<Pointer64>::relinked_subdylib_path_for_address(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;

  result = 0;
  if (a3 != -1)
  {
    v6 = *(_QWORD **)(a1 + 496);
    v5 = *(_QWORD **)(a1 + 504);
    if (v6 != v5)
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * (v5 - v6);
      v8 = v6;
      do
      {
        v9 = v7 >> 1;
        v10 = &v8[3 * (v7 >> 1)];
        v12 = *v10;
        v11 = v10 + 3;
        v7 += ~(v7 >> 1);
        if (v12 > a3)
          v7 = v9;
        else
          v8 = v11;
      }
      while (v7);
      if (v8 == v6)
        v13 = 0;
      else
        v13 = -1;
      if (a3 - v8[3 * v13] >= v8[3 * v13 + 1])
        return 0;
      else
        return v8[3 * v13 + 2];
    }
  }
  return result;
}

const char *TRawSymbolOwnerData<Pointer64>::relinked_subdylib_name_for_address(uint64_t a1)
{
  const char *result;

  result = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  if (result)
    return filename_from_path(result);
  return result;
}

uint64_t TRawSymbolOwnerData<Pointer64>::unique_relinked_subdylib_count(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  int v7;

  v5 = 0u;
  v6 = 0u;
  v7 = 1065353216;
  v1 = *(_QWORD *)(a1 + 496);
  v2 = *(_QWORD *)(a1 + 504);
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    do
    {
      std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::__emplace_unique_key_args<char const*,char const* const&>((uint64_t)&v5, (_QWORD *)(v1 + 16), (_QWORD *)(v1 + 16));
      v1 += 24;
    }
    while (v1 != v2);
    v3 = *((_QWORD *)&v6 + 1);
  }
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v5);
  return v3;
}

void sub_1B40F30B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer64>::get_description(std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::pointer i;
  char *v5;
  void **v6;
  std::string::size_type v7;
  void *__p[2];
  unsigned __int8 v9;

  CSCppSymbolOwnerData::get_description(a1, a2);
  v5 = (char *)a1[5].__r_.__value_.__r.__words[2];
  for (i = a1[6].__r_.__value_.__l.__data_; v5 != i; v5 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v5 + 48))(__p);
    if ((v9 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v7 = v9;
    else
      v7 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v6, v7);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
}

void sub_1B40F315C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void CSCppSymbolOwnerData::_perform_operation_under_text_section_dclp<TRawSymbolOwnerData<Pointer64>::_augment_data_to_include_text_section(CSCppSymbolOwner *)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, CSCppSymbolOwner *a3)
{
  unsigned int *v3;
  __int16 v4;
  std::mutex *v7;
  __int16 v8;

  v3 = (unsigned int *)(a1 + 12);
  v4 = atomic_load((unsigned int *)(a1 + 12));
  if ((v4 & 0x1000) == 0)
  {
    v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    v8 = atomic_load(v3);
    if ((v8 & 0x1000) == 0)
      TRawSymbolOwnerData<Pointer64>::_update_text_section_data_locked(a2, a3);
    std::mutex::unlock(v7);
  }
}

void sub_1B40F31F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer64>::_initialize_demangled_names_hash_once(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 360);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TRawSymbolOwnerData<Pointer64>::_initialize_demangled_names_hash_once(void)::{lambda(void)#1} &&>>);
  }
}

_QWORD ***std::__call_once_param<std::tuple<TRawSymbolOwnerData<Pointer64>::_initialize_demangled_names_hash_once(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>(_QWORD ***result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  char *v6;

  v1 = (_QWORD *)***result;
  v2 = v1[23];
  if (v2 != v1[24])
  {
    v3 = v1[23];
    do
    {
      v4 = atomic_load((unsigned int *)(v3 + 28));
      if ((v4 & 0x1C000) != 0)
      {
        v6 = (char *)TRawSymbol<Pointer64>::_resolve_name(v3, 0, 0);
        v5 = -991146299 * ((unint64_t)(v2 - v1[23]) >> 3);
        result = (_QWORD ***)std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__emplace_multi<char const*,unsigned int>(v1 + 35, &v6, &v5);
      }
      v3 += 104;
      v2 += 104;
    }
    while (v3 != v1[24]);
  }
  return result;
}

uint64_t TRawSymbolOwnerData<Pointer64>::_invoke_callback_on_name_match<std::unordered_multimap<std::string_view,unsigned int>,std::vector<TRawSymbol<Pointer64>>>(int a1, uint64_t a2, char *__s, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7)
{
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  const void *v20[2];

  v20[0] = __s;
  v20[1] = (const void *)strlen(__s);
  v12 = std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__equal_range_multi<std::string_view>(a5, v20);
  v14 = v12;
  v15 = v13;
  if (a7)
  {
    if (v12 != v13)
    {
      v16 = 0;
      v17 = a2 | 5;
      do
      {
        if (a4)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, v17, *a6 + 104 * *((unsigned int *)v14 + 8));
        ++v16;
        v14 = (uint64_t **)*v14;
      }
      while (v14 != v15);
      return v16;
    }
    return 0;
  }
  if (v12 == v13)
    return 0;
  v16 = 0;
  v18 = v12;
  do
  {
    ++v16;
    v18 = (uint64_t **)*v18;
  }
  while (v18 != v13);
  if (v16 == 1)
  {
    if (a4)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a2 | 5, *a6 + 104 * *((unsigned int *)v12 + 8));
    return 1;
  }
  return v16;
}

void TRawSymbolOwnerData<Pointer64>::_initialize_mangled_names_hash_once(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 368);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TRawSymbolOwnerData<Pointer64>::_initialize_mangled_names_hash_once(void)::{lambda(void)#1} &&>>);
  }
}

_QWORD ***std::__call_once_param<std::tuple<TRawSymbolOwnerData<Pointer64>::_initialize_mangled_names_hash_once(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>(_QWORD ***result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  char *v6;

  v1 = (_QWORD *)***result;
  v2 = v1[23];
  if (v2 != v1[24])
  {
    v3 = v1[23];
    do
    {
      v4 = atomic_load((unsigned int *)(v3 + 28));
      if ((v4 & 0x1C000) != 0)
      {
        v6 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(v3);
        v5 = -991146299 * ((unint64_t)(v2 - v1[23]) >> 3);
        result = (_QWORD ***)std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__emplace_multi<char const*,unsigned int>(v1 + 40, &v6, &v5);
      }
      v3 += 104;
      v2 += 104;
    }
    while (v3 != v1[24]);
  }
  return result;
}

BOOL find_lower_and_upper_bounds_of_range<Pointer64,TRawSymbol<Pointer64>>(unint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;

  v5 = (_QWORD *)*a3;
  v6 = a3[1] - *a3;
  if (v6)
  {
    v7 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 3);
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[13 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 13;
      v7 += ~(v7 >> 1);
      if (v11 > a1)
        v7 = v8;
      else
        v5 = v10;
    }
    while (v7);
  }
  v12 = v5;
  do
  {
    v13 = v12;
    v14 = v5;
    *a4 = v12;
    if (v12 == (_QWORD *)*a3)
      break;
    v15 = *(v12 - 12);
    v12 -= 13;
    v5 -= 13;
  }
  while (a1 - *(v13 - 13) < v15);
  v16 = (_QWORD *)a3[1];
  if (v13 != v16)
  {
    v17 = 0x4EC4EC4EC4EC4EC5 * (v16 - v14);
    do
    {
      v18 = v17 >> 1;
      v19 = &v13[13 * (v17 >> 1)];
      v21 = *v19;
      v20 = v19 + 13;
      v17 += ~(v17 >> 1);
      if (a2 - 1 < v21)
        v17 = v18;
      else
        v13 = v20;
    }
    while (v17);
  }
  *a5 = v13;
  return *a4 != (_QWORD)v13;
}

uint64_t ___ZN19TRawSymbolOwnerDataI9Pointer64E18symbol_for_addressEP16CSCppSymbolOwnery_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  uint64_t v4;

  v3 = atomic_load((unsigned int *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 28));
  if ((v3 & 0x200) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_QWORD *)(v4 + 40) = a2;
    *(_QWORD *)(v4 + 48) = a3;
  }
  return result;
}

BOOL find_lower_and_upper_bounds_of_range<Pointer64,TRawSourceInfo<Pointer64>>(unint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;

  v5 = (_QWORD *)*a3;
  v6 = a3[1] - *a3;
  if (v6)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[5 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 5;
      v7 += ~(v7 >> 1);
      if (v11 > a1)
        v7 = v8;
      else
        v5 = v10;
    }
    while (v7);
  }
  v12 = v5;
  do
  {
    v13 = v12;
    v14 = v5;
    *a4 = v12;
    if (v12 == (_QWORD *)*a3)
      break;
    v15 = *(v12 - 4);
    v12 -= 5;
    v5 -= 5;
  }
  while (a1 - *(v13 - 5) < v15);
  v16 = (_QWORD *)a3[1];
  if (v13 != v16)
  {
    v17 = 0xCCCCCCCCCCCCCCCDLL * (v16 - v14);
    do
    {
      v18 = v17 >> 1;
      v19 = &v13[5 * (v17 >> 1)];
      v21 = *v19;
      v20 = v19 + 5;
      v17 += ~(v17 >> 1);
      if (a2 - 1 < v21)
        v17 = v18;
      else
        v13 = v20;
    }
    while (v17);
  }
  *a5 = v13;
  return *a4 != (_QWORD)v13;
}

_QWORD *TRawSymbol<Pointer64>::find_enclosing_inlined_function(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD **)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72) - (_QWORD)v2;
  if (!v3)
    return 0;
  v4 = 0x4EC4EC4EC4EC4EC5 * (v3 >> 3);
  v5 = *(_QWORD **)(a1 + 64);
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[13 * (v4 >> 1)];
    v9 = *v7;
    v8 = v7 + 13;
    v4 += ~(v4 >> 1);
    if (*a2 < v9)
      v4 = v6;
    else
      v5 = v8;
  }
  while (v4);
  if (v5 == v2)
    return 0;
  v10 = *(v5 - 13);
  if (*a2 < v10)
    return 0;
  if (a2[1] + *a2 <= *(v5 - 12) + v10)
    return v5 - 13;
  return 0;
}

void _ZZZN19TRawSymbolOwnerDataI9Pointer64E41for_each_inline_range_for_symbol_at_depthEP16CSCppSymbolOwner10_CSTypeRefiU13block_pointerFv8_CSRangePS4_S6_mEENKUlP10TRawSymbolIS0_EE_clESB_ENKUlSB_RT_E_clISF_EEvSB_SE_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (*((_DWORD *)a1 + 10) == -1 && *(_QWORD *)a2 > *(_QWORD *)a1[4])
  {
    v6 = a1[3];
    (*(void (**)(void))(*(_QWORD *)(v6 + 8) + 16))();
    ++**(_QWORD **)v6;
    *(_QWORD *)a1[4] = *(_QWORD *)a2;
  }
  v7 = *a1;
  v8 = a1[2] | 5;
  v9 = *(uint64_t **)(*a1 + 8);
  v10 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v9 >= v10)
  {
    v12 = *(uint64_t **)v7;
    v13 = ((uint64_t)v9 - *(_QWORD *)v7) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      goto LABEL_54;
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(*a1 + 16, v16);
      v12 = *(uint64_t **)v7;
      v9 = *(uint64_t **)(v7 + 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)&v17[16 * v13];
    v19 = &v17[16 * v16];
    *v18 = v8;
    v18[1] = a2;
    v11 = v18 + 2;
    if (v9 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 2;
        v9 -= 2;
      }
      while (v9 != v12);
      v12 = *(uint64_t **)v7;
    }
    *(_QWORD *)v7 = v18;
    *(_QWORD *)(v7 + 8) = v11;
    *(_QWORD *)(v7 + 16) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v9 = v8;
    v9[1] = a2;
    v11 = v9 + 2;
  }
  *(_QWORD *)(v7 + 8) = v11;
  v20 = a1[1];
  v21 = atomic_load((unsigned int *)(a2 + 28));
  if ((v21 & 0x80000000) != 0)
  {
    v22 = 5;
    if (!*(_QWORD *)(a2 + 48))
      v22 = 0;
  }
  else
  {
    v22 = 0;
  }
  v23 = v22 | a1[2];
  v24 = *(_QWORD *)(v20 + 16);
  v25 = *(uint64_t **)(v20 + 8);
  if ((unint64_t)v25 < v24)
  {
    *v25 = v23;
    v25[1] = a2;
    v26 = v25 + 2;
    goto LABEL_40;
  }
  v27 = *(uint64_t **)v20;
  v28 = ((uint64_t)v25 - *(_QWORD *)v20) >> 4;
  v29 = v28 + 1;
  if ((unint64_t)(v28 + 1) >> 60)
LABEL_54:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v30 = v24 - (_QWORD)v27;
  if (v30 >> 3 > v29)
    v29 = v30 >> 3;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
    v31 = 0xFFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (v31)
  {
    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v20 + 16, v31);
    v27 = *(uint64_t **)v20;
    v25 = *(uint64_t **)(v20 + 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = (uint64_t *)&v32[16 * v28];
  v34 = &v32[16 * v31];
  *v33 = v23;
  v33[1] = a2;
  v26 = v33 + 2;
  if (v25 != v27)
  {
    do
    {
      *((_OWORD *)v33 - 1) = *((_OWORD *)v25 - 1);
      v33 -= 2;
      v25 -= 2;
    }
    while (v25 != v27);
    v27 = *(uint64_t **)v20;
  }
  *(_QWORD *)v20 = v33;
  *(_QWORD *)(v20 + 8) = v26;
  *(_QWORD *)(v20 + 16) = v34;
  if (v27)
    operator delete(v27);
LABEL_40:
  *(_QWORD *)(v20 + 8) = v26;
  if (*((int *)a1 + 10) + 1 == (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4)
  {
    v35 = a1[3];
    CSSymbolGetRange(a1[2] | 5, a2);
    (*(void (**)(void))(*(_QWORD *)(v35 + 8) + 16))();
    ++**(_QWORD **)v35;
  }
  v36 = *(_QWORD *)(a2 + 64);
  v37 = *(_QWORD *)(a2 + 72);
  if (v36 == v37)
  {
    v38 = *(_QWORD *)a2;
    v39 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    do
    {
      _ZZZN19TRawSymbolOwnerDataI9Pointer64E41for_each_inline_range_for_symbol_at_depthEP16CSCppSymbolOwner10_CSTypeRefiU13block_pointerFv8_CSRangePS4_S6_mEENKUlP10TRawSymbolIS0_EE_clESB_ENKUlSB_RT_E_clISF_EEvSB_SE_(a3, v36, a3);
      v36 += 104;
    }
    while (v36 != v37);
    v38 = *(_QWORD *)(v36 - 104);
    v39 = *(_QWORD *)(v36 - 96);
  }
  v40 = v39 + v38;
  if (*((_DWORD *)a1 + 10) == -1)
  {
    if (v40 <= *(_QWORD *)a1[4])
    {
      v40 = *(_QWORD *)a1[4];
    }
    else
    {
      v42 = a1[3];
      (*(void (**)(void))(*(_QWORD *)(v42 + 8) + 16))();
      ++**(_QWORD **)v42;
      *(_QWORD *)a1[4] = v40;
      if (*((_DWORD *)a1 + 10) != -1)
        goto LABEL_47;
    }
    if (*(_QWORD *)(a2 + 8) + *(_QWORD *)a2 > v40)
    {
      v43 = a1[3];
      (*(void (**)(void))(*(_QWORD *)(v43 + 8) + 16))();
      ++**(_QWORD **)v43;
      *(_QWORD *)a1[4] = *(_QWORD *)(a2 + 8) + *(_QWORD *)a2;
    }
  }
LABEL_47:
  v41 = a1[1];
  *(_QWORD *)(*a1 + 8) -= 16;
  *(_QWORD *)(v41 + 8) -= 16;
}

void _do_sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(uint64_t a1@<X0>, uint64_t a2@<X1>, CSCppDyldSplitSharedCacheMemory *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  CSCppDyldSharedCache *v11;
  uint64_t v12;
  CSCppDyldSharedCache *v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8)) & 0x400000) == 0
    && (*(_DWORD *)(a1 + 108) & 0x4200) == 0x200)
  {
    v8 = *(uint64_t **)(a1 + 32);
    v9 = *(uint64_t **)(a1 + 40);
    if (v8 != v9)
    {
      while (!*v8)
      {
        v8 += 4;
        if (v8 == v9)
          goto LABEL_19;
      }
    }
    if (v8 != v9)
    {
      v30 = 0;
      v10 = *v8;
      v30 = *v8;
      v11 = (CSCppDyldSharedCache *)CSCppDyldSplitSharedCacheMemory::primary_shared_cache(a3);
      v12 = *((_QWORD *)a3 + 4);
      if (v12)
      {
        v13 = v11;
        v14 = *(_QWORD *)(v12 + 32);
        if (v14 && v11 != 0)
        {
          v16 = (_QWORD *)CSCppDyldSharedCache::dsc_uuid(v11);
          v17 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
          if (v16)
          {
            if (v17)
            {
              if (*v16 == *v17 && v16[1] == v17[1])
              {
                v19 = CSCppDyldSharedCache::text_segment_range(v13);
                if ((*(_BYTE *)(a1 + 109) & 4) == 0)
                {
                  v10 += v14 - v19;
                  v30 = v10;
                }
                if (CSCppDyldSplitSharedCacheMemory::contains_address(a3, v10))
                {
                  v20 = 32;
                  while (1)
                  {
                    v21 = (_DWORD *)(*(uint64_t (**)(CSCppDyldSplitSharedCacheMemory *, uint64_t, unint64_t))(*(_QWORD *)a3 + 32))(a3, v10, v20);
                    if (!v21 || *v21 != -17958193)
                      break;
                    v20 = v21[5] + 32;
                    if (v20 <= v22)
                    {
                      *(_QWORD *)buf = v21;
                      v28 = *(_QWORD *)(a1 + 120);
                      v23 = *(_DWORD *)(a1 + 104);
                      v26 = 0;
                      v27 = v23;
                      std::make_unique[abi:ne180100]<TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>,CSCppDyldSplitSharedCacheMemory &,unsigned long &,TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> const*&,char const*,unsigned int,int>((uint64_t)a3, &v30, (uint64_t *)buf, &v28, &v27, &v26, &v29);
                      if (uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(v29, a1))
                      {
                        v24 = atomic_load((unsigned int *)(a2 + 12));
                        atomic_store(v24 | 4, (unsigned int *)(a2 + 12));
                        *a4 = v29;
                      }
                      else
                      {
                        *a4 = 0;
                        v25 = v29;
                        v29 = 0;
                        if (v25)
                          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
                      }
                      return;
                    }
                  }
                }
                else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = v10;
                  _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Dyld shared cache binary not found in dsc text segment: %p\n", buf, 0xCu);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  *a4 = 0;
}

void sub_1B40F3E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t _do_obtain_stripped_locals_data<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, CSCppDyldSplitSharedCacheMemory *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CSCppDyldSharedCache *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  if (!a5
    || (result = uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(*a2, result), (result & 1) == 0)
    || ((v11 = *((_QWORD *)a3 + 4)) == 0 ? (v12 = 0) : (v12 = *(_QWORD *)(v11 + 32)),
        (v13 = *(_QWORD *)(*a2 + 16),
         v14 = (CSCppDyldSharedCache *)CSCppDyldSplitSharedCacheMemory::local_symbols_shared_cache(a3),
         result = CSCppDyldSplitSharedCacheMemory::local_symbols_shared_cache_path(a3),
         !v14)
     || (v15 = (char *)result) == 0))
  {
    *(_QWORD *)&v20 = -1;
    *((_QWORD *)&v20 + 1) = -1;
    *a6 = v20;
    a6[1] = v20;
    return result;
  }
  if (verify_inmemory_and_ondisk_uuid(v14, (char *)result) && CSCppDyldSharedCache::has_stripped_locals_data(v14))
  {
    v16 = CSCppDyldSharedCache::local_symbols_range(v14);
    v18 = v17;
    v19 = operator new();
    CSCppFileMemory::CSCppFileMemory(v19, v15, v16, v18);
  }
  else
  {
    v19 = 0;
  }
  result = CSCppDyldSharedCache::local_symbols_range(v14);
  if (!v19)
    goto LABEL_21;
  if (!v21)
    goto LABEL_21;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, result, v21);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v22;
  if (!v22)
    goto LABEL_21;
  v25 = v19;
  TRawSymbolOwnerData<Pointer32>::add_memory(a4, &v25);
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = CSCppDyldSharedCache::stripped_locals_data_for ((uint64_t)v14, v13 - v12, *(unsigned int **)a5, (uint64_t)a6);
  if ((result & 1) == 0)
  {
    v19 = 0;
LABEL_21:
    *(_QWORD *)&v24 = -1;
    *((_QWORD *)&v24 + 1) = -1;
    *a6 = v24;
    a6[1] = v24;
    if (v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return result;
}

void sub_1B40F3FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x1093C406FCC8570);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>,CSCppDyldSplitSharedCacheMemory &,unsigned long &,TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> const*&,char const*,unsigned int,int>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int *a5@<X4>, int *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  __int128 v21;
  char v22;

  v14 = operator new();
  v15 = *a2;
  v16 = *a3;
  v17 = *a4;
  v18 = *a5;
  v19 = *a6;
  LOBYTE(v21) = 0;
  v22 = 0;
  result = TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(v14, a1, v15, v16, v17, v18, v19, &v21);
  *a7 = v14;
  return result;
}

void sub_1B40F40DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x10F1C40E5D9F5EBLL);
  _Unwind_Resume(a1);
}

BOOL uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t *v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  char *v18;
  _BYTE *v19;
  uint64_t v20;

  v2 = 0;
  if (a1 && a2)
  {
    v5 = (_QWORD *)(a2 + 16);
    if (UUID::is_null((UUID *)(a2 + 16)))
    {
      v6 = *(_DWORD *)(a2 + 104);
      if (v6 && (v7 = *(_DWORD *)(a1 + 40)) != 0 && v7 != v6)
      {
        return 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections(a1, (void **)&v18, 0);
        v10 = v18;
        v12 = *(char **)(a2 + 32);
        v11 = *(char **)(a2 + 40);
        if (v19 - v18 == v11 - v12)
        {
          v13 = v18 + 16;
          while (1)
          {
            v14 = (const char *)*((_QWORD *)v13 + 1);
            if (!v14)
              v14 = *(const char **)v13;
            v15 = (const char *)*((_QWORD *)v12 + 3);
            v16 = v15;
            if (!v15)
              v16 = (const char *)*((_QWORD *)v12 + 2);
            if (strncmp(v14, v16, 0x10uLL))
              break;
            if (*((_QWORD *)v13 - 1) != *((_QWORD *)v12 + 1))
            {
              if (!v15)
                v15 = (const char *)*((_QWORD *)v12 + 2);
              if (!is_relocation_skippable(v15))
                break;
            }
            v12 += 32;
            v13 += 32;
            if (v12 == v11)
            {
              v2 = 1;
              goto LABEL_28;
            }
          }
        }
        v2 = 0;
LABEL_28:
        if (v10)
        {
          v19 = v10;
          operator delete(v10);
        }
      }
    }
    else
    {
      v8 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::uuid(*(_QWORD *)(a1 + 24));
      return *v5 == *v8 && *(_QWORD *)(a2 + 24) == v8[1];
    }
  }
  return v2;
}

void sub_1B40F4244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, __int128 *a8)
{
  __int128 v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_1E6775898;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a5;
  *(_DWORD *)(a1 + 56) = a7;
  *(_BYTE *)(a1 + 60) = 0;
  v9 = *a8;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a8 + 2);
  *(_OWORD *)(a1 + 64) = v9;
  v10 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a4, "__TEXT");
  if (v10)
  {
    v11 = v10;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 16) - *(_QWORD *)(v11 + 24);
    else
      *(_BYTE *)(a1 + 60) = *(_QWORD *)(v11 + 24) != 0;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 12) == 10)
    *(_DWORD *)(a1 + 56) |= extract_dsym_version<SizeAndEndianness<Pointer64,LittleEndian>>(a1);
  return a1;
}

unint64_t TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(uint64_t a1, const char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 20);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = a1;
  v9 = a1 + 32 + v3;
  v10 = a1 + 32;
  do
  {
    v4 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v7);
    v5 = v4;
  }
  while (v4 && (*(_DWORD *)v4 != 25 || strncmp(a2, (const char *)(v4 + 8), 0xFuLL)));
  return v5;
}

unint64_t extract_dsym_version<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1)
{
  unint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  result = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__TEXT");
  if (result)
  {
    v2 = *(unsigned int *)(result + 64);
    if ((_DWORD)v2)
    {
      v3 = (uint64_t *)(result + 112);
      while (1)
      {
        v4 = *v3;
        v3 += 10;
        if (v4)
          break;
        if (!--v2)
          return 0x8000000;
      }
      return 0x10000000;
    }
    else
    {
      return 0x8000000;
    }
  }
  return result;
}

void TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::~TExtendedMachOHeader()
{
  JUMPOUT(0x1B5E36940);
}

void TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  CSCppNamedRange *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  CSCppNamedRange *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  void (*v72)(_QWORD *, char *);
  void *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  CSCppNamedRange *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned int *)(v6 + 20);
  v87 = *(_DWORD *)(v6 + 16);
  v88 = v6;
  v89 = v6 + 32 + v7;
  v90 = v6 + 32;
  v8 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v87);
  if (!v8)
    return;
  v9 = 0;
  v10 = 0;
  do
  {
    if (*(_DWORD *)v8 == 25 && *(_QWORD *)(v8 + 32))
    {
      ++v9;
      v10 += *(_DWORD *)(v8 + 64);
    }
    v8 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v87);
  }
  while (v8);
  if (!v9)
    return;
  if (a2)
    std::vector<CSCppSegmentRange>::reserve(a2, v9);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 12);
  if (v11 == 9)
  {
    v14 = 2;
    if (!a3)
      goto LABEL_45;
  }
  else if (v11 == 10)
  {
    v12 = *(_DWORD *)(a1 + 56);
    if ((v12 & 0x38000000) == 0x8000000)
      v13 = 2;
    else
      v13 = 1;
    if ((v12 & 0x38000000) != 0)
      v14 = v13;
    else
      v14 = 4;
    if (!a3)
      goto LABEL_45;
  }
  else
  {
    v14 = 1;
    if (!a3)
      goto LABEL_45;
  }
  if (v14 == 1)
  {
    v18 = v10;
  }
  else
  {
    if (v14 != 2)
    {
      v15 = *(_QWORD *)(a3 + 16);
      v16 = *(_QWORD *)(a3 + 8);
      if (v16 >= v15)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a3) >> 3);
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_101:
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a3) >> 3);
        v21 = 2 * v20;
        if (2 * v20 <= v19 + 1)
          v21 = v19 + 1;
        if (v20 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v21;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(a3 + 16, v22);
          v25 = v24;
        }
        else
        {
          v23 = 0;
          v25 = 0;
        }
        v26 = &v23[24 * v19];
        *(_OWORD *)v26 = xmmword_1B41A83B0;
        v27 = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)"UNIVERSE", (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
        v28 = &v23[24 * v25];
        *((_QWORD *)v26 + 2) = v27;
        v17 = v26 + 24;
        v30 = *(char **)a3;
        v29 = *(char **)(a3 + 8);
        if (v29 != *(char **)a3)
        {
          do
          {
            v31 = *(_OWORD *)(v29 - 24);
            *((_QWORD *)v26 - 1) = *((_QWORD *)v29 - 1);
            *(_OWORD *)(v26 - 24) = v31;
            v26 -= 24;
            v29 -= 24;
          }
          while (v29 != v30);
          v29 = *(char **)a3;
        }
        *(_QWORD *)a3 = v26;
        *(_QWORD *)(a3 + 8) = v17;
        *(_QWORD *)(a3 + 16) = v28;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_OWORD *)v16 = xmmword_1B41A83B0;
        *(_QWORD *)(v16 + 16) = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)"UNIVERSE", (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
        v17 = (char *)(v16 + 24);
        *(_QWORD *)(a3 + 8) = v17;
      }
      *(_QWORD *)(a3 + 8) = v17;
      goto LABEL_45;
    }
    v18 = v9;
  }
  std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve((void **)a3, v18);
LABEL_45:
  v32 = *(_QWORD *)(a1 + 24);
  v33 = *(unsigned int *)(v32 + 20);
  v87 = *(_DWORD *)(v32 + 16);
  v88 = v32;
  v89 = v32 + 32 + v33;
  v90 = v32 + 32;
  v34 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v87);
  if (v34)
  {
    v35 = v34;
    do
    {
      if (*(_DWORD *)v35 == 25)
      {
        v36 = *(_QWORD *)(v35 + 32);
        if (v36)
        {
          v37 = (CSCppNamedRange *)(v35 + 8);
          if (strcmp((const char *)(v35 + 8), "__LINKINFO"))
          {
            if (strncmp((const char *)(v35 + 8), "__PLK", 5uLL) && strncmp((const char *)(v35 + 8), "__PRELINK", 9uLL))
            {
              v38 = *(_QWORD *)(a1 + 32);
              if (!strncmp((const char *)(v35 + 8), "__PAGEZERO", 0xBuLL)
                || (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 26) & 0x20) == 0
                && !strncmp((const char *)(v35 + 8), "__UNIXSTACK", 0xCuLL))
              {
                v38 = 0;
              }
              v39 = *(_QWORD *)(v35 + 24);
              v40 = v39 + v38;
              if (a2)
              {
                v81 = v39 + v38;
                v86 = v36;
                v85 = (CSCppNamedRange *)(v35 + 8);
                std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char const*>(a2, &v81, &v86, &v85);
              }
              if (a3)
              {
                if (v14 == 2)
                {
                  v45 = *(_QWORD *)(v35 + 32);
                  v46 = *(_QWORD *)(v35 + 24) + v38;
                  v48 = *(_QWORD **)(a3 + 8);
                  v47 = *(_QWORD *)(a3 + 16);
                  if ((unint64_t)v48 >= v47)
                  {
                    v50 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *(_QWORD *)a3) >> 3);
                    v51 = v50 + 1;
                    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_101;
                    v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *(_QWORD *)a3) >> 3);
                    if (2 * v52 > v51)
                      v51 = 2 * v52;
                    if (v52 >= 0x555555555555555)
                      v53 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v53 = v51;
                    if (v53)
                    {
                      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(a3 + 16, v53);
                      v70 = v55;
                    }
                    else
                    {
                      v54 = 0;
                      v70 = 0;
                    }
                    v60 = v54;
                    v61 = &v54[24 * v50];
                    *(_QWORD *)v61 = v46;
                    *((_QWORD *)v61 + 1) = v45;
                    *((_QWORD *)v61 + 2) = CSCppNamedRange::unique_macho_string(v37, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
                    v63 = *(char **)a3;
                    v62 = *(char **)(a3 + 8);
                    v64 = v61;
                    if (v62 == *(char **)a3)
                    {
                      v65 = v70;
                    }
                    else
                    {
                      v65 = v70;
                      do
                      {
                        v66 = *(_OWORD *)(v62 - 24);
                        *((_QWORD *)v64 - 1) = *((_QWORD *)v62 - 1);
                        *(_OWORD *)(v64 - 24) = v66;
                        v64 -= 24;
                        v62 -= 24;
                      }
                      while (v62 != v63);
                      v62 = *(char **)a3;
                    }
                    v49 = v61 + 24;
                    *(_QWORD *)a3 = v64;
                    *(_QWORD *)(a3 + 8) = v61 + 24;
                    *(_QWORD *)(a3 + 16) = &v60[24 * v65];
                    if (v62)
                      operator delete(v62);
                    v14 = 2;
                  }
                  else
                  {
                    *v48 = v46;
                    v48[1] = v45;
                    v48[2] = CSCppNamedRange::unique_macho_string(v37, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
                    v49 = v48 + 3;
                    *(_QWORD *)(a3 + 8) = v48 + 3;
                  }
                  *(_QWORD *)(a3 + 8) = v49;
                }
                else if (v14 == 1)
                {
                  v81 = 0;
                  v82 = &v81;
                  v83 = 0x2000000000;
                  v84 = -1;
                  v71[0] = MEMORY[0x1E0C809B0];
                  v71[1] = 0x40000000;
                  v72 = ___ZNK20TExtendedMachOHeaderI17SizeAndEndiannessI9Pointer6412LittleEndianEE29extract_segments_and_sectionsEPNSt3__16vectorI17CSCppSegmentRangeNS5_9allocatorIS7_EEEEPNS6_I17CSCppSectionRangeNS8_ISC_EEEE_block_invoke;
                  v73 = &unk_1E67758C0;
                  v74 = &v81;
                  v75 = a1;
                  v76 = v38;
                  v77 = v40;
                  v78 = v36;
                  v79 = v35;
                  v80 = a3;
                  v41 = *(unsigned int *)(v35 + 64);
                  LOBYTE(v86) = 0;
                  if ((_DWORD)v41)
                  {
                    v42 = v35 + 72;
                    v43 = 1;
                    do
                    {
                      ((void (*)(_QWORD *, unint64_t, uint64_t *))v72)(v71, v42, &v86);
                      if ((_BYTE)v86)
                        v44 = 1;
                      else
                        v44 = v43 >= v41;
                      ++v43;
                      v42 += 80;
                    }
                    while (!v44);
                  }
                  v14 = 1;
                  if (!strcmp((const char *)(v35 + 8), "__TEXT"))
                  {
                    v56 = v82[3];
                    if (v56 != -1)
                    {
                      v57 = *(_QWORD *)(v35 + 24);
                      v58 = v56 > v57;
                      v59 = (CSCppNamedRange *)(v56 - v57);
                      if (v58)
                      {
                        v86 = v57 + v38;
                        v85 = v59;
                        std::vector<CSCppSectionRange>::emplace_back<unsigned long long,unsigned long long,char const(&)[12],decltype(nullptr)>(a3, &v86, (uint64_t *)&v85, (CSCppNamedRange *)"MACH_HEADER");
                      }
                    }
                  }
                  _Block_object_dispose(&v81, 8);
                }
              }
            }
          }
        }
      }
      v35 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v87);
    }
    while (v35);
  }
  if (a3)
  {
    v67 = *(unint64_t **)(a3 + 8);
    v68 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v67 - *(_QWORD *)a3) >> 3));
    if (v67 == *(unint64_t **)a3)
      v69 = 0;
    else
      v69 = v68;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(*(_QWORD *)a3, v67, (uint64_t)&v81, v69, 1);
  }
}

void sub_1B40F4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZNK20TExtendedMachOHeaderI17SizeAndEndiannessI9Pointer6412LittleEndianEE29extract_segments_and_sectionsEPNSt3__16vectorI17CSCppSegmentRangeNS5_9allocatorIS7_EEEEPNS6_I17CSCppSectionRangeNS8_ISC_EEEE_block_invoke(_QWORD *a1, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 4);
  v5 = a1[5];
  v6 = *(_QWORD *)(a1[4] + 8);
  if (*(_QWORD *)(v6 + 24) < v4)
    v4 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v4;
  v7 = *((_QWORD *)a2 + 5);
  v8 = a1[7];
  v9 = a1[6] + *((_QWORD *)a2 + 4);
  if (v9 >= v8 && v7 + v9 <= a1[8] + v8)
  {
    if (v7)
    {
      v14 = (void **)a1[10];
      v15 = (unint64_t *)v14[1];
      v16 = (unint64_t)v14[2];
      if ((unint64_t)v15 >= v16)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (_BYTE *)*v14) >> 3);
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)*v14) >> 3);
        v20 = 2 * v19;
        if (2 * v19 <= v18 + 1)
          v20 = v18 + 1;
        if (v19 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(v14 + 2), v21);
          v24 = v23;
        }
        else
        {
          v22 = 0;
          v24 = 0;
        }
        v25 = &v22[24 * v18];
        *(_QWORD *)v25 = v9;
        *((_QWORD *)v25 + 1) = v7;
        *((_QWORD *)v25 + 2) = CSCppNamedRange::unique_macho_string((CSCppNamedRange *)(a2 + 16), (CSCppNamedRange *)a2, (const char *)0x10);
        v17 = v25 + 24;
        v27 = (char *)*v14;
        v26 = (char *)v14[1];
        if (v26 != *v14)
        {
          do
          {
            v28 = *(_OWORD *)(v26 - 24);
            *((_QWORD *)v25 - 1) = *((_QWORD *)v26 - 1);
            *(_OWORD *)(v25 - 24) = v28;
            v25 -= 24;
            v26 -= 24;
          }
          while (v26 != v27);
          v26 = (char *)*v14;
        }
        *v14 = v25;
        v14[1] = v17;
        v14[2] = &v22[24 * v24];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v15 = v9;
        v15[1] = v7;
        v15[2] = (unint64_t)CSCppNamedRange::unique_macho_string((CSCppNamedRange *)(a2 + 16), (CSCppNamedRange *)a2, (const char *)0x10);
        v17 = v15 + 3;
        v14[1] = v15 + 3;
      }
      v14[1] = v17;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(v5 + 48);
      v11 = v7 + v9;
      v12 = a1[9] + 8;
      v13 = a1[8] + v8;
      *(_DWORD *)buf = 136317698;
      v30 = v10;
      v31 = 1040;
      v32 = 16;
      v33 = 2080;
      v34 = a2 + 16;
      v35 = 1040;
      v36 = 16;
      v37 = 2080;
      v38 = a2;
      v39 = 2048;
      v40 = v9;
      v41 = 2048;
      v42 = v7 + v9;
      v43 = 1040;
      v44 = 16;
      v45 = 2080;
      v46 = v12;
      v47 = 2048;
      v48 = v8;
      v49 = 2048;
      v50 = v13;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[header: %s] Ignoring '%.16s %.16s' section [%#llx-%#llx] not contained in '%.16s' segment range [%#llx-%#llx]\n", buf, 0x64u);
      v8 = a1[7];
    }
    else
    {
      v11 = v7 + v9;
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[header: %s] Ignoring '%.16s %.16s' section [%#llx-%#llx] not contained in '%.16s' segment range [%#llx-%#llx]\n", *(const char **)(v5 + 48), a2 + 16, a2, v9, v11, (const char *)(a1[9] + 8), v8, a1[8] + v8);
  }
}

void sub_1B40F4D80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CSCppSectionRange>::emplace_back<unsigned long long,unsigned long long,char const(&)[12],decltype(nullptr)>(uint64_t a1, _QWORD *a2, uint64_t *a3, CSCppNamedRange *this)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
  {
    v7 = std::vector<CSCppSectionRange>::__emplace_back_slow_path<unsigned long long,unsigned long long,char const(&)[12],decltype(nullptr)>((void **)a1, a2, a3, this);
  }
  else
  {
    v6 = *a3;
    *v5 = *a2;
    v5[1] = v6;
    v5[2] = CSCppNamedRange::unique_macho_string(this, 0, (const char *)0x10);
    v7 = v5 + 3;
    *(_QWORD *)(a1 + 8) = v5 + 3;
  }
  *(_QWORD *)(a1 + 8) = v7;
  return v7 - 3;
}

void sub_1B40F4E04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CSCppSectionRange>::__emplace_back_slow_path<unsigned long long,unsigned long long,char const(&)[12],decltype(nullptr)>(void **a1, _QWORD *a2, uint64_t *a3, CSCppNamedRange *a4)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v5 = (char *)*a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x555555555555555)
    v13 = 0xAAAAAAAAAAAAAAALL;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = *a3;
  v18 = &v14[24 * v6];
  *(_QWORD *)v18 = *a2;
  *((_QWORD *)v18 + 1) = v17;
  *((_QWORD *)v18 + 2) = CSCppNamedRange::unique_macho_string(a4, 0, (const char *)0x10);
  v19 = v18 + 24;
  v21 = (char *)*a1;
  v20 = (char *)a1[1];
  if (v20 != *a1)
  {
    do
    {
      v22 = *(_OWORD *)(v20 - 24);
      *((_QWORD *)v18 - 1) = *((_QWORD *)v20 - 1);
      *(_OWORD *)(v18 - 24) = v22;
      v18 -= 24;
      v20 -= 24;
    }
    while (v20 != v21);
    v20 = (char *)*a1;
  }
  *a1 = v18;
  a1[1] = v19;
  a1[2] = &v14[24 * v16];
  if (v20)
    operator delete(v20);
  return v19;
}

void sub_1B40F4F44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::uuid(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = a1;
  v6 = a1 + 32 + v1;
  v7 = a1 + 32;
  while (1)
  {
    v2 = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4);
    if (!v2)
      break;
    if (*v2 == 27)
      return (uint64_t *)(v2 + 2);
  }
  return UUID::null_uuid(0);
}

unint64_t _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,TRange<Pointer64>)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(v3 + 20);
  v8 = *(_DWORD *)(v3 + 16);
  v9 = v3;
  v10 = v3 + 32 + v4;
  v12 = 0;
  v13 = 0;
  v11 = v3 + 32;
  while (1)
  {
    result = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v8);
    if (!result)
      break;
    v6 = *(_QWORD *)(result + 40);
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 48) + *(_QWORD *)(result + 32);
      if (*(_QWORD *)a2 >= v7 && *(_QWORD *)(a2 + 8) + *(_QWORD *)a2 <= v7 + v6)
      {
        **(_QWORD **)(a2 + 104) = result;
        return result;
      }
    }
  }
  return result;
}

uint64_t _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (a3)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 8);
    *(_QWORD *)(a2 + 232) = *(_QWORD *)(result + 32) + *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 240) = *(_QWORD *)(a3 + 40);
    if ((*(_BYTE *)(a3 + 64) & 1) != 0)
    {
      result = 0;
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
      {
        v7 = *(_QWORD *)(v5 + 32) + *(_QWORD *)(a3 + 32);
      }
      else if ((*(_BYTE *)(v5 + 58) & 8) != 0)
      {
        v8 = *(_QWORD *)(v5 + 64);
        if (!*(_BYTE *)(v5 + 80))
          v8 = 0;
        v7 = *(_QWORD *)(v5 + 16) - v8 + *(unsigned int *)(a3 + 48);
      }
      else
      {
        v7 = *(_QWORD *)(v5 + 16) + *(unsigned int *)(a3 + 48);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, v7, *(_QWORD *)(a2 + 240));
    }
    *(_QWORD *)(a2 + 248) = result;
    v9 = atomic_load((unsigned int *)(a2 + 12));
    atomic_store(v9 | 0x1000, (unsigned int *)(a2 + 12));
  }
  else
  {
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
  }
  return result;
}

unint64_t TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section(uint64_t a1)
{
  unsigned int v2;
  unsigned int i;
  unint64_t result;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 32);
  for (i = *(_DWORD *)(a1 + 36); v2 >= i; i = *(_DWORD *)(a1 + 36))
  {
    result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command(a1);
    if (!result)
      return result;
    if (*(_DWORD *)result == 25)
    {
      if (*(_QWORD *)(result + 32))
      {
        *(_QWORD *)(a1 + 40) = result + 72;
        *(_DWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(result + 64);
      }
    }
    v2 = *(_DWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 32) = v2 + 1;
  return v5 + 80 * v2;
}

unint64_t _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(uint64_t a1, unsigned __int8 a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(v5 + 20);
  v13 = *(_DWORD *)(v5 + 16);
  v14 = v5;
  v15 = v5 + 32 + v6;
  v17 = 0;
  v18 = 0;
  v16 = v5 + 32;
  result = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v13);
  if (result)
  {
    v8 = result;
    while (1)
    {
      if (*(_QWORD *)(v8 + 40))
      {
        v9 = strcmp((const char *)(v8 + 16), "__TEXT") || strcmp((const char *)v8, "__text") != 0;
        result = strcmp((const char *)(v8 + 16), "__TEXT_EXEC");
        if ((_DWORD)result)
        {
          v10 = 1;
        }
        else
        {
          result = strcmp((const char *)v8, "__text");
          v10 = (_DWORD)result != 0;
        }
        if (*a3)
          v11 = 1;
        else
          v11 = v9;
        v12 = a2;
        if ((v11 & 1) == 0)
        {
          *a3 = v8;
          if (!a2)
            return result;
          v12 = 1;
        }
        if (!v12)
          v10 = 1;
        if (!v10)
          break;
      }
      result = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v13);
      v8 = result;
      if (!result)
        return result;
    }
    *a3 = v8;
  }
  return result;
}

uint64_t sod_header_from_debug_symbols<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void ***a3@<X2>, CSCppDsymData **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  void **v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  char v26;

  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x10180000) != 0)
    goto LABEL_17;
  if ((*(_BYTE *)(a1 + 109) & 0x40) != 0)
    goto LABEL_17;
  result = (uint64_t)*a4;
  if (!*a4)
  {
    v11 = (void **)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0);
    std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](a3, v11);
    result = (uint64_t)*a3;
    *a4 = (CSCppDsymData *)*a3;
    if (!result)
      goto LABEL_17;
  }
  result = (uint64_t)CSCppDsymData::binary_path((CSCppDsymData *)result);
  if (!result
    || (v12 = (char *)CSCppDsymData::binary_path(*a4),
        (result = find_uuid_and_create_file_memory(v12, a1 + 16, *(_QWORD *)(a1 + 112), 2)) == 0))
  {
LABEL_17:
    *a5 = 0;
    return result;
  }
  v13 = result;
  v14 = 32;
  do
  {
    v15 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v13 + 32))(v13, 0, v14);
    v17 = (uint64_t)v15;
    if (!v15 || *v15 != -17958193)
    {
      *a5 = 0;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    v14 = v15[5] + 32;
  }
  while (v14 > v16);
  v18 = (_QWORD *)(v13 + 64);
  if (*(char *)(v13 + 87) < 0)
    v18 = (_QWORD *)*v18;
  v19 = *(_DWORD *)(v13 + 56);
  v20 = *(_QWORD *)(v13 + 48);
  v21 = *(_QWORD *)(v13 + 32);
  v22 = operator new();
  *(_QWORD *)&v25 = v20;
  *((_QWORD *)&v25 + 1) = v21;
  v26 = 1;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(v22, v13, 0, v17, (uint64_t)v18, v19, 0, &v25);
  if (!uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(v22, a1))
  {
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v23 = atomic_load((unsigned int *)(a2 + 12));
  atomic_store(v23 | 0x41, (unsigned int *)(a2 + 12));
  v24 = v13;
  TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, &v24);
  result = v24;
  v24 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a5 = v22;
  return result;
}

void sub_1B40F54D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

void sod_header_from_colocated_dsym<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(uint64_t a1@<X0>, uint64_t a2@<X1>, void ***a3@<X2>, void ***a4@<X3>, uint64_t *a5@<X8>)
{
  void **v10;
  void **v11;
  std::string *p_str;
  std::string::size_type size;
  uint64_t v14;
  __int128 *v15;
  unsigned __int8 *v16;
  std::string *v17;
  std::string *v18;
  uint64_t v19;
  int v20;
  int v21;
  std::string::size_type v22;
  std::string::size_type v24;
  std::string *v25;
  uint64_t file_memory;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  std::string __str;
  __int128 v41;
  char v42;
  unsigned __int8 v43;

  if ((CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8)) & 0x8180000) != 0
    || (*(_BYTE *)(a1 + 109) & 0x40) != 0
    || (v10 = *a4) == 0
    && (v11 = (void **)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0),
        std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](a3, v11),
        v10 = *a3,
        *a4 = *a3,
        !v10))
  {
    *a5 = 0;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)v10 + 72);
  std::string::basic_string[abi:ne180100]<0>(&v41, ".dSYM");
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v14 = v43;
  if ((v43 & 0x80u) == 0)
    v15 = &v41;
  else
    v15 = (__int128 *)v41;
  if ((v43 & 0x80u) != 0)
    v14 = *((_QWORD *)&v41 + 1);
  v16 = (unsigned __int8 *)p_str + size;
  if (size && v14)
  {
    v17 = p_str;
    v18 = (std::string *)((char *)p_str + size);
    do
    {
      if (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
      {
        v19 = 1;
        while (v14 != v19)
        {
          if ((unsigned __int8 *)((char *)v17 + v19) == v16)
            goto LABEL_31;
          v20 = v17->__r_.__value_.__s.__data_[v19];
          v21 = *((unsigned __int8 *)v15 + v19++);
          if (v20 != v21)
            goto LABEL_20;
        }
        v18 = v17;
      }
LABEL_20:
      v17 = (std::string *)((char *)v17 + 1);
    }
    while (v17 != (std::string *)v16);
  }
  else
  {
    v18 = (std::string *)((char *)p_str + size);
  }
LABEL_31:
  v22 = (char *)v18 - (char *)p_str;
  if (v18 != (std::string *)v16 || v14 == 0)
    v24 = v22;
  else
    v24 = -1;
  if ((char)v43 < 0)
    operator delete((void *)v41);
  if (v24 == -1)
  {
    *a5 = 0;
    goto LABEL_60;
  }
  std::string::basic_string(&v39, &__str, 0, v24, (std::allocator<char> *)&v41);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v39;
  else
    v25 = (std::string *)v39.__r_.__value_.__r.__words[0];
  file_memory = find_uuid_and_create_file_memory((char *)v25, a1 + 16, *(_QWORD *)(a1 + 112), 2);
  if (!file_memory)
  {
    *a5 = 0;
    goto LABEL_58;
  }
  v27 = 32;
  do
  {
    v28 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)file_memory + 32))(file_memory, 0, v27);
    v30 = (uint64_t)v28;
    if (!v28 || *v28 != -17958193)
    {
      *a5 = 0;
LABEL_56:
      (*(void (**)(uint64_t))(*(_QWORD *)file_memory + 8))(file_memory);
      goto LABEL_58;
    }
    v27 = v28[5] + 32;
  }
  while (v27 > v29);
  v31 = (_QWORD *)(file_memory + 64);
  if (*(char *)(file_memory + 87) < 0)
    v31 = (_QWORD *)*v31;
  v32 = *(_DWORD *)(file_memory + 56);
  v33 = *(_QWORD *)(file_memory + 48);
  v34 = *(_QWORD *)(file_memory + 32);
  v35 = operator new();
  *(_QWORD *)&v41 = v33;
  *((_QWORD *)&v41 + 1) = v34;
  v42 = 1;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(v35, file_memory, 0, v30, (uint64_t)v31, v32, 0, &v41);
  if (!uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(v35, a1))
  {
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    goto LABEL_56;
  }
  v36 = atomic_load((unsigned int *)(a2 + 12));
  atomic_store(v36 | 0x21, (unsigned int *)(a2 + 12));
  v38 = file_memory;
  TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, &v38);
  v37 = v38;
  v38 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  *a5 = v35;
LABEL_58:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
LABEL_60:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1B40F5880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sod_header_from_on_disk_binary<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;

  if ((CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8)) & 0x100000) != 0
    || (v6 = *(_DWORD *)(a1 + 108),
        get_symbol_owner_on_disk_memory<SizeAndEndianness<Pointer64,LittleEndian>>(a1, &v26),
        (v7 = v26) == 0))
  {
    *a3 = 0;
  }
  else
  {
    v8 = v6 & 0x80000;
    v9 = 32;
    do
    {
      v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v7 + 32))(v7, 0, v9);
      v12 = (uint64_t)v10;
      if (!v10 || *v10 != -17958193)
      {
        v16 = 0;
LABEL_13:
        v17 = 0;
        goto LABEL_14;
      }
      v9 = v10[5] + 32;
    }
    while (v9 > v11);
    if ((*(_BYTE *)(a1 + 109) & 0x40) != 0)
    {
      v24 = *(_QWORD *)(a1 + 120);
      v8 |= 0x4000u;
      v15 = (int *)(a1 + 104);
      v14 = v26;
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 128);
      if (!v13)
        v13 = *(_QWORD *)(a1 + 120);
      v24 = v13;
      v14 = v26;
      v15 = (int *)(v26 + 56);
    }
    v19 = *v15;
    v20 = *(_QWORD *)(v14 + 48);
    v21 = *(_QWORD *)(v14 + 32);
    v17 = operator new();
    *(_QWORD *)&v27 = v20;
    *((_QWORD *)&v27 + 1) = v21;
    v28 = 1;
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(v17, v14, 0, v12, v24, v19, v8, &v27);
    if (uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(v17, a1))
    {
      v22 = atomic_load((unsigned int *)(a2 + 12));
      atomic_store(v22 | 1, (unsigned int *)(a2 + 12));
      v25 = v26;
      v26 = 0;
      TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, &v25);
      v23 = v25;
      v25 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v16 = v17;
      goto LABEL_13;
    }
    v16 = 0;
LABEL_14:
    *a3 = v16;
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1B40F5B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CSCppDyldSplitSharedCacheMemory *v15;
  char *v16;
  char *v17;
  char *v18;
  CSCppDyldSplitSharedCacheMemory *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  _OWORD *v39;
  CSCppDyldSplitSharedCacheMemory *v40;
  void *__p[2];
  __int128 v42;
  void *v43;
  char *v44;
  uint64_t v45;

  v45 = 0;
  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x20000000) != 0 || (*(_DWORD *)(a1 + 108) & 0x4200) != 0x200)
  {
    *a5 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
    v12 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 8);
    v13 = *(_QWORD *)(a1 + 112);
    v14 = *(_QWORD *)(a1 + 120);
    v15 = (CSCppDyldSplitSharedCacheMemory *)operator new();
    CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v15, v12, v13, v14);
    v39 = a3;
    if (!CSCppDyldSplitSharedCacheMemory::text_address(v15)
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) & 1) == 0)
    {
      shared_cache_search_directories(&v43);
      v16 = (char *)v43;
      v17 = v44;
      if (v43 != v44)
      {
        v37 = a2;
        v18 = (char *)v43 + 16;
        v19 = v15;
        do
        {
          v20 = (char *)*((_QWORD *)v18 - 2);
          v22 = *(_QWORD *)(a1 + 112);
          v21 = *(_QWORD *)(a1 + 120);
          v15 = (CSCppDyldSplitSharedCacheMemory *)operator new();
          std::string::basic_string[abi:ne180100]<0>(__p, v20);
          CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v15, v22, __p, 0, v21);
          if (SBYTE7(v42) < 0)
            operator delete(__p[0]);
          (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v19 + 8))(v19);
          if (CSCppDyldSplitSharedCacheMemory::text_address(v15))
            break;
          v19 = v15;
          v23 = v18 == v17;
          v18 += 16;
        }
        while (!v23);
        v16 = (char *)v43;
        a2 = v37;
      }
      if (v16)
      {
        v44 = v16;
        operator delete(v16);
      }
    }
    v24 = CSCppDyldSplitSharedCacheMemory::text_address(v15);
    if (v24)
    {
      v25 = 32;
      while (1)
      {
        v26 = (_DWORD *)(*(uint64_t (**)(CSCppDyldSplitSharedCacheMemory *, uint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, v24, v25);
        v28 = (uint64_t)v26;
        if (!v26 || *v26 != -17958193)
          break;
        v25 = v26[5] + 32;
        if (v25 <= v27)
        {
          v29 = CSCppDyldSplitSharedCacheMemory::file_range_for_memory_range((uint64_t)v15, v24, 1uLL, 0);
          v38 = v30;
          v31 = (void *)v29;
          v32 = *(_QWORD *)(a1 + 120);
          v33 = operator new();
          __p[0] = v31;
          __p[1] = v38;
          LOBYTE(v42) = 1;
          TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(v33, (uint64_t)v15, v24, v28, v32, 0, 0, (__int128 *)__p);
          v34 = v45;
          v45 = v33;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          if (uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(v33, a1))
          {
            if (v39 && a4)
            {
              _do_obtain_stripped_locals_data<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, &v45, v15, (_QWORD *)a2, a4, __p);
              v35 = v42;
              *v39 = *(_OWORD *)__p;
              v39[1] = v35;
            }
            v36 = atomic_load((unsigned int *)(a2 + 12));
            atomic_store(v36 | 8, (unsigned int *)(a2 + 12));
            v40 = v15;
            TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, (uint64_t *)&v40);
            result = (uint64_t)v40;
            v40 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            *a5 = v45;
            return result;
          }
          break;
        }
      }
    }
    *a5 = 0;
    (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v15 + 8))(v15);
    result = v45;
    if (v45)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  return result;
}

void sub_1B40F5ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_compute_slide_between_symbol_owner_and_header<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  const char **v7;
  const char **v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  const char **v13;
  const char **v14;
  uint64_t v15;

  v4 = *(_QWORD **)(a3 + 32);
  v5 = *(_QWORD **)(a3 + 40);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = (const char *)(v4[3] ? v4[3] : v4[2]);
      if (strncmp(v6, "__PAGEZERO", 0xBuLL))
        break;
      v4 += 4;
      if (v4 == v5)
        return 0;
    }
  }
  if (v4 == v5)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections(a2, (void **)&v13, 0);
  v7 = v13;
  v8 = v14;
  v9 = v13;
  if (v13 != v14)
  {
    v10 = (const char *)v4[2];
    v9 = v13;
    while (strcmp(v10, v9[2]))
    {
      v9 += 4;
      if (v9 == v8)
        goto LABEL_18;
    }
  }
  if (v9 != v8)
  {
    v11 = *v4 - (_QWORD)*v9;
    if (!v7)
      return v11;
    goto LABEL_19;
  }
LABEL_18:
  v11 = 0;
  if (v7)
  {
LABEL_19:
    v14 = v7;
    operator delete(v7);
  }
  return v11;
}

void sub_1B40F60EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void get_symbol_owner_on_disk_memory<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  const char *v10;
  size_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  void *__p[2];
  char v21;
  void *__dst[2];
  char v23;

  v4 = *(_DWORD *)(a1 + 108);
  *a2 = 0;
  if ((v4 & 0x4000) != 0)
  {
    v8 = *(char **)(a1 + 120);
    v9 = split_static_library_path(v8);
    v10 = v9;
    if (v9)
    {
      std::string::basic_string[abi:ne180100](__dst, v8, v9 - v8);
      v11 = strlen(v10);
      std::string::basic_string[abi:ne180100](__p, (void *)(v10 + 1), v11 - 2);
      if (*(_QWORD *)(a1 + 160))
      {
        v12 = *(_QWORD *)(a1 + 152);
        v13 = v23;
        v14 = (void **)__dst[0];
        v15 = operator new();
        v16 = v15;
        if (v13 >= 0)
          v17 = __dst;
        else
          v17 = v14;
        CSCppFileMemory::CSCppFileMemory(v15, v17, v12);
      }
      else
      {
        if (v23 >= 0)
          v18 = (char *)__dst;
        else
          v18 = (char *)__dst[0];
        if (v21 >= 0)
          v19 = (char *)__p;
        else
          v19 = (char *)__p[0];
        v16 = new_memory_for_object_in_archive(v18, v19, *(_DWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), 0, 2);
      }
      *a2 = v16;
      if (v21 < 0)
        operator delete(__p[0]);
      if (v23 < 0)
        operator delete(__dst[0]);
    }
  }
  else
  {
    v5 = *(char **)(a1 + 128);
    if (!v5)
      v5 = *(char **)(a1 + 120);
    if (*(_QWORD *)(a1 + 160))
    {
      v6 = *(_QWORD *)(a1 + 152);
      v7 = operator new();
      CSCppFileMemory::CSCppFileMemory(v7, v5, v6);
      *a2 = v7;
    }
    else
    {
      *a2 = new_file_memory_for_uuid_and_arch(v5, a1 + 16, *(_QWORD *)(a1 + 112), 2);
    }
  }
}

void sub_1B40F62AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  *v20 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sod_header_from_task_fault<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CSCppTaskMemory *v14;
  CSCppMachTaskContainer *v15;
  BOOL v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  CSCppTaskMemory *v25;
  __int128 v26;
  char v27;

  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x200000) != 0)
    goto LABEL_12;
  if ((*(_BYTE *)(a1 + 109) & 0x40) != 0)
    goto LABEL_12;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
  if ((result & 1) == 0 && !*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120))
    goto LABEL_12;
  v9 = *(uint64_t **)(a1 + 32);
  v10 = *(uint64_t **)(a1 + 40);
  if (v9 != v10)
  {
    while (!*v9)
    {
      v9 += 4;
      if (v9 == v10)
        goto LABEL_12;
    }
  }
  if (v9 == v10)
  {
LABEL_12:
    *a4 = 0;
    return result;
  }
  v11 = *v9;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 120);
  if (v13)
  {
    v14 = (CSCppTaskMemory *)operator new();
    CSCppCoreFileMemory::CSCppCoreFileMemory(v14, v13);
  }
  else
  {
    v15 = (CSCppMachTaskContainer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 56) + 16))(*(_QWORD *)(v12 + 56));
    v16 = !CSCppMachTaskContainer::is_self_task(v15);
    v14 = (CSCppTaskMemory *)operator new();
    CSCppTaskMemory::CSCppTaskMemory(v14, v15, v16);
  }
  v17 = 32;
  do
  {
    v18 = (_DWORD *)(*(uint64_t (**)(CSCppTaskMemory *, uint64_t, unint64_t))(*(_QWORD *)v14 + 32))(v14, v11, v17);
    v20 = (uint64_t)v18;
    if (!v18 || *v18 != -17958193)
    {
      *a4 = 0;
      return (*(uint64_t (**)(CSCppTaskMemory *))(*(_QWORD *)v14 + 8))(v14);
    }
    v17 = v18[5] + 32;
  }
  while (v17 > v19);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_DWORD *)(a1 + 104);
  v23 = operator new();
  LOBYTE(v26) = 0;
  v27 = 0;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(v23, (uint64_t)v14, v11, v20, v21, v22, 0, &v26);
  if (!uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(v23, a1))
  {
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    return (*(uint64_t (**)(CSCppTaskMemory *))(*(_QWORD *)v14 + 8))(v14);
  }
  v24 = atomic_load((unsigned int *)(a2 + 12));
  atomic_store(v24 | 2, (unsigned int *)(a2 + 12));
  v25 = v14;
  TRawSymbolOwnerData<Pointer32>::add_memory((_QWORD *)a2, (uint64_t *)&v25);
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a4 = v23;
  return result;
}

void sub_1B40F65A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t *std::__call_once_param<std::tuple<TRangeValue<Pointer64,unsigned char *> CSCppTextSectionDataDescriptor::_perform_partial_mapping_for_file<Pointer64>(TRange<Pointer64>)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;

  v1 = **a1;
  v2 = *v1;
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<CSCppMemory> *,std::unique_ptr<CSCppMemory> *,std::unique_ptr<CSCppMemory> *,0>((uint64_t *)(*(_QWORD *)(*v1 + 88) + 8), *(uint64_t **)(*v1 + 96), *(uint64_t **)(*v1 + 88));
  v5 = v4;
  v6 = *(_QWORD **)(v2 + 96);
  if (v6 != v4)
  {
    do
    {
      v7 = (uint64_t *)*--v6;
      result = v7;
      *v6 = 0;
      if (v7)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
    while (v6 != v5);
  }
  *(_QWORD *)(v2 + 96) = v5;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<CSCppMemory> *,std::unique_ptr<CSCppMemory> *,std::unique_ptr<CSCppMemory> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t **std::__tree<TRangeValue<Pointer64,unsigned char *>>::__emplace_unique_key_args<TRangeValue<Pointer64,unsigned char *>,TRangeValue<Pointer64,unsigned char *> const&>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  _OWORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x38uLL);
    v10[2] = *(_OWORD *)a3;
    *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void CSCppTextSectionDescriptorMap<Pointer64>::_store_section_descriptor_for_range(uint64_t a1, _OWORD *a2)
{
  std::mutex *v4;
  unint64_t v5[3];
  _OWORD *v6;

  v6 = a2;
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(_OWORD *)v5 = *a2;
  std::__tree<std::__value_type<TRange<Pointer64>,CSCppTextSectionDataDescriptor *>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,CSCppTextSectionDataDescriptor *>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,CSCppTextSectionDataDescriptor *>>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64>&,CSCppTextSectionDataDescriptor *&>((uint64_t **)a1, v5, v5, &v6);
  std::mutex::unlock(v4);
}

void sub_1B40F6C4C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void CSCppTextSectionDataDescriptor::CSCppTextSectionDataDescriptor(CSCppTextSectionDataDescriptor *this, CSCppSymbolOwner *a2)
{
  int v4;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v4 = *((_DWORD *)a2 + 27);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_BYTE *)this + 48) = (v4 & 0x200) != 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = (CSCppSymbolicator::flags(*((os_unfair_lock_s **)a2 + 1)) & 4) == 0;
  *((_BYTE *)this + 81) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 56) + 24))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 56));
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 19);
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 18) = 850045863;
  *(_OWORD *)((char *)this + 193) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
}

void sub_1B40F6D28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;
  void **v4;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v4);
  std::__tree<TRange<Pointer64>>::destroy(v2, *v3);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<TRange<Pointer64>,CSCppTextSectionDataDescriptor *>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,CSCppTextSectionDataDescriptor *>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,CSCppTextSectionDataDescriptor *>>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64>&,CSCppTextSectionDataDescriptor *&>(uint64_t **a1, unint64_t *a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  _OWORD *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = operator new(0x38uLL);
    v12[2] = *a3;
    *((_QWORD *)v12 + 6) = *a4;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    std::mutex::~mutex((std::mutex *)(a2 + 144));
    v4 = (void **)(a2 + 88);
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 79) < 0)
      operator delete(*(void **)(a2 + 56));
    std::__tree<TRange<Pointer64>>::destroy(a2 + 24, *(_QWORD **)(a2 + 32));
    return MEMORY[0x1B5E36940](a2, 0x1032C40C9A27EF9);
  }
  return result;
}

uint64_t CSSymbolicatorForeachSymbolicatorWithPath(char *a1, uint64_t a2)
{
  return CSSymbolicatorForeachSymbolicatorWithPathFlagsAndNotification(a1, 0, 0, a2);
}

uint64_t CSSymbolicatorCreateWithPathAndArchitecture(char *a1, void **a2)
{
  return CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification(a1, a2, 0, 0);
}

uint64_t CSSymbolicatorGetArchitecture(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  else
    return 0;
}

uint64_t CSSymbolicatorGetSymbolOwnerCountAtTime(char a1, uint64_t a2, uint64_t a3)
{
  return CSSymbolicatorForeachSymbolOwnerAtTime(a1, a2, a3, 0);
}

uint64_t CSSymbolicatorForeachSymbolOwnerAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p;
  _BYTE *v10;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, &__p);
  v5 = __p;
  if (a4)
  {
    v6 = v10;
    if (__p != v10)
    {
      do
        (*(void (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, 3, *v5++);
      while (v5 != v6);
      v5 = __p;
    }
  }
  v7 = (v10 - (_BYTE *)v5) >> 3;
  if (v5)
  {
    v10 = v5;
    operator delete(v5);
  }
  return v7;
}

void sub_1B40F6F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *CSCppSymbolicator::get_symbol_owners_at_time@<X0>(CSCppSymbolicator *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5[0] = &off_1E6775A58;
  v5[1] = a3;
  v5[2] = a2;
  v6 = v5;
  CSCppSymbolicator::read_timeline((uint64_t)this, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1B40F7038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  CSCppSymbolicator::get_symbol_owners_at_time(v13);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorForeachSymbolOwnerWithNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *__p;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v9 = operator new(0x20uLL);
  *v9 = &off_1E6775B58;
  v9[1] = &__p;
  v9[2] = a4;
  v9[3] = a3;
  v20 = v9;
  CSCppSymbolicator::read_timeline(v8, (uint64_t)v19);
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_8;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
  v13 = __p;
  if (a5)
  {
    v14 = v17;
    if (__p != v17)
    {
      do
        (*(void (**)(uint64_t, uint64_t, _QWORD))(a5 + 16))(a5, 3, *v13++);
      while (v13 != v14);
      v13 = __p;
    }
  }
  v12 = (v17 - (_BYTE *)v13) >> 3;
  if (v13)
  {
    v17 = v13;
    operator delete(v13);
  }
  return v12;
}

void sub_1B40F71BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime(char a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *__p;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v9 = operator new(0x20uLL);
  *v9 = &off_1E6775BD8;
  v9[1] = &__p;
  v9[2] = a4;
  *((_DWORD *)v9 + 6) = a3;
  v20 = v9;
  CSCppSymbolicator::read_timeline(v8, (uint64_t)v19);
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_8;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
  v13 = __p;
  if (a5)
  {
    v14 = v17;
    if (__p != v17)
    {
      do
        (*(void (**)(uint64_t, uint64_t, _QWORD))(a5 + 16))(a5, 3, *v13++);
      while (v13 != v14);
      v13 = __p;
    }
  }
  v12 = (v17 - (_BYTE *)v13) >> 3;
  if (v13)
  {
    v17 = v13;
    operator delete(v13);
  }
  return v12;
}

void sub_1B40F7348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorForeachSymbolOwnerWithPathAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *__p;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v9 = operator new(0x20uLL);
  *v9 = &off_1E6775C58;
  v9[1] = &__p;
  v9[2] = a4;
  v9[3] = a3;
  v20 = v9;
  CSCppSymbolicator::read_timeline(v8, (uint64_t)v19);
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_8;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
  v13 = __p;
  if (a5)
  {
    v14 = v17;
    if (__p != v17)
    {
      do
        (*(void (**)(uint64_t, uint64_t, _QWORD))(a5 + 16))(a5, 3, *v13++);
      while (v13 != v14);
      v13 = __p;
    }
  }
  v12 = (v17 - (_BYTE *)v13) >> 3;
  if (v13)
  {
    v17 = v13;
    operator delete(v13);
  }
  return v12;
}

void sub_1B40F74D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorGetSymbolOwnerWithAddressAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  if (CSCppSymbolicator::get_symbol_owner_with_address_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, a4))
  {
    return 3;
  }
  return 0;
}

uint64_t CSCppSymbolicator::get_symbol_owner_with_address_at_time(CSCppSymbolicator *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v6 = operator new(0x20uLL);
  *v6 = &off_1E6775AD8;
  v6[1] = &v10;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  CSCppSymbolicator::read_timeline((uint64_t)this, (uint64_t)v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v10;
}

void sub_1B40F7630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorGetSymbolOwnerWithNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3802000000;
  v10 = __Block_byref_object_copy__3;
  v11 = __Block_byref_object_dispose__3;
  v12 = 0;
  v13 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolicatorGetSymbolOwnerWithNameAtTime_block_invoke;
  v6[3] = &unk_1E67758E8;
  v6[4] = &v7;
  if (CSSymbolicatorForeachSymbolOwnerWithNameAtTime(a1, a2, a3, a4, (uint64_t)v6) == 1)
    v4 = v8[5];
  else
    v4 = 0;
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B40F771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t CSSymbolicatorGetAOutSymbolOwner(char a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3802000000;
  v8 = __Block_byref_object_copy__3;
  v9 = __Block_byref_object_dispose__3;
  v10 = 0;
  v11 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __CSSymbolicatorGetAOutSymbolOwner_block_invoke;
  v4[3] = &unk_1E6775910;
  v4[4] = &v5;
  if (CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime(a1, a2, 16, 0x8000000000000001, (uint64_t)v4) == 1)
    v2 = v6[5];
  else
    v2 = 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B40F7810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorGetSymbolOwner(char a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3802000000;
  v8 = __Block_byref_object_copy__3;
  v9 = __Block_byref_object_dispose__3;
  v10 = 0;
  v11 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __CSSymbolicatorGetSymbolOwner_block_invoke;
  v4[3] = &unk_1E6775938;
  v4[4] = &v5;
  if (CSSymbolicatorForeachSymbolOwnerAtTime(a1, a2, 0x8000000000000001, (uint64_t)v4) == 1)
    v2 = v6[5];
  else
    v2 = 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B40F78F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorForeachSegmentAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  char *v13;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, &__p);
  v5 = (char *)__p;
  v6 = v13;
  if (__p == v13)
  {
    v7 = 0;
    if (!__p)
      return v7;
LABEL_14:
    v13 = v5;
    operator delete(v5);
    return v7;
  }
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)v5 + 32);
    v9 = *(_QWORD *)(*(_QWORD *)v5 + 40);
    if (v8 != v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v5 + 32);
      do
      {
        if (a4)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, *(_QWORD *)v5 | 7, v8);
        ++v7;
        v10 += 32;
        v8 += 32;
      }
      while (v10 != v9);
    }
    v5 += 8;
  }
  while (v5 != v6);
  v5 = (char *)__p;
  if (__p)
    goto LABEL_14;
  return v7;
}

void sub_1B40F7A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorForeachSectionAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  void *__p;
  unint64_t *v10;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, &__p);
  v5 = (unint64_t *)__p;
  v6 = v10;
  if (__p == v10)
  {
    v7 = 0;
    if (!__p)
      return v7;
LABEL_9:
    v10 = v5;
    operator delete(v5);
    return v7;
  }
  v7 = 0;
  do
    v7 += CSCppSymbolOwner::sections_in_address_range(*v5++, 0, -1, a4);
  while (v5 != v6);
  v5 = (unint64_t *)__p;
  if (__p)
    goto LABEL_9;
  return v7;
}

void sub_1B40F7AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorGetSegmentWithAddressAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  result = CSCppSymbolicator::get_symbol_owner_with_address_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, a4);
  if (result)
    return CSCppSymbolOwner::segment_at_address(result, a3);
  return result;
}

uint64_t CSSymbolicatorGetSectionWithAddressAtTime(char a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char SymbolOwnerWithAddressAtTime;
  uint64_t v6;

  SymbolOwnerWithAddressAtTime = CSSymbolicatorGetSymbolOwnerWithAddressAtTime(a1, a2, a3, a4);
  return CSSymbolOwnerGetSectionWithAddress(SymbolOwnerWithAddressAtTime, v6, a3);
}

uint64_t CSSymbolicatorGetSymbolCountAtTime(char a1, uint64_t a2, uint64_t a3)
{
  return CSSymbolicatorForeachSymbolAtTime(a1, a2, a3, 0);
}

uint64_t CSSymbolicatorForeachSymbolAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSCppSymbolOwner **v5;
  CSCppSymbolOwner **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  CSCppSymbolOwner **v11;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, &__p);
  v5 = (CSCppSymbolOwner **)__p;
  v6 = v11;
  if (__p == v11)
  {
    v7 = 0;
    if (!__p)
      return v7;
LABEL_9:
    v11 = v5;
    operator delete(v5);
    return v7;
  }
  v7 = 0;
  do
  {
    v8 = CSCppSymbolOwner::data(*v5);
    v7 += (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 88))(v8, *v5++, a4);
  }
  while (v5 != v6);
  v5 = (CSCppSymbolOwner **)__p;
  if (__p)
    goto LABEL_9;
  return v7;
}

void sub_1B40F7C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorForeachSymbolWithNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CSCppSymbolOwner **v7;
  CSCppSymbolOwner **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  CSCppSymbolOwner **v13;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a4, &__p);
  v7 = (CSCppSymbolOwner **)__p;
  v8 = v13;
  if (__p == v13)
  {
    v9 = 0;
    if (!__p)
      return v9;
LABEL_9:
    v13 = v7;
    operator delete(v7);
    return v9;
  }
  v9 = 0;
  do
  {
    v10 = CSCppSymbolOwner::data(*v7);
    v9 += (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 96))(v10, *v7++, a3, a5);
  }
  while (v7 != v8);
  v7 = (CSCppSymbolOwner **)__p;
  if (__p)
    goto LABEL_9;
  return v9;
}

void sub_1B40F7D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorForeachSymbolWithMangledNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CSCppSymbolOwner **v7;
  CSCppSymbolOwner **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  CSCppSymbolOwner **v13;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a4, &__p);
  v7 = (CSCppSymbolOwner **)__p;
  v8 = v13;
  if (__p == v13)
  {
    v9 = 0;
    if (!__p)
      return v9;
LABEL_9:
    v13 = v7;
    operator delete(v7);
    return v9;
  }
  v9 = 0;
  do
  {
    v10 = CSCppSymbolOwner::data(*v7);
    v9 += (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, *v7++, a3, a5);
  }
  while (v7 != v8);
  v7 = (CSCppSymbolOwner **)__p;
  if (__p)
    goto LABEL_9;
  return v9;
}

void sub_1B40F7DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CSCppSymbolOwner *CSSymbolicatorGetSymbolWithAddressAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSCppSymbolOwner *result;
  CSCppSymbolOwner *v6;
  uint64_t v7;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  result = (CSCppSymbolOwner *)CSCppSymbolicator::get_symbol_owner_with_address_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, a4);
  if (result)
  {
    v6 = result;
    v7 = CSCppSymbolOwner::data(result);
    return (CSCppSymbolOwner *)(*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, uint64_t))(*(_QWORD *)v7 + 136))(v7, v6, a3);
  }
  return result;
}

uint64_t CSSymbolicatorGetSymbolWithNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSCppSymbolOwner **v5;
  CSCppSymbolOwner **v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CSCppSymbolOwner *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v14[5];
  CSCppSymbolOwner **v15;
  CSCppSymbolOwner **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3802000000;
  v20 = __Block_byref_object_copy__3;
  v21 = __Block_byref_object_dispose__3;
  v22 = 0;
  v23 = 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a4, &v15);
  v5 = v15;
  v6 = v16;
  if (v15 != v16)
  {
    v7 = 0;
    v8 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v9 = CSCppSymbolOwner::data(*v5);
      v10 = *v5;
      v14[0] = v8;
      v14[1] = 0x40000000;
      v14[2] = __CSSymbolicatorGetSymbolWithNameAtTime_block_invoke;
      v14[3] = &unk_1E6775960;
      v14[4] = &v17;
      v7 += (*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, uint64_t, _QWORD *))(*(_QWORD *)v9 + 112))(v9, v10, a3, v14);
      if (v7 >= 2)
        break;
      if (++v5 == v6)
        goto LABEL_9;
    }
    v12 = v18;
    v18[5] = 0;
    v12[6] = 0;
LABEL_9:
    v5 = v15;
  }
  v11 = v18[5];
  if (v5)
  {
    v16 = v5;
    operator delete(v5);
  }
  _Block_object_dispose(&v17, 8);
  return v11;
}

void sub_1B40F7FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorGetSymbolWithMangledNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSCppSymbolOwner **v5;
  CSCppSymbolOwner **v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CSCppSymbolOwner *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v14[5];
  CSCppSymbolOwner **v15;
  CSCppSymbolOwner **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3802000000;
  v20 = __Block_byref_object_copy__3;
  v21 = __Block_byref_object_dispose__3;
  v22 = 0;
  v23 = 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a4, &v15);
  v5 = v15;
  v6 = v16;
  if (v15 != v16)
  {
    v7 = 0;
    v8 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v9 = CSCppSymbolOwner::data(*v5);
      v10 = *v5;
      v14[0] = v8;
      v14[1] = 0x40000000;
      v14[2] = __CSSymbolicatorGetSymbolWithMangledNameAtTime_block_invoke;
      v14[3] = &unk_1E6775988;
      v14[4] = &v17;
      v7 += (*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, uint64_t, _QWORD *))(*(_QWORD *)v9 + 120))(v9, v10, a3, v14);
      if (v7 >= 2)
        break;
      if (++v5 == v6)
        goto LABEL_9;
    }
    v12 = v18;
    v18[5] = 0;
    v12[6] = 0;
LABEL_9:
    v5 = v15;
  }
  v11 = v18[5];
  if (v5)
  {
    v16 = v5;
    operator delete(v5);
  }
  _Block_object_dispose(&v17, 8);
  return v11;
}

void sub_1B40F8154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorGetSymbolWithNameFromSymbolOwnerWithNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t SymbolWithName;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;

  v9 = 0;
  v10 = &v9;
  v11 = 0x3802000000;
  v12 = __Block_byref_object_copy__3;
  v13 = __Block_byref_object_dispose__3;
  v14 = 0;
  v15 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __CSSymbolicatorGetSymbolWithNameFromSymbolOwnerWithNameAtTime_block_invoke;
  v8[3] = &unk_1E67759B0;
  v8[4] = &v9;
  if (CSSymbolicatorForeachSymbolOwnerWithNameAtTime(a1, a2, a4, a5, (uint64_t)v8) == 1)
    SymbolWithName = CSSymbolOwnerGetSymbolWithName(v10[5], v10[6], a3);
  else
    SymbolWithName = 0;
  _Block_object_dispose(&v9, 8);
  return SymbolWithName;
}

void sub_1B40F8268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t SymbolWithMangledName;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;

  v9 = 0;
  v10 = &v9;
  v11 = 0x3802000000;
  v12 = __Block_byref_object_copy__3;
  v13 = __Block_byref_object_dispose__3;
  v14 = 0;
  v15 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime_block_invoke;
  v8[3] = &unk_1E67759D8;
  v8[4] = &v9;
  if (CSSymbolicatorForeachSymbolOwnerWithNameAtTime(a1, a2, a4, a5, (uint64_t)v8) == 1)
    SymbolWithMangledName = CSSymbolOwnerGetSymbolWithMangledName(v10[5], v10[6], a3);
  else
    SymbolWithMangledName = 0;
  _Block_object_dispose(&v9, 8);
  return SymbolWithMangledName;
}

void sub_1B40F8364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorGetSourceInfoCountAtTime(char a1, uint64_t a2, uint64_t a3)
{
  return CSSymbolicatorForeachSourceInfoAtTime(a1, a2, a3, 0);
}

uint64_t CSSymbolicatorForeachSourceInfoAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSCppSymbolOwner **v5;
  CSCppSymbolOwner **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  CSCppSymbolOwner **v11;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  CSCppSymbolicator::get_symbol_owners_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, &__p);
  v5 = (CSCppSymbolOwner **)__p;
  v6 = v11;
  if (__p == v11)
  {
    v7 = 0;
    if (!__p)
      return v7;
LABEL_9:
    v11 = v5;
    operator delete(v5);
    return v7;
  }
  v7 = 0;
  do
  {
    v8 = CSCppSymbolOwner::data(*v5);
    v7 += (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 144))(v8, *v5++, a4);
  }
  while (v5 != v6);
  v5 = (CSCppSymbolOwner **)__p;
  if (__p)
    goto LABEL_9;
  return v7;
}

void sub_1B40F8448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CSCppSymbolOwner *CSSymbolicatorGetSourceInfoWithAddressAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CSCppSymbolOwner *result;
  CSCppSymbolOwner *v6;
  uint64_t v7;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  result = (CSCppSymbolOwner *)CSCppSymbolicator::get_symbol_owner_with_address_at_time((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, a4);
  if (result)
  {
    v6 = result;
    v7 = CSCppSymbolOwner::data(result);
    return (CSCppSymbolOwner *)(*(uint64_t (**)(uint64_t, CSCppSymbolOwner *, uint64_t))(*(_QWORD *)v7 + 160))(v7, v6, a3);
  }
  return result;
}

uint64_t CSSymbolicatorGetRegionCountAtTime(char a1, uint64_t a2, uint64_t a3)
{
  return CSSymbolicatorForeachSectionAtTime(a1, a2, a3, 0);
}

uint64_t CSSymbolicatorForeachRegionWithNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = __CSSymbolicatorForeachRegionWithNameAtTime_block_invoke;
  v7[3] = &unk_1E6775A00;
  v7[5] = &v8;
  v7[6] = a3;
  v7[4] = a5;
  CSSymbolicatorForeachSectionAtTime(a1, a2, a4, (uint64_t)v7);
  v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1B40F858C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorGetRegionWithAddressAtTime(char a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char SymbolOwnerWithAddressAtTime;
  uint64_t v6;

  SymbolOwnerWithAddressAtTime = CSSymbolicatorGetSymbolOwnerWithAddressAtTime(a1, a2, a3, a4);
  return CSSymbolOwnerGetSectionWithAddress(SymbolOwnerWithAddressAtTime, v6, a3);
}

uint64_t CSSymbolicatorGetRegionWithNameAtTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3802000000;
  v10 = __Block_byref_object_copy__3;
  v11 = __Block_byref_object_dispose__3;
  v12 = 0;
  v13 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolicatorGetRegionWithNameAtTime_block_invoke;
  v6[3] = &unk_1E6775A28;
  v6[4] = &v7;
  if (CSSymbolicatorForeachRegionWithNameAtTime(a1, a2, a3, a4, (uint64_t)v6) == 1)
    v4 = v8[5];
  else
    v4 = 0;
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B40F86F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::__function::__func<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6775A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6775A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

double std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<CSCppSymbolicator::get_symbol_owners_at_time(unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  CSCppSymbolOwnerTimeline::symbol_owners_at_time<decltype(nullptr)>(a2, a1[1], (void **)&v6);
  v3 = *a1;
  v4 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  result = *(double *)&v6;
  *(_OWORD *)v3 = v6;
  *(_QWORD *)(v3 + 16) = v7;
  return result;
}

void CSCppSymbolOwnerTimeline::symbol_owners_at_time<decltype(nullptr)>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v6;
  CSCppSymbolOwner **v7;
  CSCppSymbolOwner **i;
  uint64_t unload_timestamp_range;
  unint64_t v10;
  CSCppSymbolOwner *v11;
  unint64_t v12;
  CSCppSymbolOwner **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  CSCppSymbolOwner **v20;
  char *v21;
  char *v22;
  CSCppSymbolOwner *v23;

  if ((unint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    v6 = a2;
  else
    v6 = 0x7FFFFFFFFFFFFFFDLL;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<CSCppSymbolOwner *>::reserve(a3, (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4);
  v7 = *(CSCppSymbolOwner ***)(a1 + 56);
  for (i = *(CSCppSymbolOwner ***)(a1 + 64); v7 != i; v7 += 2)
  {
    if (a2 != 0x8000000000000001)
    {
      unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*v7);
      if (v6 - unload_timestamp_range >= v10)
        continue;
    }
    v11 = *v7;
    v13 = (CSCppSymbolOwner **)a3[1];
    v12 = (unint64_t)a3[2];
    if ((unint64_t)v13 >= v12)
    {
      v15 = ((char *)v13 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v16 = v12 - (_QWORD)*a3;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v18);
      else
        v19 = 0;
      v20 = (CSCppSymbolOwner **)&v19[8 * v15];
      *v20 = v11;
      v14 = (char *)(v20 + 1);
      v22 = (char *)*a3;
      v21 = (char *)a3[1];
      if (v21 != *a3)
      {
        do
        {
          v23 = (CSCppSymbolOwner *)*((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v20 = v23;
        }
        while (v21 != v22);
        v21 = (char *)*a3;
      }
      *a3 = v20;
      a3[1] = v14;
      a3[2] = &v19[8 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v13 = v11;
      v14 = (char *)(v13 + 1);
    }
    a3[1] = v14;
  }
}

void sub_1B40F89AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CSCppSymbolOwner *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::__function::__func<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6775AD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6775AD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

CSCppSymbolOwner *std::__function::__func<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()(uint64_t a1, CSCppSymbolOwnerTimeline *this)
{
  CSCppSymbolOwner *result;

  result = CSCppSymbolOwnerTimeline::symbol_owner_with_address_at_time(this, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<CSCppSymbolicator::get_symbol_owner_with_address_at_time(unsigned long long,unsigned long long)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

void std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6775B58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6775B58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  CSCppSymbolOwner **v6;
  CSCppSymbolOwner **i;
  uint64_t unload_timestamp_range;
  unint64_t v9;
  CSCppSymbolOwner *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  CSCppSymbolOwner **v16;
  char *v17;
  CSCppSymbolOwner *v18;
  uint64_t v19;
  void *v20;
  double result;
  __int128 v22;
  char *v23;

  v4 = a1[2];
  v3 = (const char *)a1[3];
  if ((unint64_t)(v4 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    v5 = a1[2];
  else
    v5 = 0x7FFFFFFFFFFFFFFDLL;
  v23 = 0;
  v22 = 0uLL;
  v6 = *(CSCppSymbolOwner ***)(a2 + 56);
  for (i = *(CSCppSymbolOwner ***)(a2 + 64); v6 != i; v6 += 2)
  {
    if (v4 != 0x8000000000000001)
    {
      unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*v6);
      if (v5 - unload_timestamp_range >= v9)
        continue;
    }
    v10 = *v6;
    if (!strcmp(v3, *((const char **)*v6 + 17)))
    {
      if (*((_QWORD *)&v22 + 1) >= (unint64_t)v23)
      {
        v12 = (uint64_t)(*((_QWORD *)&v22 + 1) - v22) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v13 = (uint64_t)&v23[-v22] >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)&v23[-v22] >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v23, v14);
        else
          v15 = 0;
        v16 = (CSCppSymbolOwner **)&v15[8 * v12];
        *v16 = v10;
        v11 = (uint64_t)(v16 + 1);
        v17 = (char *)*((_QWORD *)&v22 + 1);
        if (*((_QWORD *)&v22 + 1) != (_QWORD)v22)
        {
          do
          {
            v18 = (CSCppSymbolOwner *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v18;
          }
          while (v17 != (char *)v22);
          v17 = (char *)v22;
        }
        *(_QWORD *)&v22 = v16;
        v23 = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        **((_QWORD **)&v22 + 1) = v10;
        v11 = *((_QWORD *)&v22 + 1) + 8;
      }
      *((_QWORD *)&v22 + 1) = v11;
    }
  }
  v19 = a1[1];
  v20 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v20;
    operator delete(v20);
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
  }
  result = *(double *)&v22;
  *(_OWORD *)v19 = v22;
  *(_QWORD *)(v19 + 16) = v23;
  return result;
}

void sub_1B40F8D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithNameAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

void std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6775BD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6775BD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  CSCppSymbolOwner **v6;
  CSCppSymbolOwner **i;
  uint64_t unload_timestamp_range;
  unint64_t v9;
  CSCppSymbolOwner *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  CSCppSymbolOwner **v16;
  char *v17;
  CSCppSymbolOwner *v18;
  uint64_t v19;
  void *v20;
  double result;
  __int128 v22;
  char *v23;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 24);
  if ((unint64_t)(v3 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    v5 = *(_QWORD *)(a1 + 16);
  else
    v5 = 0x7FFFFFFFFFFFFFFDLL;
  v23 = 0;
  v22 = 0uLL;
  v6 = *(CSCppSymbolOwner ***)(a2 + 56);
  for (i = *(CSCppSymbolOwner ***)(a2 + 64); v6 != i; v6 += 2)
  {
    if (v3 != 0x8000000000000001)
    {
      unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*v6);
      if (v5 - unload_timestamp_range >= v9)
        continue;
    }
    v10 = *v6;
    if ((v4 & ~*((_DWORD *)*v6 + 27)) == 0)
    {
      if (*((_QWORD *)&v22 + 1) >= (unint64_t)v23)
      {
        v12 = (uint64_t)(*((_QWORD *)&v22 + 1) - v22) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v13 = (uint64_t)&v23[-v22] >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)&v23[-v22] >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v23, v14);
        else
          v15 = 0;
        v16 = (CSCppSymbolOwner **)&v15[8 * v12];
        *v16 = v10;
        v11 = (uint64_t)(v16 + 1);
        v17 = (char *)*((_QWORD *)&v22 + 1);
        if (*((_QWORD *)&v22 + 1) != (_QWORD)v22)
        {
          do
          {
            v18 = (CSCppSymbolOwner *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v18;
          }
          while (v17 != (char *)v22);
          v17 = (char *)v22;
        }
        *(_QWORD *)&v22 = v16;
        v23 = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        **((_QWORD **)&v22 + 1) = v10;
        v11 = *((_QWORD *)&v22 + 1) + 8;
      }
      *((_QWORD *)&v22 + 1) = v11;
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v20;
    operator delete(v20);
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
  }
  result = *(double *)&v22;
  *(_OWORD *)v19 = v22;
  *(_QWORD *)(v19 + 16) = v23;
  return result;
}

void sub_1B40F8FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithFlagsAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

void std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6775C58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6775C58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  CSCppSymbolOwner **v6;
  CSCppSymbolOwner **i;
  uint64_t unload_timestamp_range;
  unint64_t v9;
  CSCppSymbolOwner *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  CSCppSymbolOwner **v16;
  char *v17;
  CSCppSymbolOwner *v18;
  uint64_t v19;
  void *v20;
  double result;
  __int128 v22;
  char *v23;

  v4 = a1[2];
  v3 = (const char *)a1[3];
  if ((unint64_t)(v4 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    v5 = a1[2];
  else
    v5 = 0x7FFFFFFFFFFFFFFDLL;
  v23 = 0;
  v22 = 0uLL;
  v6 = *(CSCppSymbolOwner ***)(a2 + 56);
  for (i = *(CSCppSymbolOwner ***)(a2 + 64); v6 != i; v6 += 2)
  {
    if (v4 != 0x8000000000000001)
    {
      unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*v6);
      if (v5 - unload_timestamp_range >= v9)
        continue;
    }
    v10 = *v6;
    if (!strcmp(v3, *((const char **)*v6 + 15)))
    {
      if (*((_QWORD *)&v22 + 1) >= (unint64_t)v23)
      {
        v12 = (uint64_t)(*((_QWORD *)&v22 + 1) - v22) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v13 = (uint64_t)&v23[-v22] >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)&v23[-v22] >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v23, v14);
        else
          v15 = 0;
        v16 = (CSCppSymbolOwner **)&v15[8 * v12];
        *v16 = v10;
        v11 = (uint64_t)(v16 + 1);
        v17 = (char *)*((_QWORD *)&v22 + 1);
        if (*((_QWORD *)&v22 + 1) != (_QWORD)v22)
        {
          do
          {
            v18 = (CSCppSymbolOwner *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v18;
          }
          while (v17 != (char *)v22);
          v17 = (char *)v22;
        }
        *(_QWORD *)&v22 = v16;
        v23 = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        **((_QWORD **)&v22 + 1) = v10;
        v11 = *((_QWORD *)&v22 + 1) + 8;
      }
      *((_QWORD *)&v22 + 1) = v11;
    }
  }
  v19 = a1[1];
  v20 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v20;
    operator delete(v20);
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
  }
  result = *(double *)&v22;
  *(_OWORD *)v19 = v22;
  *(_QWORD *)(v19 + 16) = v23;
  return result;
}

void sub_1B40F9278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner *> CSCppSymbolicator::get_symbol_owners_at_time<CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0>(unsigned long long,CSSymbolicatorForeachSymbolOwnerWithPathAtTime::$_0)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

uint64_t CSSymbolOwnerGetArchitecture(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 112);
  else
    return 0;
}

uint64_t CSSymbolOwnerGetPath(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 120);
  else
    return 0;
}

uint64_t CSSymbolOwnerGetName(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 136);
  else
    return 0;
}

uint64_t CSSymbolOwnerGetDsymPath(char a1, uint64_t a2)
{
  uint64_t v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
}

UUID *CSSymbolOwnerGetUUID(char a1, uint64_t a2)
{
  UUID *v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = (UUID *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
  if (UUID::is_null(v2))
    return 0;
  else
    return v2;
}

UUID *CSSymbolOwnerGetCFUUIDBytes(char a1, uint64_t a2)
{
  UUID *v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = (UUID *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
  if (UUID::is_null(v2))
    return 0;
  else
    return v2;
}

uint64_t CSSymbolOwnerGetLastModifiedTimestamp(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 104);
  else
    return 0;
}

uint64_t CSSymbolOwnerGetLoadTimestamp(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 88);
  else
    return 0;
}

uint64_t CSSymbolOwnerGetUnloadTimestamp(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 96);
  else
    return 0;
}

uint64_t CSSymbolOwnerGetFlags(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108);
  else
    return 0;
}

uint64_t CSSymbolOwnerGetBaseAddress(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return CSCppSymbolOwner::base_address((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  else
    return 0;
}

uint64_t CSSymbolOwnerGetCurrentVersion(char a1, uint64_t a2)
{
  uint64_t v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

uint64_t CSSymbolOwnerGetCompatibilityVersion(char a1, uint64_t a2)
{
  uint64_t v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
}

uint64_t CSSymbolOwnerGetVersion(char a1, uint64_t a2)
{
  os_unfair_lock_s **v2;
  int v3;
  int FlagsForNonFaultingBehavior;
  int v5;
  uint64_t v7;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = (os_unfair_lock_s **)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v3 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 200);
  FlagsForNonFaultingBehavior = CSSymbolicatorGetFlagsForNonFaultingBehavior();
  v5 = CSCppSymbolicator::flags(v2[1]);
  if (v3)
    return (uint64_t)(v2 + 21);
  if ((v5 & FlagsForNonFaultingBehavior) != 0)
    return 0;
  v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
}

uint64_t CSSymbolOwnerIsMachO(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsProtected(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) >> 1) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsCommpage()
{
  return 0;
}

uint64_t CSSymbolOwnerIsAOut(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) >> 4) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsDylib(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) >> 5) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsDylibStub(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) >> 2) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsDyld(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) >> 6) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsBundle(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 108) >> 7;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsObject(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 109) >> 3) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsKextBundle(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 109) >> 4) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsDsym(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 109) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsDyldSharedCache(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 109) >> 1) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsSlid(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 109) >> 2) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsPIE(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 109) >> 5) & 1;
  else
    return 0;
}

uint64_t CSSymbolOwnerIsObjCRetainReleaseSupported(char a1, uint64_t a2)
{
  unsigned int v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = atomic_load((unsigned int *)(CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL)) + 12));
  return (v2 >> 10) & 1;
}

uint64_t CSSymbolOwnerIsObjCGCSupported(char a1, uint64_t a2)
{
  unsigned int v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = atomic_load((unsigned int *)(CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL)) + 12));
  return (v2 >> 11) & 1;
}

uint64_t CSSymbolOwnerGetSymbolicator(char a1, char a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return 2;
  else
    return 0;
}

uint64_t CSSymbolOwnerForeachSegment(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if (a3)
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 40);
    if (v5 != v6)
    {
      v7 = a2 | 7;
      v8 = *(_QWORD *)(v4 + 32);
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, v7, v5);
        v8 += 32;
        v5 += 32;
      }
      while (v8 != v6);
    }
  }
  return (uint64_t)(*(_QWORD *)(v4 + 40) - *(_QWORD *)(v4 + 32)) >> 5;
}

uint64_t CSSymbolOwnerForeachSection(char a1, uint64_t a2, uint64_t a3)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return CSCppSymbolOwner::sections_in_address_range(a2 & 0xFFFFFFFFFFFFFFFCLL, 0, -1, a3);
  else
    return 0;
}

unint64_t CSSymbolOwnerGetSegmentWithAddress(char a1, uint64_t a2, uint64_t a3)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return CSCppSymbolOwner::segment_at_address(a2 & 0xFFFFFFFFFFFFFFFCLL, a3);
  else
    return 0;
}

uint64_t CSSymbolOwnerGetSectionWithAddress(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x3802000000;
  v9 = __Block_byref_object_copy__4;
  v10 = __Block_byref_object_dispose__4;
  v11 = 0;
  v12 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __CSSymbolOwnerGetSectionWithAddress_block_invoke;
  v5[3] = &unk_1E6775CD0;
  v5[4] = &v6;
  CSCppSymbolOwner::sections_in_address_range(a2 & 0xFFFFFFFFFFFFFFFCLL, a3, 1, (uint64_t)v5);
  v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B40F9A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t CSSymbolOwnerGetSectionWithName(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(uint64_t, uint64_t);
  uint64_t (*v15)();

  v11 = 0;
  v12 = &v11;
  v13 = 0x3802000000;
  v14 = __Block_byref_object_copy__4;
  v15 = __Block_byref_object_dispose__4;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolOwnerGetSectionWithName_block_invoke;
  v6[3] = &unk_1E6775CF8;
  v6[5] = &v7;
  v6[6] = a3;
  v3 = &kCSNull;
  v6[4] = &v11;
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolOwner::sections_in_address_range(a2 & 0xFFFFFFFFFFFFFFFCLL, 0, -1, (uint64_t)v6);
    if (v8[3] == 1)
      v3 = v12 + 5;
  }
  v4 = *v3;
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_1B40F9B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolOwnerGetRegionCount(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return CSCppSymbolOwner::sections_in_address_range(a2 & 0xFFFFFFFFFFFFFFFCLL, 0, -1, 0);
  else
    return 0;
}

uint64_t CSSymbolOwnerForeachRegion(char a1, uint64_t a2, uint64_t a3)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return CSCppSymbolOwner::sections_in_address_range(a2 & 0xFFFFFFFFFFFFFFFCLL, 0, -1, a3);
  else
    return 0;
}

uint64_t CSSymbolOwnerForeachRegionWithName(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolOwnerForeachRegionWithName_block_invoke;
  v6[3] = &unk_1E6775D20;
  v6[5] = &v7;
  v6[6] = a3;
  v6[4] = a4;
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolOwner::sections_in_address_range(a2 & 0xFFFFFFFFFFFFFFFCLL, 0, -1, (uint64_t)v6);
    v4 = v8[3];
  }
  else
  {
    v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B40F9CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolOwnerGetRegionWithName(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();

  v6 = 0;
  v7 = &v6;
  v8 = 0x3802000000;
  v9 = __Block_byref_object_copy__4;
  v10 = __Block_byref_object_dispose__4;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __CSSymbolOwnerGetRegionWithName_block_invoke;
  v5[3] = &unk_1E6775D48;
  v5[4] = &v6;
  if (CSSymbolOwnerForeachRegionWithName(a1, a2, a3, (uint64_t)v5) == 1)
    v3 = v7[5];
  else
    v3 = 0;
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B40F9E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolOwnerGetSymbolCount(char a1, uint64_t a2)
{
  return CSSymbolOwnerForeachSymbol(a1, a2, 0);
}

uint64_t CSSymbolOwnerForeachSymbol(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v4, a3);
}

uint64_t CSSymbolOwnerForeachSymbolWithName(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v6, a3, a4);
}

uint64_t CSSymbolOwnerForeachSymbolWithMangledName(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, v6, a3, a4);
}

uint64_t CSSymbolOwnerGetSymbolWithAddress(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, v4, a3);
}

uint64_t CSSymbolOwnerGetSymbolWithName(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3802000000;
  v12 = __Block_byref_object_copy__4;
  v13 = __Block_byref_object_dispose__4;
  v14 = 0;
  v15 = 0;
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __CSSymbolOwnerGetSymbolWithName_block_invoke;
  v8[3] = &unk_1E6775D70;
  v8[4] = &v9;
  if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 112))(v5, v4, a3, v8) == 1)
    v6 = v10[5];
  else
    v6 = 0;
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1B40FA0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolOwnerGetSymbolWithMangledName(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3802000000;
  v12 = __Block_byref_object_copy__4;
  v13 = __Block_byref_object_dispose__4;
  v14 = 0;
  v15 = 0;
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __CSSymbolOwnerGetSymbolWithMangledName_block_invoke;
  v8[3] = &unk_1E6775D98;
  v8[4] = &v9;
  if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 120))(v5, v4, a3, v8) == 1)
    v6 = v10[5];
  else
    v6 = 0;
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1B40FA1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolOwnerGetSourceInfoCount(char a1, uint64_t a2)
{
  return CSSymbolOwnerForeachSourceInfo(a1, a2, 0);
}

uint64_t CSSymbolOwnerForeachSourceInfo(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 144))(v5, v4, a3);
}

uint64_t CSSymbolOwnerGetSourceInfoWithAddress(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 160))(v5, v4, a3);
}

uint64_t CSSymbolOwnerForEachStackFrameAtAddress(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, v6, a3, a4);
}

uint64_t CSSymbolOwnerGetRelinkedSubdylibPathWithAddress(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 208))(v5, v4, a3);
}

uint64_t CSSymbolOwnerGetRelinkedSubdylibNameWithAddress(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 216))(v5, v4, a3);
}

uint64_t CSSymbolOwnerGetUniqueRelinkedSubdylibCount(char a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v3 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 224))(v3, v2);
}

uint64_t CSSymbolOwnerGetContentForRange(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  std::string *p_str;
  int64_t size;
  _BYTE *v15;
  std::string *v16;
  _BYTE *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t *v26;
  const char *v27;
  std::string *v28;
  uint64_t segment_content_from_dsc;
  uint64_t *v30;
  std::string *p_p;
  char *v32;
  std::string *v33;
  std::string __p;
  void *v35;
  char *v36;
  uint64_t v37;
  std::string v38;
  std::string __str;
  char v40;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v6 = 0;
  if (a4 && a5)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v35, *(const void **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 32), *(_QWORD *)(v9 + 40), (uint64_t)(*(_QWORD *)(v9 + 40) - *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 32)) >> 5);
    memset(&__p, 0, sizeof(__p));
    v10 = (char *)v35;
    if (v35 != v36)
    {
      while (1)
      {
        v11 = a3 - *(_QWORD *)v10;
        if (a3 >= *(_QWORD *)v10 && a4 + a3 <= *((_QWORD *)v10 + 1) + *(_QWORD *)v10)
          break;
        v10 += 32;
        if (v10 == v36)
          goto LABEL_8;
      }
      p_str = &__str;
      std::string::basic_string[abi:ne180100]<0>(&__str, *((char **)v10 + 2));
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      v15 = (char *)p_str + size;
      if (size >= 1)
      {
        v16 = p_str;
        do
        {
          v17 = memchr(v16, 32, size);
          if (!v17)
            break;
          if (*v17 == 32)
            goto LABEL_26;
          v16 = (std::string *)(v17 + 1);
          size = v15 - (_BYTE *)v16;
        }
        while (v15 - (_BYTE *)v16 > 0);
      }
      v17 = v15;
LABEL_26:
      if (v17 == v15)
        v18 = -1;
      else
        v18 = v17 - (_BYTE *)p_str;
      std::string::basic_string(&v38, &__str, 0, v18, (std::allocator<char> *)&v40);
      __p = v38;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v20 = *(_QWORD *)(v9 + 16);
      v19 = *(_QWORD *)(v9 + 24);
      v21 = *(_QWORD *)(v9 + 112);
      if (*(_QWORD *)(v9 + 80))
      {
        v22 = CSCppSymbolOwner::data((CSCppSymbolOwner *)v9);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22) == 5)
        {
          v23 = CSCppSymbolOwner::data((CSCppSymbolOwner *)v9);
          v24 = FlatbufferSymbolOwnerData::rawBytesForRangeWithoutFaulting(v23, v9, a3, a4);
          if (v24)
          {
            (*(void (**)(uint64_t, unsigned int *, uint64_t))(a5 + 16))(a5, v24, a4);
            v6 = 1;
            goto LABEL_9;
          }
        }
      }
      v25 = *(_DWORD *)(v9 + 108);
      if ((v25 & 0x200) != 0)
      {
        v30 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 56) + 48))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 56));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        segment_content_from_dsc = extract_segment_content_from_dsc(*v30, v30[1], (uint64_t)p_p, v20, v19, v11, a4, a5);
        goto LABEL_57;
      }
      if ((v25 & 0x80000) != 0)
      {
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 56)))
        {
          v32 = *(char **)(v9 + 128);
          if (!v32)
            v32 = *(char **)(v9 + 120);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = &__p;
          else
            v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
          segment_content_from_dsc = extract_segment_content_from_kc_fileset(v21, v32, (uint64_t)v33, v20, v19, v11, a4, a5);
          goto LABEL_57;
        }
        v25 = *(_DWORD *)(v9 + 108);
      }
      if ((v25 & 0x1000) == 0
        || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 56))
        || (*(_BYTE *)(v9 + 110) & 8) == 0)
      {
        v27 = *(const char **)(v9 + 120);
        v26 = (uint64_t *)(v9 + 120);
        if (!access(v27, 4))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &__p;
          else
            v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          segment_content_from_dsc = extract_segment_content_from_binary_on_disk(v21, *v26, (const char *)v28, v20, v19, v11, a4, a5);
LABEL_57:
          v6 = segment_content_from_dsc;
          goto LABEL_9;
        }
      }
    }
LABEL_8:
    v6 = 0;
LABEL_9:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v35)
    {
      v36 = (char *)v35;
      operator delete(v35);
    }
  }
  return v6;
}

void sub_1B40FA71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolOwnerGetContentForSegmentByName(char a1, uint64_t a2, char *__s, uint64_t a4)
{
  uint64_t v5;
  std::string *p_str;
  int64_t size;
  char *v9;
  std::string *v10;
  char *v11;
  std::string::size_type v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t *v18;
  std::string *v19;
  uint64_t segment_content_from_dsc;
  std::string *v21;
  std::string v23;
  std::string __str;
  char v25;

  v5 = 0;
  if (!(a1 & 7 | (8 * (a2 & 3))) || !__s || !a4)
    return v5;
  p_str = &__str;
  std::string::basic_string[abi:ne180100]<0>(&__str, __s);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = __str.__r_.__value_.__l.__size_;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  v9 = (char *)p_str + size;
  if (size >= 8)
  {
    v10 = p_str;
    do
    {
      v11 = (char *)memchr(v10, 32, size - 7);
      if (!v11)
        break;
      if (*(_QWORD *)v11 == 0x544E454D47455320)
        goto LABEL_12;
      v10 = (std::string *)(v11 + 1);
      size = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 > 7);
  }
  v11 = v9;
LABEL_12:
  if (v11 == v9)
    v12 = -1;
  else
    v12 = v11 - (char *)p_str;
  std::string::basic_string(&v23, &__str, 0, v12, (std::allocator<char> *)&v25);
  v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if ((*(_BYTE *)(v13 + 109) & 2) != 0)
  {
    v18 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 8) + 56) + 48))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 56));
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v23;
    else
      v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
    segment_content_from_dsc = extract_segment_content_from_dsc(*v18, v18[1], (uint64_t)v19, v14, v15, 0, -1, a4);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)(v13 + 112);
  v16 = *(const char **)(v13 + 120);
  if (!access(v16, 4))
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v23;
    else
      v21 = (std::string *)v23.__r_.__value_.__r.__words[0];
    segment_content_from_dsc = extract_segment_content_from_binary_on_disk(v17, (uint64_t)v16, (const char *)v21, v14, v15, 0, -1, a4);
LABEL_26:
    v5 = segment_content_from_dsc;
    goto LABEL_27;
  }
  v5 = 0;
LABEL_27:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1B40FA930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

unint64_t TRawSymbolOwnerData<Pointer32>::_update_text_section_data_locked(uint64_t a1, CSCppSymbolOwner *a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unsigned int v7;

  v4 = *(_QWORD *)(a1 + 88);
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)v4 = v4 + 8;
    *(_QWORD *)(v4 + 24) = 850045863;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(a1 + 88) = v4;
  }
  result = (unint64_t)CSCppTextSectionDescriptorMap<Pointer32>::create_section_descriptor_for_default_text_section(v4, a2);
  if (result)
  {
    result = CSCppTextSectionDataDescriptor::get_text_section<Pointer32>(result, (uint64_t)a2);
    if (v6)
    {
      *(_QWORD *)(a1 + 232) = result;
      *(_QWORD *)(a1 + 240) = v6;
      v7 = atomic_load((unsigned int *)(a1 + 12));
      atomic_store(v7 | 0x1000, (unsigned int *)(a1 + 12));
    }
  }
  return result;
}

int64x2_t *CSCppTextSectionDescriptorMap<Pointer32>::create_section_descriptor_for_default_text_section(uint64_t a1, CSCppSymbolOwner *a2)
{
  CSCppTextSectionDataDescriptor *v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  CSCppTextSectionDataDescriptor *v9;

  v4 = (CSCppTextSectionDataDescriptor *)operator new();
  CSCppTextSectionDataDescriptor::CSCppTextSectionDataDescriptor(v4, a2);
  v9 = v4;
  CSCppTextSectionDataDescriptor::get_text_section<Pointer32>((unint64_t)v4, (uint64_t)a2);
  if (v5)
  {
    v6 = (int64x2_t *)v9;
    v9 = 0;
    CSCppTextSectionDescriptorMap<Pointer32>::_store_section_descriptor_for_range(a1, v6);
  }
  else
  {
    v6 = 0;
  }
  v7 = (uint64_t)v9;
  v9 = 0;
  if (v7)
    std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100]((uint64_t)&v9, v7);
  return v6;
}

void sub_1B40FAA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

unint64_t CSCppTextSectionDataDescriptor::get_text_section<Pointer32>(unint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t text_section;

  v4 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  text_section = CSCppTextSectionDataDescriptor::_get_text_section_locked<Pointer32>(a1, 0, a2);
  std::mutex::unlock(v4);
  return text_section;
}

void sub_1B40FAB3C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double TRawSymbolOwnerData<Pointer64>::_update_text_section_data_locked(uint64_t a1, CSCppSymbolOwner *a2)
{
  uint64_t v4;
  CSCppTextSectionDataDescriptor *section_descriptor_for_default_text_section;
  double result;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 88);
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)v4 = v4 + 8;
    *(_QWORD *)(v4 + 24) = 850045863;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(a1 + 88) = v4;
  }
  section_descriptor_for_default_text_section = CSCppTextSectionDescriptorMap<Pointer64>::create_section_descriptor_for_default_text_section(v4, a2);
  if (section_descriptor_for_default_text_section)
  {
    CSCppTextSectionDataDescriptor::get_text_section<Pointer64>((uint64_t)section_descriptor_for_default_text_section, (uint64_t)a2, &v8);
    if (v9)
    {
      result = *(double *)&v8;
      *(_OWORD *)(a1 + 232) = v8;
      *(_QWORD *)(a1 + 248) = v9;
      v7 = atomic_load((unsigned int *)(a1 + 12));
      atomic_store(v7 | 0x1000, (unsigned int *)(a1 + 12));
    }
  }
  return result;
}

CSCppTextSectionDataDescriptor *CSCppTextSectionDescriptorMap<Pointer64>::create_section_descriptor_for_default_text_section(uint64_t a1, CSCppSymbolOwner *a2)
{
  CSCppTextSectionDataDescriptor *v4;
  CSCppTextSectionDataDescriptor *v5;
  uint64_t v6;
  _QWORD v8[3];
  CSCppTextSectionDataDescriptor *v9;

  v4 = (CSCppTextSectionDataDescriptor *)operator new();
  CSCppTextSectionDataDescriptor::CSCppTextSectionDataDescriptor(v4, a2);
  v9 = v4;
  CSCppTextSectionDataDescriptor::get_text_section<Pointer64>((uint64_t)v4, (uint64_t)a2, v8);
  if (v8[2])
  {
    v5 = v9;
    v9 = 0;
    CSCppTextSectionDescriptorMap<Pointer64>::_store_section_descriptor_for_range(a1, v5);
  }
  else
  {
    v5 = 0;
  }
  v6 = (uint64_t)v9;
  v9 = 0;
  if (v6)
    std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100]((uint64_t)&v9, v6);
  return v5;
}

void sub_1B40FACA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void CSCppTextSectionDataDescriptor::get_text_section<Pointer64>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;

  v6 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  CSCppTextSectionDataDescriptor::_get_text_section_locked<Pointer64>(a1, 0, a2, a3);
  std::mutex::unlock(v6);
}

void sub_1B40FAD3C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer32>::add_symbol(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15[2];
  int v16;

  v16 = *(_DWORD *)a2;
  v4 = v16;
  v5 = a1 + 51;
  v15[0] = v16;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>(a1 + 51, v15);
  v7 = a1[23];
  if (v6 && v6[2] == v4)
  {
    v8 = v7 + 96 * v6[3];
    v9 = atomic_load((unsigned int *)(v8 + 20));
    v10 = atomic_load((unsigned int *)(a2 + 20));
    if ((v9 & 0x10) != 0 && (v10 & 0x10) != 0)
    {
      v11 = atomic_load((unsigned int *)(a2 + 20));
      atomic_store(v11 | 0x200, (unsigned int *)(a2 + 20));
      std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__emplace_multi<unsigned int &,TRawSymbol<Pointer32>>(a1 + 56, (unsigned int *)&v16, a2);
    }
    else
    {
      if ((v10 & 0x10) != 0)
        swap((int *)v8, (int *)a2);
      TRawSymbol<Pointer32>::merge_with_symbol(v8, a2);
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[24] - v7) >> 5);
    v15[0] = v4;
    v15[1] = v12;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned int,unsigned long>>(v5, (unsigned int *)v15);
    v13 = a1[24];
    if (v13 >= a1[25])
    {
      v14 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a1 + 23, a2);
    }
    else
    {
      *(_QWORD *)(v13 + 88) = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v13, a2);
      v14 = v13 + 96;
    }
    a1[24] = v14;
  }
}

__n128 swap(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  *a1 = *a2;
  *a2 = v2;
  v3 = a1[1];
  a1[1] = a2[1];
  a2[1] = v3;
  v4 = a1[3];
  a1[3] = a2[3];
  a2[3] = v4;
  v5 = a1[2];
  a1[2] = a2[2];
  a2[2] = v5;
  v6 = a1[4];
  a1[4] = a2[4];
  a2[4] = v6;
  v7 = (unsigned int *)(a1 + 5);
  v8 = atomic_load((unsigned int *)a2 + 5);
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v8, v7));
  atomic_store(v9, (unsigned int *)a2 + 5);
  v10 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  result = *(__n128 *)(a1 + 10);
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)(a2 + 10) = result;
  v13 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v13;
  v14 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v14;
  v15 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v15;
  LOBYTE(v15) = *((_BYTE *)a1 + 80);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v15;
  v16 = *((_QWORD *)a1 + 11);
  *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v16;
  return result;
}

void TRawSymbol<Pointer32>::merge_with_symbol(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  unsigned int v5;
  __int16 v6;
  unsigned int *v7;
  __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  __int16 v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;

  v4 = atomic_load((unsigned int *)(a2 + 20));
  if ((v4 & 0x100) != 0)
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v5 = atomic_load((unsigned int *)(a1 + 20));
  v6 = atomic_load((unsigned int *)(a1 + 20));
  if (v6 < 0)
  {
    v7 = (unsigned int *)(a2 + 20);
    v8 = atomic_load((unsigned int *)(a2 + 20));
    if ((v8 & 0x4000) != 0 || (v9 = atomic_load(v7), (v9 & 0x10000) != 0))
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v10 = atomic_load(v7);
      v5 = v10 & 0x14000 | v5 & 0xFFFF7FFF;
    }
  }
  v11 = atomic_load((unsigned int *)(a1 + 20));
  if ((v11 & 0x10000) != 0)
  {
    v12 = atomic_load((unsigned int *)(a2 + 20));
    if ((v12 & 0x4000) != 0)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v13 = atomic_load((unsigned int *)(a2 + 20));
      v5 = v13 & 0x4000 | v5 & 0xFFFEFFFF;
    }
  }
  v14 = atomic_load((unsigned int *)(a1 + 20));
  if ((v14 & 0x100000) != 0)
  {
    v15 = (unsigned int *)(a2 + 20);
    v16 = atomic_load((unsigned int *)(a2 + 20));
    if ((v16 & 0x80000) != 0 || (v17 = atomic_load(v15), (v17 & 0x200000) != 0))
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v18 = atomic_load(v15);
      v5 = v18 & 0x280000 | v5 & 0xFFEFFFFF;
    }
  }
  v19 = atomic_load((unsigned int *)(a1 + 20));
  if ((v19 & 0x200000) != 0)
  {
    v20 = atomic_load((unsigned int *)(a2 + 20));
    if ((v20 & 0x80000) != 0)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v5 = v5 & 0xFFD7FFFF | 0x80000;
    }
  }
  v21 = (_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a2 + 56) != *(_QWORD *)(a2 + 64))
  {
    std::vector<TRawSymbol<Pointer32>>::__vdeallocate((void **)(a1 + 56));
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *v21 = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  v22 = atomic_load((unsigned int *)(a2 + 20));
  atomic_store(v5 | v22 & 0xFE000FFF | 0x20000000, (unsigned int *)(a1 + 20));
}

void TRawSymbolOwnerData<Pointer64>::add_symbol(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 *v7;
  char v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;

  v15 = a2->n128_u64[0];
  v4 = (uint64_t)(a1 + 52);
  v5 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>(a1 + 52, &v15);
  v6 = a1[23];
  if (v5 && v15 == v5[2])
  {
    v7 = (__n128 *)(v6 + 104 * v5[3]);
    v8 = atomic_load(&v7[1].n128_u32[3]);
    v9 = atomic_load(&a2[1].n128_u32[3]);
    if ((v8 & 0x10) != 0 && (v9 & 0x10) != 0)
    {
      v10 = atomic_load(&a2[1].n128_u32[3]);
      atomic_store(v10 | 0x200, &a2[1].n128_u32[3]);
      std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::__emplace_multi<unsigned long long &,TRawSymbol<Pointer64>>(a1 + 57, &v15, (uint64_t)a2);
    }
    else
    {
      if ((v9 & 0x10) != 0)
        swap(v7, a2);
      TRawSymbol<Pointer64>::merge_with_symbol((uint64_t)v7, (uint64_t)a2);
    }
  }
  else
  {
    v11 = 0x4EC4EC4EC4EC4EC5 * ((a1[24] - v6) >> 3);
    *(_QWORD *)&v14 = v15;
    *((_QWORD *)&v14 + 1) = v11;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>(v4, (unint64_t *)&v14, &v14);
    v12 = a1[24];
    if (v12 >= a1[25])
    {
      v13 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a1 + 23, (uint64_t)a2);
    }
    else
    {
      *(_QWORD *)(v12 + 96) = 0;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v12, (uint64_t)a2);
      v13 = v12 + 104;
    }
    a1[24] = v13;
  }
}

__n128 swap(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = a1->n128_u64[0];
  a1->n128_u64[0] = a2->n128_u64[0];
  a2->n128_u64[0] = v2;
  v3 = a1->n128_u64[1];
  a1->n128_u64[1] = a2->n128_u64[1];
  a2->n128_u64[1] = v3;
  LODWORD(v3) = a1[1].n128_u32[1];
  a1[1].n128_u32[1] = a2[1].n128_u32[1];
  a2[1].n128_u32[1] = v3;
  LODWORD(v3) = a1[1].n128_u32[0];
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  a2[1].n128_u32[0] = v3;
  LODWORD(v3) = a1[1].n128_u32[2];
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  a2[1].n128_u32[2] = v3;
  v4 = &a1[1].n128_u32[3];
  v5 = atomic_load(&a2[1].n128_u32[3]);
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v5, v4));
  atomic_store(v6, &a2[1].n128_u32[3]);
  v7 = a1[2].n128_u64[0];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v7;
  v8 = a1[2].n128_u64[1];
  a1[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v8;
  result = a1[3];
  a1[3] = a2[3];
  a2[3] = result;
  v10 = a1[4].n128_u64[0];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = v10;
  v11 = a1[4].n128_u64[1];
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  a2[4].n128_u64[1] = v11;
  v12 = a1[5].n128_u64[0];
  a1[5].n128_u64[0] = a2[5].n128_u64[0];
  a2[5].n128_u64[0] = v12;
  LOBYTE(v12) = a1[5].n128_u8[8];
  a1[5].n128_u8[8] = a2[5].n128_u8[8];
  a2[5].n128_u8[8] = v12;
  v13 = a1[6].n128_u64[0];
  a1[6].n128_u64[0] = a2[6].n128_u64[0];
  a2[6].n128_u64[0] = v13;
  return result;
}

void TRawSymbol<Pointer64>::merge_with_symbol(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  unsigned int v5;
  __int16 v6;
  unsigned int *v7;
  __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  __int16 v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;

  v4 = atomic_load((unsigned int *)(a2 + 28));
  if ((v4 & 0x100) != 0)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = atomic_load((unsigned int *)(a1 + 28));
  v6 = atomic_load((unsigned int *)(a1 + 28));
  if (v6 < 0)
  {
    v7 = (unsigned int *)(a2 + 28);
    v8 = atomic_load((unsigned int *)(a2 + 28));
    if ((v8 & 0x4000) != 0 || (v9 = atomic_load(v7), (v9 & 0x10000) != 0))
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v10 = atomic_load(v7);
      v5 = v10 & 0x14000 | v5 & 0xFFFF7FFF;
    }
  }
  v11 = atomic_load((unsigned int *)(a1 + 28));
  if ((v11 & 0x10000) != 0)
  {
    v12 = atomic_load((unsigned int *)(a2 + 28));
    if ((v12 & 0x4000) != 0)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v13 = atomic_load((unsigned int *)(a2 + 28));
      v5 = v13 & 0x4000 | v5 & 0xFFFEFFFF;
    }
  }
  v14 = atomic_load((unsigned int *)(a1 + 28));
  if ((v14 & 0x100000) != 0)
  {
    v15 = (unsigned int *)(a2 + 28);
    v16 = atomic_load((unsigned int *)(a2 + 28));
    if ((v16 & 0x80000) != 0 || (v17 = atomic_load(v15), (v17 & 0x200000) != 0))
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v18 = atomic_load(v15);
      v5 = v18 & 0x280000 | v5 & 0xFFEFFFFF;
    }
  }
  v19 = atomic_load((unsigned int *)(a1 + 28));
  if ((v19 & 0x200000) != 0)
  {
    v20 = atomic_load((unsigned int *)(a2 + 28));
    if ((v20 & 0x80000) != 0)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v5 = v5 & 0xFFD7FFFF | 0x80000;
    }
  }
  v21 = (_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a2 + 64) != *(_QWORD *)(a2 + 72))
  {
    std::vector<TRawSymbol<Pointer64>>::__vdeallocate((void **)(a1 + 64));
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *v21 = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
  }
  v22 = atomic_load((unsigned int *)(a2 + 28));
  atomic_store(v5 | v22 & 0xFE000FFF | 0x20000000, (unsigned int *)(a1 + 28));
}

uint64_t TRawSymbolOwnerData<Pointer32>::mutable_sorted_symbols(uint64_t a1)
{
  TRawSymbolOwnerData<Pointer32>::prepare_symbols(a1);
  return a1 + 184;
}

void TRawSymbolOwnerData<Pointer32>::prepare_symbols(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 368);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TRawSymbolOwnerData<Pointer32>::prepare_symbols(void)::{lambda(void)#1} &&>>);
  }
}

uint64_t TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols(uint64_t a1)
{
  TRawSymbolOwnerData<Pointer64>::prepare_symbols(a1);
  return a1 + 184;
}

void TRawSymbolOwnerData<Pointer64>::prepare_symbols(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 376);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TRawSymbolOwnerData<Pointer64>::prepare_symbols(void)::{lambda(void)#1} &&>>);
  }
}

void TRawSymbolOwnerData<Pointer32>::aliases_for_symbol(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16[2];
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  void **v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = (_QWORD *)(a1 + 448);
  v16[0] = *a2;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__equal_range_multi<unsigned long long>((_QWORD *)(a1 + 448), v16);
  v7 = v6;
  v9 = v8;
  if (v6 != v8)
  {
    v10 = v6;
    do
    {
      v15 = *((_OWORD *)v10 + 3);
      TRawSymbol<Pointer32>::TRawSymbol((uint64_t)v16, (uint64_t)a2);
      v18 = v15;
      v11 = atomic_load(&v17);
      atomic_store(v11 & 0xFE39FDFB | 0x200, &v17);
      v12 = a3[1];
      if (v12 >= a3[2])
      {
        v13 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)v16);
      }
      else
      {
        *(_QWORD *)(v12 + 88) = 0;
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)v12 = 0;
        *(_OWORD *)(v12 + 40) = 0u;
        *(_OWORD *)(v12 + 56) = 0u;
        *(_OWORD *)(v12 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v12, (uint64_t)v16);
        v13 = v12 + 96;
      }
      a3[1] = v13;
      v20 = (void **)&v19;
      std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v20);
      v10 = (uint64_t *)*v10;
    }
    while (v10 != v9);
    if (*a3 != a3[1])
    {
      do
      {
        v14 = *v7;
        std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::erase(v5, v7);
        v7 = (uint64_t *)v14;
      }
      while ((uint64_t *)v14 != v9);
    }
  }
}

void sub_1B40FB6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer64>::aliases_for_symbol(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[28];
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v20 = *a2;
  v5 = (_QWORD *)(a1 + 456);
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__equal_range_multi<unsigned long long>((_QWORD *)(a1 + 456), &v20);
  v7 = v6;
  v9 = v8;
  if (v6 != v8)
  {
    v10 = v6;
    do
    {
      v15 = *(_OWORD *)(v10 + 7);
      TRawSymbol<Pointer64>::TRawSymbol((uint64_t)v16, (uint64_t)a2);
      v18 = v15;
      v11 = atomic_load(&v17);
      atomic_store(v11 & 0xFE39FDFB | 0x200, &v17);
      v12 = a3[1];
      if (v12 >= a3[2])
      {
        v13 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)v16);
      }
      else
      {
        *(_QWORD *)(v12 + 96) = 0;
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v12, (uint64_t)v16);
        v13 = v12 + 104;
      }
      a3[1] = v13;
      v21 = (void **)&v19;
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v21);
      v10 = (uint64_t *)*v10;
    }
    while (v10 != v9);
    if (*a3 != a3[1])
    {
      do
      {
        v14 = *v7;
        std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::erase(v5, v7);
        v7 = (uint64_t *)v14;
      }
      while ((uint64_t *)v14 != v9);
    }
  }
}

void sub_1B40FB814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by(uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1 + 416, vcvtps_u32_f32((float)(unint64_t)(*(_QWORD *)(a1 + 440) + 2 * a2) / *(float *)(a1 + 448)));
}

void TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by(uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1 + 408, vcvtps_u32_f32((float)(unint64_t)(*(_QWORD *)(a1 + 432) + 2 * a2) / *(float *)(a1 + 440)));
}

void TRawSymbolOwnerData<Pointer64>::emplace_symbol(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, _OWORD *a7, char a8)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _OWORD *v21;
  uint64_t v22;
  unsigned int v23;
  __n128 v24;
  uint64_t *v25;
  uint64_t *v26;
  int *v27;
  _OWORD **v28;
  __int128 v29;
  _BYTE v30[32];
  uint64_t v31;
  _OWORD *v32;
  int v33;
  _OWORD **v34;
  int *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;

  v36 = a3;
  v37 = a2;
  v34 = (_OWORD **)a5;
  v35 = (int *)a4;
  v33 = a6;
  v10 = (uint64_t)(a1 + 52);
  v32 = a7;
  v11 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>(a1 + 52, &v37);
  v12 = a1[23];
  if (v11 && v37 == v11[2])
  {
    if ((a8 & 1) == 0)
    {
      v13 = (__n128 *)(v12 + 104 * v11[3]);
      v14 = atomic_load(&v13[1].n128_u32[3]);
      if ((v14 & 0x10) != 0 && (v33 & 0x10) != 0)
      {
        v33 |= 0x200u;
        v38 = &v37;
        v24.n128_u64[0] = (unint64_t)&v37;
        v24.n128_u64[1] = (unint64_t)&v36;
        v25 = (uint64_t *)&v35;
        v26 = (uint64_t *)&v34;
        v27 = &v33;
        v28 = &v32;
        std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::__emplace_multi<std::piecewise_construct_t const&,std::tuple<unsigned long long &>,std::tuple<unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>>(a1 + 57, (uint64_t)&std::piecewise_construct, &v38, &v24);
      }
      else
      {
        v24.n128_u64[0] = v37;
        v24.n128_u64[1] = v36;
        v25 = 0;
        v26 = 0;
        v27 = v35;
        v28 = v34;
        v31 = 0;
        v29 = 0u;
        memset(v30, 0, 25);
        v23 = v33;
        if (v32)
        {
          v29 = *v32;
          v23 = v33 | 0x80000000;
        }
        HIDWORD(v26) = v23;
        if ((v33 & 0x10) != 0)
          swap(v13, &v24);
        TRawSymbol<Pointer64>::merge_with_symbol((uint64_t)v13, (uint64_t)&v24);
        v38 = (unint64_t *)v30;
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      }
    }
  }
  else if ((a8 & 1) != 0)
  {
    TRawSymbolOwnerData<Pointer64>::snap_existing_symbol_to_length_using_address((uint64_t)a1, v37);
  }
  else
  {
    v15 = 0x4EC4EC4EC4EC4EC5 * ((a1[24] - v12) >> 3);
    v24.n128_u64[0] = v37;
    v24.n128_u64[1] = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>(v10, v24.n128_u64, &v24);
    v16 = a1[24];
    if (v16 >= a1[25])
    {
      v22 = std::vector<TRawSymbol<Pointer64>>::__emplace_back_slow_path<unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>(a1 + 23, &v37, (uint64_t *)&v36, (uint64_t *)&v35, (uint64_t *)&v34, &v33, &v32);
    }
    else
    {
      v17 = v36;
      v19 = (uint64_t)v34;
      v18 = (uint64_t)v35;
      v20 = v33;
      v21 = v32;
      *(_QWORD *)v16 = v37;
      *(_QWORD *)(v16 + 8) = v17;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = v18;
      *(_QWORD *)(v16 + 40) = v19;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_QWORD *)(v16 + 96) = 0;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)(v16 + 73) = 0u;
      if (v21)
      {
        *(_OWORD *)(v16 + 48) = *v21;
        v20 |= 0x80000000;
      }
      *(_DWORD *)(v16 + 28) = v20;
      v22 = v16 + 104;
    }
    a1[24] = v22;
  }
}

void sub_1B40FBAA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1 + 64;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer64>::snap_existing_symbol_to_length_using_address(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v13;

  TRawSymbolOwnerData<Pointer64>::prepare_symbols(a1);
  v4 = *(_QWORD **)(a1 + 184);
  v5 = *(_QWORD **)(a1 + 192);
  if (v5 != v4)
  {
    v6 = 0x4EC4EC4EC4EC4EC5 * (v5 - v4);
    v7 = *(_QWORD **)(a1 + 184);
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[13 * (v6 >> 1)];
      v11 = *v9;
      v10 = v9 + 13;
      v6 += ~(v6 >> 1);
      if (v11 < a2)
        v7 = v10;
      else
        v6 = v8;
    }
    while (v6);
    if (v7 != v5 && v7 != v4)
    {
      v13 = a2 - *(v7 - 13);
      if (*(v7 - 12) - 1 >= v13)
        *(v7 - 12) = v13;
    }
  }
}

void TRawSymbolOwnerData<Pointer32>::emplace_symbol(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, _OWORD *a7, char a8)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _OWORD *v23;
  uint64_t v24;
  unsigned int v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  int *v29;
  __int128 v30;
  _BYTE v31[32];
  uint64_t v32;
  _OWORD *v33;
  int v34;
  int *v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;

  v37 = a3;
  v38 = a2;
  v35 = (int *)a5;
  v36 = (uint64_t *)a4;
  v34 = a6;
  v33 = a7;
  v11 = a1 + 51;
  v12 = a2;
  *(_QWORD *)&v26 = a2;
  v13 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>(a1 + 51, (unint64_t *)&v26);
  v14 = a1[23];
  if (v13 && v13[2] == v12)
  {
    if ((a8 & 1) == 0)
    {
      v15 = v14 + 96 * v13[3];
      v16 = atomic_load((unsigned int *)(v15 + 20));
      if ((v16 & 0x10) != 0 && (v34 & 0x10) != 0)
      {
        v34 |= 0x200u;
        v39 = &v38;
        *(_QWORD *)&v26 = &v38;
        *((_QWORD *)&v26 + 1) = &v37;
        v27 = (uint64_t *)&v36;
        v28 = (uint64_t *)&v35;
        v29 = &v34;
        *(_QWORD *)&v30 = &v33;
        std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__emplace_multi<std::piecewise_construct_t const&,std::tuple<unsigned int &>,std::tuple<unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>>(a1 + 56, (uint64_t)&std::piecewise_construct, &v39, &v26);
      }
      else
      {
        v26 = __PAIR64__(v37, v38);
        v27 = 0;
        v28 = v36;
        v29 = v35;
        v32 = 0;
        v30 = 0u;
        memset(v31, 0, 25);
        v25 = v34;
        if (v33)
        {
          v30 = *v33;
          v25 = v34 | 0x80000000;
        }
        HIDWORD(v27) = v25;
        if ((v34 & 0x10) != 0)
          swap((int *)v15, (int *)&v26);
        TRawSymbol<Pointer32>::merge_with_symbol(v15, (uint64_t)&v26);
        v39 = (unsigned int *)v31;
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      }
    }
  }
  else if ((a8 & 1) != 0)
  {
    TRawSymbolOwnerData<Pointer32>::snap_existing_symbol_to_length_using_address((uint64_t)a1, a2);
  }
  else
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * ((a1[24] - v14) >> 5);
    *(_QWORD *)&v26 = v12;
    *((_QWORD *)&v26 + 1) = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned int,unsigned long>>(v11, (unsigned int *)&v26);
    v18 = a1[24];
    if (v18 >= a1[25])
    {
      v24 = std::vector<TRawSymbol<Pointer32>>::__emplace_back_slow_path<unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>(a1 + 23, &v38, (int *)&v37, (uint64_t *)&v36, (uint64_t *)&v35, &v34, &v33);
    }
    else
    {
      v19 = v37;
      v21 = (uint64_t)v35;
      v20 = (uint64_t)v36;
      v22 = v34;
      v23 = v33;
      *(_DWORD *)v18 = v38;
      *(_DWORD *)(v18 + 4) = v19;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v18 + 24) = v20;
      *(_QWORD *)(v18 + 32) = v21;
      *(_OWORD *)(v18 + 40) = 0u;
      *(_QWORD *)(v18 + 88) = 0;
      *(_OWORD *)(v18 + 56) = 0u;
      *(_OWORD *)(v18 + 65) = 0u;
      if (v23)
      {
        *(_OWORD *)(v18 + 40) = *v23;
        v22 |= 0x80000000;
      }
      *(_DWORD *)(v18 + 20) = v22;
      v24 = v18 + 96;
    }
    a1[24] = v24;
  }
}

void sub_1B40FBD80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1 + 56;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer32>::snap_existing_symbol_to_length_using_address(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unsigned int *v9;
  char *v10;
  unsigned int v11;
  unsigned int v13;

  TRawSymbolOwnerData<Pointer32>::prepare_symbols(a1);
  v4 = *(char **)(a1 + 184);
  v5 = *(char **)(a1 + 192);
  if (v5 != v4)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 5);
    v7 = *(char **)(a1 + 184);
    do
    {
      v8 = v6 >> 1;
      v9 = (unsigned int *)&v7[96 * (v6 >> 1)];
      v11 = *v9;
      v10 = (char *)(v9 + 24);
      v6 += ~(v6 >> 1);
      if (v11 < a2)
        v7 = v10;
      else
        v6 = v8;
    }
    while (v6);
    if (v7 != v5 && v7 != v4)
    {
      v13 = a2 - *((_DWORD *)v7 - 24);
      if (*((_DWORD *)v7 - 23) - 1 >= v13)
        *((_DWORD *)v7 - 23) = v13;
    }
  }
}

uint64_t TRawSymbolOwnerData<Pointer32>::~TRawSymbolOwnerData(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;

  *(_QWORD *)a1 = &off_1E6775588;
  v3 = (void **)(a1 + 184);
  v2 = *(_QWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 192);
  while (v2 != v4)
  {
    TRawSymbol<Pointer32>::release_memory(v2);
    v2 += 96;
  }
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    v6 = CSCppTextSectionDescriptorMap<Pointer32>::~CSCppTextSectionDescriptorMap(v5);
    MEMORY[0x1B5E36940](v6, 0x1020C40791C62A7);
  }
  v7 = *(void **)(a1 + 488);
  if (v7)
  {
    *(_QWORD *)(a1 + 496) = v7;
    operator delete(v7);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::~__hash_table(a1 + 448);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 408);
  v8 = *(void **)(a1 + 376);
  if (v8)
  {
    *(_QWORD *)(a1 + 384) = v8;
    operator delete(v8);
  }
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 312);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 272);
  v9 = *(void **)(a1 + 208);
  if (v9)
  {
    *(_QWORD *)(a1 + 216) = v9;
    operator delete(v9);
  }
  v12 = v3;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
  }
  v12 = (void **)(a1 + 136);
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 96);
  *(_QWORD *)a1 = off_1E6775488;
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void TRawSymbolOwnerData<Pointer32>::~TRawSymbolOwnerData(uint64_t a1)
{
  TRawSymbolOwnerData<Pointer32>::~TRawSymbolOwnerData(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TRawSymbolOwnerData<Pointer64>::~TRawSymbolOwnerData(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;

  *(_QWORD *)a1 = &off_1E6775758;
  v3 = (void **)(a1 + 184);
  v2 = *(_QWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 192);
  while (v2 != v4)
  {
    TRawSymbol<Pointer64>::release_memory(v2);
    v2 += 104;
  }
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    v6 = CSCppTextSectionDescriptorMap<Pointer64>::~CSCppTextSectionDescriptorMap(v5);
    MEMORY[0x1B5E36940](v6, 0x1020C40791C62A7);
  }
  v7 = *(void **)(a1 + 496);
  if (v7)
  {
    *(_QWORD *)(a1 + 504) = v7;
    operator delete(v7);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::~__hash_table(a1 + 456);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 416);
  v8 = *(void **)(a1 + 384);
  if (v8)
  {
    *(_QWORD *)(a1 + 392) = v8;
    operator delete(v8);
  }
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 320);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 280);
  v9 = *(void **)(a1 + 208);
  if (v9)
  {
    *(_QWORD *)(a1 + 216) = v9;
    operator delete(v9);
  }
  v12 = v3;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
  }
  v12 = (void **)(a1 + 136);
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 96);
  *(_QWORD *)a1 = off_1E6775488;
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void TRawSymbolOwnerData<Pointer64>::~TRawSymbolOwnerData(uint64_t a1)
{
  TRawSymbolOwnerData<Pointer64>::~TRawSymbolOwnerData(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>(v7, v9);
  v11 = &v10[96 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[96 * v12];
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  *(_OWORD *)(v11 + 65) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  TRawSymbol<Pointer32>::operator=((uint64_t)v11, a2);
  v15[2] = v11 + 96;
  std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(v15);
  return v13;
}

void sub_1B40FC1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbol<Pointer32>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    v4 = (unsigned int *)(a2 + 20);
    v5 = atomic_load((unsigned int *)(a2 + 20));
    *(_DWORD *)(a1 + 20) = v5;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    std::vector<TRawSymbol<Pointer32>>::__vdeallocate((void **)(a1 + 56));
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v6 = atomic_load(v4);
    atomic_store(v6 & 0xFE39FFFB, v4);
  }
  return a1;
}

{
  unsigned int v4;

  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    v4 = atomic_load((unsigned int *)(a2 + 20));
    *(_DWORD *)(a1 + 20) = v4 & 0xFE39FFFB;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    std::vector<TRawSymbol<Pointer32>>::__assign_with_size[abi:ne180100]<TRawSymbol<Pointer32>*,TRawSymbol<Pointer32>*>(a1 + 56, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5));
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  return a1;
}

void std::vector<TRawSymbol<Pointer32>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  void **v6;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 96;
        v6 = (void **)(v3 - 40);
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v6);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::reverse_iterator<TRawSymbol<Pointer32>*>,std::reverse_iterator<TRawSymbol<Pointer32>*>,std::reverse_iterator<TRawSymbol<Pointer32>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::reverse_iterator<TRawSymbol<Pointer32>*>,std::reverse_iterator<TRawSymbol<Pointer32>*>,std::reverse_iterator<TRawSymbol<Pointer32>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      *(_QWORD *)(v7 - 96) = 0;
      v10 = v7 - 96;
      v9 -= 96;
      *(_QWORD *)(v10 + 88) = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v10, v9);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,std::reverse_iterator<TRawSymbol<Pointer32>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,std::reverse_iterator<TRawSymbol<Pointer32>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,std::reverse_iterator<TRawSymbol<Pointer32>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,std::reverse_iterator<TRawSymbol<Pointer32>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 56);
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 96;
  }
}

void **std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(void **a1)
{
  std::__split_buffer<TRawSymbol<Pointer32>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<TRawSymbol<Pointer32>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    v4 = (void **)(i - 40);
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x13B13B13B13B13BLL)
    v9 = 0x276276276276276;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>(v7, v9);
  v11 = &v10[104 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[104 * v12];
  *((_QWORD *)v11 + 12) = 0;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_OWORD *)(v11 + 73) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  TRawSymbol<Pointer64>::operator=((uint64_t)v11, a2);
  v15[2] = v11 + 104;
  std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v15);
  return v13;
}

void sub_1B40FC66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbol<Pointer64>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v4 = (unsigned int *)(a2 + 28);
    v5 = atomic_load((unsigned int *)(a2 + 28));
    *(_DWORD *)(a1 + 28) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    std::vector<TRawSymbol<Pointer64>>::__vdeallocate((void **)(a1 + 64));
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v6 = atomic_load(v4);
    atomic_store(v6 & 0xFE39FFFB, v4);
  }
  return a1;
}

{
  unsigned int v4;

  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v4 = atomic_load((unsigned int *)(a2 + 28));
    *(_DWORD *)(a1 + 28) = v4 & 0xFE39FFFB;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    std::vector<TRawSymbol<Pointer64>>::__assign_with_size[abi:ne180100]<TRawSymbol<Pointer64>*,TRawSymbol<Pointer64>*>(a1 + 64, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void std::vector<TRawSymbol<Pointer64>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  void **v6;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 104;
        v6 = (void **)(v3 - 40);
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v6);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      *(_OWORD *)(v7 - 104) = 0u;
      v10 = v7 - 104;
      v9 -= 104;
      *(_QWORD *)(v10 + 96) = 0;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v10, v9);
      v7 = *((_QWORD *)&v16 + 1) - 104;
      *((_QWORD *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 64);
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 104;
  }
}

void **std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(void **a1)
{
  std::__split_buffer<TRawSymbol<Pointer64>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<TRawSymbol<Pointer64>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    v4 = (void **)(i - 40);
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

void std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 96;
        v7 = v4 - 40;
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 104;
        v7 = v4 - 40;
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__emplace_back_slow_path<unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int *a6, _OWORD **a7)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _OWORD *v26;
  uint64_t v27;
  void *v29[5];

  v8 = *a1;
  v9 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x276276276276276)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v17 = (uint64_t)(a1 + 2);
  v18 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v8) >> 3);
  if (2 * v18 > v10)
    v10 = 2 * v18;
  if (v18 >= 0x13B13B13B13B13BLL)
    v19 = 0x276276276276276;
  else
    v19 = v10;
  v29[4] = a1 + 2;
  if (v19)
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>(v17, v19);
  else
    v20 = 0;
  v21 = &v20[104 * v9];
  v29[0] = v20;
  v29[1] = v21;
  v29[3] = &v20[104 * v19];
  v22 = *a3;
  v23 = *a4;
  v24 = *a5;
  v25 = *a6;
  v26 = *a7;
  *(_QWORD *)v21 = *a2;
  *((_QWORD *)v21 + 1) = v22;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  *((_QWORD *)v21 + 4) = v23;
  *((_QWORD *)v21 + 5) = v24;
  *((_OWORD *)v21 + 3) = 0u;
  *((_QWORD *)v21 + 12) = 0;
  *(_OWORD *)(v21 + 73) = 0u;
  *((_OWORD *)v21 + 4) = 0u;
  if (v26)
  {
    *((_OWORD *)v21 + 3) = *v26;
    v25 |= 0x80000000;
  }
  *(_DWORD *)&v20[104 * v9 + 28] = v25;
  v29[2] = v21 + 104;
  std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v29);
  v27 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v29);
  return v27;
}

void sub_1B40FCC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__emplace_back_slow_path<unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>(uint64_t *a1, _DWORD *a2, int *a3, uint64_t *a4, uint64_t *a5, int *a6, _OWORD **a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _OWORD *v26;
  uint64_t v27;
  void *v29[5];

  v8 = *a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v10 = v9 + 1;
  if (v9 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v17 = (uint64_t)(a1 + 2);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v8) >> 5);
  if (2 * v18 > v10)
    v10 = 2 * v18;
  if (v18 >= 0x155555555555555)
    v19 = 0x2AAAAAAAAAAAAAALL;
  else
    v19 = v10;
  v29[4] = a1 + 2;
  if (v19)
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>(v17, v19);
  else
    v20 = 0;
  v21 = &v20[96 * v9];
  v29[0] = v20;
  v29[1] = v21;
  v29[3] = &v20[96 * v19];
  v22 = *a3;
  v23 = *a4;
  v24 = *a5;
  v25 = *a6;
  v26 = *a7;
  *(_DWORD *)v21 = *a2;
  *((_DWORD *)v21 + 1) = v22;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = v23;
  *((_QWORD *)v21 + 4) = v24;
  *(_OWORD *)(v21 + 40) = 0u;
  *((_QWORD *)v21 + 11) = 0;
  *(_OWORD *)(v21 + 65) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  if (v26)
  {
    *(_OWORD *)(v21 + 40) = *v26;
    v25 |= 0x80000000;
  }
  *(_DWORD *)&v20[96 * v9 + 20] = v25;
  v29[2] = v21 + 96;
  std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(a1, v29);
  v27 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(v29);
  return v27;
}

void sub_1B40FCDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void CSCppTextSectionDescriptorMap<Pointer32>::_store_section_descriptor_for_range(uint64_t a1, int64x2_t *a2)
{
  std::mutex *v4;
  int32x2_t v5;
  int64x2_t *v6;

  v6 = a2;
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = vmovn_s64(*a2);
  std::__tree<std::__value_type<TRange<Pointer32>,CSCppTextSectionDataDescriptor *>,std::__map_value_compare<TRange<Pointer32>,std::__value_type<TRange<Pointer32>,CSCppTextSectionDataDescriptor *>,std::less<TRange<Pointer32>>,true>,std::allocator<std::__value_type<TRange<Pointer32>,CSCppTextSectionDataDescriptor *>>>::__emplace_unique_key_args<TRange<Pointer32>,TRange<Pointer32>&,CSCppTextSectionDataDescriptor *&>((uint64_t **)a1, (unsigned int *)&v5, (uint64_t *)&v5, (uint64_t *)&v6);
  std::mutex::unlock(v4);
}

void sub_1B40FCEEC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<TRange<Pointer32>,CSCppTextSectionDataDescriptor *>,std::__map_value_compare<TRange<Pointer32>,std::__value_type<TRange<Pointer32>,CSCppTextSectionDataDescriptor *>,std::less<TRange<Pointer32>>,true>,std::allocator<std::__value_type<TRange<Pointer32>,CSCppTextSectionDataDescriptor *>>>::__emplace_unique_key_args<TRange<Pointer32>,TRange<Pointer32>&,CSCppTextSectionDataDescriptor *&>(uint64_t **a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *((_DWORD *)v7 + 8);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x30uLL);
    v13 = *a4;
    v12[4] = *a3;
    v12[5] = v13;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return v12;
  }
  return (uint64_t *)v10;
}

unint64_t CSCppTextSectionDataDescriptor::_get_text_section_locked<Pointer32>(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int is_little_endian;
  char is_64_bit;
  uint64_t v10;

  v3 = a1;
  if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 88) && !*(_BYTE *)(a1 + 208))
  {
    *(_BYTE *)(a1 + 208) = 1;
    v10 = *(_QWORD *)(a3 + 112);
    is_little_endian = CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v10);
    is_64_bit = CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v10);
    if (is_little_endian)
    {
      if ((is_64_bit & 1) != 0)
        a1 = CSCppTextSectionDataDescriptor::_fault_text<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(v3, a2, a3);
      else
        a1 = CSCppTextSectionDataDescriptor::_fault_text<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(v3, a2, a3);
      v4 = HIDWORD(a1);
    }
    else
    {
      LODWORD(a1) = 0;
      LODWORD(v4) = 0;
    }
  }
  else
  {
    LODWORD(a1) = *(_DWORD *)a1;
    v4 = *(_QWORD *)(v3 + 8);
  }
  return a1 | ((unint64_t)v4 << 32);
}

unint64_t CSCppTextSectionDataDescriptor::_fault_text<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 v5;
  int v7;
  __int128 v9;
  uint64_t v10;

  if (!*(_QWORD *)(a1 + 16))
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_19;
    CSCppTextSectionDataDescriptor::_fault_text_from_local_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, a2, a3, (uint64_t)&v9);
    if (v10)
    {
      v7 = 3;
LABEL_14:
      *(_DWORD *)(a1 + 136) = v7;
      v5 = v9;
      return v5 | ((unint64_t)DWORD2(v5) << 32);
    }
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_19:
      if (!*(_QWORD *)(a3 + 120))
        goto LABEL_20;
      CSCppTextSectionDataDescriptor::_fault_text_from_path<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, a2, a3, (uint64_t)&v9);
      if (v10)
      {
        v7 = 1;
        goto LABEL_14;
      }
      if (!*(_QWORD *)(a1 + 16))
      {
LABEL_20:
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 40))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56)))
        {
          CSCppTextSectionDataDescriptor::_fault_text_from_task<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, a2, a3, (uint64_t)&v9);
          if (v10)
          {
            v7 = 2;
            goto LABEL_14;
          }
        }
      }
    }
    *(_DWORD *)(a1 + 136) = 0;
    LODWORD(v5) = 0;
    DWORD2(v5) = 0;
    return v5 | ((unint64_t)DWORD2(v5) << 32);
  }
  v5 = *(_OWORD *)a1;
  return v5 | ((unint64_t)DWORD2(v5) << 32);
}

unint64_t CSCppTextSectionDataDescriptor::_fault_text<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 v5;
  int v7;
  __int128 v9;
  uint64_t v10;

  if (!*(_QWORD *)(a1 + 16))
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_19;
    CSCppTextSectionDataDescriptor::_fault_text_from_local_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(a1, a2, a3, (uint64_t)&v9);
    if (v10)
    {
      v7 = 3;
LABEL_14:
      *(_DWORD *)(a1 + 136) = v7;
      v5 = v9;
      return v5 | ((unint64_t)DWORD2(v5) << 32);
    }
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_19:
      if (!*(_QWORD *)(a3 + 120))
        goto LABEL_20;
      CSCppTextSectionDataDescriptor::_fault_text_from_path<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(a1, a2, a3, (uint64_t)&v9);
      if (v10)
      {
        v7 = 1;
        goto LABEL_14;
      }
      if (!*(_QWORD *)(a1 + 16))
      {
LABEL_20:
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 40))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56)))
        {
          CSCppTextSectionDataDescriptor::_fault_text_from_task<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(a1, a2, a3, (uint64_t)&v9);
          if (v10)
          {
            v7 = 2;
            goto LABEL_14;
          }
        }
      }
    }
    *(_DWORD *)(a1 + 136) = 0;
    LODWORD(v5) = 0;
    DWORD2(v5) = 0;
    return v5 | ((unint64_t)DWORD2(v5) << 32);
  }
  v5 = *(_OWORD *)a1;
  return v5 | ((unint64_t)DWORD2(v5) << 32);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_local_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  __int128 v18;
  uint64_t v19;
  const char **v20;

  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775588;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_DWORD *)(v8 + 304) = 1065353216;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_DWORD *)(v8 + 344) = 1065353216;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_BYTE *)(v8 + 400) = 0;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_DWORD *)(v8 + 440) = 1065353216;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_DWORD *)(v8 + 480) = 1065353216;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 488) = 0;
  sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, (_QWORD *)v8, 0, 0, &v19);
  v9 = v19;
  if (v19)
  {
    if (a2)
    {
      extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(v19, v8, *a2);
    }
    else
    {
      v10 = *(_BYTE *)(a1 + 81);
      v17 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(v19, v10, (const char **)&v17);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(v9, v8, (uint64_t)v17);
    }
    v17 = *(char **)(v8 + 136);
    v11 = (uint64_t *)v17;
    v18 = *(_OWORD *)(v8 + 144);
    v12 = (uint64_t *)v18;
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v11, v12, v12 - v11);
    v13 = *(_QWORD *)(v8 + 240);
    v14 = HIDWORD(*(_QWORD *)(v8 + 232));
    *(_QWORD *)a1 = *(_QWORD *)(v8 + 232);
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a4 + 16) = v13;
    *(_OWORD *)a4 = *(_OWORD *)a1;
    v20 = (const char **)&v17;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    v15 = v19;
    v19 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40FD4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v16;

  a14 = (void **)&a10;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = a13;
  a13 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_path<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t text_section_data_from_header_for;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  void **v26;
  CSCppDsymData *v27;
  _BYTE v28[24];
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[1024];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775588;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_DWORD *)(v8 + 304) = 1065353216;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_DWORD *)(v8 + 344) = 1065353216;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_BYTE *)(v8 + 400) = 0;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_DWORD *)(v8 + 440) = 1065353216;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_DWORD *)(v8 + 480) = 1065353216;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 488) = 0;
  v9 = *(char **)(a3 + 128);
  if (v9 || (v9 = *(char **)(a3 + 120)) != 0)
    v10 = strstr(v9, ".dSYM");
  else
    v10 = 0;
  if ((*(_BYTE *)(a3 + 109) & 1) != 0 || v10)
  {
    v26 = 0;
    v27 = 0;
    make_dsym_data_from_path_and_uuid(v9, (const CFUUIDBytes *)(a3 + 16), (uint64_t)v28);
    if (v34)
    {
      v12 = operator new();
      *(_OWORD *)v12 = *(_OWORD *)v28;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)&v28[16];
      *(_OWORD *)v28 = 0uLL;
      *(_OWORD *)(v12 + 24) = v29;
      *(_QWORD *)(v12 + 40) = v30;
      *(_QWORD *)&v28[16] = 0;
      v29 = 0uLL;
      v30 = 0;
      *(_OWORD *)(v12 + 48) = v31;
      *(_QWORD *)(v12 + 64) = v32;
      v32 = 0;
      v31 = 0uLL;
      memcpy((void *)(v12 + 72), v33, 0x400uLL);
      v13 = (void **)v27;
      v27 = (CSCppDsymData *)v12;
      if (v13)
      {
        CSCppDsymData::~CSCppDsymData(v13);
        MEMORY[0x1B5E36940]();
        v12 = (uint64_t)v27;
      }
      v26 = (void **)v12;
    }
    sod_header_from_debug_symbols<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, (void ***)&v27, (CSCppDsymData **)&v26, &v25);
    v11 = v25;
    if (!v25)
    {
      sod_header_from_colocated_dsym<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, (void ***)&v27, &v26, &v25);
      v11 = v25;
    }
    if (v34)
      CSCppDsymData::~CSCppDsymData((void **)v28);
    v14 = (void **)v27;
    v27 = 0;
    if (v14)
    {
      CSCppDsymData::~CSCppDsymData(v14);
      MEMORY[0x1B5E36940]();
    }
  }
  else
  {
    sod_header_from_on_disk_binary<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, (uint64_t *)v28);
    v11 = *(_QWORD *)v28;
  }
  if (v11
    || (sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, 0, 0, v28), (v11 = *(_QWORD *)v28) != 0))
  {
    std::string::__assign_external((std::string *)(a1 + 56), *(const std::string::value_type **)(v11 + 40));
    v15 = CSCppTextSectionDataDescriptor::_compute_slide_between_symbol_owner_and_header<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, v11, a3);
    v16 = v15;
    if (a2)
    {
      *(_DWORD *)a2 -= v15;
      text_section_data_from_header_for = extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(v11, v8, *a2);
    }
    else
    {
      v18 = *(_BYTE *)(a1 + 81);
      *(_QWORD *)v28 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(v11, v18, (const char **)v28);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(v11, v8, *(uint64_t *)v28);
      text_section_data_from_header_for = *(_QWORD *)v28;
    }
    v19 = *(_QWORD *)(v8 + 240);
    v20 = *(_QWORD *)(v8 + 232);
    *(_QWORD *)(a1 + 8) = HIDWORD(*(_QWORD *)(v8 + 232));
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)a1 = v20 + v16;
    if (*(_BYTE *)(v11 + 64))
      *(_QWORD *)(a1 + 120) = *(unsigned int *)(v11 + 56);
    if (text_section_data_from_header_for)
      v21 = *(unsigned int *)(text_section_data_from_header_for + 40);
    else
      v21 = 0;
    *(_QWORD *)(a1 + 112) = v21;
    *(_QWORD *)v28 = *(_QWORD *)(v8 + 136);
    v22 = *(uint64_t **)v28;
    *(_OWORD *)&v28[8] = *(_OWORD *)(v8 + 144);
    v23 = *(uint64_t **)&v28[8];
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v22, v23, v23 - v22);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
    v27 = (CSCppDsymData *)v28;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40FD934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v6;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, void **);
  if (LOBYTE(STACK[0x468]))
    CSCppDsymData::~CSCppDsymData((void **)va1);
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)va, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_task<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  const char **v22;

  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775588;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_DWORD *)(v8 + 304) = 1065353216;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_DWORD *)(v8 + 344) = 1065353216;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_BYTE *)(v8 + 400) = 0;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_DWORD *)(v8 + 440) = 1065353216;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_DWORD *)(v8 + 480) = 1065353216;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 488) = 0;
  v21 = 0;
  sod_header_from_task_fault<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a3, v8, &v21, &v20);
  if (v21)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 16))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
    task_resume(*(_DWORD *)(v9 + 8));
  }
  v10 = v20;
  if (v20)
  {
    if (a2)
    {
      extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(v20, v8, *a2);
    }
    else
    {
      v11 = *(_BYTE *)(a1 + 81);
      v18 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(v20, v11, (const char **)&v18);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(v10, v8, (uint64_t)v18);
    }
    v18 = *(char **)(v8 + 136);
    v12 = (uint64_t *)v18;
    v19 = *(_OWORD *)(v8 + 144);
    v13 = (uint64_t *)v19;
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v12, v13, v13 - v12);
    v14 = *(_QWORD *)(v8 + 240);
    v15 = HIDWORD(*(_QWORD *)(v8 + 232));
    *(_QWORD *)a1 = *(_QWORD *)(v8 + 232);
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a4 + 16) = v14;
    *(_OWORD *)a4 = *(_OWORD *)a1;
    v22 = (const char **)&v18;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40FDC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v16;

  a14 = (void **)&a9;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = a12;
  a12 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t *v11;
  uint64_t v12;

  v12 = 0;
  v7[0] = a3;
  v7[1] = &off_1E67756C8;
  v5 = *(_OWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a1 + 8);
  v9 = v5;
  v10[0] = *(_OWORD *)(a1 + 40);
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)(a1 + 49);
  v11 = &v12;
  _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,TRange<Pointer32>)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(a1, (uint64_t)v7);
  _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(a1, a2, v12);
  return v12;
}

BOOL CSCppSegmentRange::is_skippable(CSCppSegmentRange *this)
{
  const char *v1;

  v1 = (const char *)*((_QWORD *)this + 3);
  if (!v1)
    v1 = (const char *)*((_QWORD *)this + 2);
  return !strncmp(v1, "__PAGEZERO", 0xBuLL)
      || !strncmp(v1, "__LINKEDIT", 0xBuLL)
      || !strncmp(v1, "__LINKINFO", 0xBuLL)
      || !strncmp(v1, "__PRELINK", 9uLL)
      || !strncmp(v1, "__OBJC_R", 8uLL)
      || !strncmp(v1, "__DWARF", 7uLL)
      || strncmp(v1, "__PLK", 5uLL) == 0;
}

_DWORD *_iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,TRange<Pointer32>)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *result;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(v3 + 20);
  v8 = *(_DWORD *)(v3 + 16);
  v9 = v3;
  v10 = v3 + 28 + v4;
  v12 = 0;
  v13 = 0;
  v11 = v3 + 28;
  while (1)
  {
    result = TSectionIterator<SizeAndEndianness<Pointer32,LittleEndian>>::section((uint64_t)&v8);
    if (!result)
      break;
    v6 = result[9];
    if (v6)
    {
      v7 = *(_DWORD *)(a2 + 40) + result[8];
      if (*(_DWORD *)a2 >= v7 && *(_DWORD *)(a2 + 4) + *(_DWORD *)a2 <= v7 + v6)
      {
        **(_QWORD **)(a2 + 80) = result;
        return result;
      }
    }
  }
  return result;
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_local_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void **v20;

  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775758;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 312) = 1065353216;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_DWORD *)(v8 + 352) = 1065353216;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_BYTE *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(v8 + 448) = 1065353216;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_DWORD *)(v8 + 488) = 1065353216;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, (_QWORD *)v8, 0, 0, &v19);
  v9 = v19;
  if (v19)
  {
    if (a2)
    {
      extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(v19, v8, *a2);
    }
    else
    {
      v10 = *(_BYTE *)(a1 + 81);
      v17 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(v19, v10, (unint64_t *)&v17);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(v9, v8, v17);
    }
    v17 = *(_QWORD *)(v8 + 136);
    v11 = (uint64_t *)v17;
    v18 = *(_OWORD *)(v8 + 144);
    v12 = (uint64_t *)v18;
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v11, v12, v12 - v11);
    v13 = *(_OWORD *)(v8 + 232);
    *(_OWORD *)a1 = v13;
    v14 = *(_QWORD *)(v8 + 248);
    *(_QWORD *)(a1 + 16) = v14;
    *(_OWORD *)a4 = v13;
    *(_QWORD *)(a4 + 16) = v14;
    v20 = (void **)&v17;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v20);
    v15 = v19;
    v19 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40FE060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v16;

  a14 = (void **)&a10;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = a13;
  a13 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_path<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t text_section_data_from_header_for;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v23;
  void **v24;
  CSCppDsymData *v25;
  _BYTE v26[24];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[1024];
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775758;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 312) = 1065353216;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_DWORD *)(v8 + 352) = 1065353216;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_BYTE *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(v8 + 448) = 1065353216;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_DWORD *)(v8 + 488) = 1065353216;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  v9 = *(char **)(a3 + 128);
  if (v9 || (v9 = *(char **)(a3 + 120)) != 0)
    v10 = strstr(v9, ".dSYM");
  else
    v10 = 0;
  if ((*(_BYTE *)(a3 + 109) & 1) != 0 || v10)
  {
    v24 = 0;
    v25 = 0;
    make_dsym_data_from_path_and_uuid(v9, (const CFUUIDBytes *)(a3 + 16), (uint64_t)v26);
    if (v32)
    {
      v12 = operator new();
      *(_OWORD *)v12 = *(_OWORD *)v26;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)&v26[16];
      *(_OWORD *)v26 = 0uLL;
      *(_OWORD *)(v12 + 24) = v27;
      *(_QWORD *)(v12 + 40) = v28;
      *(_QWORD *)&v26[16] = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_OWORD *)(v12 + 48) = v29;
      *(_QWORD *)(v12 + 64) = v30;
      v30 = 0;
      v29 = 0uLL;
      memcpy((void *)(v12 + 72), v31, 0x400uLL);
      v13 = (void **)v25;
      v25 = (CSCppDsymData *)v12;
      if (v13)
      {
        CSCppDsymData::~CSCppDsymData(v13);
        MEMORY[0x1B5E36940]();
        v12 = (uint64_t)v25;
      }
      v24 = (void **)v12;
    }
    sod_header_from_debug_symbols<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, (void ***)&v25, (CSCppDsymData **)&v24, &v23);
    v11 = v23;
    if (!v23)
    {
      sod_header_from_colocated_dsym<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, (void ***)&v25, &v24, &v23);
      v11 = v23;
    }
    if (v32)
      CSCppDsymData::~CSCppDsymData((void **)v26);
    v14 = (void **)v25;
    v25 = 0;
    if (v14)
    {
      CSCppDsymData::~CSCppDsymData(v14);
      MEMORY[0x1B5E36940]();
    }
  }
  else
  {
    sod_header_from_on_disk_binary<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, (uint64_t *)v26);
    v11 = *(_QWORD *)v26;
  }
  if (v11
    || (sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, 0, 0, v26), (v11 = *(_QWORD *)v26) != 0))
  {
    std::string::__assign_external((std::string *)(a1 + 56), *(const std::string::value_type **)(v11 + 48));
    v15 = CSCppTextSectionDataDescriptor::_compute_slide_between_symbol_owner_and_header<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v11, a3);
    v16 = v15;
    if (a2)
    {
      *(_DWORD *)a2 -= v15;
      text_section_data_from_header_for = extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(v11, v8, *a2);
    }
    else
    {
      v18 = *(_BYTE *)(a1 + 81);
      *(_QWORD *)v26 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(v11, v18, (unint64_t *)v26);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(v11, v8, *(uint64_t *)v26);
      text_section_data_from_header_for = *(_QWORD *)v26;
    }
    *(_OWORD *)a1 = *(_OWORD *)(v8 + 232);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 248);
    *(_QWORD *)a1 += v16;
    if (*(_BYTE *)(v11 + 80))
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(v11 + 64);
    if (text_section_data_from_header_for)
      v19 = *(unsigned int *)(text_section_data_from_header_for + 48);
    else
      v19 = 0;
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)v26 = *(_QWORD *)(v8 + 136);
    v20 = *(uint64_t **)v26;
    *(_OWORD *)&v26[8] = *(_OWORD *)(v8 + 144);
    v21 = *(uint64_t **)&v26[8];
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v20, v21, v21 - v20);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
    v25 = (CSCppDsymData *)v26;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40FE4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v6;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, void **);
  if (LOBYTE(STACK[0x468]))
    CSCppDsymData::~CSCppDsymData((void **)va1);
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)va, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_fault_text_from_task<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  void **v22;

  v8 = operator new();
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_QWORD *)v8 = &off_1E6775758;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 1065353216;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 312) = 1065353216;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_DWORD *)(v8 + 352) = 1065353216;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_BYTE *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(v8 + 448) = 1065353216;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_DWORD *)(v8 + 488) = 1065353216;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  v21 = 0;
  sod_header_from_task_fault<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a3, v8, &v21, &v20);
  if (v21)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 16))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
    task_resume(*(_DWORD *)(v9 + 8));
  }
  v10 = v20;
  if (v20)
  {
    if (a2)
    {
      extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(v20, v8, *a2);
    }
    else
    {
      v11 = *(_BYTE *)(a1 + 81);
      v18 = 0;
      _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(v20, v11, (unint64_t *)&v18);
      _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(v10, v8, v18);
    }
    v18 = *(_QWORD *)(v8 + 136);
    v12 = (uint64_t *)v18;
    v19 = *(_OWORD *)(v8 + 144);
    v13 = (uint64_t *)v19;
    *(_QWORD *)(v8 + 144) = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    std::vector<std::unique_ptr<CSCppMemory>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>,std::move_iterator<std::__wrap_iter<std::unique_ptr<CSCppMemory>*>>>((uint64_t *)(a1 + 88), *(uint64_t **)(a1 + 96), v12, v13, v13 - v12);
    v14 = *(_OWORD *)(v8 + 232);
    *(_OWORD *)a1 = v14;
    v15 = *(_QWORD *)(v8 + 248);
    *(_QWORD *)(a1 + 16) = v15;
    *(_OWORD *)a4 = v14;
    *(_QWORD *)(a4 + 16) = v15;
    v22 = (void **)&v18;
    std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v22);
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1B40FE7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v16;

  a14 = (void **)&a9;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = a12;
  a12 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t *v13;
  uint64_t v14;

  v14 = 0;
  v8[0] = a3;
  v8[1] = &off_1E6775898;
  v5 = *(_OWORD *)(a1 + 24);
  v6 = *(_OWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 40);
  v12[0] = v6;
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(a1 + 65);
  v9 = *(_OWORD *)(a1 + 8);
  v10 = v5;
  v13 = &v14;
  _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,TRange<Pointer32>)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(a1, (uint64_t)v8);
  _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2, v14);
  return v14;
}

unint64_t _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_text_section_data_from_header_for_range<SizeAndEndianness<Pointer64,LittleEndian>,Pointer32>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,TRange<Pointer32>)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(v3 + 20);
  v8 = *(_DWORD *)(v3 + 16);
  v9 = v3;
  v10 = v3 + 32 + v4;
  v12 = 0;
  v13 = 0;
  v11 = v3 + 32;
  while (1)
  {
    result = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v8);
    if (!result)
      break;
    v6 = *(_QWORD *)(result + 40);
    if (v6)
    {
      v7 = *(_DWORD *)(a2 + 40) + *(_DWORD *)(result + 32);
      if (*(_DWORD *)a2 >= v7 && *(_DWORD *)(a2 + 4) + *(_DWORD *)a2 <= v7 + v6)
      {
        **(_QWORD **)(a2 + 96) = result;
        return result;
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned int,unsigned long>>(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *inserted;
  char v8;

  v4 = operator new(0x20uLL);
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v4[2] = v5;
  v4[3] = v6;
  *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique(a1, v4);
  if ((v8 & 1) == 0)
    operator delete(v4);
  return inserted;
}

void sub_1B40FEA3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = a2;
  v5 = a2 + 2;
  v4 = a2[2];
  *(v5 - 1) = v4;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v4, v5);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  _BOOL8 v12;
  size_t v13;
  unint64_t v14;
  size_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
      v5 = v3 <= a2 ? a2 % v3 : a2;
    else
      v5 = (v3 - 1) & a2;
    v6 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v6)
    {
      for (i = (_QWORD *)*v6; i; i = (_QWORD *)*i)
      {
        v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3)
            return i;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    v11 = 2 * v3;
    v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    v13 = v12 | v11;
    v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v15);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__emplace_multi<unsigned int &,TRawSymbol<Pointer32>>(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  _QWORD *inserted;

  v6 = (char *)operator new(0x78uLL);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = *a2;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *(_OWORD *)(v6 + 89) = 0u;
  TRawSymbol<Pointer32>::operator=((uint64_t)(v6 + 24), a3);
  v7 = *((_QWORD *)v6 + 2);
  *((_QWORD *)v6 + 1) = v7;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__node_insert_multi_prepare((uint64_t)a1, v7, (_QWORD *)v6 + 2);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_perform(a1, v6, inserted);
  return v6;
}

void sub_1B40FED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 10;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B40FF330(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::__emplace_multi<unsigned long long &,TRawSymbol<Pointer64>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  _QWORD *inserted;

  v6 = (char *)operator new(0x80uLL);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = *a2;
  *((_QWORD *)v6 + 15) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 97) = 0u;
  TRawSymbol<Pointer64>::operator=((uint64_t)(v6 + 24), a3);
  v7 = *((_QWORD *)v6 + 2);
  *((_QWORD *)v6 + 1) = v7;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__node_insert_multi_prepare((uint64_t)a1, v7, (_QWORD *)v6 + 2);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_perform(a1, v6, inserted);
  return v6;
}

void sub_1B40FF400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 11;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::__call_once_param<std::tuple<TRawSymbolOwnerData<Pointer32>::prepare_symbols(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>(uint64_t ***a1)
{
  uint64_t v1;
  int *v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v1 = ***a1;
  v2 = *(int **)(v1 + 184);
  v3 = *(unsigned int **)(v1 + 192);
  v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 5));
  if (v3 == (unsigned int *)v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,false>(v2, v3, (uint64_t)&v6, v5, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,false>(int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  char v22;
  int *v23;
  unsigned int v24;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(unsigned int *a1, unsigned int *a2)
{
  void **v2;
  void **v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v14[5];
  __int128 v15;
  _BYTE v16[32];
  uint64_t v17;
  void **v18[11];

  if (a1 != a2)
  {
    v18[9] = v2;
    v18[10] = v3;
    v6 = (uint64_t)(a1 + 24);
    if (a1 + 24 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8[24];
        v10 = *v8;
        v8 = (unsigned int *)v6;
        if (v9 < v10)
        {
          v17 = 0;
          memset(v14, 0, 24);
          v15 = 0u;
          memset(v16, 0, 25);
          TRawSymbol<Pointer32>::operator=((uint64_t)v14, v6);
          v11 = v7;
          while (1)
          {
            TRawSymbol<Pointer32>::operator=((uint64_t)a1 + v11 + 96, (uint64_t)a1 + v11);
            if (!v11)
              break;
            v12 = *(unsigned int *)((char *)a1 + v11 - 96);
            v11 -= 96;
            if (LODWORD(v14[0]) >= v12)
            {
              v13 = (uint64_t)a1 + v11 + 96;
              goto LABEL_10;
            }
          }
          v13 = (uint64_t)a1;
LABEL_10:
          TRawSymbol<Pointer32>::operator=(v13, (uint64_t)v14);
          v18[0] = (void **)v16;
          std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v18);
        }
        v6 = (uint64_t)(v8 + 24);
        v7 += 96;
      }
      while (v8 + 24 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(_DWORD *a1, _DWORD *a2)
{
  void **v2;
  void **v3;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  _QWORD v9[5];
  __int128 v10;
  _BYTE v11[32];
  uint64_t v12;
  void **v13[9];

  if (a1 != a2)
  {
    v13[7] = v2;
    v13[8] = v3;
    v5 = a1;
    v6 = (uint64_t)(a1 + 24);
    if (a1 + 24 != a2)
    {
      do
      {
        v7 = (_DWORD *)v6;
        if (v5[24] < *v5)
        {
          v12 = 0;
          memset(v9, 0, 24);
          v10 = 0u;
          memset(v11, 0, 25);
          TRawSymbol<Pointer32>::operator=((uint64_t)v9, v6);
          do
          {
            TRawSymbol<Pointer32>::operator=((uint64_t)(v5 + 24), (uint64_t)v5);
            v8 = *(v5 - 24);
            v5 -= 24;
          }
          while (LODWORD(v9[0]) < v8);
          TRawSymbol<Pointer32>::operator=((uint64_t)(v5 + 24), (uint64_t)v9);
          v13[0] = (void **)v11;
          std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v13);
        }
        v6 = (uint64_t)(v7 + 24);
        v5 = v7;
      }
      while (v7 + 24 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(int *a1, int *a2, int *a3)
{
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int *v9;

  v6 = *a2;
  v7 = *a3;
  if (*a2 < *a1)
  {
    if (v7 < v6)
    {
      swap(a1, a3);
      return 1;
    }
    swap(a1, a2);
    if (*a3 >= *a2)
      return 1;
    v8 = a2;
    v9 = a3;
LABEL_9:
    swap(v8, v9);
    return 2;
  }
  if (v7 < v6)
  {
    swap(a2, a3);
    if (*a2 >= *a1)
      return 1;
    v8 = a1;
    v9 = a2;
    goto LABEL_9;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSymbol<Pointer32> *,std::__less<void,void> &>(uint64_t a1, int *a2)
{
  int *v4;
  unsigned int v5;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v11[5];
  __int128 v12;
  _BYTE v13[32];
  uint64_t v14;
  void **v15;

  v14 = 0;
  memset(v11, 0, 24);
  v12 = 0u;
  memset(v13, 0, 25);
  TRawSymbol<Pointer32>::operator=((uint64_t)v11, a1);
  if (LODWORD(v11[0]) >= *(a2 - 24))
  {
    v6 = (int *)(a1 + 96);
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v6 += 24;
    }
    while (LODWORD(v11[0]) >= *v4);
  }
  else
  {
    v4 = (int *)a1;
    do
    {
      v5 = v4[24];
      v4 += 24;
    }
    while (LODWORD(v11[0]) >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *(a2 - 24);
      a2 -= 24;
    }
    while (LODWORD(v11[0]) < v7);
  }
  while (v4 < a2)
  {
    swap(v4, a2);
    do
    {
      v8 = v4[24];
      v4 += 24;
    }
    while (LODWORD(v11[0]) >= v8);
    do
    {
      v9 = *(a2 - 24);
      a2 -= 24;
    }
    while (LODWORD(v11[0]) < v9);
  }
  if (v4 - 24 != (int *)a1)
    TRawSymbol<Pointer32>::operator=(a1, (uint64_t)(v4 - 24));
  TRawSymbol<Pointer32>::operator=((uint64_t)(v4 - 24), (uint64_t)v11);
  v15 = (void **)v13;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v15);
  return v4;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSymbol<Pointer32> *,std::__less<void,void> &>(uint64_t a1, int *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD v15[5];
  __int128 v16;
  _BYTE v17[32];
  uint64_t v18;
  void **v19;

  v18 = 0;
  memset(v15, 0, 24);
  v16 = 0u;
  memset(v17, 0, 25);
  TRawSymbol<Pointer32>::operator=((uint64_t)v15, a1);
  v4 = 0;
  do
  {
    v5 = *(_DWORD *)(a1 + v4 + 96);
    v4 += 96;
  }
  while (v5 < LODWORD(v15[0]));
  v6 = a1 + v4;
  v7 = a1 + v4 - 96;
  if (v4 == 96)
  {
    do
    {
      if (v6 >= (unint64_t)a2)
        break;
      v9 = *(a2 - 24);
      a2 -= 24;
    }
    while (v9 >= LODWORD(v15[0]));
  }
  else
  {
    do
    {
      v8 = *(a2 - 24);
      a2 -= 24;
    }
    while (v8 >= LODWORD(v15[0]));
  }
  if (v6 < (unint64_t)a2)
  {
    v10 = (int *)(a1 + v4);
    v11 = a2;
    do
    {
      swap(v10, v11);
      do
      {
        v12 = v10[24];
        v10 += 24;
      }
      while (v12 < LODWORD(v15[0]));
      do
      {
        v13 = *(v11 - 24);
        v11 -= 24;
      }
      while (v13 >= LODWORD(v15[0]));
    }
    while (v10 < v11);
    v7 = (uint64_t)(v10 - 24);
  }
  if (v7 != a1)
    TRawSymbol<Pointer32>::operator=(a1, v7);
  TRawSymbol<Pointer32>::operator=(v7, (uint64_t)v15);
  v19 = (void **)v17;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v19);
  return v7;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(int *a1, int *a2)
{
  _BOOL8 v4;
  int *v5;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v13[5];
  __int128 v14;
  _BYTE v15[32];
  uint64_t v16;
  void **v17;

  v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      if (*(a2 - 24) < *a1)
        swap(a1, a2 - 24);
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, a1 + 24, a2 - 24);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return v4;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return v4;
    default:
      v5 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, a1 + 24, a1 + 48);
      v6 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v7 = 0;
      v8 = 0;
      break;
  }
  while (*v6 >= *v5)
  {
LABEL_14:
    v5 = v6;
    v7 += 96;
    v6 += 24;
    if (v6 == a2)
      return 1;
  }
  v16 = 0;
  memset(v13, 0, 24);
  v14 = 0u;
  memset(v15, 0, 25);
  TRawSymbol<Pointer32>::operator=((uint64_t)v13, (uint64_t)v6);
  v9 = v7;
  while (1)
  {
    TRawSymbol<Pointer32>::operator=((uint64_t)a1 + v9 + 288, (uint64_t)a1 + v9 + 192);
    if (v9 == -192)
      break;
    v10 = *(int *)((char *)a1 + v9 + 96);
    v9 -= 96;
    if (LODWORD(v13[0]) >= v10)
    {
      v11 = (uint64_t)a1 + v9 + 288;
      goto LABEL_12;
    }
  }
  v11 = (uint64_t)a1;
LABEL_12:
  TRawSymbol<Pointer32>::operator=(v11, (uint64_t)v13);
  if (++v8 != 8)
  {
    v17 = (void **)v15;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v17);
    goto LABEL_14;
  }
  v4 = v6 + 24 == a2;
  v17 = (void **)v15;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v17);
  return v4;
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(int *a1, int *a2, int *a3, int *a4)
{
  double result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    *(_QWORD *)&result = swap(a3, a4).n128_u64[0];
    if (*a3 < *a2)
    {
      *(_QWORD *)&result = swap(a2, a3).n128_u64[0];
      if (*a2 < *a1)
        *(_QWORD *)&result = swap(a1, a2).n128_u64[0];
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  double result;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    *(_QWORD *)&result = swap(a4, a5).n128_u64[0];
    if (*a4 < *a3)
    {
      *(_QWORD *)&result = swap(a3, a4).n128_u64[0];
      if (*a3 < *a2)
      {
        *(_QWORD *)&result = swap(a2, a3).n128_u64[0];
        if (*a2 < *a1)
          *(_QWORD *)&result = swap(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 96;
    if ((char *)a2 - (char *)a1 >= 97)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (unsigned int *)&a1[24 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((int *)v6 != a3)
    {
      v14 = (int *)v6;
      do
      {
        if (*v14 < *a1)
        {
          swap(v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>((uint64_t)a1, a4, v9, (unsigned int *)a1);
        }
        v14 += 24;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 97)
    {
      v15 = v8 / 0x60uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,TRawSymbol<Pointer32> *>((uint64_t)a1, v6, a4, v15);
        v6 -= 96;
      }
      while (v15-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  void **v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[5];
  __int128 v19;
  _BYTE v20[32];
  uint64_t v21;
  void **v22[11];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22[9] = v4;
    v22[10] = v5;
    v7 = (uint64_t)a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5)))
    {
      v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5)) | 1;
      v12 = (unsigned int *)(a1 + 96 * v11);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2 >= a3)
      {
        v13 = *v12;
      }
      else
      {
        v13 = *v12;
        v14 = v12[24];
        if (*v12 <= v14)
          v13 = v12[24];
        if (*v12 < v14)
        {
          v12 += 24;
          v11 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2;
        }
      }
      if (v13 >= *a4)
      {
        v21 = 0;
        memset(v18, 0, 24);
        v19 = 0u;
        memset(v20, 0, 25);
        TRawSymbol<Pointer32>::operator=((uint64_t)v18, (uint64_t)a4);
        do
        {
          v15 = (uint64_t)v12;
          TRawSymbol<Pointer32>::operator=(v7, (uint64_t)v12);
          if (v9 < v11)
            break;
          v12 = (unsigned int *)(a1 + 96 * ((2 * v11) | 1));
          if (2 * v11 + 2 >= a3)
          {
            v16 = *v12;
            v11 = (2 * v11) | 1;
          }
          else
          {
            v16 = *v12;
            v17 = v12[24];
            if (*v12 <= v17)
              v16 = v12[24];
            if (*v12 >= v17)
            {
              v11 = (2 * v11) | 1;
            }
            else
            {
              v12 += 24;
              v11 = 2 * v11 + 2;
            }
          }
          v7 = v15;
        }
        while (v16 >= LODWORD(v18[0]));
        TRawSymbol<Pointer32>::operator=(v15, (uint64_t)v18);
        v22[0] = (void **)v20;
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v22);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,TRawSymbol<Pointer32> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD v11[5];
  __int128 v12;
  _BYTE v13[32];
  uint64_t v14;
  void **v15;

  if (a4 >= 2)
  {
    v14 = 0;
    memset(v11, 0, 24);
    v12 = 0u;
    memset(v13, 0, 25);
    TRawSymbol<Pointer32>::operator=((uint64_t)v11, a1);
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, a3, a4);
    v9 = v8;
    v10 = a2 - 96;
    if (v8 == (_DWORD *)v10)
    {
      TRawSymbol<Pointer32>::operator=((uint64_t)v8, (uint64_t)v11);
    }
    else
    {
      TRawSymbol<Pointer32>::operator=((uint64_t)v8, v10);
      TRawSymbol<Pointer32>::operator=(v10, (uint64_t)v11);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(a1, (uint64_t)(v9 + 24), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 96) >> 5));
    }
    v15 = (void **)v13;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
}

void sub_1B4100408(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1 + 56;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 0;
  v5 = a3 - 2;
  if (a3 < 2)
    v5 = a3 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = (_DWORD *)(a1 + 96 * v4 + 96);
    v8 = (2 * v4) | 1;
    v9 = 2 * v4 + 2;
    if (v9 < a3 && *v7 < v7[24])
    {
      v7 += 24;
      v8 = v9;
    }
    TRawSymbol<Pointer32>::operator=(a1, (uint64_t)v7);
    a1 = (uint64_t)v7;
    v4 = v8;
  }
  while (v8 <= v6);
  return v7;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  __int128 v13;
  _BYTE v14[32];
  uint64_t v15;
  void **v16[9];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v16[7] = v4;
    v16[8] = v5;
    v8 = v6 >> 1;
    v9 = (_DWORD *)(a1 + 96 * (v6 >> 1));
    v10 = a2 - 96;
    if (*v9 < *(_DWORD *)(a2 - 96))
    {
      v15 = 0;
      memset(v12, 0, 24);
      v13 = 0u;
      memset(v14, 0, 25);
      TRawSymbol<Pointer32>::operator=((uint64_t)v12, a2 - 96);
      do
      {
        v11 = (uint64_t)v9;
        TRawSymbol<Pointer32>::operator=(v10, (uint64_t)v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (_DWORD *)(a1 + 96 * v8);
        v10 = v11;
      }
      while (*v9 < LODWORD(v12[0]));
      TRawSymbol<Pointer32>::operator=(v11, (uint64_t)v12);
      v16[0] = (void **)v14;
      std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v16);
    }
  }
}

void std::__call_once_param<std::tuple<TRawSymbolOwnerData<Pointer64>::prepare_symbols(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>(uint64_t ***a1)
{
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v1 = ***a1;
  v2 = *(__n128 **)(v1 + 184);
  v3 = *(__n128 **)(v1 + 192);
  v4 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>(v2, v3, (uint64_t)&v6, v5, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 *v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  _QWORD *v20;
  char v21;
  char v22;
  __n128 *v23;
  unint64_t v24;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(unint64_t *a1, unint64_t *a2)
{
  void **v2;
  void **v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD v14[4];
  _BYTE v15[32];
  uint64_t v16;
  void **v17[11];

  if (a1 != a2)
  {
    v17[9] = v2;
    v17[10] = v3;
    v6 = (uint64_t)(a1 + 13);
    if (a1 + 13 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v8[13];
        v10 = *v8;
        v8 = (unint64_t *)v6;
        if (v9 < v10)
        {
          v16 = 0;
          memset(v14, 0, 32);
          v14[3] = 0u;
          memset(v15, 0, 25);
          TRawSymbol<Pointer64>::operator=((uint64_t)v14, v6);
          v11 = v7;
          while (1)
          {
            TRawSymbol<Pointer64>::operator=((uint64_t)a1 + v11 + 104, (uint64_t)a1 + v11);
            if (!v11)
              break;
            v12 = *(unint64_t *)((char *)a1 + v11 - 104);
            v11 -= 104;
            if (*(_QWORD *)&v14[0] >= v12)
            {
              v13 = (uint64_t)a1 + v11 + 104;
              goto LABEL_10;
            }
          }
          v13 = (uint64_t)a1;
LABEL_10:
          TRawSymbol<Pointer64>::operator=(v13, (uint64_t)v14);
          v17[0] = (void **)v15;
          std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v17);
        }
        v6 = (uint64_t)(v8 + 13);
        v7 += 104;
      }
      while (v8 + 13 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(_QWORD *a1, _QWORD *a2)
{
  void **v2;
  void **v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _OWORD v9[4];
  _BYTE v10[32];
  uint64_t v11;
  void **v12[9];

  if (a1 != a2)
  {
    v12[7] = v2;
    v12[8] = v3;
    v5 = a1;
    v6 = (uint64_t)(a1 + 13);
    if (a1 + 13 != a2)
    {
      do
      {
        v7 = (_QWORD *)v6;
        if (v5[13] < *v5)
        {
          v11 = 0;
          memset(v9, 0, 32);
          v9[3] = 0u;
          memset(v10, 0, 25);
          TRawSymbol<Pointer64>::operator=((uint64_t)v9, v6);
          do
          {
            TRawSymbol<Pointer64>::operator=((uint64_t)(v5 + 13), (uint64_t)v5);
            v8 = *(v5 - 13);
            v5 -= 13;
          }
          while (*(_QWORD *)&v9[0] < v8);
          TRawSymbol<Pointer64>::operator=((uint64_t)(v5 + 13), (uint64_t)v9);
          v12[0] = (void **)v10;
          std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v12);
        }
        v6 = (uint64_t)(v7 + 13);
        v5 = v7;
      }
      while (v7 + 13 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(__n128 *a1, __n128 *a2, __n128 *a3)
{
  unint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 *v9;

  v6 = a2->n128_u64[0];
  v7 = a3->n128_u64[0];
  if (a2->n128_u64[0] < a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      swap(a1, a3);
      return 1;
    }
    swap(a1, a2);
    if (a3->n128_u64[0] >= a2->n128_u64[0])
      return 1;
    v8 = a2;
    v9 = a3;
LABEL_9:
    swap(v8, v9);
    return 2;
  }
  if (v7 < v6)
  {
    swap(a2, a3);
    if (a2->n128_u64[0] >= a1->n128_u64[0])
      return 1;
    v8 = a1;
    v9 = a2;
    goto LABEL_9;
  }
  return 0;
}

__n128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSymbol<Pointer64> *,std::__less<void,void> &>(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD v11[4];
  _BYTE v12[32];
  uint64_t v13;
  void **v14;

  v13 = 0;
  memset(v11, 0, 32);
  v11[3] = 0u;
  memset(v12, 0, 25);
  TRawSymbol<Pointer64>::operator=((uint64_t)v11, a1);
  if (*(_QWORD *)&v11[0] >= a2[-7].n128_u64[1])
  {
    v6 = (__n128 *)(a1 + 104);
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v6 = (__n128 *)((char *)v6 + 104);
    }
    while (*(_QWORD *)&v11[0] >= v4->n128_u64[0]);
  }
  else
  {
    v4 = (__n128 *)a1;
    do
    {
      v5 = v4[6].n128_u64[1];
      v4 = (__n128 *)((char *)v4 + 104);
    }
    while (*(_QWORD *)&v11[0] >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = a2[-7].n128_u64[1];
      a2 = (__n128 *)((char *)a2 - 104);
    }
    while (*(_QWORD *)&v11[0] < v7);
  }
  while (v4 < a2)
  {
    swap(v4, a2);
    do
    {
      v8 = v4[6].n128_u64[1];
      v4 = (__n128 *)((char *)v4 + 104);
    }
    while (*(_QWORD *)&v11[0] >= v8);
    do
    {
      v9 = a2[-7].n128_u64[1];
      a2 = (__n128 *)((char *)a2 - 104);
    }
    while (*(_QWORD *)&v11[0] < v9);
  }
  if (&v4[-7].n128_i8[8] != (__int8 *)a1)
    TRawSymbol<Pointer64>::operator=(a1, (uint64_t)&v4[-7].n128_i64[1]);
  TRawSymbol<Pointer64>::operator=((uint64_t)&v4[-7].n128_i64[1], (uint64_t)v11);
  v14 = (void **)v12;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v14);
  return v4;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSymbol<Pointer64> *,std::__less<void,void> &>(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD v15[4];
  _BYTE v16[32];
  uint64_t v17;
  void **v18;

  v17 = 0;
  memset(v15, 0, 32);
  v15[3] = 0u;
  memset(v16, 0, 25);
  TRawSymbol<Pointer64>::operator=((uint64_t)v15, a1);
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(a1 + v4 + 104);
    v4 += 104;
  }
  while (v5 < *(_QWORD *)&v15[0]);
  v6 = a1 + v4;
  v7 = a1 + v4 - 104;
  if (v4 == 104)
  {
    do
    {
      if (v6 >= (unint64_t)a2)
        break;
      v9 = a2[-7].n128_u64[1];
      a2 = (__n128 *)((char *)a2 - 104);
    }
    while (v9 >= *(_QWORD *)&v15[0]);
  }
  else
  {
    do
    {
      v8 = a2[-7].n128_u64[1];
      a2 = (__n128 *)((char *)a2 - 104);
    }
    while (v8 >= *(_QWORD *)&v15[0]);
  }
  if (v6 < (unint64_t)a2)
  {
    v10 = (__n128 *)(a1 + v4);
    v11 = a2;
    do
    {
      swap(v10, v11);
      do
      {
        v12 = v10[6].n128_u64[1];
        v10 = (__n128 *)((char *)v10 + 104);
      }
      while (v12 < *(_QWORD *)&v15[0]);
      do
      {
        v13 = v11[-7].n128_u64[1];
        v11 = (__n128 *)((char *)v11 - 104);
      }
      while (v13 >= *(_QWORD *)&v15[0]);
    }
    while (v10 < v11);
    v7 = (uint64_t)&v10[-7].n128_i64[1];
  }
  if (v7 != a1)
    TRawSymbol<Pointer64>::operator=(a1, v7);
  TRawSymbol<Pointer64>::operator=(v7, (uint64_t)v15);
  v18 = (void **)v16;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v18);
  return v7;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(uint64_t a1, _QWORD *a2)
{
  _BOOL8 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD v13[4];
  _BYTE v14[32];
  uint64_t v15;
  void **v16;

  v4 = 1;
  switch(0x4EC4EC4EC4EC4EC5 * (((uint64_t)a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(a2 - 13) < *(_QWORD *)a1)
        swap((__n128 *)a1, (__n128 *)(a2 - 13));
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((__n128 *)a1, (__n128 *)(a1 + 104), (__n128 *)(a2 - 13));
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((__n128 *)a1, (__n128 *)(a1 + 104), (__n128 *)(a1 + 208), (__n128 *)(a2 - 13));
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((__n128 *)a1, (__n128 *)(a1 + 104), (__n128 *)(a1 + 208), (__n128 *)(a1 + 312), (__n128 *)(a2 - 13));
      return v4;
    default:
      v5 = (_QWORD *)(a1 + 208);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((__n128 *)a1, (__n128 *)(a1 + 104), (__n128 *)(a1 + 208));
      v6 = (_QWORD *)(a1 + 312);
      if ((_QWORD *)(a1 + 312) == a2)
        return 1;
      v7 = 0;
      v8 = 0;
      break;
  }
  while (*v6 >= *v5)
  {
LABEL_14:
    v5 = v6;
    v7 += 104;
    v6 += 13;
    if (v6 == a2)
      return 1;
  }
  v15 = 0;
  memset(v13, 0, 32);
  v13[3] = 0u;
  memset(v14, 0, 25);
  TRawSymbol<Pointer64>::operator=((uint64_t)v13, (uint64_t)v6);
  v9 = v7;
  while (1)
  {
    TRawSymbol<Pointer64>::operator=(a1 + v9 + 312, a1 + v9 + 208);
    if (v9 == -208)
      break;
    v10 = *(_QWORD *)(a1 + v9 + 104);
    v9 -= 104;
    if (*(_QWORD *)&v13[0] >= v10)
    {
      v11 = a1 + v9 + 312;
      goto LABEL_12;
    }
  }
  v11 = a1;
LABEL_12:
  TRawSymbol<Pointer64>::operator=(v11, (uint64_t)v13);
  if (++v8 != 8)
  {
    v16 = (void **)v14;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_14;
  }
  v4 = v6 + 13 == a2;
  v16 = (void **)v14;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v16);
  return v4;
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  double result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(a1, a2, a3);
  if (a4->n128_u64[0] < a3->n128_u64[0])
  {
    *(_QWORD *)&result = swap(a3, a4).n128_u64[0];
    if (a3->n128_u64[0] < a2->n128_u64[0])
    {
      *(_QWORD *)&result = swap(a2, a3).n128_u64[0];
      if (a2->n128_u64[0] < a1->n128_u64[0])
        *(_QWORD *)&result = swap(a1, a2).n128_u64[0];
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  double result;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(a1, a2, a3, a4);
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    *(_QWORD *)&result = swap(a4, a5).n128_u64[0];
    if (a4->n128_u64[0] < a3->n128_u64[0])
    {
      *(_QWORD *)&result = swap(a3, a4).n128_u64[0];
      if (a3->n128_u64[0] < a2->n128_u64[0])
      {
        *(_QWORD *)&result = swap(a2, a3).n128_u64[0];
        if (a2->n128_u64[0] < a1->n128_u64[0])
          *(_QWORD *)&result = swap(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  __n128 *v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 104;
    if ((char *)a2 - (char *)a1 >= 105)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1->n128_u64[13 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 13;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((__n128 *)v6 != a3)
    {
      v14 = (__n128 *)v6;
      do
      {
        if (v14->n128_u64[0] < a1->n128_u64[0])
        {
          swap(v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>((uint64_t)a1, a4, v9, a1->n128_u64);
        }
        v14 = (__n128 *)((char *)v14 + 104);
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 105)
    {
      v15 = v8 / 0x68uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,TRawSymbol<Pointer64> *>((uint64_t)a1, v6, a4, v15);
        v6 -= 104;
      }
      while (v15-- > 2);
    }
    return (__n128 *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  void **v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD v18[4];
  _BYTE v19[32];
  uint64_t v20;
  void **v21[11];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v21[9] = v4;
    v21[10] = v5;
    v7 = (uint64_t)a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x4EC4EC4EC4EC4EC5 * (((uint64_t)a4 - a1) >> 3))
    {
      v11 = (0x9D89D89D89D89D8ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v12 = (unint64_t *)(a1 + 104 * v11);
      if ((uint64_t)(0x9D89D89D89D89D8ALL * (((uint64_t)a4 - a1) >> 3) + 2) >= a3)
      {
        v13 = *v12;
      }
      else
      {
        v13 = *v12;
        v14 = v12[13];
        if (*v12 <= v14)
          v13 = v12[13];
        if (*v12 < v14)
        {
          v12 += 13;
          v11 = 0x9D89D89D89D89D8ALL * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      if (v13 >= *a4)
      {
        v20 = 0;
        memset(v18, 0, 32);
        v18[3] = 0u;
        memset(v19, 0, 25);
        TRawSymbol<Pointer64>::operator=((uint64_t)v18, (uint64_t)a4);
        do
        {
          v15 = (uint64_t)v12;
          TRawSymbol<Pointer64>::operator=(v7, (uint64_t)v12);
          if (v9 < v11)
            break;
          v12 = (unint64_t *)(a1 + 104 * ((2 * v11) | 1));
          if (2 * v11 + 2 >= a3)
          {
            v16 = *v12;
            v11 = (2 * v11) | 1;
          }
          else
          {
            v16 = *v12;
            v17 = v12[13];
            if (*v12 <= v17)
              v16 = v12[13];
            if (*v12 >= v17)
            {
              v11 = (2 * v11) | 1;
            }
            else
            {
              v12 += 13;
              v11 = 2 * v11 + 2;
            }
          }
          v7 = v15;
        }
        while (v16 >= *(_QWORD *)&v18[0]);
        TRawSymbol<Pointer64>::operator=(v15, (uint64_t)v18);
        v21[0] = (void **)v19;
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v21);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,TRawSymbol<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD v11[4];
  _BYTE v12[32];
  uint64_t v13;
  void **v14;

  if (a4 >= 2)
  {
    v13 = 0;
    memset(v11, 0, 32);
    v11[3] = 0u;
    memset(v12, 0, 25);
    TRawSymbol<Pointer64>::operator=((uint64_t)v11, a1);
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(a1, a3, a4);
    v9 = v8;
    v10 = a2 - 104;
    if (v8 == (_QWORD *)v10)
    {
      TRawSymbol<Pointer64>::operator=((uint64_t)v8, (uint64_t)v11);
    }
    else
    {
      TRawSymbol<Pointer64>::operator=((uint64_t)v8, v10);
      TRawSymbol<Pointer64>::operator=(v10, (uint64_t)v11);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(a1, (uint64_t)(v9 + 13), a3, 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v9 - a1 + 104) >> 3));
    }
    v14 = (void **)v12;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

void sub_1B4101560(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1 + 64;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 0;
  v5 = a3 - 2;
  if (a3 < 2)
    v5 = a3 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = (_QWORD *)(a1 + 104 * v4 + 104);
    v8 = (2 * v4) | 1;
    v9 = 2 * v4 + 2;
    if (v9 < a3 && *v7 < v7[13])
    {
      v7 += 13;
      v8 = v9;
    }
    TRawSymbol<Pointer64>::operator=(a1, (uint64_t)v7);
    a1 = (uint64_t)v7;
    v4 = v8;
  }
  while (v8 <= v6);
  return v7;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[4];
  _BYTE v13[32];
  uint64_t v14;
  void **v15[9];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v15[7] = v4;
    v15[8] = v5;
    v8 = v6 >> 1;
    v9 = (_QWORD *)(a1 + 104 * (v6 >> 1));
    v10 = a2 - 104;
    if (*v9 < *(_QWORD *)(a2 - 104))
    {
      v14 = 0;
      memset(v12, 0, 32);
      v12[3] = 0u;
      memset(v13, 0, 25);
      TRawSymbol<Pointer64>::operator=((uint64_t)v12, a2 - 104);
      do
      {
        v11 = (uint64_t)v9;
        TRawSymbol<Pointer64>::operator=(v10, (uint64_t)v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (_QWORD *)(a1 + 104 * v8);
        v10 = v11;
      }
      while (*v9 < *(_QWORD *)&v12[0]);
      TRawSymbol<Pointer64>::operator=(v11, (uint64_t)v12);
      v15[0] = (void **)v13;
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v15);
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__equal_range_multi<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    v4 = result;
    do
      v4 = (_QWORD *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

uint64_t TRawSymbol<Pointer32>::TRawSymbol(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  TRawSymbol<Pointer32>::operator=(a1, a2);
  return a1;
}

void sub_1B4101778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 56);
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<TRawSymbol<Pointer32>>::__assign_with_size[abi:ne180100]<TRawSymbol<Pointer32>*,TRawSymbol<Pointer32>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<TRawSymbol<Pointer32>>::__vdeallocate((void **)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<TRawSymbol<Pointer32>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*,TRawSymbol<Pointer32>*,TRawSymbol<Pointer32>*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5) < a4)
  {
    v13 = a2 + 32 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*,TRawSymbol<Pointer32>*,TRawSymbol<Pointer32>*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 96;
      v18 = (void **)(v16 - 40);
      std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v18);
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1B410199C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B41019A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<TRawSymbol<Pointer32>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*,TRawSymbol<Pointer32>*,TRawSymbol<Pointer32>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      TRawSymbol<Pointer32>::TRawSymbol(v4, v6);
      v6 += 96;
      v4 = v11 + 96;
      v11 += 96;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B4101A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 96;
      v4 = (void **)(v1 - 40);
      std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v4);
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      TRawSymbol<Pointer32>::operator=(a3, v4);
      v4 += 96;
      a3 += 96;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t TRawSymbol<Pointer64>::TRawSymbol(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  TRawSymbol<Pointer64>::operator=(a1, a2);
  return a1;
}

void sub_1B4101D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 64);
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<TRawSymbol<Pointer64>>::__assign_with_size[abi:ne180100]<TRawSymbol<Pointer64>*,TRawSymbol<Pointer64>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<TRawSymbol<Pointer64>>::__vdeallocate((void **)a1);
    if (a4 > 0x276276276276276)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v10 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v10;
    std::vector<TRawSymbol<Pointer64>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*,TRawSymbol<Pointer64>*,TRawSymbol<Pointer64>*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*,TRawSymbol<Pointer64>*,TRawSymbol<Pointer64>*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 104;
      v18 = (void **)(v16 - 40);
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v18);
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1B4101F90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B4101F98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<TRawSymbol<Pointer64>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*,TRawSymbol<Pointer64>*,TRawSymbol<Pointer64>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      TRawSymbol<Pointer64>::TRawSymbol(v4, v6);
      v6 += 104;
      v4 = v11 + 104;
      v11 += 104;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B4102080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 104;
      v4 = (void **)(v1 - 40);
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v4);
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      TRawSymbol<Pointer64>::operator=(a3, v4);
      v4 += 104;
      a3 += 104;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::__emplace_multi<std::piecewise_construct_t const&,std::tuple<unsigned long long &>,std::tuple<unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>>(_QWORD *a1, uint64_t a2, _QWORD **a3, _OWORD *a4)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *inserted;
  _QWORD *v10;

  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long &>,std::tuple<unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>>((uint64_t)a1, a3, a4, (uint64_t)&v10);
  v5 = v10;
  v7 = v10 + 2;
  v6 = v10[2];
  v10[1] = v6;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__node_insert_multi_prepare((uint64_t)a1, v6, v7);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_perform(a1, v5, inserted);
  return v5;
}

void sub_1B4102218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long &>,std::tuple<unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>>@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, _OWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t result;
  _OWORD v12[3];

  v7 = a1 + 16;
  v8 = operator new(0x80uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = 0;
  v9 = *a2;
  v10 = a3[1];
  v12[0] = *a3;
  v12[1] = v10;
  v12[2] = a3[2];
  result = std::pair<unsigned long long const,TRawSymbol<Pointer64>>::pair[abi:ne180100]<unsigned long long &,unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>((uint64_t)(v8 + 2), v9, (uint64_t **)v12);
  *(_BYTE *)(a4 + 16) = 1;
  v8[1] = v8[2];
  return result;
}

void sub_1B41022CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long long const,TRawSymbol<Pointer64>>::pair[abi:ne180100]<unsigned long long &,unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>(uint64_t result, _QWORD *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _OWORD *v8;

  *(_QWORD *)result = *a2;
  v3 = **a3;
  v4 = *a3[1];
  v5 = *a3[2];
  v6 = *a3[3];
  v7 = *(_DWORD *)a3[4];
  v8 = (_OWORD *)*a3[5];
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v5;
  *(_QWORD *)(result + 48) = v6;
  *(_QWORD *)(result + 104) = 0;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 81) = 0u;
  if (v8)
  {
    *(_OWORD *)(result + 56) = *v8;
    v7 |= 0x80000000;
  }
  *(_DWORD *)(result + 36) = v7;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__emplace_multi<std::piecewise_construct_t const&,std::tuple<unsigned int &>,std::tuple<unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>>(_QWORD *a1, uint64_t a2, unsigned int **a3, _OWORD *a4)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *inserted;
  _QWORD *v10;

  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &>,std::tuple<unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>>((uint64_t)a1, a3, a4, (uint64_t)&v10);
  v5 = v10;
  v7 = v10 + 2;
  v6 = v10[2];
  v10[1] = v6;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__node_insert_multi_prepare((uint64_t)a1, v6, v7);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi_perform(a1, v5, inserted);
  return v5;
}

void sub_1B41023A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &>,std::tuple<unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>>@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X2>, _OWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  __int128 v10;
  uint64_t result;
  _OWORD v12[3];

  v7 = a1 + 16;
  v8 = operator new(0x78uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = 0;
  v9 = *a2;
  v10 = a3[1];
  v12[0] = *a3;
  v12[1] = v10;
  v12[2] = a3[2];
  result = std::pair<unsigned long long const,TRawSymbol<Pointer32>>::pair[abi:ne180100]<unsigned int &,unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>((uint64_t)(v8 + 2), v9, (uint64_t)v12);
  *(_BYTE *)(a4 + 16) = 1;
  v8[1] = v8[2];
  return result;
}

void sub_1B410245C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long long const,TRawSymbol<Pointer32>>::pair[abi:ne180100]<unsigned int &,unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo const*&>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;

  *(_QWORD *)result = *a2;
  v3 = **(_DWORD **)(a3 + 8);
  v4 = **(_QWORD **)(a3 + 16);
  v5 = **(_QWORD **)(a3 + 24);
  v6 = **(_DWORD **)(a3 + 32);
  v7 = **(_OWORD ***)(a3 + 40);
  *(_DWORD *)(result + 8) = **(_DWORD **)a3;
  *(_DWORD *)(result + 12) = v3;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = v4;
  *(_QWORD *)(result + 40) = v5;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 96) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 73) = 0u;
  if (v7)
  {
    *(_OWORD *)(result + 48) = *v7;
    v6 |= 0x80000000;
  }
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t CSCppTextSectionDescriptorMap<Pointer32>::~CSCppTextSectionDescriptorMap(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  void **v9;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v4 = v3[5];
      if (v4)
      {
        std::mutex::~mutex((std::mutex *)(v4 + 144));
        v9 = (void **)(v4 + 88);
        std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v4 + 79) < 0)
          operator delete(*(void **)(v4 + 56));
        std::__tree<TRange<Pointer64>>::destroy(v4 + 24, *(_QWORD **)(v4 + 32));
        MEMORY[0x1B5E36940](v4, 0x1032C40C9A27EF9);
      }
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::__tree<TRange<Pointer64>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 80);
      std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer64>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 88);
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unint64_t TRawSymbolOwnerData<Pointer32>::_raw_bytes_for_range_on_demand_fault(uint64_t a1, os_unfair_lock_s **a2, unint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;
  unint64_t result;
  unint64_t text_section_for;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (!*(_QWORD *)(a1 + 88))
  {
    v7 = operator new();
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)v7 = v7 + 8;
    *(_QWORD *)(v7 + 24) = 850045863;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(a1 + 88) = v7;
  }
  std::mutex::unlock(v6);
  if ((CSCppSymbolicator::flags(a2[1]) & 4) != 0 && !*(_QWORD *)(a1 + 240))
  {
    TRawSymbolOwnerData<Pointer32>::_update_text_section_data_locked(a1, (CSCppSymbolOwner *)a2);
    v11 = *(_QWORD *)(a1 + 240);
    if (v11)
    {
      v12 = *(_DWORD *)(a1 + 232);
      if (v12 <= a3 && HIDWORD(a3) + (int)a3 <= *(_DWORD *)(a1 + 236) + v12)
      {
        v13 = *(_QWORD *)(a1 + 232);
        if (a3 >= v13 && HIDWORD(a3) + (int)a3 <= (HIDWORD(v13) + v13))
          return v11 + (a3 - v13);
        return 0;
      }
    }
  }
  result = CSCppTextSectionDescriptorMap<Pointer32>::find_section_descriptor_for_range(*(_QWORD *)(a1 + 88), a3);
  if (result
    || (result = (unint64_t)CSCppTextSectionDescriptorMap<Pointer32>::create_section_descriptor_for_range(*(_QWORD *)(a1 + 88), (CSCppSymbolOwner *)a2, a3)) != 0)
  {
    text_section_for = CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer32>(result, a3, (uint64_t)a2);
    if (a3 < text_section_for
      || HIDWORD(a3) + (int)a3 > (HIDWORD(text_section_for) + text_section_for))
    {
      return 0;
    }
    return v10 + (a3 - text_section_for);
  }
  return result;
}

void sub_1B410282C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDescriptorMap<Pointer32>::find_section_descriptor_for_range(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = (_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    do
    {
      v7 = *(_DWORD *)(v6 + 32);
      v8 = v7 > a2;
      if (v7 <= a2)
        v9 = (uint64_t *)(v6 + 8);
      else
        v9 = (uint64_t *)v6;
      if (v8)
        v5 = (_QWORD *)v6;
      v6 = *v9;
    }
    while (*v9);
  }
  if (v5 == *(_QWORD **)a1)
    goto LABEL_15;
  v10 = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v11 = v10;
      v10 = (_QWORD *)v10[1];
    }
    while (v10);
  }
  else
  {
    do
    {
      v11 = (_QWORD *)v5[2];
      v12 = *v11 == (_QWORD)v5;
      v5 = v11;
    }
    while (v12);
  }
  v13 = v11[4];
  if (a2 < v13 || HIDWORD(a2) + (int)a2 > (HIDWORD(v13) + v13))
LABEL_15:
    v14 = 0;
  else
    v14 = v11[5];
  std::mutex::unlock(v4);
  return v14;
}

unint64_t CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer32>(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  CSCppTextSectionDataDescriptor::get_text_section<Pointer32>(a1, a2, a3);
  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_DWORD *)(a1 + 136) == 1)
    {
      v5 = CSCppTextSectionDataDescriptor::_perform_partial_mapping_for_file<Pointer32>((unsigned int *)a1, a2);
      v6 = HIDWORD(v5);
    }
    else
    {
      LODWORD(v5) = *(_DWORD *)a1;
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
  }
  else
  {
    LODWORD(v5) = 0;
    LODWORD(v6) = 0;
  }
  return v5 | ((unint64_t)v6 << 32);
}

int64x2_t *CSCppTextSectionDescriptorMap<Pointer32>::create_section_descriptor_for_range(uint64_t a1, CSCppSymbolOwner *a2, unint64_t a3)
{
  CSCppTextSectionDataDescriptor *v6;
  unint64_t text_section_for;
  int64x2_t *v8;
  uint64_t v9;
  CSCppTextSectionDataDescriptor *v11;

  v6 = (CSCppTextSectionDataDescriptor *)operator new();
  CSCppTextSectionDataDescriptor::CSCppTextSectionDataDescriptor(v6, a2);
  v11 = v6;
  text_section_for = CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer32>((unint64_t)v6, a3, (uint64_t)a2);
  if (a3 >= text_section_for
    && HIDWORD(a3) + (int)a3 <= (HIDWORD(text_section_for) + text_section_for))
  {
    v8 = (int64x2_t *)v11;
    v11 = 0;
    CSCppTextSectionDescriptorMap<Pointer32>::_store_section_descriptor_for_range(a1, v8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t)v11;
  v11 = 0;
  if (v9)
    std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100]((uint64_t)&v11, v9);
  return v8;
}

void sub_1B4102A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<CSCppTextSectionDataDescriptor>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

unint64_t CSCppTextSectionDataDescriptor::get_text_section<Pointer32>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v5;
  unint64_t text_section;
  uint64_t v8;

  v8 = a2;
  v5 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  text_section = CSCppTextSectionDataDescriptor::_get_text_section_locked<Pointer32>(a1, &v8, a3);
  std::mutex::unlock(v5);
  return text_section;
}

void sub_1B4102AE0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CSCppTextSectionDataDescriptor::_perform_partial_mapping_for_file<Pointer32>(unsigned int *a1, unint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int64x2_t v49;
  char *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int ***v58;
  unsigned int **v59;
  int64x2_t v60;
  char *v61;
  unsigned int *v62;

  if (!*((_BYTE *)a1 + 80))
  {
    v7 = *a1;
    v8 = a1[2];
    return v7 | (v8 << 32);
  }
  v3 = a2;
  v4 = a2;
  v5 = *(_QWORD *)a1;
  v6 = HIDWORD(a2);
  if ((unint64_t)a2 < *(_QWORD *)a1 || v6 + a2 > *((_QWORD *)a1 + 1) + v5)
    v4 = (_DWORD)v5 + (_DWORD)a2 - a1[28];
  if (v4 >= v5 && v4 + v6 <= *((_QWORD *)a1 + 1) + v5)
  {
    std::mutex::lock((std::mutex *)(a1 + 36));
    v9 = (_DWORD)v4 - *a1 + a1[30] + a1[28];
    v10 = (uint64_t *)(a1 + 8);
    v11 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (v11)
    {
      do
      {
        v12 = v11[4];
        v13 = v12 > v9;
        if (v12 <= v9)
          v14 = v11 + 1;
        else
          v14 = v11;
        if (v13)
          v10 = v11;
        v11 = (_QWORD *)*v14;
      }
      while (*v14);
    }
    if (v10 != *((uint64_t **)a1 + 3))
    {
      v15 = (uint64_t *)*v10;
      if (*v10)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v10[2];
          v17 = *v16 == (_QWORD)v10;
          v10 = v16;
        }
        while (v17);
      }
      v19 = v16[4];
      v18 = v16[5];
      v20 = v6 + v9;
      v21 = v18 + v19;
      if (v19 <= v9 && v20 <= v21)
      {
        v29 = v3 - v9 + v19;
        v30 = v18 - (v9 - v3 - v19);
        v31 = v19 >= v9 - v3;
        v32 = v19 - (v9 - v3);
        if (v31)
          v33 = v16[5];
        else
          v33 = v30;
        if (!v31)
          v32 = 0;
        if (v9 > v3)
          v8 = v33;
        else
          v8 = v18;
        if (v9 > v3)
          v7 = v32;
        else
          v7 = v29;
LABEL_78:
        std::mutex::unlock((std::mutex *)(a1 + 36));
        return v7 | (v8 << 32);
      }
      if (v19 >= v9 && v21 <= v20)
      {
        std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)a1 + 3, v16);
        operator delete(v16);
      }
    }
    if (*((_BYTE *)a1 + 48))
    {
      v7 = *a1;
      v8 = a1[2];
    }
    else
    {
      v24 = a1 + 14;
      if (*((char *)a1 + 79) < 0)
        v24 = (_QWORD *)*v24;
      v25 = (_QWORD *)operator new();
      CSCppFileMemory::CSCppFileMemory(v25, v24, v9);
      v26 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v25 + 32))(v25, 0, 0);
      if (v26
        && (v27 = v9 & ~*MEMORY[0x1E0C85AC0],
            v28 = v25[4],
            v55 = v27,
            v56 = v28,
            v57 = v26 - (v9 - v27),
            v6 + v9 <= v28 + v27))
      {
        v54 = a1;
        v34 = atomic_load((unint64_t *)a1 + 16);
        if (v34 != -1)
        {
          v59 = &v54;
          v58 = &v59;
          std::__call_once((std::once_flag::_State_type *)a1 + 16, &v58, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TRangeValue<Pointer32,unsigned char *> CSCppTextSectionDataDescriptor::_perform_partial_mapping_for_file<Pointer32>(TRange<Pointer32>)::{lambda(void)#1} &&>>);
        }
        std::__tree<TRangeValue<Pointer64,unsigned char *>>::__emplace_unique_key_args<TRangeValue<Pointer64,unsigned char *>,TRangeValue<Pointer64,unsigned char *> const&>((uint64_t **)a1 + 3, &v55, (uint64_t)&v55);
        v35 = *((_QWORD *)a1 + 13);
        v36 = (_QWORD *)*((_QWORD *)a1 + 12);
        if ((unint64_t)v36 >= v35)
        {
          v38 = *((_QWORD *)a1 + 11);
          v39 = ((uint64_t)v36 - v38) >> 3;
          if ((unint64_t)(v39 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v40 = v35 - v38;
          v41 = v40 >> 2;
          if (v40 >> 2 <= (unint64_t)(v39 + 1))
            v41 = v39 + 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          v62 = a1 + 26;
          if (v42)
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 26), v42);
          else
            v43 = 0;
          v44 = &v43[8 * v39];
          v45 = &v43[8 * v42];
          v61 = v45;
          *(_QWORD *)v44 = v25;
          v37 = v44 + 8;
          v60.i64[1] = (uint64_t)(v44 + 8);
          v47 = (_QWORD *)*((_QWORD *)a1 + 11);
          v46 = (_QWORD *)*((_QWORD *)a1 + 12);
          if (v46 == v47)
          {
            v49 = vdupq_n_s64((unint64_t)v46);
          }
          else
          {
            do
            {
              v48 = *--v46;
              *v46 = 0;
              *((_QWORD *)v44 - 1) = v48;
              v44 -= 8;
            }
            while (v46 != v47);
            v49 = *(int64x2_t *)(a1 + 22);
            v37 = (_QWORD *)v60.i64[1];
            v45 = v61;
          }
          *((_QWORD *)a1 + 11) = v44;
          *((_QWORD *)a1 + 12) = v37;
          v60 = v49;
          v50 = (char *)*((_QWORD *)a1 + 13);
          *((_QWORD *)a1 + 13) = v45;
          v61 = v50;
          v59 = (unsigned int **)v49.i64[0];
          std::__split_buffer<std::unique_ptr<CSCppMemory>>::~__split_buffer((uint64_t)&v59);
        }
        else
        {
          *v36 = v25;
          v37 = v36 + 1;
        }
        *((_QWORD *)a1 + 12) = v37;
        v51 = v55 - (v9 - v3);
        if (v55 < v9 - v3)
          v52 = v56 - (v9 - v3 - v55);
        else
          v52 = v56;
        if (v55 < v9 - v3)
          v51 = 0;
        if (v9 > v3)
          v8 = v52;
        else
          v8 = v56;
        if (v9 > v3)
          v7 = v51;
        else
          v7 = v3 - v9 + v55;
      }
      else
      {
        (*(void (**)(_QWORD *))(*v25 + 8))(v25);
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_78;
  }
  v7 = 0;
  v8 = 0;
  return v7 | (v8 << 32);
}

void sub_1B4102EF0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t TRawSymbolOwnerData<Pointer64>::_raw_bytes_for_range_on_demand_fault(uint64_t a1, os_unfair_lock_s **a2, unint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[3];

  v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (!*(_QWORD *)(a1 + 88))
  {
    v9 = operator new();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)v9 = v9 + 8;
    *(_QWORD *)(v9 + 24) = 850045863;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(a1 + 88) = v9;
  }
  std::mutex::unlock(v8);
  if ((CSCppSymbolicator::flags(a2[1]) & 4) != 0 && !*(_QWORD *)(a1 + 248))
  {
    TRawSymbolOwnerData<Pointer64>::_update_text_section_data_locked(a1, (CSCppSymbolOwner *)a2);
    v11 = *(_QWORD *)(a1 + 248);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 232);
      if (a3 >= v12 && a4 + a3 <= *(_QWORD *)(a1 + 240) + v12)
        return v11 + a3 - v12;
    }
  }
  result = CSCppTextSectionDescriptorMap<Pointer64>::find_section_descriptor_for_range(*(_QWORD *)(a1 + 88), a3, a4);
  if (result
    || (result = (uint64_t)CSCppTextSectionDescriptorMap<Pointer64>::create_section_descriptor_for_range(*(_QWORD *)(a1 + 88), (CSCppSymbolOwner *)a2, a3, a4)) != 0)
  {
    CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer64>(result, a3, a4, (uint64_t)a2, (uint64_t)v13);
    if (a3 >= v13[0])
    {
      if (a4 + a3 <= v13[1] + v13[0])
        return v13[2] + a3 - v13[0];
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1B41030A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

BOOL CSCppDyldSplitSharedCacheMemory::is_primary_subcache(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v6[2];

  v6[0] = (uint64_t)a2;
  v6[1] = a3;
  if (!*(_BYTE *)(a1 + 49) || !a3)
    return 1;
  v3 = 0;
  do
  {
    v4 = *a2++;
    if (v4 == 46)
      ++v3;
    --a3;
  }
  while (a3);
  if (!v3)
    return 1;
  if (v3 == 1)
    return std::string_view::find[abi:ne180100](v6, ".development", 12, 0) != -1;
  return 0;
}

unint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = strlen(__s);
  if (v5 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v6 + a3);
    v10 = (char *)(v6 + v5);
    v11 = v5 - a3;
    if ((uint64_t)(v5 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_6;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_6:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v6];
  }
  return a3;
}

const char *CSCppDyldSplitSharedCacheMemory::arch_name_from_subcache_name(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;

  v6 = a1;
  v7 = a2;
  v2 = std::string_view::find[abi:ne180100](&v6, "dyld_shared_cache_", 0);
  if (v2 == -1)
    return "";
  v3 = v2 + 18;
  if (v7 < v2 + 18)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  v4 = v6 + v3;
  if (v7 != v3)
    memchr((void *)(v6 + v3), 46, v7 - v3);
  return (const char *)v4;
}

void CSCppDyldSplitSharedCacheMemory::filename_of_local_symbols_shared_cache_for_arch(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  const char *FamilyName;
  size_t v8;
  size_t size;
  void **v10;
  std::string *v11;
  void **v12;
  void *__p[2];
  int64_t v14;
  std::string v15;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  std::string::append(&v15, "dyld_shared_cache_", 0x12uLL);
  FamilyName = CSArchitectureGetFamilyName(a1);
  v8 = strlen(FamilyName);
  std::string::append(&v15, FamilyName, v8);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v10 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 8);
  if (v14 < 0)
    v10 = (void **)__p[0];
  if (size)
  {
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v15;
    else
      v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
    memmove(v10, v11, size);
  }
  strcpy((char *)v10 + size, ".symbols");
  if (v14 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (access((const char *)v12, 0))
  {
    if (a3)
      std::string::append(&v15, ".development", 0xCuLL);
    *a4 = v15;
    memset(&v15, 0, sizeof(v15));
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a4->__r_.__value_.__r.__words[2] = v14;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1B41034F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *CSCppDyldSplitSharedCacheMemory::filename_of_primary_shared_cache_for_arch@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t size;
  BOOL v8;
  std::string *v9;
  char *v10;
  std::string *v11;
  char *v12;
  char *v13;
  _BOOL4 v15;
  const char *FamilyName;
  size_t v17;
  std::string *result;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  v8 = (size & 0x80u) != 0;
  if ((size & 0x80u) != 0)
    size = a4->__r_.__value_.__l.__size_;
  if (v8)
    v9 = (std::string *)a4->__r_.__value_.__r.__words[0];
  else
    v9 = a4;
  v10 = (char *)v9 + size;
  if (size >= 38)
  {
    v11 = v9;
    do
    {
      v12 = (char *)memchr(v11, 47, size - 37);
      if (!v12)
        break;
      v13 = v12;
      if (!memcmp(v12, "/System/DriverKit/System/Library/dyld/", 0x26uLL))
        goto LABEL_15;
      v11 = (std::string *)(v13 + 1);
      size = v10 - (v13 + 1);
    }
    while (size > 37);
  }
  v13 = v10;
LABEL_15:
  v15 = v13 != v10 && v13 - (char *)v9 != -1;
  std::string::append(a4, "dyld_shared_cache_", 0x12uLL);
  FamilyName = CSArchitectureGetFamilyName(a1);
  v17 = strlen(FamilyName);
  result = std::string::append(a4, FamilyName, v17);
  if (((a3 ^ 1 | v15) & 1) == 0)
    return std::string::append(a4, ".development", 0xCuLL);
  return result;
}

void sub_1B4103660(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL CSCppDyldSplitSharedCacheMemory::task_uses_development_cache(CSCppDyldSplitSharedCacheMemory *this)
{
  unsigned int v1;
  unsigned __int8 v2;
  uint64_t v3;
  char v5;
  _QWORD v6[786];

  v1 = MEMORY[0x1E0C80A78](this);
  v6[785] = *MEMORY[0x1E0C80C00];
  if (mach_task_is_self(v1))
  {
    if ((v2 & 1) == 0
    {
      CSCppMachTask::CSCppMachTask((CSCppMachTask *)v6, v1, 0);
      v5 = CSCppMachTask::uses_development_dsc((CSCppMachTask *)v6);
      CSCppMachTask::~CSCppMachTask((CSCppMachTask *)v6);
      CSCppDyldSplitSharedCacheMemory::task_uses_development_cache::analysis_process_uses_development_dsc = v5;
    }
    return CSCppDyldSplitSharedCacheMemory::task_uses_development_cache::analysis_process_uses_development_dsc != 0;
  }
  else
  {
    CSCppMachTask::CSCppMachTask((CSCppMachTask *)v6, v1, 0);
    v3 = CSCppMachTask::uses_development_dsc((CSCppMachTask *)v6);
    CSCppMachTask::~CSCppMachTask((CSCppMachTask *)v6);
  }
  return v3;
}

void sub_1B4103788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CSCppMachTask::~CSCppMachTask((CSCppMachTask *)&a9);
  _Unwind_Resume(a1);
}

void CSCppDyldSplitSharedCacheMemory::shared_cache_directory_for_task(CSCppDyldSplitSharedCacheMemory *this@<X0>, std::string *a2@<X8>)
{
  BOOLean_t is_self;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  char *v7;
  const char *v8;
  __int128 v9;
  __int128 v10;
  int platform;
  char *v12;
  std::string __p;
  char *v14;
  int v15;

  is_self = mach_task_is_self((task_name_t)this);
  v4 = system_dyld_shared_cache_path();
  v5 = v4;
  if (is_self)
  {
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      return;
    }
    goto LABEL_10;
  }
  v15 = 0;
  if (_dyld_process_info_create())
  {
    v6 = 0;
    v7 = "";
    while (1)
    {
      v8 = cryptex_prefixes[v6];
      if (!access(v8, 4))
        break;
      if (++v6 == 3)
        goto LABEL_12;
    }
    v7 = (char *)v8;
LABEL_12:
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v10 = *v5;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    v14 = v7;
    platform = _dyld_process_info_get_platform();
    v12 = "/System/Library/dyld/";
    if (platform != 1 && platform != 6)
    {
      if (platform == 10)
      {
        v12 = "/System/DriverKit/System/Library/dyld/";
      }
      else
      {
        if (dyld_is_simulator_platform())
        {
          std::string::basic_string[abi:ne180100]<0>(a2, "");
LABEL_24:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          _dyld_process_info_release();
          return;
        }
        v12 = "/System/Library/Caches/com.apple.dyld/";
      }
    }
    CSCppDyldSplitSharedCacheMemory::shared_cache_directory_for_task::$_1::operator()(&v14, v12, a2);
    goto LABEL_24;
  }
  if ((*((char *)v5 + 23) & 0x80000000) == 0)
  {
LABEL_10:
    v9 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v9;
    return;
  }
  std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
}

void sub_1B410398C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void CSCppDyldSplitSharedCacheMemory::filename_of_local_symbols_shared_cache(CSCppDyldSplitSharedCacheMemory *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _BOOL4 v6;
  std::string __p;
  std::string v8;

  CSCppDyldSplitSharedCacheMemory::shared_cache_directory_for_task(a1, &v8);
  v6 = CSCppDyldSplitSharedCacheMemory::task_uses_development_cache(a1);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    __p = v8;
  CSCppDyldSplitSharedCacheMemory::filename_of_local_symbols_shared_cache_for_arch(a2, (uint64_t)&__p, v6, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1B4103A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CSCppDyldSplitSharedCacheMemory::filename_of_primary_shared_cache(CSCppDyldSplitSharedCacheMemory *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _BOOL4 v6;
  std::string __p;
  std::string v8;

  CSCppDyldSplitSharedCacheMemory::shared_cache_directory_for_task(a1, &v8);
  v6 = CSCppDyldSplitSharedCacheMemory::task_uses_development_cache(a1);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    __p = v8;
  CSCppDyldSplitSharedCacheMemory::filename_of_primary_shared_cache_for_arch(a2, (uint64_t)&__p, v6, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1B4103B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t CSCppDyldSplitSharedCacheMemory::bytes_at(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v8;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  if (v3 == v4)
    return 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 32))(*v3, a2, a3);
    if (result && v8 != 0)
      break;
    v3 += 5;
    if (v3 == v4)
      return 0;
  }
  return result;
}

uint64_t CSCppDyldSplitSharedCacheMemory::footprint(CSCppDyldSplitSharedCacheMemory *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1;
    v1 += 5;
    v3 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  }
  while (v1 != v2);
  return v3;
}

void CSCppDyldSplitSharedCacheMemory::analyze_primary_cache_for_symbols_file(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;

  v3 = new_partial_file_memory(a2, 0, 0, (uint64_t)&__block_literal_global_0);
  v4 = CSCppDyldSplitSharedCacheMemory::analyze_primary_cache_for_symbols_file(a1, v3, 0);
  if (v3)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v3 + 8))(v3, v4);
}

void sub_1B4103C94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

const char *TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::needed_mapping_size_for_dyld_shared_cache_at(_QWORD *a1, uint64_t a2)
{
  const char *result;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int v8;

  result = (const char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, 32);
  if (result)
  {
    v3 = (unsigned int *)result;
    if (!strncmp(result, "dyld_v", 6uLL))
    {
      v4 = v3[4];
      v5 = v3[5];
      v6 = v3[98];
      v7 = CSCppDyldSharedCache::uses_universal_cache_struct_layout((CSCppDyldSharedCache *)v3);
      v8 = 24;
      if (v7)
        v8 = 56;
      return (const char *)(v4 + 32 * v5 + v6 + v8 * (unint64_t)v3[99]);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 CSCppDyldSplitSharedCacheMemory::analyze_primary_cache_for_symbols_file(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CSCppDyldSharedCache *v4;
  __n128 result;
  CSCppDyldSharedCache *v6;
  _BOOL4 is_universal_cache;
  __n128 *v8;
  __int128 v9;
  uint64_t v10;
  void **v11;

  if (a2)
  {
    *(_QWORD *)&v9 = a2;
    v4 = (CSCppDyldSharedCache *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v9, a3);
    if (v4)
    {
      v6 = v4;
      *(_BYTE *)(a1 + 48) = CSCppDyldSharedCache::uses_unmapped_symbols_file(v4);
      *(_BYTE *)(a1 + 49) = CSCppDyldSharedCache::is_split_cache(v6);
      is_universal_cache = CSCppDyldSharedCache::is_universal_cache(v6);
      *(_BYTE *)(a1 + 50) = is_universal_cache;
      if (is_universal_cache)
      {
        CSCppDyldSharedCache::extract_universal_subcache_paths(v6, (uint64_t *)&v9);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 56));
        *(_OWORD *)(a1 + 56) = v9;
        *(_QWORD *)(a1 + 72) = v10;
        v10 = 0;
        v9 = 0uLL;
        v11 = (void **)&v9;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
      }
      if (CSCppDyldSharedCache::dsc_uuid(v6))
        v8 = (__n128 *)CSCppDyldSharedCache::dsc_uuid(v6);
      else
        v8 = (__n128 *)UUID::null_uuid(0);
      result = *v8;
      *(__n128 *)(a1 + 88) = *v8;
    }
  }
  return result;
}

uint64_t CSCppDyldSplitSharedCacheMemory::to_string@<X0>(CSCppDyldSplitSharedCacheMemory *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *i;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p[2];
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;
  char v22[9];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"CSCppDyldSplitSharedCache:\n", 27);
  v4 = (char *)*((_QWORD *)this + 1);
  for (i = (char *)*((_QWORD *)this + 2); v4 != i; v4 += 40)
  {
    LOBYTE(__p[0]) = 9;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)__p, 1);
    v7 = v4 + 8;
    if (v4[31] < 0)
      v7 = *(const char **)v7;
    v8 = strlen(v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" @ ", 3);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ; ", 3);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v4 + 48))(__p);
    if ((v17 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v17 & 0x80u) == 0)
      v13 = v17;
    else
      v13 = (uint64_t)__p[1];
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    v22[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v22, 1);
    if ((char)v17 < 0)
      operator delete(__p[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19, a2);
  v18 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E368EC](&v21);
}

void sub_1B4103FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CSCppDyldSplitSharedCacheMemory::filename_of_primary_shared_cache_for_uuid(const std::string::value_type *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  const std::string::value_type *v4;
  DIR *v5;
  dirent *v6;
  int v7;
  const char *v8;
  unint64_t v9;
  void *v10;
  const char *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t ArchitectureForName;
  int v17;
  std::string::size_type v18;
  UUID *v19;
  UUID *v20;
  std::string *v21;
  __int128 v23;
  std::string __p;
  _QWORD *v26;
  std::string v27;
  void *__dst[2];
  int64_t v29;
  const std::string::value_type *d_name;
  size_t v31;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a1[23] < 0)
  {
    v4 = *(const std::string::value_type **)a1;
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
    a1 = v4;
  }
  else
  {
    __p = *(std::string *)a1;
  }
  v26 = a2;
  v5 = opendir(a1);
  if (!v5)
    goto LABEL_46;
  do
  {
    v6 = readdir(v5);
    if (!v6)
      break;
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8))
        goto LABEL_13;
    }
    else if (*(_BYTE *)(a3 + 23))
    {
      goto LABEL_13;
    }
    if (v6->d_type == 8)
    {
      d_name = v6->d_name;
      v31 = strlen(v6->d_name);
      if (std::string_view::find[abi:ne180100]((uint64_t *)&d_name, "dyld_shared_cache_", 0) != -1
        && std::string_view::find[abi:ne180100]((uint64_t *)&d_name, ".map", 0) == -1)
      {
        v8 = CSCppDyldSplitSharedCacheMemory::arch_name_from_subcache_name((uint64_t)d_name, v31);
        v10 = (void *)v9;
        if (v9 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v11 = v8;
        if (v9 >= 0x17)
        {
          v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v13 = v9 | 7;
          v14 = v13 + 1;
          v12 = (void **)operator new(v13 + 1);
          __dst[1] = v10;
          v29 = v14 | 0x8000000000000000;
          __dst[0] = v12;
        }
        else
        {
          HIBYTE(v29) = v9;
          v12 = __dst;
          if (!v9)
            goto LABEL_24;
        }
        memmove(v12, v11, (size_t)v10);
LABEL_24:
        *((_BYTE *)v10 + (_QWORD)v12) = 0;
        if (v29 >= 0)
          v15 = (const char *)__dst;
        else
          v15 = (const char *)__dst[0];
        ArchitectureForName = CSArchitectureGetArchitectureForName(v15);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v27 = __p;
        std::string::append(&v27, d_name, v31);
        v17 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
        v18 = v27.__r_.__value_.__r.__words[0];
        v19 = (UUID *)operator new();
        v20 = v19;
        if (v17 >= 0)
          v21 = &v27;
        else
          v21 = (std::string *)v18;
        CSCppDyldSharedCacheMemory::CSCppDyldSharedCacheMemory(v19, ArchitectureForName, (char *)v21, 0);
        if (*(_QWORD *)&(*v20)[168] == *v26 && *(_QWORD *)&(*v20)[176] == v26[1])
        {
          if (*(char *)(a3 + 23) < 0)
            operator delete(*(void **)a3);
          v23 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
          *(_QWORD *)(a3 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
          *(_OWORD *)a3 = v23;
          *((_BYTE *)&v27.__r_.__value_.__s + 23) = 0;
          v27.__r_.__value_.__s.__data_[0] = 0;
          v7 = 1;
        }
        else
        {
          v7 = 0;
        }
        (*(void (**)(UUID *))(*(_QWORD *)v20 + 8))(v20);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29) < 0)
          operator delete(__dst[0]);
        continue;
      }
    }
LABEL_13:
    v7 = 0;
  }
  while (!v7);
  closedir(v5);
LABEL_46:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B4104310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (*(char *)(v29 + 23) < 0)
    operator delete(*(void **)v29);
  _Unwind_Resume(exception_object);
}

void CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CSCppDyldSplitSharedCacheMemory *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  char v10;
  char **v11;
  char *v12;

  if ((v5 & 1) == 0
  {
    CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::uuid_to_ondisk_path = 0u;
    *(_OWORD *)algn_1EF08DCD0 = 0u;
    dword_1EF08DCE0 = 1065353216;
  }
  v6 = atomic_load(&CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0 &&>>);
  }
  v7 = std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::find<UUID>(&CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::uuid_to_ondisk_path, this);
  if (v7)
  {
    v8 = v7;
    if (*((char *)v7 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v7[4], v7[5]);
    }
    else
    {
      v9 = *((_OWORD *)v7 + 2);
      a2->__r_.__value_.__r.__words[2] = v7[6];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v9;
    }
    a2[1].__r_.__value_.__r.__words[0] = v8[7];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    a2[1].__r_.__value_.__r.__words[0] = 0;
  }
}

void CSCppDyldSplitSharedCacheMemory::shared_cache_file_list_for_uuid(const std::string::value_type *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  const std::string::value_type *v5;
  DIR *v6;
  DIR *v7;
  dirent *i;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  std::vector<std::string> *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::string *end;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  std::string __p;
  _QWORD *v26;
  _QWORD *v27;
  std::string v28;
  const std::string::value_type *d_name;
  std::string::size_type v30;
  std::__split_buffer<std::string> __v;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1[23] < 0)
  {
    v5 = *(const std::string::value_type **)a1;
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
    a1 = v5;
  }
  else
  {
    __p = *(std::string *)a1;
  }
  v26 = a3;
  v27 = a2;
  v6 = opendir(a1);
  v7 = v6;
  if (v6)
  {
    for (i = readdir(v6); i; i = readdir(v7))
    {
      if (i->d_type == 8)
      {
        d_name = i->d_name;
        v30 = strlen(i->d_name);
        if (std::string_view::find[abi:ne180100]((uint64_t *)&d_name, "dyld_shared_cache_", 0) != -1
          && std::string_view::find[abi:ne180100]((uint64_t *)&d_name, ".map", 0) == -1)
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v28 = __p;
          std::string::append(&v28, d_name, v30);
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v9 = &v28;
          else
            v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
          v10 = (std::string *)new_partial_file_memory((uint64_t)v9, 0, 0, (uint64_t)&__block_literal_global_29);
          v11 = v10;
          if (v10)
          {
            __v.__first_ = v10;
            v12 = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&__v, 0);
            if (v12)
            {
              v32 = *(_OWORD *)(v12 + 88);
              if (std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::find<UUID>(v27, &v32))
              {
                v13 = (std::vector<std::string> *)v26;
                v14 = v26[1];
                v15 = v26[2];
                if (v14 >= v15)
                {
                  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v26) >> 3);
                  v19 = v18 + 1;
                  if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                  v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v26) >> 3);
                  if (2 * v20 > v19)
                    v19 = 2 * v20;
                  if (v20 >= 0x555555555555555)
                    v21 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v21 = v19;
                  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v26 + 2);
                  if (v21)
                    v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(v26 + 2), v21);
                  else
                    v22 = 0;
                  v23 = v22 + v18;
                  __v.__first_ = v22;
                  __v.__begin_ = v23;
                  __v.__end_cap_.__value_ = &v22[v21];
                  v24 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
                  v23->__r_.__value_.__r.__words[2] = v28.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
                  memset(&v28, 0, sizeof(v28));
                  __v.__end_ = v23 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(v13, &__v);
                  end = v13->__end_;
                  std::__split_buffer<std::string>::~__split_buffer(&__v);
                }
                else
                {
                  v16 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v14 + 16) = *((_QWORD *)&v28.__r_.__value_.__l + 2);
                  *(_OWORD *)v14 = v16;
                  memset(&v28, 0, sizeof(v28));
                  end = (std::string *)(v14 + 24);
                  v13->__end_ = (std::vector<std::string>::pointer)(v14 + 24);
                }
                v13->__end_ = end;
              }
            }
            (*(void (**)(std::string *))(v11->__r_.__value_.__r.__words[0] + 8))(v11);
          }
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
    }
    closedir(v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B41047A8(_Unwind_Exception *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__split_buffer<std::string> *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (a23 < 0)
    operator delete(__pa);
  if (SHIBYTE(a11) < 0)
    operator delete(a9);
  *(_QWORD *)(v25 - 112) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 112));
  _Unwind_Resume(a1);
}

void CSCppDyldSplitSharedCacheMemory::shared_cache_file_map_for_arch(const std::string::value_type *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const std::string::value_type *v5;
  DIR *v6;
  DIR *v7;
  dirent *v8;
  const char *v9;
  unint64_t v10;
  void *v11;
  const char *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t ArchitectureForName;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  std::string __p;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  std::string v36;
  void *__dst[2];
  int64_t v38;
  const std::string::value_type *d_name;
  size_t v40;
  std::__split_buffer<std::string> __v;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (a1[23] < 0)
  {
    v5 = *(const std::string::value_type **)a1;
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
    a1 = v5;
  }
  else
  {
    __p = *(std::string *)a1;
  }
  v33 = a2;
  v34 = a3;
  v35 = a2 == -1;
  v6 = opendir(a1);
  v7 = v6;
  if (v6)
  {
    v8 = readdir(v6);
    if (v8)
    {
      while (1)
      {
        if (v8->d_type == 8)
        {
          d_name = v8->d_name;
          v40 = strlen(v8->d_name);
          if (std::string_view::find[abi:ne180100]((uint64_t *)&d_name, "dyld_shared_cache_", 0) != -1
            && std::string_view::find[abi:ne180100]((uint64_t *)&d_name, ".map", 0) == -1)
          {
            break;
          }
        }
LABEL_41:
        v8 = readdir(v7);
        if (!v8)
          goto LABEL_42;
      }
      v9 = CSCppDyldSplitSharedCacheMemory::arch_name_from_subcache_name((uint64_t)d_name, v40);
      v11 = (void *)v10;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = v9;
      if (v10 >= 0x17)
      {
        v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v14 = v10 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __dst[1] = v11;
        v38 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v38) = v10;
        v13 = __dst;
        if (!v10)
          goto LABEL_17;
      }
      memmove(v13, v12, (size_t)v11);
LABEL_17:
      *((_BYTE *)v11 + (_QWORD)v13) = 0;
      if (v38 >= 0)
        v16 = (const char *)__dst;
      else
        v16 = (const char *)__dst[0];
      ArchitectureForName = CSArchitectureGetArchitectureForName(v16);
      if (ArchitectureForName && (v35 || CSArchitectureMatchesArchitecture(ArchitectureForName, v33)))
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v36, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v36 = __p;
        std::string::append(&v36, d_name, v40);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)__dst;
        v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
        v19 = *((_QWORD *)v18 + 6);
        v20 = *((_QWORD *)v18 + 7);
        if (v19 >= v20)
        {
          v22 = *((_QWORD *)v18 + 5);
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v22) >> 3);
          v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v22) >> 3);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          else
            v26 = v24;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v18 + 56);
          if (v26)
            v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(v18 + 56), v26);
          else
            v27 = 0;
          v28 = v27 + v23;
          __v.__first_ = v27;
          __v.__begin_ = v28;
          __v.__end_cap_.__value_ = &v27[v26];
          v29 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
          v28->__r_.__value_.__r.__words[2] = v36.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          memset(&v36, 0, sizeof(v36));
          __v.__end_ = v28 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v18 + 40), &__v);
          v30 = *((_QWORD *)v18 + 6);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v31 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
          *((_QWORD *)v18 + 6) = v30;
          if (v31 < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
        }
        else
        {
          v21 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
          *(_QWORD *)(v19 + 16) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
          *(_OWORD *)v19 = v21;
          *((_QWORD *)v18 + 6) = v19 + 24;
        }
      }
      if (SHIBYTE(v38) < 0)
        operator delete(__dst[0]);
      goto LABEL_41;
    }
LABEL_42:
    closedir(v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B4104B74(_Unwind_Exception *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__pa,std::__split_buffer<std::string> *a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__pa);
  if (SHIBYTE(a11) < 0)
    operator delete(a9);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

uint64_t CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_file_list(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  _BOOL4 v17;
  _BOOL4 is_primary_subcache;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;

  v5 = result;
  v40 = *MEMORY[0x1E0C80C00];
  v6 = *a4;
  v7 = a4[1];
  if (*a4 == v7)
  {
    v26 = *(_QWORD *)(result + 16);
    v27 = *(_QWORD *)(result + 8);
    v34 = (uint64_t *)(result + 16);
  }
  else
  {
    v9 = (uint64_t *)(result + 8);
    v10 = *(unsigned __int8 *)(result + 48);
    v34 = (uint64_t *)(result + 16);
    v30 = -1;
    v31 = result + 88;
    v29 = -1;
    do
    {
      if (*(char *)(v6 + 23) < 0)
      {
        v12 = *(_QWORD *)v6;
        v11 = *(_QWORD *)(v6 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v6 + 23);
        v12 = v6;
      }
      v37 = v12;
      v38 = v11;
      v13 = std::string_view::find[abi:ne180100](&v37, "dyld_shared_cache_", 0);
      v14 = v38 - v13;
      if (v38 < v13)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v15 = (unsigned __int8 *)(v37 + v13);
      *(_QWORD *)&v39 = v37 + v13;
      *((_QWORD *)&v39 + 1) = v38 - v13;
      v16 = std::string_view::find[abi:ne180100]((uint64_t *)&v39, ".development", 0);
      *(_QWORD *)&v39 = v15;
      *((_QWORD *)&v39 + 1) = v14;
      if (*(_BYTE *)(v5 + 48))
        v17 = std::string_view::find[abi:ne180100]((uint64_t *)&v39, ".symbols", 8, 0) != -1;
      else
        v17 = 1;
      is_primary_subcache = CSCppDyldSplitSharedCacheMemory::is_primary_subcache(v5, v15, v14);
      result = std::string_view::find[abi:ne180100](&v37, "/System/DriverKit/System/Library/dyld/", 0);
      if (!v10)
        v17 = 0;
      if ((((v16 == -1) ^ a3) & 1) != 0 || result != -1 || v17)
      {
        v19 = v6;
        if (*(char *)(v6 + 23) < 0)
          v19 = *(_QWORD *)v6;
        v20 = operator new();
        CSCppDyldSharedCacheMemory::CSCppDyldSharedCacheMemory(v20, a2, v19, a5, v31);
        v21 = *(_QWORD *)(v20 + 200);
        v35 = v21;
        v36 = v20;
        v22 = *(_QWORD *)(v5 + 16);
        if (v22 >= *(_QWORD *)(v5 + 24))
        {
          v25 = std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__emplace_back_slow_path<std::unique_ptr<CSCppDyldSharedCacheMemory>,std::string,unsigned long long &>((uint64_t *)(v5 + 8), &v36, (uint64_t *)v6, &v35);
        }
        else
        {
          v36 = 0;
          v23 = *(_QWORD *)v6;
          *(_QWORD *)&v39 = *(_QWORD *)(v6 + 8);
          *(_QWORD *)((char *)&v39 + 7) = *(_QWORD *)(v6 + 15);
          v24 = *(_BYTE *)(v6 + 23);
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)v6 = 0;
          *(_QWORD *)v22 = v20;
          *(_QWORD *)(v22 + 8) = v23;
          *(_QWORD *)(v22 + 23) = *(_QWORD *)((char *)&v39 + 7);
          *(_QWORD *)(v22 + 16) = v39;
          *(_BYTE *)(v22 + 31) = v24;
          *(_QWORD *)(v22 + 32) = v21;
          v25 = v22 + 40;
        }
        *v34 = v25;
        if (is_primary_subcache)
          v30 = -1 - 0x3333333333333333 * ((v25 - *v9) >> 3);
        if (v17)
          v29 = -1 - 0x3333333333333333 * ((v25 - *v9) >> 3);
        result = v36;
        v36 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      v6 += 24;
    }
    while (v6 != v7);
    v26 = *v34;
    v27 = *v9;
    v28 = 0xCCCCCCCCCCCCCCCDLL * ((*v34 - *v9) >> 3);
    if (v30 < v28)
    {
      *(_QWORD *)(v5 + 32) = v27 + 40 * v30;
      if (v29 < v28)
        *(_QWORD *)(v5 + 40) = v27 + 40 * v29;
      return result;
    }
  }
  while (v26 != v27)
  {
    v26 -= 40;
    result = std::__destroy_at[abi:ne180100]<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath,0>(v26);
  }
  *v34 = v27;
  return result;
}

void sub_1B4104F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

void CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_suffix_list(uint64_t a1, uint64_t a2, const void ***a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  std::string::size_type v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  std::string::size_type v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  const void **v45;
  const void **v46;
  int v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  std::string::size_type v63;
  uint64_t v64;
  void *v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  void *__p[4];
  uint64_t v78;
  uint64_t v79;
  std::string v80;
  std::string v81;
  char *v82;
  uint64_t v83;
  _BYTE v84[15];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(a4 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (char *)a4;
  else
    v9 = *(char **)a4;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  v10 = &v9[v8];
  if (v8 >= 12)
  {
    v11 = v9;
    do
    {
      v12 = (char *)memchr(v11, 46, v8 - 11);
      if (!v12)
        break;
      if (*(_QWORD *)v12 == 0x706F6C657665642ELL && *((_DWORD *)v12 + 2) == 1953391981)
        goto LABEL_15;
      v11 = v12 + 1;
      v8 = v10 - (_BYTE *)v11;
    }
    while (v10 - (_BYTE *)v11 > 11);
  }
  v12 = v10;
LABEL_15:
  if (v12 == v10)
    v14 = -1;
  else
    v14 = v12 - v9;
  std::string::basic_string(&v80, (const std::string *)a4, 0, v14, (std::allocator<char> *)&v81);
  v15 = *(char *)(a4 + 23);
  v16 = *(_QWORD *)a4;
  v17 = operator new();
  v18 = v17;
  if (v15 >= 0)
    v19 = a4;
  else
    v19 = v16;
  v74 = a1 + 88;
  CSCppDyldSharedCacheMemory::CSCppDyldSharedCacheMemory(v17, a2, v19, a5, a1 + 88);
  v78 = *(_QWORD *)(v18 + 200);
  v79 = v18;
  v20 = *(_QWORD *)(a1 + 16);
  v73 = (uint64_t *)(a1 + 8);
  if (v20 >= *(_QWORD *)(a1 + 24))
  {
    v21 = std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__emplace_back_slow_path<std::unique_ptr<CSCppDyldSharedCacheMemory>,std::string const&,unsigned long long &>((uint64_t *)(a1 + 8), &v79, a4, &v78);
  }
  else
  {
    std::construct_at[abi:ne180100]<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath,std::unique_ptr<CSCppDyldSharedCacheMemory>,std::string const&,unsigned long long &,CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath*>(v20, &v79, a4, &v78);
    v21 = v20 + 40;
    *(_QWORD *)(a1 + 16) = v20 + 40;
  }
  *(_QWORD *)(a1 + 16) = v21;
  v72 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 48))
  {
    *((_BYTE *)&v81.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&v81, ".symbols");
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v80;
    else
      v22 = (std::string *)v80.__r_.__value_.__r.__words[0];
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    else
      size = v80.__r_.__value_.__l.__size_;
    v24 = std::string::insert(&v81, 0, (const std::string::value_type *)v22, size);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __p[2] = (void *)v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    v26 = operator new();
    v27 = v26;
    if (SHIBYTE(__p[2]) >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    CSCppDyldSharedCacheMemory::CSCppDyldSharedCacheMemory(v26, a2, v28, a5, v74);
    v29 = *(_QWORD *)(v27 + 200);
    v30 = *(_QWORD *)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 24);
    if (v30 >= v31)
    {
      v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v30 - *v73) >> 3);
      v36 = v35 + 1;
      if (v35 + 1 > 0x666666666666666)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v31 - *v73) >> 3);
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 >= 0x333333333333333)
        v38 = 0x666666666666666;
      else
        v38 = v36;
      v83 = a1 + 24;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(a1 + 24, v38);
      v40 = (std::string::size_type)&v39[40 * v35];
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      v81.__r_.__value_.__l.__size_ = v40;
      v82 = &v39[40 * v41];
      *(void **)&v84[7] = *(void **)((char *)&__p[1] + 7);
      v42 = __p[0];
      *(void **)v84 = __p[1];
      v43 = HIBYTE(__p[2]);
      memset(__p, 0, 24);
      *(_QWORD *)v40 = v27;
      *(_QWORD *)(v40 + 8) = v42;
      *(_QWORD *)(v40 + 16) = *(_QWORD *)v84;
      *(_QWORD *)(v40 + 23) = *(_QWORD *)&v84[7];
      *(_BYTE *)(v40 + 31) = v43;
      *(_QWORD *)(v40 + 32) = v29;
      v81.__r_.__value_.__r.__words[2] = v40 + 40;
      std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__swap_out_circular_buffer(v73, &v81);
      v34 = *(_QWORD *)(a1 + 16);
      std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)&v81);
    }
    else
    {
      v32 = __p[0];
      v81.__r_.__value_.__l.__data_ = (std::string::pointer)__p[1];
      *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__p[1] + 7);
      v33 = HIBYTE(__p[2]);
      memset(__p, 0, 24);
      *(_QWORD *)v30 = v27;
      *(_QWORD *)(v30 + 8) = v32;
      *(_QWORD *)(v30 + 16) = v81.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v30 + 23) = *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(v30 + 31) = v33;
      *(_QWORD *)(v30 + 32) = v29;
      v34 = v30 + 40;
    }
    *(_QWORD *)(a1 + 16) = v34;
    v44 = -1 - 0x3333333333333333 * ((uint64_t)(v34 - *(_QWORD *)(a1 + 8)) >> 3);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v71 = v44;
  }
  else
  {
    v71 = -1;
  }
  v46 = *a3;
  v45 = a3[1];
  if (*a3 != v45)
  {
    do
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v80.__r_.__value_.__l.__data_, v46, (uint64_t)__p);
      v47 = SHIBYTE(__p[2]);
      v48 = (void **)__p[0];
      v49 = operator new();
      v50 = v49;
      if (v47 >= 0)
        v51 = __p;
      else
        v51 = v48;
      CSCppDyldSharedCacheMemory::CSCppDyldSharedCacheMemory(v49, a2, v51, a5, v74);
      v52 = *(_QWORD *)(v50 + 200);
      v53 = *(_QWORD *)(a1 + 16);
      v54 = *(_QWORD *)(a1 + 24);
      if (v53 >= v54)
      {
        v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - *v73) >> 3);
        v59 = v58 + 1;
        if (v58 + 1 > 0x666666666666666)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - *v73) >> 3);
        if (2 * v60 > v59)
          v59 = 2 * v60;
        if (v60 >= 0x333333333333333)
          v61 = 0x666666666666666;
        else
          v61 = v59;
        v83 = a1 + 24;
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(a1 + 24, v61);
        v63 = (std::string::size_type)&v62[40 * v58];
        v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        v81.__r_.__value_.__l.__size_ = v63;
        v82 = &v62[40 * v64];
        v65 = __p[0];
        *(void **)&v84[7] = *(void **)((char *)&__p[1] + 7);
        *(void **)v84 = __p[1];
        v66 = HIBYTE(__p[2]);
        memset(__p, 0, 24);
        *(_QWORD *)v63 = v50;
        *(_QWORD *)(v63 + 8) = v65;
        *(_QWORD *)(v63 + 16) = *(_QWORD *)v84;
        *(_QWORD *)(v63 + 23) = *(_QWORD *)&v84[7];
        *(_BYTE *)(v63 + 31) = v66;
        *(_QWORD *)(v63 + 32) = v52;
        v81.__r_.__value_.__r.__words[2] = v63 + 40;
        std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__swap_out_circular_buffer(v73, &v81);
        v57 = *(_QWORD *)(a1 + 16);
        std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)&v81);
      }
      else
      {
        v55 = __p[0];
        v81.__r_.__value_.__l.__data_ = (std::string::pointer)__p[1];
        *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__p[1] + 7);
        v56 = HIBYTE(__p[2]);
        memset(__p, 0, 24);
        *(_QWORD *)v53 = v50;
        *(_QWORD *)(v53 + 8) = v55;
        *(_QWORD *)(v53 + 16) = v81.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v53 + 23) = *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v53 + 31) = v56;
        *(_QWORD *)(v53 + 32) = v52;
        v57 = v53 + 40;
      }
      *(_QWORD *)(a1 + 16) = v57;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v46 += 3;
    }
    while (v46 != v45);
  }
  v67 = -1 - 0x3333333333333333 * ((v21 - v72) >> 3);
  v68 = *(_QWORD *)(a1 + 8);
  v69 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v68) >> 3);
  if (v67 < v69)
    *(_QWORD *)(a1 + 32) = v68 + 40 * v67;
  if (v71 < v69)
    *(_QWORD *)(a1 + 40) = v68 + 40 * v71;
  v70 = v79;
  v79 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
}

void sub_1B4105578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)&a32);
  if (a22 < 0)
    operator delete(__p);
  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_disk(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  std::string *v10;
  char *FamilyName;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  const char *v14;
  unint64_t ArchitectureForName;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  std::string v20;
  _QWORD v21[5];
  std::string v22;
  std::string v23;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v22 = *(std::string *)a3;
  CSCppDyldSplitSharedCacheMemory::filename_of_primary_shared_cache_for_arch(a2, (uint64_t)&v22, a4, &v23);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v23;
  else
    v10 = (std::string *)v23.__r_.__value_.__r.__words[0];
  CSCppDyldSplitSharedCacheMemory::analyze_primary_cache_for_symbols_file(a1, (uint64_t)v10);
  if (*(_BYTE *)(a1 + 50))
  {
    CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_suffix_list(a1, a2, (const void ***)(a1 + 56), (uint64_t)&v23, a5);
    goto LABEL_24;
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v20 = *(std::string *)a3;
  CSCppDyldSplitSharedCacheMemory::shared_cache_file_map_for_arch((const std::string::value_type *)&v20, a2, (uint64_t)v21);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  FamilyName = (char *)CSArchitectureGetFamilyName(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, FamilyName);
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(v21, (unsigned __int8 *)__p);
  v13 = v12;
  if ((v19 & 0x80000000) == 0)
  {
    if (!v12)
      goto LABEL_23;
LABEL_20:
    v14 = (const char *)(v13 + 16);
    if ((char)v13[39] < 0)
      v14 = *(const char **)v14;
    ArchitectureForName = CSArchitectureGetArchitectureForName(v14);
    v16 = *(_OWORD *)(v13 + 40);
    v17 = *((_QWORD *)v13 + 7);
    *((_QWORD *)v13 + 6) = 0;
    *((_QWORD *)v13 + 7) = 0;
    *((_QWORD *)v13 + 5) = 0;
    CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_file_list(a1, ArchitectureForName, a4, (uint64_t *)&v16, a5);
    __p[0] = &v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    goto LABEL_23;
  }
  operator delete(__p[0]);
  if (v13)
    goto LABEL_20;
LABEL_23:
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v21);
LABEL_24:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1B4105924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 49) < 0)
    operator delete(*(void **)(v24 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(uint64_t a1, CSCppDyldSplitSharedCacheMemory *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t shared_cache_range;
  pid_t v10;
  CSCppTaskMemory *v11;
  unint64_t v12;
  unint64_t v13;
  std::string::size_type v14;
  char v15;
  unint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  std::string::size_type v23;
  uint64_t v24;
  std::string::size_type v25;
  char v26;
  std::string *p_p;
  std::string::size_type size;
  const char *v29;
  unint64_t v30;
  void *v31;
  const char *v32;
  void **v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  unint64_t ArchitectureForName;
  int v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::string::size_type v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  std::string::size_type v55;
  uint64_t v56;
  std::string::size_type v57;
  char v58;
  uint64_t v59;
  void *v60;
  std::string v62;
  void *__dst[2];
  int64_t v64;
  std::string v65;
  std::string __p;
  std::string v67;
  char *v68;
  uint64_t v69;
  _QWORD v70[5];

  v70[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E6775E08;
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)UUID::null_uuid((UUID *)a1);
  if (mach_task_is_self((task_name_t)a2))
  {
    v67.__r_.__value_.__r.__words[0] = 0;
    shared_cache_range = _dyld_get_shared_cache_range();
    CSCppDyldSplitSharedCacheMemory::filename_of_primary_shared_cache(a2, a3, &v65);
    v10 = getpid();
    v11 = (CSCppTaskMemory *)operator new();
    CSCppTaskMemory::CSCppTaskMemory(v11, *MEMORY[0x1E0C83DA0], v10, 0);
    CSCppDyldSplitSharedCacheMemory::analyze_primary_cache_for_symbols_file(a1, (uint64_t)v11, shared_cache_range);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 >= v12)
    {
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *v8) >> 3);
      v19 = v18 + 1;
      if (v18 + 1 > 0x666666666666666)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v8) >> 3);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x333333333333333)
        v21 = 0x666666666666666;
      else
        v21 = v19;
      v69 = a1 + 24;
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(a1 + 24, v21);
      v23 = (std::string::size_type)&v22[40 * v18];
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      v67.__r_.__value_.__l.__size_ = v23;
      v68 = &v22[40 * v24];
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v65.__r_.__value_.__r.__words[1] + 7);
      v25 = v65.__r_.__value_.__r.__words[0];
      v26 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      __p.__r_.__value_.__r.__words[0] = v65.__r_.__value_.__l.__size_;
      memset(&v65, 0, sizeof(v65));
      *(_QWORD *)v23 = v11;
      *(_QWORD *)(v23 + 8) = v25;
      *(_QWORD *)(v23 + 16) = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v23 + 23) = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(v23 + 31) = v26;
      *(_QWORD *)(v23 + 32) = shared_cache_range;
      v67.__r_.__value_.__r.__words[2] = v23 + 40;
      std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__swap_out_circular_buffer(v8, &v67);
      v16 = *(_QWORD *)(a1 + 16);
      std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)&v67);
    }
    else
    {
      v67.__r_.__value_.__r.__words[0] = v65.__r_.__value_.__l.__size_;
      v14 = v65.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v65.__r_.__value_.__r.__words[1] + 7);
      v15 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      memset(&v65, 0, sizeof(v65));
      *(_QWORD *)v13 = v11;
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)(v13 + 16) = v67.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v13 + 23) = *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(v13 + 31) = v15;
      *(_QWORD *)(v13 + 32) = shared_cache_range;
      v16 = v13 + 40;
    }
    *(_QWORD *)(a1 + 16) = v16;
    if (!*(_BYTE *)(a1 + 48))
    {
      v34 = 0;
      goto LABEL_49;
    }
    CSCppDyldSplitSharedCacheMemory::filename_of_local_symbols_shared_cache(a2, a3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v29 = CSCppDyldSplitSharedCacheMemory::arch_name_from_subcache_name((uint64_t)p_p, size);
    v31 = (void *)v30;
    if (v30 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v32 = v29;
    if (v30 >= 0x17)
    {
      v35 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v35 = v30 | 7;
      v36 = v35 + 1;
      v33 = (void **)operator new(v35 + 1);
      __dst[1] = v31;
      v64 = v36 | 0x8000000000000000;
      __dst[0] = v33;
    }
    else
    {
      HIBYTE(v64) = v30;
      v33 = __dst;
      if (!v30)
        goto LABEL_29;
    }
    memmove(v33, v32, (size_t)v31);
LABEL_29:
    *((_BYTE *)v31 + (_QWORD)v33) = 0;
    if (v64 >= 0)
      v37 = (const char *)__dst;
    else
      v37 = (const char *)__dst[0];
    ArchitectureForName = CSArchitectureGetArchitectureForName(v37);
    v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v40 = __p.__r_.__value_.__r.__words[0];
    v41 = operator new();
    v42 = v41;
    if (v39 >= 0)
      v43 = &__p;
    else
      v43 = (std::string *)v40;
    CSCppDyldSharedCacheMemory::CSCppDyldSharedCacheMemory(v41, ArchitectureForName, v43, 0, a1 + 88);
    v44 = *(_QWORD *)(v42 + 200);
    v45 = *(_QWORD *)(a1 + 16);
    v46 = *(_QWORD *)(a1 + 24);
    if (v45 >= v46)
    {
      v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - *v8) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - *v8) >> 3);
      if (2 * v52 > v51)
        v51 = 2 * v52;
      if (v52 >= 0x333333333333333)
        v53 = 0x666666666666666;
      else
        v53 = v51;
      v69 = a1 + 24;
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(a1 + 24, v53);
      v55 = (std::string::size_type)&v54[40 * v50];
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
      v67.__r_.__value_.__l.__size_ = v55;
      v68 = &v54[40 * v56];
      v57 = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v70 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
      v70[0] = __p.__r_.__value_.__l.__size_;
      v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      memset(&__p, 0, sizeof(__p));
      *(_QWORD *)v55 = v42;
      *(_QWORD *)(v55 + 8) = v57;
      *(_QWORD *)(v55 + 16) = v70[0];
      *(_QWORD *)(v55 + 23) = *(_QWORD *)((char *)v70 + 7);
      *(_BYTE *)(v55 + 31) = v58;
      *(_QWORD *)(v55 + 32) = v44;
      v67.__r_.__value_.__r.__words[2] = v55 + 40;
      std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__swap_out_circular_buffer(v8, &v67);
      v49 = *(_QWORD *)(a1 + 16);
      std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)&v67);
    }
    else
    {
      v67.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__l.__size_;
      v47 = __p.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
      v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      memset(&__p, 0, sizeof(__p));
      *(_QWORD *)v45 = v42;
      *(_QWORD *)(v45 + 8) = v47;
      *(_QWORD *)(v45 + 16) = v67.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v45 + 23) = *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(v45 + 31) = v48;
      *(_QWORD *)(v45 + 32) = v44;
      v49 = v45 + 40;
    }
    *(_QWORD *)(a1 + 16) = v49;
    if (SHIBYTE(v64) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v34 = 1;
LABEL_49:
    v59 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 32) = v59;
    *(_QWORD *)(a1 + 40) = v59 + 40 * v34;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    {
      v60 = (void *)v65.__r_.__value_.__r.__words[0];
LABEL_56:
      operator delete(v60);
      return a1;
    }
    return a1;
  }
  CSCppDyldSplitSharedCacheMemory::shared_cache_directory_for_task(a2, &v67);
  v17 = CSCppDyldSplitSharedCacheMemory::task_uses_development_cache(a2);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v62, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v62 = v67;
  CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_disk(a1, a3, (uint64_t)&v62, v17, a4);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
  {
    v60 = (void *)v67.__r_.__value_.__r.__words[0];
    goto LABEL_56;
  }
  return a1;
}

void sub_1B4105F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)&a33);
  if (a20 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6)
{
  const void ***v12;
  std::string *p_p;
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::string __p;
  void **v19;

  *(_QWORD *)a1 = off_1E6775E08;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v12 = (const void ***)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)UUID::null_uuid((UUID *)a1);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v17 = *(std::string *)a3;
  CSCppDyldSplitSharedCacheMemory::filename_of_primary_shared_cache_for_arch(a2, (uint64_t)&v17, a4, &__p);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  CSCppDyldSplitSharedCacheMemory::analyze_primary_cache_for_symbols_file(a1, (uint64_t)p_p);
  if (*(_BYTE *)(a1 + 50))
  {
    CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_suffix_list(a1, a2, v12, (uint64_t)&__p, a6);
  }
  else
  {
    v15 = *a5;
    v16 = *((_QWORD *)a5 + 2);
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
    *(_QWORD *)a5 = 0;
    CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_file_list(a1, a2, a4, (uint64_t *)&v15, a6);
    v19 = (void **)&v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1B41061DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v26 - 72) = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 72));
  if (a25 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  std::string __p;

  *(_QWORD *)a1 = off_1E6775E08;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)UUID::null_uuid((UUID *)a1);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_disk(a1, a2, (uint64_t)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1B4106320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void ***v6;
  unint64_t v7;
  void **v8;
  const char *v9;
  unint64_t ArchitectureForName;
  void **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void **v15;
  char *v16;
  unsigned __int8 v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 v25;
  uint64_t v26;
  std::string v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[5];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t (*v35)(uint64_t);
  _BYTE v36[32];
  int v37;
  std::string v38;
  void **v39;
  unint64_t v40;
  unsigned __int8 v41;
  void **v42[3];

  *(_QWORD *)a1 = off_1E6775E08;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (const void ***)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)UUID::null_uuid((UUID *)a1);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v38 = *(std::string *)a2;
  CSCppDyldSplitSharedCacheMemory::filename_of_primary_shared_cache_for_uuid((const std::string::value_type *)&v38, a3, (uint64_t)&v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (((char)v41 & 0x80000000) == 0)
  {
    v7 = v41;
    if (!v41)
      return a1;
    v8 = (void **)&v39;
    goto LABEL_11;
  }
  v7 = v40;
  if (v40)
  {
    v8 = v39;
LABEL_11:
    v9 = CSCppDyldSplitSharedCacheMemory::arch_name_from_subcache_name((uint64_t)v8, v7);
    ArchitectureForName = CSArchitectureGetArchitectureForName(v9);
    if ((v41 & 0x80u) == 0)
      v11 = (void **)&v39;
    else
      v11 = v39;
    if ((v41 & 0x80u) == 0)
      v12 = v41;
    else
      v12 = v40;
    v13 = (char *)v11 + v12;
    if (v12 >= 12)
    {
      v14 = v12;
      v15 = v11;
      do
      {
        v16 = (char *)memchr(v15, 46, v14 - 11);
        if (!v16)
          break;
        if (*(_QWORD *)v16 == 0x706F6C657665642ELL && *((_DWORD *)v16 + 2) == 1953391981)
          goto LABEL_26;
        v15 = (void **)(v16 + 1);
        v14 = v13 - (char *)v15;
      }
      while (v13 - (char *)v15 > 11);
    }
    v16 = (char *)v11 + v12;
LABEL_26:
    v19 = v16 != v13 && v16 - (char *)v11 != -1;
    CSCppDyldSplitSharedCacheMemory::analyze_primary_cache_for_symbols_file(a1, (uint64_t)v11);
    if (*(_BYTE *)(a1 + 50))
    {
      CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_suffix_list(a1, ArchitectureForName, v6, (uint64_t)&v39, 0);
    }
    else
    {
      v31 = 0;
      v32 = &v31;
      v33 = 0x5002000000;
      v34 = __Block_byref_object_copy__5;
      v35 = __Block_byref_object_dispose__5;
      memset(v36, 0, sizeof(v36));
      v37 = 1065353216;
      if ((v41 & 0x80u) == 0)
        v20 = (void **)&v39;
      else
        v20 = v39;
      v21 = new_partial_file_memory((uint64_t)v20, 0, 0, (uint64_t)&__block_literal_global_9);
      v22 = v21;
      if (v21)
      {
        *(_QWORD *)&v28 = v21;
        v23 = (_DWORD *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v28, 0);
        if (v23)
        {
          v30[0] = MEMORY[0x1E0C809B0];
          v30[1] = 0x40000000;
          v30[2] = ___ZN31CSCppDyldSplitSharedCacheMemoryC2ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPK11CFUUIDBytes_block_invoke_2;
          v30[3] = &unk_1E6775E88;
          v30[4] = &v31;
          CSCppDyldSharedCache::for_each_subcache_entry_uuid(v23, (uint64_t)v30);
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v27 = *(std::string *)a2;
          CSCppDyldSplitSharedCacheMemory::shared_cache_file_list_for_uuid((const std::string::value_type *)&v27, v32 + 5, &v28);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          v25 = v28;
          v26 = v29;
          v29 = 0;
          v28 = 0uLL;
          CSCppDyldSplitSharedCacheMemory::initialize_subcaches_from_file_list(a1, ArchitectureForName, v19, (uint64_t *)&v25, 0);
          v42[0] = (void **)&v25;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v42);
          v42[0] = (void **)&v28;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v42);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      _Block_object_dispose(&v31, 8);
      std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v36);
    }
  }
  if ((char)v41 < 0)
    operator delete(v39);
  return a1;
}

void sub_1B41066B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  _Block_object_dispose(&a28, 8);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v28);
  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__5(uint64_t a1)
{
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 40);
}

uint64_t CSCppDyldSplitSharedCacheMemory::primary_shared_cache(CSCppDyldSplitSharedCacheMemory *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 4);
  if (!v1 || !*v1)
    return 0;
  v2 = v1[4];
  v4 = *v1;
  return TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v4, v2);
}

uint64_t CSCppDyldSplitSharedCacheMemory::local_symbols_shared_cache(CSCppDyldSplitSharedCacheMemory *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 5);
  if (!v1 || !*v1)
    return 0;
  v2 = v1[4];
  v4 = *v1;
  return TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v4, v2);
}

uint64_t CSCppDyldSplitSharedCacheMemory::local_symbols_shared_cache_path(CSCppDyldSplitSharedCacheMemory *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  result = v1 + 8;
  if (*(char *)(v1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t CSCppDyldSplitSharedCacheMemory::primary_shared_cache_uuid(CSCppDyldSplitSharedCacheMemory *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t CSCppDyldSplitSharedCacheMemory::text_address(CSCppDyldSplitSharedCacheMemory *this)
{
  const void **v1;
  const void **v2;
  const void *v3;
  _QWORD *v4;
  uint64_t result;

  v1 = (const void **)*((_QWORD *)this + 1);
  v2 = (const void **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  while (1)
  {
    v3 = *v1;
    if (*v1)
    {
      {
        if (v4)
        {
          result = v4[8];
          if (result)
            break;
        }
      }
    }
    v1 += 5;
    if (v1 == v2)
      return 0;
  }
  return result;
}

unint64_t CSCppDyldSplitSharedCacheMemory::file_range_for_memory_range(uint64_t a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  const void **v4;
  const void **v5;
  const void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v12[2];
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v12[0] = a2;
  v12[1] = a3;
  v13 = a4;
  v4 = *(const void ***)(a1 + 8);
  v5 = *(const void ***)(a1 + 16);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *v4;
      if (*v4)
      {
        {
          if (v7)
          {
            v8 = CSCppDyldSharedCacheMemory::file_range_for_memory_range((uint64_t)v7, v12, v13);
            if (v8 && v9 != 0)
              break;
          }
        }
      }
      v4 += 5;
      if (v4 == v5)
        return v14;
    }
    v14 = v8;
    v15 = v9;
  }
  return v14;
}

BOOL CSCppDyldSplitSharedCacheMemory::contains_address(CSCppDyldSplitSharedCacheMemory *this, uint64_t a2)
{
  return CSCppDyldSplitSharedCacheMemory::shared_cache_for_address(this, a2) != 0;
}

char *CSCppDyldSplitSharedCacheMemory::shared_cache_for_address(CSCppDyldSplitSharedCacheMemory *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  char *v11;
  _QWORD v12[7];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  const void *v17;

  v11 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        if (*(_QWORD *)v2)
        {
          v5 = *(_QWORD *)(v2 + 32);
          v17 = *(const void **)v2;
          v6 = (char *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v17, v5);
          if (v6)
            break;
        }
        v2 += 40;
        if (v2 == v3)
          goto LABEL_16;
      }
      if (*(_QWORD *)v2
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 0x40000000;
        v12[2] = ___ZNK31CSCppDyldSplitSharedCacheMemory21for_each_shared_cacheIZNKS_24shared_cache_for_addressEmE3__0EEvT__block_invoke;
        v12[3] = &unk_1E6775FB0;
        v12[5] = a2;
        v12[6] = &v11;
        v12[4] = &v13;
        CSCppDyldSharedCache::for_each_mapped_cache(v6, (uint64_t)v12);
      }
      else
      {
        v7 = v14;
        CSCppDyldSharedCache::text_segment_range((CSCppDyldSharedCache *)v6);
        if (a2 - v5 < v8)
        {
          v11 = v6;
          *((_BYTE *)v7 + 24) = 1;
        }
      }
      v2 += 40;
      if (*((_BYTE *)v14 + 24))
        v9 = 1;
      else
        v9 = v2 == v3;
    }
    while (!v9);
  }
LABEL_16:
  _Block_object_dispose(&v13, 8);
  return v11;
}

void sub_1B4106BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CSCppDyldSplitSharedCacheMemory::~CSCppDyldSplitSharedCacheMemory(CSCppDyldSplitSharedCacheMemory *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_1E6775E08;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_1E6775E08;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1B5E36940](this, 0x10A1C404D4F90C9);
}

uint64_t CSCppDyldSplitSharedCacheMemory::is_task(CSCppDyldSplitSharedCacheMemory *this)
{
  return 1;
}

uint64_t CSCppDyldSplitSharedCacheMemory::is_dyld_shared_cache(CSCppDyldSplitSharedCacheMemory *this)
{
  return 1;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void CSCppDyldSplitSharedCacheMemory::shared_cache_directory_for_task(unsigned int)::$_1::operator()(char **a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  void **v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, *a1);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v10 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v6 = v10;
  else
    v6 = (std::string::size_type)__p[1];
  v7 = std::string::append(&v11, (const std::string::value_type *)v5, v6);
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a3, v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
  }
  else
  {
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
  }
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1B4106E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

uint64_t std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__emplace_back_slow_path<std::unique_ptr<CSCppDyldSharedCacheMemory>,std::string,unsigned long long &>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];
  _BYTE v24[15];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v23[4] = a1 + 2;
  v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(v11, v13);
  v15 = &v14[40 * v6];
  v23[0] = v14;
  v23[1] = v15;
  v23[3] = &v14[40 * v16];
  v17 = *a2;
  *a2 = 0;
  *(_QWORD *)&v24[7] = *(uint64_t *)((char *)a3 + 15);
  v18 = *a3;
  *(_QWORD *)v24 = a3[1];
  v19 = *((_BYTE *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v20 = *a4;
  *(_QWORD *)v15 = v17;
  *((_QWORD *)v15 + 1) = v18;
  *((_QWORD *)v15 + 2) = *(_QWORD *)v24;
  *(_QWORD *)(v15 + 23) = *(_QWORD *)&v24[7];
  v15[31] = v19;
  *((_QWORD *)v15 + 4) = v20;
  v23[2] = v15 + 40;
  std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__swap_out_circular_buffer(a1, v23);
  v21 = a1[1];
  std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)v23);
  return v21;
}

void sub_1B4106FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 40);
    v2 -= 40;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v4 - 40) = v5;
    v4 -= 40;
    v6 = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v2 + 32);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__destroy_at[abi:ne180100]<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath,0>(uint64_t a1)
{
  uint64_t result;

  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  result = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__destroy_at[abi:ne180100]<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath,0>(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__emplace_back_slow_path<std::unique_ptr<CSCppDyldSharedCacheMemory>,std::string const&,unsigned long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(v11, v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[40 * v6];
  v20 = &v14[40 * v13];
  std::construct_at[abi:ne180100]<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath,std::unique_ptr<CSCppDyldSharedCacheMemory>,std::string const&,unsigned long long &,CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath*>((uint64_t)v18, a2, a3, a4);
  v19 = v18 + 40;
  std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_1B4107234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath,std::unique_ptr<CSCppDyldSharedCacheMemory>,std::string const&,unsigned long long &,CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath*>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  std::string v9;

  v6 = *a2;
  *a2 = 0;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v9 = *(std::string *)a3;
  v7 = *a4;
  *(_QWORD *)a1 = v6;
  *(std::string *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 32) = v7;
  return a1;
}

void sub_1B41072C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::__destroy_at[abi:ne180100]<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(_QWORD *a1, uint64_t a2)
{
  const char *v4;
  unint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;

  v4 = (const char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, 32);
  v6 = (unsigned int *)v4;
  if (v4)
  {
    v7 = v5;
    if (!strncmp(v4, "dyld_v", 6uLL))
    {
      v8 = v6[4];
      v9 = v6[5];
      v10 = v6[98];
      v11 = CSCppDyldSharedCache::uses_universal_cache_struct_layout((CSCppDyldSharedCache *)v6);
      v12 = 24;
      if (v11)
        v12 = 56;
      if (v8 + 32 * v9 + v10 + v12 * (unint64_t)v6[99] > v7)
        return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v6;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0 &&>>(uint64_t a1)
{
  unsigned __int8 v1;
  int v2;
  const char *v3;
  uint64_t v4;
  void **v5;
  std::string::size_type v6;
  unint64_t v7;
  std::string::size_type v8;
  unint64_t v9;
  const void *v10;
  std::string *p_dst;
  size_t v12;
  size_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  std::string *v21;
  UUID *v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  char v26;
  void **v27;
  std::string::value_type *__s;
  std::string v29;
  std::string v30;
  std::string __dst;
  std::string v32;
  size_t __len[2];
  void **v34;
  void **v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  _QWORD v39[2];
  __int128 v40;
  __int128 *v41;
  _QWORD v42[3];
  _QWORD v43[3];
  _QWORD v44[3];
  __int128 v45[385];
  uint64_t v46;

  MEMORY[0x1E0C80A78](a1);
  v46 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    CSCppMachTask::CSCppMachTask((CSCppMachTask *)&v40, *MEMORY[0x1E0C83DA0], 0);
    v26 = CSCppMachTask::uses_development_dsc((CSCppMachTask *)&v40);
    CSCppMachTask::~CSCppMachTask((CSCppMachTask *)&v40);
    CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::analysis_process_uses_development_dsc = v26;
  }
  v2 = CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::analysis_process_uses_development_dsc;
  v3 = ".development";
  if (!CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::analysis_process_uses_development_dsc)
    v3 = "";
  __s = (std::string::value_type *)v3;
  std::string::basic_string[abi:ne180100]<0>(&v40, "arm64e");
  std::string::basic_string[abi:ne180100]<0>(&v41, "arm64");
  std::string::basic_string[abi:ne180100]<0>(v42, "arm64_32");
  std::string::basic_string[abi:ne180100]<0>(v43, "x86_64");
  std::string::basic_string[abi:ne180100]<0>(v44, "x86_64h");
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v34 = (void **)&v36;
  LOBYTE(v35) = 0;
  v36 = (std::string *)operator new(0x78uLL);
  v37 = v36;
  v38 = v36 + 5;
  v4 = 0;
  v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, &v40, v45, v36);
  do
  {
    if (SHIBYTE(v44[v4 + 2]) < 0)
      operator delete((void *)v44[v4]);
    v4 -= 3;
  }
  while (v4 != -15);
  shared_cache_search_directories(&v34);
  v5 = v34;
  v27 = v35;
  if (v34 != v35)
  {
    if (v2)
      v6 = 12;
    else
      v6 = 0;
    while (1)
    {
      *(_OWORD *)__len = *(_OWORD *)v5;
      v7 = std::string_view::find[abi:ne180100]((uint64_t *)__len, "/System/DriverKit/System/Library/dyld/", 0);
      v8 = __len[1];
      if (__len[1] >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = v7;
      v10 = (const void *)__len[0];
      if (__len[1] >= 0x17)
      {
        v12 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len[1] | 7) != 0x17)
          v12 = __len[1] | 7;
        v13 = v12 + 1;
        p_dst = (std::string *)operator new(v12 + 1);
        __dst.__r_.__value_.__l.__size_ = v8;
        __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len[1];
        p_dst = &__dst;
        if (!__len[1])
          goto LABEL_20;
      }
      memmove(p_dst, v10, v8);
LABEL_20:
      p_dst->__r_.__value_.__s.__data_[v8] = 0;
      v14 = std::string::append(&__dst, "dyld_shared_cache_", 0x12uLL);
      if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, v14->__r_.__value_.__l.__data_, v14->__r_.__value_.__l.__size_);
      }
      else
      {
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v16 = v36;
      v17 = v37;
      while (v16 != v17)
      {
        memset(&__dst, 0, sizeof(__dst));
        if (v9 == -1)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v32.__r_.__value_.__l.__data_, (const void **)&v16->__r_.__value_.__l.__data_, (uint64_t)&v30);
          v18 = std::string::append(&v30, __s, v6);
          v19 = v18->__r_.__value_.__r.__words[0];
          v39[0] = v18->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
          v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst.__r_.__value_.__r.__words[0] = v19;
          __dst.__r_.__value_.__l.__size_ = v39[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v39 + 7);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
        }
        else
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v32.__r_.__value_.__l.__data_, (const void **)&v16->__r_.__value_.__l.__data_, (uint64_t)&v30);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst = v30;
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &__dst;
        else
          v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if (!access((const char *)v21, 4))
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v22 = (UUID *)__dst.__r_.__value_.__r.__words[0];
            std::string::__init_copy_ctor_external(&v29, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else
          {
            v29 = __dst;
            v22 = (UUID *)&__dst;
          }
          v41 = 0;
          v23 = (char *)operator new(0x20uLL);
          *(_QWORD *)v23 = off_1E6775EE8;
          *(std::string *)(v23 + 8) = v29;
          memset(&v29, 0, sizeof(v29));
          v41 = (__int128 *)v23;
          with_primary_shared_cache_uuid_and_unslid_base_from_path(v22, (uint64_t)&v40);
          v24 = v41;
          if (v41 == &v40)
          {
            v24 = &v40;
            v25 = 4;
LABEL_46:
            (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
          }
          else if (v41)
          {
            v25 = 5;
            goto LABEL_46;
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        ++v16;
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      v5 += 2;
      if (v5 == v27)
      {
        v5 = v34;
        break;
      }
    }
  }
  if (v5)
  {
    v35 = v5;
    operator delete(v5);
  }
  v34 = (void **)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
}

void sub_1B4107904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  CSCppMachTask::~CSCppMachTask((CSCppMachTask *)&a47);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B4107B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6775EE8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6775EE8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E36940);
}

_QWORD *std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1E6775EE8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1B4107C98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1E6775EE8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::operator()(uint64_t a1, UUID **a2, uint64_t *a3)
{
  UUID *v4;
  uint64_t v5;
  std::string __p;
  uint64_t v7;

  v4 = *a2;
  v5 = *a3;
  if (!UUID::is_null(*a2))
  {
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      __p = *(std::string *)(a1 + 8);
    v7 = v5;
    std::__hash_table<std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>>>::__emplace_unique_key_args<UUID,UUID const&,std::pair<std::string,unsigned long long>>((uint64_t)&CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::uuid_to_ondisk_path, v4, (__int128 *)v4, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B4107DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1},std::allocator<CSCppDyldSplitSharedCacheMemory::path_and_base_address_for_ondisk_shared_cache_with_uuid(CFUUIDBytes const*)::$_0::operator() const(void)::{lambda(UUID const*,unsigned long long)#1}>,void ()(UUID const*,unsigned long long)>::target_type()
{
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>>>::__emplace_unique_key_args<UUID,UUID const&,std::pair<std::string,unsigned long long>>(uint64_t a1, _QWORD *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = a2[1] ^ *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x40uLL);
  v16 = *a3;
  v17 = *a4;
  v18 = *((_QWORD *)a4 + 2);
  v19 = *((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = v16;
  *((_OWORD *)v12 + 2) = v17;
  v12[6] = v18;
  v12[7] = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *v12 = *v27;
LABEL_42:
    *v27 = v12;
    goto LABEL_43;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v26 + 8 * v4) = v15;
  if (*v12)
  {
    v28 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9)
        v28 %= v9;
    }
    else
    {
      v28 &= v9 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1B4108074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<UUID,std::pair<std::string,unsigned long long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::find<UUID>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1] ^ *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2[1] ^ *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a2 && result[3] == a2[1])
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B410870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1B41087AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__emplace_unique_key_args<UUID,UUID const&>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2[1] ^ *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2[1] ^ *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *i = *v20;
LABEL_42:
    *v20 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4108B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t ___ZNK31CSCppDyldSplitSharedCacheMemory21for_each_shared_cacheIZNKS_24shared_cache_for_addressEmE3__0EEvT__block_invoke(uint64_t a1, CSCppDyldSharedCache *this)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = CSCppDyldSharedCache::text_segment_range(this);
  if (*(_QWORD *)(a1 + 40) - (_QWORD)this < v6)
  {
    **(_QWORD **)(a1 + 48) = this;
    *(_BYTE *)(v4 + 24) = 1;
  }
  return result;
}

BOOL has_minimum_source_info_attributes(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 result;
  BOOL v5;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = *a1 + 4;
  do
  {
    v3 = *(unsigned __int16 *)(v2 - 4);
    result = v3 == 16;
    v5 = v3 == 16 || v2 == v1;
    v2 += 4;
  }
  while (!v5);
  return result;
}

void CSCppArchitecture::CSCppArchitecture(CSCppArchitecture *this)
{
  host_t v2;
  unsigned int v3;
  size_t v4;
  int v5;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[3];
  uint64_t v8;

  v2 = MEMORY[0x1B5E36DC0]();
  host_info_outCnt = 12;
  if (!host_info(v2, 1, host_info_out, &host_info_outCnt))
  {
    v3 = v8;
    *(_QWORD *)this = v8;
    if (!HIBYTE(v3))
    {
      v5 = 0;
      v4 = 4;
      sysctlbyname("hw.cpu64bit_capable", &v5, &v4, 0, 0);
      if (v5)
        *(_DWORD *)this |= 0x1000000u;
    }
  }
}

uint64_t CSCppArchitecture::current_architecture(CSCppArchitecture *this)
{
  unsigned __int8 v1;

  {
    CSCppArchitecture::CSCppArchitecture((CSCppArchitecture *)&CSCppArchitecture::current_architecture(void)::arch);
  }
  return CSCppArchitecture::current_architecture(void)::arch;
}

void sub_1B4108D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CSCppArchitecture::is_little_endian(CSCppArchitecture *this)
{
  int v1;
  _QWORD *v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_DWORD *)this & 0xFFFFFF;
  if (v1 == 7)
    return 1;
  if (v1 != 18)
  {
    if (v1 != 12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"CSCppArchitecture: cannot answer isLittleEndian for cpu_type ", 61);
      v3 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" cpuSubtype ", 12);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
      Exception::Exception(v5, &v6);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v5);
    }
    return 1;
  }
  return 0;
}

void sub_1B4108E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSCppArchitecture::is_64_bit(CSCppArchitecture *this)
{
  int v1;
  BOOL v2;
  _QWORD *v4;
  _QWORD *exception;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((unsigned __int8 *)this + 3) << 24;
  if (v1)
    v2 = v1 == 0x2000000;
  else
    v2 = 1;
  if (v2)
    return 0;
  if (v1 != 0x1000000)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"CSCppArchitecture: cannot answer is64Bit for cpu_type ", 54);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" cpuSubtype ", 12);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v9, &v7);
    Exception::Exception(v6, &v7);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v6);
  }
  return 1;
}

void sub_1B4108F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL CSCppArchitecture::matches(CSCppArchitecture *a1, unint64_t a2)
{
  int v2;
  unint64_t v5;
  char is_64_bit;
  char v7;
  _BOOL8 result;
  int v9;
  int v10;
  _DWORD v11[2];

  v2 = a2;
  if (*(_DWORD *)a1 == -1 || (_DWORD)a2 == -1)
    return 1;
  v5 = HIDWORD(a2);
  is_64_bit = CSCppArchitecture::is_64_bit(a1);
  v7 = v2 == -64 ? is_64_bit : 0;
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)a1 == -64)
  {
    v11[0] = v2;
    v11[1] = v5;
    if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)v11) & 1) != 0)
      return 1;
  }
  if (*(_DWORD *)a1 != v2)
    return 0;
  v9 = v2 & 0xFFFFFF;
  if ((v2 & 0xFFFFFF) != 7)
  {
    if (v9 == 12 || v9 == 18)
    {
      v10 = *((_DWORD *)a1 + 1);
      result = 1;
      if ((v10 & 0xFFFFFF) == 0 || (v5 & 0xFFFFFF) == 0)
        return result;
    }
    else
    {
      v10 = *((_DWORD *)a1 + 1);
    }
    return v10 == (_DWORD)v5;
  }
  v10 = *((_DWORD *)a1 + 1);
  result = 1;
  if ((v10 & 0xFFFFFF) != 3 && (v5 & 0xFFFFFF) != 3)
    return v10 == (_DWORD)v5;
  return result;
}

void sub_1B4109094(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B4109014);
}

BOOL CSCppArchitecture::is_wildcard_architecture(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  do
    v2 = qword_1B41A8C80[v1];
  while (v2 != a1 && v1++ != 2);
  return v2 == a1;
}

uint64_t CSCppBitLock::CSCppBitLock(uint64_t result, unsigned int *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;

  *(_QWORD *)result = a2;
  for (*(_DWORD *)(result + 8) = a3; ; a3 = *(_DWORD *)(result + 8))
  {
    do
      v3 = *a2;
    while ((*a2 & a3) != 0);
    v4 = __ldaxr(a2);
    if (v4 == v3)
      break;
    __clrex();
LABEL_7:
    a2 = *(unsigned int **)result;
  }
  if (__stxr(v3 | a3, a2))
    goto LABEL_7;
  return result;
}

void CSCppBitLock::~CSCppBitLock(CSCppBitLock *this)
{
  atomic_store(**(_DWORD **)this & ~*((_DWORD *)this + 2), *(unsigned int **)this);
}

unsigned int **CSCppBitLock::set_bits(unsigned int **this, int a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *this;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 | a2, v2));
  return this;
}

uint64_t **CSCppDeferredDemangler::symbolAddressesForDemangledNameImpl(CSCppDeferredDemangler *this, const char *a2)
{
  std::mutex *v4;
  uint64_t **v5;
  const void *v7[2];

  v4 = (std::mutex *)((char *)this + 120);
  std::mutex::lock((std::mutex *)((char *)this + 120));
  v7[0] = a2;
  v7[1] = (const void *)strlen(a2);
  v5 = std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__equal_range_multi<std::string_view>((_QWORD *)this + 5, v7);
  std::mutex::unlock(v4);
  return v5;
}

void sub_1B41091B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

char *CSCppDeferredDemangler::demangledNameForSymbol(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return CSCppDeferredDemangler::demangledNameForSymbolImpl<CSCppMMapSymbol>(a1, a2, (char *)(*(unsigned int *)(a2 + 16) + a3));
}

char *CSCppDeferredDemangler::demangledNameForSymbolImpl<CSCppMMapSymbol>(uint64_t a1, unint64_t a2, char *a3)
{
  std::mutex *v6;
  DemanglingUtilities::CSCppReusableDemanglingBuffer **v7;
  DemanglingUtilities::CSCppReusableDemanglingBuffer *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v12;
  std::string::size_type v13;
  uint64_t v14;
  char *v15;
  char **v16;
  unint64_t *v17;
  char *v18;
  int v19;
  _BOOL8 v20;
  char *v21;
  size_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  std::string v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;

  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7 = (DemanglingUtilities::CSCppReusableDemanglingBuffer **)(a1 + 256);
  if (!*(_QWORD *)(a1 + 256))
  {
    v8 = (DemanglingUtilities::CSCppReusableDemanglingBuffer *)operator new();
    DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer(v8);
    std::unique_ptr<DemanglingUtilities::CSCppReusableDemanglingBuffer>::reset[abi:ne180100]((void ***)(a1 + 256), (void **)v8);
  }
  v27 = a2;
  v9 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>((_QWORD *)a1, &v27);
  if (v9)
  {
    v10 = (char *)v9[3];
  }
  else if (a3)
  {
    std::mutex::lock((std::mutex *)(a1 + 184));
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    v12 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>((_QWORD *)(a1 + 80), (unint64_t *)&v26);
    if (v12)
    {
      if (*((char *)v12 + 47) < 0)
      {
        v10 = (char *)v12[3];
        v13 = v12[4];
      }
      else
      {
        v10 = (char *)(v12 + 3);
        v13 = *((unsigned __int8 *)v12 + 47);
      }
      v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      v26.__r_.__value_.__l.__size_ = v13;
      if (a2)
      {
        *(_QWORD *)&v29 = a2;
        std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, (unint64_t *)&v29, &v29, &v26);
      }
      std::mutex::unlock((std::mutex *)(a1 + 184));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 184));
      if ((*(_BYTE *)(a2 + 8) & 2) != 0)
      {
        if (!strncmp(a3, "DYLD-STUB$$", 0xBuLL))
          v14 = 11;
        else
          v14 = 0;
        a3 += v14;
      }
      v15 = (char *)DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(*v7);
      v16 = (char **)CSCppAddressSet::sort(*v7);
      v18 = DemanglingUtilities::demangle_with_reusable_buffer(a3, v15, v16, v17);
      v19 = *(_DWORD *)(a2 + 8);
      v20 = (v19 & 0x380000) != 0 && *a3 == 95;
      v21 = &a3[v20];
      if (v18)
        v10 = v18;
      else
        v10 = v21;
      if (v18 || (v19 & 2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v26, v10);
        if ((*(_BYTE *)(a2 + 8) & 2) != 0)
        {
          std::string::insert(&v26, 0, "DYLD-STUB$$", 0xBuLL);
          a3 -= 11;
        }
        std::mutex::lock((std::mutex *)(a1 + 184));
        *(_QWORD *)&v29 = a3;
        v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,unsigned long,std::string>(a1 + 80, (unint64_t *)&v29, &v29, (uint64_t)&v26);
        if (v24)
        {
          if (v23[47] < 0)
          {
            v10 = (char *)*((_QWORD *)v23 + 3);
            v25 = *((_QWORD *)v23 + 4);
          }
          else
          {
            v10 = v23 + 24;
            v25 = v23[47];
          }
          *(_QWORD *)&v29 = v10;
          *((_QWORD *)&v29 + 1) = v25;
          v28 = a2;
          std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, &v28, &v28, &v29);
        }
        else
        {
          v10 = 0;
        }
        std::mutex::unlock((std::mutex *)(a1 + 184));
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
      }
      else
      {
        v22 = strlen(v10);
        v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
        v26.__r_.__value_.__l.__size_ = v22;
        *(_QWORD *)&v29 = a2;
        std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, (unint64_t *)&v29, &v29, &v26);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  std::mutex::unlock(v6);
  return v10;
}

void sub_1B4109464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

std::string::size_type CSCppDeferredDemangler::demangledNameForSymbol(CSCppDeferredDemangler *this, const FlatbufferSymbols::Symbol *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  char *v4;
  const FlatbufferSymbols::Symbol *v6;

  v6 = a2;
  v2 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v2 >= 9u && (v3 = v2[4]) != 0)
    v4 = (char *)a2 + v3 + *(unsigned int *)((char *)a2 + v3) + 4;
  else
    v4 = 0;
  return CSCppDeferredDemangler::demangledNameForSymbolImpl<FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>>((uint64_t)this, (unint64_t *)&v6, v4);
}

std::string::size_type CSCppDeferredDemangler::demangledNameForSymbolImpl<FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>>(uint64_t a1, unint64_t *a2, char *a3)
{
  std::mutex *v6;
  DemanglingUtilities::CSCppReusableDemanglingBuffer **v7;
  unint64_t v8;
  DemanglingUtilities::CSCppReusableDemanglingBuffer *v9;
  _QWORD *v10;
  std::string::size_type v11;
  _QWORD *v13;
  std::string::size_type v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char **v19;
  unint64_t *v20;
  char *v21;
  _BOOL4 is_name_source_dwarf;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;
  uint64_t v26;
  _BOOL4 v27;
  char *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  std::string v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;

  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7 = (DemanglingUtilities::CSCppReusableDemanglingBuffer **)(a1 + 256);
  if (*(_QWORD *)(a1 + 256))
  {
    if (a2)
    {
LABEL_3:
      v8 = *a2;
      goto LABEL_6;
    }
  }
  else
  {
    v9 = (DemanglingUtilities::CSCppReusableDemanglingBuffer *)operator new();
    DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer(v9);
    std::unique_ptr<DemanglingUtilities::CSCppReusableDemanglingBuffer>::reset[abi:ne180100]((void ***)(a1 + 256), (void **)v9);
    if (a2)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_6:
  v37 = v8;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>((_QWORD *)a1, &v37);
  if (v10)
  {
    v11 = v10[3];
  }
  else if (a3)
  {
    std::mutex::lock((std::mutex *)(a1 + 184));
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    v13 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>((_QWORD *)(a1 + 80), (unint64_t *)&v36);
    if (v13)
    {
      if (*((char *)v13 + 47) < 0)
      {
        v11 = v13[3];
        v14 = v13[4];
      }
      else
      {
        v11 = (std::string::size_type)(v13 + 3);
        v14 = *((unsigned __int8 *)v13 + 47);
      }
      v36.__r_.__value_.__r.__words[0] = v11;
      v36.__r_.__value_.__l.__size_ = v14;
      if (a2)
      {
        *(_QWORD *)&v39 = *a2;
        std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, (unint64_t *)&v39, &v39, &v36);
      }
      std::mutex::unlock((std::mutex *)(a1 + 184));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 184));
      v15 = (unsigned __int16 *)(*a2 - *(int *)*a2);
      if (*v15 >= 0x13u)
      {
        v16 = v15[9];
        if (v16)
        {
          if ((*(_BYTE *)(*a2 + v16) & 2) != 0)
          {
            if (!strncmp(a3, "DYLD-STUB$$", 0xBuLL))
              v17 = 11;
            else
              v17 = 0;
            a3 += v17;
          }
        }
      }
      v18 = (char *)DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(*v7);
      v19 = (char **)CSCppAddressSet::sort(*v7);
      v21 = DemanglingUtilities::demangle_with_reusable_buffer(a3, v18, v19, v20);
      is_name_source_dwarf = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_name_source_dwarf(a2);
      v23 = *a2;
      v24 = (unsigned __int16 *)(*a2 - *(int *)*a2);
      v25 = *v24;
      if (v25 < 0x13)
      {
        LODWORD(v26) = 0;
      }
      else
      {
        v26 = v24[9];
        if (v24[9])
          LODWORD(v26) = (*(unsigned __int8 *)(v23 + v26 + 1) >> 1) & 1;
      }
      v27 = (v26 | is_name_source_dwarf) == 1 && *a3 == 95;
      v11 = (std::string::size_type)&a3[v27];
      if (v21)
        v28 = v21;
      else
        v28 = &a3[v27];
      if (v21 || v25 >= 0x13 && (v34 = v24[9]) != 0 && (*(_BYTE *)(v23 + v34) & 2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v36, v28);
        v29 = (unsigned __int16 *)(*a2 - *(int *)*a2);
        if (*v29 >= 0x13u)
        {
          v30 = v29[9];
          if (v30)
          {
            if ((*(_BYTE *)(*a2 + v30) & 2) != 0)
            {
              std::string::insert(&v36, 0, "DYLD-STUB$$", 0xBuLL);
              a3 -= 11;
            }
          }
        }
        std::mutex::lock((std::mutex *)(a1 + 184));
        *(_QWORD *)&v39 = a3;
        v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,unsigned long,std::string>(a1 + 80, (unint64_t *)&v39, &v39, (uint64_t)&v36);
        if (v32)
        {
          if (v31[47] < 0)
          {
            v11 = *((_QWORD *)v31 + 3);
            v33 = *((_QWORD *)v31 + 4);
          }
          else
          {
            v11 = (std::string::size_type)(v31 + 24);
            v33 = v31[47];
          }
          *(_QWORD *)&v39 = v11;
          *((_QWORD *)&v39 + 1) = v33;
          v38 = *a2;
          std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, &v38, &v38, &v39);
        }
        else
        {
          v11 = 0;
        }
        std::mutex::unlock((std::mutex *)(a1 + 184));
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
      }
      else
      {
        v35 = strlen(&a3[v27]);
        v36.__r_.__value_.__r.__words[0] = v11;
        v36.__r_.__value_.__l.__size_ = v35;
        *(_QWORD *)&v39 = v23;
        std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, (unint64_t *)&v39, &v39, &v36);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  std::mutex::unlock(v6);
  return v11;
}

void sub_1B4109894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

std::string::size_type CSCppDeferredDemangler::demangledNameForSymbol(CSCppDeferredDemangler *this, const FlatbufferSymbols::InlineSymbol *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  char *v4;
  const FlatbufferSymbols::InlineSymbol *v6;

  v6 = a2;
  v2 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v2 >= 9u && (v3 = v2[4]) != 0)
    v4 = (char *)a2 + v3 + *(unsigned int *)((char *)a2 + v3) + 4;
  else
    v4 = 0;
  return CSCppDeferredDemangler::demangledNameForSymbolImpl<FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>>((uint64_t)this, (unint64_t *)&v6, v4);
}

std::string::size_type CSCppDeferredDemangler::demangledNameForSymbolImpl<FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>>(uint64_t a1, unint64_t *a2, char *a3)
{
  std::mutex *v6;
  DemanglingUtilities::CSCppReusableDemanglingBuffer **v7;
  unint64_t v8;
  DemanglingUtilities::CSCppReusableDemanglingBuffer *v9;
  _QWORD *v10;
  std::string::size_type v11;
  _QWORD *v13;
  std::string::size_type v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char **v19;
  unint64_t *v20;
  char *v21;
  _BOOL4 is_name_source_dwarf;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;
  uint64_t v26;
  _BOOL4 v27;
  char *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  std::string v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;

  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v7 = (DemanglingUtilities::CSCppReusableDemanglingBuffer **)(a1 + 256);
  if (*(_QWORD *)(a1 + 256))
  {
    if (a2)
    {
LABEL_3:
      v8 = *a2;
      goto LABEL_6;
    }
  }
  else
  {
    v9 = (DemanglingUtilities::CSCppReusableDemanglingBuffer *)operator new();
    DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer(v9);
    std::unique_ptr<DemanglingUtilities::CSCppReusableDemanglingBuffer>::reset[abi:ne180100]((void ***)(a1 + 256), (void **)v9);
    if (a2)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_6:
  v37 = v8;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>((_QWORD *)a1, &v37);
  if (v10)
  {
    v11 = v10[3];
  }
  else if (a3)
  {
    std::mutex::lock((std::mutex *)(a1 + 184));
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    v13 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>((_QWORD *)(a1 + 80), (unint64_t *)&v36);
    if (v13)
    {
      if (*((char *)v13 + 47) < 0)
      {
        v11 = v13[3];
        v14 = v13[4];
      }
      else
      {
        v11 = (std::string::size_type)(v13 + 3);
        v14 = *((unsigned __int8 *)v13 + 47);
      }
      v36.__r_.__value_.__r.__words[0] = v11;
      v36.__r_.__value_.__l.__size_ = v14;
      if (a2)
      {
        *(_QWORD *)&v39 = *a2;
        std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, (unint64_t *)&v39, &v39, &v36);
      }
      std::mutex::unlock((std::mutex *)(a1 + 184));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 184));
      v15 = (unsigned __int16 *)(*a2 - *(int *)*a2);
      if (*v15 >= 0x11u)
      {
        v16 = v15[8];
        if (v16)
        {
          if ((*(_BYTE *)(*a2 + v16) & 2) != 0)
          {
            if (!strncmp(a3, "DYLD-STUB$$", 0xBuLL))
              v17 = 11;
            else
              v17 = 0;
            a3 += v17;
          }
        }
      }
      v18 = (char *)DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(*v7);
      v19 = (char **)CSCppAddressSet::sort(*v7);
      v21 = DemanglingUtilities::demangle_with_reusable_buffer(a3, v18, v19, v20);
      is_name_source_dwarf = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_name_source_dwarf(a2);
      v23 = *a2;
      v24 = (unsigned __int16 *)(*a2 - *(int *)*a2);
      v25 = *v24;
      if (v25 < 0x11)
      {
        LODWORD(v26) = 0;
      }
      else
      {
        v26 = v24[8];
        if (v24[8])
          LODWORD(v26) = (*(unsigned __int8 *)(v23 + v26 + 1) >> 1) & 1;
      }
      v27 = (v26 | is_name_source_dwarf) == 1 && *a3 == 95;
      v11 = (std::string::size_type)&a3[v27];
      if (v21)
        v28 = v21;
      else
        v28 = &a3[v27];
      if (v21 || v25 >= 0x11 && (v34 = v24[8]) != 0 && (*(_BYTE *)(v23 + v34) & 2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v36, v28);
        v29 = (unsigned __int16 *)(*a2 - *(int *)*a2);
        if (*v29 >= 0x11u)
        {
          v30 = v29[8];
          if (v30)
          {
            if ((*(_BYTE *)(*a2 + v30) & 2) != 0)
            {
              std::string::insert(&v36, 0, "DYLD-STUB$$", 0xBuLL);
              a3 -= 11;
            }
          }
        }
        std::mutex::lock((std::mutex *)(a1 + 184));
        *(_QWORD *)&v39 = a3;
        v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,unsigned long,std::string>(a1 + 80, (unint64_t *)&v39, &v39, (uint64_t)&v36);
        if (v32)
        {
          if (v31[47] < 0)
          {
            v11 = *((_QWORD *)v31 + 3);
            v33 = *((_QWORD *)v31 + 4);
          }
          else
          {
            v11 = (std::string::size_type)(v31 + 24);
            v33 = v31[47];
          }
          *(_QWORD *)&v39 = v11;
          *((_QWORD *)&v39 + 1) = v33;
          v38 = *a2;
          std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, &v38, &v38, &v39);
        }
        else
        {
          v11 = 0;
        }
        std::mutex::unlock((std::mutex *)(a1 + 184));
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
      }
      else
      {
        v35 = strlen(&a3[v27]);
        v36.__r_.__value_.__r.__words[0] = v11;
        v36.__r_.__value_.__l.__size_ = v35;
        *(_QWORD *)&v39 = v23;
        std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(a1, (unint64_t *)&v39, &v39, &v36);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  std::mutex::unlock(v6);
  return v11;
}

void sub_1B4109CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t **CSCppDeferredDemangler::mmapSymbolAddressesForDemangledName(CSCppDeferredDemangler *this, const char *a2)
{
  if (a2)
    return CSCppDeferredDemangler::symbolAddressesForDemangledNameImpl(this, a2);
  else
    return 0;
}

void CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  _QWORD v6[3];
  _QWORD **v7;
  _QWORD *v8;

  v4 = (unint64_t *)(a1 + 248);
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a1;
  v5 = atomic_load(v4);
  if (v5 != -1)
  {
    v8 = v6;
    v7 = &v8;
    std::__call_once(v4, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(TMMapSymbolOwnerData *,CSCppSymbolOwner *)::$_0 &&>>);
  }
}

{
  unint64_t *v4;
  unint64_t v5;
  _QWORD v6[3];
  _QWORD **v7;
  _QWORD *v8;

  v4 = (unint64_t *)(a1 + 248);
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a1;
  v5 = atomic_load(v4);
  if (v5 != -1)
  {
    v8 = v6;
    v7 = &v8;
    std::__call_once(v4, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(FlatbufferSymbolOwnerData *,CSCppSymbolOwner *)::$_0 &&>>);
  }
}

void CSCppDeferredDemangler::~CSCppDeferredDemangler(CSCppDeferredDemangler *this)
{
  std::unique_ptr<DemanglingUtilities::CSCppReusableDemanglingBuffer>::reset[abi:ne180100]((void ***)this + 32, 0);
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  std::mutex::~mutex((std::mutex *)((char *)this + 120));
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)this);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void **std::unique_ptr<DemanglingUtilities::CSCppReusableDemanglingBuffer>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(result);
    JUMPOUT(0x1B5E36940);
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::string_view>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string_view>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string_view>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,std::string_view&>(uint64_t a1, unint64_t *a2, _QWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1B410A118(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,unsigned long,std::string>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v12 + 5) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v12 = *v22;
LABEL_38:
    *v22 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *v14;
  *v14 = v12;
  *(_QWORD *)(v21 + 8 * v4) = v14;
  if (*(_QWORD *)v12)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1B410A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(TMMapSymbolOwnerData *,CSCppSymbolOwner *)::$_0 &&>>(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  _QWORD v8[6];

  v1 = (_QWORD *)**a1;
  v2 = v1[1];
  v3 = v1[2];
  v4 = *v1;
  v5 = *(_DWORD **)(*v1 + 88);
  v6 = (unint64_t)v5
     + 32 * v5[2]
     + 24 * v5[3]
     + (24 * v5[4])
     + (unint64_t)(4 * v5[4])
     + (36 * v5[5])
     + (20 * v5[6])
     + v5[22]
     + v5[20]
     + 96;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZZN22CSCppDeferredDemangler34demangleAllConcreteSymbolsIfNeededEP20TMMapSymbolOwnerDataP16CSCppSymbolOwnerENK3__0clEv_block_invoke;
  v8[3] = &__block_descriptor_tmp_8;
  v8[4] = v3;
  v8[5] = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v4 + 88))(v4, v2, v8);
}

void ___ZZN22CSCppDeferredDemangler34demangleAllConcreteSymbolsIfNeededEP20TMMapSymbolOwnerDataP16CSCppSymbolOwnerENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  if (!*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 12))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = CSCppDeferredDemangler::demangledNameForSymbolImpl<CSCppMMapSymbol>(v4, v3, (char *)(*(unsigned int *)(v3 + 16) + *(_QWORD *)(a1 + 40)));
    CSCppDeferredDemangler::cacheDemangledNameToConcreteSymbol<CSCppMMapSymbol>(v4, (uint64_t)v5, v6, v3);
  }
}

void CSCppDeferredDemangler::cacheDemangledNameToConcreteSymbol<CSCppMMapSymbol>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  if (a4)
  {
    v6 = a4;
    v5 = (std::mutex *)(a1 + 120);
    std::mutex::lock((std::mutex *)(a1 + 120));
    std::__hash_table<std::__hash_value_type<std::string_view,unsigned long>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned long>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned long>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned long>>>::__emplace_multi<std::string_view&,unsigned long const&>((_QWORD *)(a1 + 40), &v7, &v6);
    std::mutex::unlock(v5);
  }
}

void sub_1B410A50C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string_view,unsigned long>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned long>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned long>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned long>>>::__emplace_multi<std::string_view&,unsigned long const&>(_QWORD *a1, _OWORD *a2, _QWORD *a3)
{
  void *v6;

  v6 = operator new(0x28uLL);
  *(_QWORD *)v6 = 0;
  *((_OWORD *)v6 + 1) = *a2;
  *((_QWORD *)v6 + 4) = *a3;
  *((_QWORD *)v6 + 1) = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *((uint64_t **)v6 + 2), *((_QWORD *)v6 + 3));
  return std::__hash_table<std::__hash_value_type<std::string_view,unsigned int>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned int>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned int>>>::__node_insert_multi(a1, (uint64_t)v6);
}

void sub_1B410A588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(FlatbufferSymbolOwnerData *,CSCppSymbolOwner *)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v1 = **a1;
  v2 = v1[1];
  v3 = v1[2];
  v4 = *v1;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZZN22CSCppDeferredDemangler34demangleAllConcreteSymbolsIfNeededEP25FlatbufferSymbolOwnerDataP16CSCppSymbolOwnerENK3__0clEv_block_invoke;
  v6[3] = &__block_descriptor_tmp_3_2;
  v6[4] = v3;
  return FlatbufferSymbolOwnerData::symbols(v4, v2, (uint64_t)v6);
}

void ___ZZN22CSCppDeferredDemangler34demangleAllConcreteSymbolsIfNeededEP25FlatbufferSymbolOwnerDataP16CSCppSymbolOwnerENK3__0clEv_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int16 *v5;
  std::string::size_type v6;
  uint64_t v7;

  if ((a2 & 7 | (8 * (a3 & 3))) == 5)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v5 = (unsigned __int16 *)((a3 & 0xFFFFFFFFFFFFFFFCLL) - *(int *)(a3 & 0xFFFFFFFFFFFFFFFCLL));
    if (*v5 < 0xBu || !v5[5])
    {
      v6 = CSCppDeferredDemangler::demangledNameForSymbol(*(CSCppDeferredDemangler **)(a1 + 32), (const FlatbufferSymbols::Symbol *)(a3 & 0xFFFFFFFFFFFFFFFCLL));
      CSCppDeferredDemangler::cacheDemangledNameToConcreteSymbol<FlatbufferSymbols::Symbol>(v3, v6, v7, v4);
    }
  }
}

void CSCppDeferredDemangler::cacheDemangledNameToConcreteSymbol<FlatbufferSymbols::Symbol>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  if (a4)
  {
    v6 = a4;
    v5 = (std::mutex *)(a1 + 120);
    std::mutex::lock((std::mutex *)(a1 + 120));
    std::__hash_table<std::__hash_value_type<std::string_view,unsigned long>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,unsigned long>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,unsigned long>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,unsigned long>>>::__emplace_multi<std::string_view&,unsigned long const&>((_QWORD *)(a1 + 40), &v7, &v6);
    std::mutex::unlock(v5);
  }
}

void sub_1B410A6D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

__CFString *CSCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  __CFString *i;
  int v4;
  __CFString *result;

  i = CFSTR("Unknown typeRef");
  v4 = a3;
  switch(a1 & 7 | (8 * (a2 & 3)))
  {
    case 0:
      for (i = CFStringCreateMutable(0, 0); v4; --v4)
        CFStringAppendCString(i, "\t", 0x8000100u);
      CFStringAppendCString(i, "kCSNull", 0x8000100u);
      goto LABEL_6;
    case 2:
      result = CSSymbolicatorCopyDescriptionWithIndent(a1, a2, a3);
      break;
    case 3:
      result = CSSymbolOwnerCopyDescriptionWithIndent(a1, a2, a3);
      break;
    case 4:
      result = CSRegionCopyDescriptionWithIndent(a1, a2, a3);
      break;
    case 5:
    case 0xALL:
      result = CSSymbolCopyDescriptionWithIndent(a1, a2, a3);
      break;
    case 6:
      result = CSSourceInfoCopyDescriptionWithIndent(a1, a2, a3);
      break;
    case 9:
      result = CSSymbolicationSessionCopyDescriptionWithIndent(a1, a2, a3);
      break;
    default:
LABEL_6:
      result = i;
      break;
  }
  return result;
}

void CSCppDwarfAbbrev::~CSCppDwarfAbbrev(CSCppDwarfAbbrev *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = off_1E6776020;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 5);
  }
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t CSCppDwarfAbbrev::parse_stream(uint64_t this, void *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = *(uint64_t **)(this + 40);
  v4 = *(uint64_t **)(this + 48);
  if (v3 != v4)
  {
    v7 = this;
    do
    {
      v8 = *v3++;
      this = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2, a3);
    }
    while (v3 != v4);
    v10 = *(uint64_t **)(v7 + 40);
    v9 = *(uint64_t **)(v7 + 48);
    while (v10 != v9)
    {
      v11 = *v10++;
      this = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v11 + 24))(v11, a2, a3);
    }
  }
  return this;
}

void CSCppDwarfAbbrevTable::~CSCppDwarfAbbrevTable(CSCppDwarfAbbrevTable *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  *(_QWORD *)this = &off_1E6776060;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v2 = (_QWORD *)*((_QWORD *)this + 2);
    }
    ++v3;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  if (v5 != v4)
  {
    do
    {
      if (*v5)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
        v4 = (_QWORD *)*((_QWORD *)this + 5);
      }
      ++v5;
    }
    while (v5 != v4);
    v5 = (_QWORD *)*((_QWORD *)this + 4);
  }
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

{
  CSCppDwarfAbbrevTable::~CSCppDwarfAbbrevTable(this);
  JUMPOUT(0x1B5E36940);
}

uint64_t new_partial_file_memory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *MEMORY[0x1E0C85AD8];
  v8 = operator new();
  CSCppFileMemory::CSCppFileMemory(v8, a1, a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v8) <= v7)
    return v8;
  v9 = operator new();
  CSCppFileMemory::CSCppFileMemory(v9, a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v9;
}

void sub_1B410AB54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1B5E36940](v2, 0x1093C406FCC8570);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t new_memory_for_object_in_archive(char *a1, char *a2, int a3, unint64_t a4, int a5, int a6)
{
  uint64_t v6;
  _QWORD v8[6];
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v14 = 0;
  v15 = a4;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___Z32new_memory_for_object_in_archivePKcS0_j17CSCppArchitecturejj_block_invoke;
  v8[3] = &unk_1E6776088;
  v8[4] = &v11;
  v8[5] = a1;
  v9 = a3;
  v10 = a6;
  iterate_symbol_owners_from_memory(0, a1, 0, 0, a5, &v15, a2, 0, (uint64_t)v8);
  v6 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1B410AC5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 56), 8);
  _Unwind_Resume(a1);
}

uint64_t iterate_symbol_owners_from_memory(uint64_t a1, char *a2, unsigned int a3, uint64_t a4, int a5, unint64_t *a6, char *a7, char a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  _QWORD v29[9];
  unsigned int v30;
  int v31;
  char v32;
  _QWORD v33[10];
  unsigned int v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD v42[9];
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD v50[5];
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char v54;

  if (a1)
  {
    v14 = a1;
    v15 = 0;
    v26 = 0;
  }
  else
  {
    v15 = operator new();
    CSCppFileMemory::CSCppFileMemory(v15, a2, a4);
    v26 = *(_QWORD *)(v15 + 16);
    a3 = *(_DWORD *)(v15 + 56);
    v14 = v15;
  }
  v41 = v14;
  if (v15)
    v16 = 0;
  else
    v16 = v14;
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = 0;
  v17 = MEMORY[0x1E0C809B0];
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 0x40000000;
  v33[2] = ___Z33iterate_symbol_owners_from_memoryP11CSCppMemoryPKcjyjRK17CSCppArchitectureS2_bU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke;
  v33[3] = &unk_1E6776128;
  v33[6] = a6;
  v33[7] = v16;
  v34 = a3;
  v35 = a5;
  v33[8] = a2;
  v33[9] = a7;
  v36 = a8;
  v33[4] = a9;
  v33[5] = &v37;
  if (!TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::foreach_arch_in_macho_fat32_header(&v41, a4, (uint64_t)v33))
  {
    v29[0] = v17;
    v29[1] = 0x40000000;
    v29[2] = ___Z33iterate_symbol_owners_from_memoryP11CSCppMemoryPKcjyjRK17CSCppArchitectureS2_bU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke_2;
    v29[3] = &unk_1E6776150;
    v29[6] = a6;
    v29[7] = v16;
    v29[8] = a2;
    v30 = a3;
    v31 = a5;
    v32 = a8;
    v29[4] = a9;
    v29[5] = &v37;
    if (!TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::foreach_arch_in_macho_fat64_header(&v41, a4, (uint64_t)v29))
    {
      if (v15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v14 = 0;
      }
      v19 = *a6;
      v51 = 0;
      v52 = &v51;
      v53 = 0x2000000000;
      v54 = 0;
      v50[0] = v17;
      v50[1] = 0x40000000;
      v50[2] = ___ZL37iterate_symbol_owners_from_mh_filesetI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKcNT_6size_tENS8_5ptr_tES9_j17CSCppArchitectureU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke;
      v50[3] = &unk_1E6776470;
      v50[4] = &v51;
      v20 = new_partial_file_memory((uint64_t)a2, a4, 1, (uint64_t)v50);
      v21 = v20;
      if (v20)
      {
        if (*((_BYTE *)v52 + 24))
        {
          v49 = v20;
          v45 = 0;
          v46 = &v45;
          v47 = 0x2000000000;
          v48 = 0;
          v22 = *(_QWORD *)(v20 + 16);
          v42[0] = v17;
          v42[1] = 0x40000000;
          v42[2] = ___ZL37iterate_symbol_owners_from_mh_filesetI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKcNT_6size_tENS8_5ptr_tES9_j17CSCppArchitectureU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke_2;
          v42[3] = &unk_1E67764C0;
          v42[4] = a9;
          v42[5] = &v45;
          v42[6] = a2;
          v42[7] = a3;
          v23 = a3;
          v42[8] = v22;
          v43 = a5;
          v44 = v19;
          TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::foreach_fileset_entry(&v49, a4, (uint64_t)v42);
          v24 = *((unsigned __int8 *)v46 + 24);
          _Block_object_dispose(&v45, 8);
          _Block_object_dispose(&v51, 8);
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          if (v24)
            goto LABEL_21;
        }
        else
        {
          v23 = a3;
          _Block_object_dispose(&v51, 8);
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        }
      }
      else
      {
        v23 = a3;
        _Block_object_dispose(&v51, 8);
      }
      if ((process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(v14, (uint64_t)a2, v23, a4, v26, a5, a6, a9) & 1) == 0&& (process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(v14, (uint64_t)a2, a3, a4, v26, a5, a6, a9) & 1) == 0)
      {
        v18 = iterate_symbol_owners_from_archive(a2, a4, a5, (uint64_t)a6, a7, a8, a9);
        goto LABEL_22;
      }
LABEL_21:
      v18 = 1;
LABEL_22:
      _Block_object_dispose(&v37, 8);
      return v18;
    }
  }
  v18 = *((_BYTE *)v38 + 24) != 0;
  _Block_object_dispose(&v37, 8);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v18;
}

void sub_1B410B010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  _Block_object_dispose((const void *)(v37 - 216), 8);
  _Block_object_dispose((const void *)(v37 - 136), 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z32new_memory_for_object_in_archivePKcS0_j17CSCppArchitecturejj_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v3 = result;
    if (*(_DWORD *)(*(_QWORD *)a2 + 104) == *(_DWORD *)(result + 48))
    {
      v4 = operator new();
      result = CSCppFileMemory::CSCppFileMemory(v4, *(_QWORD *)(v3 + 40), *(_QWORD *)(*(_QWORD *)a2 + 152));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = v4;
    }
  }
  return result;
}

void sub_1B410B13C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x1093C406FCC8570);
  _Unwind_Resume(a1);
}

const char *split_static_library_path(const char *a1)
{
  size_t v2;
  uint64_t v3;
  int v4;
  const char *v5;

  v2 = strlen(a1);
  if (v2 >= 8 && a1[v2 - 1] == 41 && a1[v2 - 2] == 111 && a1[v2 - 3] == 46)
  {
    while (v2 != 4)
    {
      v3 = 0;
      v4 = a1[v2 - 4];
      if (v4 == 41 || v4 == 47)
        return (const char *)v3;
      --v2;
      if (v4 == 40)
      {
        v5 = &a1[v2];
        if (a1[v2 - 4] != 97)
          return 0;
        if (*(v5 - 5) == 46)
          return v5 - 3;
        else
          return 0;
      }
    }
  }
  return 0;
}

void process_shared_cache_library_with_path(CSCppDyldSplitSharedCacheMemory *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int is_little_endian;
  int is_64_bit;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  __int128 *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CSCppDyldSharedCache *v38;
  uint64_t v39;
  void ***v40;
  CSCppDyldSharedCache *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  _QWORD *v46;
  _BYTE v47[88];
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 **v52;
  std::__shared_weak_count *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v9 = CSCppDyldSplitSharedCacheMemory::text_address(a1);
  if (v9)
  {
    v10 = v9;
    is_little_endian = CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v43);
    is_64_bit = CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v43);
    if (is_little_endian)
    {
      if (is_64_bit)
      {
        v13 = 32;
        while (1)
        {
          v14 = (_DWORD *)(*(uint64_t (**)(CSCppDyldSplitSharedCacheMemory *, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(a1, v10, v13);
          if (!v14 || *v14 != -17958193)
            break;
          v13 = v14[5] + 32;
          if (v13 <= v15)
          {
            LOBYTE(v48) = 0;
            LOBYTE(v49) = 0;
            TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader((uint64_t)v47, (uint64_t)a1, v10, (uint64_t)v14, a4, 0, a3, &v48);
            TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner((uint64_t)v47, &v50);
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v52 = &v44;
            LOBYTE(v53) = 0;
            v16 = (__int128 *)operator new(0x10uLL);
            v44 = v16;
            v45 = v16;
            v46 = v16 + 1;
            v17 = v51;
            *(_QWORD *)v16 = v50;
            *((_QWORD *)v16 + 1) = v17;
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldxr(p_shared_owners);
              while (__stxr(v19 + 1, p_shared_owners));
              v20 = v51;
              v45 = v16 + 1;
              if (v51)
              {
                v21 = (unint64_t *)&v51->__shared_owners_;
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 - 1, v21));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
            }
            else
            {
              v45 = v16 + 1;
            }
            v34 = *((_QWORD *)a1 + 4);
            if (v34)
              v35 = *(_QWORD *)(v34 + 32);
            else
              v35 = 0;
            v38 = (CSCppDyldSharedCache *)CSCppDyldSplitSharedCacheMemory::primary_shared_cache(a1);
            v39 = CSCppDyldSharedCache::dsc_uuid(v38);
            (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 **))(a5 + 16))(a5, v35, v39, &v44);
            v52 = &v44;
            v40 = (void ***)&v52;
            goto LABEL_38;
          }
        }
      }
      else
      {
        v23 = 28;
        while (1)
        {
          v24 = (_DWORD *)(*(uint64_t (**)(CSCppDyldSplitSharedCacheMemory *, _QWORD, unint64_t))(*(_QWORD *)a1 + 32))(a1, v10, v23);
          if (!v24 || *v24 != -17958194)
            break;
          v23 = v24[5] + 28;
          if (v23 <= v25)
          {
            TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader((uint64_t)v47, (uint64_t)a1, v10, (uint64_t)v24, a4, 0, a3, v26, 0, 0);
            TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner((uint64_t)v47, &v52);
            v48 = 0uLL;
            v49 = 0;
            v44 = &v48;
            LOBYTE(v45) = 0;
            v27 = operator new(0x10uLL);
            *(_QWORD *)&v48 = v27;
            *((_QWORD *)&v48 + 1) = v27;
            v49 = v27 + 2;
            v28 = v53;
            *v27 = v52;
            v27[1] = v28;
            if (v28)
            {
              v29 = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
              v31 = v53;
              *((_QWORD *)&v48 + 1) = v27 + 2;
              if (v53)
              {
                v32 = (unint64_t *)&v53->__shared_owners_;
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
            }
            else
            {
              *((_QWORD *)&v48 + 1) = v27 + 2;
            }
            v36 = *((_QWORD *)a1 + 4);
            if (v36)
              v37 = *(_QWORD *)(v36 + 32);
            else
              v37 = 0;
            v41 = (CSCppDyldSharedCache *)CSCppDyldSplitSharedCacheMemory::primary_shared_cache(a1);
            v42 = CSCppDyldSharedCache::dsc_uuid(v41);
            (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(a5 + 16))(a5, v37, v42, &v48);
            v44 = &v48;
            v40 = (void ***)&v44;
LABEL_38:
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](v40);
            return;
          }
        }
      }
    }
  }
}

void sub_1B410B544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v5 - 88);
  _Unwind_Resume(a1);
}

uint64_t process_all_shared_cache_libraries(CSCppDyldSplitSharedCacheMemory *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t);
  _OWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, char *, uint64_t);
  void *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = &v13;
  v15 = 0x5002000000;
  v16 = __Block_byref_object_copy__6;
  v17 = __Block_byref_object_dispose__6;
  memset(v18, 0, sizeof(v18));
  v19 = 1065353216;
  *(_QWORD *)&v28 = CSCppDyldSplitSharedCacheMemory::primary_shared_cache_uuid(a1);
  *((_QWORD *)&v28 + 1) = v8;
  v20 = MEMORY[0x1E0C809B0];
  v21 = 0x40000000;
  v22 = ___Z34process_all_shared_cache_librariesP31CSCppDyldSplitSharedCacheMemory17CSCppArchitecturejU13block_pointerFvyRK4UUIDONSt3__16vectorINS5_10shared_ptrI16CSCppSymbolOwnerEENS5_9allocatorIS9_EEEEE_block_invoke;
  v23 = &unk_1E67760D8;
  v25 = a3;
  v26 = a2;
  v24 = &v13;
  v27 = v28;
  CSCppDyldSplitSharedCacheMemory::for_each_text_memory<void({block_pointer})(char const*,CSCppFileMemory *,UUID)>((uint64_t)a1);
  for (i = v14 + 7; ; (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD *))(a4 + 16))(a4, v11, &v28, i + 4))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
    v10 = *((_QWORD *)a1 + 4);
    if (v10)
      v11 = *(_QWORD *)(v10 + 32);
    else
      v11 = 0;
  }
  _Block_object_dispose(&v13, 8);
  return std::__hash_table<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>>>::~__hash_table((uint64_t)v18);
}

void sub_1B410B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  _Block_object_dispose(&a9, 8);
  std::__hash_table<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__6(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>>>::~__hash_table(a1 + 40);
}

uint64_t CSCppDyldSplitSharedCacheMemory::for_each_text_memory<void({block_pointer})(char const*,CSCppFileMemory *,UUID)>(uint64_t result)
{
  const void **v1;
  const void **i;
  const void *v3;

  v1 = *(const void ***)(result + 8);
  for (i = *(const void ***)(result + 16); v1 != i; v1 += 5)
  {
    v3 = *v1;
    if (*v1)
    {
      if (!result)
      {
        if (result)
          result = CSCppDyldSharedCacheMemory::foreach_text_memory(result);
      }
    }
  }
  return result;
}

uint64_t ___Z34process_all_shared_cache_librariesP31CSCppDyldSplitSharedCacheMemory17CSCppArchitecturejU13block_pointerFvyRK4UUIDONSt3__16vectorINS5_10shared_ptrI16CSCppSymbolOwnerEENS5_9allocatorIS9_EEEEE_block_invoke(uint64_t result, char *a2, uint64_t a3)
{
  int v3;
  _QWORD v4[5];
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = *(_DWORD *)(result + 40);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = ___Z34process_all_shared_cache_librariesP31CSCppDyldSplitSharedCacheMemory17CSCppArchitecturejU13block_pointerFvyRK4UUIDONSt3__16vectorINS5_10shared_ptrI16CSCppSymbolOwnerEENS5_9allocatorIS9_EEEEE_block_invoke_2;
    v4[3] = &unk_1E67760B0;
    v4[4] = *(_QWORD *)(result + 32);
    v5 = *(_OWORD *)(result + 52);
    return iterate_symbol_owners_from_memory(a3, a2, 0, 0, v3, (unint64_t *)(result + 44), 0, 0, (uint64_t)v4);
  }
  return result;
}

uint64_t ___Z34process_all_shared_cache_librariesP31CSCppDyldSplitSharedCacheMemory17CSCppArchitecturejU13block_pointerFvyRK4UUIDONSt3__16vectorINS5_10shared_ptrI16CSCppSymbolOwnerEENS5_9allocatorIS9_EEEEE_block_invoke_2(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char **v4;
  _OWORD *v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  v6 = (_OWORD *)(a1 + 40);
  v4 = (char **)std::__hash_table<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(v3, (_QWORD *)(a1 + 40), (uint64_t)&std::piecewise_construct, &v6);
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v4 + 4, a2);
}

void iterate_symbol_owners_from_disk_dsc(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;
  BOOL is_wildcard_architecture;
  char **v11;
  char **v12;
  char v13;
  char *v14;
  uint64_t *i;
  const char *v16;
  CSCppDyldSplitSharedCacheMemory *v17;
  uint64_t v18;
  CSCppDyldSplitSharedCacheMemory *v19;
  uint64_t v20;
  uint64_t *j;
  const char *v22;
  CSCppDyldSplitSharedCacheMemory *v23;
  uint64_t v24;
  char v25;
  int v26;
  char **v27;
  char **v28;
  CSCppDyldSplitSharedCacheMemory *v29;
  unint64_t ArchitectureForName;
  void *__p[2];
  char v32;
  BOOL v33;
  char *v34;
  uint64_t v35;
  void *v36[2];
  uint64_t *v37;
  uint64_t v38;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v1;
  v38 = *MEMORY[0x1E0C80C00];
  if ((v9 & 1) == 0
  {
    CSCppMachTask::CSCppMachTask((CSCppMachTask *)v36, *MEMORY[0x1E0C83DA0], 0);
    v25 = CSCppMachTask::uses_development_dsc((CSCppMachTask *)v36);
    CSCppMachTask::~CSCppMachTask((CSCppMachTask *)v36);
    iterate_symbol_owners_from_disk_dsc(char const*,unsigned int,CSCppArchitecture const&,void({block_pointer})(unsigned long long,UUID const&,std::vector<std::shared_ptr<CSCppSymbolOwner>> &&))::analysis_process_uses_development_dsc = v25;
  }
  v26 = iterate_symbol_owners_from_disk_dsc(char const*,unsigned int,CSCppArchitecture const&,void({block_pointer})(unsigned long long,UUID const&,std::vector<std::shared_ptr<CSCppSymbolOwner>> &&))::analysis_process_uses_development_dsc;
  shared_cache_search_directories(&v27);
  if (CSArchitectureGetFamilyName(*v5))
  {
    is_wildcard_architecture = CSCppArchitecture::is_wildcard_architecture(*v5);
    v11 = v27;
    v12 = v28;
    if (v27 == v28)
      goto LABEL_36;
    if (v8)
      v13 = is_wildcard_architecture;
    else
      v13 = 1;
    do
    {
      v14 = *v11;
      if ((v13 & 1) != 0)
      {
        if (v8)
        {
          v34 = *v11;
          v35 = v8;
          v33 = CSCppDyldSplitSharedCacheMemory::task_uses_development_cache((CSCppDyldSplitSharedCacheMemory *)*MEMORY[0x1E0C83DA0]);
          std::string::basic_string[abi:ne180100]<0>(__p, v14);
          CSCppDyldSplitSharedCacheMemory::shared_cache_file_map_for_arch((const std::string::value_type *)__p, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v36);
          if (v32 < 0)
            operator delete(__p[0]);
          for (i = v37; i; i = (uint64_t *)*i)
          {
            v16 = (const char *)(i + 2);
            ArchitectureForName = 0;
            if (*((char *)i + 39) < 0)
              v16 = *(const char **)v16;
            ArchitectureForName = CSArchitectureGetArchitectureForName(v16);
            std::make_unique[abi:ne180100]<CSCppDyldSplitSharedCacheMemory,_CSArchitecture &,char const*&,BOOL const&,std::vector<std::string>,char const*&>((uint64_t *)&ArchitectureForName, &v34, (unsigned __int8 *)&v33, (__int128 *)(i + 5), &v35, (uint64_t *)&v29);
            v17 = v29;
            v29 = 0;
            process_shared_cache_library_with_path(v17, ArchitectureForName, v7, v8, v3);
            if (v17)
              (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v17 + 8))(v17);
            v18 = (uint64_t)v29;
            v29 = 0;
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          }
        }
        else
        {
          v34 = *v11;
          v35 = 0;
          v33 = CSCppDyldSplitSharedCacheMemory::task_uses_development_cache((CSCppDyldSplitSharedCacheMemory *)*MEMORY[0x1E0C83DA0]);
          std::string::basic_string[abi:ne180100]<0>(__p, v14);
          CSCppDyldSplitSharedCacheMemory::shared_cache_file_map_for_arch((const std::string::value_type *)__p, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v36);
          if (v32 < 0)
            operator delete(__p[0]);
          for (j = v37; j; j = (uint64_t *)*j)
          {
            v22 = (const char *)(j + 2);
            ArchitectureForName = 0;
            if (*((char *)j + 39) < 0)
              v22 = *(const char **)v22;
            ArchitectureForName = CSArchitectureGetArchitectureForName(v22);
            std::make_unique[abi:ne180100]<CSCppDyldSplitSharedCacheMemory,_CSArchitecture &,char const*&,BOOL const&,std::vector<std::string>,char const*&>((uint64_t *)&ArchitectureForName, &v34, (unsigned __int8 *)&v33, (__int128 *)(j + 5), &v35, (uint64_t *)&v29);
            v23 = v29;
            v29 = 0;
            process_all_shared_cache_libraries(v23, ArchitectureForName, v7, v3);
            if (v23)
              (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v23 + 8))(v23);
            v24 = (uint64_t)v29;
            v29 = 0;
            if (v24)
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          }
        }
        std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v36);
      }
      else
      {
        v19 = (CSCppDyldSplitSharedCacheMemory *)operator new();
        v20 = *v5;
        std::string::basic_string[abi:ne180100]<0>(v36, v14);
        CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v19, v20, v36, v26 != 0, v8);
        if (SHIBYTE(v37) < 0)
          operator delete(v36[0]);
        process_shared_cache_library_with_path(v19, *v5, v7, v8, v3);
        (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v19 + 8))(v19);
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  v11 = v27;
LABEL_36:
  if (v11)
  {
    v28 = v11;
    operator delete(v11);
  }
}

void sub_1B410BCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  CSCppMachTask::~CSCppMachTask((CSCppMachTask *)&a25);
  _Unwind_Resume(a1);
}

void iterate_symbol_owners_from_path(char *a1, int a2, int a3, unint64_t *a4, char a5, uint64_t a6)
{
  const char *v12;
  const char *v13;
  size_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  void *__dst[2];
  char v21;

  v12 = split_static_library_path(a1);
  if (v12)
  {
    v13 = v12;
    std::string::basic_string[abi:ne180100](__p, a1, v12 - a1);
    v14 = strlen(v13);
    std::string::basic_string[abi:ne180100](__dst, (void *)(v13 + 1), v14 - 2);
    if (v18 >= 0)
      v15 = (char *)__p;
    else
      v15 = (char *)__p[0];
    if (v21 >= 0)
      v16 = (char *)__dst;
    else
      v16 = (char *)__dst[0];
    iterate_symbol_owners_from_memory(0, v15, 0, 0, a3, a4, v16, a5, a6);
    if (v21 < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
  }
  else if ((iterate_symbol_owners_from_memory(0, a1, 0, 0, a3, a4, 0, a5, a6) & 1) == 0 && a2)
  {
    __p[0] = 0;
    __p[1] = __p;
    v18 = 0x2000000000;
    v19 = 0;
    iterate_symbol_owners_from_disk_dsc((uint64_t)a1);
    _Block_object_dispose(__p, 8);
  }
}

void sub_1B410BF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Block_object_dispose(&__p, 8);
  _Unwind_Resume(a1);
}

void ___Z31iterate_symbol_owners_from_pathPKcbjRK17CSCppArchitecturebU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      v7 = *v4;
      v8 = (std::__shared_weak_count *)v4[1];
      v21 = *v4;
      v22 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) || !*(_BYTE *)(a1 + 48))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v19 = v7;
        v20 = v8;
        if (v8)
        {
          v12 = (unint64_t *)&v8->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        (*(void (**)(uint64_t, uint64_t *))(v11 + 16))(v11, &v19);
        v14 = v20;
        if (v20)
        {
          v15 = (unint64_t *)&v20->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        v8 = v22;
      }
      if (v8)
      {
        v17 = (unint64_t *)&v8->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_1B410C0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::foreach_arch_in_macho_fat32_header(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned __int8 v18;

  v6 = 8;
  while (1)
  {
    v7 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, v6);
    if (!v7 || *v7 != -1095041334 || !v7[1] || bswap32(v7[1]) > 0x2C)
      break;
    v6 = 20 * bswap32(v7[1]) + 8;
    if (v8 >= v6)
    {
      v9 = bswap32(v7[1]);
      v10 = v7 + 2;
      goto LABEL_9;
    }
  }
  v10 = 0;
  v9 = 0;
LABEL_9:
  v18 = 0;
  if (!v9)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = v9;
  v14 = 20 * v9 + 8;
  v15 = 1;
  do
  {
    if (v14 <= bswap32(v10[2]))
    {
      if (a3)
      {
        (*(void (**)(uint64_t, _DWORD *, unsigned __int8 *))(a3 + 16))(a3, v10, &v18);
        v11 = v18;
      }
      ++v12;
      v16 = v11;
    }
    else
    {
      v16 = 0;
    }
    if (v15 >= v13)
      break;
    v10 += 5;
    ++v15;
  }
  while (!v16);
  return v12;
}

uint64_t ___Z33iterate_symbol_owners_from_memoryP11CSCppMemoryPKcjyjRK17CSCppArchitectureS2_bU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;

  v15 = bswap64(a2[1] & 0xFFFFFF00 | ((unint64_t)*a2 << 32));
  result = CSCppArchitecture::matches((CSCppArchitecture *)&v15, **(_QWORD **)(a1 + 48));
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_DWORD *)(a1 + 80);
    v10 = *(_DWORD *)(a1 + 84);
    v11 = bswap32(a2[2]);
    v12 = bswap32(a2[3]);
    v13 = *(_QWORD *)(a1 + 32);
    if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v15) & 1) != 0)
    {
      if (CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v15))
      {
        if (CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v15))
        {
          result = process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(v7, v8, v9, v11, v12, v10, &v15, v13);
          if ((result & 1) != 0)
            goto LABEL_10;
        }
      }
    }
    else if (CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v15))
    {
      result = process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(v7, v8, v9, v11, v12, v10, &v15, v13);
      if ((result & 1) != 0)
        goto LABEL_10;
    }
    result = iterate_symbol_owners_from_archive(*(char **)(a1 + 64), bswap32(a2[2]), *(_DWORD *)(a1 + 84), (uint64_t)&v15, *(char **)(a1 + 72), *(_BYTE *)(a1 + 89), *(_QWORD *)(a1 + 32));
    if (!(_DWORD)result)
    {
      v14 = 0;
LABEL_13:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= v14;
      return result;
    }
LABEL_10:
    v14 = 1;
    if (*(_BYTE *)(a1 + 89))
      *a3 = 1;
    goto LABEL_13;
  }
  return result;
}

uint64_t iterate_symbol_owners_from_archive(char *a1, uint64_t a2, int a3, uint64_t a4, char *a5, char a6, uint64_t a7)
{
  unsigned __int8 v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CSCppArchiveEntry *v15;
  CSCppArchiveEntry *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  NSObject *v21;
  FILE **v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t (*v35)(uint64_t, uint64_t, char *, uint64_t, char **, uint64_t *);
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  std::unique_lock<std::mutex> v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  char *v58;
  _BYTE __p[22];
  __int16 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v45 = &v44;
  v46 = 0x2000000000;
  v47 = 0;
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 0x40000000;
  v35 = (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char **, uint64_t *))___ZL34iterate_symbol_owners_from_archivePKcyjRK17CSCppArchitectureS0_bU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke;
  v36 = &unk_1E6776260;
  v42 = a3;
  v39 = a1;
  v40 = a4;
  v41 = a5;
  v43 = a6;
  v37 = a7;
  v38 = &v44;
  if ((v10 & 1) == 0
  {
    foreach_object_in_archive(char const*,unsigned long long,char const*,void({block_pointer})(CSCppFileMemory *,CSCppArchiveEntry const*,unsigned long long,BOOL *,BOOL *))::archive_file_maps = 0u;
    unk_1ED03E180 = 0u;
    dword_1ED03E190 = 1065353216;
  }
  v51.__m_ = &foreach_object_in_archive(char const*,unsigned long long,char const*,void({block_pointer})(CSCppFileMemory *,CSCppArchiveEntry const*,unsigned long long,BOOL *,BOOL *))::archive_file_maps_lock;
  v51.__owns_ = 1;
  std::mutex::lock(&foreach_object_in_archive(char const*,unsigned long long,char const*,void({block_pointer})(CSCppFileMemory *,CSCppArchiveEntry const*,unsigned long long,BOOL *,BOOL *))::archive_file_maps_lock);
  std::string::basic_string[abi:ne180100]<0>(v48, a1);
  v50 = a2;
  v11 = std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::find<std::pair<std::string,unsigned long long>>(&foreach_object_in_archive(char const*,unsigned long long,char const*,void({block_pointer})(CSCppFileMemory *,CSCppArchiveEntry const*,unsigned long long,BOOL *,BOOL *))::archive_file_maps, (uint64_t)v48);
  if (!v11)
  {
    v57 = a2;
    v58 = a1;
    std::unique_lock<std::mutex>::unlock(&v51);
    v12 = 0;
    v54 = 0u;
    v55 = 0u;
    v56 = 1065353216;
    v13 = a2 + 8;
    v53 = a2 + 8;
    while (1)
    {
      v14 = new_partial_file_memory((uint64_t)a1, v13, 2, (uint64_t)&__block_literal_global_1);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (!v14)
        break;
      v15 = (CSCppArchiveEntry *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 32))(v14, 0, 60);
      v16 = v15;
      if (!v15 || *((_BYTE *)v15 + 58) != 96 || *((_BYTE *)v15 + 59) != 10)
        break;
      CSCppArchiveEntry::name_cpy(v15, __p, 0x400uLL);
      v17 = strtoul((const char *)v16 + 48, 0, 10);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_impl<char (&)[1024],unsigned long long &>(&v54, __p, &v53);
      v13 = v53 + v17 + 60;
      v53 = v13;
      v12 = v14;
    }
    std::unique_lock<std::mutex>::lock(&v51);
    if (*((_QWORD *)&v55 + 1))
    {
      *(_QWORD *)__p = &v58;
      *(_QWORD *)&__p[8] = &v57;
      v52 = &v54;
      v11 = std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<char const*&,unsigned long long &>,std::tuple<std::unordered_map<std::string,unsigned long long>&&>>(&foreach_object_in_archive(char const*,unsigned long long,char const*,void({block_pointer})(CSCppFileMemory *,CSCppArchiveEntry const*,unsigned long long,BOOL *,BOOL *))::archive_file_maps, (uint64_t)&std::piecewise_construct, (uint64_t)__p, (uint64_t **)&v52);
      if (!v14)
        goto LABEL_14;
    }
    else
    {
      v11 = 0;
      if (!v14)
      {
LABEL_14:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v54);
        if (!v11)
          goto LABEL_56;
        goto LABEL_15;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    goto LABEL_14;
  }
LABEL_15:
  if (a5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a5);
    v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>((_QWORD *)v11 + 6, __p);
    v19 = v18;
    if (v18)
      v20 = *(unsigned __int8 **)v18;
    else
      v20 = 0;
    if (SHIBYTE(v60) < 0)
      operator delete(*(void **)__p);
  }
  else
  {
    v20 = 0;
    v19 = (unsigned __int8 *)*((_QWORD *)v11 + 8);
  }
  LOBYTE(v58) = 0;
  LOBYTE(v57) = 0;
  if (v19 != v20)
  {
    v21 = MEMORY[0x1E0C81028];
    v22 = (FILE **)MEMORY[0x1E0C80C10];
    do
    {
      v23 = (const char *)(v19 + 16);
      if (a5)
        goto LABEL_28;
      v24 = (const char *)(v19 + 16);
      if ((char)v19[39] < 0)
        v24 = *(const char **)v23;
      if (strncmp(v24, "__.SYMDEF", 9uLL))
      {
LABEL_28:
        v25 = new_partial_file_memory((uint64_t)a1, *((_QWORD *)v19 + 5), 2, (uint64_t)&__block_literal_global_1);
        v26 = v25;
        if (v25)
        {
          *(_QWORD *)&v54 = v25;
          v27 = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::archive_entry_at(&v54, 0, 1);
          if (!v27)
          {
            if ((char)v19[39] < 0)
            {
              if (*((_QWORD *)v19 + 3))
                v23 = *(const char **)v23;
              else
                v23 = "<null>";
            }
            else if (!v19[39])
            {
              v23 = "<null>";
            }
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              v31 = *((_QWORD *)v19 + 5);
              *(_DWORD *)__p = 136315650;
              *(_QWORD *)&__p[4] = v23;
              *(_WORD *)&__p[12] = 2080;
              *(_QWORD *)&__p[14] = a1;
              v60 = 2048;
              v61 = v31;
              _os_log_impl(&dword_1B40C5000, v21, OS_LOG_TYPE_ERROR, "Invalid analyzed archive entry for object file %s from archive %s at offset 0x%llx\n", __p, 0x20u);
            }
            fprintf(*v22, "Invalid analyzed archive entry for object file %s from archive %s at offset 0x%llx\n", v23, a1, *((_QWORD *)v19 + 5));
            v28 = 4;
LABEL_54:
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            if (v28 == 2)
              break;
            goto LABEL_55;
          }
          v35((uint64_t)v34, v26, (char *)v27, *((_QWORD *)v19 + 5), &v58, &v57);
          if ((_BYTE)v57)
          {
            v28 = 2 * (v58 != 0);
            goto LABEL_54;
          }
          if ((_BYTE)v58)
            break;
        }
        else
        {
          if ((char)v19[39] < 0)
          {
            if (*((_QWORD *)v19 + 3))
              v29 = *(const char **)v23;
            else
              v29 = "<null>";
          }
          else if (v19[39])
          {
            v29 = (const char *)(v19 + 16);
          }
          else
          {
            v29 = "<null>";
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            v30 = *((_QWORD *)v19 + 5);
            *(_DWORD *)__p = 136315650;
            *(_QWORD *)&__p[4] = v29;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)&__p[14] = a1;
            v60 = 2048;
            v61 = v30;
            _os_log_impl(&dword_1B40C5000, v21, OS_LOG_TYPE_ERROR, "Couldn't map analyzed object file %s from archive %s at offset 0x%llx\n", __p, 0x20u);
          }
          fprintf(*v22, "Couldn't map analyzed object file %s from archive %s at offset 0x%llx\n", v29, a1, *((_QWORD *)v19 + 5));
        }
      }
LABEL_55:
      v19 = *(unsigned __int8 **)v19;
    }
    while (v19 != v20);
  }
LABEL_56:
  if (v49 < 0)
    operator delete(v48[0]);
  if (v51.__owns_)
    std::mutex::unlock(v51.__m_);
  v32 = *((unsigned __int8 *)v45 + 24);
  _Block_object_dispose(&v44, 8);
  return v32;
}

void sub_1B410C924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::mutex *a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a40);
  if (a34 < 0)
    operator delete(__p);
  if (a37)
    std::mutex::unlock(a36);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::foreach_arch_in_macho_fat64_header(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned __int8 v18;

  v6 = 8;
  while (1)
  {
    v7 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, v6);
    if (!v7 || *v7 != -1078264118 || !v7[1] || bswap32(v7[1]) > 0x2C)
      break;
    v6 = (32 * bswap32(v7[1])) | 8;
    if (v8 >= v6)
    {
      v9 = bswap32(v7[1]);
      v10 = v7 + 2;
      goto LABEL_9;
    }
  }
  v10 = 0;
  v9 = 0;
LABEL_9:
  v18 = 0;
  if (!v9)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = v9;
  v14 = (32 * v9) | 8;
  v15 = 1;
  do
  {
    if (bswap64(*((_QWORD *)v10 + 1)) >= v14)
    {
      if (a3)
      {
        (*(void (**)(uint64_t, _DWORD *, unsigned __int8 *))(a3 + 16))(a3, v10, &v18);
        v11 = v18;
      }
      ++v12;
      v16 = v11;
    }
    else
    {
      v16 = 0;
    }
    if (v15 >= v13)
      break;
    v10 += 8;
    ++v15;
  }
  while (!v16);
  return v12;
}

uint64_t ___Z33iterate_symbol_owners_from_memoryP11CSCppMemoryPKcjyjRK17CSCppArchitectureS2_bU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke_2(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;

  v15 = bswap64(a2[1] & 0xFFFFFF00 | ((unint64_t)*a2 << 32));
  result = CSCppArchitecture::matches((CSCppArchitecture *)&v15, **(_QWORD **)(a1 + 48));
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_DWORD *)(a1 + 72);
    v10 = *(_DWORD *)(a1 + 76);
    v11 = bswap64(*((_QWORD *)a2 + 1));
    v12 = bswap64(*((_QWORD *)a2 + 2));
    v13 = *(_QWORD *)(a1 + 32);
    if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v15) & 1) != 0)
    {
      result = CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v15);
      if (!(_DWORD)result
        || (result = CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v15), !(_DWORD)result)
        || (result = process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(v7, v8, v9, v11, v12, v10, &v15, v13), !(_DWORD)result))
      {
LABEL_11:
        v14 = 0;
LABEL_12:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= v14;
        return result;
      }
    }
    else
    {
      result = CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v15);
      if (!(_DWORD)result)
        goto LABEL_11;
      result = process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(v7, v8, v9, v11, v12, v10, &v15, v13);
      if ((result & 1) == 0)
        goto LABEL_11;
    }
    v14 = 1;
    if (*(_BYTE *)(a1 + 81))
      *a3 = 1;
    goto LABEL_12;
  }
  return result;
}

uint64_t process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  char v39;
  _QWORD v40[11];
  _QWORD v41[6];

  if (a1)
  {
    v13 = a1;
    v32 = 0;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v14 = a5;
    if (a5)
      v16 = a4;
    else
      v16 = 0;
    v32 = v16;
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 0x40000000;
    v41[2] = ___ZL46process_symbol_owner_from_memory_arch_specificI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKcNT_6size_tENS8_5ptr_tES9_jRK17CSCppArchitectureU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke;
    v41[3] = &__block_descriptor_tmp_82;
    v41[4] = a4;
    v15 = (_DWORD *)new_partial_file_memory(a2, a4, 0, (uint64_t)v41);
    a3 = v15[14];
    v13 = (uint64_t)v15;
  }
  v17 = 32;
  do
  {
    v18 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 32))(v13, a4, v17);
    if (!v18)
      goto LABEL_30;
    v20 = (uint64_t)v18;
    if (*v18 != -17958193)
      goto LABEL_30;
    v17 = v18[5] + 32;
  }
  while (v17 > v19);
  v40[0] = v18[1] | ((unint64_t)(v18[2] & 0xFFFFFF) << 32);
  if (!CSCppArchitecture::matches((CSCppArchitecture *)v40, *a7))
  {
LABEL_30:
    v30 = 0;
    if (!v15)
      return v30;
    goto LABEL_31;
  }
  LOBYTE(v38) = 0;
  v39 = 0;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader((uint64_t)v40, v13, a4, v20, a2, a3, a6, &v38);
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner((uint64_t)v40, &v36);
  v21 = v36;
  if (v36)
  {
    if (v14)
    {
      *(_QWORD *)(v36 + 152) = v32;
      *(_QWORD *)(v21 + 160) = v14;
    }
    v34 = v21;
    v35 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(a8 + 16))(a8, &v34);
    v24 = v35;
    if (v35)
    {
      v25 = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = 1;
  if (v15)
LABEL_31:
    (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
  return v30;
}

void sub_1B410CEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, int a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD v40[9];
  _QWORD v41[4];
  unsigned int v42;

  if (a1)
  {
    v13 = a1;
    v33 = 0;
    v34 = 0;
    v14 = 0;
    v15 = a4;
  }
  else
  {
    if (a5)
      v16 = a4;
    else
      v16 = 0;
    v33 = v16;
    v34 = a5;
    v15 = a4;
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 0x40000000;
    v41[2] = ___ZL46process_symbol_owner_from_memory_arch_specificI17SizeAndEndiannessI9Pointer3212LittleEndianEEbP11CSCppMemoryPKcNT_6size_tENS8_5ptr_tES9_jRK17CSCppArchitectureU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke;
    v41[3] = &__block_descriptor_tmp_81;
    v42 = a4;
    v14 = (_DWORD *)new_partial_file_memory(a2, a4, 0, (uint64_t)v41);
    a3 = v14[14];
    v13 = (uint64_t)v14;
  }
  v17 = 28;
  do
  {
    v18 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 32))(v13, v15, v17);
    if (!v18)
      goto LABEL_30;
    v20 = (uint64_t)v18;
    if (*v18 != -17958194)
      goto LABEL_30;
    v17 = v18[5] + 28;
  }
  while (v17 > v19);
  v40[0] = v18[1] | ((unint64_t)(v18[2] & 0xFFFFFF) << 32);
  if (!CSCppArchitecture::matches((CSCppArchitecture *)v40, *a7))
  {
LABEL_30:
    v31 = 0;
    if (!v14)
      return v31;
    goto LABEL_31;
  }
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader((uint64_t)v40, v13, a4, v20, a2, a3, a6, v21, 0, 0);
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner((uint64_t)v40, &v38);
  v22 = v38;
  if (v38)
  {
    if (v34)
    {
      *(_QWORD *)(v38 + 152) = v33;
      *(_QWORD *)(v22 + 160) = v34;
    }
    v36 = v22;
    v37 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(a8 + 16))(a8, &v36);
    v25 = v37;
    if (v37)
    {
      v26 = (unint64_t *)&v37->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = 1;
  if (v14)
LABEL_31:
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  return v31;
}

void sub_1B410D104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t remap_memory_from_target(vm_map_t target_task, mach_vm_address_t *target_address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, vm_map_read_t src_task, mach_vm_address_t src_address, BOOLean_t copy, vm_prot_t *cur_protection, vm_prot_t *max_protection, vm_inherit_t inheritance)
{
  return mach_vm_remap_new(target_task, target_address, size, mask, flags, src_task, src_address, copy, cur_protection, max_protection, inheritance);
}

uint64_t extract_segment_content_from_dsc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *);
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  v16 = MEMORY[0x1E0C809B0];
  v17 = 0x40000000;
  v18 = ___Z32extract_segment_content_from_dsc4UUIDPKcS_yyU13block_pointerFvPKhmE_block_invoke;
  v19 = &unk_1E67761C8;
  v26 = a1;
  v27 = a2;
  v28 = a4;
  v29 = a5;
  v22 = &v12;
  v23 = a3;
  v20 = a8;
  v21 = v10;
  v24 = a6;
  v25 = a7;
  dyld_for_each_installed_shared_cache();
  v8 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1B410D214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z32extract_segment_content_from_dsc4UUIDPKcS_yyU13block_pointerFvPKhmE_block_invoke(_QWORD *a1)
{
  uint64_t result;
  BOOL v3;
  uint64_t v4;

  result = dyld_shared_cache_copy_uuid();
  if (a1[10])
    v3 = 0;
  else
    v3 = a1[11] == 0;
  if (v3)
  {
    v4 = *(_QWORD *)(a1[5] + 8);
    if (!*(_BYTE *)(v4 + 24))
    {
      *(_BYTE *)(v4 + 24) = 1;
      return dyld_shared_cache_for_each_image();
    }
  }
  return result;
}

uint64_t ___Z32extract_segment_content_from_dsc4UUIDPKcS_yyU13block_pointerFvPKhmE_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;

  result = dyld_image_copy_uuid();
  if ((_DWORD)result)
  {
    if (a1[9])
      v5 = 0;
    else
      v5 = a1[10] == 0;
    if (v5)
    {
      result = MEMORY[0x1B5E36C10](a2);
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t ___Z32extract_segment_content_from_dsc4UUIDPKcS_yyU13block_pointerFvPKhmE_block_invoke_3(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(void);
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a1[5];
  if (!v5)
  {
    v8 = *(uint64_t (**)(void))(a1[4] + 16);
    return v8();
  }
  if (a1[6] + v5 <= a4)
  {
    v8 = *(uint64_t (**)(void))(a1[4] + 16);
    return v8();
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = a1[7];
    *(_DWORD *)buf = 136315138;
    v10 = v6;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Requested vm range length in %s does not exist in file.\n", buf, 0xCu);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Requested vm range length in %s does not exist in file.\n", (const char *)a1[7]);
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

BOOL extract_segment_content_from_kc_fileset(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CSCppFileMemory *v15;
  char v17;
  CSCppFileMemory *v18;
  _QWORD v19[13];

  v19[12] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  if (!a2)
    return 0;
  v15 = (CSCppFileMemory *)operator new();
  CSCppFileMemory::CSCppFileMemory(v15, a2);
  v18 = v15;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 0x40000000;
  v19[2] = ___ZZ39extract_segment_content_from_kc_fileset17CSCppArchitecturePKcS1_4UUIDyyU13block_pointerFvPKhmEENK3__0clES1__block_invoke;
  v19[3] = &unk_1E67762F0;
  v19[10] = a4;
  v19[11] = a5;
  v19[6] = a3;
  v19[7] = a6;
  v19[4] = a8;
  v19[5] = v15;
  v19[8] = a7;
  v19[9] = &v17;
  TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::foreach_fileset_entry(&v18, 0, (uint64_t)v19);
  (*(void (**)(CSCppFileMemory *))(*(_QWORD *)v15 + 8))(v15);
  return v17 != 0;
}

void sub_1B410D668(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL extract_segment_content_from_binary_on_disk(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, unsigned int *, _BYTE *);
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v24 = a1;
  v16 = operator new();
  CSCppFileMemory::CSCppFileMemory(v16, a2, 0);
  v25 = a1;
  if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v25) & 1) == 0)
  {
    if (CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v25))
    {
      v38 = v16;
      v34 = 0;
      v35 = &v34;
      v36 = 0x2000000000;
      v37 = 0;
      v20 = MEMORY[0x1E0C809B0];
      v39 = MEMORY[0x1E0C809B0];
      v40 = 0x40000000;
      v41 = ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer3212LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke;
      v42 = &unk_1E6776340;
      v45 = &v24;
      v46 = v16;
      v50 = a4;
      v51 = a5;
      v47 = a3;
      v48 = a6;
      v43 = a8;
      v44 = &v34;
      v49 = a7;
      v21 = TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::foreach_arch_in_macho_fat32_header(&v38, 0, (uint64_t)&v39);
      v19 = *((unsigned __int8 *)v35 + 24);
      if (*((_BYTE *)v35 + 24) || v21)
        goto LABEL_12;
      v26 = v20;
      v27 = 0x40000000;
      v28 = ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer3212LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke_70;
      v29 = &unk_1E6776368;
      v30 = a8;
      v31 = a6;
      v32 = a7;
      v33 = a3;
      v19 = TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::provide_segment_content_matching_owner_uuid(&v38, 0, a4, a5, a3, 0, (uint64_t)&v26);
      goto LABEL_11;
    }
LABEL_13:
    v22 = 0;
    goto LABEL_14;
  }
  if (!CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v25)
    || !CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v25))
  {
    goto LABEL_13;
  }
  v38 = v16;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  v17 = MEMORY[0x1E0C809B0];
  v39 = MEMORY[0x1E0C809B0];
  v40 = 0x40000000;
  v41 = ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke;
  v42 = &unk_1E67763B8;
  v45 = &v24;
  v46 = v16;
  v50 = a4;
  v51 = a5;
  v47 = a3;
  v48 = a6;
  v43 = a8;
  v44 = &v34;
  v49 = a7;
  v18 = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::foreach_arch_in_macho_fat32_header(&v38, 0, (uint64_t)&v39);
  v19 = *((unsigned __int8 *)v35 + 24);
  if (*((_BYTE *)v35 + 24) || v18)
    goto LABEL_12;
  v26 = v17;
  v27 = 0x40000000;
  v28 = ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke_75;
  v29 = &unk_1E67763E0;
  v30 = a8;
  v31 = a6;
  v32 = a7;
  v33 = a3;
  v19 = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::provide_segment_content_matching_owner_uuid(&v38, 0, a4, a5, a3, 0, (uint64_t)&v26);
LABEL_11:
  *((_BYTE *)v35 + 24) = v19;
LABEL_12:
  v22 = v19 != 0;
  _Block_object_dispose(&v34, 8);
LABEL_14:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return v22;
}

void sub_1B410D96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void with_cfdata_from_file(const char *a1, uint64_t a2)
{
  int v3;
  int v4;
  const UInt8 *v5;
  const UInt8 *v6;
  const __CFAllocator *v7;
  CFDataRef v8;
  CFDataRef v9;
  CFAllocatorContext v10;
  stat v11;

  v3 = open(a1, 0x1000000);
  if (v3 != -1)
  {
    v4 = v3;
    if (fstat(v3, &v11) || (v5 = (const UInt8 *)mmap(0, v11.st_size, 1, 1, v4, 0), v5 == (const UInt8 *)-1))
    {
      close(v4);
    }
    else
    {
      v6 = v5;
      signature_file_mapping_length = v11.st_size;
      close(v4);
      *(_OWORD *)&v10.reallocate = unk_1E6776218;
      v10.preferredSize = 0;
      memset(&v10, 0, 48);
      v7 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v10);
      v8 = CFDataCreateWithBytesNoCopy(0, v6, signature_file_mapping_length, v7);
      if (v8)
      {
        v9 = v8;
        (*(void (**)(uint64_t, CFDataRef))(a2 + 16))(a2, v8);
        CFRelease(v9);
      }
      CFRelease(v7);
    }
  }
}

void *unmapping_deallocator(void *result, void *a2)
{
  if (result)
    return (void *)munmap(result, signature_file_mapping_length);
  return result;
}

void read_path_from_offset_in_cpp_memory(uint64_t a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  std::string::value_type *v9;
  char v10;
  std::string v11;

  memset(&v11, 0, sizeof(v11));
  v4 = a2 >= 0xFFFFFFFFFFFFFBFFLL;
  v5 = v4 << 63 >> 63;
  if (v5 == v4 && (v5 & 0x8000000000000000) == 0 && a2 + 1025 > a2)
  {
    for (i = 0; i != 1025; ++i)
    {
      v9 = (std::string::value_type *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + i, 1);
      if (!v9)
        break;
      if (!*v9)
      {
        *a3 = v11;
        memset(&v11, 0, sizeof(v11));
        v10 = 1;
        goto LABEL_9;
      }
      std::string::push_back(&v11, *v9);
    }
  }
  v10 = 0;
  a3->__r_.__value_.__s.__data_[0] = 0;
LABEL_9:
  a3[1].__r_.__value_.__s.__data_[0] = v10;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1B410DBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  CSCppSymbolOwner *v11[2];
  char v12[32];
  char v13;
  char v14[32];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v14 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::uuid(*(_QWORD *)(a1 + 24));
  v10 = CSCppFlagsForHeader<SizeAndEndianness<Pointer64,LittleEndian>>(a1);
  *(_QWORD *)v12 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                 + 8) & 0xFFFFFF) << 32);
  std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int const&,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture const,char const* const&,void>(v14, (unsigned int *)(a1 + 40), &kCSBeginningOfTime, &kCSEndOfTime, &v10, v12, (_QWORD *)(a1 + 48), v11);
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections(a1, (void **)v11[0] + 4, (uint64_t)v11[0] + 56);
  if (*((_QWORD *)v11[0] + 4) == *((_QWORD *)v11[0] + 5))
  {
    v4 = (std::__shared_weak_count *)v11[1];
    v11[0] = 0;
    v11[1] = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v7 = (std::__shared_weak_count *)v11[1];
      *a2 = 0;
      a2[1] = 0;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
  }
  else
  {
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_source_version_load_command(a1, (uint64_t)v14);
    if (v15)
    {
      CSCppSymbolOwner::set_version((size_t)v11[0], v14);
    }
    else
    {
      TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_id_dylib_load_command(a1, (uint64_t)v12);
      if (v13)
        CSCppSymbolOwner::set_version((size_t)v11[0], v12);
    }
    *(_OWORD *)a2 = *(_OWORD *)v11;
  }
}

void sub_1B410DD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CSCppFlagsForHeader<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int is_protected;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(a1 + 56);
  v3 = v2 & 0x4000 | 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)(v4 + 12);
  switch(v5)
  {
    case 1:
      v6 = 2049;
      goto LABEL_10;
    case 2:
      v6 = 17;
      goto LABEL_10;
    case 6:
      v6 = 33;
      goto LABEL_10;
    case 7:
      v6 = 65;
      goto LABEL_10;
    case 8:
      v6 = 129;
      goto LABEL_10;
    case 9:
      v6 = 5;
      goto LABEL_10;
    case 10:
      v3 |= v2 & 0x38000000 | 0x100;
      break;
    case 11:
      v6 = 4097;
LABEL_10:
      v3 = v2 & 0x4000 | v6;
      break;
    default:
      break;
  }
  v7 = (*(_DWORD *)(v4 + 24) >> 8) & 0x2000 | v3;
  is_protected = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::is_protected(v4);
  v9 = v7 | 2;
  if (!is_protected)
    v9 = v7;
  v10 = *(_QWORD *)(a1 + 24);
  if (*(int *)(v10 + 24) < 0)
    v9 |= 0x200u;
  if (*(_QWORD *)(a1 + 32))
    v11 = v9 | 0x400;
  else
    v11 = v9;
  if (TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::is_restricted(v10))
    v11 |= 0x8000u;
  v12 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::uses_cplusplus(*(_QWORD *)(a1 + 24));
  v13 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 26) >> 5) & 1;
  if (v5 == 11)
    v13 = 1;
  if (v13 | v12)
    return v11 | 0x200000;
  else
    return v11;
}

double TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_source_version_load_command@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  double result;
  unint64_t v5;
  __int128 v6;
  char __str[16];
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::source_version(*(_QWORD *)(a1 + 24));
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 1);
    if ((v3[2] & 0x3FF) != 0)
    {
      snprintf(__str, 0x20uLL, "%u.%u.%u.%u.%u");
    }
    else if (((v5 >> 10) & 0x3FF) != 0)
    {
      snprintf(__str, 0x20uLL, "%u.%u.%u.%u");
    }
    else if (((v5 >> 20) & 0x3FF) != 0)
    {
      snprintf(__str, 0x20uLL, "%u.%u.%u");
    }
    else if (((v5 >> 30) & 0x3FF) != 0)
    {
      snprintf(__str, 0x20uLL, "%u.%u");
    }
    else
    {
      snprintf(__str, 0x20uLL, "%u");
    }
    result = *(double *)__str;
    v6 = v8;
    *(_OWORD *)a2 = *(_OWORD *)__str;
    *(_OWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

size_t CSCppSymbolOwner::set_version(size_t this, const char *a2)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  char __dst[16];
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    v2 = this;
    this = strlcpy(__dst, a2, 0x20uLL);
    v3 = *(unsigned __int8 *)(v2 + 200);
    v4 = v6;
    *(_OWORD *)(v2 + 168) = *(_OWORD *)__dst;
    *(_OWORD *)(v2 + 184) = v4;
    if (!v3)
      *(_BYTE *)(v2 + 200) = 1;
  }
  return this;
}

double TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_id_dylib_load_command@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  double result;
  __int128 v5;
  char __str[16];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::id_dylib(*(_QWORD *)(a1 + 24));
  if (v3)
  {
    if (v3[4])
    {
      snprintf(__str, 0x20uLL, "%u.%u.%u");
    }
    else if (BYTE1(v3[4]))
    {
      snprintf(__str, 0x20uLL, "%u.%u");
    }
    else
    {
      snprintf(__str, 0x20uLL, "%u");
    }
    result = *(double *)__str;
    v5 = v7;
    *(_OWORD *)a2 = *(_OWORD *)__str;
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int const&,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture const,char const* const&,void>@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned int const&,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture const,char const* const&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B410E1C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned int const&,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture const,char const* const&,std::allocator<CSCppSymbolOwner>,0>(_QWORD *a1, _QWORD *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6774D20;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B410E224(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

unint64_t TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::is_protected(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 32 + v1;
  v6 = a1 + 32;
  while (1)
  {
    result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
    if (!result)
      break;
    if (*(_DWORD *)result == 25 && (*(_BYTE *)(result + 68) & 8) != 0)
      return 1;
  }
  return result;
}

unint64_t TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::is_restricted(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = a1;
  v6 = a1 + 32 + v1;
  v7 = a1 + 32;
  result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4);
  if (result)
  {
    v3 = result;
    while (*(_DWORD *)v3 != 25
         || strncmp("__RESTRICT", (const char *)(v3 + 8), 0xFuLL)
         || !TSegmentLoadCommand<SizeAndEndianness<Pointer64,LittleEndian>>::section_named(v3, "__restrict"))
    {
      result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4);
      v3 = result;
      if (!result)
        return result;
    }
    return 1;
  }
  return result;
}

const char *TSegmentLoadCommand<SizeAndEndianness<Pointer64,LittleEndian>>::section_named(uint64_t a1, char *__s1)
{
  uint64_t v2;
  const char *i;

  v2 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v2)
    return 0;
  for (i = (const char *)(a1 + 72); strncmp(__s1, i, 0x10uLL); i += 80)
  {
    if (!--v2)
      return 0;
  }
  return i;
}

unint64_t TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::uses_cplusplus(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = a1;
  v6 = a1 + 32 + v1;
  v7 = a1 + 32;
  for (result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4);
        result;
        result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4))
  {
    if (*(_DWORD *)result == 12)
    {
      v3 = (char *)(result + *(unsigned int *)(result + 8));
      if (strstr(v3, "libc++.") || strstr(v3, "libstdc++."))
        return 1;
    }
    else if (*(_DWORD *)result == 15)
    {
      return 1;
    }
  }
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::source_version(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 32 + v1;
  v6 = a1 + 32;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 42);
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::id_dylib(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 32 + v1;
  v6 = a1 + 32;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 13);
  return result;
}

void TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  CSCppSymbolOwner *v11[2];
  char v12[32];
  char v13;
  char v14[32];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v14 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::uuid(*(_QWORD *)(a1 + 24));
  v10 = CSCppFlagsForHeader<SizeAndEndianness<Pointer32,LittleEndian>>(a1);
  *(_QWORD *)v12 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                 + 8) & 0xFFFFFF) << 32);
  std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int const&,unsigned long long const&,unsigned long long const&,unsigned int,CSCppArchitecture const,char const* const&,void>(v14, (unsigned int *)(a1 + 36), &kCSBeginningOfTime, &kCSEndOfTime, &v10, v12, (_QWORD *)(a1 + 40), v11);
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::extract_segments_and_sections(a1, (void **)v11[0] + 4, (uint64_t)v11[0] + 56);
  if (*((_QWORD *)v11[0] + 4) == *((_QWORD *)v11[0] + 5))
  {
    v4 = (std::__shared_weak_count *)v11[1];
    v11[0] = 0;
    v11[1] = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v7 = (std::__shared_weak_count *)v11[1];
      *a2 = 0;
      a2[1] = 0;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
  }
  else
  {
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::version_from_source_version_load_command(a1, (uint64_t)v14);
    if (v15)
    {
      CSCppSymbolOwner::set_version((size_t)v11[0], v14);
    }
    else
    {
      TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::version_from_id_dylib_load_command(a1, (uint64_t)v12);
      if (v13)
        CSCppSymbolOwner::set_version((size_t)v11[0], v12);
    }
    *(_OWORD *)a2 = *(_OWORD *)v11;
  }
}

void sub_1B410E67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CSCppFlagsForHeader<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int is_protected;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(a1 + 48);
  v3 = v2 & 0x4000 | 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)(v4 + 12);
  switch(v5)
  {
    case 1:
      v6 = 2049;
      goto LABEL_10;
    case 2:
      v6 = 17;
      goto LABEL_10;
    case 6:
      v6 = 33;
      goto LABEL_10;
    case 7:
      v6 = 65;
      goto LABEL_10;
    case 8:
      v6 = 129;
      goto LABEL_10;
    case 9:
      v6 = 5;
      goto LABEL_10;
    case 10:
      v3 |= v2 & 0x38000000 | 0x100;
      break;
    case 11:
      v6 = 4097;
LABEL_10:
      v3 = v2 & 0x4000 | v6;
      break;
    default:
      break;
  }
  v7 = (*(_DWORD *)(v4 + 24) >> 8) & 0x2000 | v3;
  is_protected = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::is_protected(v4);
  v9 = v7 | 2;
  if (!is_protected)
    v9 = v7;
  v10 = *(_QWORD *)(a1 + 24);
  if (*(int *)(v10 + 24) < 0)
    v9 |= 0x200u;
  if (*(_DWORD *)(a1 + 32))
    v11 = v9 | 0x400;
  else
    v11 = v9;
  if (TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::is_restricted(v10))
    v11 |= 0x8000u;
  v12 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::uses_cplusplus(*(_QWORD *)(a1 + 24));
  v13 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 26) >> 5) & 1;
  if (v5 == 11)
    v13 = 1;
  if (v13 | v12)
    return v11 | 0x200000;
  else
    return v11;
}

double TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::version_from_source_version_load_command@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  double result;
  unint64_t v5;
  __int128 v6;
  char __str[16];
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::source_version(*(_QWORD *)(a1 + 24));
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 1);
    if ((v3[2] & 0x3FF) != 0)
    {
      snprintf(__str, 0x20uLL, "%u.%u.%u.%u.%u");
    }
    else if (((v5 >> 10) & 0x3FF) != 0)
    {
      snprintf(__str, 0x20uLL, "%u.%u.%u.%u");
    }
    else if (((v5 >> 20) & 0x3FF) != 0)
    {
      snprintf(__str, 0x20uLL, "%u.%u.%u");
    }
    else if (((v5 >> 30) & 0x3FF) != 0)
    {
      snprintf(__str, 0x20uLL, "%u.%u");
    }
    else
    {
      snprintf(__str, 0x20uLL, "%u");
    }
    result = *(double *)__str;
    v6 = v8;
    *(_OWORD *)a2 = *(_OWORD *)__str;
    *(_OWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

double TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::version_from_id_dylib_load_command@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  double result;
  __int128 v5;
  char __str[16];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::id_dylib(*(_QWORD *)(a1 + 24));
  if (v3)
  {
    if (v3[4])
    {
      snprintf(__str, 0x20uLL, "%u.%u.%u");
    }
    else if (BYTE1(v3[4]))
    {
      snprintf(__str, 0x20uLL, "%u.%u");
    }
    else
    {
      snprintf(__str, 0x20uLL, "%u");
    }
    result = *(double *)__str;
    v5 = v7;
    *(_OWORD *)a2 = *(_OWORD *)__str;
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

unint64_t TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::is_protected(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 28 + v1;
  v6 = a1 + 28;
  while (1)
  {
    result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
    if (!result)
      break;
    if (*(_DWORD *)result == 1 && (*(_BYTE *)(result + 52) & 8) != 0)
      return 1;
  }
  return result;
}

unint64_t TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::is_restricted(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = a1;
  v6 = a1 + 28 + v1;
  v7 = a1 + 28;
  result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4);
  if (result)
  {
    v3 = result;
    while (*(_DWORD *)v3 != 1
         || strncmp("__RESTRICT", (const char *)(v3 + 8), 0xFuLL)
         || !TSegmentLoadCommand<SizeAndEndianness<Pointer32,LittleEndian>>::section_named(v3, "__restrict"))
    {
      result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4);
      v3 = result;
      if (!result)
        return result;
    }
    return 1;
  }
  return result;
}

const char *TSegmentLoadCommand<SizeAndEndianness<Pointer32,LittleEndian>>::section_named(uint64_t a1, char *__s1)
{
  uint64_t v2;
  const char *i;

  v2 = *(unsigned int *)(a1 + 48);
  if (!(_DWORD)v2)
    return 0;
  for (i = (const char *)(a1 + 56); strncmp(__s1, i, 0x10uLL); i += 68)
  {
    if (!--v2)
      return 0;
  }
  return i;
}

unint64_t TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::uses_cplusplus(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = a1;
  v6 = a1 + 28 + v1;
  v7 = a1 + 28;
  for (result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4);
        result;
        result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v4))
  {
    if (*(_DWORD *)result == 12)
    {
      v3 = (char *)(result + *(unsigned int *)(result + 8));
      if (strstr(v3, "libc++.") || strstr(v3, "libstdc++."))
        return 1;
    }
    else if (*(_DWORD *)result == 15)
    {
      return 1;
    }
  }
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::source_version(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 28 + v1;
  v6 = a1 + 28;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 42);
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::id_dylib(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 28 + v1;
  v6 = a1 + 28;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 13);
  return result;
}

uint64_t ___ZL34iterate_symbol_owners_from_archivePKcyjRK17CSCppArchitectureS0_bU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  unsigned int v12;
  char *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD v30[7];
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  char *v34;
  char __str[1024];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v12 = snprintf(__str, 0x400uLL, "%s(", *(const char **)(a1 + 48));
  if (v12 <= 0x400)
  {
    v13 = &__str[v12];
    v14 = 1024 - v12;
    v15 = CSCppArchiveEntry::name_cpy((CSCppArchiveEntry *)a3, v13, v14);
    if (v14 >= v15)
      strlcat(&v13[v15], ")", v14 - v15);
  }
  v16 = CSCppArchiveEntry::offset_to_macho_header((CSCppArchiveEntry *)a3);
  v17 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v16, 4);
  if (v17
    && ((v18 = *v17, *v17 > -822415875)
      ? ((v18 + 17958194) >= 2 ? (v19 = v18 == -822415874) : (v19 = 1), v20 = -805638658)
      : ((v18 + 889275714) >= 2 ? (v19 = v18 == -1095041334) : (v19 = 1), v20 = -1078264118),
        !v19 ? (v21 = v18 == v20) : (v21 = 1),
        v21))
  {
    v22 = CSCppArchiveEntry::size_without_name((CSCppArchiveEntry *)a3);
    v23 = strtoul(a3 + 16, 0, 10);
    v24 = *(_DWORD *)(a1 + 72) | 0x4000u;
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 64);
    v27 = *(unsigned __int8 *)(a1 + 76);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 0x40000000;
    v30[2] = ___ZL34iterate_symbol_owners_from_archivePKcyjRK17CSCppArchitectureS0_bU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke_46;
    v30[3] = &unk_1E6776238;
    v30[5] = v16 + a4;
    v30[6] = v22;
    v30[4] = *(_QWORD *)(a1 + 32);
    result = iterate_symbol_owners_from_memory(a2, __str, v23, v16, v24, v25, v26, v27, v30);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= result;
    if ((_DWORD)result && *(_BYTE *)(a1 + 76))
      *a5 = 1;
    *a6 = 1;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v29 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 136315394;
      v32 = v29;
      v33 = 2080;
      v34 = __str;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Corrupt archive entry in %s -- no header found for entry %s\n", buf, 0x16u);
    }
    return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Corrupt archive entry in %s -- no header found for entry %s\n", *(const char **)(a1 + 48), __str);
  }
  return result;
}

uint64_t CSCppArchiveEntry::offset_to_macho_header(CSCppArchiveEntry *this)
{
  if (!strncmp((const char *)this, "#1/", 3uLL))
    return strtoul((const char *)this + 3, 0, 10) + 60;
  else
    return 60;
}

unint64_t CSCppArchiveEntry::size_without_name(CSCppArchiveEntry *this)
{
  int v2;
  unint64_t v3;

  v2 = strncmp((const char *)this, "#1/", 3uLL);
  v3 = strtoul((const char *)this + 48, 0, 10);
  if (!v2)
    return v3 - strtoul((const char *)this + 3, 0, 10);
  return v3;
}

void ___ZL34iterate_symbol_owners_from_archivePKcyjRK17CSCppArchitectureS0_bU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke_46(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v10 = v3;
  v11 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(v4 + 16))(v4, &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B410F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::archive_entry_at(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v12;

  v6 = 60;
  do
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, v6);
    v9 = v7;
    if (!v7)
      break;
    if (*(_BYTE *)(v7 + 58) != 96)
      return 0;
    v10 = *(unsigned __int8 *)(v7 + 59);
    if (v10 != 10 || a3 == 0)
    {
      if (v10 != 10)
        return 0;
      return v9;
    }
    v12 = v8;
    v6 = strtoul((const char *)(v7 + 48), 0, 10) + 60;
  }
  while (v6 > v12);
  return v9;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::find<std::pair<std::string,unsigned long long>>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  char v15;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v15, a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (v4 + (*(_QWORD *)(a2 + 24) << 6) + (*(_QWORD *)(a2 + 24) >> 2) + 2654435769u) ^ *(_QWORD *)(a2 + 24);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = (v4 + (*(_QWORD *)(a2 + 24) << 6) + (*(_QWORD *)(a2 + 24) >> 2) + 2654435769u) ^ *(_QWORD *)(a2 + 24);
    if (v6 >= *(_QWORD *)&v5)
      v9 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = v6 & (*(_QWORD *)&v5 - 1);
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::pair<std::string,unsigned long long>>::operator()[abi:ne180100](v12, v11 + 16, (unsigned __int8 *)a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

BOOL std::equal_to<std::pair<std::string,unsigned long long>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  BOOL v19;
  _BOOL4 v20;

  v5 = a2[23];
  v6 = *((_QWORD *)a2 + 1);
  if ((v5 & 0x80u) == 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  v8 = a3[23];
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a3 + 1);
  if (v7 == v8)
  {
    if (v9 >= 0)
      v10 = a3;
    else
      v10 = *(unsigned __int8 **)a3;
    if ((v5 & 0x80) != 0)
    {
      v20 = memcmp(*(const void **)a2, v10, v6) == 0;
    }
    else if ((_DWORD)v5)
    {
      v11 = v5 - 1;
      v12 = a2;
      do
      {
        v14 = *v12++;
        v13 = v14;
        v16 = *v10++;
        v15 = v16;
        v18 = v11-- != 0;
        v19 = v13 == v15;
        v20 = v13 == v15;
      }
      while (v19 && v18);
    }
    else
    {
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  return *((_QWORD *)a2 + 3) == *((_QWORD *)a3 + 3) && v20;
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  CSCppArchiveEntry *v2;
  char *v3;
  size_t v4;

  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    CSCppArchiveEntry::name_cpy(v2, v3, v4);
  }
}

size_t CSCppArchiveEntry::name_cpy(CSCppArchiveEntry *this, char *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;

  if (!strncmp((const char *)this, "#1/", 3uLL))
  {
    strncpy(a2, (const char *)this + 60, a3);
    v9 = a3 - 1;
  }
  else
  {
    v6 = 15;
    do
    {
      v7 = v6;
      if (v6 == -1)
        break;
      v8 = *((unsigned __int8 *)this + v6--);
    }
    while (v8 == 32);
    if (v7 + 1 < a3 - 1)
      v9 = v7 + 1;
    else
      v9 = a3 - 1;
    strncpy(a2, (const char *)this, v9);
  }
  a2[v9] = 0;
  return strlen(a2);
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  std::unique_lock<std::mutex>::mutex_type *m;

  m = this->__m_;
  if (m)
  {
    if (!this->__owns_)
    {
      std::mutex::lock(m);
      this->__owns_ = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_impl<char (&)[1024],unsigned long long &>();
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_impl<char (&)[1024],unsigned long long &>(_QWORD *a1, char *a2, _QWORD *a3)
{
  unsigned __int8 *inserted;
  char v5;
  void **v6;
  void *__p;
  uint64_t v9;

  std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__construct_node<char (&)[1024],unsigned long long &>((uint64_t)a1, a2, a3, (uint64_t)&__p);
  inserted = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v5 & 1) == 0)
  {
    v6 = (void **)__p;
    __p = 0;
    if (v6)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v9, v6);
  }
  return inserted;
}

void sub_1B410F460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__construct_node<char (&)[1024],unsigned long long &>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x30uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v9 + 2, a2);
  v9[5] = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1B410F518(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == a2)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3) & 1) != 0)
            return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
  }
  return 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<char const*&,unsigned long long &>,std::tuple<std::unordered_map<std::string,unsigned long long>&&>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unsigned __int8 *inserted;
  char v6;
  uint64_t v8[3];

  std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<char const*&,unsigned long long &>,std::tuple<std::unordered_map<std::string,unsigned long long>&&>>((uint64_t)a1, a3, a4, (uint64_t)v8);
  inserted = std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::__node_insert_unique(a1, v8[0]);
  if ((v6 & 1) != 0)
    v8[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return inserted;
}

void sub_1B410F754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<char const*&,unsigned long long &>,std::tuple<std::unordered_map<std::string,unsigned long long>&&>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  char **v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t result;
  char v13;

  v7 = a1 + 16;
  v8 = operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = 0;
  v9 = *(char ***)a2;
  v10 = *(_QWORD **)(a2 + 8);
  v11 = *a3;
  std::string::basic_string[abi:ne180100]<0>(v8 + 2, *v9);
  v8[5] = *v10;
  std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table((uint64_t)(v8 + 6), v11);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v13, (uint64_t)(v8 + 2));
  v8[1] = (result + (v8[5] << 6) + (v8[5] >> 2) + 2654435769u) ^ v8[5];
  return result;
}

void sub_1B410F824(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  char v8;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = (std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, a2 + 16)
      + (v2[5] << 6)
      + (v2[5] >> 2)
      + 2654435769u) ^ v2[5];
  v2[1] = v5;
  v6 = std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::__unordered_map_hasher<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,std::equal_to<std::pair<std::string,unsigned long long>>,true>,std::__unordered_map_equal<std::pair<std::string,unsigned long long>,std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,std::equal_to<std::pair<std::string,unsigned long long>>,ArchiveAndArchOffsetHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == a2)
        {
          if (std::equal_to<std::pair<std::string,unsigned long long>>::operator()[abi:ne180100](a1 + 32, i + 16, a3))
            return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,unsigned long long>,std::unordered_map<std::string,unsigned long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,unsigned long long> const,std::unordered_map<std::string,unsigned long long>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,unsigned long long> const,std::unordered_map<std::string,unsigned long long>>,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t ___ZL24get_archive_entry_memoryPKcy_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0, 60);
  if (result)
  {
    if (*(_BYTE *)(result + 58) == 96 && *(_BYTE *)(result + 59) == 10)
      return strtoul((const char *)(result + 48), 0, 10) + 60;
    else
      return 0;
  }
  return result;
}

_DWORD *TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::foreach_fileset_entry(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *result;
  unint64_t v8;
  uint64_t v9;
  char v11;
  int v12;
  _DWORD *v13;
  char *v14;
  _DWORD *v15;

  v6 = 32;
  while (1)
  {
    result = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, v6);
    if (!result || *result != -17958193)
      break;
    v9 = result[5];
    v6 = v9 + 32;
    if (v9 + 32 <= v8)
    {
      v12 = result[4];
      v13 = result;
      v14 = (char *)result + v9 + 32;
      v15 = result + 8;
      v11 = 0;
      do
      {
        result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v12);
        if (!result)
          break;
        if (*result == -2147483595 && a3 != 0)
          result = (_DWORD *)(*(uint64_t (**)(uint64_t, _DWORD *, char *))(a3 + 16))(a3, result, &v11);
      }
      while (!v11);
      return result;
    }
  }
  return result;
}

uint64_t ___ZZ39extract_segment_content_from_kc_fileset17CSCppArchitecturePKcS1_4UUIDyyU13block_pointerFvPKhmEENK3__0clES1__block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t result;
  _QWORD v10[5];
  __int128 v11;
  const char *v12;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(const char **)(a1 + 48);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZZ39extract_segment_content_from_kc_fileset17CSCppArchitecturePKcS1_4UUIDyyU13block_pointerFvPKhmEENK3__0clES1__block_invoke_2;
  v10[3] = &unk_1E67762C8;
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 56);
  v12 = v8;
  result = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::provide_segment_content_matching_owner_uuid((_QWORD *)(a1 + 40), v5, v6, v7, v8, 0, (uint64_t)v10);
  **(_BYTE **)(a1 + 72) = result;
  if ((_DWORD)result)
    *a3 = 1;
  return result;
}

uint64_t TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::provide_segment_content_matching_owner_uuid(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  UUID v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v28 = a3;
  *(_QWORD *)&v28[8] = a4;
  v12 = 32;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, v12);
    if (!result)
      return result;
    if (*(_DWORD *)result != -17958193)
      return 0;
    v15 = *(unsigned int *)(result + 20);
    v12 = v15 + 32;
    if (v15 + 32 <= v14)
    {
      v16 = 0;
      v24 = *(_DWORD *)(result + 16);
      v25 = result;
      v26 = result + 32 + v15;
      v27 = result + 32;
      while (1)
      {
        v17 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v24);
        if (!v17)
          break;
        v18 = v17;
        if (*(_DWORD *)v17 == 27)
        {
          if (*(_QWORD *)v28 == *(_QWORD *)(v17 + 8) && *(_QWORD *)&v28[8] == *(_QWORD *)(v17 + 16))
          {
            v21 = v16;
            goto LABEL_20;
          }
        }
        else if (*(_DWORD *)v17 == 25)
        {
          v19 = strlen((const char *)(v17 + 8));
          if (!strncmp((const char *)(v18 + 8), a5, v19) && strlen(a5) == v19)
            v16 = v18;
        }
      }
      v21 = 0;
LABEL_20:
      if (UUID::is_null((UUID *)v28))
        v21 = v16;
      if (!v21 || !*(_QWORD *)(v21 + 48))
        return 0;
      if (a6)
        v22 = a2;
      else
        v22 = 0;
      v23 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, *(_QWORD *)(v21 + 40) + v22);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(a7 + 16))(a7, v23, *(_QWORD *)(v21 + 48));
      return 1;
    }
  }
}

uint64_t ___ZZ39extract_segment_content_from_kc_fileset17CSCppArchitecturePKcS1_4UUIDyyU13block_pointerFvPKhmEENK3__0clES1__block_invoke_2(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(void);
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  if (!v4)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (a1[6] + v4 <= a3)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v5 = a1[7];
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Requested vm range length in %s does not exist in file.\n", buf, 0xCu);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Requested vm range length in %s does not exist in file.\n", (const char *)a1[7]);
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

uint64_t TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::foreach_arch_in_macho_fat32_header(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned __int8 v18;

  v5 = a2;
  v6 = 8;
  while (1)
  {
    v7 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, v5, v6);
    if (!v7 || *v7 != -1095041334 || !v7[1] || bswap32(v7[1]) > 0x2C)
      break;
    v6 = 20 * bswap32(v7[1]) + 8;
    if (v8 >= v6)
    {
      v9 = bswap32(v7[1]);
      v10 = v7 + 2;
      goto LABEL_9;
    }
  }
  v10 = 0;
  v9 = 0;
LABEL_9:
  v18 = 0;
  if (!v9)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = v9;
  v14 = 20 * v9 + 8;
  v15 = 1;
  do
  {
    if (v14 <= bswap32(v10[2]))
    {
      if (a3)
      {
        (*(void (**)(uint64_t, _DWORD *, unsigned __int8 *))(a3 + 16))(a3, v10, &v18);
        v11 = v18;
      }
      ++v12;
      v16 = v11;
    }
    else
    {
      v16 = 0;
    }
    if (v15 >= v13)
      break;
    v10 += 5;
    ++v15;
  }
  while (!v16);
  return v12;
}

uint64_t ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer3212LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v11[5];
  __int128 v12;
  const char *v13;

  result = CSCppArchitecture::matches(*(CSCppArchitecture **)(a1 + 48), bswap64(a2[1] & 0xFFFFFF00 | ((unint64_t)*a2 << 32)));
  if ((_DWORD)result)
  {
    v7 = bswap32(a2[2]);
    v8 = *(_QWORD *)(a1 + 88);
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(const char **)(a1 + 64);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer3212LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke_2;
    v11[3] = &unk_1E6776318;
    v11[4] = *(_QWORD *)(a1 + 32);
    v12 = *(_OWORD *)(a1 + 72);
    v13 = v10;
    result = TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::provide_segment_content_matching_owner_uuid((_QWORD *)(a1 + 56), v7, v8, v9, v10, 1, (uint64_t)v11);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      *a3 = 1;
  }
  return result;
}

uint64_t TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::provide_segment_content_matching_owner_uuid(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  UUID v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v29 = a3;
  *(_QWORD *)&v29[8] = a4;
  v12 = a2;
  v13 = 28;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v12, v13);
    if (!result)
      return result;
    if (*(_DWORD *)result != -17958194)
      return 0;
    v16 = *(unsigned int *)(result + 20);
    v13 = v16 + 28;
    if (v16 + 28 <= v15)
    {
      v17 = 0;
      v25 = *(_DWORD *)(result + 16);
      v26 = result;
      v27 = result + 28 + v16;
      v28 = result + 28;
      while (1)
      {
        v18 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v25);
        if (!v18)
          break;
        v19 = v18;
        if (*(_DWORD *)v18 == 27)
        {
          if (*(_QWORD *)v29 == *(_QWORD *)(v18 + 8) && *(_QWORD *)&v29[8] == *(_QWORD *)(v18 + 16))
          {
            v22 = v17;
            goto LABEL_20;
          }
        }
        else if (*(_DWORD *)v18 == 1)
        {
          v20 = strlen((const char *)(v18 + 8));
          if (!strncmp((const char *)(v19 + 8), a5, v20) && strlen(a5) == v20)
            v17 = v19;
        }
      }
      v22 = 0;
LABEL_20:
      if (UUID::is_null((UUID *)v29))
        v22 = v17;
      if (!v22 || !*(_DWORD *)(v22 + 36))
        return 0;
      if (a6)
        v23 = a2;
      else
        v23 = 0;
      v24 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, *(_DWORD *)(v22 + 32) + v23);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(a7 + 16))(a7, v24, *(unsigned int *)(v22 + 36));
      return 1;
    }
  }
}

uint64_t ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer3212LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke_2(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(void);
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  if (!v4)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (a1[6] + v4 <= (unint64_t)a3)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v5 = a1[7];
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Requested vm range length in %s does not exist in file.\n", buf, 0xCu);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Requested vm range length in %s does not exist in file.\n", (const char *)a1[7]);
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

uint64_t ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer3212LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke_70(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(void);
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  if (!v4)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (a1[6] + v4 <= (unint64_t)a3)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v5 = a1[7];
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Requested vm range length in %s does not exist in file.\n", buf, 0xCu);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Requested vm range length in %s does not exist in file.\n", (const char *)a1[7]);
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

uint64_t ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v11[5];
  __int128 v12;
  const char *v13;

  result = CSCppArchitecture::matches(*(CSCppArchitecture **)(a1 + 48), bswap64(a2[1] & 0xFFFFFF00 | ((unint64_t)*a2 << 32)));
  if ((_DWORD)result)
  {
    v7 = bswap32(a2[2]);
    v8 = *(_QWORD *)(a1 + 88);
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(const char **)(a1 + 64);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke_2;
    v11[3] = &unk_1E6776390;
    v11[4] = *(_QWORD *)(a1 + 32);
    v12 = *(_OWORD *)(a1 + 72);
    v13 = v10;
    result = TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::provide_segment_content_matching_owner_uuid((_QWORD *)(a1 + 56), v7, v8, v9, v10, 1, (uint64_t)v11);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      *a3 = 1;
  }
  return result;
}

uint64_t ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke_2(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(void);
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  if (!v4)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (a1[6] + v4 <= a3)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v5 = a1[7];
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Requested vm range length in %s does not exist in file.\n", buf, 0xCu);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Requested vm range length in %s does not exist in file.\n", (const char *)a1[7]);
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

uint64_t ___ZL22access_segment_contentI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKc4UUIDyyRK17CSCppArchitectureU13block_pointerFvPKhmE_block_invoke_75(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(void);
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  if (!v4)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (a1[6] + v4 <= a3)
  {
    v7 = *(uint64_t (**)(void))(a1[4] + 16);
    return v7();
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v5 = a1[7];
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Requested vm range length in %s does not exist in file.\n", buf, 0xCu);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Requested vm range length in %s does not exist in file.\n", (const char *)a1[7]);
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

uint64_t std::__hash_table<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 32);
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = a2[1] ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_42:
    *v22 = i;
    goto LABEL_43;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v21 + 8 * v4) = v14;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4110C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<UUID,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 4;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t ___ZNK31CSCppDyldSplitSharedCacheMemory20for_each_text_memoryIU13block_pointerFvPKcP15CSCppFileMemory4UUIDEEEvT__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, a3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 168), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 176));
}

void std::make_unique[abi:ne180100]<CSCppDyldSplitSharedCacheMemory,_CSArchitecture &,char const*&,BOOL const&,std::vector<std::string>,char const*&>(uint64_t *a1@<X0>, char **a2@<X1>, unsigned __int8 *a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  void **v19;

  v12 = operator new();
  v13 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  v14 = *a3;
  v15 = *a4;
  v16 = *((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v12, v13, __p, v14, &v15, *a5);
  *a6 = v12;
  v19 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v18 < 0)
    operator delete(__p[0]);
}

void sub_1B4110D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  uint64_t v19;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  MEMORY[0x1B5E36940](v19, 0x10A1C404D4F90C9);
  _Unwind_Resume(a1);
}

uint64_t ___ZL37iterate_symbol_owners_from_mh_filesetI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKcNT_6size_tENS8_5ptr_tES9_j17CSCppArchitectureU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, *MEMORY[0x1E0C85AD8]);
  if (result)
  {
    if (*(_DWORD *)(result + 12) == 12)
    {
      result = *(unsigned int *)(result + 20) + 32;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ___ZL37iterate_symbol_owners_from_mh_filesetI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKcNT_6size_tENS8_5ptr_tES9_j17CSCppArchitectureU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  _QWORD v9[6];
  uint64_t v10;

  v3 = *(unsigned int *)(a2 + 24) + a2;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZL37iterate_symbol_owners_from_mh_filesetI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKcNT_6size_tENS8_5ptr_tES9_j17CSCppArchitectureU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke_3;
  v9[3] = &unk_1E6776498;
  v9[4] = *(_QWORD *)(a1 + 32);
  v9[5] = v3;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 64) - v5;
  v7 = *(_DWORD *)(a1 + 72) | 0x80000;
  v10 = *(_QWORD *)(a1 + 48);
  result = process_symbol_owner_from_memory_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(0, v10, v4, v5, v6, v7, (unint64_t *)(a1 + 76), (uint64_t)v9);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= result;
  return result;
}

void ___ZL37iterate_symbol_owners_from_mh_filesetI17SizeAndEndiannessI9Pointer6412LittleEndianEEbP11CSCppMemoryPKcNT_6size_tENS8_5ptr_tES9_j17CSCppArchitectureU13block_pointerFvNSt3__110shared_ptrI16CSCppSymbolOwnerEEE_block_invoke_3(uint64_t a1, void ***a2)
{
  void **v4;
  std::__shared_weak_count *v5;
  void **v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  std::__shared_weak_count *v14;

  v4 = *a2;
  *((_DWORD *)v4 + 27) = *((_DWORD *)*a2 + 27) & 0xFEF7FDFF | 0x1080000;
  CSCppSymbolOwner::set_path(v4, *(const char **)(a1 + 40));
  CSCppSymbolOwner::set_path_for_symbolication(*a2, *(const char **)(a1 + 48));
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *((_DWORD *)v6 + 27) = *((_DWORD *)*a2 + 27) & 0xFEBFFFFF;
  v7 = *(_QWORD *)(a1 + 32);
  v13 = v6;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, void ***))(v7 + 16))(v7, &v13);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B4111048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CSCppFileMemory::mapped_file_table_entry_key(CSCppFileMemory *this, unint64_t a2, unint64_t a3, unint64_t a4)
{
  size_t v8;
  std::string *v9;
  char *v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *p_p;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  uint64_t v28;
  std::string __p;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 87) >= 0)
    v8 = *((unsigned __int8 *)this + 87);
  else
    v8 = *((_QWORD *)this + 9);
  v9 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v8 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)this + 87) >= 0)
      v10 = (char *)this + 64;
    else
      v10 = (char *)*((_QWORD *)this + 8);
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 45;
  std::to_string(&v31, a2);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v31;
  else
    v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v32, (const std::string::value_type *)v11, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v33, "-", 1uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, a3);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v30;
  else
    v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v18 = v30.__r_.__value_.__l.__size_;
  v19 = std::string::append(&v34, (const std::string::value_type *)v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v35, "-", 1uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v24 = __p.__r_.__value_.__l.__size_;
  v25 = std::string::append(&v36, (const std::string::value_type *)p_p, v24);
  v26 = v25->__r_.__value_.__r.__words[0];
  v37[0] = v25->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v37 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  v28 = v37[0];
  *((_QWORD *)this + 12) = v26;
  *((_QWORD *)this + 13) = v28;
  *(_QWORD *)((char *)this + 111) = *(_QWORD *)((char *)v37 + 7);
  *((_BYTE *)this + 119) = v27;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1B4111310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (*(char *)(v45 - 121) < 0)
    operator delete(*(void **)(v45 - 144));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void *CSCppFileMemory::map_file(CSCppFileMemory *this, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  FILE *v18;
  _BYTE buf[12];
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&mapped_file_table_mutex);
  if (!mapped_file_table)
  {
    v8 = operator new();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_DWORD *)(v8 + 32) = 1065353216;
    mapped_file_table = v8;
  }
  CSCppFileMemory::mapped_file_table_entry_key(this, a3, a4, *((_QWORD *)this + 11));
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>((_QWORD *)mapped_file_table, (unsigned __int8 *)this + 96);
  if (v9)
  {
    v10 = *((_QWORD *)v9 + 5);
    CSCppReferenceCount::retain(v10);
    v11 = *(void **)(v10 + 16);
  }
  else
  {
    v12 = (_QWORD *)((char *)this + 64);
    if (*((char *)this + 87) < 0)
      v12 = (_QWORD *)*v12;
    v11 = mmap(0, a4, 1, 8193, a2, a3);
    CSCppFileMemory::_total_mmapped_bytes += a4;
    if (v11 == (void *)-1)
    {
      v14 = __error();
      v15 = strerror(*v14);
      v16 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v15 == (char *)22)
      {
        if (v16)
        {
          v17 = *__error();
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v12;
          v21 = 1024;
          LODWORD(v22) = v17;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Attempt to mmap %s failed, Unknown Error %d\n", buf, 0x12u);
        }
        v18 = (FILE *)*MEMORY[0x1E0C80C10];
        __error();
        fprintf(v18, "Attempt to mmap %s failed, Unknown Error %d\n");
      }
      else
      {
        if (v16)
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v12;
          v21 = 2080;
          v22 = v15;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Attempt to mmap %s failed, %s\n", buf, 0x16u);
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Attempt to mmap %s failed, %s\n");
      }
      v11 = 0;
      if (*((char *)this + 119) < 0)
      {
        **((_BYTE **)this + 12) = 0;
        *((_QWORD *)this + 13) = 0;
      }
      else
      {
        *((_BYTE *)this + 96) = 0;
        *((_BYTE *)this + 119) = 0;
      }
    }
    else
    {
      v13 = operator new();
      *(_DWORD *)(v13 + 8) = 1;
      *(_QWORD *)v13 = &off_1E6776570;
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = a3;
      *(_QWORD *)(v13 + 32) = a4;
      *(_QWORD *)buf = v13;
      std::__hash_table<std::__hash_value_type<std::string,MappedFileTableEntry *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MappedFileTableEntry *>>>::__emplace_unique_key_args<std::string,std::string&,MappedFileTableEntry *&>(mapped_file_table, (unsigned __int8 *)this + 96, (uint64_t)this + 96, buf);
    }
  }
  pthread_mutex_unlock(&mapped_file_table_mutex);
  return v11;
}

void sub_1B41116A4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&mapped_file_table_mutex);
  _Unwind_Resume(a1);
}

uint64_t CSCppFileMemory::unmap_file(CSCppFileMemory *this)
{
  unsigned __int8 *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD v9[2];
  uint64_t *(*v10)(uint64_t);
  void *v11;
  CSCppFileMemory *v12;
  uint64_t v13;
  unsigned int *v14;

  pthread_mutex_lock(&mapped_file_table_mutex);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>((_QWORD *)mapped_file_table, (unsigned __int8 *)this + 96);
  if (v2)
  {
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    v4 = *((_QWORD *)v3 + 4);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v10 = ___ZN15CSCppFileMemory10unmap_fileEv_block_invoke;
    v11 = &__block_descriptor_tmp_10;
    v12 = this;
    v13 = v4;
    v14 = v3;
    v5 = v3 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      v10((uint64_t)v9);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return pthread_mutex_unlock(&mapped_file_table_mutex);
}

void sub_1B41117AC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&mapped_file_table_mutex);
  _Unwind_Resume(a1);
}

uint64_t CSCppFileMemory::total_mmapped_bytes(CSCppFileMemory *this)
{
  uint64_t v1;

  pthread_mutex_lock(&mapped_file_table_mutex);
  v1 = CSCppFileMemory::_total_mmapped_bytes;
  pthread_mutex_unlock(&mapped_file_table_mutex);
  return v1;
}

uint64_t CSCppFileMemory::CSCppFileMemory(uint64_t a1, char *a2, unint64_t a3, unint64_t a4, char a5)
{
  const char *v8;
  int v10;
  int v11;
  unint64_t st_size;
  __darwin_ino64_t st_ino;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  stat v23;
  uint64_t v24;

  v8 = a2;
  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E6776510;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (!a2)
    a2 = "";
  *(_OWORD *)(a1 + 40) = 0uLL;
  *(_DWORD *)(a1 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 64), a2);
  *(_QWORD *)(a1 + 88) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 96), "");
  v10 = open(v8, 0x1000000, 0);
  v11 = v10;
  if ((v10 & 0x80000000) == 0)
  {
    if (!fstat(v10, &v23) && (v23.st_mode & 0xF000) == 0x8000)
    {
      st_size = v23.st_size;
      st_ino = v23.st_ino;
      *(_QWORD *)(a1 + 16) = v23.st_size;
      *(_QWORD *)(a1 + 88) = st_ino;
      if (st_size)
      {
        *(_DWORD *)(a1 + 56) = v23.st_mtimespec.tv_sec;
        if ((a5 & 1) != 0 && st_size > a3 && a4 + a3 > st_size)
          a4 = st_size - a3;
        if (a4 + a3 <= st_size)
        {
          if (a4)
          {
            v15 = a4;
          }
          else
          {
            a3 = 0;
            v15 = st_size;
          }
          v16 = (uint64_t *)MEMORY[0x1E0C85AC0];
          *(_QWORD *)(a1 + 48) = a3;
          v17 = *v16;
          v18 = v17 & a3;
          v19 = (v17 & a3) + v15;
          *(_QWORD *)(a1 + 32) = v19;
          v20 = (char *)CSCppFileMemory::map_file((CSCppFileMemory *)a1, v11, a3 & ~v17, v19);
          *(_QWORD *)(a1 + 8) = v20;
          *(_QWORD *)(a1 + 24) = &v20[v18];
          if ((a5 & 2) != 0)
            v21 = 0;
          else
            v21 = a3;
          *(_QWORD *)(a1 + 40) = v21;
        }
        else if (st_size != a3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v23.st_dev = 134219010;
            *(_QWORD *)&v23.st_mode = a3;
            WORD2(v23.st_ino) = 2048;
            *(__darwin_ino64_t *)((char *)&v23.st_ino + 6) = a4 + a3;
            HIWORD(v23.st_gid) = 2048;
            *(_QWORD *)&v23.st_rdev = a4;
            LOWORD(v23.st_atimespec.tv_sec) = 2048;
            *(__darwin_time_t *)((char *)&v23.st_atimespec.tv_sec + 2) = st_size;
            WORD1(v23.st_atimespec.tv_nsec) = 2080;
            *(uint64_t *)((char *)&v23.st_atimespec.tv_nsec + 4) = (uint64_t)v8;
            _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Attempting to map range %llu-%llu length %llu past end of file %llu in: %s\n", (uint8_t *)&v23, 0x34u);
            st_size = *(_QWORD *)(a1 + 16);
          }
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Attempting to map range %llu-%llu length %llu past end of file %llu in: %s\n", a3, a4 + a3, a4, st_size, v8);
        }
      }
    }
    if (v11)
      close(v11);
  }
  return a1;
}

void sub_1B4111AB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void CSCppFileMemory::CSCppFileMemory(CSCppFileMemory *this, char *a2)
{
  CSCppFileMemory::CSCppFileMemory((uint64_t)this, a2, 0, 0, 0);
}

uint64_t CSCppFileMemory::CSCppFileMemory(uint64_t a1, char *a2, unint64_t a3, unint64_t a4)
{
  return CSCppFileMemory::CSCppFileMemory(a1, a2, a3, a4, 0);
}

void CSCppFileMemory::~CSCppFileMemory(void **this)
{
  *this = &off_1E6776510;
  if (this[1])
    CSCppFileMemory::unmap_file((CSCppFileMemory *)this);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
}

{
  CSCppFileMemory::~CSCppFileMemory(this);
  JUMPOUT(0x1B5E36940);
}

uint64_t CSCppFileMemory::bytes_at(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a1[1] && (v3 = a1[5], a2 >= v3) && a3 + a2 <= a1[4] + v3)
    return a2 - v3 + a1[3];
  else
    return 0;
}

uint64_t CSCppFileMemory::footprint(CSCppFileMemory *this)
{
  return *((_QWORD *)this + 4) + 120;
}

uint64_t CSCppFileMemory::to_string@<X0>(CSCppFileMemory *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"CSCppFileMemory ", 16);
  v7 = *((_QWORD *)this + 8);
  v6 = (char *)this + 64;
  v5 = v7;
  v8 = v6[23];
  if (v8 >= 0)
    v9 = (uint64_t)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[23];
  else
    v10 = *((_QWORD *)v6 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v13, a2);
  v12 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E368EC](&v15);
}

void sub_1B4111CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CSCppFileMemory::is_task(CSCppFileMemory *this)
{
  return 0;
}

uint64_t CSCppFileMemory::is_dyld_shared_cache(CSCppFileMemory *this)
{
  return 0;
}

void MappedFileTableEntry::~MappedFileTableEntry(MappedFileTableEntry *this)
{
  MappedFileTableEntry::~MappedFileTableEntry(this);
  JUMPOUT(0x1B5E36940);
}

{
  *(_QWORD *)this = &off_1E6776570;
  munmap(*((void **)this + 2), *((_QWORD *)this + 4));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MappedFileTableEntry *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MappedFileTableEntry *>>>::__emplace_unique_key_args<std::string,std::string&,MappedFileTableEntry *&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MappedFileTableEntry *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MappedFileTableEntry *>>>::__construct_node_hash<std::string&,MappedFileTableEntry *&>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1B4111FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MappedFileTableEntry *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MappedFileTableEntry *>>>::__construct_node_hash<std::string&,MappedFileTableEntry *&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(_QWORD *)(a3 + 16);
  }
  v10[5] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
}

void sub_1B4112068(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,MappedFileTableEntry *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MappedFileTableEntry *>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,MappedFileTableEntry *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MappedFileTableEntry *>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MappedFileTableEntry *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MappedFileTableEntry *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MappedFileTableEntry *>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

__CFString *CSCopyDescription(uint64_t a1, uint64_t a2)
{
  return CSCopyDescriptionWithIndent(a1, a2, 0);
}

void CSShow(uint64_t a1, uint64_t a2)
{
  __CFString *v2;

  v2 = CSCopyDescriptionWithIndent(a1, a2, 0);
  CFShow(v2);
  CFRelease(v2);
}

uint64_t CSCppMachTaskContainer::CSCppMachTaskContainer(uint64_t a1, uint64_t a2)
{
  int v3;
  mach_port_name_t v4;

  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)a1 = &off_1E67765A8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if (v3 != -1 && !mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v4, 0, 1))
    *(_DWORD *)(a1 + 8) = v4;
  return a1;
}

void CSCppMachTaskContainer::CSCppMachTaskContainer(CSCppMachTaskContainer *this, mach_port_name_t t)
{
  kern_return_t v4;
  int v5;
  int x;

  x = -1;
  v4 = pid_for_task(t, &x);
  v5 = x;
  *(_QWORD *)this = &off_1E67765A8;
  if (v4)
    v5 = -1;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = v5;
  if (v5 != -1 && !mach_port_mod_refs(*MEMORY[0x1E0C83DA0], t, 0, 1))
    *((_DWORD *)this + 2) = t;
}

uint64_t taskForPid(int a1)
{
  int v2;
  uint8_t buf[4];
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = task_read_for_pid();
  if (v2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v5 = a1;
    v6 = 1024;
    v7 = v2;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "CSCppMachTaskContainer task_for_pid failed for process %u, err %d", buf, 0xEu);
  }
  return 0;
}

void CSCppMachTaskContainer::CSCppMachTaskContainer(CSCppMachTaskContainer *this, int a2)
{
  int v4;

  v4 = taskForPid(a2);
  *(_QWORD *)this = &off_1E67765A8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = a2;
  if (a2 != -1)
    *((_DWORD *)this + 2) = v4;
}

void CSCppMachTaskContainer::CSCppMachTaskContainer(CSCppMachTaskContainer *this, mach_port_name_t a2, int a3)
{
  *(_QWORD *)this = &off_1E67765A8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = a3;
  if (a3 != -1 && !mach_port_mod_refs(*MEMORY[0x1E0C83DA0], a2, 0, 1))
    *((_DWORD *)this + 2) = a2;
}

void CSCppMachTaskContainer::~CSCppMachTaskContainer(CSCppMachTaskContainer *this)
{
  mach_port_name_t v1;

  *(_QWORD *)this = &off_1E67765A8;
  v1 = *((_DWORD *)this + 2);
  if (v1 + 1 >= 2)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1);
}

{
  CSCppMachTaskContainer::~CSCppMachTaskContainer(this);
  JUMPOUT(0x1B5E36940);
}

BOOL CSCppMachTaskContainer::is_self_task(CSCppMachTaskContainer *this)
{
  int v1;

  v1 = *((_DWORD *)this + 3);
  return v1 == getpid();
}

BOOL CSCppMachTaskContainer::is_alive(CSCppMachTaskContainer *this)
{
  mach_port_name_t v2;
  kern_return_t v4;
  int v5;
  int x;

  v2 = *((_DWORD *)this + 2);
  if (v2 + 1 < 2)
    return 0;
  x = -1;
  v4 = pid_for_task(v2, &x);
  v5 = x;
  if (v4)
    v5 = -1;
  return v5 == *((_DWORD *)this + 3);
}

__CFData *CSSymbolOwnerCreateSparseSignatureWithFlags(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 8) != 0)
    return _CSSymbolOwnerCreateFlatbufferSignatureWithAddressSet<__CFData const*>(a1, a2, a5, a3, a4);
  else
    return _CSSymbolOwnerCreateSparseSignature<__CFData *>(a1, a2, a3, a4);
}

const __CFData *_CSSymbolOwnerCreateSparseSignature<__CFData *>(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFData *Mutable;
  CSCppAddressSet *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  Mutable = CFDataCreateMutable(0, 0);
  v7 = (CSCppAddressSet *)(a4 & 0xFFFFFFFFFFFFFFFCLL);
  v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  v10 = CSCppSymbolicator::flags((os_unfair_lock_s *)v9) & 0x80002000 | 2;
  v11 = *(_QWORD *)(v9 + 56);
  v12 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 12);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  CSCppSignatureEncodeSymbolicator<__CFData *>(Mutable, v12, v13, v10, 1);
  CSCppSignatureEncodeSymbolOwner<__CFData *>(Mutable, (_OWORD *)(v8 + 16), *(_DWORD *)(v8 + 104), *(_DWORD *)(v8 + 108), *(_QWORD *)(v8 + 88), *(_QWORD *)(v8 + 96), *(_QWORD *)(v8 + 112), *(const char **)(v8 + 120), (_QWORD *)(v8 + 32), 0);
  if ((CSCppAddSparseMMapArchiveToSignature<__CFData *>(Mutable, v7) & 1) == 0)
  {
    CFRelease(Mutable);
    return 0;
  }
  v14 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
  v16 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  CSCppSignatureEncodeOptionalData<__CFData *>(Mutable, 4, v14, v15, v16, v17, 2, v9);
  return Mutable;
}

const __CFData *_CSSymbolOwnerCreateSignatureWithSlide<__CFData *>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  const __CFData *Mutable;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  Mutable = CFDataCreateMutable(0, 0);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  v11 = *(_QWORD *)(v10 + 56);
  v12 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 12);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v14 = CSCppSymbolicator::flags((os_unfair_lock_s *)v10);
  CSCppSignatureEncodeSymbolicator<__CFData *>(Mutable, v12, v13, v14, 1);
  CSCppSignatureEncodeSymbolOwner<__CFData *>(Mutable, (_OWORD *)(v9 + 16), *(_DWORD *)(v9 + 104), *(_DWORD *)(v9 + 108), *(_QWORD *)(v9 + 88), *(_QWORD *)(v9 + 96), *(_QWORD *)(v9 + 112), *(const char **)(v9 + 120), (_QWORD *)(v9 + 32), a4);
  if ((a3 & 1) != 0)
    CSCppAddMMapArchiveToSignatureFromSymbolOwner<__CFData *>(a1, a2, Mutable, (a3 >> 2) & 1);
  v15 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
  v17 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  CSCppSignatureEncodeOptionalData<__CFData *>(Mutable, 4, v15, v16, v17, v18, 2, v10);
  return Mutable;
}

__CFData *CSSymbolOwnerCreateSignature(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 8) != 0)
    return _CSSymbolOwnerCreateFlatbufferSignature<__CFData const*>(a1, a2, a3);
  else
    return _CSSymbolOwnerCreateSignatureWithSlide<__CFData *>(a1, a2, a3, 0);
}

__CFString *CSSymbolOwnerCopyDescriptionWithIndent(char a1, uint64_t a2, int a3)
{
  __CFString *i;
  UUID *CFUUIDBytes;
  uint64_t LoadTimestamp;
  uint64_t UnloadTimestamp;
  uint64_t Path;
  char __str[40];
  char v13[40];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  for (i = CFStringCreateMutable(0, 0); a3; --a3)
    CFStringAppendCString(i, "\t", 0x8000100u);
  CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes(a1, a2);
  if (CFUUIDBytes)
    CSUUIDCFUUIDBytesToString(CFUUIDBytes, v13, 40);
  else
    strcpy(v13, "null-uuid                           ");
  LoadTimestamp = CSSymbolOwnerGetLoadTimestamp(a1, a2);
  UnloadTimestamp = CSSymbolOwnerGetUnloadTimestamp(a1, a2);
  if (LoadTimestamp || UnloadTimestamp != 0x7FFFFFFFFFFFFFFFLL)
    snprintf(__str, 0x28uLL, "[0x%016llx 0x%016llx] ", LoadTimestamp, UnloadTimestamp);
  else
    __str[0] = 0;
  Path = CSSymbolOwnerGetPath(a1, a2);
  CFStringAppendFormat(i, 0, CFSTR("<CSSymbolOwner: %p> %s %s%s"), a2 & 0xFFFFFFFFFFFFFFFCLL, v13, __str, Path);
  return i;
}

mach_vm_address_t _CSCppConvertLegacyPreVersion7ArchiveToModernCopyWithValidation(_OWORD *a1, int a2)
{
  mach_vm_size_t v4;
  mach_vm_address_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  mach_vm_address_t v12[2];

  v4 = *((unsigned int *)a1 + 1);
  v12[0] = 0;
  v12[1] = v4;
  mach_vm_allocate(*MEMORY[0x1E0C83DA0], v12, v4, 3);
  v5 = v12[0];
  if (v12[0])
  {
    v6 = a1[1];
    *(_OWORD *)v12[0] = *a1;
    *(_OWORD *)(v5 + 16) = v6;
    v7 = a1[2];
    v8 = a1[3];
    v9 = a1[5];
    *(_OWORD *)(v5 + 64) = a1[4];
    *(_OWORD *)(v5 + 80) = v9;
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v5 + 48) = v8;
    memcpy((void *)(v5 + 96), a1 + 6, *((unsigned int *)a1 + 1) - 96);
    *(_DWORD *)(v5 + 4) = v4;
    v10 = TMMapArchive::calculate_checksum((int32x4_t *)v5);
    *(_DWORD *)(v5 + 48) = v10;
    *(_DWORD *)(v5 + 88) = 4 * *(_DWORD *)(v5 + 16);
    v12[0] = 0;
    if (a2)
    {
      if (!*(_DWORD *)(v5 + 4)
        || v10 != TMMapArchive::calculate_checksum((int32x4_t *)v5)
        || !TMMapArchive::are_offsets_in_bounds((TMMapArchive *)v5))
      {
        v5 = 0;
      }
    }
  }
  MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(v12);
  return v5;
}

mach_vm_address_t _CSCppConvertLegacyPreVersion6ArchiveToModernCopyWithValidation(_OWORD *a1, TMMapArchive *a2)
{
  int v2;
  unsigned int v4;
  mach_vm_address_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char is_64_bit;
  char *v11;
  size_t v12;
  void *v13;
  mach_vm_address_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  mach_vm_address_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v29;
  mach_vm_address_t address[2];

  v2 = (int)a2;
  v4 = CSMMapArchiveCompatibilityUtilities::required_size_for_modern_archive_from_v5((uint64_t)a1, a2);
  address[0] = 0;
  address[1] = v4;
  mach_vm_allocate(*MEMORY[0x1E0C83DA0], address, v4, 3);
  v5 = address[0];
  if (address[0])
  {
    v6 = a1[1];
    *(_OWORD *)address[0] = *a1;
    *(_OWORD *)(v5 + 16) = v6;
    v7 = a1[2];
    v8 = a1[3];
    v9 = a1[5];
    *(_OWORD *)(v5 + 64) = a1[4];
    *(_OWORD *)(v5 + 80) = v9;
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v5 + 48) = v8;
    v29 = *(_QWORD *)(v5 + 68);
    is_64_bit = CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v29);
    v11 = (char *)a1 + 88;
    if ((is_64_bit & 1) != 0)
    {
      v12 = *((unsigned int *)a1 + 1) - 88;
      v13 = (void *)(v5 + 96);
    }
    else
    {
      v14 = v5 + 96;
      v15 = (32 * *((_DWORD *)a1 + 2));
      v16 = &v11[v15];
      memcpy((void *)(v5 + 96), v11, v15);
      v17 = *((unsigned int *)a1 + 3);
      if ((_DWORD)v17)
      {
        v18 = (32 * *(_DWORD *)(v5 + 8)) + v14;
        v19 = *((_DWORD *)a1 + 3);
        v20 = v16;
        do
        {
          v21 = HIDWORD(*(_QWORD *)v20);
          *(_QWORD *)v18 = *(_QWORD *)v20;
          *(_QWORD *)(v18 + 8) = v21;
          *(_DWORD *)(v18 + 16) = *((_DWORD *)v20 + 2);
          v20 += 16;
          v18 += 24;
          --v19;
        }
        while (v19);
      }
      v11 = &v16[16 * v17];
      v13 = (void *)(v15 + v14 + 24 * v17);
      v12 = (*((_DWORD *)a1 + 1) + (_DWORD)a1 - (_DWORD)v11);
    }
    memcpy(v13, v11, v12);
    v22 = *(unsigned int *)(v5 + 16);
    if (*(_DWORD *)v5 == 1)
    {
      LODWORD(v22) = 4 * v22;
    }
    else if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = (int *)(v5 + (32 * *(_DWORD *)(v5 + 8)) + (24 * *(_DWORD *)(v5 + 12)) + 108);
      do
      {
        v25 = *v24;
        v24 += 6;
        if (v25)
          ++v23;
        --v22;
      }
      while (v22);
      LODWORD(v22) = 4 * v23;
    }
    *(_DWORD *)(v5 + 88) = v22;
    *(_DWORD *)(v5 + 4) = v4;
    v26 = TMMapArchive::calculate_checksum((int32x4_t *)v5);
    *(_DWORD *)(v5 + 48) = v26;
    v27 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)(v5 + 84) = v27
                         - (*(_DWORD *)(v5 + 88)
                          + *(_DWORD *)(v5 + 80))
                         - (32 * *(_DWORD *)(v5 + 8)
                          + 24 * *(_DWORD *)(v5 + 12)
                          + 24 * *(_DWORD *)(v5 + 16)
                          + 4 * *(_DWORD *)(v5 + 16)
                          + 36 * *(_DWORD *)(v5 + 20)
                          + 20 * *(_DWORD *)(v5 + 24))
                         - 96;
    address[0] = 0;
    if (v2
      && (!v27
       || v26 != TMMapArchive::calculate_checksum((int32x4_t *)v5)
       || !TMMapArchive::are_offsets_in_bounds((TMMapArchive *)v5)))
    {
      v5 = 0;
    }
  }
  MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(address);
  return v5;
}

void sub_1B4112C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr((mach_vm_address_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CSMMapArchiveCompatibilityUtilities::required_size_for_modern_archive_from_v5(uint64_t this, TMMapArchive *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (this)
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 4);
    v4 = *(_QWORD *)(this + 68);
    if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v4) & 1) == 0)
      v3 += 8 * *(_DWORD *)(v2 + 12);
    return (v3 + 8);
  }
  return this;
}

int32x4_t *CSCppConvertLegacyPreVersion5ArchiveToModernCopy(_OWORD *a1)
{
  int32x4_t *result;
  TMMapArchive *v2;
  TMMapArchive *v3;
  __int32 v4;
  __int32 v5;
  int v6;

  result = (int32x4_t *)_CSCppConvertLegacyPreVersion6ArchiveToModernCopyWithValidation(a1, 0);
  if (result)
  {
    v3 = (TMMapArchive *)result;
    v4 = result[2].i32[3];
    if (v4)
      result[2].i32[3] = v4 + 8;
    v5 = result[2].i32[2];
    if (v5)
      result[2].i32[2] = v5 + 8;
    CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(result, v2);
    if (*((_DWORD *)v3 + 1)
      && (v6 = *((_DWORD *)v3 + 12), v6 == TMMapArchive::calculate_checksum((int32x4_t *)v3)))
    {
      if (TMMapArchive::are_offsets_in_bounds(v3))
        return (int32x4_t *)v3;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

mach_vm_address_t CSCppConvertLegacyPreVersion6ArchiveToModernCopy(_OWORD *a1)
{
  return _CSCppConvertLegacyPreVersion6ArchiveToModernCopyWithValidation(a1, (TMMapArchive *)1);
}

mach_vm_address_t CSCppConvertLegacyPreVersion7ArchiveToModernCopy(_OWORD *a1)
{
  return _CSCppConvertLegacyPreVersion7ArchiveToModernCopyWithValidation(a1, 1);
}

mach_vm_address_t CSCppConvertModernArchiveToLegacyPreVersion6Copy(uint64_t a1, TMMapArchive *a2)
{
  mach_vm_address_t v3;
  int v4;
  const void *v5;
  size_t v6;
  void *v7;
  mach_vm_address_t v8;
  size_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int v12;
  int64x2_t *v13;
  uint64_t v15;
  mach_vm_address_t address;
  mach_vm_size_t v17;

  if (!a1)
    return 0;
  address = 0;
  v17 = LegacyMMapArchiveVersion5::required_bytes_from_modern_archive((LegacyMMapArchiveVersion5 *)a1, a2);
  mach_vm_allocate(*MEMORY[0x1E0C83DA0], &address, v17, 3);
  v3 = address;
  if (address)
  {
    LegacyMMapArchiveVersion5::LegacyMMapArchiveVersion5((LegacyMMapArchiveVersion5 *)address, (TMMapArchive *)a1);
    v15 = *(_QWORD *)(a1 + 68);
    if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v15) & 1) != 0)
    {
      v4 = TMMapArchive::strtab_end((TMMapArchive *)a1);
      v5 = (const void *)(a1 + 96);
      v6 = (v4 - (a1 + 96));
      v7 = (void *)(v3 + 88);
    }
    else
    {
      v8 = v3 + 88;
      v9 = (32 * *(_DWORD *)(a1 + 8));
      memcpy((void *)(v3 + 88), (const void *)(a1 + 96), v9);
      v10 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v10)
      {
        v11 = (int32x2_t *)((32 * *(_DWORD *)(v3 + 8)) + v8);
        v12 = *(_DWORD *)(a1 + 12);
        v13 = (int64x2_t *)(v9 + a1 + 96);
        do
        {
          *v11 = vmovn_s64(*v13);
          v11[1].i32[0] = v13[1].i32[0];
          v13 = (int64x2_t *)((char *)v13 + 24);
          v11 += 2;
          --v12;
        }
        while (v12);
      }
      v5 = (const void *)(v9 + a1 + 96 + 24 * v10);
      v7 = (void *)(v9 + v8 + 16 * v10);
      v6 = (*(_DWORD *)(a1 + 4) - (v9 + 96 + 24 * v10));
    }
    memcpy(v7, v5, v6);
    address = 0;
  }
  MachVMAllocatePtr<LegacyMMapArchiveVersion5>::~MachVMAllocatePtr(&address);
  return v3;
}

void sub_1B4112E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MachVMAllocatePtr<LegacyMMapArchiveVersion5>::~MachVMAllocatePtr((mach_vm_address_t *)va);
  _Unwind_Resume(a1);
}

uint64_t LegacyMMapArchiveVersion5::required_bytes_from_modern_archive(LegacyMMapArchiveVersion5 *this, TMMapArchive *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = TMMapArchive::strtab_end(this) - this - 8;
  v5 = *(_QWORD *)((char *)this + 68);
  if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v5) & 1) == 0)
    return (v3 - 8 * *((_DWORD *)this + 3));
  return v3;
}

uint64_t TMMapArchive::strtab_end(TMMapArchive *this)
{
  return (uint64_t)this
       + 32 * *((_DWORD *)this + 2)
       + 24 * *((_DWORD *)this + 3)
       + (24 * *((_DWORD *)this + 4))
       + (unint64_t)(4 * *((_DWORD *)this + 4))
       + (36 * *((_DWORD *)this + 5))
       + (20 * *((_DWORD *)this + 6))
       + *((unsigned int *)this + 22)
       + *((unsigned int *)this + 20)
       + *((unsigned int *)this + 21)
       + 96;
}

int32x4_t *CSCppConvertSymbolOwnerLegacyPreVersion5ArchiveToModernCopy(char a1, uint64_t a2)
{
  _OWORD *mmap_archive_from_symbol_owner;

  mmap_archive_from_symbol_owner = (_OWORD *)_get_mmap_archive_from_symbol_owner(a1, a2);
  return CSCppConvertLegacyPreVersion5ArchiveToModernCopy(mmap_archive_from_symbol_owner);
}

mach_vm_address_t CSCppConvertSymbolOwnerLegacyPreVersion6ArchiveToModernCopy(char a1, uint64_t a2)
{
  _OWORD *mmap_archive_from_symbol_owner;

  mmap_archive_from_symbol_owner = (_OWORD *)_get_mmap_archive_from_symbol_owner(a1, a2);
  return _CSCppConvertLegacyPreVersion6ArchiveToModernCopyWithValidation(mmap_archive_from_symbol_owner, (TMMapArchive *)1);
}

mach_vm_address_t CSCppConvertSymbolOwnerModernArchiveToLegacyPreVersion6Copy(char a1, uint64_t a2)
{
  uint64_t mmap_archive_from_symbol_owner;
  TMMapArchive *v3;

  mmap_archive_from_symbol_owner = _get_mmap_archive_from_symbol_owner(a1, a2);
  return CSCppConvertModernArchiveToLegacyPreVersion6Copy(mmap_archive_from_symbol_owner, v3);
}

uint64_t _get_mmap_archive_from_symbol_owner(char a1, uint64_t a2)
{
  _QWORD *v4;

  if (!CSIsNull(a1, a2)
    && (a1 & 7 | (8 * (a2 & 3))) == 3
    && (v4 = (_QWORD *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL)),
        (*(unsigned int (**)(_QWORD *))(*v4 + 24))(v4) == 4))
  {
    return v4[11];
  }
  else
  {
    return 0;
  }
}

uint64_t TMMapArchive::calculate_checksum(int32x4_t *this)
{
  return vaddvq_s32(vaddq_s32(vaddq_s32(*this, this[1]), this[2]));
}

BOOL TMMapArchive::are_offsets_in_bounds(TMMapArchive *this)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  _BOOL8 result;
  char *v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  char *v22;
  BOOL v24;

  v2 = (char *)this + 96;
  v3 = (char *)this
     + 32 * *((_DWORD *)this + 2)
     + 24 * *((_DWORD *)this + 3)
     + (24 * *((_DWORD *)this + 4))
     + (unint64_t)(4 * *((_DWORD *)this + 4))
     + (36 * *((_DWORD *)this + 5))
     + (20 * *((_DWORD *)this + 6))
     + *((unsigned int *)this + 22)
     + *((unsigned int *)this + 20)
     + 96;
  v4 = TMMapArchive::strtab_end(this);
  v5 = TMMapArchive::dsym_path(this);
  if (v5)
  {
    if (v5 < (unint64_t)v3 || v5 >= v4)
      return 0;
  }
  v7 = TMMapArchive::version(this);
  if (v7)
  {
    if (v7 < (unint64_t)v3 || v7 >= v4)
      return 0;
  }
  v10 = &v2[32 * *((_DWORD *)this + 2) + 24 * *((_DWORD *)this + 3)];
  v11 = *((_DWORD *)this + 4);
  v12 = &v10[24 * v11];
  v13 = &v12[(36 * *((_DWORD *)this + 5)) + (unint64_t)(20 * *((_DWORD *)this + 6))];
  v14 = *((unsigned int *)this + 22);
  v15 = (unsigned int *)&v13[v14];
  if ((_DWORD)v14)
  {
    v16 = (unsigned int *)&v12[(36 * *((_DWORD *)this + 5))
                             + (unint64_t)(20 * *((_DWORD *)this + 6))];
    do
    {
      v17 = (unint64_t)&v13[-*v16];
      if (v17 >= (unint64_t)v12 || v17 < (unint64_t)v10)
        return 0;
      ++v16;
      v13 += 4;
    }
    while (v16 != v15);
  }
  v19 = (4 * v11);
  if (!(_DWORD)v19)
    return 1;
  v20 = (unsigned int *)((char *)v15 + v19);
  v21 = v15 + 1;
  do
  {
    v22 = (char *)v15 - *(v21 - 1);
    result = v22 < v12 && v22 >= v10;
    v24 = !result || v21++ == v20;
    ++v15;
  }
  while (!v24);
  return result;
}

uint64_t TMMapArchive::dsym_path(TMMapArchive *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 10);
  if ((_DWORD)v1)
    return (uint64_t)this
         + v1
         + (32 * *((_DWORD *)this + 2))
         + (24 * *((_DWORD *)this + 3))
         + (24 * *((_DWORD *)this + 4))
         + (4 * *((_DWORD *)this + 4))
         + (36 * *((_DWORD *)this + 5))
         + (20 * *((_DWORD *)this + 6))
         + *((unsigned int *)this + 22)
         + *((unsigned int *)this + 20)
         + 96;
  else
    return 0;
}

uint64_t TMMapArchive::version(TMMapArchive *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 11);
  if ((_DWORD)v1)
    return (uint64_t)this
         + v1
         + (32 * *((_DWORD *)this + 2))
         + (24 * *((_DWORD *)this + 3))
         + (24 * *((_DWORD *)this + 4))
         + (4 * *((_DWORD *)this + 4))
         + (36 * *((_DWORD *)this + 5))
         + (20 * *((_DWORD *)this + 6))
         + *((unsigned int *)this + 22)
         + *((unsigned int *)this + 20)
         + 96;
  else
    return 0;
}

uint64_t CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(int32x4_t *this, TMMapArchive *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int8 *v5;
  __int8 *v6;
  __int8 *v7;
  __int128 v9;
  __int8 *v10;
  __int8 *v11;
  __int8 *v12;
  uint64_t v13;
  __int8 *v14;
  uint64_t v15;
  __int8 *v16;
  __int8 *v17;
  int v18;
  int v19;
  __int8 *v20;
  int v21;

  v2 = this->u32[0];
  v4 = this[2].u32[2];
  v3 = this[2].u32[3];
  v5 = &this[6].i8[32 * this->i32[2]
                 + 24 * this->i32[3]
                 + (24 * this[1].i32[0])
                 + (unint64_t)(4 * this[1].i32[0])
                 + (36 * this[1].i32[1])
                 + (20 * this[1].i32[2])
                 + this[5].u32[2]
                 + this[5].u32[0]];
  if ((_DWORD)v3)
    v6 = &this->i8[v3];
  else
    v6 = 0;
  *(_QWORD *)&v9 = (char *)this
                 + 32 * this->i32[2]
                 + 24 * this->i32[3]
                 + (24 * this[1].i32[0])
                 + (unint64_t)(4 * this[1].i32[0])
                 + (36 * this[1].i32[1])
                 + (20 * this[1].i32[2])
                 + this[5].u32[2]
                 + this[5].u32[0]
                 + 96;
  *((_QWORD *)&v9 + 1) = v6;
  v7 = &this->i8[v4];
  if (!(_DWORD)v4)
    v7 = 0;
  v10 = v5;
  v11 = v7;
  v12 = v5;
  v13 = v2;
  v14 = v5;
  v15 = v2;
  v16 = v5;
  v17 = v5;
  v18 = v2;
  v19 = v2;
  v20 = v5;
  v21 = v2;
  return CSMMapArchiveCompatibilityUtilities::_update_archive<CSMMapArchiveCompatibilityUtilities::ArchiveUpdater<CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(unsigned int *,CSMMapArchiveCompatibilityUtilities::VersionOffsetTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(unsigned int *,CSMMapArchiveCompatibilityUtilities::DsymPathOffsetTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(TMMapRegionImpl<Pointer64> *,CSMMapArchiveCompatibilityUtilities::RegionTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapSymbol *,CSMMapArchiveCompatibilityUtilities::SymbolTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapInlinedSymbol *,CSMMapArchiveCompatibilityUtilities::InlinedFunctionTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapSourceInfo *,CSMMapArchiveCompatibilityUtilities::SourceInfoTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(TMMapArchive *,CSMMapArchiveCompatibilityUtilities::PostProcessingTag)#1}>>(this, &v9);
}

uint64_t CSMMapArchiveCompatibilityUtilities::_update_archive<CSMMapArchiveCompatibilityUtilities::ArchiveUpdater<CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(unsigned int *,CSMMapArchiveCompatibilityUtilities::VersionOffsetTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(unsigned int *,CSMMapArchiveCompatibilityUtilities::DsymPathOffsetTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(TMMapRegionImpl<Pointer64> *,CSMMapArchiveCompatibilityUtilities::RegionTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapSymbol *,CSMMapArchiveCompatibilityUtilities::SymbolTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapInlinedSymbol *,CSMMapArchiveCompatibilityUtilities::InlinedFunctionTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapSourceInfo *,CSMMapArchiveCompatibilityUtilities::SourceInfoTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(TMMapArchive *,CSMMapArchiveCompatibilityUtilities::PostProcessingTag)#1}>>(int32x4_t *a1, __int128 *a2)
{
  uint64_t v4;
  __int32 v5;
  uint64_t v6;
  __int32 v7;
  int32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int32 v27;
  CSCppMMapSourceInfo *v28;
  uint64_t v29;
  CSCppMMapSourceInfo *v30;
  unsigned int v31;
  CSCppMMapSourceInfo *v32;
  uint64_t v33;
  uint64_t result;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[32];
  _OWORD v41[7];

  v4 = *((_QWORD *)a2 + 3);
  v5 = v4 - *((_DWORD *)a2 + 4);
  if (!v4)
    v5 = 0;
  a1[2].i32[2] = v5;
  v6 = *((_QWORD *)a2 + 1);
  v7 = v6 - *(_DWORD *)a2;
  if (!v6)
    v7 = 0;
  a1[2].i32[3] = v7;
  v8 = a1 + 6;
  v9 = a1->u32[3];
  v10 = (uint64_t)a1[6].i64 + (32 * a1->i32[2]);
  if ((_DWORD)v9)
  {
    v11 = *((_DWORD *)a2 + 10);
    v12 = 24 * v9;
    v13 = (_DWORD *)(v10 + 16);
    v14 = v10 - *((_QWORD *)a2 + 4);
    do
    {
      if (v11 >= 4)
        v15 = 0;
      else
        v15 = v14;
      *v13 += v15;
      v13 += 6;
      v14 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  v16 = v10 + (24 * v9);
  v17 = a1[1].u32[0];
  if ((_DWORD)v17)
  {
    v18 = *((_DWORD *)a2 + 14);
    v19 = 24 * v17;
    v20 = (int32x2_t *)(v16 + 12);
    v21 = v16 - *((_QWORD *)a2 + 6);
    do
    {
      if (v18 >= 4)
        v22 = 0;
      else
        v22 = v21;
      *v20 = vadd_s32(vdup_n_s32(v22), *v20);
      v20 += 3;
      v21 += 24;
      v19 -= 24;
    }
    while (v19);
  }
  v23 = v16 + (24 * v17);
  v24 = a1[1].u32[1];
  v39 = a2[4];
  *(_OWORD *)v40 = a2[5];
  *(_OWORD *)&v40[12] = *(__int128 *)((char *)a2 + 92);
  v35 = *a2;
  v36 = a2[1];
  v37 = a2[2];
  v38 = a2[3];
  if ((_DWORD)v24)
  {
    v25 = 36 * v24;
    do
    {
      v41[4] = v39;
      v41[5] = *(_OWORD *)v40;
      v41[6] = *(_OWORD *)&v40[16];
      v41[0] = v35;
      v41[1] = v36;
      v41[2] = v37;
      v41[3] = v38;
      CSMMapArchiveCompatibilityUtilities::_attempt_fixup<CSCppMMapInlinedSymbol *,CSMMapArchiveCompatibilityUtilities::ArchiveUpdater<CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(unsigned int *,CSMMapArchiveCompatibilityUtilities::VersionOffsetTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(unsigned int *,CSMMapArchiveCompatibilityUtilities::DsymPathOffsetTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(TMMapRegionImpl<Pointer64> *,CSMMapArchiveCompatibilityUtilities::RegionTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapSymbol *,CSMMapArchiveCompatibilityUtilities::SymbolTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapInlinedSymbol *,CSMMapArchiveCompatibilityUtilities::InlinedFunctionTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapSourceInfo *,CSMMapArchiveCompatibilityUtilities::SourceInfoTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(TMMapArchive *,CSMMapArchiveCompatibilityUtilities::PostProcessingTag)#1}>,CSMMapArchiveCompatibilityUtilities::InlinedFunctionTag>((uint64_t)v41, v23);
      v23 += 36;
      v25 -= 36;
    }
    while (v25);
    v23 = (uint64_t)v8->i64 + 32 * a1->i32[2] + 24 * a1->i32[3] + (24 * a1[1].i32[0]);
    v26 = (36 * a1[1].i32[1]);
  }
  else
  {
    v26 = 0;
  }
  v27 = a1[1].u32[2];
  if (v27)
  {
    v28 = (CSCppMMapSourceInfo *)(v23 + v26);
    v29 = *((_QWORD *)a2 + 12);
    v30 = (CSCppMMapSourceInfo *)((char *)v28 + 20 * v27);
    v31 = *((_DWORD *)a2 + 26);
    v32 = v28;
    do
    {
      if (v31 >= 4)
        v33 = v29;
      else
        v33 = (uint64_t)v28;
      *((_DWORD *)v32 + 2) = CSCppMMapSourceInfo::path(v32, v33) - v29;
      v28 = (CSCppMMapSourceInfo *)((char *)v28 + 20);
      v32 = (CSCppMMapSourceInfo *)((char *)v32 + 20);
    }
    while (v32 != v30);
  }
  result = TMMapArchive::calculate_checksum(a1);
  a1[3].i32[0] = result;
  return result;
}

int32x2_t CSMMapArchiveCompatibilityUtilities::_attempt_fixup<CSCppMMapInlinedSymbol *,CSMMapArchiveCompatibilityUtilities::ArchiveUpdater<CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(unsigned int *,CSMMapArchiveCompatibilityUtilities::VersionOffsetTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(unsigned int *,CSMMapArchiveCompatibilityUtilities::DsymPathOffsetTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(TMMapRegionImpl<Pointer64> *,CSMMapArchiveCompatibilityUtilities::RegionTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapSymbol *,CSMMapArchiveCompatibilityUtilities::SymbolTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapInlinedSymbol *,CSMMapArchiveCompatibilityUtilities::InlinedFunctionTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(CSCppMMapSourceInfo *,CSMMapArchiveCompatibilityUtilities::SourceInfoTag)#1},CSMMapArchiveCompatibilityUtilities::_update_string_offsets_to_strtab_relative(TMMapArchive *)::{lambda(TMMapArchive *,CSMMapArchiveCompatibilityUtilities::PostProcessingTag)#1}>,CSMMapArchiveCompatibilityUtilities::InlinedFunctionTag>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int32x2_t result;

  if (*(_DWORD *)(a1 + 88) > 3u)
    v2 = *(_QWORD *)(a1 + 64);
  else
    LODWORD(v2) = a2;
  if ((*(_DWORD *)(a2 + 8) & 0x80000000) != 0)
    v3 = v2 + *(_DWORD *)(a2 + 24);
  else
    v3 = 0;
  *(_DWORD *)(a2 + 24) = v3 - *(_DWORD *)(a1 + 64);
  if (*(_DWORD *)(a1 + 80) > 3u)
    v4 = *(_QWORD *)(a1 + 72);
  else
    LODWORD(v4) = a2;
  result = vadd_s32(*(int32x2_t *)(a2 + 12), vdup_n_s32(v4 - *(_QWORD *)(a1 + 72)));
  *(int32x2_t *)(a2 + 12) = result;
  return result;
}

void LegacyMMapArchiveVersion5::LegacyMMapArchiveVersion5(LegacyMMapArchiveVersion5 *this, TMMapArchive *a2)
{
  int v4;

  v4 = LegacyMMapArchiveVersion5::required_bytes_from_modern_archive(a2, a2);
  *(_DWORD *)this = 7;
  *((_DWORD *)this + 1) = v4;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 52) = *(_OWORD *)((char *)a2 + 52);
  *(_QWORD *)((char *)this + 68) = *(_QWORD *)((char *)a2 + 68);
  *(_QWORD *)((char *)this + 76) = *(_QWORD *)((char *)a2 + 76);
  *((_DWORD *)this + 21) = 0;
}

mach_vm_address_t *MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(mach_vm_address_t *a1)
{
  if (*a1)
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], *a1, a1[1]);
  return a1;
}

mach_vm_address_t *MachVMAllocatePtr<LegacyMMapArchiveVersion5>::~MachVMAllocatePtr(mach_vm_address_t *a1)
{
  if (*a1)
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], *a1, a1[1]);
  return a1;
}

unsigned __int8 *CSCppStringCache::intern(CSCppStringCache *this, char *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  unsigned __int8 *result;
  unsigned __int8 *v5;
  char *v6;

  v6 = a2;
  v2 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_impl<char const*&>(this, &v6);
  if (!(v3 | (unint64_t)v2))
    return 0;
  v5 = v2;
  result = v2 + 16;
  if ((char)v5[39] < 0)
    return *(unsigned __int8 **)result;
  return result;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_impl<char const*&>(_QWORD *a1, char **a2)
{
  unsigned __int8 *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<char const*&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_1B4113748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<char const*&>@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x28uLL);
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_1B41137EC(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolicator::CSCppSymbolicator(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, const void *a5)
{
  const CSCppSymbolOwnerTimeline **v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  CSCppSymbolOwner *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const CSCppSymbolOwnerTimeline *v24;
  CSCppSymbolOwnerTimeline *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E67765D8;
  *(_OWORD *)(a1 + 12) = 0u;
  v10 = (const CSCppSymbolOwnerTimeline **)(a1 + 24);
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = symbolicator_family_architecture(a2);
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = _Block_copy(a5);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) &= ~1u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 64) = a4 & 0xFFFF3FFF;
  *(_DWORD *)(a1 + 64) |= 0x2000u;
  v13 = *a2;
  v14 = a2[1];
  while (v13 != v14)
  {
    v15 = *(CSCppSymbolOwner **)v13;
    v16 = *(std::__shared_weak_count **)(v13 + 8);
    *(_QWORD *)&v29 = *(_QWORD *)v13;
    *((_QWORD *)&v29 + 1) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    CSCppSymbolOwner::set_symbolicator(v15, (os_unfair_lock_s *)a1);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v13 += 16;
  }
  std::allocate_shared[abi:ne180100]<CSCppSymbolOwnerTimeline,std::allocator<CSCppSymbolOwnerTimeline>,std::vector<std::shared_ptr<CSCppSymbolOwner>>,void>(&v29);
  std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v10, &v29);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *v10;
  v25 = (CSCppSymbolOwnerTimeline *)operator new();
  CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline(v25, v24);
  v26 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v25;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  CSCppSymbolicator::initialize_aot_symbolication_session((CSCppSymbolicator *)a1);
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    *(_QWORD *)&v29 = 2;
    *((_QWORD *)&v29 + 1) = a1;
    v30 = 0;
    v31 = 0;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(v27 + 16))(v27, 16, &v29);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 112))(*(_QWORD *)(a1 + 56), a1);
  return a1;
}

void sub_1B4113A18(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1B5E36940](v3, 0x10A1C40B218BFB8);
  v6 = *v4;
  if (*v4)
  {
    v2[13] = v6;
    operator delete(v6);
  }
  v7 = v2[7];
  v2[7] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v2[5];
  v2[5] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t symbolicator_family_architecture(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  result = *(_QWORD *)(*(_QWORD *)*a1 + 112);
  while (v1 != v2)
  {
    if (*(_QWORD *)(*(_QWORD *)v1 + 112) != result)
      return CSArchitectureGetFamily(result);
    v1 += 16;
  }
  return result;
}

uint64_t std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t *CSCppSymbolicator::initialize_aot_symbolication_session(CSCppSymbolicator *this)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  UUID *v5;
  UUID *v6;
  const CFUUIDBytes *v7;

  result = (uint64_t *)*((_QWORD *)this + 7);
  if (*((_BYTE *)result + 16))
  {
    v3 = (*(uint64_t (**)(uint64_t *))(*result + 64))(result);
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
    v5 = (UUID *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 48))(*((_QWORD *)this + 7));
    v6 = (UUID *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7));
    if (UUID::is_null(v5))
      v5 = 0;
    if (UUID::is_null(v6))
      v7 = 0;
    else
      v7 = (const CFUUIDBytes *)v6;
    return CSInitializeAotSymbolicationSession((uint64_t *)(*((_QWORD *)this + 7) + 8), v3, v4, (const CFUUIDBytes *)v5, v7);
  }
  return result;
}

uint64_t CSCppSymbolicator::send_notification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  result = *(_QWORD *)(a1 + 72);
  if (result)
  {
    if ((_DWORD)a2 == 256)
      v6 = a4;
    else
      v6 = 0;
    if ((_DWORD)a2 == 256)
      v7 = a3;
    else
      v7 = 0;
    if ((_DWORD)a2 == 257)
    {
      v6 = a4;
      v7 = a3;
    }
    v8[0] = 2;
    v8[1] = a1;
    v8[2] = v7;
    v8[3] = v6;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(result + 16))(result, a2, v8, a4);
  }
  return result;
}

void CSCppSymbolicator::~CSCppSymbolicator(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint32_t os_unfair_lock_opaque;
  uint32_t v4;
  uint64_t v5;
  const void *v6;
  std::__shared_weak_count *tv_nsec;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  timespec __rqtp;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&this->_os_unfair_lock_opaque = &off_1E67765D8;
  v2 = this + 3;
  os_unfair_lock_lock(this + 3);
  this[16]._os_unfair_lock_opaque |= 0x4000u;
  os_unfair_lock_unlock(v2);
  (*(void (**)(_QWORD))(**(_QWORD **)&this[14]._os_unfair_lock_opaque + 128))(*(_QWORD *)&this[14]._os_unfair_lock_opaque);
  os_unfair_lock_lock(v2);
  os_unfair_lock_opaque = this[16]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  if ((os_unfair_lock_opaque & 0x8000) != 0)
  {
    do
    {
      __rqtp = (timespec)xmmword_1B41A90D0;
      nanosleep(&__rqtp, 0);
      os_unfair_lock_lock(v2);
      v4 = this[16]._os_unfair_lock_opaque;
      os_unfair_lock_unlock(v2);
    }
    while ((v4 & 0x8000) != 0);
  }
  v5 = *(_QWORD *)&this[18]._os_unfair_lock_opaque;
  if (v5)
  {
    __rqtp.tv_sec = 2;
    __rqtp.tv_nsec = (uint64_t)this;
    v16 = 0;
    v17 = 0;
    (*(void (**)(uint64_t, uint64_t, timespec *))(v5 + 16))(v5, 0x80000000, &__rqtp);
    v6 = *(const void **)&this[18]._os_unfair_lock_opaque;
    if (v6)
    {
      _Block_release(v6);
      *(_QWORD *)&this[18]._os_unfair_lock_opaque = 0;
    }
  }
  os_unfair_lock_lock(v2);
  __rqtp.tv_sec = 0;
  __rqtp.tv_nsec = 0;
  std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)&this[6], (__int128 *)&__rqtp.tv_sec);
  tv_nsec = (std::__shared_weak_count *)__rqtp.tv_nsec;
  if (__rqtp.tv_nsec)
  {
    v8 = (unint64_t *)(__rqtp.tv_nsec + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))tv_nsec->__on_zero_shared)(tv_nsec);
      std::__shared_weak_count::__release_weak(tv_nsec);
    }
  }
  v10 = *(_QWORD *)&this[10]._os_unfair_lock_opaque;
  *(_QWORD *)&this[10]._os_unfair_lock_opaque = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  os_unfair_lock_unlock(v2);
  CSDestroyAotSymbolicationSession(*(_QWORD *)(*(_QWORD *)&this[14]._os_unfair_lock_opaque + 8));
  if ((int)CSGetDebugLoggingLevel() >= 1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__rqtp.tv_sec) = 134217984;
    *(__darwin_time_t *)((char *)&__rqtp.tv_sec + 4) = (__darwin_time_t)this;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SYMBOLICATOR %p DESTRUCTED\n", (uint8_t *)&__rqtp, 0xCu);
  }
  v11 = *(_QWORD *)&this[30]._os_unfair_lock_opaque;
  if (v11)
  {
    release_core_file_mapped_memory_cache(v11);
    *(_QWORD *)&this[30]._os_unfair_lock_opaque = 0;
  }
  v12 = *(void **)&this[24]._os_unfair_lock_opaque;
  if (v12)
  {
    *(_QWORD *)&this[26]._os_unfair_lock_opaque = v12;
    operator delete(v12);
  }
  v13 = *(_QWORD *)&this[14]._os_unfair_lock_opaque;
  *(_QWORD *)&this[14]._os_unfair_lock_opaque = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)&this[10]._os_unfair_lock_opaque;
  *(_QWORD *)&this[10]._os_unfair_lock_opaque = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&this[6]);
}

{
  CSCppSymbolicator::~CSCppSymbolicator(this);
  JUMPOUT(0x1B5E36940);
}

void sub_1B4113EC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolicator::flags(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque;

  v2 = this + 3;
  os_unfair_lock_lock(this + 3);
  os_unfair_lock_opaque = this[16]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return os_unfair_lock_opaque;
}

void CSCppSymbolicator::set_aot_image_infos(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;

  std::vector<CSSymbolicatorAotImageInfo>::__move_assign(a1 + 96, a2);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_OWORD **)(a1 + 104);
  v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - v3) >> 5));
  if (v4 == (_OWORD *)v3)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*,false>(v3, v4, v6, 1);
}

char *CSCppSymbolicator::add_aot_image_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;

  v5 = *(char **)(a1 + 96);
  v4 = *(char **)(a1 + 104);
  v3 = a1 + 96;
  if (v4 != v5)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 5);
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[96 * (v6 >> 1)];
      v9 = *((_QWORD *)v8 + 1);
      v10 = v8 + 96;
      v6 += ~(v6 >> 1);
      if (*(_QWORD *)(a2 + 8) < v9)
        v6 = v7;
      else
        v5 = v10;
    }
    while (v6);
    v4 = v5;
  }
  return std::vector<CSSymbolicatorAotImageInfo>::insert(v3, v4, (char *)a2);
}

char *std::vector<CSSymbolicatorAotImageInfo>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v16 = *(char **)a1;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 5) + 1;
    if (v17 > 0x2AAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v18 = __src - v16;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((__src - v16) >> 5);
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v16) >> 5);
    if (2 * v20 > v17)
      v17 = 2 * v20;
    if (v20 >= 0x155555555555555)
      v21 = 0x2AAAAAAAAAAAAAALL;
    else
      v21 = v17;
    v45 = a1 + 16;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>(a1 + 16, v21);
    else
      v22 = 0;
    v31 = &v22[96 * v19];
    __p = v22;
    v42 = v31;
    v43 = v31;
    v44 = &v22[96 * v21];
    if (v19 == v21)
    {
      if (v18 < 1)
      {
        if (v16 == v4)
          v33 = 1;
        else
          v33 = 2 * v19;
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>(v8, v33);
        v31 = &v34[96 * (v33 >> 2)];
        __p = v34;
        v42 = v31;
        v44 = &v34[96 * v35];
        if (v22)
          operator delete(v22);
      }
      else
      {
        v32 = v19 + 2;
        if (v19 >= -1)
          v32 = v19 + 1;
        v31 -= 96 * (v32 >> 1);
        v42 = v31;
      }
    }
    v36 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v31 = *(_OWORD *)v3;
    *((_OWORD *)v31 + 1) = v36;
    v37 = *((_OWORD *)v3 + 2);
    v38 = *((_OWORD *)v3 + 3);
    v39 = *((_OWORD *)v3 + 5);
    *((_OWORD *)v31 + 4) = *((_OWORD *)v3 + 4);
    *((_OWORD *)v31 + 5) = v39;
    *((_OWORD *)v31 + 2) = v37;
    *((_OWORD *)v31 + 3) = v38;
    v43 = v31 + 96;
    v4 = (char *)std::vector<CSSymbolicatorAotImageInfo>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v43 != v42)
      v43 = &v42[(v43 - v42 - 96) % 0x60uLL];
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v27 = *((_OWORD *)a3 + 1);
    *(_OWORD *)__src = *(_OWORD *)a3;
    *((_OWORD *)__src + 1) = v27;
    v28 = *((_OWORD *)a3 + 2);
    v29 = *((_OWORD *)a3 + 3);
    v30 = *((_OWORD *)a3 + 5);
    *((_OWORD *)__src + 4) = *((_OWORD *)a3 + 4);
    *((_OWORD *)__src + 5) = v30;
    *((_OWORD *)__src + 2) = v28;
    *((_OWORD *)__src + 3) = v29;
    *(_QWORD *)(a1 + 8) = __src + 96;
  }
  else
  {
    v9 = __src + 96;
    v10 = v6 - 96;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *((_OWORD *)v10 + 1);
      *v11 = *(_OWORD *)v10;
      v11[1] = v12;
      v13 = *((_OWORD *)v10 + 2);
      v14 = *((_OWORD *)v10 + 3);
      v15 = *((_OWORD *)v10 + 5);
      v11[4] = *((_OWORD *)v10 + 4);
      v11[5] = v15;
      v11[2] = v13;
      v11[3] = v14;
      v10 += 96;
      v11 += 6;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(__src + 96, __src, v6 - v9);
    if (v4 <= v3)
      v3 += 96 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    v23 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v23;
    v24 = *((_OWORD *)v3 + 2);
    v25 = *((_OWORD *)v3 + 3);
    v26 = *((_OWORD *)v3 + 5);
    *((_OWORD *)v4 + 4) = *((_OWORD *)v3 + 4);
    *((_OWORD *)v4 + 5) = v26;
    *((_OWORD *)v4 + 2) = v24;
    *((_OWORD *)v4 + 3) = v25;
  }
  return v4;
}

void sub_1B4114278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSCppSymbolicator::get_aot_image_info_for_address@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;

  v3 = *(_QWORD *)(this + 96);
  v4 = *(_QWORD *)(this + 104) - v3;
  if (!v4)
    goto LABEL_11;
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 5);
  v6 = *(_QWORD *)(this + 96);
  do
  {
    v7 = v5 >> 1;
    v8 = v6 + 96 * (v5 >> 1);
    v9 = *(_QWORD *)(v8 + 8);
    v10 = v8 + 96;
    v5 += ~(v5 >> 1);
    if (v9 > a2)
      v5 = v7;
    else
      v6 = v10;
  }
  while (v5);
  if (v6 == v3 || (v11 = *(_QWORD *)(v6 - 88), v11 > a2) || *(_QWORD *)(v6 - 80) + v11 <= a2)
  {
LABEL_11:
    v16 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v12 = *(_OWORD *)(v6 - 80);
    *(_OWORD *)a3 = *(_OWORD *)(v6 - 96);
    *(_OWORD *)(a3 + 16) = v12;
    v13 = *(_OWORD *)(v6 - 64);
    v14 = *(_OWORD *)(v6 - 48);
    v15 = *(_OWORD *)(v6 - 16);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v6 - 32);
    *(_OWORD *)(a3 + 80) = v15;
    *(_OWORD *)(a3 + 32) = v13;
    *(_OWORD *)(a3 + 48) = v14;
    v16 = 1;
  }
  *(_BYTE *)(a3 + 96) = v16;
  return this;
}

void CSCppSymbolicator::force_allocate_all_symbol_owner_data(CSCppSymbolicator *this)
{
  CSCppSymbolOwner **v1;
  CSCppSymbolOwner **v2;
  _QWORD v3[3];
  void **v4;

  CSCppSymbolicator::get_symbol_owners(this, v3);
  v1 = (CSCppSymbolOwner **)v3[0];
  v2 = (CSCppSymbolOwner **)v3[1];
  while (v1 != v2)
  {
    CSCppSymbolOwner::data(*v1);
    v1 += 2;
  }
  v4 = (void **)v3;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_1B41143C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolicator::begin_timeline_update(CSCppSymbolicator *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = (os_unfair_lock_s *)((char *)this + 12);
  while (1)
  {
    os_unfair_lock_lock(v2);
    if ((*((_DWORD *)this + 16) & 0x4000) != 0)
    {
      v3 = 0;
      goto LABEL_7;
    }
    if ((*((_DWORD *)this + 16) & 0x8000) == 0)
      break;
    os_unfair_lock_unlock(v2);
    usleep(0x3E8u);
  }
  *((_DWORD *)this + 16) |= 0x8000u;
  v3 = 1;
LABEL_7:
  os_unfair_lock_unlock(v2);
  return v3;
}

void CSCppSymbolicator::update_timeline_from_internal_timeline(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = this + 3;
  os_unfair_lock_lock(this + 3);
  v5[0] = &off_1E6776688;
  v5[1] = this;
  v6 = v5;
  CSCppSymbolicator::read_timeline((uint64_t)this, (uint64_t)v5);
  v3 = v6;
  if (v6 == v5)
  {
    v4 = 4;
    v3 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  os_unfair_lock_unlock(v2);
}

void sub_1B411450C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  os_unfair_lock_unlock(v13);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolicator::apply_mutable_context_to_internal_timeline(CSCppSymbolicator *this, CSCppMutableContext *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CSCppSymbolOwner **v14;
  CSCppSymbolOwner **v15;
  uint64_t v16;
  CSCppSymbolOwner *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CSCppSymbolOwner *v24;
  __int128 v26;
  __int128 v27;

  CSCppMutableContext::make_all_symbol_owners_immutable((uint64_t)a2);
  v4 = (_QWORD *)*((_QWORD *)a2 + 3);
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  while (v4 != v5)
  {
    v6 = *((_QWORD *)this + 5);
    v7 = v4[1];
    *(_QWORD *)&v27 = *v4;
    *((_QWORD *)&v27 + 1) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = CSCppSymbolOwnerTimeline::remove_symbol_owner(v6, &v27);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (!v10)
      return 0;
    v4 += 2;
  }
  v14 = (CSCppSymbolOwner **)*((_QWORD *)a2 + 6);
  v15 = (CSCppSymbolOwner **)*((_QWORD *)a2 + 7);
  if (v14 == v15)
    return 1;
  do
  {
    v16 = *((_QWORD *)this + 5);
    v17 = v14[1];
    *(_QWORD *)&v26 = *v14;
    *((_QWORD *)&v26 + 1) = v17;
    if (v17)
    {
      v18 = (unint64_t *)((char *)v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = CSCppSymbolOwnerTimeline::add_symbol_owner(v16, &v26);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if ((v20 & 1) == 0)
      break;
    v24 = *v14;
    v14 += 2;
    CSCppSymbolOwner::set_symbolicator(v24, (os_unfair_lock_s *)this);
  }
  while (v14 != v15);
  return v20;
}

void sub_1B41146AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolicator::apply_mutable_context_block(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9[3];
  void *v10[9];
  os_unfair_lock_s *v11;
  char v12;
  void **v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (os_unfair_lock_s *)a1;
  v4 = CSCppSymbolicator::begin_timeline_update((CSCppSymbolicator *)a1);
  v12 = v4;
  if (!v4)
    goto LABEL_10;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)a1, v9);
  CSCppMutableContext::CSCppMutableContext((uint64_t)v10, v9);
  v13 = (void **)v9;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v13);
  (*(void (**)(uint64_t, void **))(a2 + 16))(a2, v10);
  if (!CSCppSymbolicator::apply_mutable_context_to_internal_timeline((CSCppSymbolicator *)a1, (CSCppMutableContext *)v10))
  {
    v14[0] = &off_1E6776708;
    v14[1] = a1;
    v15 = v14;
    CSCppSymbolicator::read_timeline(a1, (uint64_t)v14);
    v6 = v15;
    if (v15 == v14)
    {
      v7 = 4;
      v6 = v14;
    }
    else
    {
      if (!v15)
      {
LABEL_9:
        CSCppMutableContext::~CSCppMutableContext(v10);
LABEL_10:
        v5 = 0;
        goto LABEL_11;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_9;
  }
  CSCppMutableContext::mark_all_obsoleted_symbol_owners((CSCppMutableContext *)v10);
  CSCppSymbolicator::update_timeline_from_internal_timeline((os_unfair_lock_s *)a1);
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)a1, v9);
  *(_QWORD *)(a1 + 48) = symbolicator_family_architecture(v9);
  v13 = (void **)v9;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v13);
  CSCppMutableContext::~CSCppMutableContext(v10);
  v5 = 1;
LABEL_11:
  CSCppSymbolOwnerTimelineUpdateMark::~CSCppSymbolOwnerTimelineUpdateMark(&v11);
  return v5;
}

void sub_1B411482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  *(_QWORD *)(v5 - 80) = v4;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 80));
  CSCppMutableContext::~CSCppMutableContext((void **)va);
  CSCppSymbolOwnerTimelineUpdateMark::~CSCppSymbolOwnerTimelineUpdateMark((os_unfair_lock_s **)va1);
  _Unwind_Resume(a1);
}

void CSCppSymbolicator::dyld_activity(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  os_unfair_lock_s *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  const char *CStringPtr;
  const char *v15;
  _QWORD v16[7];
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _BYTE buf[24];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v8 = (os_unfair_lock_s *)(a1 + 12);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 12));
    v9 = *(_DWORD *)(a1 + 64);
    os_unfair_lock_unlock(v8);
    if ((v9 & 0x4000) == 0)
    {
      v18 = 0;
      v19 = &v18;
      v20 = 0x2000000000;
      v21 = a4;
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = ___ZN17CSCppSymbolicator13dyld_activityEONSt3__110shared_ptrI16CSCppSymbolOwnerEEyb_block_invoke;
      v16[3] = &unk_1E67765F0;
      v17 = a4;
      v16[5] = a2;
      v16[6] = a3;
      v16[4] = &v18;
      if (CSCppSymbolicator::apply_mutable_context_block(a1, (uint64_t)v16))
      {
        if (*((_BYTE *)v19 + 24))
        {
          v10 = *(_QWORD *)(a1 + 72);
          if (v10)
          {
            v11 = *a2;
            if (a4)
              v12 = 256;
            else
              v12 = 257;
            *(_QWORD *)buf = 2;
            *(_QWORD *)&buf[8] = a1;
            *(_QWORD *)&buf[16] = 3;
            v23 = v11;
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(v10 + 16))(v10, v12, buf);
          }
        }
      }
      else
      {
        v13 = CSCopyDescription(3, *a2);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          CStringPtr = CFStringGetCStringPtr(v13, 0);
          v15 = "UNLOAD";
          if (a4)
            v15 = "LOAD";
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = CStringPtr;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "FAILED: dyld %s of %s\n", buf, 0x16u);
        }
        CFRelease(v13);
      }
      _Block_object_dispose(&v18, 8);
    }
  }
}

void sub_1B4114A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17CSCppSymbolicator13dyld_activityEONSt3__110shared_ptrI16CSCppSymbolOwnerEEyb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;

  v3 = **(_QWORD **)(a1 + 40);
  *(_DWORD *)(v3 + 108) |= 0x1000000u;
  v4 = 88;
  if (!*(_BYTE *)(a1 + 56))
    v4 = 96;
  *(_QWORD *)(v3 + v4) = *(_QWORD *)(a1 + 48);
  v5 = *(uint64_t **)(v3 + 32);
  if (*(uint64_t **)(v3 + 40) == v5)
    std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
  v7 = *(char **)a2;
  if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8))
  {
    v8 = *v5;
    do
    {
      v9 = *(_QWORD **)v7;
      v10 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
      v30 = *(_QWORD **)v7;
      v31 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = (_QWORD *)v9[4];
      if ((_QWORD *)v9[5] == v13)
        std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
      if (v8 == *v13
        && ((v14 = **(_QWORD ***)(a1 + 40), v14[2] == v9[2]) ? (v15 = v14[3] == v9[3]) : (v15 = 0),
            v15 && (v16 = v9[12], v16 >= 0x7FFFFFFFFFFFFFFFLL)))
      {
        v20 = v9[11];
        if (*(_QWORD *)(a1 + 48) - v20 >= v16 - v20)
        {
          v17 = 0;
        }
        else
        {
          if (*(_BYTE *)(a1 + 56))
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
          }
          else
          {
            v14[11] = v20;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
            CSCppMutableContext::remove_symbol_owner(a2, (__int128 *)v7);
          }
          v17 = 2;
        }
      }
      else
      {
        v17 = 4;
      }
      if (v10)
      {
        v18 = (unint64_t *)&v10->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if ((v17 | 4) != 4)
        break;
      v7 += 16;
    }
    while ((unint64_t)v7 < *(_QWORD *)(a2 + 8));
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v21 = *(uint64_t **)(a1 + 40);
    v23 = *v21;
    v22 = v21[1];
    *(_QWORD *)&v29 = v23;
    *((_QWORD *)&v29 + 1) = v22;
    if (v22)
    {
      v24 = (unint64_t *)(v22 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    CSCppMutableContext::add_symbol_owner_no_copy((char **)a2, &v29);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_1B4114CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::vector<CSSymbolicatorAotImageInfo>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*,false>(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  unint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 *v64;
  __int128 *v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD *v80;
  BOOL v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  int64_t v115;
  uint64_t v116;
  _OWORD *v117;
  uint64_t v118;
  _OWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  unint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a3 + 8);
  if (v3 >= *(_QWORD *)(a1 + 8))
  {
    if (v4 < v3)
    {
      v35 = *(_OWORD *)(a2 + 32);
      v39 = *(_OWORD *)(a2 + 48);
      v43 = *(_OWORD *)(a2 + 64);
      v47 = *(_OWORD *)(a2 + 80);
      v27 = *(__n128 *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      v9 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v9;
      v10 = *(_OWORD *)(a3 + 80);
      v12 = *(_OWORD *)(a3 + 32);
      v11 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v10;
      *(_OWORD *)(a2 + 32) = v12;
      *(_OWORD *)(a2 + 48) = v11;
      *(_OWORD *)(a3 + 64) = v43;
      *(_OWORD *)(a3 + 80) = v47;
      *(_OWORD *)(a3 + 32) = v35;
      *(_OWORD *)(a3 + 48) = v39;
      result = v27;
      *(__n128 *)a3 = v27;
      *(_OWORD *)(a3 + 16) = v31;
      if (*(_QWORD *)(a2 + 8) < *(_QWORD *)(a1 + 8))
      {
        v36 = *(_OWORD *)(a1 + 32);
        v40 = *(_OWORD *)(a1 + 48);
        v44 = *(_OWORD *)(a1 + 64);
        v48 = *(_OWORD *)(a1 + 80);
        v28 = *(__n128 *)a1;
        v32 = *(_OWORD *)(a1 + 16);
        v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        v15 = *(_OWORD *)(a2 + 80);
        v17 = *(_OWORD *)(a2 + 32);
        v16 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v15;
        *(_OWORD *)(a1 + 32) = v17;
        *(_OWORD *)(a1 + 48) = v16;
        *(_OWORD *)(a2 + 64) = v44;
        *(_OWORD *)(a2 + 80) = v48;
        *(_OWORD *)(a2 + 32) = v36;
        *(_OWORD *)(a2 + 48) = v40;
        result = v28;
        *(__n128 *)a2 = v28;
        *(_OWORD *)(a2 + 16) = v32;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v37 = *(_OWORD *)(a1 + 32);
      v41 = *(_OWORD *)(a1 + 48);
      v45 = *(_OWORD *)(a1 + 64);
      v49 = *(_OWORD *)(a1 + 80);
      v29 = *(__n128 *)a1;
      v33 = *(_OWORD *)(a1 + 16);
      v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v18;
      v19 = *(_OWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 32);
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v19;
      *(_OWORD *)(a1 + 32) = v21;
      *(_OWORD *)(a1 + 48) = v20;
      *(_OWORD *)(a2 + 64) = v45;
      *(_OWORD *)(a2 + 80) = v49;
      *(_OWORD *)(a2 + 32) = v37;
      *(_OWORD *)(a2 + 48) = v41;
      result = v29;
      *(__n128 *)a2 = v29;
      *(_OWORD *)(a2 + 16) = v33;
      if (*(_QWORD *)(a3 + 8) >= *(_QWORD *)(a2 + 8))
        return result;
      v34 = *(_OWORD *)(a2 + 32);
      v38 = *(_OWORD *)(a2 + 48);
      v42 = *(_OWORD *)(a2 + 64);
      v46 = *(_OWORD *)(a2 + 80);
      v26 = *(__n128 *)a2;
      v30 = *(_OWORD *)(a2 + 16);
      v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v22;
      v23 = *(_OWORD *)(a3 + 80);
      v25 = *(_OWORD *)(a3 + 32);
      v24 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v23;
      *(_OWORD *)(a2 + 32) = v25;
      *(_OWORD *)(a2 + 48) = v24;
    }
    else
    {
      v34 = *(_OWORD *)(a1 + 32);
      v38 = *(_OWORD *)(a1 + 48);
      v42 = *(_OWORD *)(a1 + 64);
      v46 = *(_OWORD *)(a1 + 80);
      v26 = *(__n128 *)a1;
      v30 = *(_OWORD *)(a1 + 16);
      v5 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v5;
      v6 = *(_OWORD *)(a3 + 80);
      v8 = *(_OWORD *)(a3 + 32);
      v7 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)(a1 + 48) = v7;
    }
    *(_OWORD *)(a3 + 64) = v42;
    *(_OWORD *)(a3 + 80) = v46;
    *(_OWORD *)(a3 + 32) = v34;
    *(_OWORD *)(a3 + 48) = v38;
    result = v26;
    *(__n128 *)a3 = v26;
    *(_OWORD *)(a3 + 16) = v30;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a2 - 88) < *(_QWORD *)(a1 + 8))
      {
        v50 = *(_OWORD *)(a1 + 32);
        v56 = *(_OWORD *)(a1 + 48);
        v62 = *(_OWORD *)(a1 + 64);
        v68 = *(_OWORD *)(a1 + 80);
        v38 = *(_OWORD *)a1;
        v44 = *(_OWORD *)(a1 + 16);
        v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        v7 = *(_OWORD *)(a2 - 16);
        v9 = *(_OWORD *)(a2 - 64);
        v8 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a2 - 64) = v50;
        *(_OWORD *)(a2 - 48) = v56;
        *(_OWORD *)(a2 - 32) = v62;
        *(_OWORD *)(a2 - 16) = v68;
        *(_OWORD *)(a2 - 96) = v38;
        *(_OWORD *)(a2 - 80) = v44;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      v22 = (__int128 *)(a1 + 96);
      v23 = (__int128 *)(a1 + 192);
      v24 = (__int128 *)(a1 + 288);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1, a1 + 96, a1 + 192, a1 + 288);
      if (*(_QWORD *)(a2 - 88) >= *(_QWORD *)(a1 + 296))
        return 1;
      v52 = *(_OWORD *)(a1 + 320);
      v58 = *(_OWORD *)(a1 + 336);
      v64 = *(_OWORD *)(a1 + 352);
      v69 = *(_OWORD *)(a1 + 368);
      v40 = *v24;
      v46 = *(_OWORD *)(a1 + 304);
      v25 = *(_OWORD *)(a2 - 80);
      *v24 = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v25;
      v26 = *(_OWORD *)(a2 - 16);
      v28 = *(_OWORD *)(a2 - 64);
      v27 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 368) = v26;
      *(_OWORD *)(a1 + 320) = v28;
      *(_OWORD *)(a1 + 336) = v27;
      *(_OWORD *)(a2 - 64) = v52;
      *(_OWORD *)(a2 - 48) = v58;
      *(_OWORD *)(a2 - 32) = v64;
      *(_OWORD *)(a2 - 16) = v69;
      *(_OWORD *)(a2 - 96) = v40;
      *(_OWORD *)(a2 - 80) = v46;
      if (*(_QWORD *)(a1 + 296) >= *(_QWORD *)(a1 + 200))
        return 1;
      v53 = *(_OWORD *)(a1 + 224);
      v59 = *(_OWORD *)(a1 + 240);
      v65 = *(_OWORD *)(a1 + 256);
      v70 = *(_OWORD *)(a1 + 272);
      v41 = *v23;
      v47 = *(_OWORD *)(a1 + 208);
      v29 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v29;
      v30 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 272) = v30;
      v31 = *(_OWORD *)(a1 + 304);
      *v23 = *v24;
      *(_OWORD *)(a1 + 208) = v31;
      *v24 = v41;
      *(_OWORD *)(a1 + 304) = v47;
      *(_OWORD *)(a1 + 352) = v65;
      *(_OWORD *)(a1 + 368) = v70;
      *(_OWORD *)(a1 + 320) = v53;
      *(_OWORD *)(a1 + 336) = v59;
      if (*(_QWORD *)(a1 + 200) >= *(_QWORD *)(a1 + 104))
        return 1;
      v54 = *(_OWORD *)(a1 + 128);
      v60 = *(_OWORD *)(a1 + 144);
      v66 = *(_OWORD *)(a1 + 160);
      v71 = *(_OWORD *)(a1 + 176);
      v42 = *v22;
      v48 = *(_OWORD *)(a1 + 112);
      v32 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v32;
      v33 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 176) = v33;
      v34 = *(_OWORD *)(a1 + 208);
      *v22 = *v23;
      *(_OWORD *)(a1 + 112) = v34;
      *v23 = v42;
      *(_OWORD *)(a1 + 208) = v48;
      *(_OWORD *)(a1 + 256) = v66;
      *(_OWORD *)(a1 + 272) = v71;
      *(_OWORD *)(a1 + 224) = v54;
      *(_OWORD *)(a1 + 240) = v60;
      if (*(_QWORD *)(a1 + 104) >= *(_QWORD *)(a1 + 8))
        return 1;
      v55 = *(_OWORD *)(a1 + 32);
      v61 = *(_OWORD *)(a1 + 48);
      v67 = *(_OWORD *)(a1 + 64);
      v72 = *(_OWORD *)(a1 + 80);
      v43 = *(_OWORD *)a1;
      v49 = *(_OWORD *)(a1 + 16);
      v35 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v35;
      v36 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 80) = v36;
      v37 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)a1 = *v22;
      *(_OWORD *)(a1 + 16) = v37;
      *v22 = v43;
      *(_OWORD *)(a1 + 112) = v49;
      *(_OWORD *)(a1 + 160) = v67;
      *(_OWORD *)(a1 + 176) = v72;
      result = 1;
      *(_OWORD *)(a1 + 128) = v55;
      *(_OWORD *)(a1 + 144) = v61;
      return result;
    default:
      v10 = a1 + 192;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1, a1 + 96, a1 + 192);
      v11 = a1 + 288;
      if (a1 + 288 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)(v11 + 8);
    if (v14 < *(_QWORD *)(v10 + 8))
    {
      v15 = *(_QWORD *)v11;
      v51 = *(_OWORD *)(v11 + 48);
      v57 = *(_OWORD *)(v11 + 64);
      v63 = *(_OWORD *)(v11 + 80);
      v16 = v12;
      v39 = *(_OWORD *)(v11 + 16);
      v45 = *(_OWORD *)(v11 + 32);
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_OWORD *)(a1 + v16 + 240);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(a1 + v16 + 224);
        *(_OWORD *)(v17 + 336) = v18;
        v19 = *(_OWORD *)(a1 + v16 + 272);
        *(_OWORD *)(v17 + 352) = *(_OWORD *)(a1 + v16 + 256);
        *(_OWORD *)(v17 + 368) = v19;
        v20 = *(_OWORD *)(a1 + v16 + 208);
        *(_OWORD *)(v17 + 288) = *(_OWORD *)(a1 + v16 + 192);
        *(_OWORD *)(v17 + 304) = v20;
        if (v16 == -192)
          break;
        v16 -= 96;
        if (v14 >= *(_QWORD *)(v17 + 104))
        {
          v21 = a1 + v16 + 288;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *(_QWORD *)v21 = v15;
      *(_QWORD *)(v21 + 8) = v14;
      *(_OWORD *)(v21 + 48) = v51;
      *(_OWORD *)(v21 + 64) = v57;
      *(_OWORD *)(v21 + 80) = v63;
      ++v13;
      *(_OWORD *)(v21 + 16) = v39;
      *(_OWORD *)(v21 + 32) = v45;
      if (v13 == 8)
        return v11 + 96 == a2;
    }
    v10 = v11;
    v12 += 96;
    v11 += 96;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCppSymbolicator::set_aot_image_infos(std::vector<CSSymbolicatorAotImageInfo> &&)::$_0 &,CSSymbolicatorAotImageInfo*>(a1, a2, a3).n128_u64[0];
  if (*(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8))
  {
    v27 = *(_OWORD *)(a3 + 32);
    v30 = *(_OWORD *)(a3 + 48);
    v33 = *(_OWORD *)(a3 + 64);
    v36 = *(_OWORD *)(a3 + 80);
    v21 = *(__n128 *)a3;
    v24 = *(_OWORD *)(a3 + 16);
    v9 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v9;
    v10 = *(_OWORD *)(a4 + 80);
    v12 = *(_OWORD *)(a4 + 32);
    v11 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 80) = v10;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)(a4 + 64) = v33;
    *(_OWORD *)(a4 + 80) = v36;
    *(_OWORD *)(a4 + 32) = v27;
    *(_OWORD *)(a4 + 48) = v30;
    result = v21;
    *(__n128 *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v24;
    if (*(_QWORD *)(a3 + 8) < *(_QWORD *)(a2 + 8))
    {
      v28 = *(_OWORD *)(a2 + 32);
      v31 = *(_OWORD *)(a2 + 48);
      v34 = *(_OWORD *)(a2 + 64);
      v37 = *(_OWORD *)(a2 + 80);
      v22 = *(__n128 *)a2;
      v25 = *(_OWORD *)(a2 + 16);
      v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v13;
      v14 = *(_OWORD *)(a3 + 80);
      v16 = *(_OWORD *)(a3 + 32);
      v15 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v14;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)(a2 + 48) = v15;
      *(_OWORD *)(a3 + 64) = v34;
      *(_OWORD *)(a3 + 80) = v37;
      *(_OWORD *)(a3 + 32) = v28;
      *(_OWORD *)(a3 + 48) = v31;
      result = v22;
      *(__n128 *)a3 = v22;
      *(_OWORD *)(a3 + 16) = v25;
      if (*(_QWORD *)(a2 + 8) < *(_QWORD *)(a1 + 8))
      {
        v29 = *(_OWORD *)(a1 + 32);
        v32 = *(_OWORD *)(a1 + 48);
        v35 = *(_OWORD *)(a1 + 64);
        v38 = *(_OWORD *)(a1 + 80);
        v23 = *(__n128 *)a1;
        v26 = *(_OWORD *)(a1 + 16);
        v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        v18 = *(_OWORD *)(a2 + 80);
        v20 = *(_OWORD *)(a2 + 32);
        v19 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v18;
        *(_OWORD *)(a1 + 32) = v20;
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)(a2 + 64) = v35;
        *(_OWORD *)(a2 + 80) = v38;
        *(_OWORD *)(a2 + 32) = v29;
        *(_OWORD *)(a2 + 48) = v32;
        result = v23;
        *(__n128 *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v26;
      }
    }
  }
  return result;
}

void *std::vector<CSSymbolicatorAotImageInfo>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  void *v18;
  void *v19;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 5);
      *(_OWORD *)(v9 - 96) = *((_OWORD *)v8 - 6);
      *(_OWORD *)(v9 - 80) = v10;
      v11 = *((_OWORD *)v8 - 4);
      v12 = *((_OWORD *)v8 - 3);
      v13 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 96);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v13;
      *(_OWORD *)(v9 - 64) = v11;
      *(_OWORD *)(v9 - 48) = v12;
      v8 -= 96;
      v9 -= 96;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v14 = a1[1];
  v15 = *(_QWORD *)(a2 + 16);
  v16 = v14 - __src;
  if (v14 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v14 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v15 + v16;
  v17 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v17;
  v18 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v18;
  v19 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void CSCppMutableContext::~CSCppMutableContext(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void CSCppSymbolOwnerTimelineUpdateMark::~CSCppSymbolOwnerTimelineUpdateMark(os_unfair_lock_s **this)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;

  if (*((_BYTE *)this + 8))
  {
    v1 = *this;
    v2 = *this + 3;
    os_unfair_lock_lock(v2);
    v1[16]._os_unfair_lock_opaque &= ~0x8000u;
    os_unfair_lock_unlock(v2);
  }
}

void std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwnerTimeline,std::allocator<CSCppSymbolOwnerTimeline>,std::vector<std::shared_ptr<CSCppSymbolOwner>>,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwnerTimeline>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<CSCppSymbolOwner>>,std::allocator<CSCppSymbolOwnerTimeline>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B4116150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwnerTimeline>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<CSCppSymbolOwner>>,std::allocator<CSCppSymbolOwnerTimeline>,0>(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6776638;
  CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline(a1 + 3);
  return a1;
}

void sub_1B4116198(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CSCppSymbolOwnerTimeline>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6776638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CSCppSymbolOwnerTimeline>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6776638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t std::__shared_ptr_emplace<CSCppSymbolOwnerTimeline>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0,std::allocator<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

_QWORD *std::__function::__func<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0,std::allocator<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6776688;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0,std::allocator<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6776688;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0,std::allocator<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::operator()(uint64_t a1, uint64_t a2)
{
  return CSCppSymbolOwnerTimeline::operator=(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
}

uint64_t std::__function::__func<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0,std::allocator<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0,std::allocator<CSCppSymbolicator::update_timeline_from_internal_timeline(void)::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::target_type()
{
}

void std::__function::__func<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0,std::allocator<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

_QWORD *std::__function::__func<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0,std::allocator<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6776708;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0,std::allocator<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6776708;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0,std::allocator<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::operator()(uint64_t a1, const CSCppSymbolOwnerTimeline *a2)
{
  uint64_t v3;
  CSCppSymbolOwnerTimeline *v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (CSCppSymbolOwnerTimeline *)operator new();
  CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline(v4, a2);
  result = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B4116398(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x10A1C40B218BFB8);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0,std::allocator<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0,std::allocator<CSCppSymbolicator::apply_mutable_context_block(void({block_pointer})(void *))::$_0>,void ()(CSCppSymbolOwnerTimeline &)>::target_type()
{
}

uint64_t CSCppSymbolOwner::CSCppSymbolOwner(uint64_t a1, __int128 *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, const char *a8)
{
  __int128 v9;
  uint64_t v10;
  char *v11;

  *(_QWORD *)a1 = &off_1E6776788;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = *a2;
  *(_OWORD *)(a1 + 32) = 0u;
  v10 = a1 + 32;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = a5;
  *(_DWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 108) = a6;
  *(_QWORD *)(a1 + 112) = a7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  v11 = strdup(a8);
  *(_QWORD *)(v10 + 88) = v11;
  *(_QWORD *)(a1 + 136) = utility_basename(v11);
  return a1;
}

void sub_1B4116488(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[7];
  if (v4)
  {
    v1[8] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void CSCppSymbolOwner::CSCppSymbolOwner(CSCppSymbolOwner *this, const CSCppSymbolOwner *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E6776788;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((_QWORD *)this + 4, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 5);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<CSCppSectionRange>::__init_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  *((_QWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)this + 15) = strdup(*((const char **)a2 + 15));
  v4 = (char *)*((_QWORD *)a2 + 16);
  if (v4)
    v4 = strdup(v4);
  *((_QWORD *)this + 16) = v4;
  v5 = strdup(*((const char **)a2 + 17));
  v6 = *((_QWORD *)a2 + 18);
  *((_QWORD *)this + 17) = v5;
  *((_QWORD *)this + 18) = v6;
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 200) = 0;
}

void sub_1B411659C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void CSCppSymbolOwner::~CSCppSymbolOwner(CSCppSymbolOwner *this)
{
  unsigned int *v2;
  CSCppSymbolOwner *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E6776788;
  v2 = (unsigned int *)*((_QWORD *)this + 10);
  if (v2)
  {
    CSCppReferenceCount::release(v2, 1);
    CSCppSymbolOwnerCache::remove_symbol_owner(this, v3);
  }
  free(*((void **)this + 15));
  free(*((void **)this + 16));
  free(*((void **)this + 17));
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
}

{
  CSCppSymbolOwner::~CSCppSymbolOwner(this);
  JUMPOUT(0x1B5E36940);
}

unint64_t CSCppSymbolOwner::generate_next_unique_private_key(CSCppSymbolOwner *this)
{
  unint64_t result;
  BOOL v2;

  do
  {
    result = __ldxr(&CSCppSymbolOwner::generate_next_unique_private_key(void)::key_source);
    if (__stxr(result + 1, &CSCppSymbolOwner::generate_next_unique_private_key(void)::key_source))
      v2 = 1;
    else
      v2 = result == 0;
  }
  while (v2);
  return result;
}

uint64_t CSCppSymbolOwner::set_symbolicator(CSCppSymbolOwner *this, os_unfair_lock_s *a2)
{
  uint64_t result;
  int v5;
  unint64_t v6;
  BOOL v7;

  result = CSCppSymbolicator::flags(a2);
  v5 = *((_DWORD *)this + 27);
  if ((result & 2) != 0)
  {
    *((_DWORD *)this + 27) = v5 | 0x80000000;
    do
    {
      v6 = __ldxr(&CSCppSymbolOwner::generate_next_unique_private_key(void)::key_source);
      if (__stxr(v6 + 1, &CSCppSymbolOwner::generate_next_unique_private_key(void)::key_source))
        v7 = 1;
      else
        v7 = v6 == 0;
    }
    while (v7);
    *((_QWORD *)this + 18) = v6;
  }
  else
  {
    *((_DWORD *)this + 27) = v5 & 0x7FFFFFFF;
  }
  *((_QWORD *)this + 1) = a2;
  return result;
}

char *CSCppSymbolOwner::set_path(void **this, const char *a2)
{
  char *result;

  free(this[15]);
  free(this[17]);
  this[15] = strdup(a2);
  result = utility_basename(a2);
  this[17] = result;
  return result;
}

char *CSCppSymbolOwner::set_path_for_symbolication(void **this, const char *a2)
{
  char *result;

  free(this[16]);
  result = strdup(a2);
  this[16] = result;
  *((_DWORD *)this + 27) = *((_DWORD *)this + 27) & 0x7FBFFFFF | 0x400000;
  this[18] = 0;
  return result;
}

unint64_t CSCppSymbolOwner::_fault_data_purging_empty(CSCppSymbolOwner *this, CSCppSymbolOwner *a2)
{
  uint64_t v3;
  unint64_t *v4;
  BOOL v5;
  unint64_t v6;
  char v8;
  unsigned int *v9;
  unint64_t v10;

  v4 = (unint64_t *)((char *)this + 80);
  v3 = *((_QWORD *)this + 10);
  if (v3)
    v5 = (_DWORD)a2 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v3)
      return *v4;
    v6 = CSCppSymbolOwnerCache::data_for_symbol_owner((os_unfair_lock_s **)this, a2);
    while (!__ldaxr(v4))
    {
      if (!__stlxr(v6, v4))
        return *v4;
    }
  }
  else
  {
    v8 = atomic_load((unsigned int *)(v3 + 12));
    if ((v8 & 0x80) == 0)
      return *v4;
    v6 = CSCppSymbolOwnerCache::data_for_symbol_owner((os_unfair_lock_s **)this, (CSCppSymbolOwner *)1);
    v9 = (unsigned int *)*((_QWORD *)this + 10);
    while (1)
    {
      v10 = __ldaxr(v4);
      if ((unsigned int *)v10 != v9)
        break;
      if (!__stlxr(v6, v4))
      {
        if (v9 != (unsigned int *)v6)
          goto LABEL_18;
        return *v4;
      }
    }
  }
  __clrex();
  v9 = (unsigned int *)v6;
LABEL_18:
  CSCppReferenceCount::release(v9, 1);
  return *v4;
}

unint64_t CSCppSymbolOwner::data_claim_empty(CSCppSymbolOwner *this)
{
  return CSCppSymbolOwner::_fault_data_purging_empty(this, (CSCppSymbolOwner *)1);
}

uint64_t CSCppSymbolOwner::data(CSCppSymbolOwner *this)
{
  return CSCppSymbolOwner::_fault_data_purging_empty(this, 0);
}

uint64_t CSCppSymbolOwner::set_data(CSCppSymbolOwner *this, CSCppSymbolOwnerData *a2)
{
  *((_QWORD *)this + 10) = a2;
  return 1;
}

uint64_t CSCppSymbolOwner::sections_in_address_range(unint64_t this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v16;

  v8 = *(unint64_t **)(this + 56);
  v9 = *(unint64_t **)(this + 64);
  if (v9 == v8)
  {
    v16 = CSCppSymbolOwner::_fault_data_purging_empty((CSCppSymbolOwner *)this, 0);
    return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 80))(v16, this, a2, a3, a4);
  }
  else
  {
    v10 = 0;
    v11 = a3 + a2;
    v12 = this | 4;
    v13 = *(unint64_t **)(this + 56);
    do
    {
      if (a2 < v13[1] + *v13 && *v13 < v11)
      {
        ++v10;
        if (a4)
          (*(void (**)(uint64_t, unint64_t, unint64_t *))(a4 + 16))(a4, v12, v8);
      }
      v8 += 3;
      v13 += 3;
    }
    while (v13 != v9);
    return v10;
  }
}

unint64_t CSCppSymbolOwner::segment_at_address(unint64_t this, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = *(_QWORD **)(this + 32);
  v4 = *(_QWORD **)(this + 40);
  if (v3 == v4)
    return 0;
  v5 = *(_QWORD **)(this + 32);
  while ((unint64_t)(a2 - *v5) >= v5[1])
  {
    v3 += 4;
    v5 += 4;
    if (v5 == v4)
      return 0;
  }
  return this | 7;
}

uint64_t CSCppSymbolOwner::base_address(CSCppSymbolOwner *this)
{
  uint64_t *v1;
  uint64_t *v2;
  char *v3;
  uint64_t result;

  v1 = (uint64_t *)*((_QWORD *)this + 4);
  v2 = (uint64_t *)*((_QWORD *)this + 5);
  if (v1 == v2)
    return 0;
  while (1)
  {
    v3 = (char *)v1[2];
    if (v3 == "__TEXT" || v3 == "__TEXT SEGMENT")
      break;
    v1 += 4;
    if (v1 == v2)
      return 0;
  }
  result = *v1;
  if (*v1 == -1)
    return 0;
  return result;
}

BOOL check_if_segments_match(const CSCppSymbolOwner *a1, const CSCppSymbolOwner *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v3 = (uint64_t *)*((_QWORD *)a1 + 4);
  v4 = (uint64_t *)*((_QWORD *)a1 + 5);
  v5 = (uint64_t *)*((_QWORD *)a2 + 4);
  if (v3 != v4)
  {
    while (1)
    {
      v6 = *v3;
      v7 = v3[1];
      v8 = *v5;
      v9 = v5[1];
      v10 = !strcmp((const char *)v3[2], (const char *)v5[2]) && v6 == v8;
      if (!v10 || v7 != v9)
        break;
      v3 += 4;
      v5 += 4;
      if (v3 == v4)
        return v5 == *((uint64_t **)a2 + 5);
    }
  }
  return v3 == v4 && v5 == *((uint64_t **)a2 + 5);
}

uint64_t CSCppSymbolOwner::load_unload_timestamp_range(CSCppSymbolOwner *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t CSCppSymbolOwner::copy_data_from_symbol_owner(uint64_t this, CSCppSymbolOwner *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!*(_QWORD *)(this + 80))
  {
    v2 = *((_QWORD *)a2 + 10);
    if (v2)
    {
      v3 = this;
      this = CSCppReferenceCount::retain(*((_QWORD *)a2 + 10));
      *(_QWORD *)(v3 + 80) = v2;
    }
  }
  return this;
}

_QWORD *std::vector<CSCppSectionRange>::__init_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4116AF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t remove_locked(_QWORD *a1, uint64_t *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7[3];

  v4 = (unsigned int *)a2[28];
  _memory_used -= (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 32))(v4);
  v5 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,TRawSymbol<Pointer32>>>>::remove(a1, a2, (uint64_t)v7);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v7, 0);
  CSCppReferenceCount::release(v4, 1);
  return v5;
}

TMMapSymbolOwnerData *CSCppSymbolOwnerCache::create_mmap_symbol_owner_data_arch_specific(CSCppSymbolOwnerCache *this, CSCppSymbolOwner *a2, TMMapArchive *a3)
{
  TMMapSymbolOwnerData *v5;

  v5 = (TMMapSymbolOwnerData *)operator new();
  TMMapSymbolOwnerData::TMMapSymbolOwnerData(v5, this, a2);
  return v5;
}

void sub_1B4116BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x10A1C40F2B1C752);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerCache::create_symbol_owner_data_with_symbol_generator<BOOL({block_pointer})(unsigned long,CSUserSuppliedSymbolData *)>(CSCppSymbolOwner *a1, __int128 *a2, int a3, uint64_t a4)
{
  CSCppSymbolOwnerData *v8;
  void *v9;
  unsigned int *v10;
  _QWORD *exception;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[4];
  __int128 v17;
  CSCppSymbolOwnerData *v18;
  _BYTE v19[256];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *((_QWORD *)a1 + 14);
  if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v22) & 1) != 0)
  {
    if (!CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v22))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Attempt to use ISA64Big when it is not defined", 46);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19, &v17);
      Exception::Exception(v16, &v17);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v16);
    }
    v14 = *a2;
    v15 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    _create_traw_symbol_owner_data_with_symbol_generator<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, (char **)&v14, a3, a4, (uint64_t *)&v18);
    v8 = v18;
    v18 = 0;
    v9 = (void *)v14;
    if ((_QWORD)v14)
    {
      *((_QWORD *)&v14 + 1) = v14;
LABEL_8:
      operator delete(v9);
    }
  }
  else
  {
    if (!CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v22))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Attempt to use ISA32Big when it is not defined", 46);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19, &v17);
      Exception::Exception(v16, &v17);
      v13 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v13, (uint64_t)v16);
    }
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    _create_traw_symbol_owner_data_with_symbol_generator<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, (char **)&v20, a3, a4, (uint64_t *)&v18);
    v8 = v18;
    v18 = 0;
    v9 = (void *)v20;
    if ((_QWORD)v20)
    {
      *((_QWORD *)&v20 + 1) = v20;
      goto LABEL_8;
    }
  }
  if (v8)
  {
    v10 = (unsigned int *)*((_QWORD *)a1 + 10);
    if (v10)
    {
      CSCppReferenceCount::release(v10, 1);
      *((_QWORD *)a1 + 10) = 0;
    }
    if ((CSCppSymbolOwner::set_data(a1, v8) & 1) != 0)
      return 1;
    CSCppReferenceCount::release((unsigned int *)v8, 1);
  }
  return 0;
}

void sub_1B4116E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  Exception::~Exception(&a13);
  if (a22 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B4116D30);
  }
  _Unwind_Resume(a1);
}

void _create_traw_symbol_owner_data_with_symbol_generator<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char SymbolOwner;
  uint64_t v19;
  uint64_t v20;
  char *DsymPath;
  char *Version;
  const char *MangledName;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int *v61;
  unsigned int *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  CSCppStringCache *v66;
  uint64_t v67;
  int *v68;
  _DWORD *v69;
  _DWORD *i;
  __int128 *v73;
  __int128 *v74;
  char v75;
  char v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  const void *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unsigned int *j;
  int *v99;
  CSCppSymbolOwner *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  int *v106;
  unsigned int *v107;
  __n128 v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 *v114;
  __int128 *v115;
  __int128 *v116;
  unsigned int v117;
  __int128 *v118;
  __int128 *m;
  unsigned int *v120;
  unint64_t v121;
  uint64_t v122;
  CSCppSegmentRange *v123;
  CSCppSegmentRange *v124;
  unint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  CSCppSegmentRange *v128;
  CSCppSegmentRange *v129;
  unint64_t v130;
  unint64_t v131;
  _DWORD *v132;
  _DWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int *v140;
  _DWORD *v141;
  unsigned int v142;
  unsigned int v143;
  _DWORD *v144;
  _OWORD *v145;
  _DWORD *v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  _DWORD *v152;
  unsigned int v153;
  unsigned int v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char **v158;
  char **v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int *v162;
  __int128 *n;
  __int128 v164;
  uint64_t k;
  uint64_t *v166;
  char **v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  CSCppStringCache *v170;
  CSCppSymbolOwner *v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  unint64_t *v176;
  _BYTE v177[40];
  char v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  char *v182;
  char *v183;
  char *v184;
  int *v185;
  unint64_t v186;
  unint64_t v187;
  void **v188[2];

  v10 = operator new();
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_OWORD *)(v10 + 272) = 0u;
  *(_OWORD *)(v10 + 288) = 0u;
  *(_OWORD *)(v10 + 304) = 0u;
  *(_OWORD *)(v10 + 320) = 0u;
  *(_OWORD *)(v10 + 336) = 0u;
  *(_OWORD *)(v10 + 352) = 0u;
  *(_OWORD *)(v10 + 368) = 0u;
  *(_OWORD *)(v10 + 384) = 0u;
  *(_OWORD *)(v10 + 400) = 0u;
  *(_OWORD *)(v10 + 416) = 0u;
  *(_OWORD *)(v10 + 432) = 0u;
  *(_OWORD *)(v10 + 448) = 0u;
  *(_OWORD *)(v10 + 464) = 0u;
  *(_OWORD *)(v10 + 480) = 0u;
  *(_QWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 850045863;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 68) = 0u;
  *(_QWORD *)v10 = &off_1E6775588;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_QWORD *)(v10 + 120) = 0;
  *(_DWORD *)(v10 + 128) = 1065353216;
  *(_OWORD *)(v10 + 272) = 0u;
  *(_OWORD *)(v10 + 288) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_DWORD *)(v10 + 304) = 1065353216;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_DWORD *)(v10 + 344) = 1065353216;
  *(_OWORD *)(v10 + 408) = 0u;
  *(_OWORD *)(v10 + 424) = 0u;
  *(_BYTE *)(v10 + 400) = 0;
  *(_OWORD *)(v10 + 368) = 0u;
  *(_OWORD *)(v10 + 384) = 0u;
  *(_OWORD *)(v10 + 352) = 0u;
  *(_DWORD *)(v10 + 440) = 1065353216;
  *(_OWORD *)(v10 + 448) = 0u;
  *(_OWORD *)(v10 + 464) = 0u;
  *(_DWORD *)(v10 + 480) = 1065353216;
  *(_QWORD *)(v10 + 496) = 0;
  *(_QWORD *)(v10 + 504) = 0;
  *(_QWORD *)(v10 + 488) = 0;
  v11 = CSCppSymbolOwner::base_address(a1);
  v12 = (char *)*((_QWORD *)a1 + 4);
  v13 = *((_QWORD *)a1 + 5);
  v171 = a1;
  v14 = v12;
  if (v12 != (char *)v13)
  {
    v14 = (char *)*((_QWORD *)a1 + 4);
    while ((unint64_t)(v11 - *(_QWORD *)v14) >= *((_QWORD *)v14 + 1))
    {
      v14 += 32;
      if (v14 == (char *)v13)
        goto LABEL_81;
    }
  }
  if (v14 == (char *)v13)
  {
LABEL_81:
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return;
  }
  if ((CSCppSymbolOwner *)(v10 + 376) != (CSCppSymbolOwner *)((char *)a1 + 32))
    std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((char *)(v10 + 376), v12, v13, (v13 - (uint64_t)v12) >> 5);
  v166 = a5;
  v167 = a2;
  v15 = 0;
  v168 = 0;
  v169 = 0;
  v170 = (CSCppStringCache *)(v10 + 96);
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  while (1)
  {
    v180 = 0u;
    v181 = 0u;
    v179 = 0u;
    if (((*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(a4 + 16))(a4, v15, &v179) & 1) != 0)
      break;
    if (!CSIsNull(v179, SBYTE8(v179)))
    {
      v17 = v179;
      SymbolOwner = CSSymbolGetSymbolOwner(v179, SBYTE8(v179));
      v20 = v19;
      if (CSIsNull(SymbolOwner, v19))
        goto LABEL_80;
      if ((CSSymbolOwnerGetFlags(SymbolOwner, v20) & 0x40000) != 0)
        *((_DWORD *)v171 + 27) |= 0x40000u;
      DsymPath = (char *)CSSymbolOwnerGetDsymPath(SymbolOwner, v20);
      Version = (char *)CSSymbolOwnerGetVersion(SymbolOwner, v20);
      if (!v169 && DsymPath)
        v169 = CSCppStringCache::intern(v170, DsymPath);
      if (!v168 && Version)
        v168 = CSCppStringCache::intern(v170, Version);
      MangledName = (const char *)CSSymbolGetMangledName(v17, *((uint64_t *)&v17 + 1));
      if (!MangledName || !strncmp(MangledName, "0x", 2uLL))
      {
        *(_QWORD *)&v181 = CSSymbolGetRange(v17, *((uint64_t *)&v17 + 1));
        v32 = v183;
        if (v183 >= v184)
        {
          v39 = v182;
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v183 - v182) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v184 - v182) >> 4) > v41)
            v41 = 0x5555555555555556 * ((v184 - v182) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v184 - v182) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v42 = 0x555555555555555;
          else
            v42 = v41;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>((uint64_t)&v184, v42);
            v39 = v182;
            v32 = v183;
          }
          else
          {
            v43 = 0;
          }
          v51 = &v43[48 * v40];
          v52 = v179;
          v53 = v181;
          *((_OWORD *)v51 + 1) = v180;
          *((_OWORD *)v51 + 2) = v53;
          *(_OWORD *)v51 = v52;
          if (v32 == v39)
          {
            v57 = &v43[48 * v40];
          }
          else
          {
            v54 = &v43[48 * v40];
            do
            {
              v55 = *((_OWORD *)v32 - 3);
              v56 = *((_OWORD *)v32 - 1);
              v57 = v54 - 48;
              *((_OWORD *)v54 - 2) = *((_OWORD *)v32 - 2);
              *((_OWORD *)v54 - 1) = v56;
              *((_OWORD *)v54 - 3) = v55;
              v32 -= 48;
              v54 -= 48;
            }
            while (v32 != v39);
          }
          v50 = v51 + 48;
          v182 = v57;
          v183 = v51 + 48;
          v184 = &v43[48 * v42];
          if (v39)
LABEL_71:
            operator delete(v39);
LABEL_72:
          v183 = v50;
        }
        else
        {
          v33 = v181;
          v34 = v179;
          *((_OWORD *)v183 + 1) = v180;
          *((_OWORD *)v32 + 2) = v33;
          *(_OWORD *)v32 = v34;
          v183 = v32 + 48;
        }
      }
      else
      {
        _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>((uint64_t)v171, v10, v17, *((uint64_t *)&v17 + 1), (uint64_t)&v174);
        if (v178)
        {
          v24 = v186;
          if (v186 >= v187)
          {
            v25 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>((uint64_t *)&v185, (uint64_t)&v174);
          }
          else
          {
            *(_QWORD *)(v186 + 88) = 0;
            *(_QWORD *)(v24 + 8) = 0;
            *(_QWORD *)(v24 + 16) = 0;
            *(_QWORD *)v24 = 0;
            *(_OWORD *)(v24 + 40) = 0u;
            *(_OWORD *)(v24 + 56) = 0u;
            *(_OWORD *)(v24 + 65) = 0u;
            TRawSymbol<Pointer32>::operator=(v24, (uint64_t)&v174);
            v25 = v24 + 96;
          }
          v186 = v25;
          if (v178)
          {
            *(_QWORD *)&v172 = v177;
            std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
          }
        }
      }
LABEL_73:
      if (v185 != (int *)v186)
      {
        v58 = v186 - 96;
        v59 = (_QWORD *)*((_QWORD *)v171 + 4);
        v60 = (_QWORD *)*((_QWORD *)v171 + 5);
        if (v59 != v60)
        {
          while ((unint64_t)*(unsigned int *)(v186 - 96) - *v59 >= v59[1])
          {
            v59 += 4;
            if (v59 == v60)
              goto LABEL_79;
          }
        }
        if (v59 == v60)
        {
LABEL_79:
          *(_QWORD *)&v174 = v186 - 40;
          std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
          v186 = v58;
        }
      }
      goto LABEL_80;
    }
    if (a3)
      v16 = CSCppSymbolOwner::base_address(v171);
    else
      v16 = 0;
    v26 = *((_QWORD *)&v181 + 1);
    v27 = v181 + v16;
    v28 = (_QWORD *)*((_QWORD *)v171 + 4);
    v29 = (_QWORD *)*((_QWORD *)v171 + 5);
    if (v28 != v29)
    {
      while ((unint64_t)(v27 - *v28) >= v28[1])
      {
        v28 += 4;
        if (v28 == v29)
          goto LABEL_80;
      }
    }
    if (v28 != v29)
    {
      v30 = v180;
      v31 = v183;
      if (v183 < v184)
      {
        *(_QWORD *)v183 = 0;
        *((_QWORD *)v31 + 1) = 0;
        *((_OWORD *)v31 + 1) = v30;
        *((_QWORD *)v31 + 4) = v27;
        *((_QWORD *)v31 + 5) = v26;
        v183 = v31 + 48;
        goto LABEL_73;
      }
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v183 - v182) >> 4);
      v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v184 - v182) >> 4) > v36)
        v36 = 0x5555555555555556 * ((v184 - v182) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v184 - v182) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v37 = 0x555555555555555;
      else
        v37 = v36;
      if (v37)
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>((uint64_t)&v184, v37);
      else
        v38 = 0;
      v44 = &v38[48 * v35];
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = 0;
      *((_OWORD *)v44 + 1) = v30;
      *((_QWORD *)v44 + 4) = v27;
      *((_QWORD *)v44 + 5) = v26;
      v46 = v182;
      v45 = v183;
      v47 = v44;
      if (v183 != v182)
      {
        do
        {
          v48 = *((_OWORD *)v45 - 3);
          v49 = *((_OWORD *)v45 - 1);
          *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
          *((_OWORD *)v47 - 1) = v49;
          *((_OWORD *)v47 - 3) = v48;
          v47 -= 48;
          v45 -= 48;
        }
        while (v45 != v46);
        v45 = v46;
      }
      v50 = v44 + 48;
      v182 = v47;
      v183 = v44 + 48;
      v184 = &v38[48 * v37];
      if (v45)
      {
        v39 = v45;
        goto LABEL_71;
      }
      goto LABEL_72;
    }
LABEL_80:
    ++v15;
  }
  v61 = v185;
  v62 = (unsigned int *)v186;
  if ((uint64_t)(v186 - (_QWORD)v185) < 1)
  {
    v63 = 0;
    v65 = 0;
  }
  else
  {
    v63 = std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer32>>(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (_QWORD)v185) >> 5));
    v65 = v64;
  }
  v66 = (CSCppStringCache *)(v10 + 96);
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v61, v62, (uint64_t)&v174, 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 5), (uint64_t)v63, v65);
  if (v63)
    operator delete(v63);
  v68 = v185;
  v67 = v186;
  if (v185 != (int *)v186)
  {
    v69 = v185 + 24;
    while (v69 != (_DWORD *)v67)
    {
      if (!are_symbols_aliases<Pointer32>(v68, v68 + 24) && *v68 == v68[24] && v68[1] == v68[25])
      {
        if (v68 != (int *)v67)
        {
          for (i = v68 + 48; i != (_DWORD *)v67; i += 24)
          {
            if (!are_symbols_aliases<Pointer32>(v68, i) && *v68 == *i && v68[1] == i[1])
              continue;
            v68 += 24;
            TRawSymbol<Pointer32>::operator=((uint64_t)v68, (uint64_t)i);
          }
          v67 = (uint64_t)(v68 + 24);
        }
        break;
      }
      v69 = v68 + 48;
      v68 += 24;
    }
  }
  std::vector<TRawSymbol<Pointer32>>::erase((uint64_t)&v185, v67, v186);
  v179 = 0uLL;
  *(_QWORD *)&v180 = 0;
  v73 = (__int128 *)v182;
  v74 = (__int128 *)v183;
  *(_QWORD *)&v174 = &v179;
  if (v182 == v183)
  {
    v78 = 0;
  }
  else
  {
    do
    {
      v75 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 136))(v10, 0, *((_QWORD *)v73 + 4));
      if (CSIsNull(v75, v76))
        std::back_insert_iterator<std::vector<CSUserSuppliedSymbolData>>::operator=[abi:ne180100]((void ***)&v174, v73);
      v73 += 3;
    }
    while (v73 != v74);
    v78 = (uint64_t *)*((_QWORD *)&v179 + 1);
    v77 = (uint64_t *)v179;
    if ((_QWORD)v179 != *((_QWORD *)&v179 + 1))
    {
      do
      {
        v79 = *v77;
        v80 = v77[1];
        v82 = (char *)v77[2];
        v81 = (char *)v77[3];
        v83 = (const void *)v77[4];
        v84 = v77[5];
        if (CSIsNull(*v77, v80))
        {
          v85 = intern_name_or_default(v82, v83, v66);
          v86 = intern_name_or_default(v81, v83, v66);
          if (!strncmp((const char *)v86, "0x", 2uLL))
            v87 = 4326400;
          else
            v87 = 4736000;
          v88 = v186;
          if (v186 >= v187)
          {
            v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (_QWORD)v185) >> 5);
            v93 = v92 + 1;
            if (v92 + 1 > 0x2AAAAAAAAAAAAAALL)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v187 - (_QWORD)v185) >> 5) > v93)
              v93 = 0x5555555555555556 * ((uint64_t)(v187 - (_QWORD)v185) >> 5);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - (_QWORD)v185) >> 5) >= 0x155555555555555)
              v94 = 0x2AAAAAAAAAAAAAALL;
            else
              v94 = v93;
            v176 = &v187;
            v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)&v187, v94);
            v96 = &v95[96 * v92];
            *(_QWORD *)&v174 = v95;
            *((_QWORD *)&v174 + 1) = v96;
            *((_QWORD *)&v175 + 1) = &v95[96 * v97];
            *(_DWORD *)v96 = (_DWORD)v83;
            *((_DWORD *)v96 + 1) = v84;
            *((_QWORD *)v96 + 1) = 0;
            *((_QWORD *)v96 + 2) = 0;
            *((_QWORD *)v96 + 3) = v85;
            *((_QWORD *)v96 + 4) = v86;
            *((_QWORD *)v96 + 11) = 0;
            *(_OWORD *)(v96 + 65) = 0u;
            *(_OWORD *)(v96 + 40) = 0u;
            *(_OWORD *)(v96 + 56) = 0u;
            *((_DWORD *)v96 + 5) = v87;
            *(_QWORD *)&v175 = v96 + 96;
            std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer((uint64_t *)&v185, &v174);
            v89 = v186;
            std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer((void **)&v174);
          }
          else
          {
            *(_DWORD *)v186 = (_DWORD)v83;
            *(_DWORD *)(v88 + 4) = v84;
            *(_QWORD *)(v88 + 8) = 0;
            *(_QWORD *)(v88 + 16) = 0;
            *(_QWORD *)(v88 + 24) = v85;
            *(_QWORD *)(v88 + 32) = v86;
            *(_QWORD *)(v88 + 88) = 0;
            *(_OWORD *)(v88 + 40) = 0u;
            *(_OWORD *)(v88 + 56) = 0u;
            *(_OWORD *)(v88 + 65) = 0u;
            v89 = v88 + 96;
            *(_DWORD *)(v88 + 20) = v87;
          }
          v66 = (CSCppStringCache *)(v10 + 96);
          v186 = v89;
        }
        else
        {
          _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>((uint64_t)v171, v10, v79, v80, (uint64_t)&v174);
          if (v178)
          {
            v90 = v186;
            if (v186 >= v187)
            {
              v91 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>((uint64_t *)&v185, (uint64_t)&v174);
            }
            else
            {
              *(_QWORD *)(v186 + 88) = 0;
              *(_QWORD *)(v90 + 8) = 0;
              *(_QWORD *)(v90 + 16) = 0;
              *(_QWORD *)v90 = 0;
              *(_OWORD *)(v90 + 40) = 0u;
              *(_OWORD *)(v90 + 56) = 0u;
              *(_OWORD *)(v90 + 65) = 0u;
              TRawSymbol<Pointer32>::operator=(v90, (uint64_t)&v174);
              v91 = v90 + 96;
            }
            v186 = v91;
            if (v178)
            {
              *(_QWORD *)&v172 = v177;
              std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
            }
          }
        }
        v77 += 6;
      }
      while (v77 != v78);
      v78 = (uint64_t *)v179;
    }
  }
  j = (unsigned int *)v186;
  if (*((uint64_t **)&v179 + 1) == v78)
  {
    v100 = v171;
  }
  else
  {
    v99 = v185;
    v100 = v171;
    if ((uint64_t)(v186 - (_QWORD)v185) < 1)
    {
      v101 = 0;
      v103 = 0;
    }
    else
    {
      v101 = std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer32>>(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (_QWORD)v185) >> 5));
      v103 = v102;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v99, j, (uint64_t)&v174, 0xAAAAAAAAAAAAAAABLL * (((char *)j - (char *)v99) >> 5), (uint64_t)v101, v103);
    if (v101)
      operator delete(v101);
    j = (unsigned int *)v186;
  }
  v104 = (uint64_t)v185;
  if (v185 == (int *)j)
  {
    v174 = 0u;
    v175 = 0u;
    LODWORD(v176) = 1065353216;
    goto LABEL_159;
  }
  do
  {
    sort_inlined_functions<Pointer32>(v104);
    v104 += 96;
  }
  while ((unsigned int *)v104 != j);
  v105 = v185;
  j = (unsigned int *)v186;
  v174 = 0u;
  v175 = 0u;
  LODWORD(v176) = 1065353216;
  if (v185 != (int *)v186)
  {
LABEL_146:
    v106 = v105 + 24;
    v107 = j;
    if (v105 + 24 != (int *)j)
    {
      while (1)
      {
        if (!are_symbols_aliases<Pointer32>(v105, v106))
        {
          if (*v106 < *v105 || v106[1] + *v106 > (v105[1] + *v105))
          {
LABEL_152:
            j = (unsigned int *)v186;
            v105 = v106;
            v107 = (unsigned int *)v106;
            if (v106 == (int *)v186)
              break;
            goto LABEL_146;
          }
          *(_QWORD *)&v172 = v106;
          std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::__emplace_unique_key_args<TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *>((uint64_t)&v174, &v172, &v172);
        }
        v106 += 24;
        if (v106 == (int *)v186)
          goto LABEL_152;
      }
    }
    for (j = (unsigned int *)v185; ; j += 24)
    {
      if (j == v107)
      {
        j = v107;
        goto LABEL_159;
      }
      *(_QWORD *)&v172 = j;
      if (std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(&v174, &v172))
      {
        break;
      }
    }
    if (j != v107)
    {
      for (k = (uint64_t)(j + 24); (unsigned int *)k != v107; k += 96)
      {
        *(_QWORD *)&v172 = k;
        if (!std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(&v174, &v172))
        {
          TRawSymbol<Pointer32>::operator=((uint64_t)j, k);
          j += 24;
        }
      }
    }
  }
LABEL_159:
  std::vector<TRawSymbol<Pointer32>>::erase((uint64_t)&v185, (uint64_t)j, v186);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v174);
  v109 = *(char **)(v10 + 208);
  v110 = *(char **)(v10 + 216);
  if (v110 - v109 <= 4096)
  {
    v111 = 0;
    v113 = 0;
  }
  else
  {
    v111 = (char *)std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer32>>((v110 - v109) >> 5);
    v113 = v112;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(v109, v110, (uint64_t)&v174, (v110 - v109) >> 5, v111, v113, v108);
  if (v111)
    operator delete(v111);
  v114 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__equal_to &>(*(__int128 **)(v10 + 208), *(__int128 **)(v10 + 216));
  v115 = *(__int128 **)(v10 + 208);
  if (*(__int128 **)(v10 + 216) != v114)
    *(_QWORD *)(v10 + 216) = v114;
  v174 = 0u;
  v175 = 0u;
  LODWORD(v176) = 1065353216;
  if (v115 != v114)
  {
    do
    {
      v116 = v115 + 2;
      if (v115 + 2 == v114)
        break;
      v117 = *((_DWORD *)v115 + 8);
      if (v117 >= *(_DWORD *)v115 && *((_DWORD *)v115 + 9) + v117 <= *((_DWORD *)v115 + 1) + *(_DWORD *)v115)
      {
        v118 = v115 + 4;
        while (1)
        {
          v116 = v118;
          *(_QWORD *)&v172 = v118 - 2;
          std::__hash_table<TRawSourceInfo<Pointer32> *,std::hash<TRawSourceInfo<Pointer32> *>,std::equal_to<TRawSourceInfo<Pointer32> *>,std::allocator<TRawSourceInfo<Pointer32> *>>::__emplace_unique_key_args<TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *>((uint64_t)&v174, &v172, &v172);
          v114 = *(__int128 **)(v10 + 216);
          if (v116 == v114)
            break;
          if (*(_DWORD *)v116 >= *(_DWORD *)v115)
          {
            v118 = v116 + 2;
            if (*((_DWORD *)v116 + 1) + *(_DWORD *)v116 <= (*((_DWORD *)v115 + 1) + *(_DWORD *)v115))
              continue;
          }
          goto LABEL_174;
        }
        v114 = v116;
        break;
      }
LABEL_174:
      v115 = v116;
    }
    while (v116 != v114);
    for (m = *(__int128 **)(v10 + 208); m != v114; m += 2)
    {
      *(_QWORD *)&v172 = m;
      if (std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(&v174, &v172))
      {
        if (m != v114)
        {
          for (n = m + 2; n != v114; n += 2)
          {
            *(_QWORD *)&v172 = n;
            if (!std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(&v174, &v172))
            {
              v164 = *n;
              *(__int128 *)((char *)m + 12) = *(__int128 *)((char *)n + 12);
              *m = v164;
              m += 2;
            }
          }
        }
        goto LABEL_182;
      }
    }
  }
  m = v114;
LABEL_182:
  if (m != *(__int128 **)(v10 + 216))
    *(_QWORD *)(v10 + 216) = m;
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v174);
  v120 = (unsigned int *)v185;
  v121 = v186;
  if (v185 == (int *)v186)
    goto LABEL_210;
  v122 = v186;
  while (1)
  {
    v123 = (CSCppSegmentRange *)*((_QWORD *)v100 + 4);
    v124 = (CSCppSegmentRange *)*((_QWORD *)v100 + 5);
    if (v123 != v124)
    {
      v125 = *v120;
      while (*(_QWORD *)v123 > v125 || v120[1] + v125 > *((_QWORD *)v123 + 1) + *(_QWORD *)v123)
      {
        v123 = (CSCppSegmentRange *)((char *)v123 + 32);
        if (v123 == v124)
          goto LABEL_196;
      }
    }
    if (v123 == v124 || CSCppSegmentRange::is_skippable(v123))
      break;
    v120 += 24;
    if (v120 == (unsigned int *)v121)
      goto LABEL_211;
  }
LABEL_196:
  if (v120 != (unsigned int *)v121)
  {
    v126 = v120 + 24;
    if (v120 + 24 != (unsigned int *)v121)
    {
      v122 = (uint64_t)v120;
      do
      {
        v127 = v120;
        v120 = v126;
        v128 = (CSCppSegmentRange *)*((_QWORD *)v100 + 4);
        v129 = (CSCppSegmentRange *)*((_QWORD *)v100 + 5);
        if (v128 != v129)
        {
          v130 = v127[24];
          v131 = v127[25] + v130;
          while (*(_QWORD *)v128 > v130 || v131 > *((_QWORD *)v128 + 1) + *(_QWORD *)v128)
          {
            v128 = (CSCppSegmentRange *)((char *)v128 + 32);
            if (v128 == v129)
              goto LABEL_208;
          }
        }
        if (v128 != v129 && !CSCppSegmentRange::is_skippable(v128))
        {
          TRawSymbol<Pointer32>::operator=(v122, (uint64_t)v120);
          v122 += 96;
        }
LABEL_208:
        v126 = v120 + 24;
      }
      while (v120 + 24 != (unsigned int *)v121);
      goto LABEL_211;
    }
LABEL_210:
    v122 = (uint64_t)v120;
  }
LABEL_211:
  std::vector<TRawSymbol<Pointer32>>::erase((uint64_t)&v185, v122, v186);
  v133 = *(_DWORD **)(v10 + 208);
  v132 = *(_DWORD **)(v10 + 216);
  v134 = (uint64_t)v185;
  v135 = v186;
  if (v133 != v132)
  {
    if ((int *)v186 != v185)
    {
      while (1)
      {
        v136 = *v133;
        v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (_QWORD)v185) >> 5);
        v138 = (uint64_t)v185;
        do
        {
          v139 = v137 >> 1;
          v140 = (unsigned int *)(v138 + 96 * (v137 >> 1));
          v142 = *v140;
          v141 = v140 + 24;
          v137 += ~(v137 >> 1);
          if (v136 < v142)
            v137 = v139;
          else
            v138 = (uint64_t)v141;
        }
        while (v137);
        if ((int *)v138 == v185)
          break;
        v143 = *(_DWORD *)(v138 - 96);
        if (v136 < v143 || v133[1] + v136 > *(_DWORD *)(v138 - 92) + v143)
          break;
        v133 += 8;
        if (v133 == v132)
          goto LABEL_240;
      }
    }
    if (v133 != v132)
    {
      v144 = v133 + 8;
      if (v133 + 8 != v132)
      {
        v145 = v133;
        do
        {
          v146 = v133;
          v133 = v144;
          if (v135 != v134)
          {
            v147 = *v144;
            v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - v134) >> 5);
            v149 = v134;
            do
            {
              v150 = v148 >> 1;
              v151 = (unsigned int *)(v149 + 96 * (v148 >> 1));
              v153 = *v151;
              v152 = v151 + 24;
              v148 += ~(v148 >> 1);
              if (v147 < v153)
                v148 = v150;
              else
                v149 = (uint64_t)v152;
            }
            while (v148);
            if (v149 != v134)
            {
              v154 = *(_DWORD *)(v149 - 96);
              if (v147 >= v154 && v146[9] + v147 <= *(_DWORD *)(v149 - 92) + v154)
              {
                v155 = *(_OWORD *)v133;
                *(_OWORD *)((char *)v145 + 12) = *(_OWORD *)(v133 + 3);
                *v145 = v155;
                v145 += 2;
              }
            }
          }
          v144 = v133 + 8;
        }
        while (v133 + 8 != v132);
        v132 = *(_DWORD **)(v10 + 216);
        v133 = v145;
      }
      if (v133 != v132)
        *(_QWORD *)(v10 + 216) = v133;
    }
  }
LABEL_240:
  while (v134 != v135)
  {
    TRawSymbolOwnerData<Pointer32>::add_symbol((uint64_t *)v10, v134);
    v134 += 96;
  }
  v156 = *((_QWORD *)v100 + 7);
  v157 = *((_QWORD *)v100 + 8);
  v158 = (char **)((char *)v100 + 56);
  if (v157 == v156)
    v159 = v167;
  else
    v159 = v158;
  if ((char **)(v10 + 160) != v159)
    std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>((char *)(v10 + 160), *v159, (uint64_t)v159[1], 0xAAAAAAAAAAAAAAABLL * ((v159[1] - *v159) >> 3));
  v160 = TRawSymbolOwnerData<Pointer32>::mutable_sorted_symbols(v10);
  v174 = 0uLL;
  *(_QWORD *)&v175 = 0;
  v162 = *(unsigned int **)v160;
  v161 = *(unsigned int **)(v160 + 8);
  if (*(unsigned int **)v160 != v161)
  {
    do
    {
      TRawSymbolOwnerData<Pointer32>::aliases_for_symbol(v10, v162, (uint64_t *)&v172);
      std::vector<TRawSymbol<Pointer32>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>>((uint64_t *)&v174, *((uint64_t *)&v174 + 1), v172, *((uint64_t *)&v172 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v172 + 1) - v172) >> 5));
      v188[0] = (void **)&v172;
      std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v188);
      v162 += 24;
    }
    while (v162 != v161);
    if ((_QWORD)v174 != *((_QWORD *)&v174 + 1))
    {
      v173 = 0;
      v172 = 0uLL;
      std::vector<TRawSymbol<Pointer32>>::reserve((uint64_t *)&v172, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v174 + 1) - v174) >> 5)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(v160 + 8) - *(_QWORD *)v160) >> 5));
      std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>>(*(_DWORD **)v160, *(_DWORD **)(v160 + 8), (_DWORD *)v174, *((_DWORD **)&v174 + 1), (uint64_t *)&v172);
      std::vector<TRawSymbol<Pointer32>>::__vdeallocate((void **)v160);
      *(_OWORD *)v160 = v172;
      *(_QWORD *)(v160 + 16) = v173;
      v172 = 0uLL;
      v173 = 0;
      v188[0] = (void **)&v172;
      std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v188);
    }
  }
  *(_QWORD *)(v10 + 232) = 0;
  *(_QWORD *)(v10 + 240) = 0;
  *(_QWORD *)(v10 + 248) = v169;
  *(_QWORD *)(v10 + 264) = v168;
  *v166 = v10;
  *(_QWORD *)&v172 = &v174;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  if ((_QWORD)v179)
  {
    *((_QWORD *)&v179 + 1) = v179;
    operator delete((void *)v179);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  *(_QWORD *)&v174 = &v185;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
}

void sub_1B4118120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v39;
  void *v40;

  if (v36)
    operator delete(v36);
  v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(_QWORD *)(v37 - 200) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v37 - 152);
  if (v40)
  {
    *(_QWORD *)(v37 - 144) = v40;
    operator delete(v40);
  }
  *(_QWORD *)(v37 - 208) = v37 - 128;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 208));
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

void _create_traw_symbol_owner_data_with_symbol_generator<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char SymbolOwner;
  uint64_t v19;
  uint64_t v20;
  char *DsymPath;
  char *Version;
  const char *MangledName;
  __n128 *v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  __n128 *v58;
  _QWORD *v59;
  _QWORD *v60;
  __n128 *v61;
  __n128 *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  CSCppStringCache *v66;
  __n128 *v67;
  __n128 *v68;
  unint64_t *n128_u64;
  __n128 *i;
  __int128 *v73;
  __int128 *v74;
  char v75;
  char v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  const void *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  int v87;
  __n128 *v88;
  __n128 *v89;
  __n128 *v90;
  __n128 *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  __n128 *j;
  __n128 *v99;
  CSCppSymbolOwner *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 *v105;
  __n128 *v106;
  __n128 *v107;
  __n128 v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 *v114;
  __int128 *v115;
  __int128 *v116;
  unint64_t v117;
  __int128 *v118;
  __int128 *m;
  __n128 *v120;
  __n128 *v121;
  __n128 *v122;
  CSCppSegmentRange *v123;
  CSCppSegmentRange *v124;
  __n128 *v125;
  __n128 *v126;
  CSCppSegmentRange *v127;
  CSCppSegmentRange *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t *v132;
  __n128 *v133;
  __n128 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  __n128 *v148;
  unint64_t v149;
  unint64_t *v150;
  __n128 *v151;
  unint64_t v152;
  unint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char **v158;
  char **v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t *v162;
  __int128 *n;
  __int128 v164;
  __int128 v165;
  uint64_t k;
  uint64_t *v167;
  char **v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  CSCppStringCache *v171;
  CSCppSymbolOwner *v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  unint64_t *v177;
  _BYTE v178[40];
  char v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  char *v183;
  char *v184;
  char *v185;
  __n128 *v186;
  __n128 *v187;
  unint64_t v188;
  void **v189[2];

  v10 = operator new();
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_OWORD *)(v10 + 272) = 0u;
  *(_OWORD *)(v10 + 288) = 0u;
  *(_OWORD *)(v10 + 304) = 0u;
  *(_OWORD *)(v10 + 320) = 0u;
  *(_OWORD *)(v10 + 336) = 0u;
  *(_OWORD *)(v10 + 352) = 0u;
  *(_OWORD *)(v10 + 368) = 0u;
  *(_OWORD *)(v10 + 384) = 0u;
  *(_OWORD *)(v10 + 400) = 0u;
  *(_OWORD *)(v10 + 416) = 0u;
  *(_OWORD *)(v10 + 432) = 0u;
  *(_OWORD *)(v10 + 448) = 0u;
  *(_OWORD *)(v10 + 464) = 0u;
  *(_OWORD *)(v10 + 480) = 0u;
  *(_QWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 850045863;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 68) = 0u;
  *(_QWORD *)v10 = &off_1E6775758;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_QWORD *)(v10 + 120) = 0;
  *(_DWORD *)(v10 + 128) = 1065353216;
  *(_OWORD *)(v10 + 280) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_QWORD *)(v10 + 248) = 0;
  *(_DWORD *)(v10 + 312) = 1065353216;
  *(_OWORD *)(v10 + 320) = 0u;
  *(_OWORD *)(v10 + 336) = 0u;
  *(_DWORD *)(v10 + 352) = 1065353216;
  *(_OWORD *)(v10 + 416) = 0u;
  *(_OWORD *)(v10 + 432) = 0u;
  *(_BYTE *)(v10 + 408) = 0;
  *(_OWORD *)(v10 + 376) = 0u;
  *(_OWORD *)(v10 + 392) = 0u;
  *(_OWORD *)(v10 + 360) = 0u;
  *(_DWORD *)(v10 + 448) = 1065353216;
  *(_OWORD *)(v10 + 456) = 0u;
  *(_OWORD *)(v10 + 472) = 0u;
  *(_DWORD *)(v10 + 488) = 1065353216;
  *(_QWORD *)(v10 + 504) = 0;
  *(_QWORD *)(v10 + 512) = 0;
  *(_QWORD *)(v10 + 496) = 0;
  v11 = CSCppSymbolOwner::base_address(a1);
  v12 = (char *)*((_QWORD *)a1 + 4);
  v13 = *((_QWORD *)a1 + 5);
  v172 = a1;
  v14 = v12;
  if (v12 != (char *)v13)
  {
    v14 = (char *)*((_QWORD *)a1 + 4);
    while ((unint64_t)(v11 - *(_QWORD *)v14) >= *((_QWORD *)v14 + 1))
    {
      v14 += 32;
      if (v14 == (char *)v13)
        goto LABEL_81;
    }
  }
  if (v14 == (char *)v13)
  {
LABEL_81:
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return;
  }
  if ((CSCppSymbolOwner *)(v10 + 384) != (CSCppSymbolOwner *)((char *)a1 + 32))
    std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((char *)(v10 + 384), v12, v13, (v13 - (uint64_t)v12) >> 5);
  v167 = a5;
  v168 = a2;
  v15 = 0;
  v169 = 0;
  v170 = 0;
  v171 = (CSCppStringCache *)(v10 + 96);
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  while (1)
  {
    v181 = 0u;
    v182 = 0u;
    v180 = 0u;
    if (((*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(a4 + 16))(a4, v15, &v180) & 1) != 0)
      break;
    if (!CSIsNull(v180, SBYTE8(v180)))
    {
      v17 = v180;
      SymbolOwner = CSSymbolGetSymbolOwner(v180, SBYTE8(v180));
      v20 = v19;
      if (CSIsNull(SymbolOwner, v19))
        goto LABEL_80;
      if ((CSSymbolOwnerGetFlags(SymbolOwner, v20) & 0x40000) != 0)
        *((_DWORD *)v172 + 27) |= 0x40000u;
      DsymPath = (char *)CSSymbolOwnerGetDsymPath(SymbolOwner, v20);
      Version = (char *)CSSymbolOwnerGetVersion(SymbolOwner, v20);
      if (!v170 && DsymPath)
        v170 = CSCppStringCache::intern(v171, DsymPath);
      if (!v169 && Version)
        v169 = CSCppStringCache::intern(v171, Version);
      MangledName = (const char *)CSSymbolGetMangledName(v17, *((uint64_t *)&v17 + 1));
      if (!MangledName || !strncmp(MangledName, "0x", 2uLL))
      {
        *(_QWORD *)&v182 = CSSymbolGetRange(v17, *((uint64_t *)&v17 + 1));
        v32 = v184;
        if (v184 >= v185)
        {
          v39 = v183;
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v184 - v183) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v185 - v183) >> 4) > v41)
            v41 = 0x5555555555555556 * ((v185 - v183) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v185 - v183) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v42 = 0x555555555555555;
          else
            v42 = v41;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>((uint64_t)&v185, v42);
            v39 = v183;
            v32 = v184;
          }
          else
          {
            v43 = 0;
          }
          v51 = &v43[48 * v40];
          v52 = v180;
          v53 = v182;
          *((_OWORD *)v51 + 1) = v181;
          *((_OWORD *)v51 + 2) = v53;
          *(_OWORD *)v51 = v52;
          if (v32 == v39)
          {
            v57 = &v43[48 * v40];
          }
          else
          {
            v54 = &v43[48 * v40];
            do
            {
              v55 = *((_OWORD *)v32 - 3);
              v56 = *((_OWORD *)v32 - 1);
              v57 = v54 - 48;
              *((_OWORD *)v54 - 2) = *((_OWORD *)v32 - 2);
              *((_OWORD *)v54 - 1) = v56;
              *((_OWORD *)v54 - 3) = v55;
              v32 -= 48;
              v54 -= 48;
            }
            while (v32 != v39);
          }
          v50 = v51 + 48;
          v183 = v57;
          v184 = v51 + 48;
          v185 = &v43[48 * v42];
          if (v39)
LABEL_71:
            operator delete(v39);
LABEL_72:
          v184 = v50;
        }
        else
        {
          v33 = v182;
          v34 = v180;
          *((_OWORD *)v184 + 1) = v181;
          *((_OWORD *)v32 + 2) = v33;
          *(_OWORD *)v32 = v34;
          v184 = v32 + 48;
        }
      }
      else
      {
        _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>((uint64_t)v172, v10, v17, *((uint64_t *)&v17 + 1), (uint64_t)&v175);
        if (v179)
        {
          v24 = v187;
          if ((unint64_t)v187 >= v188)
          {
            v25 = (__n128 *)std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>((uint64_t *)&v186, (uint64_t)&v175);
          }
          else
          {
            v187[6].n128_u64[0] = 0;
            *v24 = 0u;
            v24[1] = 0u;
            v24[3] = 0u;
            v24[4] = 0u;
            *(__n128 *)((char *)&v24[4] + 9) = 0u;
            TRawSymbol<Pointer64>::operator=((uint64_t)v24, (uint64_t)&v175);
            v25 = (__n128 *)((char *)v24 + 104);
          }
          v187 = v25;
          if (v179)
          {
            *(_QWORD *)&v173 = v178;
            std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
          }
        }
      }
LABEL_73:
      if (v186 != v187)
      {
        v58 = (__n128 *)((char *)v187 - 104);
        v59 = (_QWORD *)*((_QWORD *)v172 + 4);
        v60 = (_QWORD *)*((_QWORD *)v172 + 5);
        if (v59 != v60)
        {
          while (v187[-7].n128_u64[1] - *v59 >= v59[1])
          {
            v59 += 4;
            if (v59 == v60)
              goto LABEL_79;
          }
        }
        if (v59 == v60)
        {
LABEL_79:
          *(_QWORD *)&v175 = (char *)v187 - 40;
          std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
          v187 = v58;
        }
      }
      goto LABEL_80;
    }
    if (a3)
      v16 = CSCppSymbolOwner::base_address(v172);
    else
      v16 = 0;
    v26 = *((_QWORD *)&v182 + 1);
    v27 = v182 + v16;
    v28 = (_QWORD *)*((_QWORD *)v172 + 4);
    v29 = (_QWORD *)*((_QWORD *)v172 + 5);
    if (v28 != v29)
    {
      while ((unint64_t)(v27 - *v28) >= v28[1])
      {
        v28 += 4;
        if (v28 == v29)
          goto LABEL_80;
      }
    }
    if (v28 != v29)
    {
      v30 = v181;
      v31 = v184;
      if (v184 < v185)
      {
        *(_QWORD *)v184 = 0;
        *((_QWORD *)v31 + 1) = 0;
        *((_OWORD *)v31 + 1) = v30;
        *((_QWORD *)v31 + 4) = v27;
        *((_QWORD *)v31 + 5) = v26;
        v184 = v31 + 48;
        goto LABEL_73;
      }
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v184 - v183) >> 4);
      v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v185 - v183) >> 4) > v36)
        v36 = 0x5555555555555556 * ((v185 - v183) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v185 - v183) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v37 = 0x555555555555555;
      else
        v37 = v36;
      if (v37)
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>((uint64_t)&v185, v37);
      else
        v38 = 0;
      v44 = &v38[48 * v35];
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = 0;
      *((_OWORD *)v44 + 1) = v30;
      *((_QWORD *)v44 + 4) = v27;
      *((_QWORD *)v44 + 5) = v26;
      v46 = v183;
      v45 = v184;
      v47 = v44;
      if (v184 != v183)
      {
        do
        {
          v48 = *((_OWORD *)v45 - 3);
          v49 = *((_OWORD *)v45 - 1);
          *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
          *((_OWORD *)v47 - 1) = v49;
          *((_OWORD *)v47 - 3) = v48;
          v47 -= 48;
          v45 -= 48;
        }
        while (v45 != v46);
        v45 = v46;
      }
      v50 = v44 + 48;
      v183 = v47;
      v184 = v44 + 48;
      v185 = &v38[48 * v37];
      if (v45)
      {
        v39 = v45;
        goto LABEL_71;
      }
      goto LABEL_72;
    }
LABEL_80:
    ++v15;
  }
  v61 = v186;
  v62 = v187;
  if ((char *)v187 - (char *)v186 < 1)
  {
    v63 = 0;
    v65 = 0;
  }
  else
  {
    v63 = std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer64>>(0x4EC4EC4EC4EC4EC5 * (((char *)v187
                                                                                                - (char *)v186) >> 3));
    v65 = v64;
  }
  v66 = (CSCppStringCache *)(v10 + 96);
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v61, v62, (uint64_t)&v175, 0x4EC4EC4EC4EC4EC5 * (((char *)v62 - (char *)v61) >> 3), (uint64_t)v63, v65);
  if (v63)
    operator delete(v63);
  v68 = v186;
  v67 = v187;
  if (v186 != v187)
  {
    n128_u64 = &v186[6].n128_u64[1];
    while (n128_u64 != (unint64_t *)v67)
    {
      if (!are_symbols_aliases<Pointer64>(v68, &v68[6].n128_u64[1])
        && v68->n128_u64[0] == v68[6].n128_u64[1]
        && v68->n128_u64[1] == v68[7].n128_u64[0])
      {
        if (v68 != v67)
        {
          for (i = v68 + 13; i != v67; i = (__n128 *)((char *)i + 104))
          {
            if (!are_symbols_aliases<Pointer64>(v68, i)
              && v68->n128_u64[0] == i->n128_u64[0]
              && v68->n128_u64[1] == i->n128_u64[1])
            {
              continue;
            }
            v68 = (__n128 *)((char *)v68 + 104);
            TRawSymbol<Pointer64>::operator=((uint64_t)v68, (uint64_t)i);
          }
          v67 = (__n128 *)((char *)v68 + 104);
        }
        break;
      }
      n128_u64 = v68[13].n128_u64;
      v68 = (__n128 *)((char *)v68 + 104);
    }
  }
  std::vector<TRawSymbol<Pointer64>>::erase((uint64_t)&v186, (uint64_t)v67, (uint64_t)v187);
  v180 = 0uLL;
  *(_QWORD *)&v181 = 0;
  v73 = (__int128 *)v183;
  v74 = (__int128 *)v184;
  *(_QWORD *)&v175 = &v180;
  if (v183 == v184)
  {
    v78 = 0;
  }
  else
  {
    do
    {
      v75 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 136))(v10, 0, *((_QWORD *)v73 + 4));
      if (CSIsNull(v75, v76))
        std::back_insert_iterator<std::vector<CSUserSuppliedSymbolData>>::operator=[abi:ne180100]((void ***)&v175, v73);
      v73 += 3;
    }
    while (v73 != v74);
    v78 = (uint64_t *)*((_QWORD *)&v180 + 1);
    v77 = (uint64_t *)v180;
    if ((_QWORD)v180 != *((_QWORD *)&v180 + 1))
    {
      do
      {
        v79 = *v77;
        v80 = v77[1];
        v82 = (char *)v77[2];
        v81 = (char *)v77[3];
        v83 = (const void *)v77[4];
        v84 = v77[5];
        if (CSIsNull(*v77, v80))
        {
          v85 = intern_name_or_default(v82, v83, v66);
          v86 = intern_name_or_default(v81, v83, v66);
          if (!strncmp((const char *)v86, "0x", 2uLL))
            v87 = 4326400;
          else
            v87 = 4736000;
          v88 = v187;
          if ((unint64_t)v187 >= v188)
          {
            v92 = 0x4EC4EC4EC4EC4EC5 * (((char *)v187 - (char *)v186) >> 3);
            v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) > 0x276276276276276)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            if (0x9D89D89D89D89D8ALL * ((uint64_t)(v188 - (_QWORD)v186) >> 3) > v93)
              v93 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v188 - (_QWORD)v186) >> 3);
            if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v188 - (_QWORD)v186) >> 3)) >= 0x13B13B13B13B13BLL)
              v94 = 0x276276276276276;
            else
              v94 = v93;
            v177 = &v188;
            v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>((uint64_t)&v188, v94);
            v96 = &v95[104 * v92];
            *(_QWORD *)&v175 = v95;
            *((_QWORD *)&v175 + 1) = v96;
            *((_QWORD *)&v176 + 1) = &v95[104 * v97];
            *(_QWORD *)v96 = v83;
            *((_QWORD *)v96 + 1) = v84;
            *((_QWORD *)v96 + 2) = 0;
            *((_QWORD *)v96 + 3) = 0;
            *((_QWORD *)v96 + 4) = v85;
            *((_QWORD *)v96 + 5) = v86;
            *((_QWORD *)v96 + 12) = 0;
            *(_OWORD *)(v96 + 73) = 0u;
            *((_OWORD *)v96 + 3) = 0u;
            *((_OWORD *)v96 + 4) = 0u;
            *((_DWORD *)v96 + 7) = v87;
            *(_QWORD *)&v176 = v96 + 104;
            std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer((uint64_t *)&v186, &v175);
            v89 = v187;
            std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer((void **)&v175);
          }
          else
          {
            v187->n128_u64[0] = (unint64_t)v83;
            v88->n128_u64[1] = v84;
            v88[1].n128_u64[0] = 0;
            v88[1].n128_u64[1] = 0;
            v88[2].n128_u64[0] = (unint64_t)v85;
            v88[2].n128_u64[1] = (unint64_t)v86;
            v88[6].n128_u64[0] = 0;
            v88[3] = 0u;
            v88[4] = 0u;
            *(__n128 *)((char *)&v88[4] + 9) = 0u;
            v89 = (__n128 *)((char *)v88 + 104);
            v88[1].n128_u32[3] = v87;
          }
          v66 = (CSCppStringCache *)(v10 + 96);
          v187 = v89;
        }
        else
        {
          _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>((uint64_t)v172, v10, v79, v80, (uint64_t)&v175);
          if (v179)
          {
            v90 = v187;
            if ((unint64_t)v187 >= v188)
            {
              v91 = (__n128 *)std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>((uint64_t *)&v186, (uint64_t)&v175);
            }
            else
            {
              v187[6].n128_u64[0] = 0;
              *v90 = 0u;
              v90[1] = 0u;
              v90[3] = 0u;
              v90[4] = 0u;
              *(__n128 *)((char *)&v90[4] + 9) = 0u;
              TRawSymbol<Pointer64>::operator=((uint64_t)v90, (uint64_t)&v175);
              v91 = (__n128 *)((char *)v90 + 104);
            }
            v187 = v91;
            if (v179)
            {
              *(_QWORD *)&v173 = v178;
              std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
            }
          }
        }
        v77 += 6;
      }
      while (v77 != v78);
      v78 = (uint64_t *)v180;
    }
  }
  j = v187;
  if (*((uint64_t **)&v180 + 1) == v78)
  {
    v100 = v172;
  }
  else
  {
    v99 = v186;
    v100 = v172;
    if ((char *)v187 - (char *)v186 < 1)
    {
      v101 = 0;
      v103 = 0;
    }
    else
    {
      v101 = std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer64>>(0x4EC4EC4EC4EC4EC5 * (((char *)v187 - (char *)v186) >> 3));
      v103 = v102;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v99, j, (uint64_t)&v175, 0x4EC4EC4EC4EC4EC5 * (((char *)j - (char *)v99) >> 3), (uint64_t)v101, v103);
    if (v101)
      operator delete(v101);
    j = v187;
  }
  v104 = (uint64_t)v186;
  if (v186 == j)
  {
    v175 = 0u;
    v176 = 0u;
    LODWORD(v177) = 1065353216;
    goto LABEL_159;
  }
  do
  {
    sort_inlined_functions<Pointer64>(v104);
    v104 += 104;
  }
  while ((__n128 *)v104 != j);
  v105 = v186;
  j = v187;
  v175 = 0u;
  v176 = 0u;
  LODWORD(v177) = 1065353216;
  if (v186 != v187)
  {
LABEL_146:
    v106 = (__n128 *)((char *)v105 + 104);
    v107 = j;
    if (&v105[6].n128_i8[8] != (__int8 *)j)
    {
      while (1)
      {
        if (!are_symbols_aliases<Pointer64>(v105, v106))
        {
          if (v106->n128_u64[0] < v105->n128_u64[0]
            || v106->n128_u64[1] + v106->n128_u64[0] > v105->n128_u64[1] + v105->n128_u64[0])
          {
LABEL_152:
            j = v187;
            v105 = v106;
            v107 = v106;
            if (v106 == v187)
              break;
            goto LABEL_146;
          }
          *(_QWORD *)&v173 = v106;
          std::__hash_table<TRawSymbol<Pointer64> *,std::hash<TRawSymbol<Pointer64> *>,std::equal_to<TRawSymbol<Pointer64> *>,std::allocator<TRawSymbol<Pointer64> *>>::__emplace_unique_key_args<TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *>((uint64_t)&v175, &v173, &v173);
        }
        v106 = (__n128 *)((char *)v106 + 104);
        if (v106 == v187)
          goto LABEL_152;
      }
    }
    for (j = v186; ; j = (__n128 *)((char *)j + 104))
    {
      if (j == v107)
      {
        j = v107;
        goto LABEL_159;
      }
      *(_QWORD *)&v173 = j;
      if (std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(&v175, &v173))
      {
        break;
      }
    }
    if (j != v107)
    {
      for (k = (uint64_t)&j[6].n128_i64[1]; (__n128 *)k != v107; k += 104)
      {
        *(_QWORD *)&v173 = k;
        if (!std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(&v175, &v173))
        {
          TRawSymbol<Pointer64>::operator=((uint64_t)j, k);
          j = (__n128 *)((char *)j + 104);
        }
      }
    }
  }
LABEL_159:
  std::vector<TRawSymbol<Pointer64>>::erase((uint64_t)&v186, (uint64_t)j, (uint64_t)v187);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v175);
  v109 = *(_QWORD *)(v10 + 208);
  v110 = *(__int128 **)(v10 + 216);
  if ((uint64_t)v110 - v109 < 5121)
  {
    v111 = 0;
    v113 = 0;
  }
  else
  {
    v111 = (char *)std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer64>>(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v110 - v109) >> 3));
    v113 = v112;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(v109, v110, (uint64_t)&v175, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v110 - v109) >> 3), v111, v113, v108);
  if (v111)
    operator delete(v111);
  v114 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__equal_to &>(*(__int128 **)(v10 + 208), *(__int128 **)(v10 + 216));
  v115 = *(__int128 **)(v10 + 208);
  if (*(__int128 **)(v10 + 216) != v114)
    *(_QWORD *)(v10 + 216) = v114;
  v175 = 0u;
  v176 = 0u;
  LODWORD(v177) = 1065353216;
  if (v115 != v114)
  {
    do
    {
      v116 = (__int128 *)((char *)v115 + 40);
      if ((__int128 *)((char *)v115 + 40) == v114)
        break;
      v117 = *((_QWORD *)v115 + 5);
      if (v117 >= *(_QWORD *)v115 && *((_QWORD *)v115 + 6) + v117 <= *((_QWORD *)v115 + 1) + *(_QWORD *)v115)
      {
        v118 = v115 + 5;
        while (1)
        {
          v116 = v118;
          *(_QWORD *)&v173 = (char *)v118 - 40;
          std::__hash_table<TRawSourceInfo<Pointer64> *,std::hash<TRawSourceInfo<Pointer64> *>,std::equal_to<TRawSourceInfo<Pointer64> *>,std::allocator<TRawSourceInfo<Pointer64> *>>::__emplace_unique_key_args<TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>((uint64_t)&v175, &v173, &v173);
          v114 = *(__int128 **)(v10 + 216);
          if (v116 == v114)
            break;
          if (*(_QWORD *)v116 >= *(_QWORD *)v115)
          {
            v118 = (__int128 *)((char *)v116 + 40);
            if (*((_QWORD *)v116 + 1) + *(_QWORD *)v116 <= *((_QWORD *)v115 + 1) + *(_QWORD *)v115)
              continue;
          }
          goto LABEL_174;
        }
        v114 = v116;
        break;
      }
LABEL_174:
      v115 = v116;
    }
    while (v116 != v114);
    for (m = *(__int128 **)(v10 + 208); m != v114; m = (__int128 *)((char *)m + 40))
    {
      *(_QWORD *)&v173 = m;
      if (std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(&v175, &v173))
      {
        if (m != v114)
        {
          for (n = (__int128 *)((char *)m + 40); n != v114; n = (__int128 *)((char *)n + 40))
          {
            *(_QWORD *)&v173 = n;
            if (!std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(&v175, &v173))
            {
              v164 = *n;
              v165 = n[1];
              *((_DWORD *)m + 8) = *((_DWORD *)n + 8);
              *m = v164;
              m[1] = v165;
              m = (__int128 *)((char *)m + 40);
            }
          }
        }
        goto LABEL_182;
      }
    }
  }
  m = v114;
LABEL_182:
  if (m != *(__int128 **)(v10 + 216))
    *(_QWORD *)(v10 + 216) = m;
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v175);
  v120 = v186;
  v121 = v187;
  if (v186 == v187)
    goto LABEL_209;
  v122 = v187;
  while (1)
  {
    v123 = (CSCppSegmentRange *)*((_QWORD *)v100 + 4);
    v124 = (CSCppSegmentRange *)*((_QWORD *)v100 + 5);
    if (v123 != v124)
    {
      while (v120->n128_u64[0] < *(_QWORD *)v123
           || v120->n128_u64[1] + v120->n128_u64[0] > *((_QWORD *)v123 + 1) + *(_QWORD *)v123)
      {
        v123 = (CSCppSegmentRange *)((char *)v123 + 32);
        if (v123 == v124)
          goto LABEL_195;
      }
    }
    if (v123 == v124 || CSCppSegmentRange::is_skippable(v123))
      break;
    v120 = (__n128 *)((char *)v120 + 104);
    if (v120 == v121)
      goto LABEL_210;
  }
LABEL_195:
  if (v120 != v121)
  {
    v125 = (__n128 *)((char *)v120 + 104);
    if (&v120[6].n128_i8[8] != (__int8 *)v121)
    {
      v122 = v120;
      do
      {
        v126 = v120;
        v120 = v125;
        v127 = (CSCppSegmentRange *)*((_QWORD *)v100 + 4);
        v128 = (CSCppSegmentRange *)*((_QWORD *)v100 + 5);
        if (v127 != v128)
        {
          v129 = v126[6].n128_u64[1];
          v130 = v126[7].n128_u64[0] + v129;
          while (v129 < *(_QWORD *)v127 || v130 > *((_QWORD *)v127 + 1) + *(_QWORD *)v127)
          {
            v127 = (CSCppSegmentRange *)((char *)v127 + 32);
            if (v127 == v128)
              goto LABEL_207;
          }
        }
        if (v127 != v128 && !CSCppSegmentRange::is_skippable(v127))
        {
          TRawSymbol<Pointer64>::operator=((uint64_t)v122, (uint64_t)v120);
          v122 = (__n128 *)((char *)v122 + 104);
        }
LABEL_207:
        v125 = (__n128 *)((char *)v120 + 104);
      }
      while (&v120[6].n128_i8[8] != (__int8 *)v121);
      goto LABEL_210;
    }
LABEL_209:
    v122 = v120;
  }
LABEL_210:
  std::vector<TRawSymbol<Pointer64>>::erase((uint64_t)&v186, (uint64_t)v122, (uint64_t)v187);
  v132 = *(unint64_t **)(v10 + 208);
  v131 = *(unint64_t **)(v10 + 216);
  v133 = v186;
  v134 = v187;
  if (v132 != v131)
  {
    if (v187 != v186)
    {
      while (1)
      {
        v135 = *v132;
        v136 = 0x4EC4EC4EC4EC4EC5 * (((char *)v187 - (char *)v186) >> 3);
        v137 = (uint64_t)v186;
        do
        {
          v138 = v136 >> 1;
          v139 = (unint64_t *)(v137 + 104 * (v136 >> 1));
          v141 = *v139;
          v140 = v139 + 13;
          v136 += ~(v136 >> 1);
          if (v135 < v141)
            v136 = v138;
          else
            v137 = (uint64_t)v140;
        }
        while (v136);
        if ((__n128 *)v137 == v186)
          break;
        v142 = *(_QWORD *)(v137 - 104);
        if (v135 < v142 || v132[1] + v135 > *(_QWORD *)(v137 - 96) + v142)
          break;
        v132 += 5;
        if (v132 == v131)
          goto LABEL_239;
      }
    }
    if (v132 != v131)
    {
      v143 = v132 + 5;
      if (v132 + 5 != v131)
      {
        v144 = v132;
        do
        {
          v145 = v132;
          v132 = v143;
          if (v134 != v133)
          {
            v146 = *v143;
            v147 = 0x4EC4EC4EC4EC4EC5 * (((char *)v134 - (char *)v133) >> 3);
            v148 = v133;
            do
            {
              v149 = v147 >> 1;
              v150 = &v148->n128_u64[13 * (v147 >> 1)];
              v152 = *v150;
              v151 = (__n128 *)(v150 + 13);
              v147 += ~(v147 >> 1);
              if (v146 < v152)
                v147 = v149;
              else
                v148 = v151;
            }
            while (v147);
            if (v148 != v133)
            {
              v153 = v148[-7].n128_u64[1];
              if (v146 >= v153 && v145[6] + v146 <= v148[-6].n128_u64[0] + v153)
              {
                v154 = *(_OWORD *)v132;
                v155 = *((_OWORD *)v132 + 1);
                *((_DWORD *)v144 + 8) = *((_DWORD *)v132 + 8);
                *(_OWORD *)v144 = v154;
                *((_OWORD *)v144 + 1) = v155;
                v144 += 5;
              }
            }
          }
          v143 = v132 + 5;
        }
        while (v132 + 5 != v131);
        v131 = *(unint64_t **)(v10 + 216);
        v132 = v144;
      }
      if (v132 != v131)
        *(_QWORD *)(v10 + 216) = v132;
    }
  }
LABEL_239:
  while (v133 != v134)
  {
    TRawSymbolOwnerData<Pointer64>::add_symbol((uint64_t *)v10, v133);
    v133 = (__n128 *)((char *)v133 + 104);
  }
  v156 = *((_QWORD *)v100 + 7);
  v157 = *((_QWORD *)v100 + 8);
  v158 = (char **)((char *)v100 + 56);
  if (v157 == v156)
    v159 = v168;
  else
    v159 = v158;
  if ((char **)(v10 + 160) != v159)
    std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>((char *)(v10 + 160), *v159, (uint64_t)v159[1], 0xAAAAAAAAAAAAAAABLL * ((v159[1] - *v159) >> 3));
  v160 = TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols(v10);
  v175 = 0uLL;
  *(_QWORD *)&v176 = 0;
  v162 = *(unint64_t **)v160;
  v161 = *(unint64_t **)(v160 + 8);
  if (*(unint64_t **)v160 != v161)
  {
    do
    {
      TRawSymbolOwnerData<Pointer64>::aliases_for_symbol(v10, v162, (uint64_t *)&v173);
      std::vector<TRawSymbol<Pointer64>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>>((uint64_t *)&v175, *((uint64_t *)&v175 + 1), v173, *((uint64_t *)&v173 + 1), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v173 + 1) - v173) >> 3));
      v189[0] = (void **)&v173;
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v189);
      v162 += 13;
    }
    while (v162 != v161);
    if ((_QWORD)v175 != *((_QWORD *)&v175 + 1))
    {
      v174 = 0;
      v173 = 0uLL;
      std::vector<TRawSymbol<Pointer64>>::reserve((uint64_t *)&v173, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 3)+ 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v160 + 8) - *(_QWORD *)v160) >> 3));
      std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>>(*(_QWORD **)v160, *(_QWORD **)(v160 + 8), (_QWORD *)v175, *((_QWORD **)&v175 + 1), (uint64_t *)&v173);
      std::vector<TRawSymbol<Pointer64>>::__vdeallocate((void **)v160);
      *(_OWORD *)v160 = v173;
      *(_QWORD *)(v160 + 16) = v174;
      v173 = 0uLL;
      v174 = 0;
      v189[0] = (void **)&v173;
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v189);
    }
  }
  *(_QWORD *)(v10 + 232) = 0;
  *(_QWORD *)(v10 + 240) = 0;
  *(_QWORD *)(v10 + 248) = 0;
  *(_QWORD *)(v10 + 256) = v170;
  *(_QWORD *)(v10 + 272) = v169;
  *v167 = v10;
  *(_QWORD *)&v173 = &v175;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
  if ((_QWORD)v180)
  {
    *((_QWORD *)&v180 + 1) = v180;
    operator delete((void *)v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  *(_QWORD *)&v175 = &v186;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
}

void sub_1B4119524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v40;
  void *v41;

  if (v37)
    operator delete(v37);
  v40 = *(void **)(v38 - 208);
  if (v40)
  {
    *(_QWORD *)(v38 - 200) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 152);
  if (v41)
  {
    *(_QWORD *)(v38 - 144) = v41;
    operator delete(v41);
  }
  *(_QWORD *)(v38 - 208) = v38 - 128;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 208));
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  _Unwind_Resume(a1);
}

double create_empty_symbol_owner_data(CSCppSymbolOwner *a1)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_QWORD *)(v1 + 8) = 1;
  *(_QWORD *)(v1 + 16) = 850045863;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 68) = 0u;
  *(_QWORD *)v1 = &off_1E6775588;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 1065353216;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_DWORD *)(v1 + 304) = 1065353216;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_DWORD *)(v1 + 344) = 1065353216;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_BYTE *)(v1 + 400) = 0;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_DWORD *)(v1 + 440) = 1065353216;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_DWORD *)(v1 + 480) = 1065353216;
  *(_QWORD *)(v1 + 496) = 0;
  *(_QWORD *)(v1 + 504) = 0;
  *(_QWORD *)(v1 + 488) = 0;
  atomic_store(0x80u, (unsigned int *)(v1 + 12));
  return result;
}

unsigned int *CSCppSymbolOwnerCache::symbol_owner_data(os_unfair_lock_s **this, CSCppSymbolOwner *a2, int a3, int a4, int a5)
{
  int v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  int *v18;
  int v19;
  os_unfair_lock_s **v21;

  v8 = (int)a2;
  pthread_mutex_lock(&_cache_lock);
  v10 = _data_cache;
  if (!_data_cache)
  {
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_DWORD *)(v10 + 32) = 1065353216;
    _data_cache = v10;
  }
  ++_total_lookups;
  while (1)
  {
    v11 = std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::find<CSCppSymbolOwner>((_QWORD *)v10, (uint64_t)this);
    v12 = (uint64_t)v11;
    if (!v11)
    {
      ++_total_misses;
      if (a3)
      {
        v21 = this;
        v13 = 0;
        std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>(v10, (uint64_t)this, (uint64_t)&std::piecewise_construct, (const CSCppSymbolOwner **)&v21)[28] = 0;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    v13 = (unsigned int *)v11[28];
    if (v13)
      break;
    if (!v8)
      goto LABEL_20;
    ++_total_waits;
    pthread_cond_wait(&_cache_cond, &_cache_lock);
  }
  v14 = atomic_load(v13 + 3);
  v15 = (v14 & 0x80) == 0;
  v16 = a5 ^ 1;
  if (v15)
    v16 = 1;
  if (!a4 && v16)
  {
    do
      v17 = __ldxr((unsigned int *)&_access_count);
    while (__stxr(v17 + 1, (unsigned int *)&_access_count));
    v13[20] = v17;
    v18 = (int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 200))(v13);
    v19 = CSCppSymbolicator::flags(this[1]);
    if (!v18 || do_candidate_sources_satisfy_existing(*v18, v19))
    {
      CSCppReferenceCount::retain((uint64_t)v13);
      goto LABEL_21;
    }
  }
  CSCppSymbolOwnerCache::_kill_existing_symbol_owner_data_locked<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *> *>>>((uint64_t)this, v12);
LABEL_20:
  v13 = 0;
LABEL_21:
  pthread_mutex_unlock(&_cache_lock);
  return v13;
}

void sub_1B41199A8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_cache_lock);
  _Unwind_Resume(a1);
}

_QWORD *CSCppSymbolOwnerCache::_kill_existing_symbol_owner_data_locked<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *> *>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const CSCppSymbolOwner *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  _QWORD *result;
  const CSCppSymbolOwner *v10;

  ++_total_replacements;
  v3 = symbol_owner_data_graveyard();
  v4 = _data_cache;
  if (!_data_cache)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = 1065353216;
    _data_cache = v4;
  }
  v5 = (const CSCppSymbolOwner *)(a2 + 16);
  v6 = (_QWORD *)(a2 + 224);
  v7 = std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>(v3, (uint64_t)v5, v5, v6);
  if (!v8 && v7)
  {
    _memory_used -= (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
    CSCppReferenceCount::release((unsigned int *)*v6, 1);
  }
  v10 = v5;
  result = std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>(v4, (uint64_t)v5, (uint64_t)&std::piecewise_construct, &v10);
  result[28] = 0;
  return result;
}

uint64_t CSCppSymbolOwnerCache::_set_symbol_owner_data_with_footprint(CSCppSymbolOwnerCache *this, CSCppSymbolOwner *a2, CSCppSymbolOwnerData *a3)
{
  uint64_t v6;
  unsigned int v7;
  const CSCppSymbolOwner *v9;

  pthread_mutex_lock(&_cache_lock);
  v6 = _data_cache;
  if (!_data_cache)
  {
    v6 = operator new();
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_DWORD *)(v6 + 32) = 1065353216;
    _data_cache = v6;
  }
  _memory_used += (uint64_t)a3;
  do
    v7 = __ldxr((unsigned int *)&_access_count);
  while (__stxr(v7 + 1, (unsigned int *)&_access_count));
  *((_DWORD *)a2 + 20) = v7;
  CSCppReferenceCount::retain((uint64_t)a2);
  v9 = this;
  std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>(v6, (uint64_t)this, (uint64_t)&std::piecewise_construct, &v9)[28] = a2;
  if (_memory_used > (unint64_t)_max_memory_used)
    _max_memory_used = _memory_used;
  if (*(_QWORD *)(v6 + 24) > (unint64_t)_max_entries)
    _max_entries = *(_QWORD *)(v6 + 24);
  pthread_cond_broadcast(&_cache_cond);
  pthread_mutex_unlock(&_cache_lock);
  return 1;
}

void sub_1B4119C00(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_cache_lock);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerCache::create_symbol_owner_data(CSCppSymbolOwnerCache *this, CSCppSymbolOwner *a2, CSCppDsymData *a3)
{
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  size_t v18;
  void **v19;
  unsigned int *symbol_owner_data2;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  CSCppSymbolOwner *v25;
  uint64_t v26;
  _QWORD v28[7];
  _BYTE v29[16];
  void *__p[2];
  char v31;
  uint64_t v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  char __s[40];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  CFUUIDBytesToString((const CFUUIDBytes *)this + 1, __s, 0x28uLL);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"create_symbol_owner_data -- UUID: ", 34);
  v6 = strlen(__s);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__s, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", Path: ", 8);
  if (this)
    v9 = (const char *)*((_QWORD *)this + 15);
  else
    v9 = "<none>";
  v10 = strlen(v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", DSYM Path: ", 13);
  if (a2)
    v13 = (char *)a2 + 72;
  else
    v13 = "<none>";
  v14 = strlen(v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", is_dyld_shared_cache: ", 24);
  v17 = "No";
  if (this && (*((_DWORD *)this + 27) & 0x200) != 0)
    v17 = "Yes";
  v18 = strlen(v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33, __p);
  if (v31 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v29, (const char *)v19);
  if ((CSGetForceSafeMachVMReads() & 1) != 0
    || (CSCppSymbolicator::flags(*((os_unfair_lock_s **)this + 1)) & 0x1000) != 0)
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 0x40000000;
    v28[2] = ___ZN21CSCppSymbolOwnerCache24create_symbol_owner_dataEP16CSCppSymbolOwnerP13CSCppDsymData_block_invoke;
    v28[3] = &unk_1E67767B0;
    v28[4] = &v36;
    v28[5] = this;
    v28[6] = a2;
    v21 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v28);
    if (v21 != 4096 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 56) + 16))(*(_QWORD *)(*((_QWORD *)this + 1) + 56))
                      + 12);
      v23 = *((_QWORD *)this + 15);
      *(_DWORD *)buf = 67109634;
      v41 = v22;
      v42 = 2080;
      v43 = v23;
      v44 = 1024;
      v45 = v21;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, create of symbol owner data for [%s] failed, err code %d\n", buf, 0x18u);
    }
  }
  else
  {
    symbol_owner_data2 = create_symbol_owner_data2(this, a2);
    v37[3] = (uint64_t)symbol_owner_data2;
  }
  v24 = v37[3];
  if (!v24)
  {
    pthread_mutex_lock(&_cache_lock);
    ++_total_failed_creates;
    v25 = (CSCppSymbolOwner *)pthread_mutex_unlock(&_cache_lock);
    create_empty_symbol_owner_data(v25);
    v24 = v26;
    v37[3] = v26;
  }
  CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v29);
  if (v31 < 0)
    operator delete(__p[0]);
  v32 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v33[-1] + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v33[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v34 < 0)
    operator delete((void *)v33[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E368EC](&v35);
  _Block_object_dispose(&v36, 8);
  return v24;
}

void sub_1B4119F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;

  CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)&a17);
  if (a24 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Block_object_dispose((const void *)(v25 - 160), 8);
  _Unwind_Resume(a1);
}

unsigned int *create_symbol_owner_data2(CSCppSymbolOwner *a1, CSCppDsymData *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD v9[4];
  __int128 v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((int)CSGetDebugLoggingLevel() >= 1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = *((_QWORD *)a1 + 15);
    *(_DWORD *)buf = 134218242;
    v13 = v4;
    v14 = 2080;
    v15 = v5;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SYMBOLICATOR %p CREATING SYMBOL OWNER DATA: %s\n", buf, 0x16u);
  }
  v11 = *((_QWORD *)a1 + 14);
  if ((CSCppArchitecture::is_64_bit((CSCppArchitecture *)&v11) & 1) != 0)
  {
    if (!CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v11))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Attempt to use ISA64Big when it is not defined", 46);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13 + 4, &v10);
      Exception::Exception(v9, &v10);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v9);
    }
    return create_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)a1, a2);
  }
  else
  {
    if (!CSCppArchitecture::is_little_endian((CSCppArchitecture *)&v11))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Attempt to use ISA32Big when it is not defined", 46);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13 + 4, &v10);
      Exception::Exception(v9, &v10);
      v8 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v8, (uint64_t)v9);
    }
    return create_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)a1, a2);
  }
}

void sub_1B411A22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a20);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B411A124);
  }
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerCache::data_for_symbol_owner(os_unfair_lock_s **this, CSCppSymbolOwner *a2)
{
  char v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD v7[6];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (char)a2;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  if ((CSGetForceSafeMachVMReads() & 1) != 0)
    v4 = 1;
  else
    v4 = (CSCppSymbolicator::flags(this[1]) >> 12) & 1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN21CSCppSymbolOwnerCache21data_for_symbol_ownerEP16CSCppSymbolOwnerb_block_invoke;
  v7[3] = &unk_1E6776828;
  v7[4] = &v9;
  v7[5] = this;
  v8 = v2;
  if (v4)
    CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v7);
  else
    ___ZN21CSCppSymbolOwnerCache21data_for_symbol_ownerEP16CSCppSymbolOwnerb_block_invoke((uint64_t)v7);
  v5 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1B411A398(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21CSCppSymbolOwnerCache21data_for_symbol_ownerEP16CSCppSymbolOwnerb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;
  CSCppSymbolOwnerData *v11;
  CSCppSymbolOwnerCache *v12;
  CSCppSymbolOwner *v13;
  uint64_t v14;
  CSCppSymbolOwnerData *v15;
  _QWORD v16[6];
  _QWORD v17[6];

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSCppSymbolOwnerCache::symbol_owner_data(*(os_unfair_lock_s ***)(a1 + 40), (CSCppSymbolOwner *)1, 1, 0, *(unsigned __int8 *)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 8) + 24))
  {
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v17[2] = ___ZN21CSCppSymbolOwnerCache21data_for_symbol_ownerEP16CSCppSymbolOwnerb_block_invoke_2;
    v17[3] = &unk_1E67767D8;
    v14 = *(_QWORD *)(a1 + 40);
    v17[4] = v2;
    v17[5] = v14;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = ___ZN21CSCppSymbolOwnerCache21data_for_symbol_ownerEP16CSCppSymbolOwnerb_block_invoke_3;
    v16[3] = &unk_1E6776800;
    v16[4] = v2;
    v16[5] = v14;
    return CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v17, (uint64_t)v16);
  }
  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(*(_QWORD *)(a1 + 40) + 8));
  if ((result & 4) != 0)
  {
    v4 = atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 12));
    if ((v4 & 0x1000) == 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *(_QWORD *)(a1 + 40));
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      if (v6 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        if (v7 == result)
        {
LABEL_12:
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
          return result;
        }
        v15 = (CSCppSymbolOwnerData *)(v7 - result);
        CSCppSymbolOwnerCache::symbol_owner_data(*(os_unfair_lock_s ***)(a1 + 40), (CSCppSymbolOwner *)1, 1, 1, 0);
        CSCppReferenceCount::release(*(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 1);
        v12 = *(CSCppSymbolOwnerCache **)(a1 + 40);
        v13 = (CSCppSymbolOwner *)v6;
        v11 = v15;
      }
      else
      {
        CSCppSymbolOwnerCache::symbol_owner_data(*(os_unfair_lock_s ***)(a1 + 40), (CSCppSymbolOwner *)1, 1, 1, 0);
        CSCppReferenceCount::release(*(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 1);
        v9 = *(unsigned int ***)(a1 + 40);
        v10 = v9[10];
        if (v10)
        {
          CSCppReferenceCount::release(v10, 1);
          *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) = 0;
          v9 = *(unsigned int ***)(a1 + 40);
        }
        v11 = (CSCppSymbolOwnerData *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
        v12 = (CSCppSymbolOwnerCache *)v9;
        v13 = (CSCppSymbolOwner *)v6;
      }
      result = CSCppSymbolOwnerCache::_set_symbol_owner_data_with_footprint(v12, v13, v11);
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t ___ZN21CSCppSymbolOwnerCache21data_for_symbol_ownerEP16CSCppSymbolOwnerb_block_invoke_2(uint64_t a1, uint64_t a2, CSCppDsymData *a3)
{
  CSCppSymbolOwnerCache *v4;
  CSCppSymbolOwner *v5;
  CSCppSymbolOwnerData *v6;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSCppSymbolOwnerCache::create_symbol_owner_data(*(CSCppSymbolOwnerCache **)(a1 + 40), 0, a3);
  v4 = *(CSCppSymbolOwnerCache **)(a1 + 40);
  v5 = *(CSCppSymbolOwner **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = (CSCppSymbolOwnerData *)(*(uint64_t (**)(CSCppSymbolOwner *))(*(_QWORD *)v5 + 32))(v5);
  return CSCppSymbolOwnerCache::_set_symbol_owner_data_with_footprint(v4, v5, v6);
}

uint64_t ___ZN21CSCppSymbolOwnerCache21data_for_symbol_ownerEP16CSCppSymbolOwnerb_block_invoke_3(uint64_t a1)
{
  CSCppSymbolOwner *v2;
  double empty_symbol_owner_data;
  uint64_t v4;
  CSCppSymbolOwnerCache *v5;
  CSCppSymbolOwner *v6;
  CSCppSymbolOwnerData *v7;

  pthread_mutex_lock(&_cache_lock);
  ++_total_failed_creates;
  v2 = (CSCppSymbolOwner *)pthread_mutex_unlock(&_cache_lock);
  empty_symbol_owner_data = create_empty_symbol_owner_data(v2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  v5 = *(CSCppSymbolOwnerCache **)(a1 + 40);
  v6 = *(CSCppSymbolOwner **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v7 = (CSCppSymbolOwnerData *)(*(uint64_t (**)(CSCppSymbolOwner *, double))(*(_QWORD *)v6 + 32))(v6, empty_symbol_owner_data);
  return CSCppSymbolOwnerCache::_set_symbol_owner_data_with_footprint(v5, v6, v7);
}

BOOL CSCppSymbolOwnerCache::resymbolicate_one_symbol_owner(os_unfair_lock_s **this, CSCppSymbolOwner *a2, CSCppDsymData *a3)
{
  unsigned int *v5;
  CSCppDsymData *v6;
  os_unfair_lock_s *v7;
  char v8;
  unsigned int *v9;
  CSCppDsymData *v10;
  uint64_t symbol_owner_data;
  char v12;
  unsigned int *v13;
  CSCppSymbolOwnerData *v14;
  unsigned int *v15;
  void *v17[137];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = CSCppSymbolOwnerCache::symbol_owner_data(this, (CSCppSymbolOwner *)1, 0, 0, 0);
  if (v5)
  {
    v7 = (os_unfair_lock_s *)v5;
    v8 = atomic_load(v5 + 3);
    if ((v8 & 0x90) == 0x10)
    {
      v9 = v5;
      goto LABEL_11;
    }
    CSCppReferenceCount::release(v5, 1);
  }
  if (a2)
  {
    CSCppDsymData::CSCppDsymData((CSCppDsymData *)v17, a2);
    v18 = 1;
    symbol_owner_data = CSCppSymbolOwnerCache::create_symbol_owner_data((CSCppSymbolOwnerCache *)this, (CSCppSymbolOwner *)v17, v10);
  }
  else
  {
    LOBYTE(v17[0]) = 0;
    v18 = 0;
    symbol_owner_data = CSCppSymbolOwnerCache::create_symbol_owner_data((CSCppSymbolOwnerCache *)this, 0, v6);
  }
  v9 = (unsigned int *)symbol_owner_data;
  if (v18)
    CSCppDsymData::~CSCppDsymData(v17);
  v7 = 0;
LABEL_11:
  v12 = atomic_load(v9 + 3);
  if (v12 < 0)
  {
    CSCppReferenceCount::release(v9, 1);
  }
  else if (v7 == (os_unfair_lock_s *)v9)
  {
    v15 = (unsigned int *)this[10];
    if (v15)
    {
      CSCppReferenceCount::release(v15, 1);
      this[10] = 0;
    }
    this[10] = v7;
  }
  else
  {
    CSCppSymbolOwnerCache::symbol_owner_data(this, (CSCppSymbolOwner *)1, 1, 1, 0);
    v13 = (unsigned int *)this[10];
    if (v13)
    {
      CSCppReferenceCount::release(v13, 1);
      this[10] = 0;
    }
    this[10] = (os_unfair_lock_s *)v9;
    v14 = (CSCppSymbolOwnerData *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
    CSCppSymbolOwnerCache::_set_symbol_owner_data_with_footprint((CSCppSymbolOwnerCache *)this, (CSCppSymbolOwner *)v9, v14);
  }
  return (v12 & 0x80) == 0;
}

void sub_1B411A82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x450]))
    CSCppDsymData::~CSCppDsymData((void **)va);
  _Unwind_Resume(a1);
}

void CSCppSymbolOwnerCache::resymbolicate_symbol_owners(uint64_t *a1, CFArrayRef theArray)
{
  uint64_t Count;
  CFIndex v4;
  uint64_t v5;
  const __CFURL *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int *v13;
  unint64_t *v14;
  unint64_t v15;
  const __CFDictionary *theDict;
  _QWORD v18[8];
  _QWORD v19[4];
  os_unfair_lock_s **v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __n128 (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)();

  Count = CFArrayGetCount(theArray);
  theDict = CFDictionaryCreateMutable(0, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Count >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(theArray, v4);
      v20 = 0;
      v21 = (std::__shared_weak_count *)&v20;
      v22 = 0x3802000000;
      v23 = __Block_byref_object_copy__7;
      v24 = __Block_byref_object_dispose__7;
      v19[0] = 0;
      v19[1] = v19;
      v19[2] = 0x2000000000;
      v19[3] = 0;
      v18[0] = v5;
      v18[1] = 0x40000000;
      v18[2] = ___ZN21CSCppSymbolOwnerCache27resymbolicate_symbol_ownersERKNSt3__16vectorINS0_10shared_ptrI16CSCppSymbolOwnerEENS0_9allocatorIS4_EEEEPK9__CFArray_block_invoke;
      v18[3] = &unk_1E6776850;
      v18[4] = &v20;
      v18[5] = v19;
      v18[6] = theDict;
      v18[7] = ValueAtIndex;
      CSSymbolicatorForeachSymbolicatorWithURL(ValueAtIndex, (uint64_t)v18);
      _Block_object_dispose(v19, 8);
      _Block_object_dispose(&v20, 8);
      ++v4;
    }
    while (Count != v4);
  }
  if (CFDictionaryGetCount(theDict))
  {
    pthread_mutex_lock(&_cache_lock);
    _total_resymbolications_attempted += (a1[1] - *a1) >> 4;
    pthread_mutex_unlock(&_cache_lock);
    v7 = *a1;
    v8 = a1[1];
    while (v7 != v8)
    {
      v9 = *(os_unfair_lock_s ***)v7;
      v10 = *(std::__shared_weak_count **)(v7 + 8);
      v20 = *(os_unfair_lock_s ***)v7;
      v21 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = CSCppSymbolOwnerCache::symbol_owner_data(v9, (CSCppSymbolOwner *)1, 0, 0, 0);
      if (v13)
      {
        atomic_load(v13 + 3);
        CSCppReferenceCount::release(v13, 1);
        v10 = v21;
      }
      if (v10)
      {
        v14 = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v7 += 16;
    }
  }
  CFRelease(theDict);
}

void sub_1B411AA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN21CSCppSymbolOwnerCache27resymbolicate_symbol_ownersERKNSt3__16vectorINS0_10shared_ptrI16CSCppSymbolOwnerEENS0_9allocatorIS4_EEEEPK9__CFArray_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t SymbolOwner;
  uint64_t v5;
  uint64_t v6;
  CFUUIDBytes v7;

  SymbolOwner = CSSymbolicatorGetSymbolOwner(a2, a3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(v5 + 40) = SymbolOwner;
  *(_QWORD *)(v5 + 48) = v6;
  if (CSSymbolOwnerGetCFUUIDBytes(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48)))
  {
    v7 = *(CFUUIDBytes *)CSSymbolOwnerGetCFUUIDBytes(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CFUUIDCreateFromUUIDBytes(0, v7);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), *(const void **)(a1 + 56));
    CFRelease(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  }
}

void CSCppSymbolOwnerCache::resymbolicate_symbol_owners(uint64_t **a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  char v18;
  CSCppDsymData *v19;
  CSCppSymbolOwner *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;

  pthread_mutex_lock(&_cache_lock);
  _total_resymbolications_attempted += ((char *)a1[1] - (char *)*a1) >> 4;
  pthread_mutex_unlock(&_cache_lock);
  v10 = *a1;
  v11 = a1[1];
  while (v10 != v11)
  {
    v13 = *v10;
    v12 = (std::__shared_weak_count *)v10[1];
    v23 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = CSCppSymbolOwnerCache::symbol_owner_data((os_unfair_lock_s **)v13, (CSCppSymbolOwner *)1, 0, 0, 0);
    v17 = v16;
    if (v16)
    {
      v18 = atomic_load(v16 + 3);
      if ((v18 & 0x10) != 0)
        goto LABEL_11;
    }
    v20 = (CSCppSymbolOwner *)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)v13, a2, a3, a4, a5);
    if (v20)
    {
      *(_DWORD *)(v13 + 108) |= 0x400000u;
      CSCppSymbolOwnerCache::resymbolicate_one_symbol_owner((os_unfair_lock_s **)v13, v20, v19);
      CSCppDsymData::~CSCppDsymData((void **)v20);
      MEMORY[0x1B5E36940]();
    }
    if (v17)
LABEL_11:
      CSCppReferenceCount::release(v17, 1);
    if (v23)
    {
      v21 = (unint64_t *)&v23->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v10 += 2;
  }
}

void sub_1B411ACD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)va, 0);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void CSCppSymbolOwnerCache::resymbolicate_symbol_owners(uint64_t **a1)
{
  CSCppSymbolOwnerCache::resymbolicate_symbol_owners(a1, 0, 0, 0, 0);
}

uint64_t CSCppSymbolOwnerCache::remove_symbol_owner(CSCppSymbolOwnerCache *this, CSCppSymbolOwner *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;

  pthread_mutex_lock(&_cache_lock);
  v3 = _data_cache;
  if (!_data_cache)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_DWORD *)(v3 + 32) = 1065353216;
    _data_cache = v3;
  }
  v4 = std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::find<CSCppSymbolOwner>((_QWORD *)v3, (uint64_t)this);
  if (v4)
  {
    v5 = v4[28];
    if (v5)
    {
      v6 = atomic_load((unsigned int *)(v5 + 8));
      if (v6 == 1)
        remove_locked((_QWORD *)v3, v4);
    }
  }
  v7 = (_QWORD *)symbol_owner_data_graveyard();
  v8 = std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::find<CSCppSymbolOwner>(v7, (uint64_t)this);
  if (v8)
  {
    v9 = v8[28];
    if (v9)
    {
      v10 = atomic_load((unsigned int *)(v9 + 8));
      if (v10 == 1)
        remove_locked(v7, v8);
    }
  }
  return pthread_mutex_unlock(&_cache_lock);
}

void sub_1B411ADFC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_cache_lock);
  _Unwind_Resume(a1);
}

uint64_t symbol_owner_data_graveyard(void)
{
  unsigned __int8 v0;
  uint64_t v2;

  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    symbol_owner_data_graveyard(void)::graveyard = v2;
  }
  return symbol_owner_data_graveyard(void)::graveyard;
}

void sub_1B411AEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t CSCppSymbolOwnerCache::memory_usage(CSCppSymbolOwnerCache *this)
{
  return (unint64_t)(_memory_used + 0xFFFFF) >> 20;
}

uint64_t CSCppSymbolOwnerCache::entry_count(CSCppSymbolOwnerCache *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  pthread_mutex_lock(&_cache_lock);
  v1 = _data_cache;
  if (!_data_cache)
  {
    v1 = operator new();
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_DWORD *)(v1 + 32) = 1065353216;
    _data_cache = v1;
  }
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(symbol_owner_data_graveyard() + 24);
  pthread_mutex_unlock(&_cache_lock);
  return v3 + v2;
}

void sub_1B411AF58(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_cache_lock);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerCache::reset_stats(CSCppSymbolOwnerCache *this)
{
  uint64_t v1;

  pthread_mutex_lock(&_cache_lock);
  _total_lookups = 0;
  _total_waits = 0;
  _total_misses = 0;
  _total_failed_creates = 0;
  _total_replacements = 0;
  _total_resymbolications_attempted = 0;
  _max_memory_used = _memory_used;
  v1 = _data_cache;
  if (!_data_cache)
  {
    v1 = operator new();
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_DWORD *)(v1 + 32) = 1065353216;
    _data_cache = v1;
  }
  _max_entries = *(_QWORD *)(v1 + 24);
  return pthread_mutex_unlock(&_cache_lock);
}

void sub_1B411B028(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_cache_lock);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerCache::print_stats(CSCppSymbolOwnerCache *this)
{
  double v1;
  double v2;
  uint64_t v3;
  mach_timebase_info info;

  mach_timebase_info(&info);
  pthread_mutex_lock(&_cache_lock);
  puts("Cache stats:");
  v1 = (double)(unint64_t)_total_lookups - (double)(unint64_t)_total_misses;
  v2 = 0.0;
  if (v1 > 0.0)
    v2 = v1 / (double)(unint64_t)_total_lookups * 100.0;
  printf("\t%05.2f%% hit rate (%zd of %zd lookups hit, with %zd waits)\n", v2, _total_lookups - _total_misses, _total_lookups, _total_waits);
  printf("\t%zd misses (%zd create, %zd failed)\n", _total_misses, _total_misses - _total_failed_creates, _total_failed_creates);
  printf("\t%zd resymbolications attempted. (%zd replacements)\n", _total_resymbolications_attempted, _total_replacements);
  v3 = _data_cache;
  if (!_data_cache)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_DWORD *)(v3 + 32) = 1065353216;
    _data_cache = v3;
  }
  printf("\t%zd entries, %zdMB footprint\n", *(_QWORD *)(v3 + 24), (unint64_t)(_memory_used + 0xFFFFF) >> 20);
  printf("\t%zd peak entries, %zdMB peak footprint\n", _max_entries, (unint64_t)(_max_memory_used + 0xFFFFF) >> 20);
  printf("\t%5.5fs create time\n", 0.0);
  return pthread_mutex_unlock(&_cache_lock);
}

void sub_1B411B1CC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_cache_lock);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerCache::print_entries_locked(CSCppSymbolOwnerCache *this)
{
  uint64_t v1;
  uint64_t result;
  const CFUUIDBytes *i;
  unsigned int *v4;
  unsigned int v5;
  char __str[40];
  char v7[40];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = _data_cache;
  if (!_data_cache)
  {
    v1 = operator new();
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_DWORD *)(v1 + 32) = 1065353216;
    _data_cache = v1;
  }
  result = printf("ENTRY COUNT: %zd\n", *(_QWORD *)(v1 + 24));
  for (i = *(const CFUUIDBytes **)(v1 + 16); i; i = *(const CFUUIDBytes **)&i->byte0)
  {
    v4 = *(unsigned int **)&i[14].byte0;
    CFUUIDBytesToString(i + 2, v7, 0x28uLL);
    __str[0] = 0;
    if ((*(_DWORD *)&i[7].byte12 & 0x80000000) != 0)
      snprintf(__str, 0x28uLL, "PRIVATE_KEY:0x%llx ", *(_QWORD *)&i[10].byte0);
    if (v4)
      v5 = atomic_load(v4 + 2);
    else
      v5 = 0;
    result = printf("%s %s %sDATA:%p retain count (%d)\n", v7, *(const char **)&i[8].byte8, __str, v4, v5);
  }
  return result;
}

uint64_t CSCppSymbolOwnerCache::print_entries(CSCppSymbolOwnerCache *this)
{
  CSCppSymbolOwnerCache *v1;

  v1 = (CSCppSymbolOwnerCache *)pthread_mutex_lock(&_cache_lock);
  CSCppSymbolOwnerCache::print_entries_locked(v1);
  return pthread_mutex_unlock(&_cache_lock);
}

void sub_1B411B360(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_cache_lock);
  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

unsigned int *create_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, CSCppDsymData *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  int is_null;
  unsigned int v9;
  int v10;
  TMMapArchive *v11;
  CSCppSymbolOwner *v12;
  _BOOL4 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const UUID *v20;
  TMMapArchive *v21;
  TMMapArchive *v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t traw_symbol_owner_data_arch;
  TMMapArchive *v28;
  unsigned int *v29;
  int v30;
  unsigned int *mmap_archive_arch;
  TMMapArchive *v32;
  char v33;
  uint64_t v34;
  TMMapArchive *v35;
  char v36;
  unsigned int v37;
  char *v38;
  char v39;
  TMMapSymbolOwnerData *mmap_symbol_owner_data_arch_specific;
  unsigned int *v41;
  TMMapArchive *v42;
  void **v43;
  void **v45;
  CSCppDsymData *v46;

  v4 = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  v5 = v4;
  v6 = (v4 & 0x400) == 0;
  v7 = (v4 & 0x800) == 0;
  if ((*(_DWORD *)(a1 + 108) & 0x80000000) != 0)
  {
    v7 = 0;
    v6 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 88) & ((v4 & 0x400) == 0);
  }
  is_null = UUID::is_null((UUID *)(a1 + 16));
  v9 = *(_DWORD *)(a1 + 108);
  v10 = strcmp(*(const char **)(a1 + 120), "cl_kernels");
  v14 = (v9 & 0x4004) == 0 && v10 != 0;
  v15 = v14 & ~is_null & v6;
  if (v5 & 0x4000000 | v9 & 0x100)
    v16 = 0;
  else
    v16 = v7;
  v17 = (v9 >> 22) & 1;
  if ((v15 & 1) != 0)
    v17 = 1;
  if ((v5 & 0x200) != 0)
    v18 = v17;
  else
    v18 = 1;
  v46 = 0;
  if ((v15 | ((v5 & 0x40) >> 6)) != 1)
  {
    v21 = 0;
LABEL_27:
    v24 = 0;
    goto LABEL_40;
  }
  v19 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v19 + 88) & 1) != 0)
  {
    if (*(_QWORD *)(v19 + 80))
      v20 = *(const UUID **)(v19 + 80);
    else
      v20 = *(const UUID **)(a1 + 8);
  }
  else
  {
    v20 = 0;
  }
  v22 = (TMMapArchive *)CSCppMMapArchiveCache::archive_for_uuid((__n128 *)(a1 + 16), v20, v16, 0, 0, 0, (os_unfair_lock_s **)a1, v12);
  v21 = v22;
  if (!v22)
    goto LABEL_27;
  if (!TMMapArchive::dsym_path(v22))
  {
    if (a2)
      goto LABEL_33;
    if ((v5 & 0x80000) != 0)
      goto LABEL_32;
    a2 = (CSCppDsymData *)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0);
    v46 = a2;
    if (a2)
      goto LABEL_33;
    if ((*(_BYTE *)(a1 + 109) & 1) != 0)
    {
      v45 = (void **)dsym_data_for_symbol_owner((const CFUUIDBytes *)a1, *(const char **)(a1 + 120));
      std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)&v46, v45);
      a2 = v46;
    }
    else
    {
LABEL_32:
      a2 = 0;
    }
LABEL_33:
    if (a2)
      v23 = v18;
    else
      v23 = 0;
    goto LABEL_36;
  }
  v23 = 0;
LABEL_36:
  if (cached_sod_contains_sufficient_data(v21, v5))
    v25 = v23;
  else
    v25 = 1;
  v24 = v25 != 0;
  if (!v25)
  {
LABEL_72:
    mmap_symbol_owner_data_arch_specific = CSCppSymbolOwnerCache::create_mmap_symbol_owner_data_arch_specific((CSCppSymbolOwnerCache *)a1, v21, v11);
LABEL_79:
    v29 = (unsigned int *)mmap_symbol_owner_data_arch_specific;
    goto LABEL_80;
  }
LABEL_40:
  if ((v5 & 0x200) != 0)
    v26 = 0;
  else
    v26 = v15;
  if (v26 == 1)
  {
    if (!is_system_path_symbol_owner((CSCppSymbolOwner *)a1))
    {
      v15 = 0;
      goto LABEL_50;
    }
  }
  else if (!v15)
  {
    goto LABEL_50;
  }
  if ((*(_BYTE *)(a1 + 109) & 1) != 0)
    v15 = (v5 >> 9) & 1;
  else
    v15 = 1;
LABEL_50:
  if (!v18)
  {
LABEL_69:
    v39 = !v24;
    if (!v21)
      v39 = 1;
    if ((v39 & 1) != 0)
    {
      v29 = 0;
      goto LABEL_80;
    }
    goto LABEL_72;
  }
  traw_symbol_owner_data_arch = create_traw_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(a1, (void **)a2);
  v29 = (unsigned int *)traw_symbol_owner_data_arch;
  if (traw_symbol_owner_data_arch)
    v30 = v15;
  else
    v30 = 0;
  if (v30 != 1)
  {
    if (traw_symbol_owner_data_arch)
      goto LABEL_63;
    goto LABEL_69;
  }
  mmap_archive_arch = (unsigned int *)CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(a1, traw_symbol_owner_data_arch, 0, (v5 >> 2) & 1);
  if (mmap_archive_arch)
  {
    CSCppReferenceCount::release(v29, 1);
    v33 = !v24;
    if (!v21)
      v33 = 1;
    if ((v33 & 1) == 0)
      CSCppMMapArchiveCache::release_archive((uint64_t)v21, v32);
    v34 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v34 + 88) & 1) != 0)
    {
      if (*(_QWORD *)(v34 + 80))
        v35 = *(TMMapArchive **)(v34 + 80);
      else
        v35 = *(TMMapArchive **)(a1 + 8);
    }
    else
    {
      v35 = 0;
    }
    v41 = CSCppMMapArchiveCache::add_archive(mmap_archive_arch, 1, v35, v16, "system");
    mmap_symbol_owner_data_arch_specific = CSCppSymbolOwnerCache::create_mmap_symbol_owner_data_arch_specific((CSCppSymbolOwnerCache *)a1, (CSCppSymbolOwner *)v41, v42);
    goto LABEL_79;
  }
LABEL_63:
  v36 = !v24;
  if (!v21)
    v36 = 1;
  if ((v36 & 1) == 0)
    CSCppMMapArchiveCache::release_archive((uint64_t)v21, v28);
  v37 = atomic_load(v29 + 2);
  if (v37 != 1)
  {
    putchar(10);
    v38 = utility_basename("/Library/Caches/com.apple.xbs/Sources/CoreSymbolication/CoreSymbolication/CSCppSymbolOwnerCache.cpp");
    create_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(v38);
    abort();
  }
LABEL_80:
  v43 = (void **)v46;
  v46 = 0;
  if (v43)
  {
    CSCppDsymData::~CSCppDsymData(v43);
    MEMORY[0x1B5E36940]();
  }
  return v29;
}

void sub_1B411B740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

unsigned int *create_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, CSCppDsymData *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  int is_null;
  unsigned int v9;
  int v10;
  TMMapArchive *v11;
  CSCppSymbolOwner *v12;
  _BOOL4 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const UUID *v20;
  TMMapArchive *v21;
  TMMapArchive *v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  unsigned int *traw_symbol_owner_data_arch;
  TMMapArchive *v28;
  unsigned int *v29;
  int v30;
  unsigned int *mmap_archive_arch;
  TMMapArchive *v32;
  char v33;
  uint64_t v34;
  TMMapArchive *v35;
  char v36;
  unsigned int v37;
  char *v38;
  char v39;
  TMMapSymbolOwnerData *mmap_symbol_owner_data_arch_specific;
  unsigned int *v41;
  TMMapArchive *v42;
  void **v43;
  void **v45;
  CSCppDsymData *v46;

  v4 = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  v5 = v4;
  v6 = (v4 & 0x400) == 0;
  v7 = (v4 & 0x800) == 0;
  if ((*(_DWORD *)(a1 + 108) & 0x80000000) != 0)
  {
    v7 = 0;
    v6 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 88) & ((v4 & 0x400) == 0);
  }
  is_null = UUID::is_null((UUID *)(a1 + 16));
  v9 = *(_DWORD *)(a1 + 108);
  v10 = strcmp(*(const char **)(a1 + 120), "cl_kernels");
  v14 = (v9 & 0x4004) == 0 && v10 != 0;
  v15 = v14 & ~is_null & v6;
  if (v5 & 0x4000000 | v9 & 0x100)
    v16 = 0;
  else
    v16 = v7;
  v17 = (v9 >> 22) & 1;
  if ((v15 & 1) != 0)
    v17 = 1;
  if ((v5 & 0x200) != 0)
    v18 = v17;
  else
    v18 = 1;
  v46 = 0;
  if ((v15 | ((v5 & 0x40) >> 6)) != 1)
  {
    v21 = 0;
LABEL_27:
    v24 = 0;
    goto LABEL_40;
  }
  v19 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v19 + 88) & 1) != 0)
  {
    if (*(_QWORD *)(v19 + 80))
      v20 = *(const UUID **)(v19 + 80);
    else
      v20 = *(const UUID **)(a1 + 8);
  }
  else
  {
    v20 = 0;
  }
  v22 = (TMMapArchive *)CSCppMMapArchiveCache::archive_for_uuid((__n128 *)(a1 + 16), v20, v16, 0, 0, 0, (os_unfair_lock_s **)a1, v12);
  v21 = v22;
  if (!v22)
    goto LABEL_27;
  if (!TMMapArchive::dsym_path(v22))
  {
    if (a2)
      goto LABEL_33;
    if ((v5 & 0x80000) != 0)
      goto LABEL_32;
    a2 = (CSCppDsymData *)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0);
    v46 = a2;
    if (a2)
      goto LABEL_33;
    if ((*(_BYTE *)(a1 + 109) & 1) != 0)
    {
      v45 = (void **)dsym_data_for_symbol_owner((const CFUUIDBytes *)a1, *(const char **)(a1 + 120));
      std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)&v46, v45);
      a2 = v46;
    }
    else
    {
LABEL_32:
      a2 = 0;
    }
LABEL_33:
    if (a2)
      v23 = v18;
    else
      v23 = 0;
    goto LABEL_36;
  }
  v23 = 0;
LABEL_36:
  if (cached_sod_contains_sufficient_data(v21, v5))
    v25 = v23;
  else
    v25 = 1;
  v24 = v25 != 0;
  if (!v25)
  {
LABEL_72:
    mmap_symbol_owner_data_arch_specific = CSCppSymbolOwnerCache::create_mmap_symbol_owner_data_arch_specific((CSCppSymbolOwnerCache *)a1, v21, v11);
LABEL_79:
    v29 = (unsigned int *)mmap_symbol_owner_data_arch_specific;
    goto LABEL_80;
  }
LABEL_40:
  if ((v5 & 0x200) != 0)
    v26 = 0;
  else
    v26 = v15;
  if (v26 == 1)
  {
    if (!is_system_path_symbol_owner((CSCppSymbolOwner *)a1))
    {
      v15 = 0;
      goto LABEL_50;
    }
  }
  else if (!v15)
  {
    goto LABEL_50;
  }
  if ((*(_BYTE *)(a1 + 109) & 1) != 0)
    v15 = (v5 >> 9) & 1;
  else
    v15 = 1;
LABEL_50:
  if (!v18)
  {
LABEL_69:
    v39 = !v24;
    if (!v21)
      v39 = 1;
    if ((v39 & 1) != 0)
    {
      v29 = 0;
      goto LABEL_80;
    }
    goto LABEL_72;
  }
  traw_symbol_owner_data_arch = (unsigned int *)create_traw_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(a1, (void **)a2);
  v29 = traw_symbol_owner_data_arch;
  if (traw_symbol_owner_data_arch)
    v30 = v15;
  else
    v30 = 0;
  if (v30 != 1)
  {
    if (traw_symbol_owner_data_arch)
      goto LABEL_63;
    goto LABEL_69;
  }
  mmap_archive_arch = (unsigned int *)CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(a1, traw_symbol_owner_data_arch, 0, (v5 >> 2) & 1);
  if (mmap_archive_arch)
  {
    CSCppReferenceCount::release(v29, 1);
    v33 = !v24;
    if (!v21)
      v33 = 1;
    if ((v33 & 1) == 0)
      CSCppMMapArchiveCache::release_archive((uint64_t)v21, v32);
    v34 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v34 + 88) & 1) != 0)
    {
      if (*(_QWORD *)(v34 + 80))
        v35 = *(TMMapArchive **)(v34 + 80);
      else
        v35 = *(TMMapArchive **)(a1 + 8);
    }
    else
    {
      v35 = 0;
    }
    v41 = CSCppMMapArchiveCache::add_archive(mmap_archive_arch, 1, v35, v16, "system");
    mmap_symbol_owner_data_arch_specific = CSCppSymbolOwnerCache::create_mmap_symbol_owner_data_arch_specific((CSCppSymbolOwnerCache *)a1, (CSCppSymbolOwner *)v41, v42);
    goto LABEL_79;
  }
LABEL_63:
  v36 = !v24;
  if (!v21)
    v36 = 1;
  if ((v36 & 1) == 0)
    CSCppMMapArchiveCache::release_archive((uint64_t)v21, v28);
  v37 = atomic_load(v29 + 2);
  if (v37 != 1)
  {
    putchar(10);
    v38 = utility_basename("/Library/Caches/com.apple.xbs/Sources/CoreSymbolication/CoreSymbolication/CSCppSymbolOwnerCache.cpp");
    create_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(v38);
    abort();
  }
LABEL_80:
  v43 = (void **)v46;
  v46 = 0;
  if (v43)
  {
    CSCppDsymData::~CSCppDsymData(v43);
    MEMORY[0x1B5E36940]();
  }
  return v29;
}

void sub_1B411BAF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t dsym_data_for_symbol_owner(const CFUUIDBytes *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[1024];
  char v12;
  uint64_t v13;

  v2 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    make_dsym_data_from_path_and_uuid(a2, a1 + 1, (uint64_t)&v5);
    if (v12)
    {
      v3 = operator new();
      v2 = v3;
      if (!v12)
        std::__throw_bad_optional_access[abi:ne180100]();
      *(_OWORD *)v3 = v5;
      *(_QWORD *)(v3 + 16) = v6;
      v5 = 0uLL;
      *(_OWORD *)(v3 + 24) = v7;
      *(_QWORD *)(v3 + 40) = v8;
      v6 = 0;
      v7 = 0uLL;
      v8 = 0;
      *(_OWORD *)(v3 + 48) = v9;
      *(_QWORD *)(v3 + 64) = v10;
      v10 = 0;
      v9 = 0uLL;
      memcpy((void *)(v3 + 72), v11, 0x400uLL);
      CSCppDsymData::~CSCppDsymData((void **)&v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_1B411BC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  MEMORY[0x1B5E36940](v9, 0x1032C401C2584E0);
  if (LOBYTE(STACK[0x448]))
    CSCppDsymData::~CSCppDsymData(&a9);
  _Unwind_Resume(a1);
}

BOOL cached_sod_contains_sufficient_data(TMMapArchive *a1, int a2)
{
  char *v3;

  v3 = TMMapArchive::optional_data(a1);
  return !v3
      || !*((_DWORD *)v3 + 1)
      || *((_DWORD *)v3 + 2) < 0x14u
      || do_candidate_sources_satisfy_existing(*((_DWORD *)v3 + 4), a2);
}

BOOL is_system_path_symbol_owner(CSCppSymbolOwner *a1)
{
  uint64_t v1;
  const char *v2;
  int v3;
  BOOL v4;

  v1 = 0;
  v2 = (const char *)*((_QWORD *)a1 + 15);
  do
  {
    v3 = strncmp(v2, (&off_1E6776870)[v1], (size_t)(&off_1E6776870)[v1 + 1]);
    if (!v3)
      break;
    v4 = v1 == 8;
    v1 += 2;
  }
  while (!v4);
  return v3 == 0;
}

uint64_t create_traw_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  void **v21;
  _OWORD *v22;
  _OWORD *v23;
  char v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int stabs_data_from;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  char v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  _OWORD *v59;
  uint64_t v60;
  void *v61;
  _OWORD *v62;
  uint64_t v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  uint64_t v71;
  CSCppTaskMemory *v72;
  CSCppDsymData *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  __int128 buf;
  _QWORD v82[6];

  v82[5] = *MEMORY[0x1E0C80C00];
  v80 = a2;
  v3 = operator new();
  v4 = v3;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_QWORD *)(v3 + 8) = 1;
  *(_QWORD *)(v3 + 16) = 850045863;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 68) = 0u;
  *(_QWORD *)v3 = &off_1E6775588;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 128) = 1065353216;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_DWORD *)(v3 + 304) = 1065353216;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_OWORD *)(v3 + 328) = 0u;
  *(_DWORD *)(v3 + 344) = 1065353216;
  *(_OWORD *)(v3 + 408) = 0u;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_BYTE *)(v3 + 400) = 0;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_DWORD *)(v3 + 440) = 1065353216;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_DWORD *)(v3 + 480) = 1065353216;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v3 + 496) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  if (v6 - v5 == 32)
  {
    v7 = atomic_load((unsigned int *)(v3 + 12));
    atomic_store(v7 | 0x100, (unsigned int *)(v3 + 12));
  }
  v8 = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  v79 = 0;
  v74 = 0;
  v75 = 0;
  sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, (_QWORD *)v4, &v76, (uint64_t)&v74, &buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v10 = v79;
  v79 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = buf;
    *(_QWORD *)&buf = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v9 = v79;
  }
  if (v9)
    goto LABEL_8;
  sod_header_from_on_disk_binary<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, v4, (uint64_t *)&buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v14 = v79;
  v79 = v9;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = buf;
    *(_QWORD *)&buf = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v9 = v79;
  }
  if (v9)
  {
    v13 = 0;
LABEL_18:
    v73 = 0;
LABEL_19:
    v72 = 0;
    goto LABEL_20;
  }
  sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, v4, &v76, (uint64_t)&v74, &buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v27 = v79;
  v79 = v9;
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = buf;
    *(_QWORD *)&buf = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v9 = v79;
  }
  if (v9)
  {
LABEL_8:
    v12 = 0;
    if (v76 == __PAIR128__(-1, -1) && v77 == -1)
      v12 = v78 == -1;
    v13 = !v12;
    goto LABEL_18;
  }
  v73 = 0;
  sod_header_from_colocated_dsym<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, v4, (void ***)&v73, &v80, (uint64_t *)&buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v29 = v79;
  v79 = v9;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = buf;
    *(_QWORD *)&buf = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v9 = v79;
  }
  if (v9)
  {
    v13 = 0;
    goto LABEL_19;
  }
  sod_header_from_debug_symbols<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, v4, (void ***)&v73, (CSCppDsymData **)&v80, (uint64_t *)&buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v54 = v79;
  v79 = v9;
  if (v54)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    v55 = buf;
    *(_QWORD *)&buf = 0;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v9 = v79;
  }
  v72 = 0;
  if (!v9)
  {
    sod_header_from_task_fault<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, v4, (void **)&v72, (uint64_t *)&buf);
    v9 = buf;
    *(_QWORD *)&buf = 0;
    v56 = v79;
    v79 = v9;
    if (v56)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      v57 = buf;
      *(_QWORD *)&buf = 0;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      v9 = v79;
    }
    if (!v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v4 = 0;
      goto LABEL_124;
    }
  }
  v13 = 0;
LABEL_20:
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v16 = *(char **)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  if ((char *)v17 == v16)
  {
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::extract_segments_and_sections(v9, &v69, v4 + 160);
  }
  else
  {
    if (v4 + 160 != a1 + 56)
    {
      std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>((char *)(v4 + 160), v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v16) >> 3));
      v9 = v79;
    }
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::extract_segments_and_sections(v9, &v69, 0);
  }
  record_sod_header_version<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(&v79, v4);
  dsym_header_for_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(a1, (_QWORD *)v4, (void ***)&v73, &v80, &v68);
  if (!v68)
  {
    if ((v8 & 0x10000) != 0)
      goto LABEL_80;
    if (!v13)
    {
      v24 = 3;
LABEL_78:
      extract_stabs_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(v24, 0, 0, 0, v79, (uint64_t *)v4, 0);
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  v67 = 0;
  v18 = atomic_load((unsigned int *)(v4 + 12));
  if ((v18 & 4) != 0
    || (v19 = atomic_load((unsigned int *)(v4 + 12)), (v19 & 8) != 0)
    || (v20 = atomic_load((unsigned int *)(v4 + 12)), (v20 & 2) != 0) && (*(_BYTE *)(a1 + 109) & 4) != 0
    || *(_BYTE *)(v79 + 52))
  {
    v64 = 0;
    v65 = 0;
    v66 = 0;
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::extract_segments_and_sections(v68, &v64, 0);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v61, v64, (uint64_t)v65, (v65 - (_BYTE *)v64) >> 5);
    __p = 0;
    v59 = 0;
    v60 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&__p, v69, (uint64_t)v70, (v70 - (_BYTE *)v69) >> 5);
    v21 = v80;
    v22 = std::remove_if[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange *>,TAddressRelocator<Pointer32> * create_slide_functor_if_needed<Pointer32>(std::vector<CSCppSegmentRange>,std::vector<CSCppSegmentRange>,CSCppDsymData *)::{lambda(CSCppSegmentRange)#1}>((uint64_t)v61, (uint64_t)v62);
    v23 = std::remove_if[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange *>,TAddressRelocator<Pointer32> * create_slide_functor_if_needed<Pointer32>(std::vector<CSCppSegmentRange>,std::vector<CSCppSegmentRange>,CSCppDsymData *)::{lambda(CSCppSegmentRange)#1}>((uint64_t)__p, (uint64_t)v59);
    if (v62 != v22)
      v62 = v22;
    if (v59 != v23)
      v59 = v23;
    if ((char *)v22 - (_BYTE *)v61 != (char *)v23 - (_BYTE *)__p)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v21 + 9;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Segments in dSYM [%s] could not be matched to task header\n", (uint8_t *)&buf, 0xCu);
      }
      v26 = 0;
      goto LABEL_58;
    }
    create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>((uint64_t)&v61, (uint64_t)&__p, 0, (uint64_t)&buf);
    v25 = (void *)buf;
    if ((_QWORD)buf == *((_QWORD *)&buf + 1))
    {
      v26 = 0;
      if (!(_QWORD)buf)
      {
LABEL_58:
        v31 = v67;
        v67 = v26;
        if (v31)
          std::default_delete<TAddressRelocator<Pointer32>>::operator()[abi:ne180100]((uint64_t)&v67, (uint64_t)v31);
        if (__p)
        {
          v59 = __p;
          operator delete(__p);
        }
        if (v61)
        {
          v62 = v61;
          operator delete(v61);
        }
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        goto LABEL_66;
      }
    }
    else
    {
      v26 = (_QWORD *)operator new();
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      std::vector<TRangeValue<Pointer32,unsigned int>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer32,unsigned int>*,TRangeValue<Pointer32,unsigned int>*>(v26, (const void *)buf, *((uint64_t *)&buf + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 2));
      v26[3] = *v26;
      v25 = (void *)buf;
      if (!(_QWORD)buf)
        goto LABEL_58;
    }
    *((_QWORD *)&buf + 1) = v25;
    operator delete(v25);
    goto LABEL_58;
  }
LABEL_66:
  if ((v8 & 0x2000000) != 0 || *v80 == v80[1] || v80[3] == v80[4])
  {
    *(_QWORD *)&buf = &off_1E6777710;
    extract_dwarf_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(v68, v4, (v8 & 0x80) != 0, v67, (uint64_t (***)(_QWORD, std::vector<std::string>::pointer))&buf);
  }
  else
  {
    CSCppInternedPathTransformer::CSCppInternedPathTransformer(&buf, v4 + 96);
    extract_dwarf_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(v68, v4, (v8 & 0x80) != 0, v67, (uint64_t (***)(_QWORD, std::vector<std::string>::pointer))&buf);
    *(_QWORD *)&buf = &off_1E677AA20;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v82);
  }
  stabs_data_from = extract_stabs_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(3, 0, 0, 0, v68, (uint64_t *)v4, v67);
  v33 = atomic_load((unsigned int *)(v4 + 12));
  atomic_store(v33 | 0x10, (unsigned int *)(v4 + 12));
  *(_QWORD *)(v4 + 248) = CSCppStringCache::intern((CSCppStringCache *)(v4 + 96), (char *)v80 + 72);
  v34 = v67;
  v67 = 0;
  if (v34)
    std::default_delete<TAddressRelocator<Pointer32>>::operator()[abi:ne180100]((uint64_t)&v67, (uint64_t)v34);
  if ((v8 & 0x10000) == 0)
  {
    if (stabs_data_from)
      v24 = 2;
    else
      v24 = 3;
    if (((stabs_data_from | v13 ^ 1) & 1) != 0)
      goto LABEL_78;
LABEL_79:
    extract_stabs_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(3, v74, v75, (uint64_t *)&v76, v79, (uint64_t *)v4, 0);
  }
LABEL_80:
  if ((v8 & 0x4000000) == 0)
    extract_function_starts_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(v79, (uint64_t *)v4, 0);
  if (v68)
  {
    if ((*(_BYTE *)(a1 + 109) & 1) == 0)
      goto LABEL_90;
    v35 = v79;
    if (!strcmp((const char *)v80 + 72, *(const char **)(v79 + 40)) || (v8 & 0x20000) != 0)
      goto LABEL_90;
  }
  else
  {
    if ((v8 & 0x20000) != 0)
      goto LABEL_90;
    v35 = v79;
  }
  *(_QWORD *)&buf = &off_1E6777710;
  extract_dwarf_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(v35, v4, (v8 & 0x80) != 0, 0, (uint64_t (***)(_QWORD, std::vector<std::string>::pointer))&buf);
LABEL_90:
  if ((v8 & 0x40000) == 0)
  {
    v36 = atomic_load((unsigned int *)(v4 + 12));
    if ((v36 & 0x10) == 0)
      extract_debug_map_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(v79, v4);
  }
  v37 = v79;
  if ((v8 & 0x4000000) != 0)
  {
    extract_function_starts_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(v79, (uint64_t *)v4, 1);
    v37 = v79;
  }
  if ((v8 & 4) != 0 && *(_DWORD *)(*(_QWORD *)(v37 + 24) + 12) != 10)
  {
    v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
    v39 = v79;
    *(_QWORD *)&buf = 0;
    _iterate_macho_header_sections<SizeAndEndianness<Pointer32,LittleEndian>,TSection<SizeAndEndianness<Pointer32,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer32,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer32,LittleEndian>>,BOOL *)#1}>(v79, v38, (const char **)&buf);
    _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer32,LittleEndian>>(v39, v4, buf);
    v37 = v79;
  }
  *(_DWORD *)(v4 + 400) = v8;
  *(_BYTE *)(v4 + 404) = 1;
  v40 = TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::gc_support_flags(v37);
  if ((v40 & 1) != 0)
  {
    if ((v40 & 2) != 0)
      v41 = 3072;
    else
      v41 = 1024;
    if ((v40 & 4) != 0)
      v41 = 2048;
    v42 = atomic_load((unsigned int *)(v4 + 12));
    atomic_store(v42 | v41, (unsigned int *)(v4 + 12));
  }
  if ((CSGetForceSafeMachVMReads() | ((unsigned __int16)(v8 & 0x1000) >> 12)) == 1)
  {
    v43 = v79;
    v44 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(v79 + 24), "__LINKEDIT");
    if (v44)
    {
      v45 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symtab(*(_QWORD *)(v43 + 24));
      v46 = v45;
      if (v45)
      {
        if (v45[5])
        {
          v47 = *(_QWORD *)(v43 + 8);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47))
            v48 = v46[4] - *(_DWORD *)(v44 + 32) + *(_DWORD *)(v44 + 24) + *(_DWORD *)(v43 + 32);
          else
            v48 = v46[4] + *(_DWORD *)(v43 + 16);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v47 + 32))(v47, v48, v46[5]);
        }
      }
    }
  }
  if (v72)
    CSCppTaskMemory::resume(v72);
  sort_and_filter_extracted_data<SizeAndEndianness<Pointer32,LittleEndian>>(v79, v4);
  TRawSymbolOwnerData<Pointer32>::slide_to_segment_addresses(v4, (uint64_t)&v69, a1 + 32, *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56));
  if (!v80 && (*(_BYTE *)(a1 + 109) & 1) != 0)
  {
    if ((v8 & 0x80000) != 0)
    {
      v49 = atomic_load((unsigned int *)(v4 + 12));
      atomic_store(v49 | 0x10, (unsigned int *)(v4 + 12));
    }
    *(_QWORD *)(v4 + 248) = *(_QWORD *)(a1 + 120);
  }
  v50 = v68;
  v68 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
LABEL_124:
  v51 = (void **)v73;
  v73 = 0;
  if (v51)
  {
    CSCppDsymData::~CSCppDsymData(v51);
    MEMORY[0x1B5E36940]();
  }
  v52 = v79;
  v79 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  return v4;
}

void sub_1B411C804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](&a24, 0);
  v27 = *(_QWORD *)(v25 - 160);
  *(_QWORD *)(v25 - 160) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

mach_vm_address_t CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(uint64_t a1, uint64_t a2, CSCppAddressSet *a3, int a4)
{
  unsigned int v8;
  mach_vm_address_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const char *v37;
  int v38;
  const char *v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  size_t v45;
  unsigned int v46;
  mach_vm_size_t v47;
  __int16 v48;
  int v49;
  mach_vm_address_t v50;
  _BYTE *v51;
  _BYTE *v52;
  unsigned int *v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  const void **v60;
  uint64_t v61;
  uint64_t *v62;
  const void *v63;
  mach_vm_address_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  const char *v70;
  __int128 v71;
  unint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  mach_vm_address_t v84;
  uint64_t v85;
  unint64_t *v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  _DWORD *v92;
  unsigned int *v93;
  BOOL v94;
  unint64_t v95;
  unsigned int v96;
  char v97;
  _BOOL4 v98;
  unint64_t v99;
  unint64_t v100;
  mach_vm_address_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _BOOL4 v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void *v131;
  int v132;
  unint64_t v133;
  int *v134;
  _DWORD *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  void *v154;
  int v155;
  unint64_t v156;
  int *v157;
  _DWORD *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  const void *v166;
  _QWORD *v167;
  size_t v168;
  _QWORD *v169;
  _QWORD *v170;
  const char *v171;
  size_t v172;
  _QWORD *v173;
  _QWORD *v174;
  const char *v175;
  size_t v176;
  _QWORD *v177;
  void *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  char v189;
  void **v190;
  unsigned int v191;
  unint64_t v192;
  unint64_t v193;
  BOOL v194;
  unint64_t v195;
  _BYTE *v198;
  char *v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  uint64_t *v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  size_t v209;
  int v210;
  unint64_t *v211;
  mach_vm_size_t size;
  uint64_t v213;
  int v214;
  mach_vm_address_t v215;
  unsigned int *v216;
  _BYTE v217[16];
  void *v218[2];
  char v219;
  mach_vm_address_t address[2];
  unint64_t *v221;
  unint64_t *v222;
  uint64_t v223;
  void *v224;
  _BYTE *v225;
  uint64_t v226;
  char v227[8];
  uint64_t *v228;
  void *v229[2];
  _QWORD v230[4];
  int v231;
  _QWORD v232[4];
  float v233;
  _QWORD v234[4];
  int v235;
  void *__p;
  char *v237;
  char *v238;
  char *v239;
  _QWORD v240[3];
  unsigned int v241;
  unsigned int __n;
  int __n_4;
  char v244;
  uint8_t buf[24];
  unint64_t v246;
  void *v247;
  char v248;
  uint64_t v249;
  char __s[8];
  unint64_t *v251;
  uint64_t v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  v8 = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if (_do_traw_segments_overlap(a2 + 376))
    return 0;
  if (a3)
    CSCppAddressSet::sort(a3);
  v214 = a4;
  v216 = (unsigned int *)a2;
  v239 = 0;
  v213 = a1;
  MMapArchiveNameBuffer::MMapArchiveNameBuffer((MMapArchiveNameBuffer *)v240);
  __p = 0;
  v237 = 0;
  v238 = 0;
  memset(v234, 0, sizeof(v234));
  v235 = 1065353216;
  v10 = *(_QWORD *)(a2 + 160);
  for (i = *(_QWORD *)(a2 + 168); v10 != i; v10 += 24)
  {
    if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v10, *(_QWORD *)(v10 + 8)))
    {
      v12 = intern_string<std::unordered_map<unsigned long,unsigned int>>(*(const char **)(v10 + 16), (CSCppMMapStringTable *)&v239, v234);
      v13 = v12;
      v14 = v237;
      if (v237 >= v238)
      {
        v16 = (char *)__p;
        v17 = (v237 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v19 = v238 - (_BYTE *)__p;
        if ((v238 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v238, v20);
          v16 = (char *)__p;
          v14 = v237;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        *(_DWORD *)v22 = v13;
        v15 = v22 + 4;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        __p = v22;
        v237 = v15;
        v238 = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v237 = v12;
        v15 = v14 + 4;
      }
      v237 = v15;
    }
  }
  memset(v232, 0, sizeof(v232));
  v233 = 1.0;
  memset(v230, 0, sizeof(v230));
  v231 = 1065353216;
  DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer((DemanglingUtilities::CSCppReusableDemanglingBuffer *)v229);
  v24 = (uint64_t *)TRawSymbolOwnerData<Pointer32>::mutable_sorted_symbols(a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)v232, vcvtps_u32_f32((float)(unint64_t)(0x5555555555555556 * ((v24[1] - *v24) >> 5)) / v233));
  v227[0] = 0;
  v228 = v24;
  v26 = *v24;
  v25 = v24[1];
  v27 = (v8 >> 5) & 1;
  if (*v24 != v25)
  {
    v28 = 0;
    v29 = 0;
    while (1)
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v26, HIDWORD(*(_QWORD *)v26)))
      {
        if (v244)
        {
LABEL_53:
          v9 = 0;
          goto LABEL_259;
        }
        intern_symbol_names_and_path<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(v26, (CSCppMMapStringTable *)&v239, (DemanglingUtilities::CSCppReusableDemanglingBuffer *)v229, v232, v230, v27);
        ++v28;
        if (*(_DWORD *)(v26 + 8))
          ++v29;
      }
      v26 += 96;
      if (v26 == v25)
        goto LABEL_36;
    }
  }
  v29 = 0;
  v28 = 0;
LABEL_36:
  v30 = TRawSymbolOwnerData<Pointer32>::mutable_sorted_symbols((uint64_t)v216);
  v32 = *(_QWORD **)v30;
  v31 = *(_QWORD **)(v30 + 8);
  if (*(_QWORD **)v30 == v31)
  {
    v33 = 0;
  }
  else
  {
    v33 = 0;
    do
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *v32, HIDWORD(*v32)))
      {
        if (v244)
          break;
        v33 += recursive_intern_inlined_function_names_with_name_cache<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>((uint64_t)v32, (CSCppMMapStringTable *)&v239, (uint64_t)a3, (DemanglingUtilities::CSCppReusableDemanglingBuffer *)v229, v232, v230, v27);
      }
      v32 += 12;
    }
    while (v32 != v31);
  }
  v34 = *((_QWORD *)v216 + 26);
  v35 = *((_QWORD *)v216 + 27);
  if (v34 == v35)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    do
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v34, HIDWORD(*(_QWORD *)v34)))
      {
        if (v244)
          goto LABEL_53;
        *(_DWORD *)(v34 + 24) = intern_string<std::unordered_map<unsigned long,unsigned int>>(*(const char **)(v34 + 8), (CSCppMMapStringTable *)&v239, v230);
        ++v36;
      }
      v34 += 32;
    }
    while (v34 != v35);
  }
  if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v216 + 64))(v216))
  {
    v37 = (const char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v216 + 64))(v216);
    v38 = CSCppMMapStringTable::intern_with_prefix((CSCppMMapStringTable *)&v239, 0, v37);
  }
  else
  {
    v38 = 0;
  }
  if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v216 + 40))(v216))
  {
    v39 = (const char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v216 + 40))(v216);
    v40 = CSCppMMapStringTable::intern_with_prefix((CSCppMMapStringTable *)&v239, 0, v39);
  }
  else
  {
    v40 = 0;
  }
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v221 = 0;
  v222 = 0;
  v223 = 0;
  v210 = v38;
  v206 = v40;
  if ((void **)(v213 + 32) == &v224)
  {
    v42 = 0;
    v41 = 0;
  }
  else
  {
    std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((char *)&v224, *(char **)(v213 + 32), *(_QWORD *)(v213 + 40), (uint64_t)(*(_QWORD *)(v213 + 40) - *(_QWORD *)(v213 + 32)) >> 5);
    v42 = (int)v224;
    v41 = (int)v225;
  }
  v43 = v216[59];
  if (v214)
    v44 = v216[58];
  else
    v44 = 0;
  if (v214)
    v45 = v43;
  else
    v45 = 0;
  v46 = 4 * v28
      + 4 * v29
      + __n_4
      + v45
      + 36 * v33
      + 20 * v36
      + ((v41 - v42 + 24 * (((unint64_t)(v237 - (_BYTE *)__p) >> 2) + v28) + 96) & 0xFFFFFFF8);
  if (*((_BYTE *)v216 + 404))
    v47 = v46 + 24;
  else
    v47 = v46;
  v209 = v45;
  v205 = *((unsigned __int8 *)v216 + 404);
  if ((_DWORD)v45 && (v48 = atomic_load(v216 + 3), (v48 & 0x1000) != 0))
  {
    v49 = v44;
  }
  else
  {
    v49 = 0;
    v43 = 0;
  }
  v208 = v44;
  address[0] = 0;
  address[1] = v47;
  size = v47;
  mach_vm_allocate(*MEMORY[0x1E0C83DA0], address, v47, 3);
  v50 = address[0];
  if (address[0])
  {
    v203 = v49;
    v204 = v24;
    v202 = *(_QWORD *)(v213 + 112);
    v51 = v224;
    v52 = v225;
    v198 = __p;
    v199 = v237;
    v53 = v216;
    v54 = atomic_load(v216 + 3);
    v201 = v54;
    v200 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v53 + 48))(v53);
    v55 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v53 + 56))(v53);
    v56 = (unint64_t)(v199 - v198) >> 2;
    *(_DWORD *)v50 = 7;
    *(_DWORD *)(v50 + 4) = size;
    *(_DWORD *)(v50 + 8) = (unint64_t)(v52 - v51) >> 5;
    *(_DWORD *)(v50 + 12) = v56;
    *(_DWORD *)(v50 + 16) = v28;
    *(_DWORD *)(v50 + 20) = v33;
    *(_DWORD *)(v50 + 24) = v36;
    *(_DWORD *)(v50 + 28) = v201;
    *(_DWORD *)(v50 + 32) = v200;
    *(_DWORD *)(v50 + 36) = v55;
    *(_OWORD *)(v50 + 52) = *(_OWORD *)(v213 + 16);
    *(_QWORD *)(v50 + 68) = v202;
    *(_DWORD *)(v50 + 76) = v203;
    *(_DWORD *)(v50 + 80) = v43;
    *(_DWORD *)(v50 + 88) = 4 * v29;
    v215 = v50 + 96;
    v57 = (char *)(24 * v28
                 + (unint64_t)(4 * v29)
                 + 4 * v28
                 + (36 * v33)
                 + (unint64_t)(20 * v36)
                 + v43
                 + v50
                 + 96
                 + ((_DWORD)v52 - (_DWORD)v51)
                 + (24 * v56));
    v239 = v57;
    v58 = v241;
    v59 = v240[0];
    if (v241)
    {
      v60 = (const void **)v240[0];
      v61 = v241;
      v62 = v204;
      do
      {
        v63 = *v60++;
        memcpy(v57, v63, 0x1000uLL);
        v57 += 4096;
        --v61;
      }
      while (v61);
    }
    else
    {
      v58 = 0;
      v62 = v204;
    }
    memcpy(v57, *(const void **)(v59 + 8 * v58), __n);
    *(_DWORD *)(v50 + 84) = (_DWORD)v57
                          + __n
                          - (*(_DWORD *)(v50 + 88)
                           + *(_DWORD *)(v50 + 80))
                          - (v215
                           + 32 * *(_DWORD *)(v50 + 8)
                           + 24 * *(_DWORD *)(v50 + 12)
                           + 24 * *(_DWORD *)(v50 + 16)
                           + 4 * *(_DWORD *)(v50 + 16)
                           + 36 * *(_DWORD *)(v50 + 20)
                           + 20 * *(_DWORD *)(v50 + 24));
    *(_DWORD *)(v50 + 40) = v206;
    *(_DWORD *)(v50 + 44) = v210;
    *(_DWORD *)(v50 + 48) = TMMapArchive::calculate_checksum((int32x4_t *)v50);
    v65 = (32 * *(_DWORD *)(v50 + 8))
        + v215
        + (24 * *(_DWORD *)(v50 + 12))
        + (24 * *(_DWORD *)(v50 + 16))
        + (unint64_t)(4 * *(_DWORD *)(v50 + 16))
        + (36 * *(_DWORD *)(v50 + 20))
        + (unint64_t)(20 * *(_DWORD *)(v50 + 24))
        + *(unsigned int *)(v50 + 88);
    v66 = *(unsigned int *)(v50 + 80);
    v67 = (char *)v224;
    v68 = v225;
    if (v224 != v225)
    {
      v69 = (char *)(v50 + 112);
      do
      {
        v70 = (const char *)*((_QWORD *)v67 + 3);
        if (!v70)
          v70 = (const char *)*((_QWORD *)v67 + 2);
        v71 = *(_OWORD *)v67;
        v67 += 32;
        *((_OWORD *)v69 - 1) = v71;
        v69 = strncpy(v69, v70, 0x10uLL) + 32;
      }
      while (v67 != v68);
    }
    v207 = v65 + v66;
    v73 = v221;
    v72 = v222;
    if (v221 == v222)
    {
      v101 = (32 * *(_DWORD *)(v50 + 8)) + v215;
      v102 = *((_QWORD *)v216 + 20);
      v103 = *((_QWORD *)v216 + 21);
      if (v102 != v103)
      {
        v104 = (int *)__p;
        do
        {
          if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v102, *(_QWORD *)(v102 + 8)))
          {
            v105 = *v104++;
            *(_OWORD *)v101 = *(_OWORD *)v102;
            *(_DWORD *)(v101 + 16) = v105;
            v101 += 24;
          }
          v102 += 24;
        }
        while (v102 != v103);
        v101 = (32 * *(_DWORD *)(v50 + 8)) + v215;
      }
      v106 = v101 + (24 * *(_DWORD *)(v50 + 12));
      write_symbols_and_inlined_functions<Pointer32>(v62, v106, v106 + (24 * *(_DWORD *)(v50 + 16)), (uint64_t)&v239, &v221, (uint64_t)a3, v207);
      v107 = *((_QWORD *)v216 + 26);
      v108 = *((_QWORD *)v216 + 27);
      if (v107 != v108)
      {
        v109 = vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v50 + 8), (int32x4_t)xmmword_1B41A9130)) + v215;
        do
        {
          if (!a3
            || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v107, HIDWORD(*(_QWORD *)v107)))
          {
            *(_QWORD *)v109 = *(_QWORD *)v107;
            *(_DWORD *)(v109 + 8) = *(_DWORD *)(v107 + 24);
            *(_DWORD *)(v109 + 12) = *(_DWORD *)(v107 + 16);
            *(_DWORD *)(v109 + 16) = *(_DWORD *)(v107 + 20) & 0x7FFFFFFF;
            v109 += 20;
          }
          v107 += 32;
        }
        while (v107 != v108);
      }
    }
    else
    {
      *(_QWORD *)__s = 0;
      v251 = 0;
      v252 = 0;
      std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve((void **)__s, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v216 + 21) - *((_QWORD *)v216 + 20)) >> 3));
      v74 = *((_QWORD *)v216 + 20);
      v75 = *((_QWORD *)v216 + 21);
      v218[0] = __s;
      while (v74 != v75)
      {
        if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v74, *(_QWORD *)(v74 + 8)))
          std::back_insert_iterator<std::vector<CSCppFlatbufferRelocation>>::operator=[abi:ne180100]((void ***)v218, (__int128 *)v74);
        v74 += 24;
      }
      v76 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v251 - *(_QWORD *)__s) >> 3));
      if (v251 == *(unint64_t **)__s)
        v77 = 0;
      else
        v77 = v76;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(*(uint64_t *)__s, v251, (uint64_t)v218, v77, 1);
      v78 = *(_QWORD *)__s;
      v79 = v251;
      v80 = *(unint64_t **)__s;
      v211 = v73;
      if (*(unint64_t **)__s != v251)
      {
        v81 = *(unint64_t **)__s;
        v82 = v73;
        while (2)
        {
          v83 = *v81;
          while (v83 < *v82 || v81[1] + v83 > v82[1] + *v82)
          {
            v82 += 3;
            if (v82 >= v72)
            {
              v98 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
              v99 = v81[1];
              if (v98)
              {
                v100 = v81[2];
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v100;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v83;
                *(_WORD *)&buf[22] = 2048;
                v246 = v99 + v83;
                _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Region %s [%llx -> %llx) outside of relocations in mmap SOD\n", buf, 0x20u);
              }
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "Region %s [%llx -> %llx) outside of relocations in mmap SOD\n");
              goto LABEL_143;
            }
          }
          *v81 = v82[2] + v83;
          v81 += 3;
          if (v81 != v79)
            continue;
          break;
        }
        v80 = v79;
      }
      std::sort[abi:ne180100]<std::__wrap_iter<CSCppSectionRange *>>(v78, v80);
      v84 = (32 * *(_DWORD *)(v50 + 8)) + v215;
      v85 = *(_QWORD *)__s;
      v86 = v251;
      if (*(unint64_t **)__s != v251)
      {
        do
        {
          v87 = intern_string<std::unordered_map<unsigned long,unsigned int>>(*(const char **)(v85 + 16), 0, v234);
          v88 = *(_OWORD *)v85;
          v85 += 24;
          *(_OWORD *)v84 = v88;
          *(_DWORD *)(v84 + 16) = v87;
          v84 += 24;
        }
        while ((unint64_t *)v85 != v86);
        v84 = (32 * *(_DWORD *)(v50 + 8)) + v215;
      }
      v89 = v84 + (24 * *(_DWORD *)(v50 + 12));
      write_symbols_and_inlined_functions<Pointer32>(v62, v89, v89 + (24 * *(_DWORD *)(v50 + 16)), (uint64_t)&v239, &v221, (uint64_t)a3, v207);
      v91 = (unsigned int *)*((_QWORD *)v216 + 26);
      v90 = (unsigned int *)*((_QWORD *)v216 + 27);
      if (v91 == v90)
      {
        v97 = 1;
      }
      else
      {
        v92 = (_DWORD *)(vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v50 + 8), (int32x4_t)xmmword_1B41A9130)) + v215);
        while (a3)
        {
          v93 = v90;
          v94 = CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v91, HIDWORD(*(_QWORD *)v91));
          v90 = v93;
          if (v94)
            break;
LABEL_121:
          v91 += 8;
          v97 = 1;
          if (v91 == v90)
            goto LABEL_144;
        }
        v95 = *v91;
        do
        {
          if (*v73 <= v95)
          {
            v96 = v91[1];
            if (v73[1] + *v73 >= v96 + v95)
            {
              *v92 = v95 + *((_DWORD *)v73 + 4);
              v92[1] = v96;
              v92[2] = v91[6];
              v92[3] = v91[4];
              v92[4] = v91[5] & 0x7FFFFFFF;
              v92 += 5;
              goto LABEL_121;
            }
          }
          v73 += 3;
        }
        while (v73 < v72);
        v110 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        v111 = v91[1];
        if (v110)
        {
          v112 = *((_QWORD *)v91 + 1);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v112;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 2048;
          v246 = v111;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Source info %s [%llx -> %llx) outside of relocations in mmap SOD\n", buf, 0x20u);
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Source info %s [%llx -> %llx) outside of relocations in mmap SOD\n");
LABEL_143:
        v97 = 0;
      }
LABEL_144:
      if (*(_QWORD *)__s)
      {
        v251 = *(unint64_t **)__s;
        operator delete(*(void **)__s);
      }
      v113 = v211;
      if ((v97 & 1) == 0)
      {
        v9 = 0;
        goto LABEL_255;
      }
    }
    if (v29)
    {
      memset(buf, 0, sizeof(buf));
      std::vector<CSCppSymbolOwner *>::reserve((void **)buf, v29);
      v114 = *v62;
      if (v62[1] != *v62)
      {
        v115 = 0;
        v116 = 0;
        v117 = 0;
        do
        {
          if (!a3
            || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)(v114 + 96 * v115), HIDWORD(*(_QWORD *)(v114 + 96 * v115))))
          {
            v118 = (32 * *(_DWORD *)(v50 + 8))
                 + v215
                 + (24 * *(_DWORD *)(v50 + 12))
                 + 24 * v117;
            if (*(_DWORD *)(v118 + 12))
            {
              v119 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
              {
                v121 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
                if ((unint64_t)(v121 + 1) >> 61)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                v122 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
                if (v122 <= v121 + 1)
                  v122 = v121 + 1;
                if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
                  v123 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v123 = v122;
                if (v123)
                  v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&buf[16], v123);
                else
                  v124 = 0;
                v125 = (uint64_t *)&v124[8 * v121];
                *v125 = v118;
                v120 = v125 + 1;
                v126 = *(char **)&buf[8];
                v127 = *(char **)buf;
                if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                {
                  do
                  {
                    v128 = *((_QWORD *)v126 - 1);
                    v126 -= 8;
                    *--v125 = v128;
                  }
                  while (v126 != v127);
                  v126 = *(char **)buf;
                }
                *(_QWORD *)buf = v125;
                *(_QWORD *)&buf[8] = v120;
                *(_QWORD *)&buf[16] = &v124[8 * v123];
                if (v126)
                  operator delete(v126);
              }
              else
              {
                **(_QWORD **)&buf[8] = v118;
                v120 = (_QWORD *)(v119 + 8);
              }
              *(_QWORD *)&buf[8] = v120;
            }
            ++v117;
          }
          v114 = *v62;
          v115 = ++v116;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v62[1] - *v62) >> 5) > v116);
      }
      v129 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
      *(_QWORD *)__s = v207;
      if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
        v130 = 0;
      else
        v130 = v129;
      std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(*(uint64_t *)buf, *(uint64_t **)&buf[8], (uint64_t *)__s, v130, 1);
      v131 = *(void **)buf;
      if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
      {
        if (!*(_QWORD *)buf)
          goto LABEL_184;
      }
      else
      {
        v132 = 32 * *(_DWORD *)(v50 + 8)
             + v215
             + 24 * *(_DWORD *)(v50 + 12)
             + 24 * *(_DWORD *)(v50 + 16)
             + 36 * *(_DWORD *)(v50 + 20)
             + 20 * *(_DWORD *)(v50 + 24);
        v133 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
        if (v133 <= 1)
          v133 = 1;
        v134 = *(int **)buf;
        v135 = (_DWORD *)((32 * *(_DWORD *)(v50 + 8))
                        + v215
                        + (24 * *(_DWORD *)(v50 + 12))
                        + (24 * *(_DWORD *)(v50 + 16))
                        + (unint64_t)(36 * *(_DWORD *)(v50 + 20))
                        + (20 * *(_DWORD *)(v50 + 24)));
        do
        {
          v136 = *v134;
          v134 += 2;
          *v135++ = v132 - v136;
          v132 += 4;
          --v133;
        }
        while (v133);
      }
      *(_QWORD *)&buf[8] = v131;
      operator delete(v131);
    }
LABEL_184:
    memset(buf, 0, sizeof(buf));
    std::vector<CSCppSymbolOwner *>::reserve((void **)buf, v28);
    v137 = *v62;
    if (v62[1] != *v62)
    {
      v138 = 0;
      v139 = 0;
      v140 = 0;
      do
      {
        if (!a3
          || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)(v137 + 96 * v138), HIDWORD(*(_QWORD *)(v137 + 96 * v138))))
        {
          v141 = (32 * *(_DWORD *)(v50 + 8))
               + v215
               + (24 * *(_DWORD *)(v50 + 12))
               + 24 * v140;
          v142 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
          {
            v144 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
            if ((unint64_t)(v144 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v145 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
            if (v145 <= v144 + 1)
              v145 = v144 + 1;
            if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
              v146 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v146 = v145;
            if (v146)
              v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&buf[16], v146);
            else
              v147 = 0;
            v148 = (uint64_t *)&v147[8 * v144];
            *v148 = v141;
            v143 = v148 + 1;
            v149 = *(char **)&buf[8];
            v150 = *(char **)buf;
            if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            {
              do
              {
                v151 = *((_QWORD *)v149 - 1);
                v149 -= 8;
                *--v148 = v151;
              }
              while (v149 != v150);
              v149 = *(char **)buf;
            }
            *(_QWORD *)buf = v148;
            *(_QWORD *)&buf[8] = v143;
            *(_QWORD *)&buf[16] = &v147[8 * v146];
            if (v149)
              operator delete(v149);
          }
          else
          {
            **(_QWORD **)&buf[8] = v141;
            v143 = (_QWORD *)(v142 + 8);
          }
          *(_QWORD *)&buf[8] = v143;
          ++v140;
        }
        v137 = *v62;
        v138 = ++v139;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v62[1] - *v62) >> 5) > v139);
    }
    v152 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
    *(_QWORD *)__s = v207;
    if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
      v153 = 0;
    else
      v153 = v152;
    std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(*(uint64_t *)buf, *(uint64_t **)&buf[8], (uint64_t *)__s, v153, 1);
    v154 = *(void **)buf;
    if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
    {
      if (!*(_QWORD *)buf)
      {
LABEL_217:
        if ((_DWORD)v209)
        {
          v160 = *(_DWORD *)(v50 + 8);
          v161 = *(_DWORD *)(v50 + 12);
          v163 = *(_DWORD *)(v50 + 16);
          v162 = *(_DWORD *)(v50 + 20);
          v164 = *(_DWORD *)(v50 + 24);
          v165 = *(unsigned int *)(v50 + 88);
          v166 = (const void *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, size_t))(*(_QWORD *)v216 + 192))(v216, v213, v208, v209);
          CFUUIDBytesToString((const CFUUIDBytes *)(v213 + 16), __s, 0x28uLL);
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
          v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"create_mmap_archive_arch_specific (TEXT_text) -- UUID: ", 55);
          v168 = strlen(__s);
          v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)__s, v168);
          v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)", Path: ", 8);
          if (v213)
            v171 = *(const char **)(v213 + 120);
          else
            v171 = "<none>";
          v172 = strlen(v171);
          v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)v171, v172);
          v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)", is_dyld_shared_cache: ", 24);
          v175 = "No";
          if (v213 && (*(_DWORD *)(v213 + 108) & 0x200) != 0)
            v175 = "Yes";
          v176 = strlen(v175);
          v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)v175, v176);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)", archive_TEXT_text: ", 21);
          v178 = (void *)((32 * v160)
                        + v215
                        + (24 * v161)
                        + (24 * v163)
                        + (unint64_t)(4 * v163)
                        + (36 * v162)
                        + (unint64_t)(20 * v164)
                        + v165);
          v179 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)", raw_bytes_for_text: ", 22);
          v180 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)", text_len: ", 12);
          v181 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)", raw_TEXT_text_section: (", 26);
          v182 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)", ", 2);
          v183 = (_QWORD *)std::ostream::operator<<();
          v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)", max_TEXT_text_section: (", 26);
          v185 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)", ", 2);
          v186 = (_QWORD *)std::ostream::operator<<();
          v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)", TEXT_text_section.value(): ", 29);
          v188 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)", flags:", 8);
          v189 = atomic_load(v216 + 3);
          if ((v189 & 4) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFaultedFromSelfDyldSharedCache", 49);
          if ((v189 & 1) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFaultedFromDisk", 34);
          if ((v189 & 8) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFaultedFromDiskDyldSharedCache", 49);
          if ((v189 & 0x20) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFoundBinaryNextToDsym", 40);
          if ((v189 & 0x40) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFoundBinaryViaDsymPlist", 42);
          if ((v189 & 2) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFaultedFromTask", 34);
          if (v189 < 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataEmpty", 24);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v218);
          if (v219 >= 0)
            v190 = v218;
          else
            v190 = (void **)v218[0];
          CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v217, (const char *)v190);
          memcpy(v178, v166, v209);
          CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v217);
          if (v219 < 0)
            operator delete(v218[0]);
          *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
          *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
          *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
          if (v248 < 0)
            operator delete(v247);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1B5E368EC](&v249);
        }
        if (v205)
        {
          v191 = v216[100];
          v192 = TMMapArchive::strtab_end((TMMapArchive *)v50);
          v193 = v50 + *(unsigned int *)(v50 + 4);
          v194 = v193 > v192;
          v195 = v193 - v192;
          if (v194 && v195 >= 0x18)
          {
            *(_QWORD *)v192 = 0x100C0FFEELL;
            *(_DWORD *)(v192 + 8) = 24;
            *(_DWORD *)(v192 + 12) = v191;
            *(_DWORD *)(v192 + 16) = v191;
          }
        }
        v227[0] = 1;
        v64 = address[0];
        goto LABEL_254;
      }
    }
    else
    {
      v155 = 32 * *(_DWORD *)(v50 + 8)
           + v215
           + 24 * *(_DWORD *)(v50 + 12)
           + 24 * *(_DWORD *)(v50 + 16)
           + 36 * *(_DWORD *)(v50 + 20)
           + 20 * *(_DWORD *)(v50 + 24)
           + *(_DWORD *)(v50 + 88);
      v156 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      if (v156 <= 1)
        v156 = 1;
      v157 = *(int **)buf;
      v158 = (_DWORD *)((32 * *(_DWORD *)(v50 + 8))
                      + v215
                      + (24 * *(_DWORD *)(v50 + 12))
                      + (24 * *(_DWORD *)(v50 + 16))
                      + (unint64_t)(36 * *(_DWORD *)(v50 + 20))
                      + (20 * *(_DWORD *)(v50 + 24))
                      + (unint64_t)*(unsigned int *)(v50 + 88));
      do
      {
        v159 = *v157;
        v157 += 2;
        *v158++ = v155 - v159;
        v155 += 4;
        --v156;
      }
      while (v156);
    }
    *(_QWORD *)&buf[8] = v154;
    operator delete(v154);
    goto LABEL_217;
  }
  v64 = 0;
LABEL_254:
  mach_vm_protect(*MEMORY[0x1E0C83DA0], v64, size, 1, 1);
  v9 = address[0];
  address[0] = 0;
  v113 = v221;
LABEL_255:
  MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(address);
  if (v113)
  {
    v222 = v113;
    operator delete(v113);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
LABEL_259:
  CSCppTRawSymbolNameGuard<Pointer32>::~CSCppTRawSymbolNameGuard((uint64_t)v227);
  DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(v229);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v230);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v232);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v234);
  if (__p)
  {
    v237 = (char *)__p;
    operator delete(__p);
  }
  *(_QWORD *)buf = v240;
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v9;
}

void sub_1B411E010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,mach_vm_address_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a65;
  uint64_t v65;
  void *v67;

  v67 = *(void **)(v65 - 144);
  if (v67)
  {
    *(_QWORD *)(v65 - 136) = v67;
    operator delete(v67);
  }
  MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(&a35);
  if (__p)
    operator delete(__p);
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  CSCppTRawSymbolNameGuard<Pointer32>::~CSCppTRawSymbolNameGuard((uint64_t)&a43);
  DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(&a45);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a47);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a53);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a59);
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  STACK[0x200] = a26;
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  _Unwind_Resume(a1);
}

char *TMMapArchive::optional_data(TMMapArchive *this)
{
  char *result;
  char *v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;

  result = (char *)TMMapArchive::strtab_end(this);
  v3 = (char *)this + *((unsigned int *)this + 1);
  v4 = v3 > result;
  v5 = v3 - result;
  if (!v4 || v5 < 0xC || *(_DWORD *)result != 12648430 || !*((_DWORD *)result + 1))
    return 0;
  LODWORD(v6) = *((_DWORD *)result + 2);
  if (v6 <= 0xC)
    v6 = 12;
  else
    v6 = v6;
  if (v5 != v6)
    return 0;
  return result;
}

_DWORD *record_sod_header_version<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  char v5[33];
  char v6[32];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::version_from_source_version_load_command(*a1, (uint64_t)v6);
  if (v7)
    *(_QWORD *)(a2 + 264) = CSCppStringCache::intern((CSCppStringCache *)(a2 + 96), v6);
  result = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::id_dylib(*(_QWORD *)(*a1 + 24));
  if (result)
  {
    *(_DWORD *)(a2 + 256) = result[4];
    *(_DWORD *)(a2 + 260) = result[5];
    if (!v7)
    {
      TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::version_from_id_dylib_load_command(*a1, (uint64_t)v5);
      if (!v5[32])
        std::__throw_bad_optional_access[abi:ne180100]();
      result = CSCppStringCache::intern((CSCppStringCache *)(a2 + 96), v5);
      *(_QWORD *)(a2 + 264) = result;
    }
  }
  return result;
}

uint64_t dsym_header_for_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, void ***a3@<X2>, void ***a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  void **v11;
  void **v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x80000) != 0
    || (*(_BYTE *)(a1 + 109) & 0x40) != 0
    || (v11 = *a4) == 0
    && (v12 = (void **)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0),
        result = (uint64_t)std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](a3, v12),
        v11 = *a3,
        *a4 = *a3,
        !v11)
    || (result = new_file_memory_for_uuid_and_arch((char *)v11 + 72, a1 + 16, *(_QWORD *)(a1 + 112), 2)) == 0)
  {
    *a5 = 0;
    return result;
  }
  v13 = (_DWORD *)result;
  v14 = 28;
  do
  {
    v15 = (_DWORD *)(*(uint64_t (**)(_DWORD *, _QWORD, unint64_t))(*(_QWORD *)v13 + 32))(v13, 0, v14);
    v17 = (uint64_t)v15;
    if (!v15 || *v15 != -17958194)
    {
      *a5 = 0;
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    }
    v14 = v15[5] + 28;
  }
  while (v14 > v16);
  v18 = *a4;
  v19 = v13[14];
  v20 = operator new();
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(v20, (uint64_t)v13, 0, v17, (uint64_t)(v18 + 9), v19, 0, v21, 0, 0);
  if (!uuid_match<SizeAndEndianness<Pointer32,LittleEndian>>(v20, a1))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v22 = (uint64_t)(*a4 + 9);
      *(_DWORD *)buf = 136315394;
      v25 = v22;
      v26 = 2048;
      v27 = a1;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Provided dSYM: [%s] does not match symbol owner %p\n", buf, 0x16u);
    }
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  v23 = v13;
  TRawSymbolOwnerData<Pointer32>::add_memory(a2, (uint64_t *)&v23);
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a5 = v20;
  return result;
}

void sub_1B411E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void extract_dwarf_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t (***a5)(_QWORD, std::vector<std::string>::pointer))
{
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  NSObject *v41;
  unsigned int *v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  int64x2_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *i;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _OWORD *v92;
  _OWORD **v93;
  _OWORD *v94;
  _QWORD *v95;
  _OWORD *v96;
  _OWORD **v97;
  _OWORD *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  const char *v113;
  unsigned int v114;
  uint64_t v115;
  __int128 v116;
  unsigned int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int64x2_t v127;
  _QWORD v128[2];
  _BYTE v129[32];
  int v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  void *v153;
  int v154;
  size_t v155;
  __int16 v156;
  int v157;
  int v158;
  __int128 __p;
  __int128 v160;
  void *v161;
  unsigned int v162;
  size_t v163;
  _BYTE buf[32];
  __int128 v165;
  uint64_t *v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v5 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__DWARF");
  if (v5
    || (v5 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__DWARFA")) != 0
    || (v5 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "")) != 0)
  {
    v6 = *(unsigned int *)(v5 + 48);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v113 = 0;
      v14 = 0;
      v15 = (const char *)(v5 + 56);
      do
      {
        if (!v7 && !strcmp(v15, "__debug_info"))
        {
          v7 = v15;
        }
        else if (!v8 && !strcmp(v15, "__debug_abbrev"))
        {
          v8 = v15;
        }
        else if (!v9 && !strcmp(v15, "__debug_line"))
        {
          v9 = v15;
        }
        else if (!v10 && !strcmp(v15, "__debug_str"))
        {
          v10 = v15;
        }
        else if (!v11 && !strncmp(v15, "__debug_line_str", 0x10uLL))
        {
          v11 = v15;
        }
        else if (!v12 && !strcmp(v15, "__debug_ranges"))
        {
          v12 = v15;
        }
        else if (!v13 && !strncmp(v15, "__debug_rnglists", 0x10uLL))
        {
          v13 = v15;
        }
        else if (!strcmp(v15, "__debug_addr"))
        {
          v113 = v15;
        }
        else if (!strncmp(v15, "__debug_str_offs", 0x10uLL))
        {
          v14 = v15;
        }
        v15 += 68;
        --v6;
      }
      while (v6);
      if (v7 && v8 && *((_DWORD *)v7 + 9) && *((_DWORD *)v8 + 9))
      {
        v16 = *(_QWORD *)(a1 + 8);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
        {
          v17 = *(_DWORD *)(a1 + 32);
          if (v9)
            v104 = *((_DWORD *)v9 + 8) + v17;
          else
            v104 = 0;
          v18 = v113;
          if (v10)
          {
            v107 = *((_DWORD *)v10 + 8) + v17;
            if (v11)
              goto LABEL_45;
          }
          else
          {
            v107 = 0;
            if (v11)
            {
LABEL_45:
              v105 = *((_DWORD *)v11 + 8) + v17;
              if (v12)
              {
LABEL_46:
                v102 = *((_DWORD *)v12 + 8) + v17;
LABEL_55:
                if (v13)
                  v101 = *((_DWORD *)v13 + 8) + v17;
                else
                  v101 = 0;
                v19 = v17 + *((_DWORD *)v7 + 8);
                v114 = *((_DWORD *)v8 + 8) + v17;
                if (v18)
                {
                  v100 = *((_DWORD *)v18 + 8) + v17;
                  if (!v14)
                    goto LABEL_80;
                }
                else
                {
                  v100 = 0;
                  if (!v14)
                    goto LABEL_80;
                }
                v20 = v14 + 32;
                goto LABEL_74;
              }
LABEL_54:
              v102 = 0;
              goto LABEL_55;
            }
          }
          v105 = 0;
          if (v12)
            goto LABEL_46;
          goto LABEL_54;
        }
        v17 = *(_DWORD *)(a1 + 16);
        if (v9)
          v104 = *((_DWORD *)v9 + 10) + v17;
        else
          v104 = 0;
        v18 = v113;
        if (v10)
        {
          v107 = *((_DWORD *)v10 + 10) + v17;
          if (v11)
            goto LABEL_50;
        }
        else
        {
          v107 = 0;
          if (v11)
          {
LABEL_50:
            v105 = *((_DWORD *)v11 + 10) + v17;
            if (v12)
            {
LABEL_51:
              v102 = *((_DWORD *)v12 + 10) + v17;
LABEL_60:
              if (v13)
                v101 = *((_DWORD *)v13 + 10) + v17;
              else
                v101 = 0;
              v19 = *((_DWORD *)v7 + 10) + v17;
              v114 = *((_DWORD *)v8 + 10) + v17;
              if (v18)
              {
                v100 = *((_DWORD *)v18 + 10) + v17;
                if (!v14)
                {
LABEL_80:
                  v106 = 0;
                  if (!v9)
                  {
LABEL_81:
                    v103 = 0;
                    if (!v10)
                    {
LABEL_82:
                      v21 = 0;
                      if (!v11)
                      {
LABEL_83:
                        v22 = 0;
                        if (!v12)
                        {
LABEL_84:
                          v23 = 0;
                          if (!v13)
                            goto LABEL_85;
                          goto LABEL_79;
                        }
LABEL_78:
                        v23 = *((unsigned int *)v12 + 9);
                        if (!v13)
                        {
LABEL_85:
                          v24 = 0;
LABEL_86:
                          v25 = *((unsigned int *)v7 + 9);
                          if (v18)
                          {
                            v99 = *((unsigned int *)v18 + 9);
                            if (v14)
                            {
LABEL_88:
                              v26 = *((unsigned int *)v14 + 9);
LABEL_91:
                              v27 = *((unsigned int *)v8 + 9);
                              v28 = v19;
                              v29 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, size_t))(*(_QWORD *)v16 + 32))(v16, v19, v25);
                              if (v29)
                              {
                                v161 = v29;
                                v162 = 0;
                                v163 = v28 | (v25 << 32);
                                madvise(v29, v25, 2);
                                v30 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, size_t))(*(_QWORD *)v16 + 32))(v16, v114, v27);
                                if (v30)
                                {
                                  v153 = v30;
                                  v154 = 0;
                                  v155 = v114 | (v27 << 32);
                                  v156 = 0;
                                  v158 = 0;
                                  v157 = 0;
                                  __p = 0u;
                                  v160 = 0u;
                                  madvise(v30, v27, 2);
                                  if (!(_DWORD)v21
                                    || (v31 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, v107, v21)) == 0)
                                  {
                                    v31 = 0;
                                    v21 = 0;
                                  }
                                  v150 = v31;
                                  v151 = 0;
                                  v152 = v107 | (unint64_t)(v21 << 32);
                                  if (!(_DWORD)v26
                                    || (v32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, v106, v26)) == 0)
                                  {
                                    v32 = 0;
                                    v26 = 0;
                                  }
                                  v147 = v32;
                                  v148 = 0;
                                  v149 = v106 | (unint64_t)(v26 << 32);
                                  if (!(_DWORD)v22
                                    || (v33 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, v105, v22)) == 0)
                                  {
                                    v33 = 0;
                                    v22 = 0;
                                  }
                                  v144 = v33;
                                  v145 = 0;
                                  v146 = v105 | (unint64_t)(v22 << 32);
                                  v34 = v103;
                                  if (!(_DWORD)v103
                                    || (v35 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, v104, v103)) == 0)
                                  {
                                    v35 = 0;
                                    v34 = 0;
                                  }
                                  v140 = v35;
                                  v141 = 0;
                                  v142 = v104 | (unint64_t)(v34 << 32);
                                  v143 = &v144;
                                  if (!(_DWORD)v23
                                    || (v36 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, v102, v23)) == 0)
                                  {
                                    v36 = 0;
                                    v23 = 0;
                                  }
                                  v137 = v36;
                                  v138 = 0;
                                  v139 = v102 | (unint64_t)(v23 << 32);
                                  if (!(_DWORD)v24
                                    || (v37 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, v101, v24)) == 0)
                                  {
                                    v37 = 0;
                                    v24 = 0;
                                  }
                                  v134 = v37;
                                  v135 = 0;
                                  v136 = v101 | (unint64_t)(v24 << 32);
                                  v38 = v99;
                                  if (!(_DWORD)v99
                                    || (v39 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, v100, v99)) == 0)
                                  {
                                    v39 = 0;
                                    v38 = 0;
                                  }
                                  v131 = v39;
                                  v132 = 0;
                                  v133 = v100 | (unint64_t)(v38 << 32);
                                  memset(v129, 0, sizeof(v129));
                                  v130 = 1065353216;
                                  v127 = 0uLL;
                                  v128[0] = 0;
                                  v125 = 0u;
                                  v126 = 0u;
                                  v124 = 0u;
                                  v122 = 0u;
                                  v123 = 0u;
                                  v120 = 0u;
                                  v121 = 0u;
                                  v118 = 0u;
                                  v119 = 0u;
                                  v40 = v162;
                                  if (HIDWORD(v163) != v162)
                                  {
                                    v41 = MEMORY[0x1E0C81028];
                                    do
                                    {
                                      v42 = TDwarfInfoStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf32_compile_unit((uint64_t)&v161);
                                      v43 = v42;
                                      if (!v42)
                                        break;
                                      v117 = 0;
                                      v44 = 8;
                                      if (*((unsigned __int16 *)v42 + 2) < 5u)
                                        v44 = 6;
                                      v117 = *(unsigned int *)((char *)v42 + v44);
                                      *(_QWORD *)buf = &v117;
                                      v45 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v129, &v117, (uint64_t)&std::piecewise_construct, (_DWORD **)buf);
                                      v46 = v45[3];
                                      v47 = v45[4];
                                      *(_QWORD *)&v116 = v46;
                                      *((_QWORD *)&v116 + 1) = v47;
                                      if (v47)
                                      {
                                        v48 = (unint64_t *)(v47 + 8);
                                        do
                                          v49 = __ldxr(v48);
                                        while (__stxr(v49 + 1, v48));
                                      }
                                      if (v46)
                                        goto LABEL_123;
                                      if (HIDWORD(v155) < v117)
                                        goto LABEL_195;
                                      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor((uint64_t)&v153, v117);
                                      TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::abbrev_table((uint64_t *)&v153, buf);
                                      v60 = *(_OWORD *)buf;
                                      *(_QWORD *)buf = 0;
                                      *(_QWORD *)&buf[8] = 0;
                                      v61 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                                      v116 = v60;
                                      if (v61)
                                      {
                                        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
                                        do
                                          v63 = __ldaxr(p_shared_owners);
                                        while (__stlxr(v63 - 1, p_shared_owners));
                                        if (!v63)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                                          std::__shared_weak_count::__release_weak(v61);
                                        }
                                      }
                                      v64 = *(std::__shared_weak_count **)&buf[8];
                                      if (*(_QWORD *)&buf[8])
                                      {
                                        v65 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                                        do
                                          v66 = __ldaxr(v65);
                                        while (__stlxr(v66 - 1, v65));
                                        if (!v66)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                                          std::__shared_weak_count::__release_weak(v64);
                                        }
                                      }
                                      *(_QWORD *)buf = &v117;
                                      v67 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v129, &v117, (uint64_t)&std::piecewise_construct, (_DWORD **)buf);
                                      std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](v67 + 3, (uint64_t *)&v116);
                                      if ((_QWORD)v116)
                                      {
LABEL_123:
                                        v50 = v162;
                                        v51 = v43[1];
                                        if ((unsigned __int16)v51 < 5u)
                                          v52 = 11;
                                        else
                                          v52 = 12;
                                        v53 = operator new();
                                        v54 = v116;
                                        if (*((_QWORD *)&v116 + 1))
                                        {
                                          v55 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                                          do
                                            v56 = __ldxr(v55);
                                          while (__stxr(v56 + 1, v55));
                                        }
                                        *(_QWORD *)v53 = v43;
                                        *(_DWORD *)(v53 + 8) = 0;
                                        *(_QWORD *)(v53 + 12) = v40 | ((unint64_t)(v50 - v40) << 32);
                                        *(_DWORD *)(v53 + 20) = v52;
                                        *(_WORD *)(v53 + 24) = v51;
                                        *(_QWORD *)(v53 + 32) = &v150;
                                        *(_QWORD *)(v53 + 40) = &v140;
                                        *(_QWORD *)(v53 + 48) = &v144;
                                        *(_QWORD *)(v53 + 56) = &v147;
                                        *(_QWORD *)(v53 + 64) = &v131;
                                        *(_OWORD *)(v53 + 72) = v54;
                                        if (*((_QWORD *)&v54 + 1))
                                        {
                                          v57 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
                                          do
                                            v58 = __ldxr(v57);
                                          while (__stxr(v58 + 1, v57));
                                          v115 = v53;
                                          do
                                            v59 = __ldaxr(v57);
                                          while (__stlxr(v59 - 1, v57));
                                          if (!v59)
                                          {
                                            (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
                                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54
                                                                                     + 1));
                                          }
                                        }
                                        else
                                        {
                                          v115 = v53;
                                        }
                                        v68 = v127.i64[1];
                                        if (v127.i64[1] >= v128[0])
                                        {
                                          v69 = (v127.i64[1] - v127.i64[0]) >> 3;
                                          v70 = v69 + 1;
                                          if ((unint64_t)(v69 + 1) >> 61)
                                            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                                          v71 = v128[0] - v127.i64[0];
                                          if ((v128[0] - v127.i64[0]) >> 2 > v70)
                                            v70 = v71 >> 2;
                                          v72 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8
                                              ? 0x1FFFFFFFFFFFFFFFLL
                                              : v70;
                                          *(_QWORD *)&v165 = v128;
                                          v73 = v72
                                              ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v128, v72): 0;
                                          v74 = (uint64_t *)&v73[8 * v69];
                                          v75 = &v73[8 * v72];
                                          *(_QWORD *)&buf[24] = v75;
                                          *v74 = v115;
                                          v76 = v74 + 1;
                                          *(_QWORD *)&buf[16] = v74 + 1;
                                          v77 = (_QWORD *)v127.i64[1];
                                          v78 = (_QWORD *)v127.i64[0];
                                          if (v127.i64[1] == v127.i64[0])
                                          {
                                            v80 = vdupq_n_s64(v127.u64[1]);
                                          }
                                          else
                                          {
                                            do
                                            {
                                              v79 = *--v77;
                                              *v77 = 0;
                                              *--v74 = v79;
                                            }
                                            while (v77 != v78);
                                            v80 = v127;
                                            v76 = *(_QWORD **)&buf[16];
                                            v75 = *(char **)&buf[24];
                                          }
                                          v127.i64[0] = (uint64_t)v74;
                                          v127.i64[1] = (uint64_t)v76;
                                          *(int64x2_t *)&buf[8] = v80;
                                          v81 = v128[0];
                                          v128[0] = v75;
                                          *(_QWORD *)&buf[24] = v81;
                                          *(_QWORD *)buf = v80.i64[0];
                                          std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>::~__split_buffer((uint64_t)buf);
                                          v127.i64[1] = (uint64_t)v76;
                                        }
                                        else
                                        {
                                          *(_QWORD *)v127.i64[1] = v115;
                                          v127.i64[1] = v68 + 8;
                                        }
                                      }
                                      else
                                      {
LABEL_195:
                                        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                                        {
                                          *(_WORD *)buf = 0;
                                          _os_log_impl(&dword_1B40C5000, v41, OS_LOG_TYPE_DEFAULT, "Bad abbrev table offset in compile unit\n", buf, 2u);
                                        }
                                      }
                                      v82 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                                      if (*((_QWORD *)&v116 + 1))
                                      {
                                        v83 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                                        do
                                          v84 = __ldaxr(v83);
                                        while (__stlxr(v84 - 1, v83));
                                        if (!v84)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                          std::__shared_weak_count::__release_weak(v82);
                                        }
                                      }
                                      v40 = v162;
                                    }
                                    while (HIDWORD(v163) != v162);
                                    v86 = (uint64_t *)v127.i64[1];
                                    for (i = (uint64_t *)v127.i64[0]; i != v86; ++i)
                                    {
                                      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(*i, *(_DWORD *)(*i + 20));
                                      v166 = 0;
                                      *(_OWORD *)&buf[16] = 0u;
                                      v165 = 0u;
                                      *(_OWORD *)buf = 0u;
                                      *(_QWORD *)buf = *i;
                                      *(_QWORD *)&buf[8] = &v153;
                                      *(_QWORD *)&buf[16] = &v140;
                                      *(_QWORD *)&buf[24] = &v150;
                                      *(_QWORD *)&v165 = &v144;
                                      *((_QWORD *)&v165 + 1) = &v137;
                                      v166 = &v134;
                                      parse_dies<Dwarf<Dwarf32,Pointer32,LittleEndian>,TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>(*(_DWORD *)(a1 + 32), *i, (uint64_t **)&v127, (uint64_t)buf, a2, a3, a4, a5, &v121, &v124, &v118);
                                    }
                                  }
                                  TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by(a2, *((uint64_t *)&v123 + 1));
                                  std::vector<TRawSourceInfo<Pointer32>>::reserve((void **)(a2 + 208), *((unint64_t *)&v126 + 1));
                                  if ((_QWORD)v122 != *((_QWORD *)&v121 + 1))
                                  {
                                    v87 = (_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * ((unint64_t)v123 / 0x2A));
                                    v88 = *v87 + 96 * ((unint64_t)v123 % 0x2A);
                                    v89 = *(_QWORD *)(*((_QWORD *)&v121 + 1)
                                                    + 8 * ((*((_QWORD *)&v123 + 1) + (_QWORD)v123) / 0x2AuLL))
                                        + 96 * ((*((_QWORD *)&v123 + 1) + (_QWORD)v123) % 0x2AuLL);
                                    while (v88 != v89)
                                    {
                                      TRawSymbolOwnerData<Pointer32>::add_symbol((uint64_t *)a2, v88);
                                      v88 += 96;
                                      if (v88 - *v87 == 4032)
                                      {
                                        v90 = v87[1];
                                        ++v87;
                                        v88 = v90;
                                      }
                                    }
                                  }
                                  v91 = (_QWORD *)(*((_QWORD *)&v124 + 1) + 8 * ((unint64_t)v126 >> 7));
                                  if ((_QWORD)v125 == *((_QWORD *)&v124 + 1))
                                  {
                                    v92 = 0;
                                    v94 = 0;
                                    v93 = (_OWORD **)(*((_QWORD *)&v124 + 1)
                                                    + 8 * ((*((_QWORD *)&v126 + 1) + (_QWORD)v126) >> 7));
                                  }
                                  else
                                  {
                                    v92 = (_OWORD *)(*v91 + 32 * (v126 & 0x7F));
                                    v93 = (_OWORD **)(*((_QWORD *)&v124 + 1)
                                                    + 8 * ((*((_QWORD *)&v126 + 1) + (_QWORD)v126) >> 7));
                                    v94 = &(*v93)[2 * ((*((_QWORD *)&v126 + 1) + v126) & 0x7F)];
                                  }
                                  *(_QWORD *)buf = a2 + 208;
                                  std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRawSourceInfo<Pointer32>,TRawSourceInfo<Pointer32>*,TRawSourceInfo<Pointer32>&,TRawSourceInfo<Pointer32>**,long,128l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRawSourceInfo<Pointer32>,TRawSourceInfo<Pointer32>*,TRawSourceInfo<Pointer32>&,TRawSourceInfo<Pointer32>**,long,128l>,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>>>(v91, v92, v93, v94, (void ***)buf);
                                  if (*((_QWORD *)&v120 + 1))
                                  {
                                    v95 = (_QWORD *)(*((_QWORD *)&v118 + 1) + 8 * ((unint64_t)v120 >> 8));
                                    if ((_QWORD)v119 == *((_QWORD *)&v118 + 1))
                                    {
                                      v96 = 0;
                                      v98 = 0;
                                      v97 = (_OWORD **)(*((_QWORD *)&v118 + 1)
                                                      + 8 * (((_QWORD)v120 + *((_QWORD *)&v120 + 1)) >> 8));
                                    }
                                    else
                                    {
                                      v96 = (_OWORD *)(*v95 + 16 * v120);
                                      v97 = (_OWORD **)(*((_QWORD *)&v118 + 1)
                                                      + 8 * (((_QWORD)v120 + *((_QWORD *)&v120 + 1)) >> 8));
                                      v98 = &(*v97)[(v120 + BYTE8(v120))];
                                    }
                                    *(_QWORD *)buf = a2 + 488;
                                    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRangeValue<Pointer32,char const*>,TRangeValue<Pointer32,char const*>*,TRangeValue<Pointer32,char const*>&,TRangeValue<Pointer32,char const*>**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRangeValue<Pointer32,char const*>,TRangeValue<Pointer32,char const*>*,TRangeValue<Pointer32,char const*>&,TRangeValue<Pointer32,char const*>**,long,256l>,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>>>(v95, v96, v97, v98, (void ***)buf);
                                  }
                                  std::deque<TRangeValue<Pointer32,char const*>>::~deque[abi:ne180100](&v118);
                                  std::deque<TRawSymbol<Pointer32>>::~deque[abi:ne180100](&v121);
                                  std::deque<TRawSourceInfo<Pointer32>>::~deque[abi:ne180100](&v124);
                                  *(_QWORD *)buf = &v127;
                                  std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                                  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::~__hash_table((uint64_t)v129);
                                  if ((_QWORD)__p)
                                  {
                                    *((_QWORD *)&__p + 1) = __p;
                                    operator delete((void *)__p);
                                  }
                                }
                              }
                              return;
                            }
                          }
                          else
                          {
                            v99 = 0;
                            if (v14)
                              goto LABEL_88;
                          }
                          v26 = 0;
                          goto LABEL_91;
                        }
LABEL_79:
                        v24 = *((unsigned int *)v13 + 9);
                        goto LABEL_86;
                      }
LABEL_77:
                      v22 = *((unsigned int *)v11 + 9);
                      if (!v12)
                        goto LABEL_84;
                      goto LABEL_78;
                    }
LABEL_76:
                    v21 = *((unsigned int *)v10 + 9);
                    if (!v11)
                      goto LABEL_83;
                    goto LABEL_77;
                  }
LABEL_75:
                  v103 = *((unsigned int *)v9 + 9);
                  if (!v10)
                    goto LABEL_82;
                  goto LABEL_76;
                }
              }
              else
              {
                v100 = 0;
                if (!v14)
                  goto LABEL_80;
              }
              v20 = v14 + 40;
LABEL_74:
              v106 = *v20 + v17;
              if (!v9)
                goto LABEL_81;
              goto LABEL_75;
            }
LABEL_59:
            v102 = 0;
            goto LABEL_60;
          }
        }
        v105 = 0;
        if (v12)
          goto LABEL_51;
        goto LABEL_59;
      }
    }
  }
}

void sub_1B411F3C4()
{
  uint64_t v0;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&v0);
  JUMPOUT(0x1B411F494);
}

uint64_t extract_stabs_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(char a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v14 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a5 + 24), "__LINKEDIT");
  v15 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symtab(*(_QWORD *)(a5 + 24));
  v16 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::dysymtab(*(_QWORD *)(a5 + 24));
  if (!v15)
    return 0;
  v17 = v16;
  v42 = a7;
  v43 = a6;
  v18 = *(_QWORD *)(a5 + 8);
  v19 = v15[3];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
  {
    v20 = *(_DWORD *)(v14 + 32);
    v21 = *(_DWORD *)(a5 + 32) + *(_DWORD *)(v14 + 24);
    v22 = v21 + v15[2] - v20;
    v23 = v21 - v20 + v15[4];
    if (!(_DWORD)v19)
      return 1;
  }
  else if ((*(_BYTE *)(a5 + 50) & 8) != 0)
  {
    if (*(_BYTE *)(a5 + 64))
      v25 = *(_DWORD *)(a5 + 56);
    else
      v25 = 0;
    v26 = *(_DWORD *)(a5 + 16);
    v22 = v15[2] + v26 - v25;
    v23 = v15[4] + v26 - v25;
    if (!(_DWORD)v19)
      return 1;
  }
  else
  {
    v24 = *(_DWORD *)(a5 + 16);
    v22 = v15[2] + v24;
    v23 = v15[4] + v24;
    if (!(_DWORD)v19)
      return 1;
  }
  if (!v15[5])
    return 1;
  v40 = v23;
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 32))(v18, v22, 12 * v19);
  v41 = result;
  if (result)
  {
    v28 = v15[5];
    if ((a1 & 1) != 0)
    {
      v29 = v40 | (unint64_t)(v28 << 32);
      if (a2 && a4)
      {
        extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer32,LittleEndian>>(a5, v43, result, v19, v29);
        extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>>(a2, a3, a4, a5, v43);
      }
      else
      {
        extract_direct_stabs_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(a5, (uint64_t)v43, result, v19, v29, v42);
      }
    }
    result = 1;
    if (v14)
    {
      if (v17 && v17[14] && (a1 & 2) != 0 && v17[15])
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
        {
          v30 = v28;
          v31 = v17[14] + *(_DWORD *)(v14 + 24) - *(_DWORD *)(v14 + 32) + *(_DWORD *)(a5 + 32);
        }
        else if ((*(_BYTE *)(a5 + 50) & 8) != 0)
        {
          v30 = v28;
          v32 = *(_DWORD *)(a5 + 56);
          if (!*(_BYTE *)(a5 + 64))
            v32 = 0;
          v31 = v17[14] + *(_DWORD *)(a5 + 16) - v32;
        }
        else
        {
          v30 = v28;
          v31 = v17[14] + *(_DWORD *)(a5 + 16);
        }
        v33 = v17[15];
        v34 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 32))(v18, v31, 4 * v33);
        v35 = v34;
        if (!(_DWORD)v33 || v34)
        {
          v36 = *(_QWORD *)(a5 + 24);
          v37 = *(unsigned int *)(v36 + 20);
          v44 = *(_DWORD *)(v36 + 16);
          v45 = v36;
          v46 = v36 + 28 + v37;
          v48 = 0;
          v49 = 0;
          v47 = v36 + 28;
          v38 = TSectionIterator<SizeAndEndianness<Pointer32,LittleEndian>>::section((uint64_t)&v44);
          if (v38)
          {
            v39 = v38;
            do
            {
              if (*((_BYTE *)v39 + 56) == 8)
                extract_indirect_stabs_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(a5, v43, v39, v35, v33, v41, v19, v40 | (unint64_t)(v30 << 32), v42);
              v39 = TSectionIterator<SizeAndEndianness<Pointer32,LittleEndian>>::section((uint64_t)&v44);
            }
            while (v39);
          }
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

void extract_function_starts_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t *a2, char a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v6 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::function_starts(*(_QWORD *)(a1 + 24));
  if (v6)
  {
    v7 = v6;
    if (v6[3])
    {
      v8 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__LINKEDIT");
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)(a1 + 8);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
        {
          v11 = v7[2] - *(_DWORD *)(v9 + 32) + *(_DWORD *)(v9 + 24) + *(_DWORD *)(a1 + 32);
        }
        else if ((*(_BYTE *)(a1 + 50) & 8) != 0)
        {
          v12 = *(_DWORD *)(a1 + 56);
          if (!*(_BYTE *)(a1 + 64))
            v12 = 0;
          v11 = v7[2] + *(_DWORD *)(a1 + 16) - v12;
        }
        else
        {
          v11 = v7[2] + *(_DWORD *)(a1 + 16);
        }
        v13 = v7[3];
        v14 = v11;
        v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 32))(v10, v11, v13);
        if (v15)
        {
          v16 = v15;
          v24 = v15;
          v25 = 0;
          v26 = v14 | (v13 << 32);
          v17 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__TEXT");
          if (v17)
          {
            v18 = *(_DWORD *)(a1 + 32) + *(_DWORD *)(v17 + 24);
            v23 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                + 8) & 0xFFFFFF) << 32);
            if (CSCppArchitecture::matches((CSCppArchitecture *)&v23, 0xCuLL))
            {
              v19 = 0;
              goto LABEL_16;
            }
            v22 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                + 8) & 0xFFFFFF) << 32);
            v20 = CSCppArchitecture::matches((CSCppArchitecture *)&v22, 0x100000CuLL);
            v16 = v24;
            v19 = v25;
            if (v20)
            {
LABEL_16:
              if (*(_BYTE *)(v16 + v19))
              {
                do
                {
                  v18 += TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(&v24);
                  if ((v18 & 1) != 0)
                    v21 = 272629824;
                  else
                    v21 = 272629760;
                  TRawSymbolOwnerData<Pointer32>::emplace_symbol(a2, v18 & 0xFFFFFFFE, 0, (uint64_t)"$$$function-starts-fake-name$$$", (uint64_t)"$$$function-starts-fake-mangled-name$$$", v21, 0, a3);
                }
                while (*(_BYTE *)(v24 + v25));
              }
              return;
            }
            while (*(_BYTE *)(v24 + v25))
            {
              v18 += TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(&v24);
              TRawSymbolOwnerData<Pointer32>::emplace_symbol(a2, v18, 0, (uint64_t)"$$$function-starts-fake-name$$$", (uint64_t)"$$$function-starts-fake-mangled-name$$$", 272629760, 0, a3);
            }
          }
        }
      }
    }
  }
}

unsigned int *extract_debug_map_data_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  v4 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__LINKEDIT");
  result = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symtab(*(_QWORD *)(a1 + 24));
  if (!result || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 12) == 9)
    return result;
  v6 = result;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = result[3];
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  if ((_DWORD)result)
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = *(_DWORD *)(a1 + 32) + *(_DWORD *)(v4 + 24);
    v11 = v10 + v6[2] - v9;
    v12 = v10 - v9 + v6[4];
    if (!(_DWORD)v8)
      return result;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(a1 + 50) & 8) == 0)
  {
    v13 = *(_DWORD *)(a1 + 16);
    v11 = v6[2] + v13;
    v12 = v6[4] + v13;
    if (!(_DWORD)v8)
      return result;
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 64))
    v14 = *(_DWORD *)(a1 + 56);
  else
    v14 = 0;
  v15 = *(_DWORD *)(a1 + 16);
  v11 = v6[2] + v15 - v14;
  v12 = v6[4] + v15 - v14;
  if ((_DWORD)v8)
  {
LABEL_13:
    if (v6[5])
    {
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 32))(v7, v11, 12 * v8);
      if (result)
      {
        v16 = (uint64_t)result;
        v17 = v12 | ((unint64_t)v6[5] << 32);
        extract_debug_maps_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(a1, a2, (uint64_t)result, v8, v17);
        return extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(a1, a2, v16, v8, v17);
      }
    }
  }
  return result;
}

unint64_t TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::gc_support_flags(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(v2 + 20);
  v11 = *(_DWORD *)(v2 + 16);
  v12 = v2;
  v13 = v2 + 28 + v3;
  v14 = v2 + 28;
  result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (result)
  {
    v5 = result;
    while (1)
    {
      if (*(_DWORD *)v5 == 1
        && (!strcmp("__OBJC", (const char *)(v5 + 8)) || !strcmp("__DATA", (const char *)(v5 + 8))))
      {
        v6 = *(unsigned int *)(v5 + 48);
        if ((_DWORD)v6)
          break;
      }
LABEL_11:
      result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      v5 = result;
      if (!result)
        return result;
    }
    v7 = v5 + 56;
    while (strncmp((const char *)v7, "__image_info", 0x10uLL) && strncmp((const char *)v7, "__objc_imageinfo", 0x10uLL))
    {
      v7 += 68;
      if (!--v6)
        goto LABEL_11;
    }
    if (*(_DWORD *)(v7 + 36) >= 8u && *(_DWORD *)(v7 + 40))
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
      {
        v8 = *(_DWORD *)(v7 + 32);
        v9 = *(_DWORD *)(a1 + 32);
      }
      else
      {
        v8 = *(_DWORD *)(a1 + 16);
        v9 = *(_DWORD *)(v7 + 40);
      }
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), (v9 + v8), 8);
      if (v10)
        return *(_DWORD *)(v10 + 4) | 1u;
      else
        return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sort_and_filter_extracted_data<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  char *v5;
  int v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  _BOOL4 v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  __n128 v46;
  uint64_t v47;
  unsigned int *v48;
  char v49;
  unsigned int v50;
  int v51;
  unsigned int *v52;
  unsigned int *v53;
  char v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  unsigned int *v62;
  char *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  __int16 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t i;
  __int16 v76;
  uint64_t j;
  __int16 v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  char v86;
  int v87;
  unsigned int v88;
  int *v89;
  _DWORD *v90;
  _DWORD *v91;
  unint64_t v92;
  int *v93;
  unsigned int *v94;
  unsigned int v95;
  unint64_t v96;
  _DWORD *v97;
  unint64_t v98;
  unsigned int *v99;
  _DWORD *v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int *v104;
  __int128 v105;
  unsigned int *v106;
  unsigned int *v107;
  int *v108;
  int *v109;
  int v110;
  const char *v111;
  int v112;
  char v113;
  const char *v114;
  int v115;
  size_t v116;
  int v117;
  _DWORD *v118;
  void *v119;
  int v120;
  int v121;
  int64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  int v132;
  _DWORD *v133;
  _OWORD *v134;
  void **v135;
  int64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  _OWORD *v146;
  void *v147;
  int v148;
  uint64_t v149;
  _QWORD *v150;
  void *__p[2];
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  _DWORD *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unsigned int *v160;
  char *v161;
  void **v162;

  v2 = (_QWORD *)a2;
  v149 = TRawSymbolOwnerData<Pointer32>::mutable_sorted_symbols(a2);
  v150 = v2;
  v4 = *(_DWORD *)(a1 + 32);
  v160 = 0;
  v161 = 0;
  v159 = 0;
  v5 = *(char **)(a1 + 24);
  v6 = *((_DWORD *)v5 + 3);
  if (v6 == 9 || v6 == 10 && (*(_DWORD *)(a1 + 48) & 0x38000000) != 0x10000000)
  {
    v29 = 0;
  }
  else
  {
    v7 = *((unsigned int *)v5 + 5);
    LODWORD(v153) = *((_DWORD *)v5 + 4);
    v154 = v5;
    v155 = &v5[v7 + 28];
    v157 = 0;
    v158 = 0;
    v156 = v5 + 28;
    while (1)
    {
      v8 = (const char *)TSectionIterator<SizeAndEndianness<Pointer32,LittleEndian>>::section((uint64_t)&v153);
      v9 = v8;
      if (!v8)
        break;
      v10 = *((_DWORD *)v8 + 9);
      if (v10)
      {
        v11 = *((_DWORD *)v8 + 14);
        v28 = 0;
        if (!strcmp(v8 + 16, "__TEXT"))
        {
          v12 = v11 == 11 || v11 == 0;
          if (v12 && (v11 & 0x80000400) != 0)
            v28 = 1;
        }
        if (!strstr((char *)v9 + 16, "__LINKINFO"))
        {
          v14 = *((_DWORD *)v9 + 8) + v4;
          v15 = v160;
          if (v160 >= (unsigned int *)v161)
          {
            v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v160 - v159) >> 2);
            v18 = v17 + 1;
            if (v17 + 1 > 0x1555555555555555)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v161 - v159) >> 2) > v18)
              v18 = 0x5555555555555556 * ((v161 - v159) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v161 - v159) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v19 = 0x1555555555555555;
            else
              v19 = v18;
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>((uint64_t)&v161, v19);
            v22 = &v20[12 * v17];
            *(_DWORD *)v22 = v14;
            *((_DWORD *)v22 + 1) = v10;
            *((_DWORD *)v22 + 2) = v28;
            v24 = v159;
            v23 = (char *)v160;
            v25 = v22;
            if (v160 != (unsigned int *)v159)
            {
              do
              {
                v26 = *(_QWORD *)(v23 - 12);
                v23 -= 12;
                v27 = *((_DWORD *)v23 + 2);
                *(_QWORD *)(v25 - 12) = v26;
                v25 -= 12;
                *((_DWORD *)v25 + 2) = v27;
              }
              while (v23 != v24);
              v23 = v159;
            }
            v16 = (unsigned int *)(v22 + 12);
            v159 = v25;
            v160 = (unsigned int *)(v22 + 12);
            v161 = &v20[12 * v21];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *v160 = v14;
            v15[1] = v10;
            v16 = v15 + 3;
            v15[2] = v28;
          }
          v160 = v16;
        }
      }
    }
    v29 = (unsigned int *)v159;
    v30 = v160;
    v2 = v150;
    if (v160 != (unsigned int *)v159)
      goto LABEL_50;
  }
  v31 = (uint64_t *)v2[20];
  v32 = (uint64_t *)v2[21];
  if (v31 == v32)
    goto LABEL_191;
  do
  {
    v33 = *v31;
    v34 = v31[1];
    if (v29 >= (unsigned int *)v161)
    {
      v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - v159) >> 2);
      v36 = v35 + 1;
      if (v35 + 1 > 0x1555555555555555)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v161 - v159) >> 2) > v36)
        v36 = 0x5555555555555556 * ((v161 - v159) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v161 - v159) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v37 = 0x1555555555555555;
      else
        v37 = v36;
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>((uint64_t)&v161, v37);
      v40 = &v38[12 * v35];
      *(_DWORD *)v40 = v33;
      *((_DWORD *)v40 + 1) = v34;
      *((_DWORD *)v40 + 2) = 0;
      v42 = v159;
      v41 = (char *)v160;
      v43 = v40;
      if (v160 != (unsigned int *)v159)
      {
        do
        {
          v44 = *(_QWORD *)(v41 - 12);
          v41 -= 12;
          v45 = *((_DWORD *)v41 + 2);
          *(_QWORD *)(v43 - 12) = v44;
          v43 -= 12;
          *((_DWORD *)v43 + 2) = v45;
        }
        while (v41 != v42);
        v41 = v159;
      }
      v29 = (unsigned int *)(v40 + 12);
      v159 = v43;
      v160 = (unsigned int *)(v40 + 12);
      v161 = &v38[12 * v39];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *v29 = v33;
      v29[1] = v34;
      v29[2] = 0;
      v29 += 3;
    }
    v160 = v29;
    v31 += 3;
  }
  while (v31 != v32);
  v30 = v29;
  v29 = (unsigned int *)v159;
LABEL_50:
  if (v29 == v30)
  {
    v29 = v30;
    goto LABEL_191;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *,false>((uint64_t)v29, v30, (uint64_t)&v153, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v30 - v29)), 1);
  v47 = v149;
  v48 = *(unsigned int **)v149;
  v154 = 0;
  v155 = 0;
  v153 = 0;
  if ((unint64_t)v48 < *(_QWORD *)(v149 + 8))
  {
    v49 = 0;
    v148 = 0;
    v50 = 0;
    v51 = 0;
    while (2)
    {
      v52 = v48;
      while (2)
      {
        v53 = v52 + 24;
        while (1)
        {
          v54 = atomic_load(v52 + 5);
          if ((v54 & 2) == 0)
            break;
          v52 += 24;
          v55 = *(_QWORD *)(v47 + 8);
          v53 += 24;
          if ((unint64_t)v52 >= v55)
            goto LABEL_89;
        }
        v56 = v52 + 5;
        v57 = *v52;
        if (*v52 - v51 < v50)
        {
          v58 = (uint64_t)v150;
        }
        else
        {
          v58 = (uint64_t)v150;
          if (v160 == (unsigned int *)v159)
            goto LABEL_200;
          v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v160 - v159) >> 2);
          v60 = v159;
          do
          {
            v61 = v59 >> 1;
            v62 = (unsigned int *)&v60[12 * (v59 >> 1)];
            v64 = *v62;
            v63 = (char *)(v62 + 3);
            v59 += ~(v59 >> 1);
            if (v57 < v64)
              v59 = v61;
            else
              v60 = v63;
          }
          while (v59);
          if (v60 == v159 || v57 - *((_DWORD *)v60 - 3) >= *((_DWORD *)v60 - 2))
          {
LABEL_200:
            do
              v65 = __ldxr(v56);
            while (__stxr(v65 | 0x1000, v56));
            v52 += 24;
            v47 = v149;
            v55 = *(_QWORD *)(v149 + 8);
            v49 = 1;
            if ((unint64_t)v52 < v55)
              continue;
LABEL_90:
            for (i = *(_QWORD *)v47; ; i += 96)
            {
              if (i == v55)
                goto LABEL_101;
              v76 = atomic_load((unsigned int *)(i + 20));
              if ((v76 & 0x1000) != 0)
                break;
            }
            if (i == v55)
            {
LABEL_101:
              i = v55;
              goto LABEL_102;
            }
            for (j = i + 96; j != v55; j += 96)
            {
              v78 = atomic_load((unsigned int *)(j + 20));
              if ((v78 & 0x1000) == 0)
              {
                TRawSymbol<Pointer32>::operator=(i, j);
                i += 96;
              }
            }
LABEL_102:
            std::vector<TRawSymbol<Pointer32>>::erase(v47, i, *(_QWORD *)(v47 + 8));
            goto LABEL_103;
          }
          v51 = *((_DWORD *)v60 - 3);
          v50 = *((_DWORD *)v60 - 2);
          v148 = *((_DWORD *)v60 - 1);
        }
        break;
      }
      sort_inlined_functions<Pointer32>((uint64_t)v52);
      v48 = *(unsigned int **)(v149 + 8);
      while (v53 != v48)
      {
        v66 = *v53;
        v53 += 24;
        if (v66 != *v52)
        {
          v48 = v53 - 24;
          break;
        }
      }
      v67 = v52 + 5;
      v68 = atomic_load(v52 + 5);
      if ((v68 & 0x100) == 0)
      {
        v69 = *v52;
        v70 = v50 + v51 - *v52;
        if (v48 == *(unsigned int **)(v149 + 8))
          v71 = v50 + v51 - v69;
        else
          v71 = *v48 - v69;
        if (v71 < v70)
          v70 = v71;
        v72 = v52[1];
        if (v72 >= v70)
          v73 = v70;
        else
          v73 = v52[1];
        if (v72)
          v70 = v73;
        v52[1] = v70;
      }
      v74 = atomic_load(v67);
      atomic_store(v74 | v148, v67);
      TRawSymbolOwnerData<Pointer32>::aliases_for_symbol(v58, v52, (uint64_t *)__p);
      std::vector<TRawSymbol<Pointer32>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>>((uint64_t *)&v153, (uint64_t)v154, (uint64_t)__p[0], (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 5));
      v47 = v149;
      v162 = __p;
      std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v162);
      v55 = *(_QWORD *)(v149 + 8);
      if ((unint64_t)v48 < v55)
        continue;
      break;
    }
LABEL_89:
    if ((v49 & 1) == 0)
      goto LABEL_103;
    goto LABEL_90;
  }
LABEL_103:
  if (v153 != v154)
  {
    __p[1] = 0;
    v152 = 0;
    __p[0] = 0;
    std::vector<TRawSymbol<Pointer32>>::reserve((uint64_t *)__p, 0xAAAAAAAAAAAAAAABLL * ((v154 - v153) >> 5)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(v47 + 8) - *(_QWORD *)v47) >> 5));
    std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>>(*(_DWORD **)v47, *(_DWORD **)(v47 + 8), v153, v154, (uint64_t *)__p);
    std::vector<TRawSymbol<Pointer32>>::__vdeallocate((void **)v47);
    *(_OWORD *)v47 = *(_OWORD *)__p;
    *(_QWORD *)(v47 + 16) = v152;
    __p[0] = 0;
    __p[1] = 0;
    v152 = 0;
    v162 = __p;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v162);
  }
  v79 = (char *)v150[26];
  v80 = (char *)v150[27];
  if (v80 - v79 <= 4096)
  {
    v81 = 0;
    v83 = 0;
  }
  else
  {
    v81 = (char *)std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer32>>((v80 - v79) >> 5);
    v83 = v82;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(v79, v80, (uint64_t)&v162, (v80 - v79) >> 5, v81, v83, v46);
  if (v81)
    operator delete(v81);
  v85 = v150[26];
  v84 = (unsigned int *)v150[27];
  if ((unsigned int *)v85 != v84)
  {
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = (int *)v150[26];
    while (1)
    {
      v90 = *(_DWORD **)v47;
      v91 = *(_DWORD **)(v47 + 8);
      v92 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v91 - *(_QWORD *)v47) >> 5);
      v93 = v89 + 16;
      v94 = (unsigned int *)v89;
      while (1)
      {
        v95 = *v94;
        if (*v94 - v87 < v88)
          break;
        if (v91 != v90)
        {
          v96 = v92;
          v97 = v90;
          do
          {
            v98 = v96 >> 1;
            v99 = &v97[24 * (v96 >> 1)];
            v101 = *v99;
            v100 = v99 + 24;
            v96 += ~(v96 >> 1);
            if (v95 < v101)
              v96 = v98;
            else
              v97 = v100;
          }
          while (v96);
          if (v97 != v90 && v95 - *(v97 - 24) < *(v97 - 23))
          {
            v87 = *(v97 - 24);
            v88 = *(v97 - 23);
            break;
          }
        }
        v94[5] |= 0x80000000;
        v94 += 8;
        v93 += 8;
        v86 = 1;
        if (v94 == v84)
          goto LABEL_133;
      }
      v94[1] = v88 - v95 + v87;
      v89 = (int *)(v94 + 8);
      if (v94 + 8 == v84)
        break;
      v102 = *v89;
      if (*v89 == v95)
      {
        while (1)
        {
          *(v93 - 11) |= 0x80000000;
          *(v93 - 7) = *(v93 - 15);
          if (v93 == (int *)v84)
            goto LABEL_133;
          v103 = *v93;
          v93 += 8;
          v102 = v103;
          if (v103 != v95)
          {
            v89 = v93 - 8;
            v94 = (unsigned int *)(v93 - 16);
            v86 = 1;
            break;
          }
        }
      }
      if (v102 - v95 < v94[1])
        v94[1] = v102 - v95;
    }
    if ((v86 & 1) == 0)
      goto LABEL_145;
LABEL_133:
    if ((unsigned int *)v85 != v84)
    {
      while ((*(_DWORD *)(v85 + 20) & 0x80000000) == 0)
      {
        v85 += 32;
        if ((unsigned int *)v85 == v84)
          goto LABEL_145;
      }
    }
    if ((unsigned int *)v85 != v84)
    {
      v104 = (unsigned int *)(v85 + 32);
      if ((unsigned int *)(v85 + 32) != v84)
      {
        do
        {
          if ((v104[5] & 0x80000000) == 0)
          {
            v105 = *(_OWORD *)v104;
            *(_OWORD *)(v85 + 12) = *(_OWORD *)(v104 + 3);
            *(_OWORD *)v85 = v105;
            v85 += 32;
          }
          v104 += 8;
        }
        while (v104 != v84);
        v84 = (unsigned int *)v150[27];
      }
      if ((unsigned int *)v85 != v84)
        v150[27] = v85;
    }
  }
LABEL_145:
  v106 = (unsigned int *)v150[61];
  v107 = (unsigned int *)v150[62];
  if (v106 == v107)
    goto LABEL_190;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *,false>(v106, v107, (uint64_t)&v162, 126 - 2 * __clz(((char *)v107 - (char *)v106) >> 4), 1);
  __p[0] = 0;
  __p[1] = 0;
  v152 = 0;
  std::vector<TRangeValue<Pointer32,char const*>>::reserve(__p, (uint64_t)(v150[62] - v150[61]) >> 4);
  v109 = (int *)v150[61];
  v108 = (int *)v150[62];
  if (v109 == v108)
  {
    v108 = (int *)v150[61];
  }
  else
  {
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 1;
    do
    {
      v114 = (const char *)*((_QWORD *)v109 + 1);
      if ((v113 & 1) != 0)
      {
        v113 = 0;
        v112 = *v109;
        v115 = v109[1];
        v109 += 4;
        v110 = v115 + v112;
        v111 = v114;
      }
      else
      {
        v116 = strlen(v111);
        if (!strncmp(v111, v114, v116))
        {
          v113 = 0;
          v120 = *v109;
          v121 = v109[1];
          v109 += 4;
          v110 = v121 + v120;
        }
        else
        {
          v117 = v110 - v112;
          v118 = __p[1];
          if (__p[1] >= v152)
          {
            v122 = ((char *)__p[1] - (char *)__p[0]) >> 4;
            v123 = v122 + 1;
            if ((unint64_t)(v122 + 1) >> 60)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v124 = v152 - (char *)__p[0];
            if ((v152 - (char *)__p[0]) >> 3 > v123)
              v123 = v124 >> 3;
            if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
              v125 = 0xFFFFFFFFFFFFFFFLL;
            else
              v125 = v123;
            v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v152, v125);
            v128 = &v126[16 * v122];
            *(_DWORD *)v128 = v112;
            *((_DWORD *)v128 + 1) = v117;
            *((_QWORD *)v128 + 1) = v111;
            v130 = (char *)__p[0];
            v129 = (char *)__p[1];
            v131 = v128;
            if (__p[1] != __p[0])
            {
              do
              {
                *((_OWORD *)v131 - 1) = *((_OWORD *)v129 - 1);
                v131 -= 16;
                v129 -= 16;
              }
              while (v129 != v130);
              v129 = (char *)__p[0];
            }
            v119 = v128 + 16;
            __p[0] = v131;
            __p[1] = v128 + 16;
            v152 = &v126[16 * v127];
            if (v129)
              operator delete(v129);
          }
          else
          {
            *(_DWORD *)__p[1] = v112;
            v118[1] = v117;
            v119 = v118 + 4;
            *((_QWORD *)v118 + 1) = v111;
          }
          v112 = 0;
          v111 = 0;
          v110 = 0;
          __p[1] = v119;
          v108 = (int *)v150[62];
          v113 = 1;
        }
      }
    }
    while (v109 != v108);
    if (v111 && v112 && v110)
    {
      v132 = v110 - v112;
      v133 = __p[1];
      if (__p[1] >= v152)
      {
        v135 = (void **)v150;
        v136 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v137 = v136 + 1;
        if ((unint64_t)(v136 + 1) >> 60)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v138 = v152 - (char *)__p[0];
        if ((v152 - (char *)__p[0]) >> 3 > v137)
          v137 = v138 >> 3;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
          v139 = 0xFFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v152, v139);
        v141 = &v140[16 * v136];
        v143 = &v140[16 * v142];
        *(_DWORD *)v141 = v112;
        *((_DWORD *)v141 + 1) = v132;
        *((_QWORD *)v141 + 1) = v111;
        v134 = v141 + 16;
        v145 = (char *)__p[0];
        v144 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            *((_OWORD *)v141 - 1) = *((_OWORD *)v144 - 1);
            v141 -= 16;
            v144 -= 16;
          }
          while (v144 != v145);
          v144 = (char *)__p[0];
        }
        __p[0] = v141;
        __p[1] = v134;
        v152 = v143;
        if (v144)
          operator delete(v144);
      }
      else
      {
        *(_DWORD *)__p[1] = v112;
        v133[1] = v132;
        v134 = v133 + 4;
        *((_QWORD *)v133 + 1) = v111;
        v135 = (void **)v150;
      }
      __p[1] = v134;
      v108 = (int *)v135[62];
      goto LABEL_186;
    }
  }
  v134 = __p[1];
  v135 = (void **)v150;
LABEL_186:
  v146 = __p[0];
  v147 = v135[61];
  if ((char *)v134 - (char *)__p[0] < (unint64_t)((char *)v108 - (_BYTE *)v147))
  {
    v135[62] = v147;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>,0>(v146, v134, v135 + 61);
    v146 = __p[0];
  }
  if (v146)
  {
    __p[1] = v146;
    operator delete(v146);
  }
LABEL_190:
  __p[0] = &v153;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v29 = (unsigned int *)v159;
LABEL_191:
  if (v29)
  {
    v160 = v29;
    operator delete(v29);
  }
}

void sub_1B41208BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;

  *(_QWORD *)(v23 - 88) = &a13;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 88));
  a13 = &a16;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer32>::slide_to_segment_addresses(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _DWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  void *__p;
  _DWORD *v25;
  char v26;

  create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(a2, a3, 0, (uint64_t)&__p);
  if (a1 + 376 != a2 && *(_QWORD *)(a1 + 376) == *(_QWORD *)(a1 + 384))
    std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((char *)(a1 + 376), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  v7 = __p;
  if (__p == v25)
    goto LABEL_22;
  adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer32>((char **)(a1 + 376), &__p);
  if ((a4 & 1) == 0)
  {
    adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer32>((char **)(a1 + 160), &__p);
    v8 = *(_QWORD *)(a1 + 160);
    v9 = *(unint64_t **)(a1 + 168);
    v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v8) >> 3));
    if (v9 == (unint64_t *)v8)
      v11 = 0;
    else
      v11 = v10;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(v8, v9, (uint64_t)&v26, v11, 1);
  }
  adjustSymbolsToMatchSegmentDeltas<Pointer32>(a1 + 184, &__p);
  v12 = *(int **)(a1 + 184);
  v13 = *(unsigned int **)(a1 + 192);
  v14 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v12) >> 5));
  v15 = v13 == (unsigned int *)v12 ? 0 : v14;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,false>(v12, v13, (uint64_t)&v26, v15, 1);
  adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer32>,Pointer32>((char **)(a1 + 208), &__p);
  v16 = *(_QWORD *)(a1 + 208);
  v17 = *(_OWORD **)(a1 + 216);
  v18 = 126 - 2 * __clz((uint64_t)((uint64_t)v17 - v16) >> 5);
  v19 = v17 == (_OWORD *)v16 ? 0 : v18;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,false>(v16, v17, (uint64_t)&v26, v19, 1);
  v20 = *(_DWORD *)(a1 + 236);
  v7 = __p;
  if (!v20 || __p >= v25)
  {
LABEL_22:
    if (!v7)
      return;
    goto LABEL_23;
  }
  v21 = *(_DWORD *)(a1 + 232);
  v22 = v21 + v20;
  v23 = (unsigned int *)__p;
  while (v21 < *v23 || v22 > v23[1] + *v23)
  {
    v23 += 3;
    if (v23 >= v25)
      goto LABEL_22;
  }
  *(_DWORD *)(a1 + 232) = v23[2] + v21;
  if (v7)
  {
LABEL_23:
    v25 = v7;
    operator delete(v7);
  }
}

void sub_1B4120B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void std::sort[abi:ne180100]<std::__wrap_iter<CSCppSectionRange *>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v4;

  v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (unint64_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(a1, a2, (uint64_t)&v4, v3, 1);
}

void std::default_delete<TAddressRelocator<Pointer32>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1B5E36940);
  }
}

_OWORD *std::remove_if[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange *>,TAddressRelocator<Pointer32> * create_slide_functor_if_needed<Pointer32>(std::vector<CSCppSegmentRange>,std::vector<CSCppSegmentRange>,CSCppDsymData *)::{lambda(CSCppSegmentRange)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  const char *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  _OWORD *v10;
  const char *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  __int128 v17;

  if (a1 == a2)
    return (_OWORD *)a2;
  for (i = a1 + 32; ; i += 32)
  {
    v4 = *(const char **)(i - 16);
    v5 = strncmp(v4, "__OBJC_RO", 9uLL);
    v6 = strncmp(v4, "__OBJC_RW", 9uLL);
    v7 = !v5 || v6 == 0;
    if (v7)
      break;
    v8 = strncmp(v4, "__DWARF", 7uLL);
    v9 = strncmp(v4, "__OBJC_CONST", 0xCuLL);
    if (!v8 || !v9)
      break;
    v7 = i == a2;
    if (v7)
      return (_OWORD *)a2;
  }
  v10 = (_OWORD *)(i - 32);
  if (i - 32 != a2 && i != a2)
  {
    do
    {
      v11 = *(const char **)(i + 16);
      v12 = strncmp(v11, "__OBJC_RO", 9uLL);
      v13 = strncmp(v11, "__OBJC_RW", 9uLL);
      if (v12)
        v14 = v13 == 0;
      else
        v14 = 1;
      if (!v14)
      {
        v15 = strncmp(v11, "__DWARF", 7uLL);
        v16 = strncmp(v11, "__OBJC_CONST", 0xCuLL);
        if (v15)
        {
          if (v16)
          {
            v17 = *(_OWORD *)(i + 16);
            *v10 = *(_OWORD *)i;
            v10[1] = v17;
            v10 += 2;
          }
        }
      }
      i += 32;
    }
    while (i != a2);
  }
  return v10;
}

void create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  CSCppSegmentRange *v20;
  const char *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  unsigned int *v41;
  unint64_t v42;
  uint64_t v43;
  void *__p;
  char *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  char v50;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - *(_QWORD *)a1;
  if (v8 != *(_QWORD *)a1 && *(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&v47, v7, v8, v9 >> 5);
    v11 = *(const void **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (v12 - *(_QWORD *)a2) >> 5;
    v45 = 0;
    v46 = 0;
    __p = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&__p, v11, v12, v13);
    v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v14 != 32 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    {
      v15 = 126 - 2 * __clz((v48 - (_BYTE *)v47) >> 5);
      if (v48 == v47)
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer32,Pointer32::off_t>> create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer32&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)v47, (unint64_t *)v48, (uint64_t)&v50, v16, 1);
      v17 = 126 - 2 * __clz((v45 - (_BYTE *)__p) >> 5);
      if (v45 == __p)
        v18 = 0;
      else
        v18 = v17;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer32,Pointer32::off_t>> create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer32&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)__p, (unint64_t *)v45, (uint64_t)&v50, v18, 1);
      v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    }
    v19 = (char *)v47;
    v20 = (CSCppSegmentRange *)__p;
    std::vector<TRangeValue<Pointer32,unsigned int>>::reserve((char **)a4, v14 >> 5);
    if (v19 != v48 && v20 != (CSCppSegmentRange *)v45)
    {
      do
      {
        v21 = (const char *)*((_QWORD *)v20 + 3);
        if (!v21)
          v21 = (const char *)*((_QWORD *)v20 + 2);
        v22 = (const char *)*((_QWORD *)v19 + 3);
        if (!v22)
          v22 = (const char *)*((_QWORD *)v19 + 2);
        if (!strncmp(v21, v22, 0x10uLL))
          goto LABEL_24;
        if (CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v19))
        {
          v19 += 32;
          if (v19 == v48)
            break;
          continue;
        }
        if (!CSCppSegmentRange::is_skippable(v20))
        {
LABEL_24:
          v23 = *(_DWORD *)v19;
          v24 = *(_DWORD *)v20 - *(_DWORD *)v19;
          v25 = *((_DWORD *)v19 + 2);
          v27 = *(_DWORD **)(a4 + 8);
          v26 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v27 >= v26)
          {
            v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - *(_QWORD *)a4) >> 2);
            v30 = v29 + 1;
            if (v29 + 1 > 0x1555555555555555)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a4) >> 2);
            if (2 * v31 > v30)
              v30 = 2 * v31;
            if (v31 >= 0xAAAAAAAAAAAAAAALL)
              v32 = 0x1555555555555555;
            else
              v32 = v30;
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>(a4 + 16, v32);
            v35 = &v33[12 * v29];
            *(_DWORD *)v35 = v23;
            *((_DWORD *)v35 + 1) = v25;
            *((_DWORD *)v35 + 2) = v24;
            v37 = *(char **)a4;
            v36 = *(char **)(a4 + 8);
            v38 = v35;
            if (v36 != *(char **)a4)
            {
              do
              {
                v39 = *(_QWORD *)(v36 - 12);
                v36 -= 12;
                v40 = *((_DWORD *)v36 + 2);
                *(_QWORD *)(v38 - 12) = v39;
                v38 -= 12;
                *((_DWORD *)v38 + 2) = v40;
              }
              while (v36 != v37);
              v36 = *(char **)a4;
            }
            v28 = v35 + 12;
            *(_QWORD *)a4 = v38;
            *(_QWORD *)(a4 + 8) = v35 + 12;
            *(_QWORD *)(a4 + 16) = &v33[12 * v34];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v27 = v23;
            v27[1] = v25;
            v28 = v27 + 3;
            v27[2] = v24;
          }
          *(_QWORD *)(a4 + 8) = v28;
          a3 |= v24 != 0;
          v19 += 32;
        }
        if (v19 == v48)
          break;
        v20 = (CSCppSegmentRange *)((char *)v20 + 32);
      }
      while (v20 != (CSCppSegmentRange *)v45);
    }
    if ((a3 & 1) != 0)
    {
      v41 = *(unsigned int **)(a4 + 8);
      v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v41 - *(_QWORD *)a4) >> 2));
      if (v41 == *(unsigned int **)a4)
        v43 = 0;
      else
        v43 = v42;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *,false>(*(_QWORD *)a4, v41, (uint64_t)&v50, v43, 1);
    }
    else
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    }
    if (__p)
    {
      v45 = (char *)__p;
      operator delete(__p);
    }
    if (v47)
    {
      v48 = (char *)v47;
      operator delete(v47);
    }
  }
}

void sub_1B41211C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<TRangeValue<Pointer32,unsigned int>>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer32,Pointer32::off_t>> create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer32&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  const char *v17;
  const char *v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  char v22;
  BOOL v23;
  const char *v24;
  const char *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer32,Pointer32::off_t>> create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer32&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  const char *v29;
  int v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1))
        v6 = (const char *)*(a2 - 1);
      else
        v6 = (const char *)*(a2 - 2);
      if (a1[3])
        v7 = (const char *)a1[3];
      else
        v7 = (const char *)a1[2];
      v8 = strncmp(v6, v7, 0x10uLL);
      v10 = *(v2 - 4);
      v9 = v2 - 4;
      v11 = v10 < *a1;
      if (v8)
        v11 = v8 < 0;
      if (v11)
      {
        v13 = *(_OWORD *)a1;
        v12 = *((_OWORD *)a1 + 1);
        v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      v16 = a1 + 12;
      if (a1 + 12 == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v33 = v2;
      break;
  }
  while (1)
  {
    v20 = v16[2];
    v19 = v16[3];
    if (v19)
      v21 = (const char *)v16[3];
    else
      v21 = (const char *)v16[2];
    if (v15[3])
      v22 = (const char *)v15[3];
    else
      v22 = (const char *)v15[2];
    v23 = strncmp(v21, v22, 0x10uLL);
    v24 = *v16;
    v25 = *v16 < *v15;
    if (v23)
      v25 = v23 < 0;
    if (v25)
    {
      v34 = v16[1];
      v26 = v17;
      while (1)
      {
        v27 = (char *)a1 + v26;
        v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64)
          break;
        if (*((_QWORD *)v27 + 7))
          v29 = (const char *)*((_QWORD *)v27 + 7);
        else
          v29 = (const char *)*((_QWORD *)v27 + 6);
        v30 = strncmp(v21, v29, 0x10uLL);
        v31 = v24 < *((_QWORD *)v27 + 4);
        if (v30)
          v31 = v30 < 0;
        v26 -= 32;
        if (!v31)
        {
          v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      v32 = a1;
LABEL_33:
      v2 = v33;
      *v32 = v24;
      v32[1] = v34;
      v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8)
        return v16 + 4 == v33;
    }
    v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2)
      return 1;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  char v22;
  BOOL v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v9) >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(a2 - 3);
        v24 = a2 - 3;
        if (v25 < *(_DWORD *)v9)
        {
          v37 = *(_DWORD *)(v9 + 8);
          v35 = *(_QWORD *)v9;
          v26 = *(_QWORD *)v24;
          *(_DWORD *)(v9 + 8) = v24[2];
          *(_QWORD *)v9 = v26;
          *(_QWORD *)v24 = v35;
          v24[2] = v37;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t *)v9, (unsigned int *)(v9 + 12), a2 - 3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(v9, (unsigned int *)(v9 + 12), (unsigned int *)(v9 + 24), (uint64_t)(a2 - 3));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(v9, (unsigned int *)(v9 + 12), (unsigned int *)(v9 + 24), v9 + 36, (uint64_t)(a2 - 3));
      default:
        if (v12 > 287)
        {
          if (v11 == 1)
          {
            if ((unsigned int *)v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *,TRangeValue<Pointer32,unsigned int> *>((unsigned int *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = (unsigned int *)(v9 + 12 * (v13 >> 1));
          if ((unint64_t)v12 < 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t *)(v9 + 12 * v14), (unsigned int *)v9, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t *)v9, (unsigned int *)(v9 + 12 * v14), a2 - 3);
            v16 = 3 * v14;
            v17 = (unsigned int *)(v9 + 12 * v14 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t *)(v9 + 12), v17, a2 - 6);
            v18 = (uint64_t *)(v9 + 24);
            v19 = (unsigned int *)(v9 + 12 + 4 * v16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(v18, v19, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t *)v17, v15, v19);
            v36 = *(_DWORD *)(v8 + 8);
            v34 = *(_QWORD *)v8;
            v20 = *(_QWORD *)v15;
            *(_DWORD *)(v8 + 8) = v15[2];
            *(_QWORD *)v8 = v20;
            v15[2] = v36;
            *(_QWORD *)v15 = v34;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(_DWORD *)(v8 - 12) >= *(_DWORD *)v8)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,unsigned int> *,std::__less<void,void> &>((unsigned int *)v8, (unint64_t)a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,unsigned int> *,std::__less<void,void> &>((int *)v8, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_15;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(v8, (uint64_t)v21);
          v9 = (uint64_t)(v21 + 3);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t)(v21 + 3), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *,false>(v8, v21, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v21 + 3);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v21;
          if (v23)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(v9, (uint64_t)a2);
        if ((unsigned int *)v9 != a2)
        {
          v27 = (unsigned int *)(v9 + 12);
          while (v27 != a2)
          {
            v28 = (uint64_t)v27;
            v29 = *(_DWORD *)(v8 + 12);
            if (v29 < *(_DWORD *)v8)
            {
              v30 = *(_QWORD *)(v8 + 16);
              v31 = v28;
              do
              {
                v32 = v31;
                v33 = *(_QWORD *)(v31 - 12);
                v31 -= 12;
                *(_QWORD *)v32 = v33;
                *(_DWORD *)(v32 + 8) = *(_DWORD *)(v32 - 4);
              }
              while (v29 < *(_DWORD *)(v32 - 24));
              *(_DWORD *)v31 = v29;
              *(_QWORD *)(v31 + 4) = v30;
            }
            v27 = (unsigned int *)(v28 + 12);
            v8 = v28;
          }
        }
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 12;
    if (result + 12 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_DWORD *)(v4 + 12);
        if (v6 < *(_DWORD *)v4)
        {
          v7 = *(_QWORD *)(v4 + 16);
          v8 = v3;
          while (1)
          {
            v9 = result + v8;
            *(_QWORD *)(v9 + 12) = *(_QWORD *)(result + v8);
            *(_DWORD *)(v9 + 20) = *(_DWORD *)(result + v8 + 8);
            if (!v8)
              break;
            v8 -= 12;
            if (v6 >= *(_DWORD *)(v9 - 12))
            {
              v10 = result + v8 + 12;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_DWORD *)v10 = v6;
          *(_QWORD *)(v10 + 4) = v7;
        }
        v2 = v5 + 12;
        v3 += 12;
        v4 = v5;
      }
      while (v5 + 12 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(uint64_t *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *((_DWORD *)a1 + 2);
      v6 = *a1;
      v7 = a3[2];
      *a1 = *(_QWORD *)a3;
      *((_DWORD *)a1 + 2) = v7;
      *(_QWORD *)a3 = v6;
      a3[2] = v5;
      return 1;
    }
    v14 = *((_DWORD *)a1 + 2);
    v15 = *a1;
    v16 = a2[2];
    *a1 = *(_QWORD *)a2;
    *((_DWORD *)a1 + 2) = v16;
    *(_QWORD *)a2 = v15;
    a2[2] = v14;
    if (*a3 >= v15)
      return 1;
    v17 = a2[2];
    v18 = *(_QWORD *)a2;
    v19 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v19;
    *(_QWORD *)a3 = v18;
    a3[2] = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = a2[2];
    v9 = *(_QWORD *)a2;
    v10 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v10;
    *(_QWORD *)a3 = v9;
    a3[2] = v8;
    if (*a2 >= *(_DWORD *)a1)
      return 1;
    v11 = *((_DWORD *)a1 + 2);
    v12 = *a1;
    v13 = a2[2];
    *a1 = *(_QWORD *)a2;
    *((_DWORD *)a1 + 2) = v13;
    *(_QWORD *)a2 = v12;
    a2[2] = v11;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;

  v2 = *a1;
  if (*a1 >= *(_DWORD *)(a2 - 12))
  {
    v5 = a1 + 3;
    do
    {
      v3 = v5;
      if ((unint64_t)v5 >= a2)
        break;
      v5 += 3;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      v6 = *(_DWORD *)(a2 - 12);
      a2 -= 12;
    }
    while (v2 < v6);
  }
  v7 = *(_QWORD *)(a1 + 1);
  while ((unint64_t)v3 < a2)
  {
    v14 = v3[2];
    v13 = *(_QWORD *)v3;
    v8 = *(_QWORD *)a2;
    v3[2] = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v3 = v8;
    *(_DWORD *)(a2 + 8) = v14;
    *(_QWORD *)a2 = v13;
    do
    {
      v9 = v3[3];
      v3 += 3;
    }
    while (v2 >= v9);
    do
    {
      v10 = *(_DWORD *)(a2 - 12);
      a2 -= 12;
    }
    while (v2 < v10);
  }
  if (v3 - 3 != a1)
  {
    v11 = *(_QWORD *)(v3 - 3);
    a1[2] = *(v3 - 1);
    *(_QWORD *)a1 = v11;
  }
  *(v3 - 3) = v2;
  *((_QWORD *)v3 - 1) = v7;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,unsigned int> *,std::__less<void,void> &>(int *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v2 = 0;
  v3 = *a1;
  v4 = *(_QWORD *)(a1 + 1);
  do
  {
    v5 = a1[v2 + 3];
    v2 += 3;
  }
  while (v5 < v3);
  v6 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    do
    {
      if (v6 >= a2)
        break;
      v8 = *(_DWORD *)(a2 - 12);
      a2 -= 12;
    }
    while (v8 >= v3);
  }
  else
  {
    do
    {
      v7 = *(_DWORD *)(a2 - 12);
      a2 -= 12;
    }
    while (v7 >= v3);
  }
  v9 = &a1[v2];
  if (v6 < a2)
  {
    v10 = a2;
    do
    {
      v11 = *(_QWORD *)v9;
      v12 = v9[2];
      v13 = *(_DWORD *)(v10 + 8);
      *(_QWORD *)v9 = *(_QWORD *)v10;
      v9[2] = v13;
      *(_DWORD *)(v10 + 8) = v12;
      *(_QWORD *)v10 = v11;
      do
      {
        v14 = v9[3];
        v9 += 3;
      }
      while (v14 < v3);
      do
      {
        v15 = *(_DWORD *)(v10 - 12);
        v10 -= 12;
      }
      while (v15 >= v3);
    }
    while ((unint64_t)v9 < v10);
  }
  if (v9 - 3 != a1)
  {
    v16 = *(_QWORD *)(v9 - 3);
    a1[2] = *(v9 - 1);
    *(_QWORD *)a1 = v16;
  }
  *(v9 - 3) = v3;
  *((_QWORD *)v9 - 1) = v4;
  return v9 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (uint64_t *)(a2 - 12);
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)a1)
      {
        v7 = *(_DWORD *)(a1 + 8);
        v8 = *(_QWORD *)a1;
        v9 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *v6;
        *(_DWORD *)(a1 + 8) = v9;
        *v6 = v8;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t *)a1, (unsigned int *)(a1 + 12), (unsigned int *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24), a2 - 12);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24), a1 + 36, a2 - 12);
      return 1;
    default:
      v10 = (_DWORD *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t *)a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24));
      v11 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 < *v10)
    {
      v15 = *(_QWORD *)(v11 + 4);
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        *(_QWORD *)(v17 + 36) = *(_QWORD *)(a1 + v16 + 24);
        *(_DWORD *)(v17 + 44) = *(_DWORD *)(a1 + v16 + 32);
        if (v16 == -24)
          break;
        v16 -= 12;
        if (v14 >= *(_DWORD *)(v17 + 12))
        {
          v18 = a1 + v16 + 36;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_DWORD *)v18 = v14;
      *(_QWORD *)(v18 + 4) = v15;
      if (++v13 == 8)
        return v11 + 12 == a2;
    }
    v10 = (_DWORD *)v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t *)a1, a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    v9 = a3[2];
    v10 = *(_QWORD *)a3;
    v11 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v11;
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    if (*a3 < *a2)
    {
      v12 = a2[2];
      v13 = *(_QWORD *)a2;
      v14 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v14;
      *(_QWORD *)a3 = v13;
      a3[2] = v12;
      if (*a2 < *(_DWORD *)a1)
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        v17 = a2[2];
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v17;
        *(_QWORD *)a2 = v16;
        a2[2] = v15;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v11 = *(_DWORD *)(a4 + 8);
    v12 = *(_QWORD *)a4;
    v13 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_DWORD *)(a4 + 8) = v13;
    *(_QWORD *)a5 = v12;
    *(_DWORD *)(a5 + 8) = v11;
    if (*(_DWORD *)a4 < *a3)
    {
      v14 = a3[2];
      v15 = *(_QWORD *)a3;
      v16 = *(_DWORD *)(a4 + 8);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v16;
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = v14;
      if (*a3 < *a2)
      {
        v17 = a2[2];
        v18 = *(_QWORD *)a2;
        v19 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v19;
        *(_QWORD *)a3 = v18;
        a3[2] = v17;
        if (*a2 < *(_DWORD *)a1)
        {
          v20 = *(_DWORD *)(a1 + 8);
          v21 = *(_QWORD *)a1;
          v22 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v22;
          *(_QWORD *)a2 = v21;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *,TRangeValue<Pointer32,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  unsigned int v29;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 12;
    if ((char *)a2 - (char *)a1 >= 13)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[3 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = v14[2];
          v16 = *(_QWORD *)v14;
          v17 = a1[2];
          *(_QWORD *)v14 = *(_QWORD *)a1;
          v14[2] = v17;
          *(_QWORD *)a1 = v16;
          a1[2] = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 13)
    {
      v18 = v8 / 0xCuLL;
      do
      {
        v19 = 0;
        v28 = *(_QWORD *)a1;
        v29 = a1[2];
        v20 = a1;
        do
        {
          v21 = &v20[3 * v19 + 3];
          v22 = (2 * v19) | 1;
          v23 = 2 * v19 + 2;
          if (v23 < v18 && *v21 < v21[3])
          {
            v21 += 3;
            v22 = v23;
          }
          v24 = *(_QWORD *)v21;
          v20[2] = v21[2];
          *(_QWORD *)v20 = v24;
          v20 = v21;
          v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 -= 3;
        if (v21 == v6)
        {
          v21[2] = v29;
          *(_QWORD *)v21 = v28;
        }
        else
        {
          v25 = *(_QWORD *)v6;
          v21[2] = v6[2];
          *(_QWORD *)v21 = v25;
          *(_QWORD *)v6 = v28;
          v6[2] = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>((uint64_t)a1, (uint64_t)(v21 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (v21 + 3 - a1));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

