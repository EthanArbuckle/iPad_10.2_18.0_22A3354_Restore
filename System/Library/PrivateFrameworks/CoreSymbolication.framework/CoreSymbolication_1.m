uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (unsigned int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 >= a3)
      {
        v7 = *v6;
      }
      else
      {
        v7 = *v6;
        v8 = v6[3];
        if (*v6 <= v8)
          v7 = v6[3];
        if (*v6 < v8)
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      v9 = *a4;
      if (v7 >= *a4)
      {
        v10 = *(_QWORD *)(a4 + 1);
        do
        {
          v11 = a4;
          a4 = v6;
          v12 = *(_QWORD *)v6;
          v11[2] = a4[2];
          *(_QWORD *)v11 = v12;
          if (v4 < v5)
            break;
          v13 = (2 * v5) | 1;
          v6 = (unsigned int *)(result + 12 * v13);
          v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            v14 = *v6;
            v5 = v13;
          }
          else
          {
            v14 = *v6;
            v15 = v6[3];
            if (*v6 <= v15)
              v14 = v6[3];
            if (*v6 >= v15)
              v5 = v13;
            else
              v6 += 3;
          }
        }
        while (v14 >= v9);
        *a4 = v9;
        *(_QWORD *)(a4 + 1) = v10;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 12 * v4);
    v6 = (_QWORD *)(a2 - 12);
    v7 = *(_DWORD *)(a2 - 12);
    if (*(_DWORD *)v5 < v7)
    {
      v8 = *(_QWORD *)(a2 - 8);
      do
      {
        v9 = v6;
        v6 = v5;
        v10 = *v5;
        *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
        *v9 = v10;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 12 * v4);
      }
      while (*(_DWORD *)v5 < v7);
      *(_DWORD *)v6 = v7;
      *(_QWORD *)((char *)v6 + 4) = v8;
    }
  }
  return result;
}

_QWORD *std::vector<TRangeValue<Pointer32,unsigned int>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer32,unsigned int>*,TRangeValue<Pointer32,unsigned int>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<TRangeValue<Pointer32,unsigned int>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B41227D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TRangeValue<Pointer32,unsigned int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

unsigned int *TDwarfInfoStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf32_compile_unit(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  unsigned int *result;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;

  v1 = *(unsigned int *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 16);
  if ((int)v1 + 6 > v2)
    goto LABEL_29;
  result = (unsigned int *)(*(_QWORD *)a1 + v1);
  v8 = result[1];
  if ((unsigned __int16)v8 - 6 < 0xFFFFFFFC)
    return 0;
  v9 = *result;
  if ((_DWORD)v9 == -1)
    return 0;
  v10 = 11;
  if ((unsigned __int16)v8 >= 5u)
    v10 = 12;
  if (v9 + 4 < v10)
    return 0;
  v11 = v1 + v9 + 4;
  if (v11 <= v2 && v11 > v1)
  {
    v13 = 7;
    if ((unsigned __int16)v8 < 5u)
      v13 = 10;
    if (*((_BYTE *)result + v13) != 4)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        return 0;
      v16 = 0;
      v3 = MEMORY[0x1E0C81028];
      v4 = "Compile unit with bad address_size\n";
      v5 = (uint8_t *)&v16;
      goto LABEL_4;
    }
    if ((unsigned __int16)v8 < 5u || (v8 & 0xFF0000) == 0x10000)
    {
      *(_DWORD *)(a1 + 8) = v11;
      return result;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v3 = MEMORY[0x1E0C81028];
      v4 = "Unsupported compile unit type\n";
      v5 = (uint8_t *)&v15;
      goto LABEL_4;
    }
  }
  else
  {
LABEL_29:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v3 = MEMORY[0x1E0C81028];
      v4 = "Out of bounds compile unit\n";
      v5 = (uint8_t *)&v14;
LABEL_4:
      _os_log_impl(&dword_1B40C5000, v3, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
    }
  }
  return 0;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(uint64_t result, unsigned int a2)
{
  _QWORD *exception;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 16) < a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Attempt to set cursor outside bounds", 36);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v6, &v4);
    Exception::Exception(v3, &v4);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v3);
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1B4122A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::abbrev_table@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  _QWORD *v5;
  CSCppDwarfAbbrevTable *v6;
  uint64_t result;
  unsigned int v8;
  CSCppDwarfAbbrev *v9;

  v4 = a1 + 3;
  v5 = operator new(0x58uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E67768D0;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  v5[10] = v4;
  v5[3] = &off_1E6776920;
  v6 = (CSCppDwarfAbbrevTable *)(v5 + 3);
  *a2 = v5 + 3;
  a2[1] = v5;
  while (1)
  {
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
    v8 = result;
    if (!(_DWORD)result)
      break;
    v9 = (CSCppDwarfAbbrev *)TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::abbrev(a1);
    CSCppDwarfAbbrevTable::set_abbrev_at(v6, v8, v9);
  }
  return result;
}

void sub_1B4122B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void parse_dies<Dwarf<Dwarf32,Pointer32,LittleEndian>,TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>(int a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7, uint64_t (***a8)(_QWORD, std::vector<std::string>::pointer), _QWORD *a9, _QWORD *a10, _QWORD *a11)
{
  uint64_t (***v11)(_QWORD, std::vector<std::string>::pointer);
  char v13;
  uint64_t v14;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t i;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  const char *v77;
  int *v78;
  int *v79;
  __int128 *v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v110;
  __int128 *v111;
  __int128 v114;
  uint64_t v115;
  char v116;
  int v117;
  int v118;
  char *v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  _BYTE v125[32];
  uint64_t v126;
  __int128 v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  char *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  _OWORD *v139[2];

  v11 = a8;
  v13 = a6;
  v14 = a4;
  v111 = *(__int128 **)(a2 + 40);
  v110 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = *(std::__shared_weak_count **)(a2 + 80);
  v137 = v17;
  v138 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = *(_QWORD *)(v17 + 56);
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a2 + 8))
  {
    while (1)
    {
      v22 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a2);
      if (!v22)
      {
        v27 = v132;
        if (v131 != v132)
        {
          --v132;
          if (v131 != v27 - 1)
          {
            v28 = *(v27 - 2);
            if (v28)
            {
              v29 = v27 - 3;
              do
              {
                if (!*(_BYTE *)(v28 + 80))
                  break;
                v132 = v29 + 1;
                if (v29 + 1 == v131)
                  break;
                v30 = *v29--;
                v28 = v30;
              }
              while (v30);
            }
          }
        }
        goto LABEL_163;
      }
      v23 = *(_QWORD *)(v137 + 8);
      if (v22 >= (*(_QWORD *)(v137 + 16) - v23) >> 3 || (v24 = *(_QWORD *)(v23 + 8 * v22)) == 0)
      {
LABEL_167:
        if (v131)
        {
          v132 = v131;
          operator delete(v131);
        }
        break;
      }
      v25 = *(unsigned __int8 *)(v24 + 12);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24) == 1)
      {
        *(_WORD *)(v21 + 68) = 0;
        *(_QWORD *)(v21 + 104) = *(_QWORD *)(v21 + 96);
        *(_DWORD *)(v21 + 8) = -1;
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, v14, *(unsigned __int16 *)(a2 + 24));
        LODWORD(v119) = 0;
        for (i = parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer32,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>(v21, a2, a3, &v119);
              i;
              i = parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer32,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>(v21, i, a3, &v119))
        {
          ;
        }
        if ((*(_BYTE *)(v21 + 68) & 0xC) == 0 || (*(_BYTE *)(v21 + 68) & 1) == 0)
        {
          if (v25)
          {
            v34 = v132;
            if (v132 < (uint64_t *)v133)
              goto LABEL_41;
            v35 = v132 - v131;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v36 = (v133 - (char *)v131) >> 2;
            if (v36 <= v35 + 1)
              v36 = v35 + 1;
            if ((unint64_t)(v133 - (char *)v131) >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v133, v37);
            else
              v38 = 0;
            v55 = (uint64_t *)&v38[8 * v35];
            *v55 = 0;
            v39 = v55 + 1;
            v72 = v131;
            v56 = v132;
            if (v132 != v131)
            {
              do
              {
                v73 = *--v56;
                *--v55 = v73;
              }
              while (v56 != v72);
              goto LABEL_159;
            }
            goto LABEL_160;
          }
        }
        else
        {
          v129 = 0;
          v130 = 0;
          v128 = 0;
          v40 = resolve_parsed_data_names<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v21, &v130, &v129);
          v128 = v40;
          if ((*(_WORD *)(v21 + 68) & 2) != 0)
          {
            if ((*(_WORD *)(v21 + 68) & 0x8000) != 0)
            {
              v41 = *(_DWORD *)v21;
              v42 = *(_DWORD *)(v21 + 72) + *(_DWORD *)v21;
            }
            else
            {
              v41 = *(_DWORD *)v21;
              v42 = *(_DWORD *)(v21 + 4);
            }
            v49 = v42 - v41;
            if (v49)
            {
              v106 = v49;
              v128 = v40 | 0x100;
LABEL_66:
              v50 = *(_DWORD *)v21 + a1;
              if (a7)
                v50 = TAddressRelocator<Pointer32>::relocate(a7, (*(_DWORD *)v21 + a1));
              v127 = 0uLL;
              if (*(_DWORD *)(v24 + 8) == 29)
              {
                v51 = 0;
                if (TDwarfAbbrevData<Dwarf<Dwarf32,Pointer32,LittleEndian>>::has_inlined_info(v21, *(unsigned __int16 *)(a2 + 24))&& (v13 & 1) == 0)
                {
                  v52 = *(unsigned __int16 *)(a2 + 24);
                  v53 = *(unsigned __int16 *)(v21 + 68);
                  if (v52 < 5)
                  {
                    if ((v53 & 0x400) != 0 && *(_DWORD *)(v21 + 56))
                      goto LABEL_117;
LABEL_118:
                    v77 = 0;
                  }
                  else
                  {
                    if ((v53 & 0x400) == 0)
                      goto LABEL_118;
LABEL_117:
                    v77 = path_from_file_index<Pointer32>(&v134, *(_DWORD *)(v21 + 56), *(unsigned int *)(a2 + 8), a5, v52);
                    v53 = *(unsigned __int16 *)(v21 + 68);
                  }
                  *(_QWORD *)&v127 = v77;
                  *((int8x8_t *)&v127 + 1) = vbic_s8(*(int8x8_t *)(v21 + 60), (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v53), (int8x8_t)0x100000000800)));
                  v51 = 1;
                }
              }
              else
              {
                v51 = 0;
              }
              v78 = *(int **)(v21 + 96);
              v79 = *(int **)(v21 + 104);
              if (v78 == v79)
              {
                v92 = v128;
                v119 = (char *)__PAIR64__(v106, v50);
                v120 = 0;
                v121 = 0;
                v122 = v130;
                v123 = v129;
                v126 = 0;
                v124 = 0u;
                memset(v125, 0, 25);
                if (v51)
                {
                  v124 = v127;
                  v92 = v128 | 0x80000000;
                }
                HIDWORD(v121) = v92;
                record_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>,std::deque<TRawSymbol<Pointer32>>>(&v119, 1, v24, a9, &v131);
                v11 = a8;
                v13 = a6;
                v139[0] = v125;
                std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)v139);
                v14 = a4;
              }
              else
              {
                v119 = 0;
                v120 = 0;
                v121 = 0;
                if (v51)
                  v80 = &v127;
                else
                  v80 = 0;
                do
                {
                  v118 = 0;
                  v81 = (*v78 + a1);
                  if (a7)
                    LODWORD(v81) = TAddressRelocator<Pointer32>::relocate(a7, v81);
                  v117 = 0;
                  v118 = v81;
                  v83 = *v78;
                  v82 = v78[1];
                  v84 = v82 - *v78;
                  v117 = v84;
                  if (v82 != v83)
                  {
                    v139[0] = v80;
                    v85 = v120;
                    if ((unint64_t)v120 >= v121)
                    {
                      v89 = std::vector<TRawSymbol<Pointer32>>::__emplace_back_slow_path<TRawSymbol<Pointer32>::dwarf_ranges_tag,unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>((uint64_t *)&v119, (uint64_t)&v116, &v118, &v117, &v130, &v129, &v128, v139);
                    }
                    else
                    {
                      v87 = v129;
                      v86 = v130;
                      v88 = v128;
                      *(_DWORD *)v120 = v81;
                      *((_DWORD *)v85 + 1) = v84;
                      *((_QWORD *)v85 + 1) = 0;
                      *((_QWORD *)v85 + 2) = 0;
                      *((_QWORD *)v85 + 3) = v86;
                      *((_QWORD *)v85 + 4) = v87;
                      *(_OWORD *)(v85 + 40) = 0u;
                      *((_QWORD *)v85 + 11) = 0;
                      *(_OWORD *)(v85 + 56) = 0u;
                      *(_OWORD *)(v85 + 65) = 0u;
                      if (v51)
                      {
                        *(_OWORD *)(v85 + 40) = v127;
                        v88 |= 0x80000000;
                      }
                      *((_DWORD *)v85 + 5) = v88;
                      v85[80] = 1;
                      v89 = (uint64_t)(v85 + 96);
                    }
                    v120 = (char *)v89;
                  }
                  v78 += 2;
                }
                while (v78 != v79);
                record_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>,std::deque<TRawSymbol<Pointer32>>>(v119, 0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 5), v24, a9, &v131);
                v11 = a8;
                v13 = a6;
                v14 = a4;
                if (v25)
                {
                  v90 = v132;
                  if (v132 >= (uint64_t *)v133)
                  {
                    v93 = v132 - v131;
                    if ((unint64_t)(v93 + 1) >> 61)
                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                    v94 = (v133 - (char *)v131) >> 2;
                    if (v94 <= v93 + 1)
                      v94 = v93 + 1;
                    if ((unint64_t)(v133 - (char *)v131) >= 0x7FFFFFFFFFFFFFF8)
                      v95 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v95 = v94;
                    if (v95)
                      v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v133, v95);
                    else
                      v96 = 0;
                    v97 = (uint64_t *)&v96[8 * v93];
                    *v97 = 0;
                    v91 = v97 + 1;
                    v99 = v131;
                    v98 = v132;
                    if (v132 != v131)
                    {
                      do
                      {
                        v100 = *--v98;
                        *--v97 = v100;
                      }
                      while (v98 != v99);
                      v98 = v131;
                    }
                    v131 = v97;
                    v132 = v91;
                    v133 = &v96[8 * v95];
                    if (v98)
                      operator delete(v98);
                  }
                  else
                  {
                    *v132 = 0;
                    v91 = v90 + 1;
                  }
                  v132 = v91;
                }
                v139[0] = &v119;
                std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)v139);
              }
              goto LABEL_163;
            }
          }
          else if (*(_QWORD *)(v21 + 96) != *(_QWORD *)(v21 + 104))
          {
            v106 = 0;
            goto LABEL_66;
          }
          if (v25)
          {
            v54 = v132;
            if (v132 >= (uint64_t *)v133)
            {
              v74 = v132 - v131;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 61)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              v76 = v133 - (char *)v131;
              if ((v133 - (char *)v131) >> 2 > v75)
                v75 = v76 >> 2;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v75;
              if (v37)
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v133, v37);
              else
                v38 = 0;
              v55 = (uint64_t *)&v38[8 * v74];
              *v55 = 0;
              v39 = v55 + 1;
              v101 = v131;
              v56 = v132;
              if (v132 != v131)
              {
                do
                {
                  v102 = *--v56;
                  *--v55 = v102;
                }
                while (v56 != v101);
                goto LABEL_159;
              }
              goto LABEL_160;
            }
            *v132 = 0;
            v132 = v54 + 1;
          }
        }
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24) == 2)
        {
          *(_WORD *)(v21 + 68) = 0;
          *(_QWORD *)(v21 + 104) = *(_QWORD *)(v21 + 96);
          *(_DWORD *)(v21 + 8) = -1;
          *(_DWORD *)(v21 + 84) = 0;
          *(_DWORD *)(v21 + 88) = 0;
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, v14, *(unsigned __int16 *)(a2 + 24));
          TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_compilation_unit_pc_ranges(v24);
          if (v25)
          {
            v31 = v132;
            if (v132 >= (uint64_t *)v133)
            {
              v45 = v132 - v131;
              if ((unint64_t)(v45 + 1) >> 61)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              v46 = (v133 - (char *)v131) >> 2;
              if (v46 <= v45 + 1)
                v46 = v45 + 1;
              if ((unint64_t)(v133 - (char *)v131) >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v46;
              if (v47)
                v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v133, v47);
              else
                v48 = 0;
              v59 = (uint64_t *)&v48[8 * v45];
              *v59 = 0;
              v32 = v59 + 1;
              v61 = v131;
              v60 = v132;
              if (v132 != v131)
              {
                do
                {
                  v62 = *--v60;
                  *--v59 = v62;
                }
                while (v60 != v61);
                v60 = v131;
              }
              v131 = v59;
              v132 = v32;
              v133 = &v48[8 * v47];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *v132 = 0;
              v32 = v31 + 1;
            }
            v132 = v32;
          }
          if ((v13 & 1) == 0)
          {
            v135 = v134;
            v63 = *((_QWORD *)v111 + 2);
            v114 = *v111;
            v115 = v63;
            v64 = "";
            if ((*(_BYTE *)(v21 + 68) & 0x20) != 0)
              v64 = *(const char **)(v21 + 32);
            parse_line_numbers<Dwarf<Dwarf32,Pointer32,LittleEndian>>((uint64_t)&v114, v110, *(_DWORD *)(v21 + 44), v21 + 88, v64, a1, a5, a7, v11, (uint64_t)&v134, a10);
            if (*(_QWORD *)(v21 + 120))
            {
              v119 = *(char **)(v21 + 120);
              v65 = *(_DWORD **)(v21 + 96);
              v66 = *(_DWORD **)(v21 + 104);
              if (v65 == v66)
              {
                v68 = *(unsigned __int16 *)(v21 + 68);
                if ((~v68 & 3) == 0)
                {
                  LODWORD(v127) = 0;
                  v69 = (*(_DWORD *)v21 + a1);
                  if (a7)
                  {
                    LODWORD(v69) = TAddressRelocator<Pointer32>::relocate(a7, v69);
                    LOWORD(v68) = *(_WORD *)(v21 + 68);
                  }
                  LODWORD(v127) = v69;
                  LODWORD(v139[0]) = 0;
                  if ((v68 & 0x8000) != 0)
                  {
                    v70 = *(_DWORD *)v21;
                    v71 = *(_DWORD *)(v21 + 72) + *(_DWORD *)v21;
                  }
                  else
                  {
                    v70 = *(_DWORD *)v21;
                    v71 = *(_DWORD *)(v21 + 4);
                  }
                  LODWORD(v139[0]) = v71 - v70;
                  std::deque<TRangeValue<Pointer32,char const*>>::emplace_back<unsigned int &,unsigned int &,char const*&>(a11, &v127, (int *)v139, (uint64_t *)&v119);
                }
              }
              else
              {
                do
                {
                  LODWORD(v127) = 0;
                  v67 = (*v65 + a1);
                  if (a7)
                    LODWORD(v67) = TAddressRelocator<Pointer32>::relocate(a7, v67);
                  LODWORD(v127) = v67;
                  LODWORD(v139[0]) = 0;
                  LODWORD(v139[0]) = v65[1] - *v65;
                  std::deque<TRangeValue<Pointer32,char const*>>::emplace_back<unsigned int &,unsigned int &,char const*&>(a11, &v127, (int *)v139, (uint64_t *)&v119);
                  v65 += 2;
                }
                while (v65 != v66);
              }
            }
          }
          goto LABEL_163;
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, v14, *(unsigned __int16 *)(a2 + 24));
        if (v25)
        {
          v34 = v132;
          if (v132 < (uint64_t *)v133)
          {
LABEL_41:
            *v34 = 0;
            v39 = v34 + 1;
LABEL_162:
            v132 = v39;
            goto LABEL_163;
          }
          v43 = v132 - v131;
          if ((unint64_t)(v43 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v44 = (v133 - (char *)v131) >> 2;
          if (v44 <= v43 + 1)
            v44 = v43 + 1;
          if ((unint64_t)(v133 - (char *)v131) >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v44;
          if (v37)
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v133, v37);
          else
            v38 = 0;
          v55 = (uint64_t *)&v38[8 * v43];
          *v55 = 0;
          v39 = v55 + 1;
          v57 = v131;
          v56 = v132;
          if (v132 != v131)
          {
            do
            {
              v58 = *--v56;
              *--v55 = v58;
            }
            while (v56 != v57);
LABEL_159:
            v56 = v131;
          }
LABEL_160:
          v131 = v55;
          v132 = v39;
          v133 = &v38[8 * v37];
          if (v56)
            operator delete(v56);
          goto LABEL_162;
        }
      }
LABEL_163:
      if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(a2 + 8))
        goto LABEL_167;
    }
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  v103 = v138;
  if (v138)
  {
    v104 = (unint64_t *)&v138->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
}

void sub_1B41235B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 152);
  if (v4)
  {
    *(_QWORD *)(v1 - 144) = v4;
    operator delete(v4);
  }
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void std::vector<TRawSourceInfo<Pointer32>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 20) = *(_OWORD *)(v10 - 20);
        *((_OWORD *)v12 - 2) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1B4123954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  _QWORD *exception;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *((unsigned int *)a1 + 2);
  v2 = *((unsigned int *)a1 + 4);
  if (v1 >= v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Cursor overflow, attempt to read ULEB", 37);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v16, &v14);
    Exception::Exception(v13, &v14);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v13);
  }
  v3 = *a1;
  v4 = (char *)(*a1 + v1);
  v6 = *v4;
  v5 = v4 + 1;
  v7 = v6;
  if (v6 < 0)
  {
    v8 = v3 + v2;
    v7 &= 0x7Fu;
    v9 = 7;
    do
    {
      if ((unint64_t)v5 >= v8)
        break;
      v10 = *v5++;
      v7 |= (unint64_t)(v10 & 0x7F) << v9;
      v9 += 7;
    }
    while (v10 < 0);
  }
  *((_DWORD *)a1 + 2) = (_DWORD)v5 - v3;
  return v7;
}

void sub_1B4123AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::abbrev(uint64_t *a1)
{
  int v2;
  char v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  void *__p;
  char *v25;
  char *v26;

  v2 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
  v3 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8(a1);
  __p = 0;
  v25 = 0;
  v26 = 0;
  do
  {
    v4 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
    v5 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
    v6 = v5;
    if (v4)
      v7 = v5 == 0;
    else
      v7 = 1;
    v8 = !v7;
    if (!v7)
    {
      v9 = v25;
      if (v25 >= v26)
      {
        v11 = (v25 - (_BYTE *)__p) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v13 = v26 - (_BYTE *)__p;
        if ((v26 - (_BYTE *)__p) >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v26, v14);
        v17 = &v15[4 * v11];
        *(_WORD *)v17 = v4;
        *((_WORD *)v17 + 1) = v6;
        v19 = (char *)__p;
        v18 = v25;
        v20 = v17;
        if (v25 != __p)
        {
          do
          {
            v21 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          while (v18 != v19);
          v18 = (char *)__p;
        }
        v10 = v17 + 4;
        __p = v20;
        v25 = v17 + 4;
        v26 = &v15[4 * v16];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_WORD *)v25 = v4;
        *((_WORD *)v9 + 1) = v5;
        v10 = v9 + 4;
      }
      v25 = v10;
    }
    if (v6 == 33)
      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
  }
  while ((v8 & 1) != 0);
  if (v2 <= 28)
  {
    if (v2 != 3)
    {
      if (v2 == 17 && has_minimum_source_info_attributes(&__p))
      {
        v22 = operator new();
        TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSourceInfoAbbrev(v22, 17, v3, &__p, (uint64_t)(a1 + 3));
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_33:
    v22 = operator new();
    TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSymbolAbbrev(v22, v2, v3, &__p, (uint64_t)(a1 + 3));
    goto LABEL_35;
  }
  if (v2 == 46 || v2 == 29)
    goto LABEL_33;
LABEL_34:
  v22 = operator new();
  TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSkipAbbrev(v22, v2, v3, &__p);
LABEL_35:
  if (__p)
  {
    v25 = (char *)__p;
    operator delete(__p);
  }
  return v22;
}

void sub_1B4123D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1B5E36940](v11, 0x10A1C400922EF30);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CSCppDwarfAbbrevTable::set_abbrev_at(CSCppDwarfAbbrevTable *this, unsigned int a2, CSCppDwarfAbbrev *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2;
  v5 = *((_QWORD *)this + 1);
  v6 = (*((_QWORD *)this + 2) - v5) >> 3;
  if (v6 <= a2)
  {
    std::vector<CSCppDwarfAbbrev *>::resize((uint64_t)this + 8, a2 + 1);
    v5 = *((_QWORD *)this + 1);
    v6 = (*((_QWORD *)this + 2) - v5) >> 3;
  }
  if (v6 <= v4)
    std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)(v5 + 8 * v4) = a3;
}

void std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E67768D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E67768D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfAbbrevTable(CSCppDwarfAbbrevTable *a1)
{
  CSCppDwarfAbbrevTable::~CSCppDwarfAbbrevTable(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((unsigned int *)a1 + 2);
  if (v1 >= *((_DWORD *)a1 + 4))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint8", 38);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *a1;
  *((_DWORD *)a1 + 2) = v1 + 1;
  return *(unsigned __int8 *)(v2 + v1);
}

void sub_1B4123F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSymbolAbbrev(uint64_t a1, int a2, char a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  char **v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v25;
  int v26;
  uint64_t action_for_data;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  int v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = *a4;
  *a4 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a4[1];
  a4[1] = v6;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a4[2];
  a4[2] = v7;
  *(_QWORD *)a1 = &off_1E6776958;
  *(_QWORD *)(a1 + 64) = a5;
  *(_WORD *)(a1 + 72) = 0;
  v8 = *(unsigned __int16 **)(a1 + 16);
  if (v8 != *(unsigned __int16 **)(a1 + 24))
  {
    v9 = (char **)(a1 + 40);
    v10 = (_QWORD *)(a1 + 56);
    do
    {
      v11 = *v8;
      if (v11 <= 0x54)
      {
        if (*v8 <= 0x11u)
        {
          if (v11 != 3)
          {
            if (v11 == 17)
            {
              *(_WORD *)(a1 + 72) |= 1u;
              v23 = v8[1];
              if ((v23 - 41) < 4 || v23 == 27)
              {
                v12 = operator new();
                v25 = *(_QWORD *)(a1 + 64);
                v26 = v8[1];
                *(_QWORD *)v12 = &off_1E6776A00;
                *(_QWORD *)(v12 + 8) = v25;
                *(_QWORD *)(v12 + 16) = v25 + 68;
                *(_WORD *)(v12 + 24) = 1;
                *(_QWORD *)(v12 + 32) = v25;
                *(_QWORD *)(v12 + 40) = 0;
                *(_DWORD *)(v12 + 48) = v26;
                goto LABEL_49;
              }
              if (v23 == 1)
              {
                v12 = operator new();
                v54 = *(_QWORD *)(a1 + 64);
                *(_QWORD *)v12 = &off_1E67769A0;
                *(_QWORD *)(v12 + 8) = v54;
                *(_QWORD *)(v12 + 16) = v54 + 68;
                v36 = 1;
                goto LABEL_37;
              }
            }
            else
            {
LABEL_46:
              v23 = v8[1];
            }
            action_for_data = skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v23);
            goto LABEL_48;
          }
          *(_WORD *)(a1 + 72) |= 8u;
          v20 = *(_QWORD *)(a1 + 64);
          v21 = v20 + 24;
          v22 = 8;
          goto LABEL_35;
        }
        if (v11 == 18)
        {
          v37 = *(_WORD *)(a1 + 72);
          *(_WORD *)(a1 + 72) = v37 | 2;
          v28 = v8[1];
          if ((v28 - 41) < 4 || v28 == 27)
          {
            v12 = operator new();
            v39 = *(_QWORD *)(a1 + 64);
            v40 = v8[1];
            *(_QWORD *)v12 = &off_1E6776A00;
            *(_QWORD *)(v12 + 8) = v39 + 4;
            *(_QWORD *)(v12 + 16) = v39 + 68;
            *(_WORD *)(v12 + 24) = 2;
            *(_QWORD *)(v12 + 32) = v39;
            *(_QWORD *)(v12 + 40) = 0;
            *(_DWORD *)(v12 + 48) = v40;
            goto LABEL_49;
          }
          if (v28 == 1)
          {
            v12 = operator new();
            v55 = *(_QWORD *)(a1 + 64);
            *(_QWORD *)v12 = &off_1E67769A0;
            *(_QWORD *)(v12 + 8) = v55 + 4;
            *(_QWORD *)(v12 + 16) = v55 + 68;
            v36 = 2;
            goto LABEL_37;
          }
          v32 = -32766;
          *(_WORD *)(a1 + 72) = v37 | 0x8002;
          v56 = *(_QWORD *)(a1 + 64);
          v30 = v56 + 68;
          v31 = v56 + 72;
LABEL_33:
          action_for_data = read_action_for_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v28, v30, v32, v31);
        }
        else
        {
          if (v11 == 49)
          {
            *(_WORD *)(a1 + 72) |= 0x200u;
            v15 = *(_QWORD *)(a1 + 64);
            v16 = v15 + 52;
            v17 = 0x4000;
            v18 = 512;
          }
          else
          {
            if (v11 != 71)
              goto LABEL_46;
            *(_WORD *)(a1 + 72) |= 0x10u;
            v15 = *(_QWORD *)(a1 + 64);
            v16 = v15 + 40;
            v17 = 0x2000;
            v18 = 16;
          }
          action_for_data = read_action_for_ref_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v8[1], v15 + 68, v18, v17, v16);
        }
      }
      else
      {
        if (*v8 <= 0x6Du)
        {
          switch(*v8)
          {
            case 'U':
              v12 = operator new();
              v13 = *(_QWORD *)(a1 + 64);
              v14 = v8[1];
              *(_QWORD *)v12 = &off_1E6776F00;
              *(_QWORD *)(v12 + 8) = v13;
              *(_DWORD *)(v12 + 16) = v14;
              break;
            case 'W':
              *(_WORD *)(a1 + 72) |= 0x1000u;
              v28 = v8[1];
              v34 = *(_QWORD *)(a1 + 64);
              v30 = v34 + 68;
              v31 = v34 + 64;
              v32 = 4096;
              goto LABEL_33;
            case 'X':
              *(_WORD *)(a1 + 72) |= 0x400u;
              v28 = v8[1];
              v33 = *(_QWORD *)(a1 + 64);
              v30 = v33 + 68;
              v31 = v33 + 56;
              v32 = 1024;
              goto LABEL_33;
            case 'Y':
              *(_WORD *)(a1 + 72) |= 0x800u;
              v28 = v8[1];
              v29 = *(_QWORD *)(a1 + 64);
              v30 = v29 + 68;
              v31 = v29 + 60;
              v32 = 2048;
              goto LABEL_33;
            default:
              goto LABEL_46;
          }
          goto LABEL_49;
        }
        if (*v8 <= 0x3FE2u)
        {
          if (v11 != 110 && v11 != 8199)
            goto LABEL_46;
          *(_WORD *)(a1 + 72) |= 4u;
          v20 = *(_QWORD *)(a1 + 64);
          v21 = v20 + 16;
          v22 = 4;
LABEL_35:
          action_for_data = read_action_for_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v8[1], v20 + 68, v22, v21, v20 + 88);
          goto LABEL_48;
        }
        if (v11 == 16355)
        {
          *(_WORD *)(a1 + 72) |= 0x80u;
          v12 = operator new();
          v35 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)v12 = &off_1E6777220;
          *(_QWORD *)(v12 + 8) = v35 + 48;
          *(_QWORD *)(v12 + 16) = v35 + 68;
          v36 = 128;
LABEL_37:
          *(_WORD *)(v12 + 24) = v36;
          goto LABEL_49;
        }
        if (v11 != 16359)
          goto LABEL_46;
        action_for_data = read_action_for_flag_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v8[1], *(_QWORD *)(a1 + 64) + 68, 256, *(_QWORD *)(a1 + 64) + 49);
      }
LABEL_48:
      v12 = action_for_data;
LABEL_49:
      v41 = *(uint64_t **)(a1 + 40);
      if (v41 != *(uint64_t **)(a1 + 48)
        && (v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12), v41 = *(uint64_t **)(a1 + 48), v42)
        && (v43 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v41 - 1) + 32))(*(v41 - 1)),
            v41 = *(uint64_t **)(a1 + 48),
            v43))
      {
        *(_DWORD *)(*(v41 - 1) + 8) += *(_DWORD *)(v12 + 8);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      else
      {
        if ((unint64_t)v41 >= *v10)
        {
          v45 = ((char *)v41 - *v9) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v46 = *v10 - (_QWORD)*v9;
          v47 = v46 >> 2;
          if (v46 >> 2 <= (unint64_t)(v45 + 1))
            v47 = v45 + 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
            v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v48);
          else
            v49 = 0;
          v50 = (uint64_t *)&v49[8 * v45];
          *v50 = v12;
          v44 = v50 + 1;
          v52 = *(char **)(a1 + 40);
          v51 = *(char **)(a1 + 48);
          if (v51 != v52)
          {
            do
            {
              v53 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *--v50 = v53;
            }
            while (v51 != v52);
            v51 = *v9;
          }
          *(_QWORD *)(a1 + 40) = v50;
          *(_QWORD *)(a1 + 48) = v44;
          *(_QWORD *)(a1 + 56) = &v49[8 * v48];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v41 = v12;
          v44 = v41 + 1;
        }
        *(_QWORD *)(a1 + 48) = v44;
      }
      v8 += 2;
    }
    while (v8 != *(unsigned __int16 **)(a1 + 24));
  }
  return a1;
}

void sub_1B4124528(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev *v1;

  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

uint64_t skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1)
{
  uint64_t result;
  int v2;
  uint64_t (**v3)();
  _QWORD *exception;
  _QWORD *v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  _BYTE v9[256];

  switch(a1)
  {
    case 1:
    case 6:
    case 14:
    case 19:
    case 23:
    case 28:
    case 29:
    case 31:
    case 40:
    case 44:
      result = operator new();
      *(_QWORD *)result = &off_1E6776A50;
      v2 = 4;
      goto LABEL_9;
    case 3:
      result = operator new();
      v3 = &off_1E6776B40;
      goto LABEL_17;
    case 4:
      result = operator new();
      v3 = &off_1E6776B90;
      goto LABEL_17;
    case 5:
    case 18:
    case 38:
    case 42:
      result = operator new();
      *(_QWORD *)result = &off_1E6776A50;
      v2 = 2;
      goto LABEL_9;
    case 7:
    case 20:
    case 32:
    case 36:
      result = operator new();
      *(_QWORD *)result = &off_1E6776A50;
      v2 = 8;
      goto LABEL_9;
    case 8:
      result = operator new();
      v3 = &off_1E6776BE0;
      goto LABEL_17;
    case 9:
    case 24:
      result = operator new();
      v3 = &off_1E6776C30;
      goto LABEL_17;
    case 10:
      result = operator new();
      v3 = &off_1E6776AF0;
      goto LABEL_17;
    case 11:
    case 12:
    case 17:
    case 37:
    case 41:
      result = operator new();
      *(_QWORD *)result = &off_1E6776A50;
      v2 = 1;
      goto LABEL_9;
    case 13:
    case 15:
    case 21:
    case 26:
    case 27:
    case 34:
    case 35:
      result = operator new();
      v3 = &off_1E6776C80;
      goto LABEL_17;
    case 16:
      result = operator new();
      v3 = &off_1E6776AA0;
LABEL_17:
      *(_QWORD *)result = v3;
      break;
    case 22:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"DW_FORM_indirect not handled yet... ", 36);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, &v7);
      Exception::Exception(v6, &v7);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v6);
    case 25:
    case 33:
      result = operator new();
      *(_QWORD *)result = &off_1E6776A50;
      *(_DWORD *)(result + 8) = 0;
      break;
    case 30:
      result = operator new();
      *(_QWORD *)result = &off_1E6776A50;
      *(_DWORD *)(result + 8) = 16;
      break;
    case 39:
    case 43:
      result = operator new();
      *(_QWORD *)result = &off_1E6776A50;
      v2 = 3;
LABEL_9:
      *(_DWORD *)(result + 8) = v2;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Unhandled dwarf attribute ", 26);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, &v7);
      Exception::Exception(v6, &v7);
      v5 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v5, (uint64_t)v6);
  }
  return result;
}

void sub_1B41248A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v8)();
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  switch(a1)
  {
    case 5:
      result = operator new();
      v8 = &off_1E6776D20;
      goto LABEL_10;
    case 6:
      result = operator new();
      v8 = &off_1E6776D70;
      goto LABEL_10;
    case 7:
      result = operator new();
      v8 = &off_1E6776DC0;
      goto LABEL_10;
    case 8:
    case 9:
    case 10:
    case 12:
    case 14:
      goto LABEL_11;
    case 11:
      result = operator new();
      v8 = &off_1E6776CD0;
      goto LABEL_10;
    case 13:
      result = operator new();
      v8 = &off_1E6776EB0;
      goto LABEL_10;
    case 15:
      result = operator new();
      v8 = &off_1E6776E60;
      goto LABEL_10;
    default:
      if (a1 != 23)
      {
LABEL_11:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled form in read data binding ", 36);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
        Exception::Exception(v10, &v11);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v10);
      }
      result = operator new();
      v8 = &off_1E6776E10;
LABEL_10:
      *(_QWORD *)result = v8;
      *(_QWORD *)(result + 8) = a4;
      *(_QWORD *)(result + 16) = a2;
      *(_WORD *)(result + 24) = a3;
      return result;
  }
}

void sub_1B4124AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _QWORD *exception;
  uint64_t (**v12)();
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 > 36)
  {
    if ((a1 - 37) < 4)
    {
LABEL_3:
      result = operator new();
      *(_QWORD *)result = &off_1E6776FF0;
      *(_QWORD *)(result + 8) = a4;
      *(_QWORD *)(result + 16) = a2;
      *(_WORD *)(result + 24) = a3;
      *(_QWORD *)(result + 32) = a5;
      *(_DWORD *)(result + 40) = a1;
      return result;
    }
LABEL_7:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Unhandled form in read string binding ", 38);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v16, &v14);
    Exception::Exception(v13, &v14);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v13);
  }
  switch(a1)
  {
    case 8:
      result = operator new();
      v12 = &off_1E6776FA0;
      break;
    case 14:
      result = operator new();
      v12 = &off_1E6776F50;
      break;
    case 26:
      goto LABEL_3;
    default:
      goto LABEL_7;
  }
  *(_QWORD *)result = v12;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = a3;
  return result;
}

void sub_1B4124CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_ref_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1, uint64_t a2, __int16 a3, __int16 a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (**v10)();
  _QWORD *exception;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  switch(a1)
  {
    case 16:
      result = operator new();
      *(_QWORD *)result = &off_1E6777040;
      *(_QWORD *)(result + 8) = a5;
      *(_QWORD *)(result + 16) = a2;
      *(_WORD *)(result + 24) = a4 | a3;
      return result;
    case 17:
      result = operator new();
      v10 = &off_1E6777090;
      goto LABEL_8;
    case 18:
      result = operator new();
      v10 = &off_1E67770E0;
      goto LABEL_8;
    case 19:
      result = operator new();
      v10 = &off_1E6777130;
      goto LABEL_8;
    case 20:
      result = operator new();
      v10 = &off_1E6777180;
      goto LABEL_8;
    case 21:
      result = operator new();
      v10 = &off_1E67771D0;
LABEL_8:
      *(_QWORD *)result = v10;
      *(_QWORD *)(result + 8) = a5;
      *(_QWORD *)(result + 16) = a2;
      *(_WORD *)(result + 24) = a3;
      return result;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Unhandled form in read ref binding ", 35);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15, &v13);
      Exception::Exception(v12, &v13);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v12);
  }
}

void sub_1B4124EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_flag_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v8)();
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == 25)
  {
    result = operator new();
    v8 = &off_1E67772C0;
  }
  else
  {
    if (a1 != 12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled form in read flag binding ", 36);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }
    result = operator new();
    v8 = &off_1E6777270;
  }
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = a3;
  return result;
}

void sub_1B412501C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSymbolAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::type()
{
  return 1;
}

void TDwarfReadDW_FORM_AddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_AddrAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_AddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t CSCppDwarfAttributeAction::is_skip_constant(CSCppDwarfAttributeAction *this)
{
  return 0;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 4 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read dwarf_address", 46);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(unsigned int *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_1B41251D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_AddrxAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)v3);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 84))
  {
    *v4 = v6 | v5;
    v8 = v3[8];
    v9 = *(_QWORD *)(v8 + 16);
    v13 = *(_OWORD *)v8;
    v14 = v9;
    v10 = *(_DWORD *)(a1 + 48);
    switch(v10)
    {
      case ')':
        v11 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8(v3);
        goto LABEL_12;
      case '*':
        v11 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16((uint64_t)v3);
        goto LABEL_12;
      case '+':
        v11 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::threeBytes((uint64_t)v3);
        goto LABEL_12;
      case ',':
        v11 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32((uint64_t)v3);
LABEL_12:
        v12 = v11;
        break;
      default:
        if (v10 == 27)
          v12 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
        else
          v12 = 0;
        break;
    }
    result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::address_at_base_and_index((uint64_t)&v13, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 84), v12);
    **(_DWORD **)(a1 + 8) = result;
  }
  else
  {
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
    *(_QWORD *)(a1 + 40) = result;
  }
  return result;
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action_stage2(uint64_t result, uint64_t *a2)
{
  _WORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v2 = *(_WORD **)(result + 16);
  v3 = (unsigned __int16)*v2;
  v4 = *(unsigned __int16 *)(result + 24);
  if ((v4 & v3) == 0)
  {
    v5 = result;
    v6 = *a2;
    *v2 = v4 | v3;
    v7 = *(__int128 **)(v6 + 64);
    v8 = *((_QWORD *)v7 + 2);
    v9 = *v7;
    v10 = v8;
    result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::address_at_base_and_index((uint64_t)&v9, *(_DWORD *)(*(_QWORD *)(result + 32) + 84), *(_DWORD *)(result + 40));
    **(_DWORD **)(v5 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *exception;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v1 = 0;
  v2 = *(unsigned int *)(result + 8);
  LODWORD(v3) = *(_DWORD *)(result + 16);
  if (v3 <= v2)
    v3 = v2;
  else
    v3 = v3;
  v4 = v3 - v2;
  do
  {
    if (v4 == v1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Cursor overflow, attempt to skip ULEB", 37);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v10, &v8);
      Exception::Exception(v7, &v8);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v7);
    }
    v5 = *(char *)(*(_QWORD *)result + v2 + v1++);
  }
  while (v5 < 0);
  *(_DWORD *)(result + 8) = v2 + v1;
  return result;
}

void sub_1B412547C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::address_at_base_and_index(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  int v7;
  _QWORD *exception;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  _BYTE v15[256];

  v6 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::length_from_header(a1, a2);
  if (a3 >> 30)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Base relative index overflow in TDwarfAddressTableStream", 56);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v12);
  }
  v7 = 4 * a3;
  if (4 * a3 > v6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Base relative index not in bounds of current address table in TDwarfAddressTableStream", 86);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    v10 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v10, (uint64_t)v12);
  }
  if (*(_DWORD *)(a1 + 16) < v7 + a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Offset not in bounds of TDwarfAddressTableStream", 48);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    v11 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v11, (uint64_t)v12);
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a1, v7 + a2);
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(a1);
}

void sub_1B4125678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 2 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint16", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(unsigned __int16 *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 2;
  return v2;
}

void sub_1B41257AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::threeBytes(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 3 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read three bytes", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(_DWORD *)(*(_QWORD *)a1 + v1) & 0xFFFFFF;
  *(_DWORD *)(a1 + 8) = v1 + 3;
  return v2;
}

void sub_1B41258BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 4 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint32", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(unsigned int *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_1B41259C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::length_from_header(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  _QWORD *exception;
  _QWORD *v6;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;
  _BYTE v10[256];

  if (a2 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Overflow calculating start of header in TDwarfAddressTableStream", 64);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v7);
  }
  v3 = a2 - 8;
  if (*(_DWORD *)(a1 + 16) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Invalid offset to address table header in TDwarfAddressTableStream", 66);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    v6 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v6, (uint64_t)v7);
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a1, v3);
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(a1);
}

void sub_1B4125B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipConstantAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a2 + 8) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipDW_FORM_RefAddrAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

void TDwarfSkipDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a2 + 8) += 4;
}

void TDwarfSkipDW_FORM_Block1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipDW_FORM_Block1AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipDW_FORM_Block1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block1(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block1(uint64_t result)
{
  int v1;
  uint64_t v2;
  int v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_DWORD *)(result + 16);
  v2 = *(unsigned int *)(result + 8);
  if ((v1 - v2) < 0x100)
  {
    if (v1 == (_DWORD)v2 || v1 - (int)v2 < (*(_BYTE *)(*(_QWORD *)result + v2) + 1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block1", 44);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
      Exception::Exception(v5, &v6);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v5);
    }
    v3 = (*(_BYTE *)(*(_QWORD *)result + v2) + 1);
  }
  else
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)result + v2) + 1;
  }
  *(_DWORD *)(result + 8) = v3 + v2;
  return result;
}

void sub_1B4125D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_Block2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipDW_FORM_Block2AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipDW_FORM_Block2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block2(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block2(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(a1);
  v3 = *(_DWORD *)(a1 + 8) + result;
  if (v3 > *(_DWORD *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block2", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B4125E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_Block4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipDW_FORM_Block4AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipDW_FORM_Block4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block4(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block4(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(a1);
  v3 = *(_DWORD *)(a1 + 8) + result;
  if (v3 > *(_DWORD *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block4", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B4125F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipDW_FORM_StringAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

size_t TDwarfSkipDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_string(*a2);
}

size_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_string(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  size_t result;
  _QWORD *exception;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16) - v2;
  result = strlen((const char *)(*(_QWORD *)a1 + v2));
  if ((int)result + 1 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Cursor overflow, attempt to skip FORM_string", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v9, &v7);
    Exception::Exception(v6, &v7);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v6);
  }
  *(_DWORD *)(a1 + 8) = result + 1 + v2;
  return result;
}

void sub_1B4126084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipDW_FORM_BlockAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
  v3 = *(_DWORD *)(a1 + 8) + result;
  if (v3 > *(_DWORD *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block", 43);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B41261A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipULEBAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipULEBAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipULEBAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(*a2);
}

void TDwarfReadDW_FORM_Data1ToOffsetAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Data1ToOffsetAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data1ToOffsetAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Data2AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Data4AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Data8AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 8 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint64", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(_QWORD *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 8;
  return v2;
}

void sub_1B4126494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_Sec_OffsetAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Sec_OffsetAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Sec_OffsetAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 + 4 > (unint64_t)*(unsigned int *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read dwarf_offset", 45);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(unsigned int *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_1B4126610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_UdataAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void TDwarfReadDW_FORM_SdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_SdataAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_SdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::LEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::LEB(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = 0;
  v2 = 0;
  v3 = *(_DWORD *)(a1 + 8);
  do
  {
    if (*(_DWORD *)(a1 + 16) == v3)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Cursor overflow, attempt to read LEB", 36);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }
    v4 = *(char *)(*(_QWORD *)a1 + v3);
    v5 = v3 + 1;
    v2 |= (unint64_t)(*(_BYTE *)(*(_QWORD *)a1 + v3) & 0x7F) << v1;
    v1 += 7;
    ++v3;
  }
  while (v4 < 0);
  v6 = (v4 & 0x40) == 0 || v1 > 0x3F;
  v7 = -1 << v1;
  if (v6)
    v7 = 0;
  *(_DWORD *)(a1 + 8) = v5;
  return v7 | v2;
}

void sub_1B4126830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_AT_ranges()
{
  JUMPOUT(0x1B5E36940);
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a3 == 5)
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::extract_dwarf5_ranges(a1, (uint64_t)a2, 5);
  }
  else if (a3 > 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v4[0] = 67109120;
      v4[1] = a3;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Unexpected DWARF version parsing DW_AT_ranges: %d\n", (uint8_t *)v4, 8u);
    }
  }
  else
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::extract_dwarf4_ranges(a1, a2, a3);
  }
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::extract_dwarf5_ranges(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int i;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _DWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *exception;
  _QWORD v55[4];
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;

  v3 = *(_QWORD *)(a2 + 48);
  if (!v3)
    return;
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v3, 0);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)v3);
  v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(v3);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  if (v6)
  {
    v7 = v6;
    for (i = 0; i != v7; ++i)
    {
      v9 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(v3);
      v10 = v9;
      v11 = v62;
      if (v62 >= v63)
      {
        v13 = v61;
        v14 = (v62 - v61) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v16 = v63 - v61;
        if ((v63 - v61) >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v63, v17);
          v13 = v61;
          v11 = v62;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v10;
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v61 = v19;
        v62 = v12;
        v63 = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v62 = v9;
        v12 = v11 + 4;
      }
      v62 = v12;
    }
  }
  v21 = *(uint64_t **)a2;
  if (!v21)
    goto LABEL_56;
  if (*(_DWORD *)(a1 + 16) == 35)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v23 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v21);
    if (v23 >= (v62 - v61) >> 2)
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    v24 = *(_DWORD *)(v22 + 92) + *(_DWORD *)&v61[4 * v23];
  }
  else
  {
    v24 = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::offset_into_ranges(a1, (uint64_t)v21, a3);
  }
  if (v24 == -1)
    goto LABEL_56;
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v3, 0);
  *(_DWORD *)(v3 + 8) += v24;
  v25 = v21[8];
  v26 = *(_QWORD *)(v25 + 16);
  v59 = *(_OWORD *)v25;
  v60 = v26;
  if (!*(_QWORD *)v3)
  {
    **(_QWORD **)(a1 + 8) = 0xFFFFFFFFLL;
    goto LABEL_56;
  }
  v27 = 0;
  v28 = 0;
  v29 = -1;
  while (1)
  {
    v30 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)v3);
    v31 = v30;
    if (v30 != 1)
      break;
    v38 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)v3);
    v27 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::address_at_base_and_index((uint64_t)&v59, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 84), v38);
LABEL_49:
    if (!*(_QWORD *)v3)
      goto LABEL_53;
  }
  if (v30 == 4)
  {
    v32 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    v33 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    v34 = *(_QWORD **)(a1 + 8);
    v35 = (_DWORD *)v34[13];
    v36 = v34[14];
    if ((unint64_t)v35 >= v36)
    {
      v39 = v34[12];
      v40 = ((uint64_t)v35 - v39) >> 3;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v42 = v36 - v39;
      if (v42 >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v34 + 14), v43);
      v46 = &v44[8 * v40];
      *(_DWORD *)v46 = v32;
      *((_DWORD *)v46 + 1) = v33;
      v48 = (char *)v34[12];
      v47 = (char *)v34[13];
      v49 = v46;
      if (v47 != v48)
      {
        do
        {
          v50 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *((_QWORD *)v49 - 1) = v50;
          v49 -= 8;
        }
        while (v47 != v48);
        v47 = (char *)v34[12];
      }
      v37 = v46 + 8;
      v34[12] = v49;
      v34[13] = v46 + 8;
      v34[14] = &v44[8 * v45];
      if (v47)
        operator delete(v47);
    }
    else
    {
      *v35 = v32;
      v35[1] = v33;
      v37 = v35 + 2;
    }
    v34[13] = v37;
    if (v32 < v29)
      v29 = v32;
    if (v28 <= v33)
      v28 = v33;
    goto LABEL_49;
  }
  if (v30)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v57);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Unimplemented range list entry kind", 35);
    LOBYTE(v55[0]) = v31;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v55, 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v58, &v56);
    Exception::Exception(v55, &v56);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v55);
  }
LABEL_53:
  v51 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v51 = v29;
  *(_DWORD *)(v51 + 4) = v28;
  if (v29 != -1 && v28)
    *(_WORD *)(v51 + 68) |= 3u;
LABEL_56:
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_1B4126DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  Exception::~Exception(&a11);
  if (a20 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(_QWORD *)(v21 - 104) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::extract_dwarf4_ranges(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  char *v26;
  char *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *a2;
  if (v4)
  {
    v5 = result;
    result = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::offset_into_ranges(result, v4, a3);
    if ((_DWORD)result != -1)
    {
      v6 = a2[5];
      if (v6)
      {
        *(_DWORD *)(v6 + 8) += result;
        v7 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(v6);
        v8 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(v6);
        v9 = 0;
        if (v7 | v8)
        {
          v10 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 76);
          v11 = -1;
          do
          {
            if (v7 == -1)
            {
              v10 = v8;
            }
            else
            {
              v12 = v10 + v7;
              v13 = v10 + v8;
              v14 = *(_QWORD **)(v5 + 8);
              v15 = (unsigned int *)v14[13];
              v16 = v14[14];
              if ((unint64_t)v15 >= v16)
              {
                v18 = v14[12];
                v19 = ((uint64_t)v15 - v18) >> 3;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 61)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                v21 = v16 - v18;
                if (v21 >> 2 > v20)
                  v20 = v21 >> 2;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
                  v22 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v14 + 14), v22);
                v25 = (unsigned int *)&v24[8 * v19];
                *v25 = v12;
                v25[1] = v13;
                v27 = (char *)v14[12];
                v26 = (char *)v14[13];
                v28 = v25;
                if (v26 != v27)
                {
                  do
                  {
                    v29 = *((_QWORD *)v26 - 1);
                    v26 -= 8;
                    *((_QWORD *)v28 - 1) = v29;
                    v28 -= 2;
                  }
                  while (v26 != v27);
                  v26 = (char *)v14[12];
                }
                v17 = v25 + 2;
                v14[12] = v28;
                v14[13] = v25 + 2;
                v14[14] = &v24[8 * v23];
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *v15 = v12;
                v15[1] = v13;
                v17 = v15 + 2;
              }
              v14[13] = v17;
              if (v12 < v11)
                v11 = v12;
              if (v9 <= v13)
                v9 = v13;
            }
            v7 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(v6);
            v8 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(v6);
          }
          while (v7 | v8);
        }
        else
        {
          v11 = -1;
        }
        result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v6, 0);
        v30 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)v30 = v11;
        *(_DWORD *)(v30 + 4) = v9;
        if (v11 != -1)
        {
          if (v9)
            *(_WORD *)(v30 + 68) |= 3u;
        }
      }
    }
  }
  return result;
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer32,LittleEndian>>::offset_into_ranges(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 16);
  switch(v3)
  {
    case 6:
      return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(a2);
    case 7:
      return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(a2);
    case 23:
      return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(a2);
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    v8 = a3;
    v9 = 1024;
    v10 = v3;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n", buf, 0xEu);
    v3 = *(_DWORD *)(a1 + 16);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n", a3, v3);
  return 0xFFFFFFFFLL;
}

void TDwarfReadDW_FORM_StrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_StrpAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_StrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;

  result = *a2;
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(result);
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v4, v5);
    v6 = *(_QWORD **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *v6 = *(_QWORD *)v4 + *(unsigned int *)(v4 + 8);
  }
  return result;
}

void TDwarfReadDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_StringAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

const char *TDwarfReadDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _WORD *v4;
  int v5;
  int v6;
  const char *result;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return (const char *)TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_string(v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string(v3);
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

const char *TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  const char *v4;
  unsigned int v5;
  _QWORD *exception;
  _QWORD v8[4];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16) - v2;
  v4 = (const char *)(*(_QWORD *)a1 + v2);
  v5 = strlen(v4) + 1;
  if (v5 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Cursor overflow, attempt to read FORM_string", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v11, &v9);
    Exception::Exception(v8, &v9);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v8);
  }
  *(_DWORD *)(a1 + 8) = v5 + v2;
  return v4;
}

void sub_1B412732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_StrxAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_StrxAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_StrxAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *exception;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  _BYTE v15[256];

  v2 = *a2;
  if ((*(_WORD *)(result + 24) & **(_WORD **)(result + 16)) != 0)
  {
    *((_DWORD *)v2 + 2) += 4;
  }
  else
  {
    v3 = result;
    v4 = v2[7];
    v5 = *(_DWORD *)(result + 40);
    switch(v5)
    {
      case '%':
        v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8(*a2);
        goto LABEL_11;
      case '&':
        v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16((uint64_t)*a2);
        goto LABEL_11;
      case '\'':
        v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::threeBytes((uint64_t)*a2);
        goto LABEL_11;
      case '(':
        v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32((uint64_t)*a2);
        goto LABEL_11;
      default:
        if (v5 == 26)
        {
          v6 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(*a2);
LABEL_11:
          if ((v6 & 0xC0000000) != 0)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"FORM_strx index overflow", 24);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
            Exception::Exception(v12, &v13);
            exception = __cxa_allocate_exception(0x20uLL);
            Exception::Exception(exception, (uint64_t)v12);
          }
        }
        else
        {
          v6 = 0;
        }
        v7 = **(_DWORD **)(v3 + 32);
        if (__CFADD__(v7, 4 * v6))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"FORM_strx offset overflow", 25);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
          Exception::Exception(v12, &v13);
          v10 = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(v10, (uint64_t)v12);
        }
        TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v4, v7 + 4 * v6);
        v8 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(v4);
        v9 = v2[4];
        result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v9, v8);
        **(_WORD **)(v3 + 16) |= *(_WORD *)(v3 + 24);
        **(_QWORD **)(v3 + 8) = *(_QWORD *)v9 + *(unsigned int *)(v9 + 8);
        break;
    }
  }
  return result;
}

void sub_1B4127598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_RefAddrAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result;
  _WORD *v5;
  int v6;
  int v7;

  result = *a2;
  v5 = *(_WORD **)(a1 + 16);
  v6 = (unsigned __int16)*v5;
  v7 = *(unsigned __int16 *)(a1 + 24);
  if ((v7 & v6) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v5 = v7 | v6;
    if (a3 > 2)
      result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(result);
    else
      result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Ref1AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Ref2AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Ref4AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Ref8AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Ref_UdataAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void TDwarfReadDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_Data1AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_BYTE **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_FlagAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_FlagAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_FlagAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_BYTE **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_FlagPresentAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_FlagPresentAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_FlagPresentAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 8);
  **(_WORD **)(result + 16) |= *(_WORD *)(result + 24);
  *v1 = 1;
  return result;
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSourceInfoAbbrev(uint64_t a1, int a2, char a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  char **v9;
  _QWORD *v10;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t action_for_string;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = *a4;
  *a4 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a4[1];
  a4[1] = v6;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a4[2];
  a4[2] = v7;
  *(_QWORD *)a1 = &off_1E6777310;
  *(_QWORD *)(a1 + 64) = a5;
  v8 = *(unsigned __int16 **)(a1 + 16);
  if (v8 != *(unsigned __int16 **)(a1 + 24))
  {
    v9 = (char **)(a1 + 40);
    v10 = (_QWORD *)(a1 + 56);
    do
    {
      v11 = *v8;
      if (v11 <= 0x51)
      {
        if (*v8 > 0x11u)
        {
          if (v11 != 18)
          {
            if (v11 != 27)
            {
LABEL_42:
              v15 = v8[1];
LABEL_43:
              action_for_string = skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v15);
              goto LABEL_44;
            }
            v13 = *(_QWORD *)(a1 + 64);
            v14 = v13 + 32;
            v12 = 32;
LABEL_21:
            action_for_string = read_action_for_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v8[1], v13 + 68, v12, v14, v13 + 88);
            goto LABEL_44;
          }
          v22 = v8[1];
          if ((v22 - 41) < 4 || v22 == 27)
          {
            v17 = operator new();
            v28 = *(_QWORD *)(a1 + 64);
            v29 = v8[1];
            *(_QWORD *)v17 = &off_1E6776A00;
            *(_QWORD *)(v17 + 8) = v28 + 4;
            *(_QWORD *)(v17 + 16) = v28 + 68;
            *(_WORD *)(v17 + 24) = 2;
LABEL_39:
            *(_QWORD *)(v17 + 32) = v28;
            *(_QWORD *)(v17 + 40) = 0;
            *(_DWORD *)(v17 + 48) = v29;
            goto LABEL_45;
          }
          if (v22 != 1)
          {
            v51 = *(_QWORD *)(a1 + 64);
            v24 = v51 + 68;
            v25 = v51 + 72;
            v21 = -32766;
LABEL_41:
            action_for_string = read_action_for_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v22, v24, v21, v25);
LABEL_44:
            v17 = action_for_string;
            goto LABEL_45;
          }
          v46 = operator new();
          v17 = v46;
          v49 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)v46 = &off_1E67769A0;
          *(_QWORD *)(v46 + 8) = v49 + 4;
          *(_QWORD *)(v46 + 16) = v49 + 68;
          v48 = 2;
        }
        else
        {
          if (v11 == 16)
          {
            v22 = v8[1];
            v26 = *(_QWORD *)(a1 + 64);
            v24 = v26 + 68;
            v25 = v26 + 44;
            v21 = 64;
            goto LABEL_41;
          }
          if (v11 != 17)
            goto LABEL_42;
          v15 = v8[1];
          if ((v15 - 41) < 4 || v15 == 27)
          {
            v17 = operator new();
            v18 = *(_QWORD *)(a1 + 64);
            v19 = v8[1];
            *(_QWORD *)v17 = &off_1E6776A00;
            *(_QWORD *)(v17 + 8) = v18;
            *(_QWORD *)(v17 + 16) = v18 + 68;
            *(_WORD *)(v17 + 24) = 1;
            *(_QWORD *)(v17 + 32) = v18;
            *(_QWORD *)(v17 + 40) = 0;
            *(_DWORD *)(v17 + 48) = v19;
            goto LABEL_45;
          }
          if (v15 != 1)
            goto LABEL_43;
          v46 = operator new();
          v17 = v46;
          v47 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)v46 = &off_1E67769A0;
          *(_QWORD *)(v46 + 8) = v47;
          *(_QWORD *)(v46 + 16) = v47 + 68;
          v48 = 1;
        }
        *(_WORD *)(v46 + 24) = v48;
      }
      else
      {
        if (*v8 > 0x72u)
        {
          if (v11 == 115)
          {
            v21 = 0;
            v22 = v8[1];
            v30 = *(_QWORD *)(a1 + 64);
            v24 = v30 + 68;
            v25 = v30 + 84;
            goto LABEL_41;
          }
          if (v11 == 116)
          {
            v21 = 0;
            v22 = v8[1];
            v32 = *(_QWORD *)(a1 + 64);
            v24 = v32 + 68;
            v25 = v32 + 92;
            goto LABEL_41;
          }
          if (v11 != 16368)
            goto LABEL_42;
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 64);
          v14 = v13 + 120;
          goto LABEL_21;
        }
        if (v11 != 82)
        {
          if (v11 == 114)
          {
            v21 = 0;
            v22 = v8[1];
            v23 = *(_QWORD *)(a1 + 64);
            v24 = v23 + 68;
            v25 = v23 + 88;
            goto LABEL_41;
          }
          goto LABEL_42;
        }
        v15 = v8[1];
        if ((v15 - 41) < 4 || v15 == 27)
        {
          v17 = operator new();
          v28 = *(_QWORD *)(a1 + 64);
          v29 = v8[1];
          *(_QWORD *)v17 = &off_1E6776A00;
          *(_QWORD *)(v17 + 8) = v28 + 8;
          *(_QWORD *)(v17 + 16) = v28 + 68;
          *(_WORD *)(v17 + 24) = 0;
          goto LABEL_39;
        }
        if (v15 != 1)
          goto LABEL_43;
        v17 = operator new();
        v50 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)v17 = &off_1E67769A0;
        *(_QWORD *)(v17 + 8) = v50 + 8;
        *(_QWORD *)(v17 + 16) = v50 + 68;
        *(_WORD *)(v17 + 24) = 0;
      }
LABEL_45:
      v33 = *(uint64_t **)(a1 + 40);
      if (v33 != *(uint64_t **)(a1 + 48)
        && (v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17), v33 = *(uint64_t **)(a1 + 48), v34)
        && (v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v33 - 1) + 32))(*(v33 - 1)),
            v33 = *(uint64_t **)(a1 + 48),
            v35))
      {
        *(_DWORD *)(*(v33 - 1) + 8) += *(_DWORD *)(v17 + 8);
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      else
      {
        if ((unint64_t)v33 >= *v10)
        {
          v37 = ((char *)v33 - *v9) >> 3;
          if ((unint64_t)(v37 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v38 = *v10 - (_QWORD)*v9;
          v39 = v38 >> 2;
          if (v38 >> 2 <= (unint64_t)(v37 + 1))
            v39 = v37 + 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v40);
          else
            v41 = 0;
          v42 = (uint64_t *)&v41[8 * v37];
          *v42 = v17;
          v36 = v42 + 1;
          v44 = *(char **)(a1 + 40);
          v43 = *(char **)(a1 + 48);
          if (v43 != v44)
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *--v42 = v45;
            }
            while (v43 != v44);
            v43 = *v9;
          }
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)(a1 + 48) = v36;
          *(_QWORD *)(a1 + 56) = &v41[8 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *v33 = v17;
          v36 = v33 + 1;
        }
        *(_QWORD *)(a1 + 48) = v36;
      }
      v8 += 2;
    }
    while (v8 != *(unsigned __int16 **)(a1 + 24));
  }
  return a1;
}

void sub_1B4127E90(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev *v1;

  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

void TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSourceInfoAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::type()
{
  return 2;
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSkipAbbrev(uint64_t a1, int a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = *a4;
  *a4 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a4[1];
  a4[1] = v5;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a4[2];
  a4[2] = v6;
  *(_QWORD *)a1 = &off_1E6777358;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 != *(_QWORD *)(a1 + 24))
  {
    v8 = (char **)(a1 + 40);
    v9 = (_QWORD *)(a1 + 56);
    do
    {
      v10 = skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(*(unsigned __int16 *)(v7 + 2));
      v11 = (_DWORD *)v10;
      v12 = *(_QWORD **)(a1 + 40);
      if (v12 != *(_QWORD **)(a1 + 48)
        && (v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10), v12 = *(_QWORD **)(a1 + 48), v13)
        && (v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v12 - 1) + 32))(*(v12 - 1)),
            v12 = *(_QWORD **)(a1 + 48),
            v14))
      {
        *(_DWORD *)(*(v12 - 1) + 8) += v11[2];
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      }
      else
      {
        if ((unint64_t)v12 >= *v9)
        {
          v16 = ((char *)v12 - *v8) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v17 = *v9 - (_QWORD)*v8;
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v19);
          else
            v20 = 0;
          v21 = &v20[8 * v16];
          *(_QWORD *)v21 = v11;
          v15 = v21 + 8;
          v23 = *(char **)(a1 + 40);
          v22 = *(char **)(a1 + 48);
          if (v22 != v23)
          {
            do
            {
              v24 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *((_QWORD *)v21 - 1) = v24;
              v21 -= 8;
            }
            while (v22 != v23);
            v22 = *v8;
          }
          *(_QWORD *)(a1 + 40) = v21;
          *(_QWORD *)(a1 + 48) = v15;
          *(_QWORD *)(a1 + 56) = &v20[8 * v19];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v12 = v11;
          v15 = v12 + 1;
        }
        *(_QWORD *)(a1 + 48) = v15;
      }
      v7 += 4;
    }
    while (v7 != *(_QWORD *)(a1 + 24));
  }
  return a1;
}

void sub_1B41280A4(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev *v1;

  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

void TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::type()
{
  return 0;
}

void std::vector<CSCppDwarfAbbrev *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<CSCppDwarfAbbrev *>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<CSCppDwarfAbbrev *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v2 + 72);
    JUMPOUT(0x1B5E36940);
  }
  return result;
}

uint64_t parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer32,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>(uint64_t a1, uint64_t a2, uint64_t **a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  __int16 v23;
  uint8_t buf[2];
  __int16 v25;

  v6 = *(unsigned __int16 *)(a1 + 68);
  if ((v6 & 0x10) != 0)
  {
    v7 = *(_DWORD *)(a1 + 40) & (v6 << 18 >> 31);
    if ((v6 & 0x2000) != 0)
      v8 = 0;
    else
      v8 = *(_DWORD *)(a1 + 40);
    v9 = -8209;
  }
  else
  {
    if ((v6 & 0x200) == 0)
      return 0;
    v7 = *(_DWORD *)(a1 + 52) & (v6 << 17 >> 31);
    if ((v6 & 0x4000) != 0)
      v8 = 0;
    else
      v8 = *(_DWORD *)(a1 + 52);
    v9 = -16897;
  }
  *(_WORD *)(a1 + 68) = v6 & v9;
  v10 = (*a4)++;
  if (v10 < 10)
  {
    if (v8)
      v14 = 1;
    else
      v14 = v7 == 0;
    if (v14)
      goto LABEL_26;
    v15 = *a3;
    v16 = a3[1];
    if (v16 != *a3)
    {
      v17 = v16 - *a3;
      do
      {
        v18 = v17 >> 1;
        v19 = &v15[v17 >> 1];
        v21 = *v19;
        v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (*(_DWORD *)(v21 + 16) + *(_DWORD *)(v21 + 12) > v7)
          v17 = v18;
        else
          v15 = v20;
      }
      while (v17);
    }
    if (v15 == v16 || (a2 = *v15, v8 = v7 - *(_DWORD *)(*v15 + 12), v8 >= *(_DWORD *)(*v15 + 16)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v11 = MEMORY[0x1E0C81028];
        v12 = "Ref addr is not within the bounds of any compile unit";
        v13 = buf;
        goto LABEL_31;
      }
    }
    else
    {
LABEL_26:
      if (*(_DWORD *)(a2 + 16) >= v8)
      {
        read_specification_abbrev_at<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v8, a2);
        return a2;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v23 = 0;
        v11 = MEMORY[0x1E0C81028];
        v12 = "Out-of-bounds abstract origin or specification offset";
        v13 = (uint8_t *)&v23;
        goto LABEL_31;
      }
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v25 = 0;
    v11 = MEMORY[0x1E0C81028];
    v12 = "Possible reference cycle in DIE";
    v13 = (uint8_t *)&v25;
LABEL_31:
    _os_log_impl(&dword_1B40C5000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
  }
  return 0;
}

uint64_t resolve_parsed_data_names<Dwarf<Dwarf32,Pointer32,LittleEndian>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __int16 v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_WORD *)(a1 + 68);
  v4 = (_QWORD *)(a1 + 16);
  if ((v3 & 0xC) == 8)
    v5 = (uint64_t *)(a1 + 24);
  else
    v5 = (uint64_t *)(a1 + 16);
  v6 = *v5;
  if ((v3 & 0xC) == 8)
    v7 = 67141633;
  else
    v7 = 67174401;
  *a2 = v6;
  if ((v3 & 4) != 0)
    v8 = 0x200000;
  else
    v8 = 0x100000;
  v9 = v7 | v8;
  if ((v3 & 4) == 0)
    v4 = (_QWORD *)(a1 + 24);
  *a3 = *v4;
  if (*(_BYTE *)(a1 + 48) == 1 && (v3 & 0x80u) != 0)
    v11 = v9 | 0x40;
  else
    v11 = v9;
  if (*(_BYTE *)(a1 + 49) == 1)
    v12 = v11 | 0x80;
  else
    v12 = v11;
  if ((v3 & 0x100) != 0)
    return v12;
  else
    return v11;
}

uint64_t TAddressRelocator<Pointer32>::relocate(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a2;
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)a1[3];
  if ((a2 - *v3) < v3[1])
    return (v3[2] + a2);
  v4 = a1[1] - *a1;
  if (v4)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 2);
    v6 = (_DWORD *)*a1;
    do
    {
      v7 = v5 >> 1;
      v8 = &v6[3 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 3;
      v5 += ~(v5 >> 1);
      if (v10 > a2)
        v5 = v7;
      else
        v6 = v9;
    }
    while (v5);
    if (v6 != (_DWORD *)*a1)
    {
      v11 = *(v6 - 3);
      v12 = *(v6 - 2);
      v3 = v6 - 3;
      if ((int)a2 - v11 < v12)
      {
        a1[3] = v3;
        return (v3[2] + a2);
      }
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v14 = 134217984;
    v15 = v2;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Attempt to relocate address [0x%llx], which is outside segment deltas\n", (uint8_t *)&v14, 0xCu);
  }
  return v2;
}

uint64_t TDwarfAbbrevData<Dwarf<Dwarf32,Pointer32,LittleEndian>>::has_inlined_info(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v3;
  uint64_t result;

  v2 = *(unsigned __int16 *)(a1 + 68);
  if (a2 >= 5)
  {
    v3 = (v2 >> 10) & 1;
LABEL_8:
    result = 1;
    if ((v3 & 1) == 0 && (v2 & 0x800) == 0)
      return (v2 >> 12) & 1;
    return result;
  }
  if ((v2 & 0x400) != 0)
  {
    LOBYTE(v3) = *(_DWORD *)(a1 + 56) != 0;
    goto LABEL_8;
  }
  if ((v2 & 0x800) == 0)
    return (v2 >> 12) & 1;
  return 1;
}

const char *path_from_file_index<Pointer32>(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5;
  void **v9;
  FILE *v10;
  const char *v11;
  void *__p[2];
  char v13;
  _BYTE buf[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = (__PAIR64__(a2, a5) - 5) >> 32;
  if (v5 < (uint64_t)(a1[1] - *a1) >> 3)
    return *(const char **)(*a1 + 8 * v5);
  if ((path_from_file_index<Pointer32>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer32> &,unsigned int)::suppress_error & 1) == 0)
  {
    path_from_file_index<Pointer32>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer32> &,unsigned int)::suppress_error = 1;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a4 + 232))(__p, a4);
      v9 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v9;
      v15 = 2048;
      v16 = a3;
      v17 = 1024;
      v18 = v5;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n", buf, 0x1Cu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a4 + 232))(buf, a4);
    if (v17 >= 0)
      v11 = buf;
    else
      v11 = *(const char **)buf;
    fprintf(v10, "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n", v11, a3, v5);
    if (SHIBYTE(v17) < 0)
      operator delete(*(void **)buf);
  }
  return "<Bad file name in .debug_info>";
}

void record_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>,std::deque<TRawSymbol<Pointer32>>>(_DWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  if (*(_DWORD *)(a3 + 8) == 29)
    record_inlined_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>>(a1, a2, a3, a5);
  else
    record_concrete_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>,std::deque<TRawSymbol<Pointer32>>>((uint64_t)a1, a2, a3, a4, (void **)a5);
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_compilation_unit_pc_ranges(uint64_t result)
{
  int *v1;
  __int16 v2;
  int v3;
  int v4;

  v1 = *(int **)(result + 64);
  v2 = *((_WORD *)v1 + 34);
  if ((v2 & 1) != 0)
  {
    v3 = *v1;
LABEL_6:
    v1[19] = v3;
    if ((v2 & 2) == 0)
      return result;
    goto LABEL_7;
  }
  v3 = v1[2];
  if (v3 != -1)
    goto LABEL_6;
  if ((v1[17] & 2) == 0)
    return result;
LABEL_7:
  if (v2 < 0)
    v4 = v1[18] + *v1;
  else
    v4 = v1[1];
  v1[20] = v4;
  return result;
}

void parse_line_numbers<Dwarf<Dwarf32,Pointer32,LittleEndian>>(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, const char *a5, int a6, uint64_t a7, _QWORD *a8, uint64_t (***a9)(_QWORD, std::vector<std::string>::pointer), uint64_t a10, _QWORD *a11)
{
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t **v51;
  CSCppStringCache *v52;
  char v53;
  int v54;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  int v59;
  unsigned int v60;
  int v61;
  void *__p;
  _BYTE *v63;
  uint64_t v64;
  char __s1[8];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a1, a3);
  v17 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(a1);
  v18 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(a1);
  if (v18 - 6 >= 0xFFFFFFFC)
  {
    v19 = v18;
    if (v18 == 5)
    {
      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    }
    v52 = (CSCppStringCache *)(a7 + 96);
    TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(a1);
    v54 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    if (v19 >= 4)
      TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    v53 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    v20 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
    v21 = *(unsigned int *)(a1 + 8);
    v57 = (unsigned __int8 *)(*(_QWORD *)a1 + v21);
    v22 = *v57;
    *(_DWORD *)(a1 + 8) = v21 + v22;
    __p = 0;
    v63 = 0;
    v64 = 0;
    if (v19 == 5)
    {
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>((uint64_t *)a1, a2, 5u, a9, v52, a4, (uint64_t)&__p, (char **)&__p);
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>((uint64_t *)a1, a2, 5u, a9, v52, a4, (uint64_t)&__p, (char **)a10);
    }
    else
    {
      parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>((uint64_t *)a1, a5, (uint64_t (***)(_QWORD, char *))a9, v52, &__p, (void **)a10);
    }
    v60 = 0;
    v61 = 1;
    v23 = a3 + v17 + 4;
    if (*(_DWORD *)(a1 + 8) < v23)
    {
      v24 = 0;
      v25 = 1;
      do
      {
        v26 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
        if (v26 >= v22)
        {
          v24 += (v26 - v22) / v20 * v54;
          v61 += v53 + (v26 - v22) % v20;
          LODWORD(v58) = 0;
          v36 = (v24 + a6);
          if (a8)
            LODWORD(v36) = TAddressRelocator<Pointer32>::relocate(a8, v36);
LABEL_22:
          LODWORD(v58) = v36;
          *(_QWORD *)__s1 = 0;
          *(_QWORD *)__s1 = path_from_file_index<Pointer32>((_QWORD *)a10, v25, *(unsigned int *)(a1 + 8), a7, v19);
          v59 = 0;
          std::deque<TRawSourceInfo<Pointer32>>::emplace_back<unsigned int &,int,char const*&,int &,unsigned int &>(a11, &v58, &v59, (uint64_t *)__s1, &v61, &v60);
        }
        else
        {
          v27 = v26;
          switch(v26)
          {
            case 0u:
              v28 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
              if (!v28)
                goto LABEL_62;
              v29 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)a1);
              switch(v29)
              {
                case 1:
                  v24 = 0;
                  v25 = 1;
                  v60 = 0;
                  v61 = 1;
                  break;
                case 2:
                  v24 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_address(a1);
                  break;
                case 3:
                  v30 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string(a1);
                  v31 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(a1);
                  if (*v30 == 47)
                  {
                    v32 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                    v33 = v32;
                    v35 = *(uint64_t **)(a10 + 8);
                    v34 = *(_QWORD *)(a10 + 16);
                    if ((unint64_t)v35 >= v34)
                    {
                      v41 = ((uint64_t)v35 - *(_QWORD *)a10) >> 3;
                      v42 = v41 + 1;
                      if ((unint64_t)(v41 + 1) >> 61)
                        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                      v43 = v34 - *(_QWORD *)a10;
                      if (v43 >> 2 > v42)
                        v42 = v43 >> 2;
                      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                        v44 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v44 = v42;
                      if (v44)
                        v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a10 + 16, v44);
                      else
                        v45 = 0;
                      v46 = (uint64_t *)&v45[8 * v41];
                      *v46 = v33;
                      v47 = v46 + 1;
                      v49 = *(char **)a10;
                      v48 = *(char **)(a10 + 8);
                      if (v48 == *(char **)a10)
                      {
                        v51 = (uint64_t **)a10;
                      }
                      else
                      {
                        do
                        {
                          v50 = *((_QWORD *)v48 - 1);
                          v48 -= 8;
                          *--v46 = v50;
                        }
                        while (v48 != v49);
                        v51 = (uint64_t **)a10;
                        v48 = *(char **)a10;
                      }
                      *v51 = v46;
                      v51[1] = v47;
                      v51[2] = (uint64_t *)&v45[8 * v44];
                      if (v48)
                        operator delete(v48);
                      *(_QWORD *)(a10 + 8) = v47;
                    }
                    else
                    {
                      *v35 = v32;
                      *(_QWORD *)(a10 + 8) = v35 + 1;
                    }
                  }
                  else
                  {
                    if (v31 >= (unint64_t)((v63 - (_BYTE *)__p) >> 3))
                      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
                    v39 = (const char *)*((_QWORD *)__p + v31);
                    if (v39)
                    {
                      stringByAppendingPathComponents(__s1, 0x400uLL, v39, v30);
                      v40 = (char *)(**a9)(a9, (std::vector<std::string>::pointer)__s1);
                      v58 = CSCppStringCache::intern(v52, v40);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, &v58);
                    }
                    else
                    {
                      *(_QWORD *)__s1 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, __s1);
                    }
                  }
                  break;
                default:
                  *(_DWORD *)(a1 + 8) = v28 + *(_DWORD *)(a1 + 8) - 1;
                  break;
              }
              break;
            case 1u:
              LODWORD(v58) = 0;
              v36 = (v24 + a6);
              if (a8)
                LODWORD(v36) = TAddressRelocator<Pointer32>::relocate(a8, v36);
              goto LABEL_22;
            case 2u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1) * v54;
              break;
            case 3u:
              v37 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::LEB(a1);
              v61 += v37;
              break;
            case 4u:
              v25 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 5u:
              v60 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 6u:
            case 7u:
            case 0xAu:
            case 0xBu:
              break;
            case 8u:
              v24 += (v22 ^ 0xFF) / v20 * v54;
              break;
            case 9u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(a1);
              break;
            case 0xCu:
              TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(a1);
              break;
            default:
              if (v57[v26])
              {
                v38 = 0;
                do
                {
                  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(a1);
                  ++v38;
                }
                while (v38 < v57[v27]);
              }
              break;
          }
        }
      }
      while (*(_DWORD *)(a1 + 8) < v23);
    }
LABEL_62:
    if (__p)
    {
      v63 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B4128E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRangeValue<Pointer32,char const*>>::emplace_back<unsigned int &,unsigned int &,char const*&>(_QWORD *a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v9 = a1[2];
  v8 = a1[1];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 32 * (v9 - v8) - 1;
  v11 = a1[4];
  v12 = a1[5];
  v13 = v12 + v11;
  if (v10 == v12 + v11)
  {
    std::deque<TRangeValue<Pointer32,char const*>>::__add_back_capacity(a1);
    v11 = a1[4];
    v12 = a1[5];
    v8 = a1[1];
    v13 = v11 + v12;
  }
  v14 = *(_QWORD *)(v8 + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v13;
  v15 = *a3;
  v16 = *a4;
  *(_DWORD *)v14 = *a2;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = v16;
  v17 = v12 + 1;
  a1[5] = v17;
  v18 = v11 + v17;
  v19 = (_QWORD *)(v8 + 8 * (v18 >> 8));
  if ((_BYTE)v18)
    v20 = *v19 + 16 * v18;
  else
    v20 = *(v19 - 1) + 4096;
  return v20 - 16;
}

void read_specification_abbrev_at<Dwarf<Dwarf32,Pointer32,LittleEndian>>(unsigned int a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  CSCppDwarfAbbrevTable *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *exception;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[4];
  __int128 v23;
  void *__p;
  _OWORD v25[16];
  CSCppDwarfAbbrevTable *v26;
  std::__shared_weak_count *v27;

  v3 = *(_DWORD *)(a2 + 8);
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a2, a1);
  v4 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB((uint64_t *)a2);
  v6 = *(CSCppDwarfAbbrevTable **)(a2 + 72);
  v5 = *(std::__shared_weak_count **)(a2 + 80);
  v26 = v6;
  v27 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v4 || (v9 = v4, v4 >= (unint64_t)((uint64_t)(*((_QWORD *)v6 + 2) - *((_QWORD *)v6 + 1)) >> 3)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid specification abbrev index in DWARF: ", 45);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
    Exception::Exception(v22, &v23);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v22);
  }
  v10 = *((_QWORD *)v6 + 7);
  v11 = CSCppDwarfAbbrevTable::specification_abbrev_at(v6, v4);
  if (!v11)
  {
    v12 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * v9);
    if (!v12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Null abbrev discovered in DWARF at index ", 41);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      v19 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v19, (uint64_t)v22);
    }
    v13 = *(_DWORD *)(v12 + 8);
    if (v13 > 0x2E || ((1 << v13) & 0x400020000008) == 0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid abbrev tag ", 19);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for symbol entry.", 18);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      v21 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v21, (uint64_t)v22);
    }
    v25[0] = 0uLL;
    __p = 0;
    std::vector<CSCppDwarfAttribute>::__init_with_size[abi:ne180100]<CSCppDwarfAttribute*,CSCppDwarfAttribute*>(&__p, *(const void **)(v12 + 16), *(_QWORD *)(v12 + 24), (uint64_t)(*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 2);
    v11 = operator new();
    TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer32,LittleEndian>>::TDwarfSymbolAbbrev(v11, *(_DWORD *)(v12 + 8), *(_BYTE *)(v12 + 12), &__p, v10);
    v15 = *((_QWORD *)v6 + 4);
    if (v9 >= (*((_QWORD *)v6 + 5) - v15) >> 3)
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    *(_QWORD *)(v15 + 8 * v9) = v11;
    if (__p)
    {
      *(_QWORD *)&v25[0] = __p;
      operator delete(__p);
    }
  }
  memset(v25, 0, 48);
  __p = (void *)a2;
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v11 + 16))(v11, &__p, *(unsigned __int16 *)(a2 + 24));
  TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(a2, v3);
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B41292D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  uint64_t v20;

  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v20 - 96);
  _Unwind_Resume(a1);
}

uint64_t CSCppDwarfAbbrevTable::specification_abbrev_at(CSCppDwarfAbbrevTable *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a2;
  v3 = *((_QWORD *)this + 4);
  v4 = (*((_QWORD *)this + 5) - v3) >> 3;
  if (v4 <= a2)
  {
    std::vector<CSCppDwarfAbbrev *>::resize((uint64_t)this + 32, a2 + 1);
    v3 = *((_QWORD *)this + 4);
    v4 = (*((_QWORD *)this + 5) - v3) >> 3;
  }
  if (v4 <= v2)
    std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v3 + 8 * v2);
}

_QWORD *std::vector<CSCppDwarfAttribute>::__init_with_size[abi:ne180100]<CSCppDwarfAttribute*,CSCppDwarfAttribute*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppDwarfAttribute>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4129474(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CSCppDwarfAttribute>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void record_concrete_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>,std::deque<TRawSymbol<Pointer32>>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void **a5)
{
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;

  if (a2)
  {
    v9 = 0;
    v25 = (uint64_t)(a5 + 2);
    v10 = *(unsigned __int8 *)(a3 + 12);
    do
    {
      std::deque<TRawSymbol<Pointer32>>::push_back(a4, a1 + 96 * v9);
      if (v10)
      {
        v11 = a4[5] + a4[4] - 1;
        v12 = *(_QWORD *)(a4[1] + 8 * (v11 / 0x2A)) + 96 * (v11 % 0x2A);
        v14 = (unint64_t *)a5[1];
        v13 = (unint64_t)a5[2];
        if ((unint64_t)v14 >= v13)
        {
          v16 = ((char *)v14 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v17 = v13 - (_QWORD)*a5;
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25, v19);
          else
            v20 = 0;
          v21 = (unint64_t *)&v20[8 * v16];
          *v21 = v12;
          v15 = v21 + 1;
          v23 = (char *)*a5;
          v22 = (char *)a5[1];
          if (v22 != *a5)
          {
            do
            {
              v24 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *--v21 = v24;
            }
            while (v22 != v23);
            v22 = (char *)*a5;
          }
          *a5 = v21;
          a5[1] = v15;
          a5[2] = &v20[8 * v19];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v14 = v12;
          v15 = v14 + 1;
        }
        a5[1] = v15;
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

void record_inlined_symbols_with_ancestor<Pointer32,std::vector<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t **v39;
  char *v40;
  uint64_t **v41;
  uint64_t *v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *__p;
  char *v61;
  char *v62;

  v5 = a1;
  v6 = *(unsigned __int8 *)(a3 + 12);
  __p = 0;
  v61 = 0;
  v62 = 0;
  v7 = &a1[24 * a2];
  v9 = (char *)*a4;
  v8 = (char *)a4[1];
  do
  {
    if (v8 == v9)
    {
      v11 = (char *)*a4;
      if (a2)
        goto LABEL_10;
      goto LABEL_60;
    }
    v10 = *((_QWORD *)v8 - 1);
    v8 -= 8;
  }
  while (!v10);
  v11 = v8 + 8;
  while (v8 != v9)
  {
    v12 = v8;
    v14 = *((_QWORD *)v8 - 1);
    v8 -= 8;
    v13 = v14;
    if (!v14 || !*(_BYTE *)(v13 + 80))
    {
      v9 = v12;
      break;
    }
  }
  if (!a2)
  {
LABEL_60:
    v46 = 0;
    if (!v6)
      goto LABEL_81;
    goto LABEL_61;
  }
LABEL_10:
  v16 = a2 != 1 || v6 == 0;
  v59 = (uint64_t)(a4 + 2);
  do
  {
    v17 = v11;
    while (v17 != v9)
    {
      v19 = (uint64_t *)*((_QWORD *)v17 - 1);
      v17 -= 8;
      v18 = v19;
      if ((*v5 - *(_DWORD *)v19) < *((_DWORD *)v19 + 1))
      {
        v20 = v18[8];
        if (v20 >= v18[9])
        {
          v21 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(v18 + 7, (uint64_t)v5);
        }
        else
        {
          *(_QWORD *)(v20 + 88) = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)v20 = 0;
          *(_OWORD *)(v20 + 40) = 0u;
          *(_OWORD *)(v20 + 56) = 0u;
          *(_OWORD *)(v20 + 65) = 0u;
          TRawSymbol<Pointer32>::operator=(v20, (uint64_t)v5);
          v21 = v20 + 96;
        }
        v18[8] = v21;
        if (v16)
        {
          if (v6)
          {
            v22 = -1 - 0x5555555555555555 * ((v21 - v18[7]) >> 5);
            if (v61 >= v62)
            {
              v33 = (v61 - __p) >> 4;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 60)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              v35 = v62 - __p;
              if ((v62 - __p) >> 3 > v34)
                v34 = v35 >> 3;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
                v36 = 0xFFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v62, v36);
              v39 = (uint64_t **)&v37[16 * v33];
              *v39 = v18;
              v39[1] = (uint64_t *)v22;
              v40 = v61;
              v41 = v39;
              if (v61 != __p)
              {
                do
                {
                  *((_OWORD *)v41 - 1) = *((_OWORD *)v40 - 1);
                  v41 -= 2;
                  v40 -= 16;
                }
                while (v40 != __p);
                v40 = __p;
              }
              v23 = (char *)(v39 + 2);
              __p = (char *)v41;
              v62 = &v37[16 * v38];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_QWORD *)v61 = v18;
              *((_QWORD *)v61 + 1) = v22;
              v23 = v61 + 16;
            }
            v61 = v23;
          }
        }
        else
        {
          v24 = v21 - 96;
          v26 = a4[1];
          v25 = (unint64_t)a4[2];
          if ((unint64_t)v26 >= v25)
          {
            v28 = v26 - *a4;
            if ((unint64_t)(v28 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v29 = v25 - (_QWORD)*a4;
            v30 = v29 >> 2;
            if (v29 >> 2 <= (unint64_t)(v28 + 1))
              v30 = v28 + 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v59, v31);
            else
              v32 = 0;
            v42 = (uint64_t *)&v32[8 * v28];
            *v42 = v24;
            v27 = v42 + 1;
            v44 = *a4;
            v43 = (char *)a4[1];
            if (v43 != (char *)*a4)
            {
              do
              {
                v45 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *--v42 = v45;
              }
              while (v43 != (char *)v44);
              v43 = (char *)*a4;
            }
            *a4 = v42;
            a4[1] = v27;
            a4[2] = (uint64_t *)&v32[8 * v31];
            if (v43)
              operator delete(v43);
          }
          else
          {
            *v26 = v24;
            v27 = v26 + 1;
          }
          a4[1] = v27;
        }
        break;
      }
    }
    v5 += 24;
  }
  while (v5 != v7);
  v46 = __p;
  if (v6)
  {
LABEL_61:
    if (v46 != v61)
    {
      v47 = a4 + 2;
      v48 = a4[1];
      do
      {
        v49 = *(_QWORD *)(*(_QWORD *)v46 + 56) + 96 * *((_QWORD *)v46 + 1);
        if ((unint64_t)v48 >= *v47)
        {
          v50 = v48 - *a4;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v51 = *v47 - (_QWORD)*a4;
          v52 = v51 >> 2;
          if (v51 >> 2 <= (unint64_t)(v50 + 1))
            v52 = v50 + 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          if (v53)
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v53);
          else
            v54 = 0;
          v55 = (uint64_t *)&v54[8 * v50];
          *v55 = v49;
          v48 = v55 + 1;
          v57 = *a4;
          v56 = (char *)a4[1];
          if (v56 != (char *)*a4)
          {
            do
            {
              v58 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *--v55 = v58;
            }
            while (v56 != (char *)v57);
            v56 = (char *)*a4;
          }
          *a4 = v55;
          a4[1] = v48;
          a4[2] = (uint64_t *)&v54[8 * v53];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v48++ = v49;
        }
        a4[1] = v48;
        v46 += 16;
      }
      while (v46 != v61);
      v46 = __p;
    }
  }
LABEL_81:
  if (v46)
    operator delete(v46);
}

void sub_1B4129A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRawSymbol<Pointer32>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 42 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<TRawSymbol<Pointer32>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  }
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 65) = 0u;
  result = TRawSymbol<Pointer32>::operator=(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<TRawSymbol<Pointer32>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B4129DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__emplace_back_slow_path<TRawSymbol<Pointer32>::dwarf_ranges_tag,unsigned int &,unsigned int &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>(uint64_t *a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t *a5, uint64_t *a6, int *a7, _OWORD **a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  void *v31[5];

  v9 = *a1;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v11 = v10 + 1;
  if (v10 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v18 = (uint64_t)(a1 + 2);
  v19 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v9) >> 5);
  if (2 * v19 > v11)
    v11 = 2 * v19;
  if (v19 >= 0x155555555555555)
    v20 = 0x2AAAAAAAAAAAAAALL;
  else
    v20 = v11;
  v31[4] = a1 + 2;
  if (v20)
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>(v18, v20);
  else
    v21 = 0;
  v22 = &v21[96 * v10];
  v31[0] = v21;
  v31[1] = v22;
  v31[3] = &v21[96 * v20];
  v23 = *a4;
  v24 = *a5;
  v25 = *a6;
  v26 = *a7;
  v27 = *a8;
  *(_DWORD *)v22 = *a3;
  *((_DWORD *)v22 + 1) = v23;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = v24;
  *((_QWORD *)v22 + 4) = v25;
  *(_OWORD *)(v22 + 40) = 0u;
  *((_QWORD *)v22 + 11) = 0;
  *(_OWORD *)(v22 + 65) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  if (v27)
  {
    *(_OWORD *)(v22 + 40) = *v27;
    v26 |= 0x80000000;
  }
  v28 = &v21[96 * v10];
  *((_DWORD *)v28 + 5) = v26;
  v28[80] = 1;
  v31[2] = v22 + 96;
  std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(a1, v31);
  v29 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(v31);
  return v29;
}

void sub_1B412A408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>(uint64_t *a1, unint64_t a2, unsigned __int16 a3, uint64_t (***a4)(_QWORD, std::vector<std::string>::pointer), CSCppStringCache *a5, uint64_t a6, uint64_t a7, char **a8)
{
  size_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *i;
  int v17;
  int v18;
  uint64_t action_for_line_string;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  std::vector<std::string>::pointer end;
  __int128 v29;
  const std::string *begin;
  std::vector<std::string>::const_iterator v31;
  std::__split_buffer<std::string>::pointer first;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::string *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::vector<std::string>::pointer v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::vector<std::string>::pointer v49;
  std::vector<std::string>::pointer v50;
  char *v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unsigned __int8 **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 **v71;
  char *v72;
  char *v73;
  unsigned __int8 *v74;
  char *v75;
  unsigned __int8 *v76;
  char *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  _BOOL4 v82;
  void *__p[2];
  std::string::size_type v84;
  std::vector<std::string> v85;
  _OWORD v86[3];
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  char *__s;
  unsigned int v91;
  __int16 v92;
  std::__split_buffer<std::string> buf[25];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a7 + 8) - *(_QWORD *)a7;
  v82 = v13 == a8[1] - *a8 && memcmp(*(const void **)a7, *a8, v13) == 0;
  v92 = 0;
  v91 = 0;
  __s = 0;
  v14 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8(a1);
  std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::vector(&v88, v14);
  v15 = v88;
  for (i = v89; v15 != i; ++v15)
  {
    v17 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
    v18 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
    if (v17 <= 2)
    {
      if (v17 == 1)
      {
        action_for_line_string = read_action_for_line_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v18, (uint64_t)&v92, 1, (uint64_t)&__s);
        goto LABEL_14;
      }
      if (v17 != 2)
      {
LABEL_12:
        action_for_line_string = skip_action_for_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v18);
        goto LABEL_14;
      }
      action_for_line_string = read_action_for_line_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v18, (uint64_t)&v92, 2, (uint64_t)&v91);
    }
    else
    {
      if ((v17 - 3) >= 3 && v17 != 8193)
        goto LABEL_12;
      action_for_line_string = skip_action_for_line_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(v18);
    }
LABEL_14:
    v20 = *v15;
    *v15 = action_for_line_string;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
  std::vector<CSCppSymbolOwner *>::reserve((void **)a8, v21);
  v86[0] = 0u;
  v86[1] = (unint64_t)a1;
  v87 = 0;
  v86[2] = a2;
  if (v21)
  {
    v22 = 0;
    v79 = (uint64_t)(a8 + 2);
    v23 = MEMORY[0x1E0C81028];
    v24 = a3;
    do
    {
      v25 = v21;
      memset(&v85, 0, sizeof(v85));
      v27 = v88;
      v26 = v89;
      if (v88 != v89)
      {
        while (1)
        {
          v92 = 0;
          (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)*v27 + 16))(*v27, v86, v24);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v27 + 32))(*v27))
          {
            if (!__s)
            {
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf[0].__first_) = 0;
                _os_log_impl(&dword_1B40C5000, v23, OS_LOG_TYPE_DEFAULT, "No string extracted from DWARF5 path list", (uint8_t *)buf, 2u);
              }
              goto LABEL_21;
            }
            if (v92 == 2)
            {
              if (v91 > (unint64_t)((uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 3))
                goto LABEL_21;
              if (isAbsolutePath(__s))
                goto LABEL_21;
              begin = v85.__begin_;
              std::string::basic_string[abi:ne180100]<0>(buf, *(char **)(*(_QWORD *)a7 + 8 * v91));
              v31.__i_ = begin;
              std::vector<std::string>::insert(&v85, v31, (std::vector<std::string>::value_type *)buf);
              if ((SHIBYTE(buf[0].__end_) & 0x80000000) == 0)
                goto LABEL_21;
              first = buf[0].__first_;
              goto LABEL_61;
            }
            if (v92 == 1)
            {
              if (v82 && *(_QWORD *)(a7 + 8) != *(_QWORD *)a7 && !isAbsolutePath(__s))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, **(char ***)a7);
                end = v85.__end_;
                if (v85.__end_ >= v85.__end_cap_.__value_)
                {
                  v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
                  v34 = v33 + 1;
                  if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v34)
                    v34 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555)
                    v35 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v35 = v34;
                  buf[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
                  if (v35)
                    v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v85.__end_cap_, v35);
                  else
                    v36 = 0;
                  v37 = v36 + v33;
                  buf[0].__first_ = v36;
                  buf[0].__begin_ = v37;
                  buf[0].__end_cap_.__value_ = &v36[v35];
                  v38 = *(_OWORD *)__p;
                  v37->__r_.__value_.__r.__words[2] = v84;
                  *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
                  __p[1] = 0;
                  v84 = 0;
                  __p[0] = 0;
                  buf[0].__end_ = v37 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(&v85, buf);
                  v39 = v85.__end_;
                  std::__split_buffer<std::string>::~__split_buffer(buf);
                  v85.__end_ = v39;
                  if (SHIBYTE(v84) < 0)
                    operator delete(__p[0]);
                }
                else
                {
                  v29 = *(_OWORD *)__p;
                  v85.__end_->__r_.__value_.__r.__words[2] = v84;
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v29;
                  v85.__end_ = end + 1;
                }
              }
              std::string::basic_string[abi:ne180100]<0>(__p, __s);
              v40 = v85.__end_;
              if (v85.__end_ >= v85.__end_cap_.__value_)
              {
                v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
                v43 = v42 + 1;
                if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v43)
                  v43 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555)
                  v44 = 0xAAAAAAAAAAAAAAALL;
                else
                  v44 = v43;
                buf[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
                if (v44)
                  v45 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v85.__end_cap_, v44);
                else
                  v45 = 0;
                v46 = v45 + v42;
                buf[0].__first_ = v45;
                buf[0].__begin_ = v46;
                buf[0].__end_cap_.__value_ = &v45[v44];
                v47 = *(_OWORD *)__p;
                v46->__r_.__value_.__r.__words[2] = v84;
                *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
                __p[1] = 0;
                v84 = 0;
                __p[0] = 0;
                buf[0].__end_ = v46 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v85, buf);
                v48 = v85.__end_;
                std::__split_buffer<std::string>::~__split_buffer(buf);
                v85.__end_ = v48;
                if ((SHIBYTE(v84) & 0x80000000) == 0)
                  goto LABEL_21;
                first = (std::__split_buffer<std::string>::pointer)__p[0];
LABEL_61:
                operator delete(first);
                goto LABEL_21;
              }
              v41 = *(_OWORD *)__p;
              v85.__end_->__r_.__value_.__r.__words[2] = v84;
              *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
              v85.__end_ = v40 + 1;
            }
          }
LABEL_21:
          if (++v27 == v26)
          {
            v50 = v85.__begin_;
            v49 = v85.__end_;
            goto LABEL_63;
          }
        }
      }
      v50 = 0;
      v49 = 0;
LABEL_63:
      if ((char *)v49 - (char *)v50 == 24)
      {
        if (SHIBYTE(v50->__r_.__value_.__r.__words[2]) < 0)
          v50 = (std::vector<std::string>::pointer)v50->__r_.__value_.__r.__words[0];
        v51 = (char *)(**a4)(a4, v50);
        v52 = CSCppStringCache::intern(a5, v51);
        v54 = (unsigned __int8 **)a8[1];
        v53 = (unint64_t)a8[2];
        if ((unint64_t)v54 >= v53)
        {
          v55 = ((char *)v54 - *a8) >> 3;
          if ((unint64_t)(v55 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v56 = v53 - (_QWORD)*a8;
          v57 = v56 >> 2;
          if (v56 >> 2 <= (unint64_t)(v55 + 1))
            v57 = v55 + 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v57;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v79, v58);
          else
            v59 = 0;
          v71 = (unsigned __int8 **)&v59[8 * v55];
          *v71 = v52;
          v67 = (char *)(v71 + 1);
          v73 = *a8;
          v72 = a8[1];
          if (v72 != *a8)
          {
            do
            {
              v74 = (unsigned __int8 *)*((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v71 = v74;
            }
            while (v72 != v73);
            goto LABEL_111;
          }
          goto LABEL_112;
        }
      }
      else if (0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v50) >> 3) < 2)
      {
        v52 = CSCppStringCache::intern(a5, "");
        v54 = (unsigned __int8 **)a8[1];
        v61 = (unint64_t)a8[2];
        if ((unint64_t)v54 >= v61)
        {
          v62 = ((char *)v54 - *a8) >> 3;
          if ((unint64_t)(v62 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v63 = v61 - (_QWORD)*a8;
          v64 = v63 >> 2;
          if (v63 >> 2 <= (unint64_t)(v62 + 1))
            v64 = v62 + 1;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v64;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v79, v58);
          else
            v59 = 0;
          v71 = (unsigned __int8 **)&v59[8 * v62];
          *v71 = v52;
          v67 = (char *)(v71 + 1);
          v75 = *a8;
          v72 = a8[1];
          if (v72 != *a8)
          {
            do
            {
              v76 = (unsigned __int8 *)*((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v71 = v76;
            }
            while (v72 != v75);
LABEL_111:
            v72 = *a8;
          }
LABEL_112:
          *a8 = (char *)v71;
          a8[1] = v67;
          a8[2] = &v59[8 * v58];
          if (v72)
            operator delete(v72);
          goto LABEL_114;
        }
      }
      else
      {
        LOBYTE(buf[0].__first_) = 0;
        while (v50 != v49)
        {
          v60 = (const char *)v50;
          if (SHIBYTE(v50->__r_.__value_.__r.__words[2]) < 0)
            v60 = (const char *)v50->__r_.__value_.__r.__words[0];
          stringByAppendingPathComponents((char *)buf, 0x400uLL, (const char *)buf, v60);
          ++v50;
        }
        v65 = (char *)(**a4)(a4, (std::vector<std::string>::pointer)buf);
        v52 = CSCppStringCache::intern(a5, v65);
        v54 = (unsigned __int8 **)a8[1];
        v66 = (unint64_t)a8[2];
        if ((unint64_t)v54 >= v66)
        {
          v68 = ((char *)v54 - *a8) >> 3;
          if ((unint64_t)(v68 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v69 = v66 - (_QWORD)*a8;
          v70 = v69 >> 2;
          if (v69 >> 2 <= (unint64_t)(v68 + 1))
            v70 = v68 + 1;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v70;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v79, v58);
          else
            v59 = 0;
          v71 = (unsigned __int8 **)&v59[8 * v68];
          *v71 = v52;
          v67 = (char *)(v71 + 1);
          v77 = *a8;
          v72 = a8[1];
          if (v72 != *a8)
          {
            do
            {
              v78 = (unsigned __int8 *)*((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v71 = v78;
            }
            while (v72 != v77);
            goto LABEL_111;
          }
          goto LABEL_112;
        }
      }
      *v54 = v52;
      v67 = (char *)(v54 + 1);
LABEL_114:
      a8[1] = v67;
      buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      ++v22;
      v21 = v25;
    }
    while (v22 != v25);
  }
  buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v88;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B412AC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__split_buffer<std::string> *a34)
{
  _Unwind_Resume(exception_object);
}

const char *parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer32,LittleEndian>>(uint64_t *a1, const char *a2, uint64_t (***a3)(_QWORD, char *), CSCppStringCache *a4, void **a5, void **a6)
{
  unint64_t v12;
  uint64_t v13;
  const char **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  const char **v21;
  char *v22;
  char *v23;
  char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  unint64_t v28;
  const char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char **v41;
  char *v42;
  char *v43;
  const char *v44;
  char *v45;
  const char *v46;
  const char *result;
  const char *i;
  unsigned int v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unsigned __int8 **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 **v68;
  char *v69;
  char *v70;
  unsigned __int8 *v71;
  char *v72;
  unsigned __int8 *v73;
  char *v74;
  unsigned __int8 *v75;
  char v76[1024];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t)(a5 + 2);
  v12 = (unint64_t)a5[2];
  v14 = (const char **)a5[1];
  if ((unint64_t)v14 >= v12)
  {
    v16 = ((char *)v14 - (_BYTE *)*a5) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v17 = v12 - (_QWORD)*a5;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a5 + 2), v19);
    else
      v20 = 0;
    v21 = (const char **)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = a2;
    v15 = v21 + 1;
    v24 = (char *)*a5;
    v23 = (char *)a5[1];
    if (v23 != *a5)
    {
      do
      {
        v25 = (const char *)*((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = (char *)*a5;
    }
    *a5 = v21;
    a5[1] = v15;
    a5[2] = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v14 = a2;
    v15 = v14 + 1;
  }
  a5[1] = v15;
  v26 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string((uint64_t)a1);
  if (*v26)
  {
    v27 = v26;
    do
    {
      if (isAbsolutePath(v27))
      {
        v29 = (const char **)a5[1];
        v28 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v28)
        {
          v30 = ((char *)v29 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v31 = v28 - (_QWORD)*a5;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          else
            v34 = 0;
          v41 = (const char **)&v34[8 * v30];
          *v41 = v27;
          v37 = v41 + 1;
          v43 = (char *)*a5;
          v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              v44 = (const char *)*((_QWORD *)v42 - 1);
              v42 -= 8;
              *--v41 = v44;
            }
            while (v42 != v43);
            goto LABEL_46;
          }
          goto LABEL_47;
        }
      }
      else
      {
        stringByAppendingPathComponents(v76, 0x400uLL, a2, v27);
        v35 = (char *)(**a3)(a3, v76);
        v27 = (const char *)CSCppStringCache::intern(a4, v35);
        v29 = (const char **)a5[1];
        v36 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v36)
        {
          v38 = ((char *)v29 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v39 = v36 - (_QWORD)*a5;
          v40 = v39 >> 2;
          if (v39 >> 2 <= (unint64_t)(v38 + 1))
            v40 = v38 + 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v40;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          else
            v34 = 0;
          v41 = (const char **)&v34[8 * v38];
          *v41 = v27;
          v37 = v41 + 1;
          v45 = (char *)*a5;
          v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              v46 = (const char *)*((_QWORD *)v42 - 1);
              v42 -= 8;
              *--v41 = v46;
            }
            while (v42 != v45);
LABEL_46:
            v42 = (char *)*a5;
          }
LABEL_47:
          *a5 = v41;
          a5[1] = v37;
          a5[2] = &v34[8 * v33];
          if (v42)
            operator delete(v42);
          goto LABEL_49;
        }
      }
      *v29 = v27;
      v37 = v29 + 1;
LABEL_49:
      a5[1] = v37;
      v27 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string((uint64_t)a1);
    }
    while (*v27);
  }
  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string((uint64_t)a1);
  for (i = result; *result; i = result)
  {
    v49 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(a1);
    TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)a1);
    TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)a1);
    if (*i == 47)
    {
      v50 = (unsigned __int8 *)(**a3)(a3, (char *)i);
      v52 = (unsigned __int8 **)a6[1];
      v51 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v51)
      {
        v53 = ((char *)v52 - (_BYTE *)*a6) >> 3;
        if ((unint64_t)(v53 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v54 = v51 - (_QWORD)*a6;
        v55 = v54 >> 2;
        if (v54 >> 2 <= (unint64_t)(v53 + 1))
          v55 = v53 + 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        else
          v57 = 0;
        v68 = (unsigned __int8 **)&v57[8 * v53];
        *v68 = v50;
        v64 = v68 + 1;
        v70 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            v71 = (unsigned __int8 *)*((_QWORD *)v69 - 1);
            v69 -= 8;
            *--v68 = v71;
          }
          while (v69 != v70);
          goto LABEL_92;
        }
        goto LABEL_93;
      }
    }
    else if (v49 >= (unint64_t)(((_BYTE *)a5[1] - (_BYTE *)*a5) >> 3))
    {
      v50 = (unsigned __int8 *)(**a3)(a3, (char *)i);
      v52 = (unsigned __int8 **)a6[1];
      v63 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v63)
      {
        v65 = ((char *)v52 - (_BYTE *)*a6) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v66 = v63 - (_QWORD)*a6;
        v67 = v66 >> 2;
        if (v66 >> 2 <= (unint64_t)(v65 + 1))
          v67 = v65 + 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v67;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        else
          v57 = 0;
        v68 = (unsigned __int8 **)&v57[8 * v65];
        *v68 = v50;
        v64 = v68 + 1;
        v72 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            v73 = (unsigned __int8 *)*((_QWORD *)v69 - 1);
            v69 -= 8;
            *--v68 = v73;
          }
          while (v69 != v72);
LABEL_92:
          v69 = (char *)*a6;
        }
LABEL_93:
        *a6 = v68;
        a6[1] = v64;
        a6[2] = &v57[8 * v56];
        if (v69)
          operator delete(v69);
        goto LABEL_95;
      }
    }
    else
    {
      stringByAppendingPathComponents(v76, 0x400uLL, *((const char **)*a5 + v49), i);
      v58 = (char *)(**a3)(a3, v76);
      v50 = CSCppStringCache::intern(a4, v58);
      v52 = (unsigned __int8 **)a6[1];
      v59 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v59)
      {
        v60 = ((char *)v52 - (_BYTE *)*a6) >> 3;
        if ((unint64_t)(v60 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v61 = v59 - (_QWORD)*a6;
        v62 = v61 >> 2;
        if (v61 >> 2 <= (unint64_t)(v60 + 1))
          v62 = v60 + 1;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v62;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        else
          v57 = 0;
        v68 = (unsigned __int8 **)&v57[8 * v60];
        *v68 = v50;
        v64 = v68 + 1;
        v74 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            v75 = (unsigned __int8 *)*((_QWORD *)v69 - 1);
            v69 -= 8;
            *--v68 = v75;
          }
          while (v69 != v74);
          goto LABEL_92;
        }
        goto LABEL_93;
      }
    }
    *v52 = v50;
    v64 = v52 + 1;
LABEL_95:
    a6[1] = v64;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::FORM_string((uint64_t)a1);
  }
  return result;
}

uint64_t std::deque<TRawSourceInfo<Pointer32>>::emplace_back<unsigned int &,int,char const*&,int &,unsigned int &>(_QWORD *a1, _DWORD *a2, int *a3, uint64_t *a4, int *a5, unsigned int *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v12 = a1[2];
  v13 = a1[1];
  if (v12 == v13)
    v14 = 0;
  else
    v14 = 16 * (v12 - v13) - 1;
  v15 = a1[4];
  v16 = a1[5];
  v17 = v16 + v15;
  if (v14 == v16 + v15)
  {
    std::deque<TRawSourceInfo<Pointer32>>::__add_back_capacity(a1);
    v15 = a1[4];
    v16 = a1[5];
    v13 = a1[1];
    v17 = v15 + v16;
  }
  v18 = *a3;
  v19 = *(_QWORD *)(v13 + ((v17 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v17 & 0x7F);
  v20 = *a4;
  v21 = *a5;
  v22 = *a6;
  *(_DWORD *)v19 = *a2;
  *(_DWORD *)(v19 + 4) = v18;
  *(_QWORD *)(v19 + 8) = v20;
  *(_DWORD *)(v19 + 16) = v21;
  *(_QWORD *)(v19 + 20) = v22;
  v23 = v16 + 1;
  a1[5] = v23;
  v24 = v15 + v23;
  v25 = (_QWORD *)(v13 + 8 * (v24 >> 7));
  v26 = v24 & 0x7F;
  if (v26)
    v27 = *v25 + 32 * v26;
  else
    v27 = *(v25 - 1) + 4096;
  return v27 - 32;
}

void std::vector<char const*>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t read_action_for_line_string_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v8)();
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == 8)
  {
    result = operator new();
    v8 = &off_1E6776FA0;
  }
  else
  {
    if (a1 != 31 && a1 != 14)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled form in read string binding ", 38);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }
    result = operator new();
    v8 = &off_1E67773A0;
  }
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = a3;
  return result;
}

void sub_1B412B51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_line_data_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v8)();
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  switch(a1)
  {
    case 5:
      result = operator new();
      v8 = &off_1E6777440;
      break;
    case 6:
      result = operator new();
      v8 = &off_1E6777490;
      break;
    case 7:
      result = operator new();
      v8 = &off_1E67774E0;
      break;
    case 11:
      result = operator new();
      v8 = &off_1E67773F0;
      break;
    case 15:
      result = operator new();
      v8 = &off_1E6777530;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled form in read data binding ", 36);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
  }
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = a3;
  return result;
}

void sub_1B412B6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t skip_action_for_line_form<Dwarf<Dwarf32,Pointer32,LittleEndian>>(int a1)
{
  uint64_t result;
  uint64_t (**v2)();
  int v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  switch(a1)
  {
    case 5:
      result = operator new();
      *(_QWORD *)result = &off_1E6777620;
      v3 = 2;
      goto LABEL_9;
    case 6:
      result = operator new();
      *(_QWORD *)result = &off_1E6777620;
      v3 = 4;
      goto LABEL_9;
    case 7:
      result = operator new();
      *(_QWORD *)result = &off_1E6777620;
      v3 = 8;
      goto LABEL_9;
    case 8:
      result = operator new();
      v2 = &off_1E67775D0;
      goto LABEL_12;
    case 9:
      result = operator new();
      v2 = &off_1E6777670;
      goto LABEL_12;
    case 10:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_15;
    case 11:
      goto LABEL_4;
    case 14:
    case 23:
    case 31:
      result = operator new();
      v2 = &off_1E6777580;
      goto LABEL_12;
    case 15:
      result = operator new();
      v2 = &off_1E67776C0;
LABEL_12:
      *(_QWORD *)result = v2;
      break;
    case 30:
      result = operator new();
      *(_QWORD *)result = &off_1E6777620;
      *(_DWORD *)(result + 8) = 16;
      break;
    default:
      if (a1 != 37)
      {
LABEL_15:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Unhandled dwarf attribute in Debug Line Table ", 46);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
        Exception::Exception(v5, &v6);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v5);
      }
LABEL_4:
      result = operator new();
      *(_QWORD *)result = &off_1E6777620;
      v3 = 1;
LABEL_9:
      *(_DWORD *)(result + 8) = v3;
      break;
  }
  return result;
}

void sub_1B412B988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  std::string *i;
  std::vector<std::string>::pointer end;
  std::allocator<std::string> *p_end_cap;
  std::string *v8;
  std::string *value;
  __int128 v10;
  std::vector<std::string>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  __int128 v18;
  std::__split_buffer<std::string> __v;

  i = (std::string *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)begin) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v12)
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v14 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v15;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16)
      v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)p_end_cap, v16);
    else
      v17 = 0;
    __v.__first_ = v17;
    __v.__begin_ = v17 + v13;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v17[v16];
    std::__split_buffer<std::string>::push_back(&__v, __x);
    i = std::vector<std::string>::__swap_out_circular_buffer(this, &__v, i);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else if (__position.__i_ == end)
  {
    v18 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v18;
    __x->__r_.__value_.__l.__size_ = 0;
    __x->__r_.__value_.__r.__words[2] = 0;
    __x->__r_.__value_.__r.__words[0] = 0;
    this->__end_ = (std::vector<std::string>::pointer)&__position.__i_[1];
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0)
      operator delete(i->__r_.__value_.__l.__data_);
    v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    i->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&i->__r_.__value_.__l.__data_ = v10;
    *((_BYTE *)&__x->__r_.__value_.__s + 23) = 0;
    __x->__r_.__value_.__s.__data_[0] = 0;
  }
  return (std::vector<std::string>::iterator)i;
}

void sub_1B412BB48(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B412BBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void TDwarfReadDW_FORM_LineStrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadDW_FORM_LineStrpAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_LineStrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;

  result = *(_QWORD *)(a2 + 16);
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    v5 = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::dwarf_offset(result);
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::set_cursor(v4, v5);
    v6 = *(_QWORD **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *v6 = *(_QWORD *)v4 + *(unsigned int *)(v4 + 8);
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadLineDW_FORM_Data1AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadLineDW_FORM_Data2AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadLineDW_FORM_Data4AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadLineDW_FORM_Data8AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfReadLineDW_FORM_UdataAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = *(uint64_t **)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB((uint64_t)v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipDW_FORM_Line_StrpAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

void TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8) += 4;
}

uint64_t TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipDW_FORM_Line_StringAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

size_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_string(*(_QWORD *)(a2 + 16));
}

uint64_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipLineConstantAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipLineDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipLineDW_FORM_BlockAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipLineDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_FORM_block(*(_QWORD *)(a2 + 16));
}

void TDwarfSkipLineULEBAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::~TDwarfSkipLineULEBAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipLineULEBAttributeAction<Dwarf<Dwarf32,Pointer32,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>::skip_ULEB(*(_QWORD *)(a2 + 16));
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::push_back(std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::value_type *__x)
{
  std::__split_buffer<std::string>::pointer end;
  __int128 *begin;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::allocator<std::string> *value;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::__split_buffer<std::string>::pointer v16;
  int64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  int64x2_t v23;
  std::string *v24;
  __int128 v25;
  std::__split_buffer<std::string> v26;

  end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    begin = (__int128 *)this->__begin_;
    if ((std::__split_buffer<std::string>::pointer)begin <= this->__first_)
    {
      if (end == this->__first_)
        v10 = 1;
      else
        v10 = 0x5555555555555556 * (((char *)end - (char *)this->__first_) >> 3);
      v11 = v10 >> 2;
      value = this->__end_cap_.__value_;
      v26.__end_cap_.__value_ = this->__end_cap_.__value_;
      v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)value, v10);
      v15 = &v13[v11];
      v16 = this->__begin_;
      v17 = (char *)this->__end_ - (char *)v16;
      if (v17)
      {
        v18 = v17 / 24;
        v19 = &v15[v18];
        v20 = 24 * v18;
        v21 = &v13[v11];
        do
        {
          v22 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v21->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          ++v21;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          ++v16;
          v20 -= 24;
        }
        while (v20);
        v23 = *(int64x2_t *)&this->__begin_;
      }
      else
      {
        v23 = vdupq_n_s64((unint64_t)v16);
        v19 = &v13[v11];
      }
      v26.__first_ = this->__first_;
      this->__first_ = v13;
      this->__begin_ = v15;
      *(int64x2_t *)&v26.__begin_ = v23;
      v24 = this->__end_cap_.__value_;
      this->__end_ = v19;
      this->__end_cap_.__value_ = &v13[v14];
      v26.__end_cap_.__value_ = v24;
      std::__split_buffer<std::string>::~__split_buffer(&v26);
      end = this->__end_;
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)this->__first_) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v26, begin, (__int128 *)end, (uint64_t)begin - 24 * (v7 >> 1));
      end = v9;
      this->__begin_ = (std::__split_buffer<std::string>::pointer)((char *)this->__begin_ + 8 * v8);
      this->__end_ = v9;
    }
  }
  v25 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
  __x->__r_.__value_.__l.__size_ = 0;
  __x->__r_.__value_.__r.__words[2] = 0;
  __x->__r_.__value_.__r.__words[0] = 0;
  ++this->__end_;
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void std::deque<TRawSourceInfo<Pointer32>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B412C674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<TRangeValue<Pointer32,char const*>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B412C988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_OWORD *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRawSourceInfo<Pointer32>,TRawSourceInfo<Pointer32>*,TRawSourceInfo<Pointer32>&,TRawSourceInfo<Pointer32>**,long,128l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRawSourceInfo<Pointer32>,TRawSourceInfo<Pointer32>*,TRawSourceInfo<Pointer32>&,TRawSourceInfo<Pointer32>**,long,128l>,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>>>(_QWORD *a1, _OWORD *a2, _OWORD **a3, _OWORD *a4, void ***a5)
{
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *i;
  void **v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *result;
  void **v17;

  v8 = *a5;
  if (a1 == a3)
  {
    v15 = a2;
  }
  else
  {
    v9 = a1 + 1;
    v10 = *a1 + 4096;
    v11 = a2;
    for (i = (_OWORD *)v10; ; i = v14 + 256)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>,0>(v11, i, v8);
      v8 = v13;
      *a5 = v13;
      if (v9 == a3)
        break;
      v14 = (_OWORD *)*v9++;
      v11 = v14;
    }
    v15 = *a3;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>,0>(v15, a4, v8);
  *a5 = v17;
  return result;
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>,0>(_OWORD *a1, _OWORD *a2, void **a3)
{
  _OWORD *v3;
  _OWORD *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>::operator=[abi:ne180100](&v6, v3);
    v3 += 2;
  }
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer32>>>::operator=[abi:ne180100](void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v12 = ((char *)v5 - (_BYTE *)*v4) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v14 = v8 - (_QWORD)*v4;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v7, v15);
    else
      v16 = 0;
    v17 = &v16[32 * v12];
    v18 = &v16[32 * v15];
    v19 = a2[1];
    *(_OWORD *)v17 = *a2;
    *((_OWORD *)v17 + 1) = v19;
    v11 = v17 + 32;
    v21 = (char *)*v4;
    v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        v22 = *((_OWORD *)v20 - 2);
        *(_OWORD *)(v17 - 20) = *(_OWORD *)(v20 - 20);
        *((_OWORD *)v17 - 2) = v22;
        v17 -= 32;
        v20 -= 32;
      }
      while (v20 != v21);
      v20 = (char *)*v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v10 = a2[1];
    *v5 = *a2;
    v5[1] = v10;
    v11 = v5 + 2;
  }
  v4[1] = v11;
  return a1;
}

_OWORD *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRangeValue<Pointer32,char const*>,TRangeValue<Pointer32,char const*>*,TRangeValue<Pointer32,char const*>&,TRangeValue<Pointer32,char const*>**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRangeValue<Pointer32,char const*>,TRangeValue<Pointer32,char const*>*,TRangeValue<Pointer32,char const*>&,TRangeValue<Pointer32,char const*>**,long,256l>,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>>>(_QWORD *a1, _OWORD *a2, _OWORD **a3, _OWORD *a4, void ***a5)
{
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *i;
  void **v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *result;
  void **v17;

  v8 = *a5;
  if (a1 == a3)
  {
    v15 = a2;
  }
  else
  {
    v9 = a1 + 1;
    v10 = *a1 + 4096;
    v11 = a2;
    for (i = (_OWORD *)v10; ; i = v14 + 256)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>,0>(v11, i, v8);
      v8 = v13;
      *a5 = v13;
      if (v9 == a3)
        break;
      v14 = (_OWORD *)*v9++;
      v11 = v14;
    }
    v15 = *a3;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>,0>(v15, a4, v8);
  *a5 = v17;
  return result;
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>,0>(_OWORD *a1, _OWORD *a2, void **a3)
{
  _OWORD *v3;
  _OWORD *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<TRangeValue<Pointer32,char const*>>>::operator=[abi:ne180100](void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)*v4;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v7, v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_OWORD *)v16 = *a2;
    v10 = v16 + 16;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

uint64_t std::deque<TRangeValue<Pointer32,char const*>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<TRawSymbol<Pointer32>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void **v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x2A];
    v7 = (unint64_t)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != v8)
    {
      do
      {
        v15 = (void **)(v7 + 56);
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 96;
        if (v7 - (_QWORD)*v6 == 4032)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<TRawSourceInfo<Pointer32>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 64;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 128;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer32,LittleEndian>>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

const char *CSCppNullPathTransformer::transform(CSCppNullPathTransformer *this, const char *a2)
{
  return a2;
}

void CSCppNullPathTransformer::~CSCppNullPathTransformer(CSCppNullPathTransformer *this)
{
  JUMPOUT(0x1B5E36940);
}

void extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, unint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  BOOL v13;
  const char *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v8 = HIDWORD(a5);
  v17 = *(_DWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 8);
  v16 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v18 + 32))(v18, a5, HIDWORD(a5));
  v9 = a4;
  TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by((uint64_t)a2, a4);
  if (a4)
  {
    v10 = 0;
    v11 = (unsigned __int8 *)(a3 + 4);
    do
    {
      v12 = *v11;
      v13 = v12 <= 0x1F && (v12 & 0xE) == 14;
      if (!v13 || !v11[1])
        goto LABEL_21;
      v14 = "$$$bad-name-in-nlist$$$";
      if (*((_DWORD *)v11 - 1) < v8)
      {
        if (!TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::string_at((uint64_t)&v18))
        {
          v14 = "$$$bad-name-in-nlist$$$";
          if (v10)
            goto LABEL_16;
          goto LABEL_13;
        }
        v14 = (const char *)(v16 + *((unsigned int *)v11 - 1));
      }
      if (v10)
        goto LABEL_16;
LABEL_13:
      if (!strcmp(v14, "<redacted>"))
        v10 = v14;
      else
        v10 = 0;
LABEL_16:
      if (v14 == v10)
      {
        v10 = v14;
      }
      else
      {
        v15 = 38289424;
        if ((v12 & 1) == 0)
          v15 = 38289408;
        TRawSymbolOwnerData<Pointer32>::emplace_symbol(a2, *((_DWORD *)v11 + 1) + v17, 0, (uint64_t)v14, (uint64_t)v14, v15 | (2 * v12) & 0x20 | (8 * *((unsigned __int16 *)v11 + 1)) & 0x40, 0, 0);
      }
LABEL_21:
      v11 += 12;
      --v9;
    }
    while (v9);
  }
}

void extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  int v5;
  int v6;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  const char *v19;

  v6 = *((_DWORD *)a3 + 2);
  v5 = *((_DWORD *)a3 + 3);
  if (v5 != v6)
  {
    v10 = *(_DWORD *)(a4 + 32);
    v11 = *a3;
    TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by((uint64_t)a5, (v5 - v6));
    v13 = *((unsigned int *)a3 + 2);
    v12 = *((unsigned int *)a3 + 3);
    if (v13 < v12)
    {
      v14 = (_DWORD *)(v11 + a1 + 12 * v13 + 8);
      do
      {
        v15 = *((unsigned __int8 *)v14 - 4);
        v16 = v15 <= 0x1F && (v15 & 0xE) == 14;
        if (v16 && *((_BYTE *)v14 - 3))
        {
          v17 = 38289440;
          if ((v15 & 0x10) == 0)
            v17 = 38289408;
          v18 = *(v14 - 2);
          if (v18 >= *((_DWORD *)a3 + 4) || (v19 = (const char *)(a1 + v18 + a3[3])) == 0 || !*v19)
            v19 = "$$$bad-name-in-nlist$$$";
          TRawSymbolOwnerData<Pointer32>::emplace_symbol(a5, *v14 + v10, 0, (uint64_t)v19, (uint64_t)v19, v17 | (8 * *((unsigned __int16 *)v14 - 1)) & 0x40, 0, 0);
          v12 = *((unsigned int *)a3 + 3);
        }
        ++v13;
        v14 += 3;
      }
      while (v13 < v12);
    }
  }
}

void extract_direct_stabs_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, _QWORD *a6)
{
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;

  v11 = HIDWORD(a5);
  v21 = *(_DWORD *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 8);
  v20 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v23 + 32))(v23, a5, HIDWORD(a5));
  v12 = a4;
  v22 = (uint64_t *)a2;
  TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by(a2, a4);
  if (a4)
  {
    v13 = (unsigned __int8 *)(a3 + 4);
    do
    {
      v14 = *v13;
      v15 = v14 <= 0x1F && (v14 & 0xE) == 14;
      if (v15 && v13[1])
      {
        if ((v14 & 1) != 0)
          v16 = 38289424;
        else
          v16 = 38289408;
        v17 = *((unsigned __int16 *)v13 + 1);
        v18 = "$$$bad-name-in-nlist$$$";
        if (*((_DWORD *)v13 - 1) < v11
          && TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::string_at((uint64_t)&v23))
        {
          v18 = (const char *)(v20 + *((unsigned int *)v13 - 1));
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 12) != 1 || strncmp(v18, "ltmp", 4uLL))
        {
          v19 = (*((_DWORD *)v13 + 1) + v21);
          if (a6)
            LODWORD(v19) = TAddressRelocator<Pointer32>::relocate(a6, v19);
          TRawSymbolOwnerData<Pointer32>::emplace_symbol(v22, v19, 0, (uint64_t)v18, (uint64_t)v18, v16 | (2 * v14) & 0x20 | (8 * v17) & 0x40, 0, 0);
        }
      }
      v13 += 12;
      --v12;
    }
    while (v12);
  }
}

void extract_indirect_stabs_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unint64_t a8, _QWORD *a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  const char *v23;
  _DWORD *v24;
  const char *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v32;

  v9 = a3[16];
  v10 = a3[9];
  if (v9 <= v10)
  {
    v11 = a3[8];
    if (v11)
    {
      v15 = a3[15];
      v16 = *(_DWORD *)(a1 + 32);
      v32 = *(_QWORD *)(a1 + 8);
      v29 = HIDWORD(a8);
      v17 = v10 / v9;
      v28 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v32 + 32))(v32, a8, HIDWORD(a8));
      TRawSymbolOwnerData<Pointer32>::presize_symbols_container_by((uint64_t)a2, v17);
      if (a5 >= v15)
        v18 = a5 - v15;
      else
        v18 = 0;
      if (v17 <= 1)
        v17 = 1;
      else
        v17 = v17;
      v19 = (v16 + v11);
      v20 = (unsigned int *)(a4 + 4 * v15);
      v21 = a7;
      while (1)
      {
        if (!v18)
          return;
        v22 = *v20;
        v23 = "$$$indirect-absolute-symbol$$$";
        if ((*v20 & 0x40000000) != 0)
          goto LABEL_21;
        if ((v22 & 0x80000000) != 0)
          break;
        if (v22 < v21)
        {
          v24 = (_DWORD *)(a6 + 12 * v22);
          v25 = "$$$bad-name-in-nlist$$$";
          if (*v24 < v29
            && TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::string_at((uint64_t)&v32))
          {
            v25 = (const char *)(v28 + *v24);
          }
          v26 = v19;
          if (a9)
            v26 = TAddressRelocator<Pointer32>::relocate(a9, v19);
          TRawSymbolOwnerData<Pointer32>::emplace_symbol(a2, v26, v9, (uint64_t)v25, (uint64_t)v25, 34095362, 0, 0);
          v21 = a7;
        }
LABEL_24:
        --v18;
        v19 = v19 + v9;
        ++v20;
        if (!--v17)
          return;
      }
      v23 = "$$$indirect-local-symbol$$$";
LABEL_21:
      v27 = v19;
      if (a9)
        v27 = TAddressRelocator<Pointer32>::relocate(a9, v19);
      TRawSymbolOwnerData<Pointer32>::emplace_symbol(a2, v27, v9, (uint64_t)v23, (uint64_t)v23, 34095362, 0, 0);
      goto LABEL_24;
    }
  }
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symtab(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 28 + v1;
  v6 = a1 + 28;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 2);
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::dysymtab(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 28 + v1;
  v6 = a1 + 28;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 11);
  return result;
}

uint64_t TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::string_at(uint64_t a1)
{
  uint64_t (*i)(void);
  uint64_t result;
  int v4;
  uint64_t v5;

  for (i = *(uint64_t (**)(void))(**(_QWORD **)a1 + 32); ; i = *(uint64_t (**)(void))(**(_QWORD **)a1 + 32))
  {
    result = i();
    if (!result)
      break;
    v5 = 0;
    while (v4 != (_DWORD)v5)
    {
      if (!*(unsigned __int8 *)(result + v5++))
        return result;
    }
  }
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::function_starts(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 28 + v1;
  v6 = a1 + 28;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 38);
  return result;
}

void extract_debug_maps_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[11];
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __n128 (*v31)(uint64_t, uint64_t);
  uint64_t (*v32)();
  uint64_t v33;
  int v34;
  int v35;
  _QWORD v36[4];
  _QWORD v37[4];
  __int128 buf;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a1 + 32);
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x2000000000;
  v37[3] = a2 + 208;
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x2000000000;
  v36[3] = a2 + 96;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a5, HIDWORD(a5));
  v28 = 0;
  v29 = &v28;
  v30 = 0x3802000000;
  v31 = __Block_byref_object_copy__151;
  v32 = __Block_byref_object_dispose__152;
  v33 = a3;
  v34 = a4;
  v35 = 0;
  if (!a4)
    goto LABEL_19;
  v11 = v10;
  v12 = &v28;
  while (1)
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x2000000000;
    v27 = 0;
    v27 = NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(v12 + 5);
    v13 = v25[3];
    if (*(_BYTE *)(v13 + 4) != 100 || *(_DWORD *)(v13 + 8))
      goto LABEL_15;
    v14 = *((_DWORD *)v29 + 13);
    if (v14 >= *((_DWORD *)v29 + 12))
      break;
    v15 = v29 + 5;
    v16 = v29[5];
    v17 = v16 + 12 * v14;
    v25[3] = v17;
    if (!v16)
      goto LABEL_18;
    if (*(_BYTE *)(v17 + 4) == 102 && *(_WORD *)(v17 + 6) == 1)
    {
      v18 = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(v15);
      v25[3] = (uint64_t)v18;
      v19 = (char *)(v11 + *v18);
      if (!*v19)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v20 = *(_QWORD *)(a1 + 40);
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v20;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Empty object_file_path in mach-o header: %s\n", (uint8_t *)&buf, 0xCu);
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Empty object_file_path in mach-o header: %s\n", *(const char **)(a1 + 40));
      }
      if (!deny_nfs_mount_lookup(v19))
      {
        *(_QWORD *)&buf = CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification(v19, (void **)(*(unsigned int *)(*(_QWORD *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 24) + 8) & 0xFFFFFF) << 32)), 537657344, 0);
        *((_QWORD *)&buf + 1) = v21;
        v22[0] = MEMORY[0x1E0C809B0];
        v22[1] = 0x40000000;
        v22[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke;
        v22[3] = &unk_1E67777E0;
        v22[4] = &v24;
        v22[5] = &v28;
        v23 = v9;
        v22[8] = v11;
        v22[9] = a1;
        v22[10] = a2;
        v22[6] = v36;
        v22[7] = v37;
        CSSymbolicatorForeachSymbolOwnerAtTime(buf, v21, 0x8000000000000000, (uint64_t)v22);
        CSCppTypeRefMark::~CSCppTypeRefMark((CSCppTypeRefMark *)&buf);
      }
    }
LABEL_15:
    _Block_object_dispose(&v24, 8);
    v12 = v29;
    if (*((_DWORD *)v29 + 13) >= *((_DWORD *)v29 + 12))
      goto LABEL_19;
  }
  v25[3] = 0;
LABEL_18:
  _Block_object_dispose(&v24, 8);
LABEL_19:
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(v37, 8);
}

void sub_1B412DC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  CSCppTypeRefMark::~CSCppTypeRefMark((CSCppTypeRefMark *)(v30 - 128));
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 192), 8);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  _Unwind_Resume(a1);
}

unsigned int *extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5)
{
  int v8;
  unsigned int *result;
  unsigned int *v10;
  void **v11;
  CSCppStringCache *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v8 = *(_DWORD *)(a1 + 32);
  result = (unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a5, HIDWORD(a5));
  v22 = a3;
  v23 = a4;
  v24 = 0;
  if (a4)
  {
    v10 = result;
    v11 = (void **)(a2 + 488);
    v12 = (CSCppStringCache *)(a2 + 96);
    while (1)
    {
      result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
      if (*((_BYTE *)result + 4) == 100 && !result[2])
      {
        if (v24 >= v23 || !v22)
          return result;
        if (*(_BYTE *)(v22 + 12 * v24 + 4) == 104)
        {
          result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
          if (v24 >= v23)
            return result;
          v13 = *result;
          result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
          if (*((_BYTE *)result + 4) == 100)
          {
            if (v24 >= v23)
              return result;
            result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
            if (*((_BYTE *)result + 4) == 100)
            {
              if (v24 >= v23)
                return result;
              result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
              if (*((_BYTE *)result + 4) == 102)
              {
                v14 = v24;
                if (v24 < (unint64_t)v23)
                  break;
              }
            }
          }
        }
      }
LABEL_30:
      if (v24 >= v23)
        return result;
    }
    v15 = (char *)v10 + v13;
    while (1)
    {
      if (!v22)
        goto LABEL_20;
      v16 = v22 + 12 * v14;
      v17 = *(unsigned __int8 *)(v16 + 4);
      if (v17 == 100)
      {
        if (!*(_DWORD *)(v16 + 8))
          goto LABEL_30;
      }
      else if (v17 == 46)
      {
        NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
LABEL_20:
        result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
        if (*((_BYTE *)result + 4) == 36)
        {
          v21 = result[2] + v8;
          do
          {
            result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
            v18 = *((unsigned __int8 *)result + 4);
          }
          while (v18 == 132);
          if (v18 == 36)
          {
            v20 = result[2];
            if (v24 >= v23)
              goto LABEL_30;
            result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
            if (*((_BYTE *)result + 4) == 78)
            {
              v19 = CSCppStringCache::intern(v12, v15);
              result = (unsigned int *)std::vector<TRangeValue<Pointer32,char const*>>::emplace_back<unsigned int &,unsigned int &,char const*>(v11, &v21, (int *)&v20, (uint64_t *)&v19);
            }
          }
        }
        goto LABEL_29;
      }
      result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(&v22);
LABEL_29:
      v14 = v24;
      if (v24 >= (unint64_t)v23)
        goto LABEL_30;
    }
  }
  return result;
}

__n128 __Block_byref_object_copy__151(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_DWORD *)a1 + 3);
  if (v1 >= *((_DWORD *)a1 + 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"out of range index into nlist array", 35);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *a1;
  *((_DWORD *)a1 + 3) = v1 + 1;
  return v2 + 12 * v1;
}

void sub_1B412DF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[4];
  __int128 v21;
  uint64_t v22;
  int v23;
  uint8_t buf[4];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8);
  result = CSSymbolOwnerGetLastModifiedTimestamp(a2, a3);
  v8 = result - v6;
  if (v6 > result)
    v8 = v6 - result;
  if (v6)
    v9 = v8 > 5;
  else
    v9 = 0;
  if (!v9)
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C809B0];
    while (1)
    {
      while (1)
      {
        result = NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                              + 40));
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
        v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4);
        if (v12 == 46)
          break;
        if (v12 == 100)
          return result;
      }
      result = NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                            + 40));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
      v13 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (*((_BYTE *)v13 + 4) != 36)
        break;
      v14 = v13[2];
      v15 = *(_DWORD *)(a1 + 88);
      v16 = (_BYTE *)(*(_QWORD *)(a1 + 64) + *v13);
      if (!*v16)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 40);
          *(_DWORD *)buf = 136315138;
          v25 = v17;
          _os_log_impl(&dword_1B40C5000, v10, OS_LOG_TYPE_ERROR, "Empty function_name in mach-o header: %s\n", buf, 0xCu);
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Empty function_name in mach-o header: %s\n", *(const char **)(*(_QWORD *)(a1 + 72) + 40));
      }
      v18 = v15 + v14;
      do
      {
        result = NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                              + 40));
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
        v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4);
      }
      while (v19 == 132);
      if (v19 != 36)
        break;
      result = NListRangeChecker<SizeAndEndianness<Pointer32,LittleEndian>>::next((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                            + 40));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4) != 78)
        break;
      v20[0] = v11;
      v20[1] = 0x40000000;
      v20[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_155;
      v20[3] = &unk_1E67777B8;
      v23 = v18;
      v22 = *(_QWORD *)(a1 + 80);
      v21 = *(_OWORD *)(a1 + 48);
      CSSymbolOwnerForeachSymbolWithMangledName(a2, a3, (uint64_t)v16, (uint64_t)v20);
    }
  }
  return result;
}

unint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_155(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  TMMapSymbolOwnerData *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t i;
  void ***v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v38[4];
  __int128 v39;
  int v40;
  unint64_t v41;
  _QWORD v42[6];
  _BYTE v43[24];
  _BYTE *v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint8_t buf[8];
  uint8_t *v48;
  uint64_t v49;
  uint8_t *v50;
  void (*v51)(uint64_t);
  __int128 v52;
  _BYTE v53[40];
  _BYTE v54[32];
  uint64_t v55;
  _QWORD v56[3];
  _QWORD *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 56) - CSSymbolGetRange(a2, a3);
  if (CSSymbolIsKnownLength(a2, a3))
    v7 = 256;
  else
    v7 = 0;
  if (CSSymbolIsOmitFramePointer(a2, a3))
    v8 = v7 | 0x80;
  else
    v8 = v7;
  v9 = MEMORY[0x1E0C809B0];
  if (!v8)
    goto LABEL_60;
  v57 = 0;
  *(_QWORD *)buf = &off_1E6777810;
  v48 = (uint8_t *)v56;
  v50 = buf;
  std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](buf, v56);
  v10 = v50;
  if (v50 == buf)
  {
    v11 = 4;
    v10 = buf;
  }
  else
  {
    if (!v50)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_13:
  v12 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if ((v13 - 1) < 2)
  {
    v14 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 40);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 48);
      v17 = CSCppStringCache::intern(*(CSCppStringCache **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v15);
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v58[0] = v17;
    v58[1] = v16;
    v23 = atomic_load((unsigned int *)(v14 + 20));
    if ((v23 & 0x80000000) != 0)
    {
      v24 = (__int128 *)v58;
      if (!*(_QWORD *)(v14 + 40))
        v24 = 0;
    }
    else
    {
      v24 = 0;
    }
    *(_QWORD *)buf = *(_QWORD *)v14;
    v48 = 0;
    v49 = 0;
    v50 = (uint8_t *)"$$$debug-map-fake-name$$$";
    v51 = (void (*)(uint64_t))"$$$debug-map-fake-mangled-name$$$";
    *(_QWORD *)&v53[32] = 0;
    v52 = 0u;
    memset(v53, 0, 25);
    if (v24)
    {
      v52 = *v24;
      v25 = v8 | 0x88000000;
    }
    else
    {
      v25 = v8 | 0x8000000;
    }
    HIDWORD(v49) = v25;
    v26 = *(_QWORD *)(v14 + 56);
    for (i = *(_QWORD *)(v14 + 64); v26 != i; v26 += 96)
    {
      if (!v57)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, uint64_t, _BYTE *, _QWORD))(*v57 + 48))(v57, v26, v53, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    }
    slideSymbolsByOffset<Pointer32>((uint64_t)buf, v6);
    TRawSymbolOwnerData<Pointer32>::add_symbol(*(uint64_t **)(a1 + 48), (uint64_t)buf);
    v45[0] = v53;
    v28 = (void ***)v45;
    goto LABEL_54;
  }
  if (v13 == 4)
  {
    v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
    v41 = 0;
    if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v18, *(unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL), &v41) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps", buf, 2u);
      }
      fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      goto LABEL_55;
    }
    *(_QWORD *)buf = 0;
    v48 = buf;
    v49 = 0x8802000000;
    v50 = (uint8_t *)__Block_byref_object_copy__159;
    v51 = __Block_byref_object_dispose__160;
    v19 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    LODWORD(v52) = v6 + v41;
    DWORD1(v52) = v19;
    *((_QWORD *)&v52 + 1) = 0;
    *(_DWORD *)v53 = 0;
    *(_QWORD *)&v53[8] = "$$$debug-map-fake-name$$$";
    *(_QWORD *)&v53[16] = "$$$debug-map-fake-mangled-name$$$";
    v55 = 0;
    *(_OWORD *)&v53[24] = 0u;
    memset(v54, 0, 25);
    *(_DWORD *)&v53[4] = v8 | 0x8000000;
    v46 = 0;
    v20 = operator new(0x20uLL);
    *v20 = &off_1E67778F0;
    v20[1] = v45;
    v20[2] = v18;
    *((_DWORD *)v20 + 6) = v6;
    v59 = v20;
    std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](v58, v45);
    v21 = v59;
    if (v59 == v58)
    {
      v22 = 4;
      v21 = v58;
    }
    else
    {
      if (!v59)
        goto LABEL_38;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_38:
    v42[0] = v9;
    v42[1] = 1174405120;
    v42[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_161;
    v42[3] = &unk_1E6777758;
    v29 = v43;
    v30 = (uint64_t)v46;
    if (v46)
    {
      if (v46 == v45)
      {
        v44 = v43;
        (*(void (**)(_QWORD *, _BYTE *))(v45[0] + 24))(v45, v43);
LABEL_43:
        v31 = *(_QWORD *)(a1 + 32);
        v42[4] = buf;
        v42[5] = v31;
        TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v18, a3 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)v42);
        TRawSymbolOwnerData<Pointer32>::add_symbol(*(uint64_t **)(a1 + 48), (uint64_t)(v48 + 40));
        if (v44 == v43)
        {
          v32 = 4;
        }
        else
        {
          if (!v44)
            goto LABEL_48;
          v32 = 5;
          v29 = v44;
        }
        (*(void (**)(_QWORD *))(*v29 + 8 * v32))(v29);
LABEL_48:
        v33 = v46;
        if (v46 == v45)
        {
          v34 = 4;
          v33 = v45;
        }
        else
        {
          if (!v46)
          {
LABEL_53:
            _Block_object_dispose(buf, 8);
            v58[0] = v54;
            v28 = (void ***)v58;
LABEL_54:
            std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v28);
            goto LABEL_55;
          }
          v34 = 5;
        }
        (*(void (**)(void))(*v33 + 8 * v34))();
        goto LABEL_53;
      }
      v30 = (*(uint64_t (**)(void))(*v46 + 16))();
    }
    v44 = (_BYTE *)v30;
    goto LABEL_43;
  }
LABEL_55:
  v35 = v57;
  if (v57 == v56)
  {
    v36 = 4;
    v35 = v56;
    goto LABEL_59;
  }
  if (v57)
  {
    v36 = 5;
LABEL_59:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
LABEL_60:
  v38[0] = v9;
  v38[1] = 0x40000000;
  v38[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_164;
  v38[3] = &unk_1E6777790;
  v39 = *(_OWORD *)(a1 + 32);
  v40 = v6;
  return CSSymbolForeachSourceInfo(a2, a3, (uint64_t)v38);
}

void sub_1B412E7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v45 = a30;
  if (a30 == &a27)
  {
    v46 = 4;
    v45 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_6:
  _Block_object_dispose(&a31, 8);
  *(_QWORD *)(v43 - 120) = &a43;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 120));
  v47 = *(_QWORD **)(v43 - 128);
  if (v47 == (_QWORD *)(v43 - 152))
  {
    v48 = 4;
    v47 = (_QWORD *)(v43 - 152);
  }
  else
  {
    if (!v47)
      goto LABEL_11;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t slideSymbolsByOffset<Pointer32>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  *(_DWORD *)result += a2;
  v2 = *(_QWORD *)(result + 56);
  for (i = *(_QWORD *)(result + 64); v2 != i; v2 += 96)
    result = slideSymbolsByOffset<Pointer32>(v2, a2);
  return result;
}

uint64_t __Block_byref_object_copy__159(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = 0;
  v2 = a1 + 40;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 65) = 0u;
  return TRawSymbol<Pointer32>::operator=(v2, a2 + 40);
}

void __Block_byref_object_dispose__160(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 96);
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_161(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1[4] + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v6 = a2;
  v4 = a1[9];
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v6, v2 + 96, v3);
}

uint64_t __copy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

_QWORD *__destroy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CSCppSymbolOwner *v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  void **v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  TMMapSymbolOwnerData *v17;
  CSCppMMapSourceInfo *v18;
  _DWORD *v19;
  CSCppStringCache *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  unint64_t v47;

  v5 = (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v6 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if ((v7 - 1) >= 2)
  {
    if (v7 != 4)
      return;
    v17 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v5);
    v18 = (CSCppMMapSourceInfo *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_DWORD *)*((_QWORD *)v17 + 11);
    v20 = *(CSCppStringCache **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v21 = (char *)CSCppMMapSourceInfo::path(v18, (uint64_t)v19+ 32 * v19[2]+ 24 * v19[3]+ (24 * v19[4])+ (unint64_t)(4 * v19[4])+ (36 * v19[5])+ (20 * v19[6])+ v19[22]+ v19[20]+ 96);
    v22 = CSCppStringCache::intern(v20, v21);
    v47 = 0;
    TMMapSymbolOwnerData::convert_archive_address_to_real_address(v17, *(unsigned int *)v18, &v47);
    v10 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v23 = v47 + *(_DWORD *)(a1 + 48);
    v24 = *((_DWORD *)v18 + 1);
    v25 = *((_DWORD *)v18 + 3);
    v14 = *((_DWORD *)v18 + 4);
    v15 = (char *)v10[1];
    v26 = (char *)v10[2];
    if (v15 < v26)
    {
      *(_DWORD *)v15 = v23;
      *((_DWORD *)v15 + 1) = v24;
      *((_QWORD *)v15 + 1) = v22;
      *((_DWORD *)v15 + 4) = v25;
      goto LABEL_7;
    }
    v39 = (v15 - (_BYTE *)*v10) >> 5;
    v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 59))
    {
      v41 = v26 - (_BYTE *)*v10;
      if (v41 >> 4 > v40)
        v40 = v41 >> 4;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0)
        v42 = 0x7FFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v10 + 2), v42);
      v33 = &v43[32 * v39];
      v35 = &v43[32 * v44];
      *(_DWORD *)v33 = v23;
      *((_DWORD *)v33 + 1) = v24;
      *((_QWORD *)v33 + 1) = v22;
      *((_DWORD *)v33 + 4) = v25;
      *((_DWORD *)v33 + 5) = v14;
      *((_DWORD *)v33 + 6) = 0;
      v27 = v33 + 32;
      v45 = (char *)*v10;
      v36 = (char *)v10[1];
      if (v36 == *v10)
        goto LABEL_26;
      do
      {
        v46 = *((_OWORD *)v36 - 2);
        *(_OWORD *)(v33 - 20) = *(_OWORD *)(v36 - 20);
        *((_OWORD *)v33 - 2) = v46;
        v33 -= 32;
        v36 -= 32;
      }
      while (v36 != v45);
      goto LABEL_25;
    }
LABEL_30:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  v8 = (_DWORD *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
  v9 = CSCppStringCache::intern(*(CSCppStringCache **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 8));
  v10 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v11 = v8[1];
  v12 = *(_DWORD *)(a1 + 48) + *v8;
  v13 = v8[4];
  v14 = v8[5] & 0x7FFFFFFF;
  v15 = (char *)v10[1];
  v16 = (char *)v10[2];
  if (v15 >= v16)
  {
    v28 = (v15 - (_BYTE *)*v10) >> 5;
    v29 = v28 + 1;
    if (!((unint64_t)(v28 + 1) >> 59))
    {
      v30 = v16 - (_BYTE *)*v10;
      if (v30 >> 4 > v29)
        v29 = v30 >> 4;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
        v31 = 0x7FFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v10 + 2), v31);
      v33 = &v32[32 * v28];
      v35 = &v32[32 * v34];
      *(_DWORD *)v33 = v12;
      *((_DWORD *)v33 + 1) = v11;
      *((_QWORD *)v33 + 1) = v9;
      *((_DWORD *)v33 + 4) = v13;
      *((_DWORD *)v33 + 5) = v14;
      *((_DWORD *)v33 + 6) = 0;
      v27 = v33 + 32;
      v37 = (char *)*v10;
      v36 = (char *)v10[1];
      if (v36 == *v10)
        goto LABEL_26;
      do
      {
        v38 = *((_OWORD *)v36 - 2);
        *(_OWORD *)(v33 - 20) = *(_OWORD *)(v36 - 20);
        *((_OWORD *)v33 - 2) = v38;
        v33 -= 32;
        v36 -= 32;
      }
      while (v36 != v37);
LABEL_25:
      v36 = (char *)*v10;
LABEL_26:
      *v10 = v33;
      v10[1] = v27;
      v10[2] = v35;
      if (v36)
        operator delete(v36);
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  *(_DWORD *)v15 = v12;
  *((_DWORD *)v15 + 1) = v11;
  *((_QWORD *)v15 + 1) = v9;
  *((_DWORD *)v15 + 4) = v13;
LABEL_7:
  *((_DWORD *)v15 + 5) = v14;
  *((_DWORD *)v15 + 6) = 0;
  v27 = v15 + 32;
LABEL_28:
  v10[1] = v27;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EED0Ev()
{
  JUMPOUT(0x1B5E36940);
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6777810;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEPNS0_6__baseISX_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6777810;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EEclESN_SS_SU_(uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  unsigned __int8 *v16;
  char *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  void **v33;

  v8 = *(char **)(a2 + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 48);
    v10 = CSCppStringCache::intern(this, v8);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = atomic_load((unsigned int *)(a2 + 20));
  v12 = v11 & 0xF77BFFFF;
  v13 = v11 & 0xF77BFFFF | 0x8000000;
  v14 = *(_QWORD *)a2;
  v15 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::EphemeralMangledName>(a2);
  v16 = CSCppStringCache::intern(this, v15);
  v17 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::EphemeralMangledName>(a2);
  v18 = CSCppStringCache::intern(this, v17);
  v19 = atomic_load((unsigned int *)(a2 + 20));
  v20 = *(_QWORD *)(a2 + 40);
  v26[0] = v14;
  v26[1] = 0;
  v27 = 0;
  v28 = v16;
  v29 = v18;
  v32 = 0;
  v30 = 0u;
  memset(v31, 0, 25);
  if ((v19 & 0x80000000) != 0 && v20)
  {
    *(_QWORD *)&v30 = v10;
    *((_QWORD *)&v30 + 1) = v9;
    v13 = v12 | 0x88000000;
  }
  HIDWORD(v27) = v13;
  v21 = *(_QWORD *)(a2 + 56);
  for (i = *(_QWORD *)(a2 + 64); v21 != i; v21 += 96)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v23)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(_QWORD *)v23 + 48))(v23, v21, v31, this);
  }
  v24 = a3[1];
  if (v24 >= a3[2])
  {
    v25 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)v26);
  }
  else
  {
    *(_QWORD *)(v24 + 88) = 0;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)v24 = 0;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(v24, (uint64_t)v26);
    v25 = v24 + 96;
  }
  a3[1] = v25;
  v33 = (void **)v31;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B412EF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a17;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_;
}

uint64_t TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::EphemeralMangledName>(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  CSCppBitLock *v5;
  _QWORD v7[5];
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (unsigned int *)(a1 + 20);
  v3 = atomic_load((unsigned int *)(a1 + 20));
  if ((v3 & 0x400000) == 0)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2000000000;
    v12 = 0;
    v4 = operator new();
    CSCppBitLock::CSCppBitLock(v4, v2, 0x2000);
    v12 = v4;
    v7[4] = &v9;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZN10TRawSymbolI9Pointer32E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke;
    v8[3] = &unk_1E6777888;
    v8[4] = &v9;
    v8[5] = a1;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___ZN10TRawSymbolI9Pointer32E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke_2;
    v7[3] = &unk_1E67778B0;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v8, (uint64_t)v7);
    v5 = (CSCppBitLock *)v10[3];
    if (v5)
    {
      CSCppBitLock::~CSCppBitLock(v5);
      MEMORY[0x1B5E36940]();
      v10[3] = 0;
    }
    _Block_object_dispose(&v9, 8);
  }
  return *(_QWORD *)(a1 + 32);
}

void sub_1B412F08C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B412F318(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EED0Ev()
{
  JUMPOUT(0x1B5E36940);
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E67778F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E67778F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EEclEOSM_ST_SV_(uint64_t a1, uint64_t *a2, uint64_t *a3, CSCppStringCache *this)
{
  __int128 *v7;
  TMMapSymbolOwnerData *v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int128 v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[7];
  uint8_t buf[8];
  uint8_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  __int128 v43;
  _BYTE v44[32];
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  void **v49;

  v7 = (__int128 *)*a2;
  v8 = *(TMMapSymbolOwnerData **)(a1 + 16);
  v9 = (_DWORD *)*((_QWORD *)v8 + 11);
  v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*(_DWORD *)(*a2 + 8) & 0x80000000) != 0 && (v11 = *((unsigned int *)v7 + 6), v10 + v11))
  {
    v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)v7 + 2) & 0x80000000) != 0)
      v24 = *(_QWORD *)((char *)v7 + 28);
    else
      v24 = 0;
    *((_QWORD *)&v30 + 1) = v24;
    v8 = *(TMMapSymbolOwnerData **)(a1 + 16);
  }
  else
  {
    v12 = 0;
    *((_QWORD *)&v30 + 1) = 0;
  }
  v13 = *v7;
  v48 = *((_QWORD *)v7 + 2);
  v47 = v13;
  v46 = 0;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v13, &v46) & 1) != 0)
  {
    *(_QWORD *)&v30 = v12;
    v14 = (char *)(v10 + v48);
    v15 = DWORD1(v47);
    v16 = DWORD2(v47);
    if (HIDWORD(v47))
      v17 = (char *)(v10 + HIDWORD(v47));
    else
      v17 = (char *)(v10 + v48);
    if (HIDWORD(v47))
      v18 = DWORD2(v47);
    else
      v18 = DWORD2(v47) & 0xF779FFFF;
    v19 = v18 & 0xF77BFFFF;
    v35 = __Block_byref_object_copy__159;
    v36 = __Block_byref_object_dispose__160;
    v20 = *(_DWORD *)(a1 + 24) + v46;
    *(_QWORD *)buf = 0;
    v33 = buf;
    v34 = 0x8802000000;
    v21 = CSCppStringCache::intern(this, v17);
    v22 = CSCppStringCache::intern(this, v14);
    v37 = v20;
    v38 = v15;
    v39 = 0;
    v40 = 0;
    v41 = v21;
    v42 = v22;
    v45 = 0;
    v43 = 0u;
    memset(v44, 0, 25);
    if (v16 < 0)
    {
      v43 = v30;
      v23 = v19 | 0x88000000;
    }
    else
    {
      v23 = v19 | 0x8000000;
    }
    HIDWORD(v40) = v23;
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 0x40000000;
    v31[2] = ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke;
    v31[3] = &unk_1E6777968;
    v26 = *(_QWORD *)(a1 + 8);
    v25 = *(_QWORD *)(a1 + 16);
    v31[4] = buf;
    v31[5] = v26;
    v31[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v25, (uint64_t)&v47, (uint64_t)v31);
    v27 = (uint64_t)(v33 + 40);
    v28 = a3[1];
    if (v28 >= a3[2])
    {
      v29 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, v27);
    }
    else
    {
      *(_QWORD *)(v28 + 88) = 0;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)v28 = 0;
      *(_OWORD *)(v28 + 40) = 0u;
      *(_OWORD *)(v28 + 56) = 0u;
      *(_OWORD *)(v28 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v28, v27);
      v29 = v28 + 96;
    }
    a3[1] = v29;
    _Block_object_dispose(buf, 8);
    v49 = (void **)v44;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v49);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps inline enumeration", buf, 2u);
    }
    fwrite("Could not remap archive address to real in debug maps inline enumeration", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
}

void sub_1B412F6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  _Block_object_dispose(&a21, 8);
  *(_QWORD *)(v33 - 104) = &a33;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 104));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_;
}

uint64_t ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer3212LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a1[5];
  v3 = *(_QWORD *)(a1[4] + 8);
  v4 = a1[6];
  v7 = a2;
  v5 = *(_QWORD *)(v2 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v3 + 96, v4);
}

_QWORD *std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B412F8D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void CSCppTypeRefMark::~CSCppTypeRefMark(CSCppTypeRefMark *this)
{
  CSRelease(*(unsigned int **)this, *((_QWORD *)this + 1));
}

char *std::vector<TRangeValue<Pointer32,char const*>>::emplace_back<unsigned int &,unsigned int &,char const*>(void **a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    v15 = (uint64_t)(v11 - (_QWORD)*a1) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v17 = v9 - (_BYTE *)*a1;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v8, v18);
    v20 = &v19[16 * v15];
    v22 = &v19[16 * v21];
    v23 = *a3;
    v24 = *a4;
    *(_DWORD *)v20 = *a2;
    *((_DWORD *)v20 + 1) = v23;
    *((_QWORD *)v20 + 1) = v24;
    v14 = v20 + 16;
    v26 = (char *)*a1;
    v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v25 - 1);
        v20 -= 16;
        v25 -= 16;
      }
      while (v25 != v26);
      v25 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v14;
    a1[2] = v22;
    if (v25)
      operator delete(v25);
  }
  else
  {
    v12 = *a3;
    v13 = *a4;
    *(_DWORD *)v11 = *a2;
    *(_DWORD *)(v11 + 4) = v12;
    *(_QWORD *)(v11 + 8) = v13;
    v14 = (char *)(v11 + 16);
  }
  a1[1] = v14;
  return v14 - 16;
}

void sort_inlined_functions<Pointer32>(uint64_t a1)
{
  int *v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(int **)(a1 + 56);
  v3 = *(unsigned int **)(a1 + 64);
  v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 5));
  if (v3 == (unsigned int *)v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,false>(v2, v3, (uint64_t)&v8, v5, 1);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  while (v6 != v7)
  {
    sort_inlined_functions<Pointer32>(v6);
    v6 += 96;
  }
}

uint64_t std::vector<TRawSymbol<Pointer32>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v10;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = v7 - 96;
        v10 = (void **)(v7 - 40);
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v10);
        v7 = v8;
      }
      while (v8 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void **std::vector<TRawSymbol<Pointer32>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 96 * v6;
    std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B412FC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<TRangeValue<Pointer32,char const*>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v28[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = a1 + 2;
    v10 = v11;
    v12 = *(v9 - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 5)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 5)) >= a5)
      {
        v21 = a3 + 96 * a5;
      }
      else
      {
        v21 = a3 + 32 * ((uint64_t)(v12 - a2) >> 5);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,TRawSymbol<Pointer32>*>((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<TRawSymbol<Pointer32>>::__move_range((uint64_t)a1, v5, v12, v5 + 96 * a5);
      if (v21 != v7)
      {
        v22 = v5;
        do
        {
          TRawSymbol<Pointer32>::operator=(v22, v7);
          v7 += 96;
          v22 += 96;
        }
        while (v7 != v21);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x2AAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 5);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x155555555555555)
        v18 = 0x2AAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v28[4] = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)v9, v18);
      else
        v19 = 0;
      v23 = &v19[96 * v15];
      v28[0] = v19;
      v28[1] = v23;
      v28[3] = &v19[96 * v18];
      v24 = 3 * a5;
      v25 = &v23[96 * a5];
      v26 = 32 * v24;
      do
      {
        *((_QWORD *)v23 + 11) = 0;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        *(_QWORD *)v23 = 0;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=((uint64_t)v23, v7);
        v23 += 96;
        v7 += 96;
        v26 -= 96;
      }
      while (v26);
      v28[2] = v25;
      v5 = std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(a1, v28, v5);
      std::__split_buffer<TRawSymbol<Pointer32>>::~__split_buffer(v28);
    }
  }
  return v5;
}

void sub_1B412FEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)(v8 + 88) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = 0;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_OWORD *)(v8 + 56) = 0u;
      *(_OWORD *)(v8 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v8, v10);
      v10 += 96;
      v8 += 96;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>(a2, v7, v6);
}

uint64_t std::vector<TRawSymbol<Pointer32>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::reverse_iterator<TRawSymbol<Pointer32>*>,std::reverse_iterator<TRawSymbol<Pointer32>*>,std::reverse_iterator<TRawSymbol<Pointer32>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,TRawSymbol<Pointer32>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32>*>>,TRawSymbol<Pointer32>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v4, v6);
      v6 += 96;
      v4 = v11 + 96;
      v11 += 96;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer32>>,TRawSymbol<Pointer32>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 96;
      a3 -= 96;
      TRawSymbol<Pointer32>::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      TRawSymbol<Pointer32>::operator=(a3, v4);
      v4 += 96;
      a3 += 96;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _DWORD *v8;
  uint64_t *v10;
  uint64_t *v11;

  v10 = a5;
  if (a1 != a2)
  {
    v8 = a1;
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](&v10, (uint64_t)v8);
        v8 += 24;
      }
      else
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](&v10, (uint64_t)a3);
        a3 += 24;
      }
      if (v8 == a2)
      {
        a5 = v10;
        goto LABEL_9;
      }
    }
    v11 = v10;
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](&v11, (uint64_t)v8);
      v8 += 24;
    }
    while (v8 != a2);
    return v11;
  }
LABEL_9:
  v11 = a5;
  if (a3 != a4)
  {
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](&v11, (uint64_t)a3);
      a3 += 24;
    }
    while (a3 != a4);
    return v11;
  }
  return a5;
}

uint64_t **std::back_insert_iterator<std::vector<TRawSymbol<Pointer32>>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v5 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(*a1, a2);
  }
  else
  {
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(v4, a2);
    v5 = v4 + 96;
  }
  v3[1] = v5;
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer32>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x3FFFFFFFFFFFFFFLL)
    v1 = 0x3FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(32 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(_OWORD *a1, _OWORD *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6, __n128 a7)
{
  _OWORD *v9;
  __int128 v10;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  __n128 v18;
  _BYTE v20[32];

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v9 = a2 - 2;
      if (*((_DWORD *)a2 - 8) < *(_DWORD *)a1)
      {
        *(_OWORD *)v20 = *a1;
        a7 = *(__n128 *)a1;
        *(_OWORD *)&v20[16] = a1[1];
        v10 = *(_OWORD *)((char *)a2 - 20);
        *a1 = *v9;
        *(_OWORD *)((char *)a1 + 12) = v10;
        *v9 = a7;
        a7.n128_u64[0] = *(_QWORD *)&v20[12];
        *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v20[12];
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v15 = a4 >> 1;
      v16 = &a1[2 * (a4 >> 1)];
      v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v18.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(a1, v16, a3, v17, (uint64_t)a5, a7);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(&a1[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), (uint64_t)&a5[32 * v15], v18);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>((uint64_t)a5, (uint64_t)&a5[32 * v15], (uint64_t)&a5[32 * v15], (uint64_t)&a5[32 * a4], (uint64_t)a1).n128_u64[0];
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(a1, v16, a3, v17, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(&a1[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>((char *)a1, (char *)&a1[2 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>((uint64_t)a1, (unsigned int *)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(uint64_t result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[28];

  if ((unsigned int *)result != a2)
  {
    v2 = (unsigned int *)(result + 32);
    if ((unsigned int *)(result + 32) != a2)
    {
      v3 = 0;
      v4 = (unsigned int *)result;
      do
      {
        v5 = v2;
        v6 = *v2;
        if (v6 < *v4)
        {
          *(_OWORD *)v10 = *(_OWORD *)(v4 + 9);
          *(_OWORD *)&v10[12] = *((_OWORD *)v4 + 3);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 44) = *(_OWORD *)(result + v7 + 12);
            if (!v7)
              break;
            v7 -= 32;
            if (v6 >= *(_DWORD *)(v8 - 32))
            {
              v9 = result + v7 + 32;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_DWORD *)v9 = v6;
          *(_OWORD *)(v9 + 4) = *(_OWORD *)v10;
          *(_QWORD *)(v9 + 20) = *(_QWORD *)&v10[16];
        }
        v2 = v5 + 8;
        v3 += 32;
        v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(_OWORD *a1, _OWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  __int128 v10;
  __n128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  __n128 v16;

  if (a4)
  {
    if (a4 == 2)
    {
      v11 = (__n128 *)(a2 - 2);
      if (*((_DWORD *)a2 - 8) >= *(_DWORD *)a1)
      {
        v15 = a1[1];
        *(_OWORD *)a5 = *a1;
        *(_OWORD *)(a5 + 16) = v15;
        a6 = *v11;
        v13 = *(a2 - 1);
      }
      else
      {
        v12 = *(a2 - 1);
        *(__n128 *)a5 = *v11;
        *(_OWORD *)(a5 + 16) = v12;
        a6 = *(__n128 *)a1;
        v13 = a1[1];
      }
      *(__n128 *)(a5 + 32) = a6;
      *(_OWORD *)(a5 + 48) = v13;
    }
    else if (a4 == 1)
    {
      a6 = *(__n128 *)a1;
      v10 = a1[1];
      *(_OWORD *)a5 = *a1;
      *(_OWORD *)(a5 + 16) = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(a1, &a1[2 * (a4 >> 1)], a3, a4 >> 1, a5, a4 >> 1);
      v16.n128_f64[0] = std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(&a1[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 32 * (a4 >> 1), a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>((uint64_t)a1, (uint64_t)&a1[2 * (a4 >> 1)], (uint64_t)&a1[2 * (a4 >> 1)], (uint64_t)a2, a5, v16).n128_u64[0];
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(a1, a2, (_OWORD *)a5);
    }
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v6;
  uint64_t v7;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        result = *(__n128 *)a3;
        *(_OWORD *)(a5 + 12) = *(_OWORD *)(a3 + 12);
        *(__n128 *)a5 = result;
        a5 += 32;
        a3 += 32;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (*(_DWORD *)a3 >= *(_DWORD *)a1)
    {
      result = *(__n128 *)a1;
      *(_OWORD *)(a5 + 12) = *(_OWORD *)(a1 + 12);
      *(__n128 *)a5 = result;
      a1 += 32;
    }
    else
    {
      result = *(__n128 *)a3;
      *(_OWORD *)(a5 + 12) = *(_OWORD *)(a3 + 12);
      *(__n128 *)a5 = result;
      a3 += 32;
    }
    a5 += 32;
  }
  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a5 + v6;
      result = *(__n128 *)(a1 + v6);
      *(_OWORD *)(v7 + 12) = *(_OWORD *)(a1 + v6 + 12);
      *(__n128 *)v7 = result;
      v6 += 32;
    }
    while (a1 + v6 != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __n128 result;
  uint64_t v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _BYTE v46[32];

  if (a6)
  {
    v9 = a6;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(a1, a2, a3, a4, a5, v9, a7);
        return result;
      }
      if (!a5)
        return result;
      v12 = 0;
      v13 = -a5;
      while (*(_DWORD *)a2 >= *(_DWORD *)&a1[v12])
      {
        v12 += 32;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v15 = -v13;
      v42 = a3;
      v43 = a8;
      v41 = &a1[v12];
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          v39 = &a1[v12];
          *(_OWORD *)v46 = *(_OWORD *)&a1[v12];
          *(_OWORD *)&v46[16] = *(_OWORD *)&a1[v12 + 16];
          v40 = *(_OWORD *)a2;
          *(_OWORD *)(v39 + 12) = *(_OWORD *)(a2 + 12);
          *(_OWORD *)v39 = v40;
          *(_OWORD *)a2 = *(_OWORD *)v46;
          result = *(__n128 *)&v46[12];
          *(_OWORD *)(a2 + 12) = *(_OWORD *)&v46[12];
          return result;
        }
        if (v13 > 0)
          v15 = 1 - v13;
        v25 = v15 >> 1;
        v19 = &a1[32 * (v15 >> 1) + v12];
        v18 = a2;
        if (a2 != a3)
        {
          v26 = (a3 - a2) >> 5;
          v18 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v18[32 * (v26 >> 1)];
            v30 = *(_DWORD *)v28;
            v29 = v28 + 32;
            v26 += ~(v26 >> 1);
            if (v30 < *(_DWORD *)v19)
              v18 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v17 = (v18 - a2) >> 5;
      }
      else
      {
        if (v9 >= 0)
          v16 = v9;
        else
          v16 = v9 + 1;
        v17 = v16 >> 1;
        v18 = &a2[32 * (v16 >> 1)];
        v19 = a2;
        if (a2 - a1 != v12)
        {
          v20 = (a2 - a1 - v12) >> 5;
          v19 = &a1[v12];
          do
          {
            v21 = v20 >> 1;
            v22 = &v19[32 * (v20 >> 1)];
            v24 = *(_DWORD *)v22;
            v23 = v22 + 32;
            v20 += ~(v20 >> 1);
            if (*(_DWORD *)v18 < v24)
              v20 = v21;
            else
              v19 = v23;
          }
          while (v20);
        }
        v25 = (v19 - a1 - v12) >> 5;
      }
      a5 = -(v25 + v13);
      v31 = v9 - v17;
      v32 = v25;
      v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(v19, a2, v18);
      v34 = v32;
      v35 = v33;
      if (v34 + v17 >= v9 - (v34 + v17) - v13)
      {
        v38 = v34;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(v33, v18, v42, a4, a5, v9 - v17, a7, v43);
        a2 = v19;
        v31 = v17;
        a8 = v43;
        a5 = v38;
        a3 = v35;
        a1 = v41;
      }
      else
      {
        v36 = v17;
        a8 = v43;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(&a1[v12], v19, v33, a4, v34, v36, a7, v43);
        a1 = v35;
        a2 = v18;
        a3 = v42;
      }
      v9 = v31;
    }
    while (v31);
  }
  return result;
}

_OWORD *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(_OWORD *result, _OWORD *a2, _OWORD *a3)
{
  __int128 v3;
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  unsigned int v8;
  __int128 v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  if (result != a2)
  {
    v3 = result[1];
    *a3 = *result;
    a3[1] = v3;
    v4 = result + 2;
    if (result + 2 != a2)
    {
      v5 = 0;
      v6 = a3;
      v7 = a3;
      do
      {
        v8 = *(_DWORD *)v7;
        v7 += 2;
        if (*(_DWORD *)v4 >= v8)
        {
          v13 = v4[1];
          *v7 = *v4;
          v7[1] = v13;
        }
        else
        {
          v9 = v6[1];
          *v7 = *v6;
          v7[1] = v9;
          v10 = a3;
          if (v6 != a3)
          {
            v11 = v5;
            while (1)
            {
              v10 = (_OWORD *)((char *)a3 + v11);
              if (*(_DWORD *)v4 >= *(_DWORD *)((char *)a3 + v11 - 32))
                break;
              *v10 = *(_OWORD *)((char *)a3 + v11 - 32);
              *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)a3 + v11 - 20);
              v11 -= 32;
              if (!v11)
              {
                v10 = a3;
                break;
              }
            }
          }
          v12 = *v4;
          *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)v4 + 12);
          *v10 = v12;
        }
        v4 += 2;
        v5 += 32;
        v6 = v7;
      }
      while (v4 != a2);
    }
  }
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        result = *(__n128 *)a3;
        v7 = *(_OWORD *)(a3 + 16);
        a3 += 32;
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v7;
        a5 += 32;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (*(_DWORD *)a3 >= *(_DWORD *)a1)
    {
      result = *(__n128 *)a1;
      v6 = *(_OWORD *)(a1 + 16);
      a1 += 32;
    }
    else
    {
      result = *(__n128 *)a3;
      v6 = *(_OWORD *)(a3 + 16);
      a3 += 32;
    }
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v6;
    a5 += 32;
  }
  if (a1 != a2)
  {
    v8 = 0;
    do
    {
      v9 = a5 + v8;
      result = *(__n128 *)(a1 + v8);
      v10 = *(_OWORD *)(a1 + v8 + 16);
      *(__n128 *)v9 = result;
      *(_OWORD *)(v9 + 16) = v10;
      v8 += 32;
    }
    while (a1 + v8 != a2);
  }
  return result;
}

_OWORD *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(_OWORD *result, _OWORD *a2, _OWORD *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  _OWORD *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v17 = 0;
      do
      {
        v18 = &__src[v17 * 16];
        v19 = result[v17 + 1];
        *(_OWORD *)v18 = result[v17];
        *((_OWORD *)v18 + 1) = v19;
        v17 += 2;
      }
      while (&result[v17] != a2);
      if (v17 * 16)
      {
        v20 = __src;
        while (a2 != a3)
        {
          if (*(_DWORD *)a2 >= *(_DWORD *)v20)
          {
            v22 = *(_OWORD *)v20;
            *(_OWORD *)((char *)result + 12) = *(_OWORD *)(v20 + 12);
            *result = v22;
            v20 += 32;
          }
          else
          {
            v21 = *a2;
            *(_OWORD *)((char *)result + 12) = *(_OWORD *)((char *)a2 + 12);
            *result = v21;
            a2 += 2;
          }
          result += 2;
          if (&__src[v17 * 16] == v20)
            return result;
        }
        return memmove(result, v20, __src - v20 + v17 * 16 - 4);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = &__src[v7 * 16];
      v9 = a2[v7 + 1];
      *(_OWORD *)v8 = a2[v7];
      *((_OWORD *)v8 + 1) = v9;
      v7 += 2;
    }
    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      v10 = &__src[v7 * 16];
      v11 = a3 - 2;
      while (a2 != result)
      {
        v12 = *((_DWORD *)v10 - 8);
        v13 = *((_DWORD *)a2 - 8);
        v14 = v12 >= v13;
        if (v12 >= v13)
          v15 = v10 - 32;
        else
          v15 = (char *)(a2 - 2);
        if (!v14)
          a2 -= 2;
        v16 = *(_OWORD *)v15;
        if (v14)
          v10 -= 32;
        *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)(v15 + 12);
        *v11 = v16;
        v11 -= 2;
        if (v10 == __src)
          return result;
      }
      v23 = 0;
      do
      {
        v24 = &v11[v23 / 0x10];
        v25 = *(_OWORD *)&v10[v23 - 32];
        *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)&v10[v23 - 20];
        *v24 = v25;
        v23 -= 32;
      }
      while (&v10[v23] != __src);
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(char *__src, char *a2, char *a3)
{
  char *v3;
  int64_t v5;
  _BYTE v7[32];
  _BYTE v8[32];

  v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 32 == a2)
    {
      *(_OWORD *)v7 = *(_OWORD *)__src;
      *(_OWORD *)&v7[16] = *((_OWORD *)__src + 1);
      v5 = a3 - a2;
      memmove(__src, a2, a3 - a2 - 4);
      v3 = &__src[v5];
      *(_OWORD *)v3 = *(_OWORD *)v7;
      *(_OWORD *)(v3 + 12) = *(_OWORD *)&v7[12];
    }
    else if (a2 + 32 == a3)
    {
      v3 = __src + 32;
      *(_OWORD *)v8 = *((_OWORD *)a3 - 2);
      *(_OWORD *)&v8[16] = *((_OWORD *)a3 - 1);
      if (a3 - 32 != __src)
        memmove(__src + 32, __src, a3 - 32 - __src - 4);
      *(_OWORD *)__src = *(_OWORD *)v8;
      *(_OWORD *)(__src + 12) = *(_OWORD *)&v8[12];
    }
    else
    {
      return std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(__src, a2, a3);
    }
  }
  return v3;
}

char *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  __int128 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  char *v22;
  _BYTE v24[32];
  _BYTE v25[32];

  v3 = (a2 - a1) >> 5;
  if (v3 == (a3 - a2) >> 5)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 32;
      v5 = a2 + 32;
      do
      {
        *(_OWORD *)v24 = *((_OWORD *)v4 - 2);
        *(_OWORD *)&v24[16] = *((_OWORD *)v4 - 1);
        v6 = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v4 - 2) = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v4 - 20) = v6;
        *((_OWORD *)v5 - 2) = *(_OWORD *)v24;
        *(_OWORD *)(v5 - 20) = *(_OWORD *)&v24[12];
        if (v4 == a2)
          break;
        v4 += 32;
        v7 = v5 == a3;
        v5 += 32;
      }
      while (!v7);
    }
  }
  else
  {
    v8 = (a3 - a2) >> 5;
    v9 = (a2 - a1) >> 5;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[32 * v9];
      do
      {
        v12 = *((_OWORD *)v11 - 2);
        v13 = *((_OWORD *)v11 - 1);
        v11 -= 32;
        *(_OWORD *)v25 = v12;
        *(_OWORD *)&v25[16] = v13;
        v14 = &v11[32 * v3];
        v15 = v11;
        do
        {
          v16 = v14;
          v17 = *(_OWORD *)v14;
          *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)(v14 + 12);
          *v15 = v17;
          v18 = a3 - v14;
          v14 += 32 * v3;
          v19 = __OFSUB__(v3, v18 >> 5);
          v21 = v3 - (v18 >> 5);
          v20 = (v21 < 0) ^ v19;
          v22 = &a1[32 * v21];
          if (!v20)
            v14 = v22;
          v15 = v16;
        }
        while (v14 != v11);
        *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)&v25[12];
        *v16 = *(_OWORD *)v25;
      }
      while (v11 != a1);
    }
    return &a1[32 * ((a3 - a2) >> 5)];
  }
  return a2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *,false>(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_DWORD *)(v4 + 16);
        if (v6 < *(_DWORD *)v4)
        {
          v10 = *(_QWORD *)(v4 + 20);
          v11 = *(_DWORD *)(v4 + 28);
          v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7)
              break;
            v8 = *(_DWORD *)(result + v7 - 16);
            v7 -= 16;
            if (v6 >= v8)
            {
              v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_DWORD *)v9 = v6;
          *(_QWORD *)(v9 + 4) = v10;
          *(_DWORD *)(v9 + 12) = v11;
        }
        v2 = v5 + 16;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(__int128 *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(_DWORD *)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,char const*> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v10;
  uint64_t v11;
  unsigned int v12;

  v2 = *a1;
  v11 = *(_QWORD *)(a1 + 1);
  v12 = a1[3];
  if (*a1 >= *(a2 - 4))
  {
    v5 = a1 + 4;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 += 4;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[4];
      v3 += 4;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 4);
      a2 -= 4;
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    v10 = *(_OWORD *)v3;
    *(_OWORD *)v3 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v10;
    do
    {
      v7 = v3[4];
      v3 += 4;
    }
    while (v2 >= v7);
    do
    {
      v8 = *(a2 - 4);
      a2 -= 4;
    }
    while (v2 < v8);
  }
  if (v3 - 4 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v3 - 1);
  *(v3 - 4) = v2;
  *(v3 - 1) = v12;
  *(_QWORD *)(v3 - 3) = v11;
  return v3;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer32,char const*> *,std::__less<void,void> &>(int *a1, _OWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  int v15;

  v2 = 0;
  v3 = *a1;
  v14 = *(_QWORD *)(a1 + 1);
  v15 = a1[3];
  do
  {
    v4 = a1[v2 + 4];
    v2 += 4;
  }
  while (v4 < v3);
  v5 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      v7 = *((_DWORD *)a2-- - 4);
    }
    while (v7 >= v3);
  }
  else
  {
    do
      v6 = *((_DWORD *)a2-- - 4);
    while (v6 >= v3);
  }
  v8 = (unint64_t)&a1[v2];
  if (v5 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_OWORD *)v8;
      *(_OWORD *)v8 = *v9;
      *v9 = v10;
      do
      {
        v11 = *(_DWORD *)(v8 + 16);
        v8 += 16;
      }
      while (v11 < v3);
      do
        v12 = *((_DWORD *)v9-- - 4);
      while (v12 >= v3);
    }
    while (v8 < (unint64_t)v9);
  }
  if ((int *)(v8 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
  *(_DWORD *)(v8 - 16) = v3;
  *(_DWORD *)(v8 - 4) = v15;
  *(_QWORD *)(v8 - 12) = v14;
  return v8 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 16);
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      v8 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((__int128 *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 < *v8)
    {
      v16 = *(_QWORD *)(v9 + 4);
      v17 = *(_DWORD *)(v9 + 12);
      v13 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v13 + 48) = *(_OWORD *)(a1 + v13 + 32);
        if (v13 == -32)
          break;
        v14 = *(_DWORD *)(a1 + v13 + 16);
        v13 -= 16;
        if (v12 >= v14)
        {
          v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(_DWORD *)v15 = v12;
      *(_QWORD *)(v15 + 4) = v16;
      *(_DWORD *)(v15 + 12) = v17;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (_DWORD *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(__int128 *a1, unsigned int *a2, unsigned int *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(a1, a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_DWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(__int128 *a1, unsigned int *a2, unsigned int *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u32[0] < a4->n128_u32[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u32[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_DWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *,TRangeValue<Pointer32,char const*> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[4 * v17 + 4];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && *v19 < v19[4])
          {
            v19 += 4;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 4;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v24;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>((uint64_t)a1, (uint64_t)(v19 + 4), a4, ((char *)(v19 + 4) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unsigned int *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[4];
        if (*v8 <= v11)
          v10 = v8[4];
        if (*v8 < v11)
        {
          v8 += 4;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        v17 = *(_QWORD *)(a4 + 1);
        v18 = a4[3];
        do
        {
          v13 = a4;
          a4 = v8;
          *(_OWORD *)v13 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (unsigned int *)(result + 16 * v14);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v15 = *v8;
            v7 = v14;
          }
          else
          {
            v15 = *v8;
            v16 = v8[4];
            if (*v8 <= v16)
              v15 = v8[4];
            if (*v8 >= v16)
              v7 = v14;
            else
              v8 += 4;
          }
        }
        while (v15 >= v12);
        *a4 = v12;
        a4[3] = v18;
        *(_QWORD *)(a4 + 1) = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer32,char const*> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  unsigned int v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    v7 = (_OWORD *)(a2 - 16);
    v8 = *(_DWORD *)(a2 - 16);
    if (*(_DWORD *)v6 < v8)
    {
      v10 = *(_QWORD *)(a2 - 12);
      v11 = *(_DWORD *)(a2 - 4);
      do
      {
        v9 = v7;
        v7 = v6;
        *v9 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 16 * v5);
      }
      while (*(_DWORD *)v6 < v8);
      *(_DWORD *)v7 = v8;
      *(_QWORD *)((char *)v7 + 4) = v10;
      *((_DWORD *)v7 + 3) = v11;
    }
  }
  return result;
}

char **adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer32>(char **result, _QWORD *a2)
{
  char *v2;
  char *v3;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  int64_t v15;

  v3 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v5 = result;
    do
    {
      v6 = a2[1];
      v7 = v6 - *a2;
      if (v6 == *a2)
        goto LABEL_12;
      v8 = *(_DWORD *)v3;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
      v10 = (_DWORD *)*a2;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[3 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v14 > v8)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == (_DWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        v15 = v2 - (v3 + 32);
        if (v2 != v3 + 32)
          result = (char **)memmove(v3, v3 + 32, v2 - (v3 + 32));
        v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(_QWORD *)v3 = *(v10 - 1) + v8;
        v3 += 32;
      }
    }
    while (v3 != v2);
  }
  return result;
}

char **adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer32>(char **result, _QWORD *a2)
{
  char *v2;
  char *v3;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  int64_t v15;

  v3 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v5 = result;
    do
    {
      v6 = a2[1];
      v7 = v6 - *a2;
      if (v6 == *a2)
        goto LABEL_12;
      v8 = *(_DWORD *)v3;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
      v10 = (_DWORD *)*a2;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[3 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v14 > v8)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == (_DWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        v15 = v2 - (v3 + 24);
        if (v2 != v3 + 24)
          result = (char **)memmove(v3, v3 + 24, v2 - (v3 + 24));
        v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(_QWORD *)v3 = *(v10 - 1) + v8;
        v3 += 24;
      }
    }
    while (v3 != v2);
  }
  return result;
}

void adjustSymbolsToMatchSegmentDeltas<Pointer32>(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v2 = *(unsigned int **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v3)
  {
    do
    {
      v6 = a2[1];
      v7 = v6 - *a2;
      if (v6 == *a2)
        goto LABEL_11;
      v8 = *v2;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
      v10 = (_DWORD *)*a2;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[3 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v14 > v8)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == (_DWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_11:
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,0>((uint64_t)(v2 + 24), v3, (uint64_t)v2);
        v3 = v15;
        v16 = *(_QWORD *)(a1 + 8);
        if (v16 != v15)
        {
          do
          {
            v17 = v16 - 96;
            v18 = (void **)(v16 - 40);
            std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v18);
            v16 = v17;
          }
          while (v17 != v3);
        }
        *(_QWORD *)(a1 + 8) = v3;
      }
      else
      {
        slideSymbolsByOffset<Pointer32>((uint64_t)v2, *(v10 - 1));
        v2 += 24;
        v3 = *(_QWORD *)(a1 + 8);
      }
    }
    while (v2 != (unsigned int *)v3);
  }
}

char **adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer32>,Pointer32>(char **result, _QWORD *a2)
{
  char *v2;
  char *v3;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  int64_t v15;

  v3 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v5 = result;
    do
    {
      v6 = a2[1];
      v7 = v6 - *a2;
      if (v6 == *a2)
        goto LABEL_12;
      v8 = *(_DWORD *)v3;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
      v10 = (_DWORD *)*a2;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[3 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v14 > v8)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == (_DWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        v15 = v2 - (v3 + 32);
        if (v2 != v3 + 32)
          result = (char **)memmove(v3, v3 + 32, v15 - 4);
        v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(_DWORD *)v3 = *(v10 - 1) + v8;
        v3 += 32;
      }
    }
    while (v3 != v2);
  }
  return result;
}

char *std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,false>(unint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  __int128 *v20;
  unsigned int v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  unsigned int v25;
  _OWORD *v26;
  unsigned int v27;
  _BYTE v28[32];
  _BYTE v29[32];
  _BYTE v30[28];

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[28];

  if (result != a2)
  {
    v2 = result + 32;
    if (result + 32 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_DWORD *)(v4 + 32);
        if (v6 < *(_DWORD *)v4)
        {
          *(_OWORD *)v10 = *(_OWORD *)(v4 + 36);
          *(_OWORD *)&v10[12] = *(_OWORD *)(v4 + 48);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 44) = *(_OWORD *)(result + v7 + 12);
            if (!v7)
              break;
            v7 -= 32;
            if (v6 >= *(_DWORD *)(v8 - 32))
            {
              v9 = result + v7 + 32;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_DWORD *)v9 = v6;
          *(_OWORD *)(v9 + 4) = *(_OWORD *)v10;
          *(_QWORD *)(v9 + 20) = *(_QWORD *)&v10[16];
        }
        v2 = v5 + 32;
        v3 += 32;
        v4 = v5;
      }
      while (v5 + 32 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(_OWORD *a1, int *a2, int *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];
  _BYTE v19[32];
  _BYTE v20[32];

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    if (v4 < v3)
    {
      *(_OWORD *)v16 = *a1;
      v5 = *a1;
      *(_OWORD *)&v16[16] = a1[1];
      v6 = *(_OWORD *)(a3 + 3);
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)((char *)a1 + 12) = v6;
      *(_OWORD *)a3 = v5;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v16[12];
      return 1;
    }
    *(_OWORD *)v19 = *a1;
    v11 = *a1;
    *(_OWORD *)&v19[16] = a1[1];
    v12 = *(_OWORD *)(a2 + 3);
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)((char *)a1 + 12) = v12;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v19[12];
    if (*a3 >= *a2)
      return 1;
    *(_OWORD *)v20 = *(_OWORD *)a2;
    v13 = *(_OWORD *)a2;
    *(_OWORD *)&v20[16] = *((_OWORD *)a2 + 1);
    v14 = *(_OWORD *)(a3 + 3);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 3) = v14;
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 3) = *(_OWORD *)&v20[12];
    return 2;
  }
  if (v4 < v3)
  {
    *(_OWORD *)v17 = *(_OWORD *)a2;
    v7 = *(_OWORD *)a2;
    *(_OWORD *)&v17[16] = *((_OWORD *)a2 + 1);
    v8 = *(_OWORD *)(a3 + 3);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 3) = v8;
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 3) = *(_OWORD *)&v17[12];
    if (*a2 >= *(_DWORD *)a1)
      return 1;
    *(_OWORD *)v18 = *a1;
    v9 = *a1;
    *(_OWORD *)&v18[16] = a1[1];
    v10 = *(_OWORD *)(a2 + 3);
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)((char *)a1 + 12) = v10;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v18[12];
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer32> *,std::__less<void,void> &>(unint64_t a1, _OWORD *a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  _BYTE v12[32];
  _BYTE v13[28];

  v2 = *(_DWORD *)a1;
  *(_OWORD *)v13 = *(_OWORD *)(a1 + 4);
  *(_OWORD *)&v13[12] = *(_OWORD *)(a1 + 16);
  if (*(_DWORD *)a1 >= *((_DWORD *)a2 - 8))
  {
    v5 = a1 + 32;
    do
    {
      v3 = v5;
      if (v5 >= (unint64_t)a2)
        break;
      v5 += 32;
    }
    while (v2 >= *(_DWORD *)v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = *(_DWORD *)(v3 + 32);
      v3 += 32;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t)a2)
  {
    do
    {
      v6 = *((_DWORD *)a2 - 8);
      a2 -= 2;
    }
    while (v2 < v6);
  }
  while (v3 < (unint64_t)a2)
  {
    *(_OWORD *)v12 = *(_OWORD *)v3;
    *(_OWORD *)&v12[16] = *(_OWORD *)(v3 + 16);
    v7 = *a2;
    *(_OWORD *)(v3 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)v3 = v7;
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v12[12];
    *a2 = *(_OWORD *)v12;
    do
    {
      v8 = *(_DWORD *)(v3 + 32);
      v3 += 32;
    }
    while (v2 >= v8);
    do
    {
      v9 = *((_DWORD *)a2 - 8);
      a2 -= 2;
    }
    while (v2 < v9);
  }
  if (v3 - 32 != a1)
  {
    v10 = *(_OWORD *)(v3 - 32);
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(v3 - 20);
    *(_OWORD *)a1 = v10;
  }
  *(_DWORD *)(v3 - 32) = v2;
  *(_QWORD *)(v3 - 12) = *(_QWORD *)&v13[16];
  *(_OWORD *)(v3 - 28) = *(_OWORD *)v13;
  return v3;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer32> *,std::__less<void,void> &>(int *a1, _OWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  _BYTE v16[32];
  _BYTE v17[28];

  v2 = 0;
  v3 = *a1;
  *(_OWORD *)v17 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)&v17[12] = *((_OWORD *)a1 + 1);
  do
  {
    v4 = a1[v2 + 8];
    v2 += 8;
  }
  while (v4 < v3);
  v5 = (unint64_t)&a1[v2];
  if (v2 == 8)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      v7 = *((_DWORD *)a2 - 8);
      a2 -= 2;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *((_DWORD *)a2 - 8);
      a2 -= 2;
    }
    while (v6 >= v3);
  }
  v8 = (unint64_t)&a1[v2];
  if (v5 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      *(_OWORD *)v16 = *(_OWORD *)v8;
      v10 = *(_OWORD *)v8;
      *(_OWORD *)&v16[16] = *(_OWORD *)(v8 + 16);
      v11 = *(_OWORD *)((char *)v9 + 12);
      *(_OWORD *)v8 = *v9;
      *(_OWORD *)(v8 + 12) = v11;
      *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)&v16[12];
      *v9 = v10;
      do
      {
        v12 = *(_DWORD *)(v8 + 32);
        v8 += 32;
      }
      while (v12 < v3);
      do
      {
        v13 = *((_DWORD *)v9 - 8);
        v9 -= 2;
      }
      while (v13 >= v3);
    }
    while (v8 < (unint64_t)v9);
  }
  if ((int *)(v8 - 32) != a1)
  {
    v14 = *(_OWORD *)(v8 - 32);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(v8 - 20);
    *(_OWORD *)a1 = v14;
  }
  *(_DWORD *)(v8 - 32) = v3;
  *(_QWORD *)(v8 - 12) = *(_QWORD *)&v17[16];
  *(_OWORD *)(v8 - 28) = *(_OWORD *)v17;
  return v8 - 32;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  _BYTE v18[28];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 32);
      if (*(_DWORD *)(a2 - 32) < *(_DWORD *)a1)
      {
        *(_OWORD *)v17 = *(_OWORD *)a1;
        v7 = *(_OWORD *)a1;
        *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 16);
        v8 = *(_OWORD *)(a2 - 20);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 12) = v8;
        *v6 = v7;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v17[12];
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)a1, (int *)(a1 + 32), (int *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a1 + 96), (__int128 *)(a2 - 32));
      return 1;
    default:
      v9 = (_DWORD *)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>((_OWORD *)a1, (int *)(a1 + 32), (int *)(a1 + 64));
      v10 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 < *v9)
    {
      *(_OWORD *)v18 = *(_OWORD *)(v10 + 4);
      *(_OWORD *)&v18[12] = *(_OWORD *)(v10 + 16);
      v14 = v11;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 96) = *(_OWORD *)(a1 + v14 + 64);
        *(_OWORD *)(v15 + 108) = *(_OWORD *)(a1 + v14 + 76);
        if (v14 == -64)
          break;
        v14 -= 32;
        if (v13 >= *(_DWORD *)(v15 + 32))
        {
          v16 = a1 + v14 + 96;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_DWORD *)v16 = v13;
      *(_OWORD *)(v16 + 4) = *(_OWORD *)v18;
      *(_QWORD *)(v16 + 20) = *(_QWORD *)&v18[16];
      if (++v12 == 8)
        return v10 + 32 == a2;
    }
    v9 = (_DWORD *)v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(_OWORD *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  _BYTE v17[32];

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(a1, (int *)a2, (int *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    *(_OWORD *)v15 = *a3;
    v9 = *a3;
    *(_OWORD *)&v15[16] = a3[1];
    v10 = *(__int128 *)((char *)a4 + 12);
    *a3 = *a4;
    *(__int128 *)((char *)a3 + 12) = v10;
    *a4 = v9;
    result = *(__n128 *)&v15[12];
    *(__int128 *)((char *)a4 + 12) = *(_OWORD *)&v15[12];
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      *(_OWORD *)v16 = *a2;
      v11 = *a2;
      *(_OWORD *)&v16[16] = a2[1];
      v12 = *(__int128 *)((char *)a3 + 12);
      *a2 = *a3;
      *(__int128 *)((char *)a2 + 12) = v12;
      *a3 = v11;
      result = *(__n128 *)&v16[12];
      *(__int128 *)((char *)a3 + 12) = *(_OWORD *)&v16[12];
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_OWORD *)v17 = *a1;
        v13 = *a1;
        *(_OWORD *)&v17[16] = a1[1];
        v14 = *(__int128 *)((char *)a2 + 12);
        *a1 = *a2;
        *(_OWORD *)((char *)a1 + 12) = v14;
        *a2 = v13;
        result = *(__n128 *)&v17[12];
        *(__int128 *)((char *)a2 + 12) = *(_OWORD *)&v17[12];
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  _BYTE v21[32];
  _BYTE v22[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    *(_OWORD *)v19 = *a4;
    v11 = *a4;
    *(_OWORD *)&v19[16] = a4[1];
    v12 = *(__int128 *)((char *)a5 + 12);
    *a4 = *a5;
    *(__int128 *)((char *)a4 + 12) = v12;
    *a5 = v11;
    result = *(__n128 *)&v19[12];
    *(__int128 *)((char *)a5 + 12) = *(_OWORD *)&v19[12];
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      *(_OWORD *)v20 = *a3;
      v13 = *a3;
      *(_OWORD *)&v20[16] = a3[1];
      v14 = *(__int128 *)((char *)a4 + 12);
      *a3 = *a4;
      *(__int128 *)((char *)a3 + 12) = v14;
      *a4 = v13;
      result = *(__n128 *)&v20[12];
      *(__int128 *)((char *)a4 + 12) = *(_OWORD *)&v20[12];
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        *(_OWORD *)v21 = *a2;
        v15 = *a2;
        *(_OWORD *)&v21[16] = a2[1];
        v16 = *(__int128 *)((char *)a3 + 12);
        *a2 = *a3;
        *(__int128 *)((char *)a2 + 12) = v16;
        *a3 = v15;
        result = *(__n128 *)&v21[12];
        *(__int128 *)((char *)a3 + 12) = *(_OWORD *)&v21[12];
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          *(_OWORD *)v22 = *a1;
          v17 = *a1;
          *(_OWORD *)&v22[16] = a1[1];
          v18 = *(__int128 *)((char *)a2 + 12);
          *a1 = *a2;
          *(__int128 *)((char *)a1 + 12) = v18;
          *a2 = v17;
          result = *(__n128 *)&v22[12];
          *(__int128 *)((char *)a2 + 12) = *(_OWORD *)&v22[12];
        }
      }
    }
  }
  return result;
}

_OWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  _OWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _BYTE v27[32];
  _BYTE v28[32];

  if ((_OWORD *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (unsigned int *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1)
        {
          *(_OWORD *)v27 = *v14;
          v15 = *v14;
          *(_OWORD *)&v27[16] = v14[1];
          v16 = *(_OWORD *)(a1 + 12);
          *v14 = *(_OWORD *)a1;
          *(_OWORD *)((char *)v14 + 12) = v16;
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)&v27[12];
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(a1, a4, v9, (unsigned int *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v17 = (unint64_t)v8 >> 5;
      do
      {
        v18 = 0;
        *(_OWORD *)v28 = *(_OWORD *)a1;
        *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 16);
        v19 = (_OWORD *)a1;
        do
        {
          v20 = (uint64_t)&v19[2 * v18 + 2];
          v21 = (2 * v18) | 1;
          v22 = 2 * v18 + 2;
          if (v22 < v17 && *(_DWORD *)v20 < *(_DWORD *)(v20 + 32))
          {
            v20 += 32;
            v21 = v22;
          }
          v23 = *(_OWORD *)v20;
          *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(v20 + 12);
          *v19 = v23;
          v19 = (_OWORD *)v20;
          v18 = v21;
        }
        while (v21 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        v6 -= 2;
        if ((_OWORD *)v20 == v6)
        {
          *(_OWORD *)(v20 + 12) = *(_OWORD *)&v28[12];
          *(_OWORD *)v20 = *(_OWORD *)v28;
        }
        else
        {
          v24 = *v6;
          *(_OWORD *)(v20 + 12) = *(_OWORD *)((char *)v6 + 12);
          *(_OWORD *)v20 = v24;
          *v6 = *(_OWORD *)v28;
          *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)&v28[12];
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(a1, v20 + 32, a4, (v20 + 32 - a1) >> 5);
        }
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  __n128 result;
  _BYTE v19[28];

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - a1;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - a1) >> 5)
    {
      v6 = v4 >> 4;
      v7 = (v4 >> 4) + 1;
      v8 = (unsigned int *)(a1 + 32 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[8];
        if (*v8 <= v11)
          v10 = v8[8];
        if (*v8 < v11)
        {
          v8 += 8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        *(_OWORD *)v19 = *(_OWORD *)(a4 + 1);
        *(_OWORD *)&v19[12] = *((_OWORD *)a4 + 1);
        do
        {
          v13 = a4;
          a4 = v8;
          v14 = *(_OWORD *)v8;
          *(_OWORD *)(v13 + 3) = *(_OWORD *)(v8 + 3);
          *(_OWORD *)v13 = v14;
          if (v5 < v7)
            break;
          v15 = (2 * v7) | 1;
          v8 = (unsigned int *)(a1 + 32 * v15);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v16 = *v8;
            v7 = v15;
          }
          else
          {
            v16 = *v8;
            v17 = v8[8];
            if (*v8 <= v17)
              v16 = v8[8];
            if (*v8 >= v17)
              v7 = v15;
            else
              v8 += 8;
          }
        }
        while (v16 >= v12);
        *a4 = v12;
        result = *(__n128 *)v19;
        *(_QWORD *)(a4 + 5) = *(_QWORD *)&v19[16];
        *(_OWORD *)(a4 + 1) = *(_OWORD *)v19;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer32> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  unsigned int v8;
  _OWORD *v9;
  __int128 v10;
  __n128 result;
  _BYTE v12[28];

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(a1 + 32 * (v4 >> 1));
    v7 = (_OWORD *)(a2 - 32);
    v8 = *(_DWORD *)(a2 - 32);
    if (*(_DWORD *)v6 < v8)
    {
      *(_OWORD *)v12 = *(_OWORD *)(a2 - 28);
      *(_OWORD *)&v12[12] = *(_OWORD *)(a2 - 16);
      do
      {
        v9 = v7;
        v7 = v6;
        v10 = *v6;
        *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)v6 + 12);
        *v9 = v10;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(a1 + 32 * v5);
      }
      while (*(_DWORD *)v6 < v8);
      *(_DWORD *)v7 = v8;
      result = *(__n128 *)v12;
      *(_OWORD *)((char *)v7 + 4) = *(_OWORD *)v12;
      *(_QWORD *)((char *)v7 + 20) = *(_QWORD *)&v12[16];
    }
  }
  return result;
}

BOOL _do_traw_segments_overlap(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;

  v1 = *(const void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v2)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v13, v1, v2, (v2 - (uint64_t)v1) >> 5);
  v3 = 126 - 2 * __clz((v14 - v13) >> 5);
  if (v14 == v13)
    v4 = 0;
  else
    v4 = v3;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSegmentRange *,false>((unint64_t)v13, (__int128 *)v14, (uint64_t)&v16, v4, 1);
  v5 = (v14 - v13) >> 5;
  v6 = 1;
  v7 = v13;
  while (v5 != v6)
  {
    v8 = *((_QWORD *)v7 + 1) + *(_QWORD *)v7;
    v9 = *((_QWORD *)v7 + 4);
    v7 += 32;
    ++v6;
    if (v8 > v9)
    {
      v10 = v6 - 2 < (unint64_t)(v5 - 1);
      goto LABEL_11;
    }
  }
  v10 = 0;
  v11 = 0;
  if (!v13)
    return v11;
LABEL_11:
  v14 = v13;
  operator delete(v13);
  return v10;
}

void sub_1B41333C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t intern_symbol_names_and_path<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(uint64_t a1, CSCppMMapStringTable *a2, DemanglingUtilities::CSCppReusableDemanglingBuffer *a3, _QWORD *a4, _QWORD *a5, int a6)
{
  unsigned int v12;
  char *v13;
  const char *v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  _BOOL4 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  int v31;
  char is_objc_method;
  int v33;
  unsigned int v34;
  unint64_t v35;
  __int128 v36;

  v12 = atomic_load((unsigned int *)(a1 + 20));
  if ((v12 & 0x400000) != 0)
  {
    v13 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>(a1);
    v14 = "";
  }
  else
  {
    v13 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::EphemeralMangledName>(a1);
    v14 = *(const char **)(a1 + 88);
  }
  *(_QWORD *)&v36 = v14;
  *((_QWORD *)&v36 + 1) = v13;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::find<std::pair<unsigned long,unsigned long>>(a4, &v36);
  if (result)
  {
    v16 = *(_DWORD *)(result + 32);
    LODWORD(v17) = *(_DWORD *)(result + 36);
    goto LABEL_30;
  }
  v16 = CSCppMMapStringTable::intern_with_prefix(a2, v14, v13);
  v18 = (const char *)atomic_load((unsigned int *)(a1 + 20));
  if (DemanglingUtilities::is_simple_mangled_name((DemanglingUtilities *)v13, v18))
  {
    v19 = (const char *)atomic_load((unsigned int *)(a1 + 20));
    v20 = DemanglingUtilities::simple_demangle(v13, v19);
  }
  else
  {
    if (a6)
    {
      v21 = DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(a3);
      v22 = CSCppAddressSet::sort(a3);
      v23 = a1;
      v24 = v21;
    }
    else
    {
      v25 = atomic_load((unsigned int *)(a1 + 20));
      if ((v25 & 0x20000) == 0)
        goto LABEL_17;
      v23 = a1;
      v24 = 0;
      v22 = 0;
    }
    v20 = (const char *)TRawSymbol<Pointer32>::_resolve_name(v23, v24, v22);
  }
  v26 = (char *)v20;
  if (v20)
  {
    if (v20 == v13 + 1 || v20 == v13)
    {
      v27 = v20 != v13;
      v28 = atomic_load((unsigned int *)(a1 + 20));
      if ((v28 & 0x80000) != 0)
      {
        v31 = 0;
      }
      else
      {
        v29 = atomic_load((unsigned int *)(a1 + 20));
        if (v29 < 0)
        {
          v31 = 1;
        }
        else
        {
          v30 = atomic_load((unsigned int *)(a1 + 20));
          v31 = HIWORD(v30) & 1;
        }
      }
      is_objc_method = TRawSymbol<Pointer32>::is_objc_method(a1);
      if (v26 == v13)
        v33 = v31;
      else
        v33 = 1;
      if ((is_objc_method & 1) != 0)
        v33 = v27;
      v17 = v16 + v33;
    }
    else
    {
      v17 = CSCppMMapStringTable::intern_with_prefix(a2, 0, v20);
    }
    goto LABEL_29;
  }
LABEL_17:
  v17 = 0;
LABEL_29:
  v35 = v16 | (unint64_t)(v17 << 32);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>&,std::pair<unsigned int,unsigned int>>((uint64_t)a4, &v36, &v36, &v35);
LABEL_30:
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  v34 = atomic_load((unsigned int *)(a1 + 20));
  if ((v34 & 0x80000000) != 0)
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
      result = intern_string<std::unordered_map<unsigned long,unsigned int>>((const char *)result, a2, a5);
      *(_DWORD *)(a1 + 16) = result;
    }
  }
  return result;
}

uint64_t write_symbols_and_inlined_functions<Pointer32>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t **v10;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL4 v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t **v35;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  __int128 v43;
  unint64_t *v44;
  int v45;

  v45 = 0;
  v44 = *a5;
  v43 = 0u;
  memset(v42, 0, sizeof(v42));
  v8 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    v10 = a5;
    do
    {
      if (!a6 || CSCppAddressSet::_intersects_range(a6, *(_QWORD *)v8, HIDWORD(*(_QWORD *)v8)))
      {
        v12 = children_index_for_symbol<Pointer32>(v8, &v45, a6);
        if (*(_QWORD *)(v8 + 64) != *(_QWORD *)(v8 + 56))
        {
          v41 = v8;
          std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(v42, &v41);
        }
        if (*v10 == v10[1])
        {
          v13 = *(_DWORD *)v8;
        }
        else
        {
          advance_delta_iterator_to_containing_range<Pointer32>((unsigned int *)v8, (uint64_t)v10, &v44);
          v13 = *(_DWORD *)v8 + *((_DWORD *)v44 + 4);
        }
        v14 = *(_DWORD *)(v8 + 4);
        *(_DWORD *)a2 = v13;
        *(_DWORD *)(a2 + 4) = v14;
        TRawSymbol<Pointer32>::is_objc_method(v8);
        v15 = atomic_load((unsigned int *)(v8 + 20));
        *(_DWORD *)(a2 + 8) = v15;
        *(_DWORD *)(a2 + 20) = v12;
        *(_QWORD *)(a2 + 12) = *(_QWORD *)(v8 + 8);
        a2 += 24;
      }
      v8 += 96;
    }
    while (v8 != v7);
    v16 = *((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v17 = v43;
      v35 = v10;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v42[0] + 1) + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF));
        v44 = *v10;
        v19 = *(_QWORD *)(v18 + 64) - *(_QWORD *)(v18 + 56);
        if (v19)
        {
          v20 = 0;
          v21 = v19 / 96;
          if ((unint64_t)(v19 / 96) <= 1)
            v22 = 1;
          else
            v22 = v19 / 96;
          v38 = v22;
          v23 = 96;
          v24 = a3;
          do
          {
            v25 = *(_QWORD *)(v18 + 56);
            v26 = (unsigned int *)(v25 + 96 * v20);
            if (!a6 || CSCppAddressSet::_intersects_range(a6, *(_QWORD *)v26, HIDWORD(*(_QWORD *)v26)))
            {
              v27 = children_index_for_symbol<Pointer32>(v25 + 96 * v20, &v45, a6);
              if (*(_QWORD *)(v25 + 96 * v20 + 64) != *(_QWORD *)(v25 + 96 * v20 + 56))
              {
                v41 = v25 + 96 * v20;
                std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(v42, &v41);
              }
              v40 = v24;
              if (a6)
              {
                v28 = v23;
                v29 = v20;
                do
                {
                  v30 = ++v29 >= v21;
                  if (v29 >= v21)
                    break;
                  v31 = CSCppAddressSet::_intersects_range(a6, *(_QWORD *)(*(_QWORD *)(v18 + 56) + v28), HIDWORD(*(_QWORD *)(*(_QWORD *)(v18 + 56) + v28)));
                  v28 += 96;
                }
                while (!v31);
              }
              else
              {
                v30 = v20 + 1 >= v21;
              }
              v10 = v35;
              if (*v35 == v35[1])
              {
                LODWORD(v33) = 0;
                v32 = v40;
              }
              else
              {
                advance_delta_iterator_to_containing_range<Pointer32>(v26, (uint64_t)v35, &v44);
                v32 = v40;
                v33 = v44[2];
              }
              CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer32>(v32, v33, a7, (uint64_t)v26, a4, v27, v30);
              v24 = v32 + 36;
            }
            ++v20;
            v23 += 96;
          }
          while (v20 != v38);
          v16 = *((_QWORD *)&v43 + 1);
          v17 = v43;
        }
        else
        {
          v24 = a3;
        }
        --v16;
        *(_QWORD *)&v43 = ++v17;
        *((_QWORD *)&v43 + 1) = v16;
        a3 = v24;
        if (v17 >= 0x400)
        {
          operator delete(**((void ***)&v42[0] + 1));
          v17 = v43 - 512;
          *((_QWORD *)&v42[0] + 1) += 8;
          *(_QWORD *)&v43 = v43 - 512;
          v16 = *((_QWORD *)&v43 + 1);
        }
      }
      while (v16);
    }
  }
  return std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100](v42);
}

void sub_1B41338E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MMapArchiveNameBuffer::MMapArchiveNameBuffer(MMapArchiveNameBuffer *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  _QWORD v15[6];

  *((_OWORD *)this + 1) = 0u;
  v2 = (char *)this + 16;
  *(_QWORD *)((char *)this + 29) = 0;
  *(_OWORD *)this = 0u;
  v3 = 32;
  do
  {
    v4 = operator new[]();
    v5 = v4;
    v7 = (uint64_t *)*((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
    if ((unint64_t)v7 >= v6)
    {
      v9 = ((uint64_t)v7 - *(_QWORD *)this) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v10 = v6 - *(_QWORD *)this;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v15[4] = v2;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v2, v12);
      else
        v13 = 0;
      v14 = (uint64_t *)&v13[8 * v9];
      v15[0] = v13;
      v15[1] = v14;
      v15[3] = &v13[8 * v12];
      *v14 = v5;
      v15[2] = v14 + 1;
      std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer((uint64_t *)this, v15);
      v8 = (_QWORD *)*((_QWORD *)this + 1);
      std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)v15);
    }
    else
    {
      *v7 = v4;
      v8 = v7 + 1;
      *((_QWORD *)this + 1) = v8;
    }
    *((_QWORD *)this + 1) = v8;
    --v3;
  }
  while (v3);
}

void sub_1B4133A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)&a9);
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;

  v1 = *(uint64_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    result = *v1;
    *v1 = 0;
    if (result)
      result = MEMORY[0x1B5E36928](result, 0x1000C8077774924);
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<char []>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<char []>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 8;
      result = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (result)
        result = MEMORY[0x1B5E36928](result, 0x1000C8077774924);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<char []>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::unique_ptr<char []>>::__base_destruct_at_end[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x1B5E36928](result, 0x1000C8077774924);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t intern_string<std::unordered_map<unsigned long,unsigned int>>(const char *a1, CSCppMMapStringTable *a2, _QWORD *a3)
{
  _QWORD *v6;
  unsigned int v8;
  const char *v9;

  v9 = a1;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::find<unsigned long long>(a3, (unint64_t *)&v9);
  if (v6)
    return *((unsigned int *)v6 + 6);
  v8 = CSCppMMapStringTable::intern_with_prefix(a2, 0, a1);
  v9 = a1;
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned int>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned int>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned int>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned int>>>::__emplace_unique_key_args<unsigned long,unsigned long,unsigned int &>((uint64_t)a3, (unint64_t *)&v9, &v9, &v8);
  return v8;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned int>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned int>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned int>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned int>>>::__emplace_unique_key_args<unsigned long,unsigned long,unsigned int &>(uint64_t a1, unint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1B4133FC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CSCppMMapStringTable::intern_with_prefix(CSCppMMapStringTable *this, const char *a2, const char *a3)
{
  const char *v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;

  if (a2)
    v5 = a2;
  else
    v5 = "";
  v6 = strlen(v5);
  v7 = strlen(a3);
  v8 = (char *)this + 8;
  v9 = *((unsigned int *)this + 10);
  MMapArchiveNameBuffer::stream_string_parts<std::string_view,std::string_view>((uint64_t)v8, v5, v6, a3, v7);
  return v9;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::find<std::pair<unsigned long,unsigned long>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = (*a2 + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = (*a2 + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v2 - 1);
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MMapArchiveNameBuffer::stream_string_parts<std::string_view,std::string_view>(uint64_t a1, const char *a2, unsigned int a3, const char *a4, unsigned int a5)
{
  MMapArchiveNameBuffer::_stream_string_with_length(a1, a2, a3);
  MMapArchiveNameBuffer::_stream_string_with_length(a1, a4, a5);
  return MMapArchiveNameBuffer::_stream_string_with_length(a1, "", 1u);
}

uint64_t MMapArchiveNameBuffer::_stream_string_with_length(uint64_t this, const char *a2, unsigned int a3)
{
  unsigned int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;

  if (!*(_BYTE *)(this + 36))
  {
    v3 = a3;
    v4 = a2;
    v5 = this;
    v6 = *(unsigned int *)(this + 28);
    v7 = 4096 - (int)v6 >= a3 ? a3 : (4096 - v6);
    memcpy((void *)(*(_QWORD *)(*(_QWORD *)this + 8 * *(unsigned int *)(this + 24)) + v6), a2, v7);
    this = MMapArchiveNameBuffer::_updateBufferIndexes(v5, v7);
    v8 = v3 - v7;
    if (v3 != (_DWORD)v7)
    {
      do
      {
        if (*(_BYTE *)(v5 + 36))
          break;
        v4 += v3 - v8;
        v9 = *(unsigned int *)(v5 + 28);
        v10 = 4096 - (int)v9 >= v8 ? v8 : (4096 - v9);
        memcpy((void *)(*(_QWORD *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 24)) + v9), v4, v10);
        this = MMapArchiveNameBuffer::_updateBufferIndexes(v5, v10);
        v3 = v8;
        v8 -= v10;
      }
      while (v8);
    }
  }
  return this;
}

uint64_t MMapArchiveNameBuffer::_updateBufferIndexes(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  _QWORD v15[6];

  v2 = this;
  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 28) += a2;
  if (__CFADD__(v3, a2))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15[0]) = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Mmap string table has reached its maximum size of 4G. Mmap archive will not be created\n", (uint8_t *)v15, 2u);
    }
    this = fwrite("Mmap string table has reached its maximum size of 4G. Mmap archive will not be created\n", 0x57uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    *(_BYTE *)(v2 + 36) = 1;
  }
  else if (!*(_BYTE *)(this + 36))
  {
    *(_DWORD *)(this + 32) = v3 + a2;
  }
  v4 = *(_DWORD *)(v2 + 24);
  if (*(_DWORD *)(v2 + 28) == 4096)
    *(_QWORD *)(v2 + 24) = ++v4;
  if (v4 == (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3)
  {
    v5 = operator new[]();
    this = v2 + 16;
    v6 = *(_QWORD *)(v2 + 16);
    v7 = *(uint64_t **)(v2 + 8);
    if ((unint64_t)v7 >= v6)
    {
      v9 = ((uint64_t)v7 - *(_QWORD *)v2) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v10 = v6 - *(_QWORD *)v2;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v15[4] = v2 + 16;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(this, v12);
      else
        v13 = 0;
      v14 = (uint64_t *)&v13[8 * v9];
      v15[0] = v13;
      v15[1] = v14;
      v15[3] = &v13[8 * v12];
      *v14 = v5;
      v15[2] = v14 + 1;
      std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer((uint64_t *)v2, v15);
      v8 = *(_QWORD **)(v2 + 8);
      this = std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)v15);
    }
    else
    {
      *v7 = v5;
      v8 = v7 + 1;
      *(_QWORD *)(v2 + 8) = v8;
    }
    *(_QWORD *)(v2 + 8) = v8;
  }
  return this;
}

void sub_1B41343D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>&,std::pair<unsigned int,unsigned int>>(uint64_t a1, _QWORD *a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = a2[1];
  v9 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2 && i[3] == v8)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = *a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_42:
    *v23 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4134618(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t recursive_intern_inlined_function_names_with_name_cache<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(uint64_t a1, CSCppMMapStringTable *a2, uint64_t a3, DemanglingUtilities::CSCppReusableDemanglingBuffer *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v15;

  v7 = *(_QWORD **)(a1 + 56);
  v8 = *(_QWORD **)(a1 + 64);
  if (v7 == v8)
    return 0;
  v15 = 0;
  do
  {
    if (!a3 || CSCppAddressSet::_intersects_range(a3, *v7, HIDWORD(*v7)))
    {
      intern_symbol_names_and_path<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>((uint64_t)v7, a2, a4, a5, a6, a7);
      v15 = v15
          + recursive_intern_inlined_function_names_with_name_cache<Pointer32,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(v7, a2, a3, a4, a5, a6, a7)+ 1;
    }
    v7 += 12;
  }
  while (v7 != v8);
  return v15;
}

uint64_t children_index_for_symbol<Pointer32>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t *v5;
  int v7;
  unint64_t v8;
  int *v9;
  uint64_t result;

  if (a3)
  {
    v4 = *(unint64_t **)(a1 + 56);
    v5 = *(unint64_t **)(a1 + 64);
    if (v4 == v5)
    {
      v7 = 0;
LABEL_10:
      v9 = &CSCppMMapSymbol::kNoChildren;
      goto LABEL_11;
    }
    v7 = 0;
    do
    {
      v8 = *v4;
      v4 += 12;
      v7 += CSCppAddressSet::_intersects_range(a3, v8, HIDWORD(v8));
    }
    while (v4 != v5);
  }
  else
  {
    v7 = -1431655765 * ((*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5);
  }
  v9 = a2;
  if (!v7)
    goto LABEL_10;
LABEL_11:
  result = *v9;
  *a2 += v7;
  return result;
}

unsigned int *advance_delta_iterator_to_containing_range<Pointer32>(unsigned int *result, uint64_t a2, unint64_t **a3)
{
  unsigned int *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  FILE *v11;
  unsigned int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v20 = *MEMORY[0x1E0C80C00];
  v4 = *result;
  v5 = *a3;
  v6 = *(_QWORD *)(a2 + 8);
  while (*v5 > v4 || v5[1] + *v5 < result[1] + v4)
  {
    v5 += 3;
    *a3 = v5;
    if ((unint64_t)v5 >= v6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v7 = atomic_load(v3 + 5);
        if ((v7 & 0x1C000) != 0)
          v8 = (const char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)v3, 0, 0);
        else
          v8 = "UNNAMED";
        v9 = *v3;
        v10 = v3[1];
        *(_DWORD *)buf = 136315650;
        v15 = v8;
        v16 = 2048;
        v17 = v9;
        v18 = 2048;
        v19 = v10;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n", buf, 0x20u);
      }
      v11 = (FILE *)*MEMORY[0x1E0C80C10];
      v12 = atomic_load(v3 + 5);
      if ((v12 & 0x1C000) != 0)
        v13 = (const char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)v3, 0, 0);
      else
        v13 = "UNNAMED";
      return (unsigned int *)fprintf(v11, "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n", v13, *v3, v3[1]);
    }
  }
  return result;
}

void std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B4134C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer32>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;

  v11 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a4 + a2;
  *(_DWORD *)(a1 + 4) = v11;
  TRawSymbol<Pointer32>::is_objc_method(a4);
  v12 = (unsigned int *)(a4 + 20);
  v13 = atomic_load((unsigned int *)(a4 + 20));
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 20) = a6;
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a4 + 8);
  if (a7)
    *(_DWORD *)(a1 + 8) = v13 | 0x40000000;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a4 + 16);
  v14 = atomic_load(v12);
  if (*(_QWORD *)(a4 + 40))
    v15 = v14 < 0;
  else
    v15 = 0;
  v16 = *(_DWORD *)(a4 + 48);
  if (!v15)
    v16 = 0;
  *(_DWORD *)(a1 + 28) = v16;
  v17 = atomic_load(v12);
  if (*(_QWORD *)(a4 + 40))
    v18 = v17 < 0;
  else
    v18 = 0;
  v19 = *(_DWORD *)(a4 + 52);
  if (!v18)
    v19 = 0;
  *(_DWORD *)(a1 + 32) = v19;
  return a1;
}

uint64_t std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        result = strcmp((const char *)(*a3 + *(unsigned int *)(v20 + 12)), (const char *)(*a3 + *(unsigned int *)(*v9 + 12)));
        if ((result & 0x80000000) != 0)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((strcmp((const char *)(*a3 + *(unsigned int *)(*(v9 - 1) + 12)), (const char *)(*a3 + *(unsigned int *)(*v9 + 12))) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>((char *)v9, (char *)a2, (char *)a2, a3);
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t *v13;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v6 = 0;
      v7 = *a3;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v11 = (const char *)(v7 + *(unsigned int *)(v9 + 12));
        result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 12)));
        if ((result & 0x80000000) != 0)
        {
          v12 = v6;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + 8) = v10;
            if (!v12)
              break;
            v10 = *(uint64_t *)((char *)v4 + v12 - 8);
            result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 12)));
            v12 -= 8;
            if ((result & 0x80000000) == 0)
            {
              v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v9;
        }
        v5 = v8 + 1;
        v6 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v6 = *a3;
      do
      {
        v8 = *v4;
        v7 = v4[1];
        v4 = v5;
        v9 = (const char *)(v6 + *(unsigned int *)(v7 + 12));
        result = (_QWORD *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 12)));
        if ((result & 0x80000000) != 0)
        {
          v10 = v4;
          do
          {
            *v10 = v8;
            v8 = *(v10 - 2);
            result = (_QWORD *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 12)));
            --v10;
          }
          while ((result & 0x80000000) != 0);
          *v10 = v7;
        }
        v5 = v4 + 1;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *a2;
  v8 = *a1;
  v9 = *a4;
  v10 = (const char *)(*a4 + *(unsigned int *)(*a2 + 12));
  v11 = (const char *)(*a4 + *(unsigned int *)(*a1 + 12));
  v12 = strcmp(v10, v11);
  v13 = *a3;
  v14 = strcmp((const char *)(v9 + *(unsigned int *)(*a3 + 12)), v10);
  if (v12 < 0)
  {
    if (v14 < 0)
    {
      *a1 = v13;
      *a3 = v8;
      return 1;
    }
    *a1 = v7;
    *a2 = v8;
    v17 = *a3;
    if ((strcmp((const char *)(v9 + *(unsigned int *)(*a3 + 12)), v11) & 0x80000000) == 0)
      return 1;
    *a2 = v17;
    *a3 = v8;
    return 2;
  }
  if (v14 < 0)
  {
    *a2 = v13;
    *a3 = v7;
    v15 = *a2;
    v16 = *a1;
    if ((strcmp((const char *)(v9 + *(unsigned int *)(*a2 + 12)), (const char *)(v9 + *(unsigned int *)(*a1 + 12))) & 0x80000000) == 0)
      return 1;
    *a1 = v15;
    *a2 = v16;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  v5 = *a1;
  v6 = *a3;
  v7 = (const char *)(*a3 + *(unsigned int *)(*a1 + 12));
  if (strcmp(v7, (const char *)(*a3 + *(unsigned int *)(*(a2 - 1) + 12))) < 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v9 + 12))) & 0x80000000) == 0);
  }
  else
  {
    v10 = a1 + 1;
    do
    {
      v8 = v10;
      if (v10 >= v3)
        break;
      ++v10;
    }
    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(*v8 + 12))) & 0x80000000) == 0);
  }
  if (v8 < v3)
  {
    do
      v11 = *--v3;
    while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v11 + 12))) < 0);
  }
  if (v8 < v3)
  {
    v12 = *v8;
    v13 = *v3;
    do
    {
      *v8 = v13;
      *v3 = v12;
      do
      {
        v14 = v8[1];
        ++v8;
        v12 = v14;
      }
      while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v14 + 12))) & 0x80000000) == 0);
      do
      {
        v15 = *--v3;
        v13 = v15;
      }
      while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v15 + 12))) < 0);
    }
    while (v8 < v3);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v5;
  return v8;
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = 0;
  v6 = *a1;
  v7 = *a3;
  v8 = (const char *)(*a3 + *(unsigned int *)(*a1 + 12));
  do
    v9 = a1[++v5];
  while (strcmp((const char *)(v7 + *(unsigned int *)(v9 + 12)), v8) < 0);
  v10 = (unint64_t)&a1[v5];
  v11 = &a1[v5 - 1];
  if (v5 == 1)
  {
    do
    {
      if (v10 >= (unint64_t)a2)
        break;
      v13 = *--a2;
    }
    while ((strcmp((const char *)(v7 + *(unsigned int *)(v13 + 12)), v8) & 0x80000000) == 0);
  }
  else
  {
    do
      v12 = *--a2;
    while ((strcmp((const char *)(v7 + *(unsigned int *)(v12 + 12)), v8) & 0x80000000) == 0);
  }
  if (v10 < (unint64_t)a2)
  {
    v14 = *a2;
    v15 = &a1[v5];
    v16 = a2;
    do
    {
      *v15 = v14;
      *v16 = v9;
      do
      {
        v17 = v15[1];
        ++v15;
        v9 = v17;
      }
      while (strcmp((const char *)(v7 + *(unsigned int *)(v17 + 12)), v8) < 0);
      do
      {
        v18 = *--v16;
        v14 = v18;
      }
      while ((strcmp((const char *)(v7 + *(unsigned int *)(v18 + 12)), v8) & 0x80000000) == 0);
    }
    while (v15 < v16);
    v11 = v15 - 1;
  }
  if (v11 != a1)
    *a1 = *v11;
  *v11 = v6;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 12)), (const char *)(*a3 + *(unsigned int *)(*a1 + 12))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 12));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12))) < 0)
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12)));
        v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *a5;
  result = strcmp((const char *)(v12 + *(unsigned int *)(*a4 + 12)), (const char *)(v12 + *(unsigned int *)(*a3 + 12)));
  if ((result & 0x80000000) != 0)
  {
    *a3 = v10;
    *a4 = v11;
    v14 = *a3;
    v15 = *a2;
    result = strcmp((const char *)(v12 + *(unsigned int *)(*a3 + 12)), (const char *)(v12 + *(unsigned int *)(*a2 + 12)));
    if ((result & 0x80000000) != 0)
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      result = strcmp((const char *)(v12 + *(unsigned int *)(*a2 + 12)), (const char *)(v12 + *(unsigned int *)(*a1 + 12)));
      if ((result & 0x80000000) != 0)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  v14 = *a6;
  result = strcmp((const char *)(v14 + *(unsigned int *)(*a5 + 12)), (const char *)(v14 + *(unsigned int *)(*a4 + 12)));
  if ((result & 0x80000000) != 0)
  {
    *a4 = v12;
    *a5 = v13;
    v16 = *a4;
    v17 = *a3;
    result = strcmp((const char *)(v14 + *(unsigned int *)(*a4 + 12)), (const char *)(v14 + *(unsigned int *)(*a3 + 12)));
    if ((result & 0x80000000) != 0)
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      result = strcmp((const char *)(v14 + *(unsigned int *)(*a3 + 12)), (const char *)(v14 + *(unsigned int *)(*a2 + 12)));
      if ((result & 0x80000000) != 0)
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        result = strcmp((const char *)(v14 + *(unsigned int *)(*a2 + 12)), (const char *)(v14 + *(unsigned int *)(*a1 + 12)));
        if ((result & 0x80000000) != 0)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>(char *a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_QWORD *)v14;
        v16 = *(_QWORD *)a1;
        if (strcmp((const char *)(*a4 + *(unsigned int *)(*(_QWORD *)v14 + 12)), (const char *)(*a4 + *(unsigned int *)(*(_QWORD *)a1 + 12))) < 0)
        {
          *(_QWORD *)v14 = v16;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v17 = (unint64_t)v8 >> 3;
      v18 = a2 - 8;
      do
      {
        v19 = *(_QWORD *)a1;
        v20 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a4, v17);
        if (v18 == v20)
        {
          *(_QWORD *)v20 = v19;
        }
        else
        {
          *(_QWORD *)v20 = *(_QWORD *)v18;
          *(_QWORD *)v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, (uint64_t)(v20 + 8), a4, (v20 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  char *__s2;

  if (a3 >= 2)
  {
    v4 = a4;
    v5 = result;
    if ((uint64_t)((unint64_t)(a3 - 2) >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v22 = (unint64_t)(a3 - 2) >> 1;
      v7 = ((uint64_t)a4 - result) >> 2;
      v8 = v7 + 1;
      v9 = (_QWORD *)(result + 8 * (v7 + 1));
      v10 = v7 + 2;
      v11 = *v9;
      if (v7 + 2 >= a3)
      {
        v13 = *a2;
      }
      else
      {
        v12 = v9[1];
        v13 = *a2;
        if (strcmp((const char *)(*a2 + *(unsigned int *)(v11 + 12)), (const char *)(*a2 + *(unsigned int *)(v12 + 12))) < 0)
        {
          v11 = v12;
          ++v9;
          v8 = v10;
        }
      }
      v14 = *v4;
      __s2 = (char *)(v13 + *(unsigned int *)(*v4 + 12));
      result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 12)), __s2);
      v15 = v22;
      if ((result & 0x80000000) == 0)
      {
        v21 = v14;
        do
        {
          v16 = v9;
          *v4 = v11;
          if (v15 < v8)
            break;
          v17 = (2 * v8) | 1;
          v9 = (_QWORD *)(v5 + 8 * v17);
          v11 = *v9;
          if (2 * v8 + 2 < a3)
          {
            v18 = v5;
            v19 = v9[1];
            v20 = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 12)), (const char *)(v13 + *(unsigned int *)(v19 + 12)));
            if (v20 < 0)
              v11 = v19;
            v5 = v18;
            v15 = v22;
            if (v20 < 0)
            {
              ++v9;
              v17 = 2 * v8 + 2;
            }
          }
          result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 12)), __s2);
          v4 = v16;
          v8 = v17;
        }
        while ((result & 0x80000000) == 0);
        *v16 = v21;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  v8 = *a2;
  do
  {
    v9 = &a1[v5];
    v12 = v9[1];
    v10 = v9 + 1;
    v11 = v12;
    v13 = (2 * v5) | 1;
    v14 = 2 * v5 + 2;
    if (v14 < a3)
    {
      v15 = v10[1];
      if (strcmp((const char *)(v8 + *(unsigned int *)(v11 + 12)), (const char *)(v8 + *(unsigned int *)(v15 + 12))) < 0)
      {
        v11 = v15;
        ++v10;
        v13 = v14;
      }
    }
    *a1 = v11;
    a1 = v10;
    v5 = v13;
  }
  while (v13 <= v7);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = (_QWORD *)(result + 8 * (v4 >> 1));
    v8 = (_QWORD *)(a2 - 8);
    v9 = *(_QWORD *)(a2 - 8);
    v10 = *v7;
    v11 = *a3;
    v12 = (const char *)(*a3 + *(unsigned int *)(v9 + 12));
    result = strcmp((const char *)(*a3 + *(unsigned int *)(*v7 + 12)), v12);
    if ((result & 0x80000000) != 0)
    {
      do
      {
        v13 = v7;
        *v8 = v10;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (_QWORD *)(v5 + 8 * v6);
        v10 = *v7;
        result = strcmp((const char *)(v11 + *(unsigned int *)(*v7 + 12)), v12);
        v8 = v13;
      }
      while ((result & 0x80000000) != 0);
      *v13 = v9;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        result = strcmp((const char *)(*a3 + *(unsigned int *)(v20 + 16)), (const char *)(*a3 + *(unsigned int *)(*v9 + 16)));
        if ((result & 0x80000000) != 0)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((strcmp((const char *)(*a3 + *(unsigned int *)(*(v9 - 1) + 16)), (const char *)(*a3 + *(unsigned int *)(*v9 + 16))) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>((char *)v9, (char *)a2, (char *)a2, a3);
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t *v13;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v6 = 0;
      v7 = *a3;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v11 = (const char *)(v7 + *(unsigned int *)(v9 + 16));
        result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 16)));
        if ((result & 0x80000000) != 0)
        {
          v12 = v6;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + 8) = v10;
            if (!v12)
              break;
            v10 = *(uint64_t *)((char *)v4 + v12 - 8);
            result = (uint64_t *)strcmp(v11, (const char *)(v7 + *(unsigned int *)(v10 + 16)));
            v12 -= 8;
            if ((result & 0x80000000) == 0)
            {
              v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v9;
        }
        v5 = v8 + 1;
        v6 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v6 = *a3;
      do
      {
        v8 = *v4;
        v7 = v4[1];
        v4 = v5;
        v9 = (const char *)(v6 + *(unsigned int *)(v7 + 16));
        result = (_QWORD *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 16)));
        if ((result & 0x80000000) != 0)
        {
          v10 = v4;
          do
          {
            *v10 = v8;
            v8 = *(v10 - 2);
            result = (_QWORD *)strcmp(v9, (const char *)(v6 + *(unsigned int *)(v8 + 16)));
            --v10;
          }
          while ((result & 0x80000000) != 0);
          *v10 = v7;
        }
        v5 = v4 + 1;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *a2;
  v8 = *a1;
  v9 = *a4;
  v10 = (const char *)(*a4 + *(unsigned int *)(*a2 + 16));
  v11 = (const char *)(*a4 + *(unsigned int *)(*a1 + 16));
  v12 = strcmp(v10, v11);
  v13 = *a3;
  v14 = strcmp((const char *)(v9 + *(unsigned int *)(*a3 + 16)), v10);
  if (v12 < 0)
  {
    if (v14 < 0)
    {
      *a1 = v13;
      *a3 = v8;
      return 1;
    }
    *a1 = v7;
    *a2 = v8;
    v17 = *a3;
    if ((strcmp((const char *)(v9 + *(unsigned int *)(*a3 + 16)), v11) & 0x80000000) == 0)
      return 1;
    *a2 = v17;
    *a3 = v8;
    return 2;
  }
  if (v14 < 0)
  {
    *a2 = v13;
    *a3 = v7;
    v15 = *a2;
    v16 = *a1;
    if ((strcmp((const char *)(v9 + *(unsigned int *)(*a2 + 16)), (const char *)(v9 + *(unsigned int *)(*a1 + 16))) & 0x80000000) == 0)
      return 1;
    *a1 = v15;
    *a2 = v16;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  v5 = *a1;
  v6 = *a3;
  v7 = (const char *)(*a3 + *(unsigned int *)(*a1 + 16));
  if (strcmp(v7, (const char *)(*a3 + *(unsigned int *)(*(a2 - 1) + 16))) < 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v9 + 16))) & 0x80000000) == 0);
  }
  else
  {
    v10 = a1 + 1;
    do
    {
      v8 = v10;
      if (v10 >= v3)
        break;
      ++v10;
    }
    while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(*v8 + 16))) & 0x80000000) == 0);
  }
  if (v8 < v3)
  {
    do
      v11 = *--v3;
    while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v11 + 16))) < 0);
  }
  if (v8 < v3)
  {
    v12 = *v8;
    v13 = *v3;
    do
    {
      *v8 = v13;
      *v3 = v12;
      do
      {
        v14 = v8[1];
        ++v8;
        v12 = v14;
      }
      while ((strcmp(v7, (const char *)(v6 + *(unsigned int *)(v14 + 16))) & 0x80000000) == 0);
      do
      {
        v15 = *--v3;
        v13 = v15;
      }
      while (strcmp(v7, (const char *)(v6 + *(unsigned int *)(v15 + 16))) < 0);
    }
    while (v8 < v3);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v5;
  return v8;
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = 0;
  v6 = *a1;
  v7 = *a3;
  v8 = (const char *)(*a3 + *(unsigned int *)(*a1 + 16));
  do
    v9 = a1[++v5];
  while (strcmp((const char *)(v7 + *(unsigned int *)(v9 + 16)), v8) < 0);
  v10 = (unint64_t)&a1[v5];
  v11 = &a1[v5 - 1];
  if (v5 == 1)
  {
    do
    {
      if (v10 >= (unint64_t)a2)
        break;
      v13 = *--a2;
    }
    while ((strcmp((const char *)(v7 + *(unsigned int *)(v13 + 16)), v8) & 0x80000000) == 0);
  }
  else
  {
    do
      v12 = *--a2;
    while ((strcmp((const char *)(v7 + *(unsigned int *)(v12 + 16)), v8) & 0x80000000) == 0);
  }
  if (v10 < (unint64_t)a2)
  {
    v14 = *a2;
    v15 = &a1[v5];
    v16 = a2;
    do
    {
      *v15 = v14;
      *v16 = v9;
      do
      {
        v17 = v15[1];
        ++v15;
        v9 = v17;
      }
      while (strcmp((const char *)(v7 + *(unsigned int *)(v17 + 16)), v8) < 0);
      do
      {
        v18 = *--v16;
        v14 = v18;
      }
      while ((strcmp((const char *)(v7 + *(unsigned int *)(v18 + 16)), v8) & 0x80000000) == 0);
    }
    while (v15 < v16);
    v11 = v15 - 1;
  }
  if (v11 != a1)
    *a1 = *v11;
  *v11 = v6;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 16)), (const char *)(*a3 + *(unsigned int *)(*a1 + 16))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 16));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16))) < 0)
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16)));
        v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *a5;
  result = strcmp((const char *)(v12 + *(unsigned int *)(*a4 + 16)), (const char *)(v12 + *(unsigned int *)(*a3 + 16)));
  if ((result & 0x80000000) != 0)
  {
    *a3 = v10;
    *a4 = v11;
    v14 = *a3;
    v15 = *a2;
    result = strcmp((const char *)(v12 + *(unsigned int *)(*a3 + 16)), (const char *)(v12 + *(unsigned int *)(*a2 + 16)));
    if ((result & 0x80000000) != 0)
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      result = strcmp((const char *)(v12 + *(unsigned int *)(*a2 + 16)), (const char *)(v12 + *(unsigned int *)(*a1 + 16)));
      if ((result & 0x80000000) != 0)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  v14 = *a6;
  result = strcmp((const char *)(v14 + *(unsigned int *)(*a5 + 16)), (const char *)(v14 + *(unsigned int *)(*a4 + 16)));
  if ((result & 0x80000000) != 0)
  {
    *a4 = v12;
    *a5 = v13;
    v16 = *a4;
    v17 = *a3;
    result = strcmp((const char *)(v14 + *(unsigned int *)(*a4 + 16)), (const char *)(v14 + *(unsigned int *)(*a3 + 16)));
    if ((result & 0x80000000) != 0)
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      result = strcmp((const char *)(v14 + *(unsigned int *)(*a3 + 16)), (const char *)(v14 + *(unsigned int *)(*a2 + 16)));
      if ((result & 0x80000000) != 0)
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        result = strcmp((const char *)(v14 + *(unsigned int *)(*a2 + 16)), (const char *)(v14 + *(unsigned int *)(*a1 + 16)));
        if ((result & 0x80000000) != 0)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>(char *a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_QWORD *)v14;
        v16 = *(_QWORD *)a1;
        if (strcmp((const char *)(*a4 + *(unsigned int *)(*(_QWORD *)v14 + 16)), (const char *)(*a4 + *(unsigned int *)(*(_QWORD *)a1 + 16))) < 0)
        {
          *(_QWORD *)v14 = v16;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v17 = (unint64_t)v8 >> 3;
      v18 = a2 - 8;
      do
      {
        v19 = *(_QWORD *)a1;
        v20 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a4, v17);
        if (v18 == v20)
        {
          *(_QWORD *)v20 = v19;
        }
        else
        {
          *(_QWORD *)v20 = *(_QWORD *)v18;
          *(_QWORD *)v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>((uint64_t)a1, (uint64_t)(v20 + 8), a4, (v20 + 8 - a1) >> 3);
        }
        v18 -= 8;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  char *__s2;

  if (a3 >= 2)
  {
    v4 = a4;
    v5 = result;
    if ((uint64_t)((unint64_t)(a3 - 2) >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v22 = (unint64_t)(a3 - 2) >> 1;
      v7 = ((uint64_t)a4 - result) >> 2;
      v8 = v7 + 1;
      v9 = (_QWORD *)(result + 8 * (v7 + 1));
      v10 = v7 + 2;
      v11 = *v9;
      if (v7 + 2 >= a3)
      {
        v13 = *a2;
      }
      else
      {
        v12 = v9[1];
        v13 = *a2;
        if (strcmp((const char *)(*a2 + *(unsigned int *)(v11 + 16)), (const char *)(*a2 + *(unsigned int *)(v12 + 16))) < 0)
        {
          v11 = v12;
          ++v9;
          v8 = v10;
        }
      }
      v14 = *v4;
      __s2 = (char *)(v13 + *(unsigned int *)(*v4 + 16));
      result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 16)), __s2);
      v15 = v22;
      if ((result & 0x80000000) == 0)
      {
        v21 = v14;
        do
        {
          v16 = v9;
          *v4 = v11;
          if (v15 < v8)
            break;
          v17 = (2 * v8) | 1;
          v9 = (_QWORD *)(v5 + 8 * v17);
          v11 = *v9;
          if (2 * v8 + 2 < a3)
          {
            v18 = v5;
            v19 = v9[1];
            v20 = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 16)), (const char *)(v13 + *(unsigned int *)(v19 + 16)));
            if (v20 < 0)
              v11 = v19;
            v5 = v18;
            v15 = v22;
            if (v20 < 0)
            {
              ++v9;
              v17 = 2 * v8 + 2;
            }
          }
          result = strcmp((const char *)(v13 + *(unsigned int *)(v11 + 16)), __s2);
          v4 = v16;
          v8 = v17;
        }
        while ((result & 0x80000000) == 0);
        *v16 = v21;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  v8 = *a2;
  do
  {
    v9 = &a1[v5];
    v12 = v9[1];
    v10 = v9 + 1;
    v11 = v12;
    v13 = (2 * v5) | 1;
    v14 = 2 * v5 + 2;
    if (v14 < a3)
    {
      v15 = v10[1];
      if (strcmp((const char *)(v8 + *(unsigned int *)(v11 + 16)), (const char *)(v8 + *(unsigned int *)(v15 + 16))) < 0)
      {
        v11 = v15;
        ++v10;
        v13 = v14;
      }
    }
    *a1 = v11;
    a1 = v10;
    v5 = v13;
  }
  while (v13 <= v7);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = (_QWORD *)(result + 8 * (v4 >> 1));
    v8 = (_QWORD *)(a2 - 8);
    v9 = *(_QWORD *)(a2 - 8);
    v10 = *v7;
    v11 = *a3;
    v12 = (const char *)(*a3 + *(unsigned int *)(v9 + 16));
    result = strcmp((const char *)(*a3 + *(unsigned int *)(*v7 + 16)), v12);
    if ((result & 0x80000000) != 0)
    {
      do
      {
        v13 = v7;
        *v8 = v10;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (_QWORD *)(v5 + 8 * v6);
        v10 = *v7;
        result = strcmp((const char *)(v11 + *(unsigned int *)(*v7 + 16)), v12);
        v8 = v13;
      }
      while ((result & 0x80000000) != 0);
      *v13 = v9;
    }
  }
  return result;
}

uint64_t CSCppTRawSymbolNameGuard<Pointer32>::~CSCppTRawSymbolNameGuard(uint64_t a1)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      v4 = *v3;
      v5 = v3[1];
      while (v4 != v5)
      {
        TRawSymbol<Pointer32>::rollback_mmap_archive_naming(v4);
        v4 += 96;
      }
    }
  }
  return a1;
}

uint64_t TRawSymbol<Pointer32>::rollback_mmap_archive_naming(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v1 = result;
  v2 = *(_QWORD *)(result + 56);
  v3 = *(_QWORD *)(result + 64);
  while (v2 != v3)
  {
    result = TRawSymbol<Pointer32>::rollback_mmap_archive_naming(v2);
    v2 += 96;
  }
  v4 = (unsigned int *)(v1 + 20);
  v5 = atomic_load((unsigned int *)(v1 + 20));
  v6 = atomic_load((unsigned int *)(v1 + 20));
  if ((v6 & 0x40000) == 0)
  {
    v5 &= ~0x20000u;
    *(_QWORD *)(v1 + 24) = *(_QWORD *)(v1 + 32);
  }
  v7 = atomic_load(v4);
  if ((v7 & 0x800000) == 0)
    v5 &= 0xFEBFFFFB;
  atomic_store(v5, v4);
  return result;
}

uint64_t create_traw_symbol_owner_data_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  void **v21;
  _OWORD *v22;
  _OWORD *v23;
  char v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int stabs_data_from;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  char v40;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  unint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD *v51;
  void **v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  _OWORD *v60;
  uint64_t v61;
  void *v62;
  _OWORD *v63;
  uint64_t v64;
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  _BYTE *v71;
  uint64_t v72;
  CSCppTaskMemory *v73;
  CSCppDsymData *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  __int128 buf;
  _QWORD v83[6];

  v83[5] = *MEMORY[0x1E0C80C00];
  v81 = a2;
  v3 = operator new();
  v4 = v3;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_QWORD *)(v3 + 8) = 1;
  *(_QWORD *)(v3 + 16) = 850045863;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 68) = 0u;
  *(_QWORD *)v3 = &off_1E6775758;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 128) = 1065353216;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_QWORD *)(v3 + 248) = 0;
  *(_DWORD *)(v3 + 312) = 1065353216;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_DWORD *)(v3 + 352) = 1065353216;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_BYTE *)(v3 + 408) = 0;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 392) = 0u;
  *(_OWORD *)(v3 + 360) = 0u;
  *(_DWORD *)(v3 + 448) = 1065353216;
  *(_OWORD *)(v3 + 456) = 0u;
  *(_OWORD *)(v3 + 472) = 0u;
  *(_DWORD *)(v3 + 488) = 1065353216;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v3 + 504) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  if (v6 - v5 == 32)
  {
    v7 = atomic_load((unsigned int *)(v3 + 12));
    atomic_store(v7 | 0x100, (unsigned int *)(v3 + 12));
  }
  v8 = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  v80 = 0;
  v75 = 0;
  v76 = 0;
  sod_header_from_local_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, (_QWORD *)v4, &v77, (uint64_t)&v75, &buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v10 = v80;
  v80 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = buf;
    *(_QWORD *)&buf = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v9 = v80;
  }
  if (v9)
    goto LABEL_8;
  sod_header_from_on_disk_binary<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v4, (uint64_t *)&buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v14 = v80;
  v80 = v9;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = buf;
    *(_QWORD *)&buf = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v9 = v80;
  }
  if (v9)
  {
    v13 = 0;
LABEL_18:
    v74 = 0;
LABEL_19:
    v73 = 0;
    goto LABEL_20;
  }
  sod_header_from_target_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v4, &v77, (uint64_t)&v75, &buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v27 = v80;
  v80 = v9;
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = buf;
    *(_QWORD *)&buf = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v9 = v80;
  }
  if (v9)
  {
LABEL_8:
    v12 = 0;
    if (v77 == __PAIR128__(-1, -1) && v78 == -1)
      v12 = v79 == -1;
    v13 = !v12;
    goto LABEL_18;
  }
  v74 = 0;
  sod_header_from_colocated_dsym<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v4, (void ***)&v74, &v81, (uint64_t *)&buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v29 = v80;
  v80 = v9;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = buf;
    *(_QWORD *)&buf = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v9 = v80;
  }
  if (v9)
  {
    v13 = 0;
    goto LABEL_19;
  }
  sod_header_from_debug_symbols<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v4, (void ***)&v74, (CSCppDsymData **)&v81, (uint64_t *)&buf);
  v9 = buf;
  *(_QWORD *)&buf = 0;
  v55 = v80;
  v80 = v9;
  if (v55)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v56 = buf;
    *(_QWORD *)&buf = 0;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v9 = v80;
  }
  v73 = 0;
  if (!v9)
  {
    sod_header_from_task_fault<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, v4, (void **)&v73, (uint64_t *)&buf);
    v9 = buf;
    *(_QWORD *)&buf = 0;
    v57 = v80;
    v80 = v9;
    if (v57)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      v58 = buf;
      *(_QWORD *)&buf = 0;
      if (v58)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      v9 = v80;
    }
    if (!v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v4 = 0;
      goto LABEL_124;
    }
  }
  v13 = 0;
LABEL_20:
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v16 = *(char **)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  if ((char *)v17 == v16)
  {
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections(v9, &v70, v4 + 160);
  }
  else
  {
    if (v4 + 160 != a1 + 56)
    {
      std::vector<CSCppSectionRange>::__assign_with_size[abi:ne180100]<CSCppSectionRange*,CSCppSectionRange*>((char *)(v4 + 160), v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v16) >> 3));
      v9 = v80;
    }
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections(v9, &v70, 0);
  }
  record_sod_header_version<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(&v80, v4);
  dsym_header_for_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(a1, (_QWORD *)v4, (void ***)&v74, &v81, (uint64_t *)&v69);
  if (!v69)
  {
    if ((v8 & 0x10000) != 0)
      goto LABEL_80;
    if (!v13)
    {
      v24 = 3;
LABEL_78:
      extract_stabs_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(v24, 0, 0, 0, v80, (uint64_t *)v4, 0);
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  v68 = 0;
  v18 = atomic_load((unsigned int *)(v4 + 12));
  if ((v18 & 4) != 0
    || (v19 = atomic_load((unsigned int *)(v4 + 12)), (v19 & 8) != 0)
    || (v20 = atomic_load((unsigned int *)(v4 + 12)), (v20 & 2) != 0) && (*(_BYTE *)(a1 + 109) & 4) != 0
    || *(_BYTE *)(v80 + 60))
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::extract_segments_and_sections((uint64_t)v69, &v65, 0);
    v62 = 0;
    v63 = 0;
    v64 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v62, v65, (uint64_t)v66, (v66 - (_BYTE *)v65) >> 5);
    __p = 0;
    v60 = 0;
    v61 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&__p, v70, (uint64_t)v71, (v71 - (_BYTE *)v70) >> 5);
    v21 = v81;
    v22 = std::remove_if[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange *>,TAddressRelocator<Pointer32> * create_slide_functor_if_needed<Pointer32>(std::vector<CSCppSegmentRange>,std::vector<CSCppSegmentRange>,CSCppDsymData *)::{lambda(CSCppSegmentRange)#1}>((uint64_t)v62, (uint64_t)v63);
    v23 = std::remove_if[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange *>,TAddressRelocator<Pointer32> * create_slide_functor_if_needed<Pointer32>(std::vector<CSCppSegmentRange>,std::vector<CSCppSegmentRange>,CSCppDsymData *)::{lambda(CSCppSegmentRange)#1}>((uint64_t)__p, (uint64_t)v60);
    if (v63 != v22)
      v63 = v22;
    if (v60 != v23)
      v60 = v23;
    if ((char *)v22 - (_BYTE *)v62 != (char *)v23 - (_BYTE *)__p)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v21 + 9;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Segments in dSYM [%s] could not be matched to task header\n", (uint8_t *)&buf, 0xCu);
      }
      v26 = 0;
      goto LABEL_58;
    }
    create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>((uint64_t)&v62, (uint64_t)&__p, 0, (void **)&buf);
    v25 = (void *)buf;
    if ((_QWORD)buf == *((_QWORD *)&buf + 1))
    {
      v26 = 0;
      if (!(_QWORD)buf)
      {
LABEL_58:
        v31 = v68;
        v68 = v26;
        if (v31)
          std::default_delete<TAddressRelocator<Pointer32>>::operator()[abi:ne180100]((uint64_t)&v68, (uint64_t)v31);
        if (__p)
        {
          v60 = __p;
          operator delete(__p);
        }
        if (v62)
        {
          v63 = v62;
          operator delete(v62);
        }
        if (v65)
        {
          v66 = v65;
          operator delete(v65);
        }
        goto LABEL_66;
      }
    }
    else
    {
      v26 = (_QWORD *)operator new();
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(v26, (const void *)buf, *((uint64_t *)&buf + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3));
      v26[3] = *v26;
      v25 = (void *)buf;
      if (!(_QWORD)buf)
        goto LABEL_58;
    }
    *((_QWORD *)&buf + 1) = v25;
    operator delete(v25);
    goto LABEL_58;
  }
LABEL_66:
  if ((v8 & 0x2000000) != 0 || *v81 == v81[1] || v81[3] == v81[4])
  {
    *(_QWORD *)&buf = &off_1E6777710;
    extract_dwarf_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(v69, v4, (v8 & 0x80) != 0, v68, (uint64_t (***)(_QWORD, std::vector<std::string>::pointer))&buf);
  }
  else
  {
    CSCppInternedPathTransformer::CSCppInternedPathTransformer(&buf, v4 + 96);
    extract_dwarf_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(v69, v4, (v8 & 0x80) != 0, v68, (uint64_t (***)(_QWORD, std::vector<std::string>::pointer))&buf);
    *(_QWORD *)&buf = &off_1E677AA20;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v83);
  }
  stabs_data_from = extract_stabs_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(3, 0, 0, 0, (uint64_t)v69, (uint64_t *)v4, v68);
  v33 = atomic_load((unsigned int *)(v4 + 12));
  atomic_store(v33 | 0x10, (unsigned int *)(v4 + 12));
  *(_QWORD *)(v4 + 256) = CSCppStringCache::intern((CSCppStringCache *)(v4 + 96), (char *)v81 + 72);
  v34 = v68;
  v68 = 0;
  if (v34)
    std::default_delete<TAddressRelocator<Pointer32>>::operator()[abi:ne180100]((uint64_t)&v68, (uint64_t)v34);
  if ((v8 & 0x10000) == 0)
  {
    if (stabs_data_from)
      v24 = 2;
    else
      v24 = 3;
    if (((stabs_data_from | v13 ^ 1) & 1) != 0)
      goto LABEL_78;
LABEL_79:
    extract_stabs_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(3, v75, v76, (uint64_t *)&v77, v80, (uint64_t *)v4, 0);
  }
LABEL_80:
  if ((v8 & 0x4000000) == 0)
    extract_function_starts_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(v80, (uint64_t *)v4, 0);
  if (v69)
  {
    if ((*(_BYTE *)(a1 + 109) & 1) == 0)
      goto LABEL_90;
    v35 = (_QWORD *)v80;
    if (!strcmp((const char *)v81 + 72, *(const char **)(v80 + 48)) || (v8 & 0x20000) != 0)
      goto LABEL_90;
  }
  else
  {
    if ((v8 & 0x20000) != 0)
      goto LABEL_90;
    v35 = (_QWORD *)v80;
  }
  *(_QWORD *)&buf = &off_1E6777710;
  extract_dwarf_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(v35, v4, (v8 & 0x80) != 0, 0, (uint64_t (***)(_QWORD, std::vector<std::string>::pointer))&buf);
LABEL_90:
  if ((v8 & 0x40000) == 0)
  {
    v36 = atomic_load((unsigned int *)(v4 + 12));
    if ((v36 & 0x10) == 0)
      extract_debug_map_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(v80, v4);
  }
  v37 = v80;
  if ((v8 & 0x4000000) != 0)
  {
    extract_function_starts_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(v80, (uint64_t *)v4, 1);
    v37 = v80;
  }
  if ((v8 & 4) != 0 && *(_DWORD *)(*(_QWORD *)(v37 + 24) + 12) != 10)
  {
    v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
    v39 = v80;
    *(_QWORD *)&buf = 0;
    _iterate_macho_header_sections<SizeAndEndianness<Pointer64,LittleEndian>,TSection<SizeAndEndianness<Pointer64,LittleEndian>> * extract_default_text_section_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>> &,TRawSymbolOwnerData<SizeAndEndianness<Pointer64,LittleEndian>::SIZE> &,BOOL)::{lambda(TSection*<SizeAndEndianness<Pointer64,LittleEndian>>,BOOL *)#1}>(v80, v38, (unint64_t *)&buf);
    _update_symbol_owner_data_text_section_with_discovered_section<SizeAndEndianness<Pointer64,LittleEndian>>(v39, v4, buf);
    v37 = v80;
  }
  *(_DWORD *)(v4 + 408) = v8;
  *(_BYTE *)(v4 + 412) = 1;
  v40 = TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::gc_support_flags(v37);
  if ((v40 & 1) != 0)
  {
    if ((v40 & 2) != 0)
      v41 = 3072;
    else
      v41 = 1024;
    if ((v40 & 4) != 0)
      v41 = 2048;
    v42 = atomic_load((unsigned int *)(v4 + 12));
    atomic_store(v42 | v41, (unsigned int *)(v4 + 12));
  }
  if ((CSGetForceSafeMachVMReads() | ((unsigned __int16)(v8 & 0x1000) >> 12)) == 1)
  {
    v43 = (_QWORD *)v80;
    v44 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(_QWORD *)(v80 + 24), "__LINKEDIT");
    if (v44)
    {
      v45 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(v43[3]);
      v46 = v45;
      if (v45)
      {
        if (v45[5])
        {
          v47 = v43[1];
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47))
          {
            v48 = *(_QWORD *)(v44 + 24) - *(_QWORD *)(v44 + 40);
            v49 = v46[4] + v43[4];
          }
          else
          {
            v49 = v43[2];
            v48 = v46[4];
          }
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, v48 + v49, v46[5]);
        }
      }
    }
  }
  if (v73)
    CSCppTaskMemory::resume(v73);
  sort_and_filter_extracted_data<SizeAndEndianness<Pointer64,LittleEndian>>(v80, v4);
  TRawSymbolOwnerData<Pointer64>::slide_to_segment_addresses(v4, (uint64_t)&v70, a1 + 32, *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56));
  if (!v81 && (*(_BYTE *)(a1 + 109) & 1) != 0)
  {
    if ((v8 & 0x80000) != 0)
    {
      v50 = atomic_load((unsigned int *)(v4 + 12));
      atomic_store(v50 | 0x10, (unsigned int *)(v4 + 12));
    }
    *(_QWORD *)(v4 + 256) = *(_QWORD *)(a1 + 120);
  }
  v51 = v69;
  v69 = 0;
  if (v51)
    (*(void (**)(_QWORD *))(*v51 + 8))(v51);
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
LABEL_124:
  v52 = (void **)v74;
  v74 = 0;
  if (v52)
  {
    CSCppDsymData::~CSCppDsymData(v52);
    MEMORY[0x1B5E36940]();
  }
  v53 = v80;
  v80 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  return v4;
}

void sub_1B41379D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](&a24, 0);
  v27 = *(_QWORD *)(v25 - 160);
  *(_QWORD *)(v25 - 160) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

mach_vm_address_t CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(uint64_t a1, _QWORD *a2, CSCppAddressSet *a3, int a4)
{
  unsigned int v8;
  mach_vm_address_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const char *v37;
  const char *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t **v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t **v46;
  char *v47;
  char *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD **v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  const char *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  unsigned int v70;
  mach_vm_size_t v71;
  __int16 v72;
  uint64_t v73;
  vm_map_t *v74;
  mach_vm_address_t v75;
  _BYTE *v76;
  _BYTE *v77;
  char *v78;
  _BYTE *v79;
  unsigned int v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  const void **v88;
  uint64_t v89;
  const void *v90;
  mach_vm_address_t v91;
  unint64_t *v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  const char *v100;
  __int128 v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  mach_vm_address_t v114;
  const char **v115;
  unint64_t *v116;
  int v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  _BOOL4 v127;
  unint64_t v128;
  unint64_t v129;
  mach_vm_address_t v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  int v134;
  uint64_t v135;
  int64x2_t *v136;
  int64x2_t *v137;
  int32x2_t *v138;
  _BOOL4 v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  void *v160;
  int v161;
  unint64_t v162;
  int *v163;
  _DWORD *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  void *v183;
  int v184;
  unint64_t v185;
  int *v186;
  _DWORD *v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  _QWORD *v195;
  size_t v196;
  _QWORD *v197;
  _QWORD *v198;
  const char *v199;
  size_t v200;
  _QWORD *v201;
  _QWORD *v202;
  const char *v203;
  size_t v204;
  _QWORD *v205;
  void *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  char v217;
  void **v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  BOOL v222;
  unint64_t v223;
  unsigned int v226;
  uint64_t v227;
  int v228;
  int v229;
  size_t v230;
  int v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  unsigned int v236;
  int v237;
  mach_vm_size_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t *__src;
  void *__srca;
  uint64_t v243;
  unsigned int v244;
  mach_vm_address_t v245;
  _QWORD *v246;
  _BYTE v247[16];
  mach_vm_address_t address[2];
  void *v249[2];
  uint64_t v250;
  void *v251[2];
  uint64_t v252;
  char v253[8];
  uint64_t *v254;
  void *v255[2];
  _OWORD v256[2];
  int v257;
  _OWORD v258[2];
  float v259;
  _OWORD v260[2];
  int v261;
  void *__p;
  char *v263;
  char *v264;
  char *v265;
  _QWORD v266[3];
  unsigned int v267;
  unsigned int __n;
  int __n_4;
  char v270;
  void *v271[2];
  uint64_t v272;
  uint8_t buf[24];
  unint64_t v274;
  void *v275;
  char v276;
  uint64_t v277;
  char __s[8];
  unint64_t *v279;
  uint64_t v280;
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  v8 = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if (_do_traw_segments_overlap((uint64_t)(a2 + 48)))
    return 0;
  if (a3)
    CSCppAddressSet::sort(a3);
  v243 = (uint64_t)(a2 + 48);
  v246 = a2;
  v237 = a4;
  v265 = 0;
  v240 = a1;
  MMapArchiveNameBuffer::MMapArchiveNameBuffer((MMapArchiveNameBuffer *)v266);
  __p = 0;
  v263 = 0;
  v264 = 0;
  memset(v260, 0, sizeof(v260));
  v261 = 1065353216;
  v10 = a2[20];
  for (i = a2[21]; v10 != i; v10 += 24)
  {
    if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v10, *(_QWORD *)(v10 + 8)))
    {
      v12 = intern_string<std::unordered_map<unsigned long,unsigned int>>(*(const char **)(v10 + 16), (CSCppMMapStringTable *)&v265, v260);
      v13 = v12;
      v14 = v263;
      if (v263 >= v264)
      {
        v16 = (char *)__p;
        v17 = (v263 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v19 = v264 - (_BYTE *)__p;
        if ((v264 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v264, v20);
          v16 = (char *)__p;
          v14 = v263;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        *(_DWORD *)v22 = v13;
        v15 = v22 + 4;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        __p = v22;
        v263 = v15;
        v264 = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v263 = v12;
        v15 = v14 + 4;
      }
      v263 = v15;
    }
  }
  memset(v258, 0, sizeof(v258));
  v259 = 1.0;
  memset(v256, 0, sizeof(v256));
  v257 = 1065353216;
  DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer((DemanglingUtilities::CSCppReusableDemanglingBuffer *)v255);
  v24 = (uint64_t *)TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols((uint64_t)v246);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)v258, vcvtps_u32_f32((float)(0x9D89D89D89D89D8ALL * ((v24[1] - *v24) >> 3)) / v259));
  v253[0] = 0;
  v254 = v24;
  __src = v24;
  v26 = *v24;
  v25 = v24[1];
  v27 = (v8 >> 5) & 1;
  if (v26 != v25)
  {
    v28 = 0;
    v29 = 0;
    while (1)
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v26, *(_QWORD *)(v26 + 8)))
      {
        if (v270)
        {
LABEL_53:
          v9 = 0;
          goto LABEL_322;
        }
        intern_symbol_names_and_path<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(v26, (CSCppMMapStringTable *)&v265, (DemanglingUtilities::CSCppReusableDemanglingBuffer *)v255, v258, v256, v27);
        ++v28;
        if (*(_DWORD *)(v26 + 16))
          ++v29;
      }
      v26 += 104;
      if (v26 == v25)
        goto LABEL_36;
    }
  }
  v29 = 0;
  v28 = 0;
LABEL_36:
  v30 = (uint64_t *)TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols((uint64_t)v246);
  v32 = *v30;
  v31 = v30[1];
  if (*v30 == v31)
  {
    v33 = 0;
  }
  else
  {
    v33 = 0;
    do
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v32, *(_QWORD *)(v32 + 8)))
      {
        if (v270)
          break;
        v33 += recursive_intern_inlined_function_names_with_name_cache<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(v32, (CSCppMMapStringTable *)&v265, (uint64_t)a3, (DemanglingUtilities::CSCppReusableDemanglingBuffer *)v255, v258, v256, v27);
      }
      v32 += 104;
    }
    while (v32 != v31);
  }
  v34 = v246[26];
  v35 = v246[27];
  if (v34 == v35)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    do
    {
      if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v34, *(_QWORD *)(v34 + 8)))
      {
        if (v270)
          goto LABEL_53;
        *(_DWORD *)(v34 + 32) = intern_string<std::unordered_map<unsigned long,unsigned int>>(*(const char **)(v34 + 16), (CSCppMMapStringTable *)&v265, v256);
        ++v36;
      }
      v34 += 40;
    }
    while (v34 != v35);
  }
  if ((*(uint64_t (**)(_QWORD *))(*v246 + 64))(v246))
  {
    v37 = (const char *)(*(uint64_t (**)(_QWORD *))(*v246 + 64))(v246);
    v232 = CSCppMMapStringTable::intern_with_prefix((CSCppMMapStringTable *)&v265, 0, v37);
  }
  else
  {
    v232 = 0;
  }
  if ((*(uint64_t (**)(_QWORD *))(*v246 + 40))(v246))
  {
    v38 = (const char *)(*(uint64_t (**)(_QWORD *))(*v246 + 40))(v246);
    v231 = CSCppMMapStringTable::intern_with_prefix((CSCppMMapStringTable *)&v265, 0, v38);
  }
  else
  {
    v231 = 0;
  }
  v251[0] = 0;
  v251[1] = 0;
  v252 = 0;
  v249[0] = 0;
  v249[1] = 0;
  v250 = 0;
  v271[0] = 0;
  v271[1] = 0;
  v272 = 0;
  std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(v271, (const void *)v246[48], v246[49], (uint64_t)(v246[49] - v246[48]) >> 5);
  v239 = v29;
  memset(buf, 0, sizeof(buf));
  std::vector<CSCppSymbolOwner *>::reserve((void **)buf, (uint64_t)(v246[49] - v246[48]) >> 5);
  v234 = v33;
  v236 = v28;
  v40 = (unint64_t *)v271[0];
  v39 = (unint64_t *)v271[1];
  if (v271[0] == v271[1])
  {
    v41 = *(unint64_t ***)&buf[8];
  }
  else
  {
    v41 = *(unint64_t ***)&buf[8];
    do
    {
      if ((unint64_t)v41 >= *(_QWORD *)&buf[16])
      {
        v42 = ((uint64_t)v41 - *(_QWORD *)buf) >> 3;
        if ((unint64_t)(v42 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v43 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
        if (v43 <= v42 + 1)
          v43 = v42 + 1;
        if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&buf[16], v44);
        else
          v45 = 0;
        v46 = (unint64_t **)&v45[8 * v42];
        *v46 = v40;
        v41 = v46 + 1;
        v47 = *(char **)&buf[8];
        v48 = *(char **)buf;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          do
          {
            v49 = (unint64_t *)*((_QWORD *)v47 - 1);
            v47 -= 8;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *(char **)buf;
        }
        *(_QWORD *)buf = v46;
        *(_QWORD *)&buf[8] = v41;
        *(_QWORD *)&buf[16] = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v41++ = v40;
      }
      *(_QWORD *)&buf[8] = v41;
      v40 += 4;
    }
    while (v40 != v39);
  }
  v50 = 126 - 2 * __clz(((uint64_t)v41 - *(_QWORD *)buf) >> 3);
  if (v41 == *(unint64_t ***)buf)
    v51 = 0;
  else
    v51 = v50;
  std::__introsort<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**,false>(*(unint64_t ***)buf, v41, v51, 1);
  LOBYTE(address[0]) = 0;
  std::vector<BOOL>::vector(__s, ((char *)v271[1] - (char *)v271[0]) >> 5, (unsigned __int8 *)address);
  v52 = *(_QWORD ***)buf;
  v53 = *(_QWORD ***)&buf[8];
  if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v56 = *(uint64_t **)__s;
    do
    {
      v57 = *v52;
      if ((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(*v246 + 128))(v246, 0, **v52, (*v52)[1], 0))
      {
        goto LABEL_88;
      }
      v59 = (const char *)v57[3];
      if (!v59)
        v59 = (const char *)v57[2];
      if (!strncmp(v59, "__TEXT", 7uLL))
      {
LABEL_88:
        *v57 = v54;
        v54 += v57[1];
        v58 = *v56 | (1 << v55);
      }
      else
      {
        v58 = *v56 & ~(1 << v55);
      }
      *v56 = v58;
      ++v52;
      v56 += v55 == 63;
      if (v55 == 63)
        v55 = 0;
      else
        ++v55;
    }
    while (v52 != v53);
  }
  v60 = v279;
  if (v279)
  {
    v61 = 0;
    v62 = *(uint64_t **)__s;
    v63 = -1;
    v64 = *(_QWORD *)buf;
    do
    {
      if (((*(unint64_t *)((char *)v62 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v61) & 1) == 0)
      {
        v65 = *(_QWORD **)(v64 + 8 * v61);
        v66 = (const char *)v65[3];
        if (!v66)
          v66 = (const char *)v65[2];
        if (!strncmp(v66, "__LINKEDIT", 0xAuLL))
        {
          v63 = v61;
        }
        else
        {
          *v65 = v54;
          v54 += v65[1];
        }
      }
      ++v61;
    }
    while ((unint64_t)v60 > v61);
    if (v63 != -1)
      **(_QWORD **)(v64 + 8 * v63) = v54;
  }
  if (*(_QWORD *)__s)
    operator delete(*(void **)__s);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (v251[0])
  {
    v251[1] = v251[0];
    operator delete(v251[0]);
  }
  *(_OWORD *)v251 = *(_OWORD *)v271;
  v252 = v272;
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(v243, (uint64_t)v251, 0, (void **)buf);
  if (v249[0])
  {
    v249[1] = v249[0];
    operator delete(v249[0]);
  }
  *(_OWORD *)v249 = *(_OWORD *)buf;
  v250 = *(_QWORD *)&buf[16];
  v67 = v246[30];
  if (v237)
    v68 = v246[29];
  else
    v68 = 0;
  if (v237)
    v69 = v246[30];
  else
    v69 = 0;
  v70 = 4 * v236
      + 4 * v239
      + __n_4
      + v69
      + 36 * v234
      + 20 * v36
      + ((LODWORD(v251[1]) - LODWORD(v251[0]) + 24 * (((unint64_t)(v263 - (_BYTE *)__p) >> 2) + v236) + 96) & 0xFFFFFFF8);
  if (*((_BYTE *)v246 + 412))
    v71 = v70 + 24;
  else
    v71 = v70;
  v230 = v69;
  v229 = *((unsigned __int8 *)v246 + 412);
  v233 = v68;
  if (!v69 || (v72 = atomic_load((unsigned int *)v246 + 3), (v72 & 0x1000) == 0))
  {
    LODWORD(v73) = 0;
    LODWORD(v67) = 0;
    goto LABEL_130;
  }
  v92 = (unint64_t *)v249[0];
  if (v249[0] == v249[1])
  {
    LODWORD(v73) = v68;
LABEL_130:
    address[0] = 0;
    address[1] = v71;
    v74 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    mach_vm_allocate(*MEMORY[0x1E0C83DA0], address, v71, 3);
    v75 = address[0];
    if (!address[0])
    {
      v91 = 0;
LABEL_316:
      mach_vm_protect(*v74, v91, v71, 1, 1);
      v9 = address[0];
      address[0] = 0;
      v92 = (unint64_t *)v249[0];
      goto LABEL_317;
    }
    v244 = 4 * v236;
    v238 = v71;
    v227 = *(_QWORD *)(v240 + 112);
    v228 = v73;
    v76 = v251[0];
    v77 = v251[1];
    v79 = __p;
    v78 = v263;
    v80 = atomic_load((unsigned int *)v246 + 3);
    v226 = v80;
    v81 = (*(uint64_t (**)(_QWORD *))(*v246 + 48))(v246);
    v82 = (*(uint64_t (**)(_QWORD *))(*v246 + 56))(v246);
    v83 = (unint64_t)(v78 - v79) >> 2;
    *(_DWORD *)v75 = 7;
    *(_DWORD *)(v75 + 4) = v238;
    *(_DWORD *)(v75 + 8) = (unint64_t)(v77 - v76) >> 5;
    *(_DWORD *)(v75 + 12) = v83;
    *(_DWORD *)(v75 + 16) = v236;
    *(_DWORD *)(v75 + 20) = v234;
    *(_DWORD *)(v75 + 24) = v36;
    *(_DWORD *)(v75 + 28) = v226;
    *(_DWORD *)(v75 + 32) = v81;
    *(_DWORD *)(v75 + 36) = v82;
    *(_OWORD *)(v75 + 52) = *(_OWORD *)(v240 + 16);
    *(_QWORD *)(v75 + 68) = v227;
    *(_DWORD *)(v75 + 76) = v228;
    *(_DWORD *)(v75 + 80) = v67;
    *(_DWORD *)(v75 + 88) = 4 * v239;
    v84 = 24 * v236
        + (unint64_t)(4 * v239)
        + v244
        + (36 * v234)
        + (unint64_t)(20 * v36)
        + v67;
    v245 = v75 + 96;
    v85 = (char *)(v84 + v75 + 96 + ((_DWORD)v77 - (_DWORD)v76) + (24 * v83));
    v265 = v85;
    v86 = v267;
    v87 = v266[0];
    if (v267)
    {
      v88 = (const void **)v266[0];
      v89 = v267;
      do
      {
        v90 = *v88++;
        memcpy(v85, v90, 0x1000uLL);
        v85 += 4096;
        --v89;
      }
      while (v89);
    }
    else
    {
      v86 = 0;
    }
    memcpy(v85, *(const void **)(v87 + 8 * v86), __n);
    *(_DWORD *)(v75 + 84) = (_DWORD)v85
                          + __n
                          - (*(_DWORD *)(v75 + 88)
                           + *(_DWORD *)(v75 + 80))
                          - (v245
                           + 32 * *(_DWORD *)(v75 + 8)
                           + 24 * *(_DWORD *)(v75 + 12)
                           + 24 * *(_DWORD *)(v75 + 16)
                           + 4 * *(_DWORD *)(v75 + 16)
                           + 36 * *(_DWORD *)(v75 + 20)
                           + 20 * *(_DWORD *)(v75 + 24));
    *(_DWORD *)(v75 + 40) = v231;
    *(_DWORD *)(v75 + 44) = v232;
    *(_DWORD *)(v75 + 48) = TMMapArchive::calculate_checksum((int32x4_t *)v75);
    v95 = (32 * *(_DWORD *)(v75 + 8))
        + v245
        + (24 * *(_DWORD *)(v75 + 12))
        + (24 * *(_DWORD *)(v75 + 16))
        + (unint64_t)(4 * *(_DWORD *)(v75 + 16))
        + (36 * *(_DWORD *)(v75 + 20))
        + (unint64_t)(20 * *(_DWORD *)(v75 + 24))
        + *(unsigned int *)(v75 + 88);
    v96 = *(unsigned int *)(v75 + 80);
    v97 = (char *)v251[0];
    v98 = (char *)v251[1];
    if (v251[0] != v251[1])
    {
      v99 = (char *)(v75 + 112);
      do
      {
        v100 = (const char *)*((_QWORD *)v97 + 3);
        if (!v100)
          v100 = (const char *)*((_QWORD *)v97 + 2);
        v101 = *(_OWORD *)v97;
        v97 += 32;
        *((_OWORD *)v99 - 1) = v101;
        v99 = strncpy(v99, v100, 0x10uLL) + 32;
      }
      while (v97 != v98);
    }
    v102 = v95 + v96;
    v92 = (unint64_t *)v249[0];
    v103 = (unint64_t *)v249[1];
    v235 = v95 + v96;
    if (v249[0] == v249[1])
    {
      v130 = (32 * *(_DWORD *)(v75 + 8)) + v245;
      v131 = v246[20];
      v132 = v246[21];
      if (v131 != v132)
      {
        v133 = (int *)__p;
        do
        {
          if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v131, *(_QWORD *)(v131 + 8)))
          {
            v134 = *v133++;
            *(_OWORD *)v130 = *(_OWORD *)v131;
            *(_DWORD *)(v130 + 16) = v134;
            v130 += 24;
          }
          v131 += 24;
        }
        while (v131 != v132);
        v130 = (32 * *(_DWORD *)(v75 + 8)) + v245;
      }
      v135 = v130 + (24 * *(_DWORD *)(v75 + 12));
      write_symbols_and_inlined_functions<Pointer64>(__src, v135, v135 + (24 * *(_DWORD *)(v75 + 16)), (uint64_t)&v265, (unint64_t **)v249, (uint64_t)a3, v102);
      v136 = (int64x2_t *)v246[26];
      v137 = (int64x2_t *)v246[27];
      if (v136 != v137)
      {
        v138 = (int32x2_t *)(vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v75 + 8), (int32x4_t)xmmword_1B41A9130))
                           + v245);
        do
        {
          if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, v136->i64[0], v136->i64[1]))
          {
            *v138 = vmovn_s64(*v136);
            v138[1].i32[0] = v136[2].i32[0];
            v138[1].i32[1] = v136[1].i32[2];
            v138[2].i32[0] = v136[1].i32[3] & 0x7FFFFFFF;
            v138 = (int32x2_t *)((char *)v138 + 20);
          }
          v136 = (int64x2_t *)((char *)v136 + 40);
        }
        while (v136 != v137);
      }
    }
    else
    {
      *(_QWORD *)__s = 0;
      v279 = 0;
      v280 = 0;
      std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve((void **)__s, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v246[21] - v246[20]) >> 3));
      v104 = v246[20];
      v105 = v246[21];
      *(_QWORD *)buf = __s;
      while (v104 != v105)
      {
        if (!a3 || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v104, *(_QWORD *)(v104 + 8)))
          std::back_insert_iterator<std::vector<CSCppFlatbufferRelocation>>::operator=[abi:ne180100]((void ***)buf, (__int128 *)v104);
        v104 += 24;
      }
      v106 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v279 - *(_QWORD *)__s) >> 3));
      if (v279 == *(unint64_t **)__s)
        v107 = 0;
      else
        v107 = v106;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(*(uint64_t *)__s, v279, (uint64_t)buf, v107, 1);
      v108 = *(uint64_t **)__s;
      v109 = v279;
      v110 = *(unint64_t **)__s;
      if (*(unint64_t **)__s != v279)
      {
        v111 = *(unint64_t **)__s;
        v112 = v92;
        while (2)
        {
          v113 = *v111;
          while (v113 < *v112 || v111[1] + v113 > v112[1] + *v112)
          {
            v112 += 3;
            if (v112 >= v103)
            {
              v127 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
              v128 = v111[1];
              if (v127)
              {
                v129 = v111[2];
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v129;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v113;
                *(_WORD *)&buf[22] = 2048;
                v274 = v128 + v113;
                _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Region %s [%llx -> %llx) outside of relocations in mmap SOD\n", buf, 0x20u);
              }
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "Region %s [%llx -> %llx) outside of relocations in mmap SOD\n");
              goto LABEL_205;
            }
          }
          *v111 = v112[2] + v113;
          v111 += 3;
          if (v111 != v109)
            continue;
          break;
        }
        v110 = v109;
      }
      std::sort[abi:ne180100]<std::__wrap_iter<CSCppSectionRange *>>((uint64_t)v108, v110);
      v114 = (32 * *(_DWORD *)(v75 + 8)) + v245;
      v115 = *(const char ***)__s;
      v116 = v279;
      if (*(unint64_t **)__s != v279)
      {
        do
        {
          v117 = intern_string<std::unordered_map<unsigned long,unsigned int>>(v115[2], 0, v260);
          v118 = *(_OWORD *)v115;
          v115 += 3;
          *(_OWORD *)v114 = v118;
          *(_DWORD *)(v114 + 16) = v117;
          v114 += 24;
        }
        while (v115 != (const char **)v116);
        v114 = (32 * *(_DWORD *)(v75 + 8)) + v245;
      }
      v119 = v114 + (24 * *(_DWORD *)(v75 + 12));
      write_symbols_and_inlined_functions<Pointer64>(__src, v119, v119 + (24 * *(_DWORD *)(v75 + 16)), (uint64_t)&v265, (unint64_t **)v249, (uint64_t)a3, v102);
      v120 = v246[26];
      v121 = v246[27];
      if (v120 == v121)
      {
        v126 = 1;
      }
      else
      {
        v122 = (_DWORD *)(vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v75 + 8), (int32x4_t)xmmword_1B41A9130))
                        + v245);
        v123 = v92;
        while (a3 && !CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)v120, *(_QWORD *)(v120 + 8)))
        {
LABEL_181:
          v120 += 40;
          v126 = 1;
          if (v120 == v121)
            goto LABEL_206;
        }
        v124 = *(_QWORD *)v120;
        do
        {
          if (v124 >= *v123)
          {
            v125 = *(_QWORD *)(v120 + 8);
            if (v125 + v124 <= v123[1] + *v123)
            {
              *v122 = *((_DWORD *)v123 + 4) + v124;
              v122[1] = v125;
              v122[2] = *(_DWORD *)(v120 + 32);
              v122[3] = *(_DWORD *)(v120 + 24);
              v122[4] = *(_DWORD *)(v120 + 28) & 0x7FFFFFFF;
              v122 += 5;
              goto LABEL_181;
            }
          }
          v123 += 3;
        }
        while (v123 < v103);
        v139 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        v140 = *(_QWORD *)(v120 + 8);
        if (v139)
        {
          v141 = *(_QWORD *)(v120 + 16);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v141;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v124;
          *(_WORD *)&buf[22] = 2048;
          v274 = v140;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Source info %s [%llx -> %llx) outside of relocations in mmap SOD\n", buf, 0x20u);
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Source info %s [%llx -> %llx) outside of relocations in mmap SOD\n");
LABEL_205:
        v126 = 0;
      }
LABEL_206:
      if (*(_QWORD *)__s)
      {
        v279 = *(unint64_t **)__s;
        operator delete(*(void **)__s);
      }
      if ((v126 & 1) == 0)
      {
        v9 = 0;
LABEL_317:
        MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(address);
        goto LABEL_318;
      }
    }
    v142 = __src;
    if (v239)
    {
      memset(buf, 0, sizeof(buf));
      std::vector<CSCppSymbolOwner *>::reserve((void **)buf, v239);
      v143 = *__src;
      if (__src[1] != *__src)
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        do
        {
          if (!a3
            || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)(v143 + 104 * v144), *(_QWORD *)(v143 + 104 * v144 + 8)))
          {
            v147 = (32 * *(_DWORD *)(v75 + 8))
                 + v245
                 + (24 * *(_DWORD *)(v75 + 12))
                 + 24 * v146;
            if (*(_DWORD *)(v147 + 12))
            {
              v148 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
              {
                v150 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
                if ((unint64_t)(v150 + 1) >> 61)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                v151 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
                if (v151 <= v150 + 1)
                  v151 = v150 + 1;
                if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
                  v152 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v152 = v151;
                if (v152)
                  v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&buf[16], v152);
                else
                  v153 = 0;
                v154 = (uint64_t *)&v153[8 * v150];
                *v154 = v147;
                v149 = v154 + 1;
                v155 = *(char **)&buf[8];
                v156 = *(char **)buf;
                if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                {
                  do
                  {
                    v157 = *((_QWORD *)v155 - 1);
                    v155 -= 8;
                    *--v154 = v157;
                  }
                  while (v155 != v156);
                  v155 = *(char **)buf;
                }
                *(_QWORD *)buf = v154;
                *(_QWORD *)&buf[8] = v149;
                *(_QWORD *)&buf[16] = &v153[8 * v152];
                if (v155)
                  operator delete(v155);
              }
              else
              {
                **(_QWORD **)&buf[8] = v147;
                v149 = (_QWORD *)(v148 + 8);
              }
              *(_QWORD *)&buf[8] = v149;
              v142 = __src;
            }
            ++v146;
          }
          v143 = *v142;
          v144 = ++v145;
        }
        while (0x4EC4EC4EC4EC4EC5 * ((v142[1] - *v142) >> 3) > (unint64_t)v145);
      }
      v158 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
      *(_QWORD *)__s = v235;
      if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
        v159 = 0;
      else
        v159 = v158;
      std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(*(uint64_t *)buf, *(uint64_t **)&buf[8], (uint64_t *)__s, v159, 1);
      v160 = *(void **)buf;
      if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
      {
        if (!*(_QWORD *)buf)
          goto LABEL_246;
      }
      else
      {
        v161 = 32 * *(_DWORD *)(v75 + 8)
             + v245
             + 24 * *(_DWORD *)(v75 + 12)
             + 24 * *(_DWORD *)(v75 + 16)
             + 36 * *(_DWORD *)(v75 + 20)
             + 20 * *(_DWORD *)(v75 + 24);
        v162 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
        if (v162 <= 1)
          v162 = 1;
        v163 = *(int **)buf;
        v164 = (_DWORD *)((32 * *(_DWORD *)(v75 + 8))
                        + v245
                        + (24 * *(_DWORD *)(v75 + 12))
                        + (24 * *(_DWORD *)(v75 + 16))
                        + (unint64_t)(36 * *(_DWORD *)(v75 + 20))
                        + (20 * *(_DWORD *)(v75 + 24)));
        do
        {
          v165 = *v163;
          v163 += 2;
          *v164++ = v161 - v165;
          v161 += 4;
          --v162;
        }
        while (v162);
      }
      *(_QWORD *)&buf[8] = v160;
      operator delete(v160);
    }
LABEL_246:
    memset(buf, 0, sizeof(buf));
    std::vector<CSCppSymbolOwner *>::reserve((void **)buf, v236);
    v166 = *v142;
    if (v142[1] != *v142)
    {
      v167 = 0;
      v168 = 0;
      v169 = 0;
      do
      {
        if (!a3
          || CSCppAddressSet::_intersects_range((uint64_t)a3, *(_QWORD *)(v166 + 104 * v167), *(_QWORD *)(v166 + 104 * v167 + 8)))
        {
          v170 = (32 * *(_DWORD *)(v75 + 8))
               + v245
               + (24 * *(_DWORD *)(v75 + 12))
               + 24 * v169;
          v171 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
          {
            v173 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
            if ((unint64_t)(v173 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v174 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
            if (v174 <= v173 + 1)
              v174 = v173 + 1;
            if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
              v175 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v175 = v174;
            if (v175)
              v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&buf[16], v175);
            else
              v176 = 0;
            v177 = (uint64_t *)&v176[8 * v173];
            *v177 = v170;
            v172 = v177 + 1;
            v178 = *(char **)&buf[8];
            v179 = *(char **)buf;
            if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            {
              do
              {
                v180 = *((_QWORD *)v178 - 1);
                v178 -= 8;
                *--v177 = v180;
              }
              while (v178 != v179);
              v178 = *(char **)buf;
            }
            *(_QWORD *)buf = v177;
            *(_QWORD *)&buf[8] = v172;
            *(_QWORD *)&buf[16] = &v176[8 * v175];
            if (v178)
              operator delete(v178);
          }
          else
          {
            **(_QWORD **)&buf[8] = v170;
            v172 = (_QWORD *)(v171 + 8);
          }
          *(_QWORD *)&buf[8] = v172;
          ++v169;
          v142 = __src;
        }
        v166 = *v142;
        v167 = ++v168;
      }
      while (0x4EC4EC4EC4EC4EC5 * ((v142[1] - *v142) >> 3) > (unint64_t)v168);
    }
    v181 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
    *(_QWORD *)__s = v235;
    if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
      v182 = 0;
    else
      v182 = v181;
    std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(*(uint64_t *)buf, *(uint64_t **)&buf[8], (uint64_t *)__s, v182, 1);
    v183 = *(void **)buf;
    v71 = v238;
    v74 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
    {
      if (!*(_QWORD *)buf)
      {
LABEL_279:
        if (v230)
        {
          v189 = *(_DWORD *)(v75 + 8);
          v190 = *(_DWORD *)(v75 + 12);
          v192 = *(_DWORD *)(v75 + 16);
          v191 = *(_DWORD *)(v75 + 20);
          v193 = *(_DWORD *)(v75 + 24);
          v194 = *(unsigned int *)(v75 + 88);
          __srca = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, size_t))(*v246 + 192))(v246, v240, v233, v230);
          CFUUIDBytesToString((const CFUUIDBytes *)(v240 + 16), __s, 0x28uLL);
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
          v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"create_mmap_archive_arch_specific (TEXT_text) -- UUID: ", 55);
          v196 = strlen(__s);
          v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)__s, v196);
          v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)", Path: ", 8);
          if (v240)
            v199 = *(const char **)(v240 + 120);
          else
            v199 = "<none>";
          v200 = strlen(v199);
          v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)v199, v200);
          v202 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)", is_dyld_shared_cache: ", 24);
          v203 = "No";
          if (v240 && (*(_DWORD *)(v240 + 108) & 0x200) != 0)
            v203 = "Yes";
          v204 = strlen(v203);
          v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)v203, v204);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)", archive_TEXT_text: ", 21);
          v206 = (void *)((32 * v189)
                        + v245
                        + (24 * v190)
                        + (24 * v192)
                        + (unint64_t)(4 * v192)
                        + (36 * v191)
                        + (unint64_t)(20 * v193)
                        + v194);
          v207 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)", raw_bytes_for_text: ", 22);
          v208 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)", text_len: ", 12);
          v209 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)", raw_TEXT_text_section: (", 26);
          v210 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)", ", 2);
          v211 = (_QWORD *)std::ostream::operator<<();
          v212 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v212, (uint64_t)", max_TEXT_text_section: (", 26);
          v213 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)", ", 2);
          v214 = (_QWORD *)std::ostream::operator<<();
          v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)", TEXT_text_section.value(): ", 29);
          v216 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)", flags:", 8);
          v217 = atomic_load((unsigned int *)v246 + 3);
          if ((v217 & 4) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFaultedFromSelfDyldSharedCache", 49);
          if ((v217 & 1) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFaultedFromDisk", 34);
          if ((v217 & 8) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFaultedFromDiskDyldSharedCache", 49);
          if ((v217 & 0x20) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFoundBinaryNextToDsym", 40);
          if ((v217 & 0x40) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFoundBinaryViaDsymPlist", 42);
          if ((v217 & 2) != 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataFaultedFromTask", 34);
          if (v217 < 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" kCSSymbolOwnerDataEmpty", 24);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v271);
          if (v272 >= 0)
            v218 = v271;
          else
            v218 = (void **)v271[0];
          CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v247, (const char *)v218);
          memcpy(v206, __srca, v230);
          CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v247);
          if (SHIBYTE(v272) < 0)
            operator delete(v271[0]);
          *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
          *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
          *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
          v74 = (vm_map_t *)MEMORY[0x1E0C83DA0];
          if (v276 < 0)
            operator delete(v275);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1B5E368EC](&v277);
          v71 = v238;
        }
        if (v229)
        {
          v219 = *((_DWORD *)v246 + 102);
          v220 = TMMapArchive::strtab_end((TMMapArchive *)v75);
          v221 = v75 + *(unsigned int *)(v75 + 4);
          v222 = v221 > v220;
          v223 = v221 - v220;
          if (v222 && v223 >= 0x18)
          {
            *(_QWORD *)v220 = 0x100C0FFEELL;
            *(_DWORD *)(v220 + 8) = 24;
            *(_DWORD *)(v220 + 12) = v219;
            *(_DWORD *)(v220 + 16) = v219;
          }
        }
        v253[0] = 1;
        v91 = address[0];
        goto LABEL_316;
      }
    }
    else
    {
      v184 = 32 * *(_DWORD *)(v75 + 8)
           + v245
           + 24 * *(_DWORD *)(v75 + 12)
           + 24 * *(_DWORD *)(v75 + 16)
           + 36 * *(_DWORD *)(v75 + 20)
           + 20 * *(_DWORD *)(v75 + 24)
           + *(_DWORD *)(v75 + 88);
      v185 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      if (v185 <= 1)
        v185 = 1;
      v186 = *(int **)buf;
      v187 = (_DWORD *)((32 * *(_DWORD *)(v75 + 8))
                      + v245
                      + (24 * *(_DWORD *)(v75 + 12))
                      + (24 * *(_DWORD *)(v75 + 16))
                      + (unint64_t)(36 * *(_DWORD *)(v75 + 20))
                      + (20 * *(_DWORD *)(v75 + 24))
                      + (unint64_t)*(unsigned int *)(v75 + 88));
      do
      {
        v188 = *v186;
        v186 += 2;
        *v187++ = v184 - v188;
        v184 += 4;
        --v185;
      }
      while (v185);
    }
    *(_QWORD *)&buf[8] = v183;
    operator delete(v183);
    goto LABEL_279;
  }
  v93 = (char *)v249[0] + 16;
  do
  {
    v94 = v93 - 2;
    if ((unint64_t)(v68 - *(v93 - 2)) < *(v93 - 1))
    {
      v73 = *v93 + v68;
      LODWORD(v67) = v69;
      goto LABEL_130;
    }
    v93 += 3;
  }
  while (v94 + 3 < v249[1]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v68;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "TEXT_text_location %llx outside of relocations in mmap SOD\n", buf, 0xCu);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "TEXT_text_location %llx outside of relocations in mmap SOD\n", v68);
  v9 = 0;
LABEL_318:
  if (v92)
  {
    v249[1] = v92;
    operator delete(v92);
  }
  if (v251[0])
  {
    v251[1] = v251[0];
    operator delete(v251[0]);
  }
LABEL_322:
  CSCppTRawSymbolNameGuard<Pointer64>::~CSCppTRawSymbolNameGuard((uint64_t)v253);
  DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(v255);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v256);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v258);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v260);
  if (__p)
  {
    v263 = (char *)__p;
    operator delete(__p);
  }
  *(_QWORD *)buf = v266;
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v9;
}

void sub_1B41394A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,mach_vm_address_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t v63;
  void *v65;

  v65 = *(void **)(v63 - 144);
  if (v65)
  {
    *(_QWORD *)(v63 - 136) = v65;
    operator delete(v65);
  }
  MachVMAllocatePtr<TMMapArchive>::~MachVMAllocatePtr(&a31);
  if (__p)
    operator delete(__p);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  CSCppTRawSymbolNameGuard<Pointer64>::~CSCppTRawSymbolNameGuard((uint64_t)&a41);
  DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(&a43);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a51);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a57);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  a57 = a24;
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  _Unwind_Resume(a1);
}

_DWORD *record_sod_header_version<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  char v5[33];
  char v6[32];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_source_version_load_command(*a1, (uint64_t)v6);
  if (v7)
    *(_QWORD *)(a2 + 272) = CSCppStringCache::intern((CSCppStringCache *)(a2 + 96), v6);
  result = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::id_dylib(*(_QWORD *)(*a1 + 24));
  if (result)
  {
    *(_DWORD *)(a2 + 264) = result[4];
    *(_DWORD *)(a2 + 268) = result[5];
    if (!v7)
    {
      TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::version_from_id_dylib_load_command(*a1, (uint64_t)v5);
      if (!v5[32])
        std::__throw_bad_optional_access[abi:ne180100]();
      result = CSCppStringCache::intern((CSCppStringCache *)(a2 + 96), v5);
      *(_QWORD *)(a2 + 272) = result;
    }
  }
  return result;
}

uint64_t dsym_header_for_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, void ***a3@<X2>, void ***a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  void **v11;
  void **v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  result = CSCppSymbolicator::flags(*(os_unfair_lock_s **)(a1 + 8));
  if ((result & 0x80000) != 0
    || (*(_BYTE *)(a1 + 109) & 0x40) != 0
    || (v11 = *a4) == 0
    && (v12 = (void **)dsym_data_for_symbol_owner((const CSCppSymbolOwner *)a1, 0, 0, 0, 0),
        result = (uint64_t)std::unique_ptr<CSCppDsymData>::reset[abi:ne180100](a3, v12),
        v11 = *a3,
        *a4 = *a3,
        !v11)
    || (result = new_file_memory_for_uuid_and_arch((char *)v11 + 72, a1 + 16, *(_QWORD *)(a1 + 112), 2)) == 0)
  {
    *a5 = 0;
    return result;
  }
  v13 = (_DWORD *)result;
  v14 = 32;
  do
  {
    v15 = (_DWORD *)(*(uint64_t (**)(_DWORD *, _QWORD, unint64_t))(*(_QWORD *)v13 + 32))(v13, 0, v14);
    v17 = (uint64_t)v15;
    if (!v15 || *v15 != -17958193)
    {
      *a5 = 0;
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    }
    v14 = v15[5] + 32;
  }
  while (v14 > v16);
  v18 = *a4;
  v19 = v13[14];
  v20 = operator new();
  buf[0] = 0;
  BYTE2(v26) = 0;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(v20, (uint64_t)v13, 0, v17, (uint64_t)(v18 + 9), v19, 0, (__int128 *)buf);
  if (!uuid_match<SizeAndEndianness<Pointer64,LittleEndian>>(v20, a1))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v21 = (uint64_t)(*a4 + 9);
      *(_DWORD *)buf = 136315394;
      v24 = v21;
      v25 = 2048;
      v26 = a1;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Provided dSYM: [%s] does not match symbol owner %p\n", buf, 0x16u);
    }
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  v22 = v13;
  TRawSymbolOwnerData<Pointer32>::add_memory(a2, (uint64_t *)&v22);
  result = (uint64_t)v22;
  v22 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a5 = v20;
  return result;
}

void sub_1B413997C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void extract_dwarf_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(_QWORD *a1, uint64_t a2, char a3, _QWORD *a4, uint64_t (***a5)(_QWORD, std::vector<std::string>::pointer))
{
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  int64x2_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *i;
  uint64_t *v87;
  _QWORD *v88;
  __n128 *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __n128 *v93;
  __int128 *v94;
  __int128 **v95;
  __int128 *v96;
  __int128 *v97;
  __int128 **v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  unsigned int v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  int64x2_t v130;
  _QWORD v131[2];
  _BYTE v132[32];
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  __int16 v167;
  uint64_t v168;
  __int128 __p;
  __int128 v170;
  void *v171;
  unsigned int v172;
  uint64_t v173;
  size_t v174;
  _BYTE buf[32];
  __int128 v176;
  uint64_t *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "__DWARF");
  if (v5
    || (v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "__DWARFA")) != 0
    || (v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(a1[3], "")) != 0)
  {
    v6 = *(unsigned int *)(v5 + 64);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v116 = 0;
      v14 = 0;
      v15 = (const char *)(v5 + 72);
      do
      {
        if (!v7 && !strcmp(v15, "__debug_info"))
        {
          v7 = v15;
        }
        else if (!v8 && !strcmp(v15, "__debug_abbrev"))
        {
          v8 = v15;
        }
        else if (!v9 && !strcmp(v15, "__debug_line"))
        {
          v9 = v15;
        }
        else if (!v10 && !strcmp(v15, "__debug_str"))
        {
          v10 = v15;
        }
        else if (!v11 && !strncmp(v15, "__debug_line_str", 0x10uLL))
        {
          v11 = v15;
        }
        else if (!v12 && !strcmp(v15, "__debug_ranges"))
        {
          v12 = v15;
        }
        else if (!v13 && !strncmp(v15, "__debug_rnglists", 0x10uLL))
        {
          v13 = v15;
        }
        else if (!strcmp(v15, "__debug_addr"))
        {
          v116 = v15;
        }
        else if (!strncmp(v15, "__debug_str_offs", 0x10uLL))
        {
          v14 = v15;
        }
        v15 += 80;
        --v6;
      }
      while (v6);
      if (v7 && v8 && *((_QWORD *)v7 + 5) && *((_QWORD *)v8 + 5))
      {
        v16 = a1[1];
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
        {
          v17 = a1[4];
          if (v9)
            v107 = *((_QWORD *)v9 + 4) + v17;
          else
            v107 = 0;
          v19 = v116;
          if (v10)
          {
            v110 = *((_QWORD *)v10 + 4) + v17;
            if (v11)
              goto LABEL_45;
          }
          else
          {
            v110 = 0;
            if (v11)
            {
LABEL_45:
              v108 = *((_QWORD *)v11 + 4) + v17;
              if (v12)
              {
LABEL_46:
                v105 = *((_QWORD *)v12 + 4) + v17;
LABEL_54:
                if (v13)
                  v106 = *((_QWORD *)v13 + 4) + v17;
                else
                  v106 = 0;
                v20 = v17 + *((_QWORD *)v7 + 4);
                v117 = *((_QWORD *)v8 + 4) + v17;
                if (v19)
                {
                  v102 = *((_QWORD *)v19 + 4) + v17;
                  if (!v14)
                    goto LABEL_81;
                }
                else
                {
                  v102 = 0;
                  if (!v14)
                    goto LABEL_81;
                }
                v21 = *((_QWORD *)v14 + 4) + v17;
                goto LABEL_74;
              }
LABEL_53:
              v105 = 0;
              goto LABEL_54;
            }
          }
          v108 = 0;
          if (v12)
            goto LABEL_46;
          goto LABEL_53;
        }
        v18 = a1[2];
        if (v9)
          v107 = v18 + *((unsigned int *)v9 + 12);
        else
          v107 = 0;
        v19 = v116;
        if (v10)
        {
          v110 = v18 + *((unsigned int *)v10 + 12);
          if (v11)
          {
LABEL_50:
            v108 = v18 + *((unsigned int *)v11 + 12);
            goto LABEL_58;
          }
        }
        else
        {
          v110 = 0;
          if (v11)
            goto LABEL_50;
        }
        v108 = 0;
LABEL_58:
        if (v12)
        {
          v105 = v18 + *((unsigned int *)v12 + 12);
          if (v13)
          {
LABEL_60:
            v106 = v18 + *((unsigned int *)v13 + 12);
LABEL_67:
            v20 = v18 + *((unsigned int *)v7 + 12);
            v117 = v18 + *((unsigned int *)v8 + 12);
            if (v19)
            {
              v102 = v18 + *((unsigned int *)v19 + 12);
              if (!v14)
              {
LABEL_81:
                v109 = 0;
                if (!v9)
                {
LABEL_82:
                  v103 = 0;
                  if (!v10)
                  {
LABEL_83:
                    v22 = 0;
                    if (!v11)
                    {
LABEL_84:
                      v23 = 0;
                      if (!v12)
                      {
LABEL_85:
                        v104 = 0;
                        if (!v13)
                        {
LABEL_86:
                          v101 = 0;
                          if (!v19)
                            goto LABEL_87;
                          goto LABEL_80;
                        }
LABEL_79:
                        v101 = *((_QWORD *)v13 + 5);
                        if (!v19)
                        {
LABEL_87:
                          v100 = 0;
LABEL_88:
                          v24 = *((_QWORD *)v7 + 5);
                          if (v14)
                            v25 = *((_QWORD *)v14 + 5);
                          else
                            v25 = 0;
                          v26 = *((_QWORD *)v8 + 5);
                          v27 = v20;
                          v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, v20, *((_QWORD *)v7 + 5));
                          if (v28)
                          {
                            v171 = v28;
                            v172 = 0;
                            v173 = v27;
                            v174 = v24;
                            madvise(v28, v24, 2);
                            v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)v16 + 32))(v16, v117, v26);
                            if (v29)
                            {
                              v163 = v29;
                              v164 = 0;
                              v165 = v117;
                              v166 = v26;
                              v167 = 0;
                              v168 = 0;
                              __p = 0u;
                              v170 = 0u;
                              madvise(v29, v26, 2);
                              if (!v22
                                || (v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v110, v22)) == 0)
                              {
                                v30 = 0;
                                v22 = 0;
                              }
                              v159 = v30;
                              v160 = 0;
                              v161 = v110;
                              v162 = v22;
                              if (!v25
                                || (v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v109, v25)) == 0)
                              {
                                v31 = 0;
                                v25 = 0;
                              }
                              v155 = v31;
                              v156 = 0;
                              v157 = v109;
                              v158 = v25;
                              if (!v23
                                || (v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v108, v23)) == 0)
                              {
                                v32 = 0;
                                v23 = 0;
                              }
                              v151 = v32;
                              v152 = 0;
                              v153 = v108;
                              v154 = v23;
                              v33 = v104;
                              v34 = v103;
                              if (!v103
                                || (v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v107, v103)) == 0)
                              {
                                v35 = 0;
                                v34 = 0;
                              }
                              v146 = v35;
                              v147 = 0;
                              v148 = v107;
                              v149 = v34;
                              v150 = &v151;
                              if (!v104
                                || (v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v105, v104)) == 0)
                              {
                                v36 = 0;
                                v33 = 0;
                              }
                              v142 = v36;
                              v143 = 0;
                              v144 = v105;
                              v145 = v33;
                              v37 = v101;
                              if (!v101
                                || (v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v106, v101)) == 0)
                              {
                                v38 = 0;
                                v37 = 0;
                              }
                              v138 = v38;
                              v139 = 0;
                              v140 = v106;
                              v141 = v37;
                              v39 = v100;
                              if (!v100
                                || (v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v102, v100)) == 0)
                              {
                                v40 = 0;
                                v39 = 0;
                              }
                              v134 = v40;
                              v135 = 0;
                              v136 = v102;
                              v137 = v39;
                              memset(v132, 0, sizeof(v132));
                              v133 = 1065353216;
                              v130 = 0uLL;
                              v131[0] = 0;
                              v128 = 0u;
                              v129 = 0u;
                              v127 = 0u;
                              v125 = 0u;
                              v126 = 0u;
                              v123 = 0u;
                              v124 = 0u;
                              v121 = 0u;
                              v122 = 0u;
                              v41 = v172;
                              if (v172 != (unint64_t)v174)
                              {
                                v42 = MEMORY[0x1E0C81028];
                                do
                                {
                                  v43 = TDwarfInfoStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf32_compile_unit((uint64_t)&v171);
                                  v44 = v43;
                                  if (!v43)
                                    break;
                                  v120 = 0;
                                  v45 = 8;
                                  if (*((unsigned __int16 *)v43 + 2) < 5u)
                                    v45 = 6;
                                  v120 = *(unsigned int *)((char *)v43 + v45);
                                  *(_QWORD *)buf = &v120;
                                  v46 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v132, &v120, (uint64_t)&std::piecewise_construct, (_DWORD **)buf);
                                  v47 = v46[3];
                                  v48 = v46[4];
                                  *(_QWORD *)&v119 = v47;
                                  *((_QWORD *)&v119 + 1) = v48;
                                  if (v48)
                                  {
                                    v49 = (unint64_t *)(v48 + 8);
                                    do
                                      v50 = __ldxr(v49);
                                    while (__stxr(v50 + 1, v49));
                                  }
                                  if (v47)
                                    goto LABEL_123;
                                  if (v166 < v120)
                                    goto LABEL_195;
                                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor((uint64_t)&v163, v120);
                                  TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev_table((uint64_t *)&v163, buf);
                                  v61 = *(_OWORD *)buf;
                                  *(_QWORD *)buf = 0;
                                  *(_QWORD *)&buf[8] = 0;
                                  v62 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
                                  v119 = v61;
                                  if (v62)
                                  {
                                    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
                                    do
                                      v64 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v64 - 1, p_shared_owners));
                                    if (!v64)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                                      std::__shared_weak_count::__release_weak(v62);
                                    }
                                  }
                                  v65 = *(std::__shared_weak_count **)&buf[8];
                                  if (*(_QWORD *)&buf[8])
                                  {
                                    v66 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                                    do
                                      v67 = __ldaxr(v66);
                                    while (__stlxr(v67 - 1, v66));
                                    if (!v67)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                                      std::__shared_weak_count::__release_weak(v65);
                                    }
                                  }
                                  *(_QWORD *)buf = &v120;
                                  v68 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v132, &v120, (uint64_t)&std::piecewise_construct, (_DWORD **)buf);
                                  std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](v68 + 3, (uint64_t *)&v119);
                                  if ((_QWORD)v119)
                                  {
LABEL_123:
                                    v51 = v172;
                                    v52 = v44[1];
                                    if ((unsigned __int16)v52 < 5u)
                                      v53 = 11;
                                    else
                                      v53 = 12;
                                    v54 = operator new();
                                    v55 = v119;
                                    if (*((_QWORD *)&v119 + 1))
                                    {
                                      v56 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
                                      do
                                        v57 = __ldxr(v56);
                                      while (__stxr(v57 + 1, v56));
                                    }
                                    *(_QWORD *)v54 = v44;
                                    *(_DWORD *)(v54 + 8) = 0;
                                    *(_QWORD *)(v54 + 16) = v41;
                                    *(_QWORD *)(v54 + 24) = v51 - v41;
                                    *(_DWORD *)(v54 + 32) = v53;
                                    *(_WORD *)(v54 + 36) = v52;
                                    *(_QWORD *)(v54 + 40) = &v159;
                                    *(_QWORD *)(v54 + 48) = &v146;
                                    *(_QWORD *)(v54 + 56) = &v151;
                                    *(_QWORD *)(v54 + 64) = &v155;
                                    *(_QWORD *)(v54 + 72) = &v134;
                                    *(_OWORD *)(v54 + 80) = v55;
                                    if (*((_QWORD *)&v55 + 1))
                                    {
                                      v58 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
                                      do
                                        v59 = __ldxr(v58);
                                      while (__stxr(v59 + 1, v58));
                                      v118 = v54;
                                      do
                                        v60 = __ldaxr(v58);
                                      while (__stlxr(v60 - 1, v58));
                                      if (!v60)
                                      {
                                        (*(void (**)(_QWORD))(**((_QWORD **)&v55 + 1) + 16))(*((_QWORD *)&v55 + 1));
                                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v55 + 1));
                                      }
                                    }
                                    else
                                    {
                                      v118 = v54;
                                    }
                                    v69 = v130.i64[1];
                                    if (v130.i64[1] >= v131[0])
                                    {
                                      v70 = (v130.i64[1] - v130.i64[0]) >> 3;
                                      v71 = v70 + 1;
                                      if ((unint64_t)(v70 + 1) >> 61)
                                        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                                      v72 = v131[0] - v130.i64[0];
                                      if ((v131[0] - v130.i64[0]) >> 2 > v71)
                                        v71 = v72 >> 2;
                                      v73 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v71;
                                      *(_QWORD *)&v176 = v131;
                                      v74 = v73
                                          ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v131, v73): 0;
                                      v75 = (uint64_t *)&v74[8 * v70];
                                      v76 = &v74[8 * v73];
                                      *(_QWORD *)&buf[24] = v76;
                                      *v75 = v118;
                                      v77 = v75 + 1;
                                      *(_QWORD *)&buf[16] = v75 + 1;
                                      v78 = (_QWORD *)v130.i64[1];
                                      v79 = (_QWORD *)v130.i64[0];
                                      if (v130.i64[1] == v130.i64[0])
                                      {
                                        v81 = vdupq_n_s64(v130.u64[1]);
                                      }
                                      else
                                      {
                                        do
                                        {
                                          v80 = *--v78;
                                          *v78 = 0;
                                          *--v75 = v80;
                                        }
                                        while (v78 != v79);
                                        v81 = v130;
                                        v77 = *(_QWORD **)&buf[16];
                                        v76 = *(char **)&buf[24];
                                      }
                                      v130.i64[0] = (uint64_t)v75;
                                      v130.i64[1] = (uint64_t)v77;
                                      *(int64x2_t *)&buf[8] = v81;
                                      v82 = v131[0];
                                      v131[0] = v76;
                                      *(_QWORD *)&buf[24] = v82;
                                      *(_QWORD *)buf = v81.i64[0];
                                      std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::~__split_buffer((uint64_t)buf);
                                      v130.i64[1] = (uint64_t)v77;
                                    }
                                    else
                                    {
                                      *(_QWORD *)v130.i64[1] = v118;
                                      v130.i64[1] = v69 + 8;
                                    }
                                  }
                                  else
                                  {
LABEL_195:
                                    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl(&dword_1B40C5000, v42, OS_LOG_TYPE_DEFAULT, "Bad abbrev table offset in compile unit\n", buf, 2u);
                                    }
                                  }
                                  v83 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
                                  if (*((_QWORD *)&v119 + 1))
                                  {
                                    v84 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
                                    do
                                      v85 = __ldaxr(v84);
                                    while (__stlxr(v85 - 1, v84));
                                    if (!v85)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                                      std::__shared_weak_count::__release_weak(v83);
                                    }
                                  }
                                  v41 = v172;
                                }
                                while (v172 != (unint64_t)v174);
                                v87 = (uint64_t *)v130.i64[1];
                                for (i = (uint64_t *)v130.i64[0]; i != v87; ++i)
                                {
                                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(*i, *(_DWORD *)(*i + 32));
                                  v177 = 0;
                                  v176 = 0u;
                                  *(_OWORD *)&buf[16] = 0u;
                                  *(_OWORD *)buf = 0u;
                                  *(_QWORD *)buf = *i;
                                  *(_QWORD *)&buf[8] = &v163;
                                  *(_QWORD *)&buf[16] = &v146;
                                  *(_QWORD *)&buf[24] = &v159;
                                  *(_QWORD *)&v176 = &v151;
                                  *((_QWORD *)&v176 + 1) = &v142;
                                  v177 = &v138;
                                  parse_dies<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>(a1[4], *i, (uint64_t **)&v130, (uint64_t)buf, a2, a3, a4, a5, &v124, &v127, &v121);
                                }
                              }
                              TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by(a2, *((uint64_t *)&v126 + 1));
                              std::vector<TRawSourceInfo<Pointer64>>::reserve((void **)(a2 + 208), *((unint64_t *)&v129 + 1));
                              if ((_QWORD)v125 != *((_QWORD *)&v124 + 1))
                              {
                                v88 = (_QWORD *)(*((_QWORD *)&v124 + 1) + 8 * ((unint64_t)v126 / 0x27));
                                v89 = (__n128 *)(*v88 + 104 * ((unint64_t)v126 % 0x27));
                                v90 = ((unint64_t)(*((_QWORD *)&v126 + 1) + v126)
                                     * (unsigned __int128)0xA41A41A41A41A41BLL) >> 64;
                                v91 = (v90 + ((unint64_t)(*((_QWORD *)&v126 + 1) + v126 - v90) >> 1)) >> 5;
                                v92 = *(_QWORD *)(*((_QWORD *)&v124 + 1) + 8 * v91)
                                    + 104 * (*((_QWORD *)&v126 + 1) + v126 - 39 * v91);
                                while (v89 != (__n128 *)v92)
                                {
                                  TRawSymbolOwnerData<Pointer64>::add_symbol((uint64_t *)a2, v89);
                                  v89 = (__n128 *)((char *)v89 + 104);
                                  if ((__n128 *)((char *)v89 - *v88) == (__n128 *)4056)
                                  {
                                    v93 = (__n128 *)v88[1];
                                    ++v88;
                                    v89 = v93;
                                  }
                                }
                              }
                              if ((_QWORD)v128 == *((_QWORD *)&v127 + 1))
                              {
                                v94 = 0;
                                v96 = 0;
                                v95 = (__int128 **)(*((_QWORD *)&v127 + 1)
                                                  + 8 * ((*((_QWORD *)&v129 + 1) + (_QWORD)v129) / 0x66uLL));
                              }
                              else
                              {
                                v94 = (__int128 *)(*(_QWORD *)(*((_QWORD *)&v127 + 1)
                                                             + 8 * ((unint64_t)v129 / 0x66))
                                                 + 40 * ((unint64_t)v129 % 0x66));
                                v95 = (__int128 **)(*((_QWORD *)&v127 + 1)
                                                  + 8 * ((*((_QWORD *)&v129 + 1) + (_QWORD)v129) / 0x66uLL));
                                v96 = (__int128 *)((char *)*v95
                                                 + 40 * ((*((_QWORD *)&v129 + 1) + (_QWORD)v129) % 0x66uLL));
                              }
                              *(_QWORD *)buf = a2 + 208;
                              std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>>>((__int128 **)(*((_QWORD *)&v127 + 1) + 8 * ((unint64_t)v129 / 0x66)), v94, v95, v96, (void ***)buf);
                              if (*((_QWORD *)&v123 + 1))
                              {
                                if ((_QWORD)v122 == *((_QWORD *)&v121 + 1))
                                {
                                  v97 = 0;
                                  v99 = 0;
                                  v98 = (__int128 **)(*((_QWORD *)&v121 + 1)
                                                    + 8 * (((_QWORD)v123 + *((_QWORD *)&v123 + 1)) / 0xAAuLL));
                                }
                                else
                                {
                                  v97 = (__int128 *)(*(_QWORD *)(*((_QWORD *)&v121 + 1)
                                                               + 8 * ((unint64_t)v123 / 0xAA))
                                                   + 24 * ((unint64_t)v123 % 0xAA));
                                  v98 = (__int128 **)(*((_QWORD *)&v121 + 1)
                                                    + 8 * (((_QWORD)v123 + *((_QWORD *)&v123 + 1)) / 0xAAuLL));
                                  v99 = (__int128 *)((char *)*v98
                                                   + 24 * (((_QWORD)v123 + *((_QWORD *)&v123 + 1)) % 0xAAuLL));
                                }
                                *(_QWORD *)buf = a2 + 496;
                                std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>>>((__int128 **)(*((_QWORD *)&v121 + 1) + 8 * ((unint64_t)v123 / 0xAA)), v97, v98, v99, (void ***)buf);
                              }
                              std::deque<TRangeValue<Pointer64,char const*>>::~deque[abi:ne180100](&v121);
                              std::deque<TRawSymbol<Pointer64>>::~deque[abi:ne180100](&v124);
                              std::deque<TRawSourceInfo<Pointer64>>::~deque[abi:ne180100](&v127);
                              *(_QWORD *)buf = &v130;
                              std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                              std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>>>::~__hash_table((uint64_t)v132);
                              if ((_QWORD)__p)
                              {
                                *((_QWORD *)&__p + 1) = __p;
                                operator delete((void *)__p);
                              }
                            }
                          }
                          return;
                        }
LABEL_80:
                        v100 = *((_QWORD *)v19 + 5);
                        goto LABEL_88;
                      }
LABEL_78:
                      v104 = *((_QWORD *)v12 + 5);
                      if (!v13)
                        goto LABEL_86;
                      goto LABEL_79;
                    }
LABEL_77:
                    v23 = *((_QWORD *)v11 + 5);
                    if (!v12)
                      goto LABEL_85;
                    goto LABEL_78;
                  }
LABEL_76:
                  v22 = *((_QWORD *)v10 + 5);
                  if (!v11)
                    goto LABEL_84;
                  goto LABEL_77;
                }
LABEL_75:
                v103 = *((_QWORD *)v9 + 5);
                if (!v10)
                  goto LABEL_83;
                goto LABEL_76;
              }
            }
            else
            {
              v102 = 0;
              if (!v14)
                goto LABEL_81;
            }
            v21 = v18 + *((unsigned int *)v14 + 12);
LABEL_74:
            v109 = v21;
            if (!v9)
              goto LABEL_82;
            goto LABEL_75;
          }
        }
        else
        {
          v105 = 0;
          if (v13)
            goto LABEL_60;
        }
        v106 = 0;
        goto LABEL_67;
      }
    }
  }
}

void sub_1B413A85C()
{
  uint64_t v0;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&v0);
  JUMPOUT(0x1B413A92CLL);
}

uint64_t extract_stabs_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(char a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v14 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(_QWORD *)(a5 + 24), "__LINKEDIT");
  v15 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(*(_QWORD *)(a5 + 24));
  v16 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::dysymtab(*(_QWORD *)(a5 + 24));
  if (!v15)
    return 0;
  v17 = v16;
  v48 = a2;
  v46 = a3;
  v18 = *(_QWORD *)(a5 + 8);
  v19 = v15[3];
  v47 = a4;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
  {
    v20 = v15[2];
    v21 = *(_QWORD *)(a5 + 32) + *(_QWORD *)(v14 + 24) - *(_QWORD *)(v14 + 40);
  }
  else
  {
    if ((*(_BYTE *)(a5 + 58) & 8) != 0)
    {
      v23 = *(_QWORD *)(a5 + 64);
      if (!*(_BYTE *)(a5 + 80))
        v23 = 0;
      v21 = *(_QWORD *)(a5 + 16) - v23;
      v22 = v21 + v15[2];
      if (!(_DWORD)v19)
        return 1;
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(a5 + 16);
    v20 = v15[2];
  }
  v22 = v21 + v20;
  if (!(_DWORD)v19)
    return 1;
LABEL_11:
  if (!v15[5])
    return 1;
  v45 = a1;
  v24 = v17;
  v25 = a6;
  v26 = a7;
  v27 = v15[4];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v22, 16 * v19);
  if (result)
  {
    v44 = v21 + v27;
    v29 = v15[5];
    v30 = v25;
    v31 = result;
    if ((v45 & 1) != 0)
    {
      if (v48 && v47)
      {
        extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer64,LittleEndian>>(a5, v30, result, v19, v44, v29);
        extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>>(v48, v46, v47, a5, v30);
      }
      else
      {
        extract_direct_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>((_QWORD *)a5, (uint64_t)v30, result, v19, v44, v29, v26);
      }
    }
    result = 1;
    if (v14)
    {
      if (v24 && v24[14] && (v45 & 2) != 0 && v24[15])
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
        {
          v32 = *(_QWORD *)(v14 + 24) - *(_QWORD *)(v14 + 40);
          v33 = v24[14] + *(_QWORD *)(a5 + 32);
        }
        else
        {
          if ((*(_BYTE *)(a5 + 58) & 8) != 0)
          {
            v35 = *(_QWORD *)(a5 + 64);
            if (!*(_BYTE *)(a5 + 80))
              v35 = 0;
            v34 = *(_QWORD *)(a5 + 16) - v35 + v24[14];
LABEL_31:
            v36 = v24[15];
            v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v34, 4 * v36);
            v38 = v37;
            if (!(_DWORD)v36 || v37)
            {
              v39 = *(_QWORD *)(a5 + 24);
              v40 = *(unsigned int *)(v39 + 20);
              v49 = *(_DWORD *)(v39 + 16);
              v50 = v39;
              v51 = v39 + 32 + v40;
              v53 = 0;
              v54 = 0;
              v52 = v39 + 32;
              v41 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v49);
              if (v41)
              {
                v43 = v41;
                do
                {
                  if (*(_BYTE *)(v43 + 64) == 8)
                    extract_indirect_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(a5, v30, v43, v38, v36, v31, v19, v42, v44, v29, v26);
                  v43 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v49);
                }
                while (v43);
              }
              return 1;
            }
            return 0;
          }
          v32 = *(_QWORD *)(a5 + 16);
          v33 = v24[14];
        }
        v34 = v32 + v33;
        goto LABEL_31;
      }
    }
  }
  return result;
}

void extract_function_starts_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t *a2, char a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v6 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::function_starts(*(_QWORD *)(a1 + 24));
  if (v6)
  {
    v7 = v6;
    if (v6[3])
    {
      v8 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__LINKEDIT");
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)(a1 + 8);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
        {
          v11 = *(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 40) + v7[2] + *(_QWORD *)(a1 + 32);
        }
        else if ((*(_BYTE *)(a1 + 58) & 8) != 0)
        {
          v12 = *(_QWORD *)(a1 + 64);
          if (!*(_BYTE *)(a1 + 80))
            v12 = 0;
          v11 = *(_QWORD *)(a1 + 16) - v12 + v7[2];
        }
        else
        {
          v11 = *(_QWORD *)(a1 + 16) + v7[2];
        }
        v13 = v7[3];
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, v11, v13);
        if (v14)
        {
          v15 = v14;
          v23 = v14;
          v24 = 0;
          v25 = v11;
          v26 = v13;
          v16 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__TEXT");
          if (v16)
          {
            v17 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(v16 + 24);
            v22 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                + 8) & 0xFFFFFF) << 32);
            if (CSCppArchitecture::matches((CSCppArchitecture *)&v22, 0xCuLL))
            {
              v18 = 0;
              goto LABEL_16;
            }
            v21 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                + 8) & 0xFFFFFF) << 32);
            v19 = CSCppArchitecture::matches((CSCppArchitecture *)&v21, 0x100000CuLL);
            v15 = v23;
            v18 = v24;
            if (v19)
            {
LABEL_16:
              if (*(_BYTE *)(v15 + v18))
              {
                do
                {
                  v17 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(&v23);
                  if ((v17 & 1) != 0)
                    v20 = 272629824;
                  else
                    v20 = 272629760;
                  TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, v17 & 0xFFFFFFFFFFFFFFFELL, 0, (uint64_t)"$$$function-starts-fake-name$$$", (uint64_t)"$$$function-starts-fake-mangled-name$$$", v20, 0, a3);
                }
                while (*(_BYTE *)(v23 + v24));
              }
              return;
            }
            while (*(_BYTE *)(v23 + v24))
            {
              v17 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(&v23);
              TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, v17, 0, (uint64_t)"$$$function-starts-fake-name$$$", (uint64_t)"$$$function-starts-fake-mangled-name$$$", 272629760, 0, a3);
            }
          }
        }
      }
    }
  }
}

unsigned int *extract_debug_map_data_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(_QWORD *)(a1 + 24), "__LINKEDIT");
  result = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(*(_QWORD *)(a1 + 24));
  if (!result || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 12) == 9)
    return result;
  v6 = result;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = result[3];
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  if ((_DWORD)result)
  {
    v9 = v6[2];
    v10 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(v4 + 24) - *(_QWORD *)(v4 + 40);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a1 + 58) & 8) == 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = v6[2];
LABEL_7:
    v11 = v10 + v9;
    if (!(_DWORD)v8)
      return result;
    goto LABEL_12;
  }
  v12 = *(_QWORD *)(a1 + 64);
  if (!*(_BYTE *)(a1 + 80))
    v12 = 0;
  v10 = *(_QWORD *)(a1 + 16) - v12;
  v11 = v10 + v6[2];
  if ((_DWORD)v8)
  {
LABEL_12:
    if (v6[5])
    {
      v13 = v6[4];
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v11, 16 * v8);
      if (result)
      {
        v14 = (uint64_t)result;
        v15 = v10 + v13;
        v16 = v6[5];
        extract_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2, (uint64_t)result, v8, v15, v16);
        return extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2, v14, v8, v15, v16);
      }
    }
  }
  return result;
}

unint64_t TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::gc_support_flags(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(v2 + 20);
  v11 = *(_DWORD *)(v2 + 16);
  v12 = v2;
  v13 = v2 + 32 + v3;
  v14 = v2 + 32;
  result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (result)
  {
    v5 = result;
    while (1)
    {
      if (*(_DWORD *)v5 == 25
        && (!strcmp("__OBJC", (const char *)(v5 + 8)) || !strcmp("__DATA", (const char *)(v5 + 8))))
      {
        v6 = *(unsigned int *)(v5 + 64);
        if ((_DWORD)v6)
          break;
      }
LABEL_11:
      result = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      v5 = result;
      if (!result)
        return result;
    }
    v7 = v5 + 72;
    while (strncmp((const char *)v7, "__image_info", 0x10uLL) && strncmp((const char *)v7, "__objc_imageinfo", 0x10uLL))
    {
      v7 += 80;
      if (!--v6)
        goto LABEL_11;
    }
    if (*(_QWORD *)(v7 + 40) >= 8uLL && *(_DWORD *)(v7 + 48))
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
      {
        v8 = *(_QWORD *)(v7 + 32);
        v9 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(unsigned int *)(v7 + 48);
      }
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v9 + v8, 8);
      if (v10)
        return *(_DWORD *)(v10 + 4) | 1u;
      else
        return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sort_and_filter_extracted_data<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _BOOL4 v27;
  __int128 *v28;
  _QWORD *v29;
  __int128 *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __n128 v45;
  uint64_t *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  char v52;
  unint64_t v53;
  unsigned int *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t *v59;
  char *v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  __int16 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t i;
  __int16 v72;
  uint64_t j;
  __int16 v74;
  uint64_t v75;
  __int128 *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  __int128 *v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  char v113;
  const char *v114;
  uint64_t v115;
  size_t v116;
  uint64_t v117;
  _QWORD *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  __int128 v131;
  uint64_t v132;
  _QWORD *v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 *v146;
  uint64_t v147;
  int v148;
  void *__p[2];
  char *v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  __int128 *v159;
  char *v160;
  void **v161;

  v3 = TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols(a2);
  v159 = 0;
  v160 = 0;
  v158 = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v4 + 12);
  if (v6 == 9 || v6 == 10 && (*(_DWORD *)(a1 + 56) & 0x38000000) != 0x10000000)
  {
    v28 = 0;
    v29 = (_QWORD *)a2;
  }
  else
  {
    v7 = *(unsigned int *)(v4 + 20);
    LODWORD(v152) = *(_DWORD *)(v4 + 16);
    v153 = (_QWORD *)v4;
    v154 = v4 + 32 + v7;
    v156 = 0;
    v157 = 0;
    v155 = v4 + 32;
    while (1)
    {
      v8 = TSectionIterator<SizeAndEndianness<Pointer64,LittleEndian>>::section((uint64_t)&v152);
      v9 = v8;
      if (!v8)
        break;
      v10 = *(_QWORD *)(v8 + 40);
      if (v10)
      {
        v11 = *(_DWORD *)(v8 + 64);
        v27 = 0;
        if (!strcmp((const char *)(v8 + 16), "__TEXT"))
        {
          v12 = v11 == 11 || v11 == 0;
          if (v12 && (v11 & 0x80000400) != 0)
            v27 = 1;
        }
        if (!strstr((char *)(v9 + 16), "__LINKINFO"))
        {
          v14 = *(_QWORD *)(v9 + 32) + v5;
          v15 = v159;
          if (v159 >= (__int128 *)v160)
          {
            v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - v158) >> 3);
            v18 = v17 + 1;
            if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v160 - v158) >> 3) > v18)
              v18 = 0x5555555555555556 * ((v160 - v158) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v160 - v158) >> 3) >= 0x555555555555555)
              v19 = 0xAAAAAAAAAAAAAAALL;
            else
              v19 = v18;
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v160, v19);
            v22 = &v20[24 * v17];
            *(_QWORD *)v22 = v14;
            *((_QWORD *)v22 + 1) = v10;
            *((_DWORD *)v22 + 4) = v27;
            v24 = v158;
            v23 = (char *)v159;
            v25 = v22;
            if (v159 != (__int128 *)v158)
            {
              do
              {
                v26 = *(_OWORD *)(v23 - 24);
                *((_DWORD *)v25 - 2) = *((_DWORD *)v23 - 2);
                *(_OWORD *)(v25 - 24) = v26;
                v25 -= 24;
                v23 -= 24;
              }
              while (v23 != v24);
              v23 = v158;
            }
            v16 = (__int128 *)(v22 + 24);
            v158 = v25;
            v159 = (__int128 *)(v22 + 24);
            v160 = &v20[24 * v21];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_QWORD *)v159 = v14;
            *((_QWORD *)v15 + 1) = v10;
            v16 = (__int128 *)((char *)v15 + 24);
            *((_DWORD *)v15 + 4) = v27;
          }
          v159 = v16;
        }
      }
    }
    v28 = (__int128 *)v158;
    v30 = v159;
    v29 = (_QWORD *)a2;
    if (v159 != (__int128 *)v158)
      goto LABEL_50;
  }
  v31 = (uint64_t *)v29[20];
  v32 = (uint64_t *)v29[21];
  if (v31 == v32)
    goto LABEL_194;
  do
  {
    v34 = *v31;
    v33 = v31[1];
    if (v28 >= (__int128 *)v160)
    {
      v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - v158) >> 3);
      v36 = v35 + 1;
      if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v160 - v158) >> 3) > v36)
        v36 = 0x5555555555555556 * ((v160 - v158) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v160 - v158) >> 3) >= 0x555555555555555)
        v37 = 0xAAAAAAAAAAAAAAALL;
      else
        v37 = v36;
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v160, v37);
      v40 = &v38[24 * v35];
      *(_QWORD *)v40 = v34;
      *((_QWORD *)v40 + 1) = v33;
      *((_DWORD *)v40 + 4) = 0;
      v42 = v158;
      v41 = (char *)v159;
      v43 = v40;
      if (v159 != (__int128 *)v158)
      {
        do
        {
          v44 = *(_OWORD *)(v41 - 24);
          *((_DWORD *)v43 - 2) = *((_DWORD *)v41 - 2);
          *(_OWORD *)(v43 - 24) = v44;
          v43 -= 24;
          v41 -= 24;
        }
        while (v41 != v42);
        v41 = v158;
      }
      v28 = (__int128 *)(v40 + 24);
      v158 = v43;
      v159 = (__int128 *)(v40 + 24);
      v160 = &v38[24 * v39];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *(_QWORD *)v28 = v34;
      *((_QWORD *)v28 + 1) = v33;
      *((_DWORD *)v28 + 4) = 0;
      v28 = (__int128 *)((char *)v28 + 24);
    }
    v159 = v28;
    v31 += 3;
  }
  while (v31 != v32);
  v30 = v28;
  v28 = (__int128 *)v158;
LABEL_50:
  if (v28 == v30)
  {
    v28 = v30;
    goto LABEL_194;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,false>((uint64_t)v28, v30, (uint64_t)&v152, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v28) >> 3)), 1);
  v46 = *(uint64_t **)v3;
  v153 = 0;
  v154 = 0;
  v152 = 0;
  if ((unint64_t)v46 < *(_QWORD *)(v3 + 8))
  {
    v47 = 0;
    v148 = 0;
    v48 = 0;
    v49 = 0;
    do
    {
      v50 = (unint64_t)v46;
      while (1)
      {
        v51 = (uint64_t *)(v50 + 104);
        while (1)
        {
          v52 = atomic_load((unsigned int *)(v50 + 28));
          if ((v52 & 2) == 0)
            break;
          v50 += 104;
          v53 = *(_QWORD *)(v3 + 8);
          v51 += 13;
          if (v50 >= v53)
            goto LABEL_88;
        }
        v54 = (unsigned int *)(v50 + 28);
        v55 = *(_QWORD *)v50;
        if (*(_QWORD *)v50 - v49 < v48)
          break;
        if (v159 != (__int128 *)v158)
        {
          v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v159 - v158) >> 3);
          v57 = v158;
          do
          {
            v58 = v56 >> 1;
            v59 = (unint64_t *)&v57[24 * (v56 >> 1)];
            v61 = *v59;
            v60 = (char *)(v59 + 3);
            v56 += ~(v56 >> 1);
            if (v55 < v61)
              v56 = v58;
            else
              v57 = v60;
          }
          while (v56);
          if (v57 != v158 && v55 - *((_QWORD *)v57 - 3) < *((_QWORD *)v57 - 2))
          {
            v148 = *((_DWORD *)v57 - 2);
            v49 = *((_QWORD *)v57 - 3);
            v48 = *((_QWORD *)v57 - 2);
            break;
          }
        }
        do
          v62 = __ldxr(v54);
        while (__stxr(v62 | 0x1000, v54));
        v50 += 104;
        v53 = *(_QWORD *)(v3 + 8);
        v47 = 1;
        if (v50 >= v53)
        {
          v29 = (_QWORD *)a2;
          goto LABEL_89;
        }
      }
      sort_inlined_functions<Pointer64>(v50);
      v46 = *(uint64_t **)(v3 + 8);
      while (v51 != v46)
      {
        v63 = *v51;
        v51 += 13;
        if (v63 != *(_QWORD *)v50)
        {
          v46 = v51 - 13;
          break;
        }
      }
      v64 = (unsigned int *)(v50 + 28);
      v65 = atomic_load((unsigned int *)(v50 + 28));
      if ((v65 & 0x100) == 0)
      {
        v66 = v48 + v49 - *(_QWORD *)v50;
        if (v46 == *(uint64_t **)(v3 + 8))
          v67 = v48 + v49 - *(_QWORD *)v50;
        else
          v67 = *v46 - *(_QWORD *)v50;
        if (v67 < v66)
          v66 = v67;
        v68 = *(_QWORD *)(v50 + 8);
        if (v68 >= v66)
          v69 = v66;
        else
          v69 = *(_QWORD *)(v50 + 8);
        if (v68)
          v66 = v69;
        *(_QWORD *)(v50 + 8) = v66;
      }
      v70 = atomic_load(v64);
      atomic_store(v70 | v148, v64);
      TRawSymbolOwnerData<Pointer64>::aliases_for_symbol(a2, (unint64_t *)v50, (uint64_t *)__p);
      std::vector<TRawSymbol<Pointer64>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>>((uint64_t *)&v152, (uint64_t)v153, (uint64_t)__p[0], (uint64_t)__p[1], 0x4EC4EC4EC4EC4EC5 * (((char *)__p[1] - (char *)__p[0]) >> 3));
      v161 = __p;
      std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v161);
      v53 = *(_QWORD *)(v3 + 8);
    }
    while ((unint64_t)v46 < v53);
LABEL_88:
    v29 = (_QWORD *)a2;
    if ((v47 & 1) == 0)
      goto LABEL_102;
LABEL_89:
    for (i = *(_QWORD *)v3; ; i += 104)
    {
      if (i == v53)
        goto LABEL_100;
      v72 = atomic_load((unsigned int *)(i + 28));
      if ((v72 & 0x1000) != 0)
        break;
    }
    if (i == v53)
    {
LABEL_100:
      i = v53;
      goto LABEL_101;
    }
    for (j = i + 104; j != v53; j += 104)
    {
      v74 = atomic_load((unsigned int *)(j + 28));
      if ((v74 & 0x1000) == 0)
      {
        TRawSymbol<Pointer64>::operator=(i, j);
        i += 104;
      }
    }
LABEL_101:
    std::vector<TRawSymbol<Pointer64>>::erase(v3, i, *(_QWORD *)(v3 + 8));
  }
LABEL_102:
  if (v152 != v153)
  {
    __p[1] = 0;
    v151 = 0;
    __p[0] = 0;
    std::vector<TRawSymbol<Pointer64>>::reserve((uint64_t *)__p, 0x4EC4EC4EC4EC4EC5 * (v153 - v152)+ 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 3));
    std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>>(*(_QWORD **)v3, *(_QWORD **)(v3 + 8), v152, v153, (uint64_t *)__p);
    std::vector<TRawSymbol<Pointer64>>::__vdeallocate((void **)v3);
    *(_OWORD *)v3 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 16) = v151;
    __p[0] = 0;
    __p[1] = 0;
    v151 = 0;
    v161 = __p;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v161);
  }
  v75 = v29[26];
  v76 = (__int128 *)v29[27];
  if ((uint64_t)v76 - v75 < 5121)
  {
    v77 = 0;
    v79 = 0;
  }
  else
  {
    v77 = (char *)std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer64>>(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v76 - v75) >> 3));
    v79 = v78;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(v75, v76, (uint64_t)&v161, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v76 - v75) >> 3), v77, v79, v45);
  if (v77)
    operator delete(v77);
  v81 = v29[26];
  v80 = (unint64_t *)v29[27];
  if ((unint64_t *)v81 != v80)
  {
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = (unint64_t *)v29[26];
    while (1)
    {
      v86 = *v85;
      if (*v85 - v83 < v84)
      {
LABEL_123:
        v98 = v85;
      }
      else
      {
        v88 = *(uint64_t **)v3;
        v87 = *(uint64_t **)(v3 + 8);
        v89 = 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v87 - *(_QWORD *)v3) >> 3);
        while (1)
        {
          if (v87 != v88)
          {
            v90 = v89;
            v91 = v88;
            do
            {
              v92 = v90 >> 1;
              v93 = (unint64_t *)&v91[13 * (v90 >> 1)];
              v95 = *v93;
              v94 = (uint64_t *)(v93 + 13);
              v90 += ~(v90 >> 1);
              if (v86 < v95)
                v90 = v92;
              else
                v91 = v94;
            }
            while (v90);
            if (v91 != v88)
            {
              v97 = *(v91 - 13);
              v96 = *(v91 - 12);
              if (v86 - v97 < v96)
                break;
            }
          }
          *((_DWORD *)v85 + 7) |= 0x80000000;
          v85 += 5;
          if (v85 == v80)
            goto LABEL_134;
          v86 = *v85;
          v82 = 1;
          if (*v85 - v83 < v84)
            goto LABEL_123;
        }
        v98 = v85;
        v84 = v96;
        v83 = v97;
      }
      v98[1] = v84 - v86 + v83;
      v85 = v98 + 5;
      if (v98 + 5 == v80)
        break;
      v99 = *v85;
      if (*v85 == v86)
      {
        v100 = v98 + 10;
        while (1)
        {
          *((_DWORD *)v100 - 13) |= 0x80000000;
          *(v100 - 4) = *(v100 - 9);
          if (v100 == v80)
            goto LABEL_134;
          v101 = *v100;
          v100 += 5;
          v99 = v101;
          if (v101 != v86)
          {
            v98 = v100 - 10;
            v85 = v100 - 5;
            v82 = 1;
            break;
          }
        }
      }
      v102 = v99 - v86;
      if (v102 < v98[1])
        v98[1] = v102;
    }
    if ((v82 & 1) == 0)
      goto LABEL_146;
LABEL_134:
    if ((unint64_t *)v81 != v80)
    {
      while ((*(_DWORD *)(v81 + 28) & 0x80000000) == 0)
      {
        v81 += 40;
        if ((unint64_t *)v81 == v80)
          goto LABEL_146;
      }
    }
    if ((unint64_t *)v81 != v80)
    {
      v103 = (__int128 *)(v81 + 40);
      if ((unint64_t *)(v81 + 40) != v80)
      {
        do
        {
          if ((*((_DWORD *)v103 + 7) & 0x80000000) == 0)
          {
            v104 = *v103;
            v105 = v103[1];
            *(_DWORD *)(v81 + 32) = *((_DWORD *)v103 + 8);
            *(_OWORD *)v81 = v104;
            *(_OWORD *)(v81 + 16) = v105;
            v81 += 40;
          }
          v103 = (__int128 *)((char *)v103 + 40);
        }
        while (v103 != (__int128 *)v80);
        v80 = (unint64_t *)v29[27];
      }
      if ((unint64_t *)v81 != v80)
        v29[27] = v81;
    }
  }
LABEL_146:
  v106 = v29[62];
  v107 = (unint64_t *)v29[63];
  if ((unint64_t *)v106 != v107)
  {
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *,false>(v106, v107, (uint64_t)&v161, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v107 - v106) >> 3)), 1);
    __p[0] = 0;
    __p[1] = 0;
    v151 = 0;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[63] - v29[62]) >> 3));
    v109 = (uint64_t *)v29[62];
    v108 = (uint64_t *)v29[63];
    if (v109 == v108)
    {
      v108 = (uint64_t *)v29[62];
    }
    else
    {
      v110 = 0;
      v111 = 0;
      v112 = 0;
      v113 = 1;
      do
      {
        v114 = (const char *)v109[2];
        if ((v113 & 1) != 0)
        {
          v113 = 0;
          v112 = *v109;
          v115 = v109[1];
          v109 += 3;
          v110 = v115 + v112;
          v111 = v114;
        }
        else
        {
          v116 = strlen(v111);
          if (!strncmp(v111, v114, v116))
          {
            v113 = 0;
            v120 = *v109;
            v121 = v109[1];
            v109 += 3;
            v110 = v121 + v120;
          }
          else
          {
            v117 = v110 - v112;
            v118 = __p[1];
            if (__p[1] >= v151)
            {
              v122 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
              v123 = v122 + 1;
              if (v122 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v151 - (char *)__p[0]) >> 3) > v123)
                v123 = 0x5555555555555556 * ((v151 - (char *)__p[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v151 - (char *)__p[0]) >> 3) >= 0x555555555555555)
                v124 = 0xAAAAAAAAAAAAAAALL;
              else
                v124 = v123;
              v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v151, v124);
              v127 = &v125[24 * v122];
              *(_QWORD *)v127 = v112;
              *((_QWORD *)v127 + 1) = v117;
              *((_QWORD *)v127 + 2) = v111;
              v129 = (char *)__p[0];
              v128 = (char *)__p[1];
              v130 = v127;
              if (__p[1] != __p[0])
              {
                do
                {
                  v131 = *(_OWORD *)(v128 - 24);
                  *((_QWORD *)v130 - 1) = *((_QWORD *)v128 - 1);
                  *(_OWORD *)(v130 - 24) = v131;
                  v130 -= 24;
                  v128 -= 24;
                }
                while (v128 != v129);
                v128 = (char *)__p[0];
              }
              v119 = v127 + 24;
              __p[0] = v130;
              __p[1] = v127 + 24;
              v151 = &v125[24 * v126];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *(_QWORD *)__p[1] = v112;
              v118[1] = v117;
              v119 = v118 + 3;
              v118[2] = v111;
            }
            v112 = 0;
            v111 = 0;
            v110 = 0;
            __p[1] = v119;
            v108 = *(uint64_t **)(a2 + 504);
            v113 = 1;
          }
        }
      }
      while (v109 != v108);
      if (v111 && v112 && v110)
      {
        v132 = v110 - v112;
        v133 = __p[1];
        if (__p[1] >= v151)
        {
          v136 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
          v137 = v136 + 1;
          if (v136 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v151 - (char *)__p[0]) >> 3) > v137)
            v137 = 0x5555555555555556 * ((v151 - (char *)__p[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v151 - (char *)__p[0]) >> 3) >= 0x555555555555555)
            v138 = 0xAAAAAAAAAAAAAAALL;
          else
            v138 = v137;
          v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v151, v138);
          v140 = &v139[24 * v136];
          v142 = &v139[24 * v141];
          *(_QWORD *)v140 = v112;
          *((_QWORD *)v140 + 1) = v132;
          *((_QWORD *)v140 + 2) = v111;
          v134 = v140 + 24;
          v144 = (char *)__p[0];
          v143 = (char *)__p[1];
          if (__p[1] == __p[0])
          {
            v135 = a2;
          }
          else
          {
            v135 = a2;
            do
            {
              v145 = *(_OWORD *)(v143 - 24);
              *((_QWORD *)v140 - 1) = *((_QWORD *)v143 - 1);
              *(_OWORD *)(v140 - 24) = v145;
              v140 -= 24;
              v143 -= 24;
            }
            while (v143 != v144);
            v143 = (char *)__p[0];
          }
          __p[0] = v140;
          __p[1] = v134;
          v151 = v142;
          if (v143)
            operator delete(v143);
        }
        else
        {
          *(_QWORD *)__p[1] = v112;
          v133[1] = v132;
          v134 = v133 + 3;
          v133[2] = v111;
          v135 = a2;
        }
        __p[1] = v134;
        v108 = *(uint64_t **)(v135 + 504);
        goto LABEL_189;
      }
    }
    v134 = __p[1];
    v135 = a2;
LABEL_189:
    v146 = (__int128 *)__p[0];
    v147 = *(_QWORD *)(v135 + 496);
    if (0xAAAAAAAAAAAAAAABLL * ((int64_t)((uint64_t)v134 - (unint64_t)__p[0]) >> 3) < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v108 - v147) >> 3))
    {
      *(_QWORD *)(v135 + 504) = v147;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>(v146, (__int128 *)v134, (void **)(v135 + 496));
      v146 = (__int128 *)__p[0];
    }
    if (v146)
    {
      __p[1] = v146;
      operator delete(v146);
    }
  }
  __p[0] = &v152;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v28 = (__int128 *)v158;
LABEL_194:
  if (v28)
  {
    v159 = v28;
    operator delete(v28);
  }
}

void sub_1B413BDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 - 88) = &a11;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a11 = &a14;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void TRawSymbolOwnerData<Pointer64>::slide_to_segment_addresses(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *__p;
  _QWORD *v25;
  char v26;

  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(a2, a3, 0, &__p);
  if (a1 + 384 != a2 && *(_QWORD *)(a1 + 384) == *(_QWORD *)(a1 + 392))
    std::vector<CSCppSegmentRange>::__assign_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>((char *)(a1 + 384), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  v7 = __p;
  if (__p == v25)
    goto LABEL_22;
  adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer64>((char **)(a1 + 384), &__p);
  if ((a4 & 1) == 0)
  {
    adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer64>((char **)(a1 + 160), &__p);
    v8 = *(_QWORD *)(a1 + 160);
    v9 = *(unint64_t **)(a1 + 168);
    v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v8) >> 3));
    if (v9 == (unint64_t *)v8)
      v11 = 0;
    else
      v11 = v10;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CSCppSectionRange *,false>(v8, v9, (uint64_t)&v26, v11, 1);
  }
  adjustSymbolsToMatchSegmentDeltas<Pointer64>(a1 + 184, &__p);
  v12 = *(__n128 **)(a1 + 184);
  v13 = *(__n128 **)(a1 + 192);
  v14 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v13 - (char *)v12) >> 3));
  v15 = v13 == v12 ? 0 : v14;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>(v12, v13, (uint64_t)&v26, v15, 1);
  adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer64>,Pointer64>((char **)(a1 + 208), &__p);
  v16 = *(_QWORD *)(a1 + 208);
  v17 = *(__int128 **)(a1 + 216);
  v18 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v17 - v16) >> 3));
  v19 = v17 == (__int128 *)v16 ? 0 : v18;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,false>(v16, v17, (uint64_t)&v26, v19, 1);
  v20 = *(_QWORD *)(a1 + 240);
  v7 = __p;
  if (!v20 || __p >= v25)
  {
LABEL_22:
    if (!v7)
      return;
    goto LABEL_23;
  }
  v21 = *(_QWORD *)(a1 + 232);
  v22 = v21 + v20;
  v23 = (unint64_t *)__p;
  while (v21 < *v23 || v22 > v23[1] + *v23)
  {
    v23 += 3;
    if (v23 >= v25)
      goto LABEL_22;
  }
  *(_QWORD *)(a1 + 232) = v23[2] + v21;
  if (v7)
  {
LABEL_23:
    v25 = v7;
    operator delete(v7);
  }
}

void sub_1B413C04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  CSCppSegmentRange *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  char *v37;
  char *v38;
  unint64_t *v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  void *__p;
  char *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  char v50;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - *(_QWORD *)a1;
  if (v8 != *(_QWORD *)a1 && *(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&v47, v7, v8, v9 >> 5);
    v11 = *(const void **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (v12 - *(_QWORD *)a2) >> 5;
    v45 = 0;
    v46 = 0;
    __p = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&__p, v11, v12, v13);
    v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v14 != 32 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    {
      v15 = 126 - 2 * __clz((v48 - (_BYTE *)v47) >> 5);
      if (v48 == v47)
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)v47, (unint64_t *)v48, (uint64_t)&v50, v16, 1);
      v17 = 126 - 2 * __clz((v45 - (_BYTE *)__p) >> 5);
      if (v45 == __p)
        v18 = 0;
      else
        v18 = v17;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)__p, (unint64_t *)v45, (uint64_t)&v50, v18, 1);
      v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    }
    v19 = (unint64_t *)v47;
    v20 = (CSCppSegmentRange *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    if (v19 != (unint64_t *)v48 && v20 != (CSCppSegmentRange *)v45)
    {
      do
      {
        v21 = (const char *)*((_QWORD *)v20 + 3);
        if (!v21)
          v21 = (const char *)*((_QWORD *)v20 + 2);
        v22 = (const char *)v19[3];
        if (!v22)
          v22 = (const char *)v19[2];
        if (!strncmp(v21, v22, 0x10uLL))
          goto LABEL_24;
        if (CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v19))
        {
          v19 += 4;
          if (v19 == (unint64_t *)v48)
            break;
          continue;
        }
        if (!CSCppSegmentRange::is_skippable(v20))
        {
LABEL_24:
          v23 = *(_QWORD *)v20;
          v25 = *v19;
          v24 = v19[1];
          v26 = *(_QWORD *)v20 - *v19;
          v28 = (unint64_t *)a4[1];
          v27 = (unint64_t)a4[2];
          if ((unint64_t)v28 >= v27)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (_BYTE *)*a4) >> 3);
            v31 = v30 + 1;
            if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)*a4) >> 3);
            if (2 * v32 > v31)
              v31 = 2 * v32;
            if (v32 >= 0x555555555555555)
              v33 = 0xAAAAAAAAAAAAAAALL;
            else
              v33 = v31;
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a4 + 2), v33);
            v36 = (unint64_t *)&v34[24 * v30];
            *v36 = v25;
            v36[1] = v24;
            v36[2] = v26;
            v38 = (char *)*a4;
            v37 = (char *)a4[1];
            v39 = v36;
            if (v37 != *a4)
            {
              do
              {
                v40 = *(_OWORD *)(v37 - 24);
                *(v39 - 1) = *((_QWORD *)v37 - 1);
                *(_OWORD *)(v39 - 3) = v40;
                v39 -= 3;
                v37 -= 24;
              }
              while (v37 != v38);
              v37 = (char *)*a4;
            }
            v29 = (char *)(v36 + 3);
            *a4 = v39;
            a4[1] = v36 + 3;
            a4[2] = &v34[24 * v35];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v28 = v25;
            v28[1] = v24;
            v29 = (char *)(v28 + 3);
            v28[2] = v26;
          }
          a4[1] = v29;
          a3 |= v23 != v25;
          v19 += 4;
        }
        if (v19 == (unint64_t *)v48)
          break;
        v20 = (CSCppSegmentRange *)((char *)v20 + 32);
      }
      while (v20 != (CSCppSegmentRange *)v45);
    }
    if ((a3 & 1) != 0)
    {
      v41 = (unint64_t *)a4[1];
      v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (_BYTE *)*a4) >> 3));
      if (v41 == *a4)
        v43 = 0;
      else
        v43 = v42;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>((uint64_t)*a4, v41, (uint64_t)&v50, v43, 1);
    }
    else
    {
      a4[1] = *a4;
    }
    if (__p)
    {
      v45 = (char *)__p;
      operator delete(__p);
    }
    if (v47)
    {
      v48 = (char *)v47;
      operator delete(v47);
    }
  }
}

void sub_1B413C39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  const char *v17;
  const char *v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  char v22;
  BOOL v23;
  const char *v24;
  const char *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  const char *v29;
  int v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1))
        v6 = (const char *)*(a2 - 1);
      else
        v6 = (const char *)*(a2 - 2);
      if (a1[3])
        v7 = (const char *)a1[3];
      else
        v7 = (const char *)a1[2];
      v8 = strncmp(v6, v7, 0x10uLL);
      v10 = *(v2 - 4);
      v9 = v2 - 4;
      v11 = v10 < *a1;
      if (v8)
        v11 = v8 < 0;
      if (v11)
      {
        v13 = *(_OWORD *)a1;
        v12 = *((_OWORD *)a1 + 1);
        v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      v16 = a1 + 12;
      if (a1 + 12 == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v33 = v2;
      break;
  }
  while (1)
  {
    v20 = v16[2];
    v19 = v16[3];
    if (v19)
      v21 = (const char *)v16[3];
    else
      v21 = (const char *)v16[2];
    if (v15[3])
      v22 = (const char *)v15[3];
    else
      v22 = (const char *)v15[2];
    v23 = strncmp(v21, v22, 0x10uLL);
    v24 = *v16;
    v25 = *v16 < *v15;
    if (v23)
      v25 = v23 < 0;
    if (v25)
    {
      v34 = v16[1];
      v26 = v17;
      while (1)
      {
        v27 = (char *)a1 + v26;
        v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64)
          break;
        if (*((_QWORD *)v27 + 7))
          v29 = (const char *)*((_QWORD *)v27 + 7);
        else
          v29 = (const char *)*((_QWORD *)v27 + 6);
        v30 = strncmp(v21, v29, 0x10uLL);
        v31 = v24 < *((_QWORD *)v27 + 4);
        if (v30)
          v31 = v30 < 0;
        v26 -= 32;
        if (!v31)
        {
          v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      v32 = a1;
LABEL_33:
      v2 = v33;
      *v32 = v24;
      v32[1] = v34;
      v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8)
        return v16 + 4 == v33;
    }
    v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2)
      return 1;
  }
}

unsigned int *TDwarfInfoStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf32_compile_unit(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  unsigned int *result;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;

  v1 = *(unsigned int *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 < (v1 + 6))
    goto LABEL_29;
  result = (unsigned int *)(*(_QWORD *)a1 + v1);
  v8 = result[1];
  if ((unsigned __int16)v8 - 6 < 0xFFFFFFFC)
    return 0;
  v9 = *result;
  if ((_DWORD)v9 == -1)
    return 0;
  v10 = 11;
  if ((unsigned __int16)v8 >= 5u)
    v10 = 12;
  if (v9 + 4 < v10)
    return 0;
  v11 = (v1 + v9 + 4);
  if (v11 > v1 && v2 >= v11)
  {
    v13 = 7;
    if ((unsigned __int16)v8 < 5u)
      v13 = 10;
    if (*((_BYTE *)result + v13) != 8)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        return 0;
      v16 = 0;
      v3 = MEMORY[0x1E0C81028];
      v4 = "Compile unit with bad address_size\n";
      v5 = (uint8_t *)&v16;
      goto LABEL_4;
    }
    if ((unsigned __int16)v8 < 5u || (v8 & 0xFF0000) == 0x10000)
    {
      *(_DWORD *)(a1 + 8) = v11;
      return result;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v3 = MEMORY[0x1E0C81028];
      v4 = "Unsupported compile unit type\n";
      v5 = (uint8_t *)&v15;
      goto LABEL_4;
    }
  }
  else
  {
LABEL_29:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v3 = MEMORY[0x1E0C81028];
      v4 = "Out of bounds compile unit\n";
      v5 = (uint8_t *)&v14;
LABEL_4:
      _os_log_impl(&dword_1B40C5000, v3, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
    }
  }
  return 0;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(uint64_t result, unsigned int a2)
{
  _QWORD *exception;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(result + 24) < (unint64_t)a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Attempt to set cursor outside bounds", 36);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v6, &v4);
    Exception::Exception(v3, &v4);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v3);
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1B413CC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev_table@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  _QWORD *v5;
  CSCppDwarfAbbrevTable *v6;
  uint64_t result;
  unsigned int v8;
  CSCppDwarfAbbrev *v9;

  v4 = a1 + 4;
  v5 = operator new(0x58uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E67779A8;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  v5[10] = v4;
  v5[3] = &off_1E67779F8;
  v6 = (CSCppDwarfAbbrevTable *)(v5 + 3);
  *a2 = v5 + 3;
  a2[1] = v5;
  while (1)
  {
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    v8 = result;
    if (!(_DWORD)result)
      break;
    v9 = (CSCppDwarfAbbrev *)TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev(a1);
    CSCppDwarfAbbrevTable::set_abbrev_at(v6, v8, v9);
  }
  return result;
}

void sub_1B413CCEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void parse_dies<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7, uint64_t (***a8)(_QWORD, std::vector<std::string>::pointer), _QWORD *a9, _QWORD *a10, _QWORD *a11)
{
  uint64_t (***v11)(_QWORD, std::vector<std::string>::pointer);
  char v13;
  uint64_t v14;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t i;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  __int128 v63;
  const char *v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  const char *v77;
  _QWORD *v78;
  _QWORD *v79;
  __int128 *v80;
  void **v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v108;
  _OWORD *v109;
  _OWORD v112[2];
  __int128 *v113;
  char v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  _BYTE v123[32];
  uint64_t v124;
  __int128 v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  char *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void **v137[2];

  v11 = a8;
  v13 = a6;
  v14 = a4;
  v108 = *(_QWORD *)(a2 + 56);
  v109 = *(_OWORD **)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(std::__shared_weak_count **)(a2 + 88);
  v135 = v17;
  v136 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = *(_QWORD *)(v17 + 56);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a2 + 24))
  {
    while (1)
    {
      v22 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a2);
      if (!v22)
      {
        v27 = v130;
        if (v129 != v130)
        {
          --v130;
          if (v129 != v27 - 1)
          {
            v28 = *(v27 - 2);
            if (v28)
            {
              v29 = v27 - 3;
              do
              {
                if (!*(_BYTE *)(v28 + 88))
                  break;
                v130 = v29 + 1;
                if (v29 + 1 == v129)
                  break;
                v30 = *v29--;
                v28 = v30;
              }
              while (v30);
            }
          }
        }
        goto LABEL_163;
      }
      v23 = *(_QWORD *)(v135 + 8);
      if (v22 >= (*(_QWORD *)(v135 + 16) - v23) >> 3 || (v24 = *(_QWORD *)(v23 + 8 * v22)) == 0)
      {
LABEL_167:
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        break;
      }
      v25 = *(unsigned __int8 *)(v24 + 12);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24) == 1)
      {
        *(_WORD *)(v21 + 76) = 0;
        *(_QWORD *)(v21 + 128) = *(_QWORD *)(v21 + 120);
        *(_QWORD *)(v21 + 16) = -1;
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, v14, *(unsigned __int16 *)(a2 + 36));
        LODWORD(v116) = 0;
        for (i = parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>(v21, a2, a3, &v116);
              i;
              i = parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>(v21, i, a3, &v116))
        {
          ;
        }
        if ((*(_BYTE *)(v21 + 76) & 0xC) == 0 || (*(_BYTE *)(v21 + 76) & 1) == 0)
        {
          if (v25)
          {
            v34 = v130;
            if (v130 < (uint64_t *)v131)
              goto LABEL_41;
            v35 = v130 - v129;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v36 = (v131 - (char *)v129) >> 2;
            if (v36 <= v35 + 1)
              v36 = v35 + 1;
            if ((unint64_t)(v131 - (char *)v129) >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v37);
            else
              v38 = 0;
            v55 = (uint64_t *)&v38[8 * v35];
            *v55 = 0;
            v39 = v55 + 1;
            v72 = v129;
            v56 = v130;
            if (v130 != v129)
            {
              do
              {
                v73 = *--v56;
                *--v55 = v73;
              }
              while (v56 != v72);
              goto LABEL_159;
            }
            goto LABEL_160;
          }
        }
        else
        {
          v127 = 0;
          v128 = 0;
          v126 = 0;
          v40 = resolve_parsed_data_names<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v21, &v128, &v127);
          v126 = v40;
          if ((*(_WORD *)(v21 + 76) & 2) != 0)
          {
            if ((*(_WORD *)(v21 + 76) & 0x8000) != 0)
            {
              v41 = *(_QWORD *)v21;
              v42 = *(_QWORD *)v21 + *(unsigned int *)(v21 + 80);
            }
            else
            {
              v41 = *(_QWORD *)v21;
              v42 = *(_QWORD *)(v21 + 8);
            }
            v49 = (_QWORD *)(v42 - v41);
            if (v49)
            {
              v104 = v49;
              v126 = v40 | 0x100;
LABEL_66:
              v50 = (_QWORD *)(*(_QWORD *)v21 + a1);
              if (a7)
                v50 = (_QWORD *)TAddressRelocator<Pointer64>::relocate(a7, *(_QWORD *)v21 + a1);
              v125 = 0uLL;
              if (*(_DWORD *)(v24 + 8) == 29)
              {
                v51 = 0;
                if (TDwarfAbbrevData<Dwarf<Dwarf32,Pointer64,LittleEndian>>::has_inlined_info(v21, *(unsigned __int16 *)(a2 + 36))&& (v13 & 1) == 0)
                {
                  v52 = *(unsigned __int16 *)(a2 + 36);
                  v53 = *(unsigned __int16 *)(v21 + 76);
                  if (v52 < 5)
                  {
                    if ((v53 & 0x400) != 0 && *(_DWORD *)(v21 + 64))
                      goto LABEL_117;
LABEL_118:
                    v77 = 0;
                  }
                  else
                  {
                    if ((v53 & 0x400) == 0)
                      goto LABEL_118;
LABEL_117:
                    v77 = path_from_file_index<Pointer64>(&v132, *(_DWORD *)(v21 + 64), *(unsigned int *)(a2 + 8), a5, v52);
                    v53 = *(unsigned __int16 *)(v21 + 76);
                  }
                  *(_QWORD *)&v125 = v77;
                  *((int8x8_t *)&v125 + 1) = vbic_s8(*(int8x8_t *)(v21 + 68), (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v53), (int8x8_t)0x100000000800)));
                  v51 = 1;
                }
              }
              else
              {
                v51 = 0;
              }
              v78 = *(_QWORD **)(v21 + 120);
              v79 = *(_QWORD **)(v21 + 128);
              if (v78 == v79)
              {
                v90 = v126;
                v116 = v50;
                v117 = v104;
                v118 = 0;
                v119 = 0;
                v120 = v128;
                v121 = v127;
                v124 = 0;
                v122 = 0u;
                memset(v123, 0, 25);
                if (v51)
                {
                  v122 = v125;
                  v90 = v126 | 0x80000000;
                }
                HIDWORD(v119) = v90;
                record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>(&v116, 1, v24, a9, &v129);
                v11 = a8;
                v13 = a6;
                v137[0] = (void **)v123;
                std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v137);
                v14 = a4;
              }
              else
              {
                v116 = 0;
                v117 = 0;
                v118 = 0;
                if (v51)
                  v80 = &v125;
                else
                  v80 = 0;
                do
                {
                  v137[0] = 0;
                  v81 = (void **)(*v78 + a1);
                  if (a7)
                    v81 = (void **)TAddressRelocator<Pointer64>::relocate(a7, (unint64_t)v81);
                  v137[0] = v81;
                  v115 = 0;
                  v82 = v78[1] - *v78;
                  v115 = v82;
                  if (v82)
                  {
                    v113 = v80;
                    v83 = v117;
                    if ((unint64_t)v117 >= v118)
                    {
                      v87 = std::vector<TRawSymbol<Pointer64>>::__emplace_back_slow_path<TRawSymbol<Pointer64>::dwarf_ranges_tag,unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>((uint64_t *)&v116, (uint64_t)&v114, v137, &v115, &v128, &v127, &v126, &v113);
                    }
                    else
                    {
                      v85 = v127;
                      v84 = v128;
                      v86 = v126;
                      *v117 = v81;
                      v83[1] = v82;
                      v83[2] = 0;
                      v83[3] = 0;
                      v83[4] = v84;
                      v83[5] = v85;
                      *((_OWORD *)v83 + 3) = 0u;
                      v83[12] = 0;
                      *((_OWORD *)v83 + 4) = 0u;
                      *(_OWORD *)((char *)v83 + 73) = 0u;
                      if (v51)
                      {
                        *((_OWORD *)v83 + 3) = v125;
                        v86 |= 0x80000000;
                      }
                      *((_DWORD *)v83 + 7) = v86;
                      *((_BYTE *)v83 + 88) = 1;
                      v87 = (uint64_t)(v83 + 13);
                    }
                    v117 = (_QWORD *)v87;
                  }
                  v78 += 2;
                }
                while (v78 != v79);
                record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>(v116, 0x4EC4EC4EC4EC4EC5 * (v117 - v116), v24, a9, &v129);
                v11 = a8;
                v13 = a6;
                v14 = a4;
                if (v25)
                {
                  v88 = v130;
                  if (v130 >= (uint64_t *)v131)
                  {
                    v91 = v130 - v129;
                    if ((unint64_t)(v91 + 1) >> 61)
                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                    v92 = (v131 - (char *)v129) >> 2;
                    if (v92 <= v91 + 1)
                      v92 = v91 + 1;
                    if ((unint64_t)(v131 - (char *)v129) >= 0x7FFFFFFFFFFFFFF8)
                      v93 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v93 = v92;
                    if (v93)
                      v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v93);
                    else
                      v94 = 0;
                    v95 = (uint64_t *)&v94[8 * v91];
                    *v95 = 0;
                    v89 = v95 + 1;
                    v97 = v129;
                    v96 = v130;
                    if (v130 != v129)
                    {
                      do
                      {
                        v98 = *--v96;
                        *--v95 = v98;
                      }
                      while (v96 != v97);
                      v96 = v129;
                    }
                    v129 = v95;
                    v130 = v89;
                    v131 = &v94[8 * v93];
                    if (v96)
                      operator delete(v96);
                  }
                  else
                  {
                    *v130 = 0;
                    v89 = v88 + 1;
                  }
                  v130 = v89;
                }
                v137[0] = (void **)&v116;
                std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v137);
              }
              goto LABEL_163;
            }
          }
          else if (*(_QWORD *)(v21 + 120) != *(_QWORD *)(v21 + 128))
          {
            v104 = 0;
            goto LABEL_66;
          }
          if (v25)
          {
            v54 = v130;
            if (v130 >= (uint64_t *)v131)
            {
              v74 = v130 - v129;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 61)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              v76 = v131 - (char *)v129;
              if ((v131 - (char *)v129) >> 2 > v75)
                v75 = v76 >> 2;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v75;
              if (v37)
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v37);
              else
                v38 = 0;
              v55 = (uint64_t *)&v38[8 * v74];
              *v55 = 0;
              v39 = v55 + 1;
              v99 = v129;
              v56 = v130;
              if (v130 != v129)
              {
                do
                {
                  v100 = *--v56;
                  *--v55 = v100;
                }
                while (v56 != v99);
                goto LABEL_159;
              }
              goto LABEL_160;
            }
            *v130 = 0;
            v130 = v54 + 1;
          }
        }
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24) == 2)
        {
          *(_WORD *)(v21 + 76) = 0;
          *(_QWORD *)(v21 + 128) = *(_QWORD *)(v21 + 120);
          *(_QWORD *)(v21 + 16) = -1;
          *(_QWORD *)(v21 + 104) = 0;
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, v14, *(unsigned __int16 *)(a2 + 36));
          TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_compilation_unit_pc_ranges(v24);
          if (v25)
          {
            v31 = v130;
            if (v130 >= (uint64_t *)v131)
            {
              v45 = v130 - v129;
              if ((unint64_t)(v45 + 1) >> 61)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              v46 = (v131 - (char *)v129) >> 2;
              if (v46 <= v45 + 1)
                v46 = v45 + 1;
              if ((unint64_t)(v131 - (char *)v129) >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v46;
              if (v47)
                v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v47);
              else
                v48 = 0;
              v59 = (uint64_t *)&v48[8 * v45];
              *v59 = 0;
              v32 = v59 + 1;
              v61 = v129;
              v60 = v130;
              if (v130 != v129)
              {
                do
                {
                  v62 = *--v60;
                  *--v59 = v62;
                }
                while (v60 != v61);
                v60 = v129;
              }
              v129 = v59;
              v130 = v32;
              v131 = &v48[8 * v47];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *v130 = 0;
              v32 = v31 + 1;
            }
            v130 = v32;
          }
          if ((v13 & 1) == 0)
          {
            v133 = v132;
            v63 = v109[1];
            v112[0] = *v109;
            v112[1] = v63;
            v64 = "";
            if ((*(_BYTE *)(v21 + 76) & 0x20) != 0)
              v64 = *(const char **)(v21 + 40);
            parse_line_numbers<Dwarf<Dwarf32,Pointer64,LittleEndian>>((uint64_t)v112, v108, *(_DWORD *)(v21 + 52), v21 + 108, v64, a1, a5, a7, v11, (uint64_t)&v132, a10);
            if (*(_QWORD *)(v21 + 144))
            {
              v116 = *(_QWORD **)(v21 + 144);
              v65 = *(_QWORD **)(v21 + 120);
              v66 = *(_QWORD **)(v21 + 128);
              if (v65 == v66)
              {
                v68 = *(unsigned __int16 *)(v21 + 76);
                if ((~v68 & 3) == 0)
                {
                  *(_QWORD *)&v125 = 0;
                  v69 = *(_QWORD *)v21 + a1;
                  if (a7)
                  {
                    v69 = TAddressRelocator<Pointer64>::relocate(a7, v69);
                    LOWORD(v68) = *(_WORD *)(v21 + 76);
                  }
                  *(_QWORD *)&v125 = v69;
                  v137[0] = 0;
                  if ((v68 & 0x8000) != 0)
                  {
                    v70 = *(_QWORD *)v21;
                    v71 = *(_QWORD *)v21 + *(unsigned int *)(v21 + 80);
                  }
                  else
                  {
                    v70 = *(_QWORD *)v21;
                    v71 = *(_QWORD *)(v21 + 8);
                  }
                  v137[0] = (void **)(v71 - v70);
                  std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>(a11, &v125, (uint64_t *)v137, (uint64_t *)&v116);
                }
              }
              else
              {
                do
                {
                  *(_QWORD *)&v125 = 0;
                  v67 = *v65 + a1;
                  if (a7)
                    v67 = TAddressRelocator<Pointer64>::relocate(a7, v67);
                  *(_QWORD *)&v125 = v67;
                  v137[0] = 0;
                  v137[0] = (void **)(v65[1] - *v65);
                  std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>(a11, &v125, (uint64_t *)v137, (uint64_t *)&v116);
                  v65 += 2;
                }
                while (v65 != v66);
              }
            }
          }
          goto LABEL_163;
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, v14, *(unsigned __int16 *)(a2 + 36));
        if (v25)
        {
          v34 = v130;
          if (v130 < (uint64_t *)v131)
          {
LABEL_41:
            *v34 = 0;
            v39 = v34 + 1;
LABEL_162:
            v130 = v39;
            goto LABEL_163;
          }
          v43 = v130 - v129;
          if ((unint64_t)(v43 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v44 = (v131 - (char *)v129) >> 2;
          if (v44 <= v43 + 1)
            v44 = v43 + 1;
          if ((unint64_t)(v131 - (char *)v129) >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v44;
          if (v37)
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v37);
          else
            v38 = 0;
          v55 = (uint64_t *)&v38[8 * v43];
          *v55 = 0;
          v39 = v55 + 1;
          v57 = v129;
          v56 = v130;
          if (v130 != v129)
          {
            do
            {
              v58 = *--v56;
              *--v55 = v58;
            }
            while (v56 != v57);
LABEL_159:
            v56 = v129;
          }
LABEL_160:
          v129 = v55;
          v130 = v39;
          v131 = &v38[8 * v37];
          if (v56)
            operator delete(v56);
          goto LABEL_162;
        }
      }
LABEL_163:
      if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a2 + 24))
        goto LABEL_167;
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  v101 = v136;
  if (v136)
  {
    v102 = (unint64_t *)&v136->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
}

void sub_1B413D75C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 152);
  if (v4)
  {
    *(_QWORD *)(v1 - 144) = v4;
    operator delete(v4);
  }
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void std::vector<TRawSourceInfo<Pointer64>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[40 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 40);
        v14 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        v10 -= 40;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1B413DB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer32,LittleEndian>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  _QWORD *exception;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *((unsigned int *)a1 + 2);
  v2 = a1[3];
  if (v2 <= v1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Cursor overflow, attempt to read ULEB", 37);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v16, &v14);
    Exception::Exception(v13, &v14);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v13);
  }
  v3 = *a1;
  v4 = (char *)(*a1 + v1);
  v6 = *v4;
  v5 = v4 + 1;
  v7 = v6;
  if (v6 < 0)
  {
    v8 = v3 + v2;
    v7 &= 0x7Fu;
    v9 = 7;
    do
    {
      if ((unint64_t)v5 >= v8)
        break;
      v10 = *v5++;
      v7 |= (unint64_t)(v10 & 0x7F) << v9;
      v9 += 7;
    }
    while (v10 < 0);
  }
  *((_DWORD *)a1 + 2) = (_DWORD)v5 - v3;
  return v7;
}

void sub_1B413DC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAbbrevStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::abbrev(uint64_t *a1)
{
  int v2;
  char v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  void *__p;
  char *v25;
  char *v26;

  v2 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
  v3 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(a1);
  __p = 0;
  v25 = 0;
  v26 = 0;
  do
  {
    v4 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    v5 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    v6 = v5;
    if (v4)
      v7 = v5 == 0;
    else
      v7 = 1;
    v8 = !v7;
    if (!v7)
    {
      v9 = v25;
      if (v25 >= v26)
      {
        v11 = (v25 - (_BYTE *)__p) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v13 = v26 - (_BYTE *)__p;
        if ((v26 - (_BYTE *)__p) >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v26, v14);
        v17 = &v15[4 * v11];
        *(_WORD *)v17 = v4;
        *((_WORD *)v17 + 1) = v6;
        v19 = (char *)__p;
        v18 = v25;
        v20 = v17;
        if (v25 != __p)
        {
          do
          {
            v21 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          while (v18 != v19);
          v18 = (char *)__p;
        }
        v10 = v17 + 4;
        __p = v20;
        v25 = v17 + 4;
        v26 = &v15[4 * v16];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_WORD *)v25 = v4;
        *((_WORD *)v9 + 1) = v5;
        v10 = v9 + 4;
      }
      v25 = v10;
    }
    if (v6 == 33)
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
  }
  while ((v8 & 1) != 0);
  if (v2 <= 28)
  {
    if (v2 != 3)
    {
      if (v2 == 17 && has_minimum_source_info_attributes(&__p))
      {
        v22 = operator new();
        TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSourceInfoAbbrev(v22, 17, v3, &__p, (uint64_t)(a1 + 4));
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_33:
    v22 = operator new();
    TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSymbolAbbrev(v22, v2, v3, &__p, (uint64_t)(a1 + 4));
    goto LABEL_35;
  }
  if (v2 == 46 || v2 == 29)
    goto LABEL_33;
LABEL_34:
  v22 = operator new();
  TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSkipAbbrev(v22, v2, v3, &__p);
LABEL_35:
  if (__p)
  {
    v25 = (char *)__p;
    operator delete(__p);
  }
  return v22;
}

void sub_1B413DEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1B5E36940](v11, 0x10A1C400922EF30);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E67779A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E67779A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t std::__shared_ptr_emplace<TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TDwarfAbbrevTable<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfAbbrevTable(CSCppDwarfAbbrevTable *a1)
{
  CSCppDwarfAbbrevTable::~CSCppDwarfAbbrevTable(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((unsigned int *)a1 + 2);
  if (a1[3] <= v1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint8", 38);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *a1;
  *((_DWORD *)a1 + 2) = v1 + 1;
  return *(unsigned __int8 *)(v2 + v1);
}

void sub_1B413E050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSymbolAbbrev(uint64_t a1, int a2, char a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  char **v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v25;
  int v26;
  uint64_t action_for_data;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  int v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = *a4;
  *a4 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a4[1];
  a4[1] = v6;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a4[2];
  a4[2] = v7;
  *(_QWORD *)a1 = &off_1E6777A30;
  *(_QWORD *)(a1 + 64) = a5;
  *(_WORD *)(a1 + 72) = 0;
  v8 = *(unsigned __int16 **)(a1 + 16);
  if (v8 != *(unsigned __int16 **)(a1 + 24))
  {
    v9 = (char **)(a1 + 40);
    v10 = (_QWORD *)(a1 + 56);
    do
    {
      v11 = *v8;
      if (v11 <= 0x54)
      {
        if (*v8 <= 0x11u)
        {
          if (v11 != 3)
          {
            if (v11 == 17)
            {
              *(_WORD *)(a1 + 72) |= 1u;
              v23 = v8[1];
              if ((v23 - 41) < 4 || v23 == 27)
              {
                v12 = operator new();
                v25 = *(_QWORD *)(a1 + 64);
                v26 = v8[1];
                *(_QWORD *)v12 = &off_1E6777AC8;
                *(_QWORD *)(v12 + 8) = v25;
                *(_QWORD *)(v12 + 16) = v25 + 76;
                *(_WORD *)(v12 + 24) = 1;
                *(_QWORD *)(v12 + 32) = v25;
                *(_QWORD *)(v12 + 40) = 0;
                *(_DWORD *)(v12 + 48) = v26;
                goto LABEL_49;
              }
              if (v23 == 1)
              {
                v12 = operator new();
                v54 = *(_QWORD *)(a1 + 64);
                *(_QWORD *)v12 = &off_1E6777A78;
                *(_QWORD *)(v12 + 8) = v54;
                *(_QWORD *)(v12 + 16) = v54 + 76;
                v36 = 1;
                goto LABEL_37;
              }
            }
            else
            {
LABEL_46:
              v23 = v8[1];
            }
            action_for_data = skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v23);
            goto LABEL_48;
          }
          *(_WORD *)(a1 + 72) |= 8u;
          v20 = *(_QWORD *)(a1 + 64);
          v21 = v20 + 32;
          v22 = 8;
          goto LABEL_35;
        }
        if (v11 == 18)
        {
          v37 = *(_WORD *)(a1 + 72);
          *(_WORD *)(a1 + 72) = v37 | 2;
          v28 = v8[1];
          if ((v28 - 41) < 4 || v28 == 27)
          {
            v12 = operator new();
            v39 = *(_QWORD *)(a1 + 64);
            v40 = v8[1];
            *(_QWORD *)v12 = &off_1E6777AC8;
            *(_QWORD *)(v12 + 8) = v39 + 8;
            *(_QWORD *)(v12 + 16) = v39 + 76;
            *(_WORD *)(v12 + 24) = 2;
            *(_QWORD *)(v12 + 32) = v39;
            *(_QWORD *)(v12 + 40) = 0;
            *(_DWORD *)(v12 + 48) = v40;
            goto LABEL_49;
          }
          if (v28 == 1)
          {
            v12 = operator new();
            v55 = *(_QWORD *)(a1 + 64);
            *(_QWORD *)v12 = &off_1E6777A78;
            *(_QWORD *)(v12 + 8) = v55 + 8;
            *(_QWORD *)(v12 + 16) = v55 + 76;
            v36 = 2;
            goto LABEL_37;
          }
          v32 = -32766;
          *(_WORD *)(a1 + 72) = v37 | 0x8002;
          v56 = *(_QWORD *)(a1 + 64);
          v30 = v56 + 76;
          v31 = v56 + 80;
LABEL_33:
          action_for_data = read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v28, v30, v32, v31);
        }
        else
        {
          if (v11 == 49)
          {
            *(_WORD *)(a1 + 72) |= 0x200u;
            v15 = *(_QWORD *)(a1 + 64);
            v16 = v15 + 60;
            v17 = 0x4000;
            v18 = 512;
          }
          else
          {
            if (v11 != 71)
              goto LABEL_46;
            *(_WORD *)(a1 + 72) |= 0x10u;
            v15 = *(_QWORD *)(a1 + 64);
            v16 = v15 + 48;
            v17 = 0x2000;
            v18 = 16;
          }
          action_for_data = read_action_for_ref_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8[1], v15 + 76, v18, v17, v16);
        }
      }
      else
      {
        if (*v8 <= 0x6Du)
        {
          switch(*v8)
          {
            case 'U':
              v12 = operator new();
              v13 = *(_QWORD *)(a1 + 64);
              v14 = v8[1];
              *(_QWORD *)v12 = &off_1E6777FC8;
              *(_QWORD *)(v12 + 8) = v13;
              *(_DWORD *)(v12 + 16) = v14;
              break;
            case 'W':
              *(_WORD *)(a1 + 72) |= 0x1000u;
              v28 = v8[1];
              v34 = *(_QWORD *)(a1 + 64);
              v30 = v34 + 76;
              v31 = v34 + 72;
              v32 = 4096;
              goto LABEL_33;
            case 'X':
              *(_WORD *)(a1 + 72) |= 0x400u;
              v28 = v8[1];
              v33 = *(_QWORD *)(a1 + 64);
              v30 = v33 + 76;
              v31 = v33 + 64;
              v32 = 1024;
              goto LABEL_33;
            case 'Y':
              *(_WORD *)(a1 + 72) |= 0x800u;
              v28 = v8[1];
              v29 = *(_QWORD *)(a1 + 64);
              v30 = v29 + 76;
              v31 = v29 + 68;
              v32 = 2048;
              goto LABEL_33;
            default:
              goto LABEL_46;
          }
          goto LABEL_49;
        }
        if (*v8 <= 0x3FE2u)
        {
          if (v11 != 110 && v11 != 8199)
            goto LABEL_46;
          *(_WORD *)(a1 + 72) |= 4u;
          v20 = *(_QWORD *)(a1 + 64);
          v21 = v20 + 24;
          v22 = 4;
LABEL_35:
          action_for_data = read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8[1], v20 + 76, v22, v21, v20 + 108);
          goto LABEL_48;
        }
        if (v11 == 16355)
        {
          *(_WORD *)(a1 + 72) |= 0x80u;
          v12 = operator new();
          v35 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)v12 = &off_1E67782E8;
          *(_QWORD *)(v12 + 8) = v35 + 56;
          *(_QWORD *)(v12 + 16) = v35 + 76;
          v36 = 128;
LABEL_37:
          *(_WORD *)(v12 + 24) = v36;
          goto LABEL_49;
        }
        if (v11 != 16359)
          goto LABEL_46;
        action_for_data = read_action_for_flag_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8[1], *(_QWORD *)(a1 + 64) + 76, 256, *(_QWORD *)(a1 + 64) + 57);
      }
LABEL_48:
      v12 = action_for_data;
LABEL_49:
      v41 = *(uint64_t **)(a1 + 40);
      if (v41 != *(uint64_t **)(a1 + 48)
        && (v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12), v41 = *(uint64_t **)(a1 + 48), v42)
        && (v43 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v41 - 1) + 32))(*(v41 - 1)),
            v41 = *(uint64_t **)(a1 + 48),
            v43))
      {
        *(_DWORD *)(*(v41 - 1) + 8) += *(_DWORD *)(v12 + 8);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      else
      {
        if ((unint64_t)v41 >= *v10)
        {
          v45 = ((char *)v41 - *v9) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v46 = *v10 - (_QWORD)*v9;
          v47 = v46 >> 2;
          if (v46 >> 2 <= (unint64_t)(v45 + 1))
            v47 = v45 + 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
            v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v48);
          else
            v49 = 0;
          v50 = (uint64_t *)&v49[8 * v45];
          *v50 = v12;
          v44 = v50 + 1;
          v52 = *(char **)(a1 + 40);
          v51 = *(char **)(a1 + 48);
          if (v51 != v52)
          {
            do
            {
              v53 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *--v50 = v53;
            }
            while (v51 != v52);
            v51 = *v9;
          }
          *(_QWORD *)(a1 + 40) = v50;
          *(_QWORD *)(a1 + 48) = v44;
          *(_QWORD *)(a1 + 56) = &v49[8 * v48];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v41 = v12;
          v44 = v41 + 1;
        }
        *(_QWORD *)(a1 + 48) = v44;
      }
      v8 += 2;
    }
    while (v8 != *(unsigned __int16 **)(a1 + 24));
  }
  return a1;
}

void sub_1B413E648(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev *v1;

  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

uint64_t skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  uint64_t result;
  int v2;
  uint64_t (**v3)();
  _QWORD *exception;
  _QWORD *v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  _BYTE v9[256];

  switch(a1)
  {
    case 1:
    case 7:
    case 20:
    case 32:
    case 36:
      result = operator new();
      *(_QWORD *)result = &off_1E6777B18;
      v2 = 8;
      goto LABEL_9;
    case 3:
      result = operator new();
      v3 = &off_1E6777C08;
      goto LABEL_17;
    case 4:
      result = operator new();
      v3 = &off_1E6777C58;
      goto LABEL_17;
    case 5:
    case 18:
    case 38:
    case 42:
      result = operator new();
      *(_QWORD *)result = &off_1E6777B18;
      v2 = 2;
      goto LABEL_9;
    case 6:
    case 14:
    case 19:
    case 23:
    case 28:
    case 29:
    case 31:
    case 40:
    case 44:
      result = operator new();
      *(_QWORD *)result = &off_1E6777B18;
      v2 = 4;
      goto LABEL_9;
    case 8:
      result = operator new();
      v3 = &off_1E6777CA8;
      goto LABEL_17;
    case 9:
    case 24:
      result = operator new();
      v3 = &off_1E6777CF8;
      goto LABEL_17;
    case 10:
      result = operator new();
      v3 = &off_1E6777BB8;
      goto LABEL_17;
    case 11:
    case 12:
    case 17:
    case 37:
    case 41:
      result = operator new();
      *(_QWORD *)result = &off_1E6777B18;
      v2 = 1;
      goto LABEL_9;
    case 13:
    case 15:
    case 21:
    case 26:
    case 27:
    case 34:
    case 35:
      result = operator new();
      v3 = &off_1E6777D48;
      goto LABEL_17;
    case 16:
      result = operator new();
      v3 = &off_1E6777B68;
LABEL_17:
      *(_QWORD *)result = v3;
      break;
    case 22:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"DW_FORM_indirect not handled yet... ", 36);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, &v7);
      Exception::Exception(v6, &v7);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v6);
    case 25:
    case 33:
      result = operator new();
      *(_QWORD *)result = &off_1E6777B18;
      *(_DWORD *)(result + 8) = 0;
      break;
    case 30:
      result = operator new();
      *(_QWORD *)result = &off_1E6777B18;
      *(_DWORD *)(result + 8) = 16;
      break;
    case 39:
    case 43:
      result = operator new();
      *(_QWORD *)result = &off_1E6777B18;
      v2 = 3;
LABEL_9:
      *(_DWORD *)(result + 8) = v2;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Unhandled dwarf attribute ", 26);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, &v7);
      Exception::Exception(v6, &v7);
      v5 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v5, (uint64_t)v6);
  }
  return result;
}

void sub_1B413E9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v8)();
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  switch(a1)
  {
    case 5:
      result = operator new();
      v8 = &off_1E6777DE8;
      goto LABEL_10;
    case 6:
      result = operator new();
      v8 = &off_1E6777E38;
      goto LABEL_10;
    case 7:
      result = operator new();
      v8 = &off_1E6777E88;
      goto LABEL_10;
    case 8:
    case 9:
    case 10:
    case 12:
    case 14:
      goto LABEL_11;
    case 11:
      result = operator new();
      v8 = &off_1E6777D98;
      goto LABEL_10;
    case 13:
      result = operator new();
      v8 = &off_1E6777F78;
      goto LABEL_10;
    case 15:
      result = operator new();
      v8 = &off_1E6777F28;
      goto LABEL_10;
    default:
      if (a1 != 23)
      {
LABEL_11:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled form in read data binding ", 36);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
        Exception::Exception(v10, &v11);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v10);
      }
      result = operator new();
      v8 = &off_1E6777ED8;
LABEL_10:
      *(_QWORD *)result = v8;
      *(_QWORD *)(result + 8) = a4;
      *(_QWORD *)(result + 16) = a2;
      *(_WORD *)(result + 24) = a3;
      return result;
  }
}

void sub_1B413EC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _QWORD *exception;
  uint64_t (**v12)();
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 > 36)
  {
    if ((a1 - 37) < 4)
    {
LABEL_3:
      result = operator new();
      *(_QWORD *)result = &off_1E67780B8;
      *(_QWORD *)(result + 8) = a4;
      *(_QWORD *)(result + 16) = a2;
      *(_WORD *)(result + 24) = a3;
      *(_QWORD *)(result + 32) = a5;
      *(_DWORD *)(result + 40) = a1;
      return result;
    }
LABEL_7:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Unhandled form in read string binding ", 38);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v16, &v14);
    Exception::Exception(v13, &v14);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v13);
  }
  switch(a1)
  {
    case 8:
      result = operator new();
      v12 = &off_1E6778068;
      break;
    case 14:
      result = operator new();
      v12 = &off_1E6778018;
      break;
    case 26:
      goto LABEL_3;
    default:
      goto LABEL_7;
  }
  *(_QWORD *)result = v12;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = a3;
  return result;
}

void sub_1B413EDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_ref_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1, uint64_t a2, __int16 a3, __int16 a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (**v10)();
  _QWORD *exception;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  switch(a1)
  {
    case 16:
      result = operator new();
      *(_QWORD *)result = &off_1E6778108;
      *(_QWORD *)(result + 8) = a5;
      *(_QWORD *)(result + 16) = a2;
      *(_WORD *)(result + 24) = a4 | a3;
      return result;
    case 17:
      result = operator new();
      v10 = &off_1E6778158;
      goto LABEL_8;
    case 18:
      result = operator new();
      v10 = &off_1E67781A8;
      goto LABEL_8;
    case 19:
      result = operator new();
      v10 = &off_1E67781F8;
      goto LABEL_8;
    case 20:
      result = operator new();
      v10 = &off_1E6778248;
      goto LABEL_8;
    case 21:
      result = operator new();
      v10 = &off_1E6778298;
LABEL_8:
      *(_QWORD *)result = v10;
      *(_QWORD *)(result + 8) = a5;
      *(_QWORD *)(result + 16) = a2;
      *(_WORD *)(result + 24) = a3;
      return result;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Unhandled form in read ref binding ", 35);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15, &v13);
      Exception::Exception(v12, &v13);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v12);
  }
}

void sub_1B413EFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_flag_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v8)();
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == 25)
  {
    result = operator new();
    v8 = &off_1E6778388;
  }
  else
  {
    if (a1 != 12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled form in read flag binding ", 36);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }
    result = operator new();
    v8 = &off_1E6778338;
  }
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = a3;
  return result;
}

void sub_1B413F13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSymbolAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 1;
}

void TDwarfReadDW_FORM_AddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_AddrAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_AddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(result);
    **(_QWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 8) > *(_QWORD *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read dwarf_address", 46);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(_QWORD *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 8;
  return v2;
}

void sub_1B413F2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_AddrxAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;
  _OWORD *v8;
  __int128 v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v13[2];

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 104))
  {
    *v4 = v6 | v5;
    v8 = (_OWORD *)v3[9];
    v9 = v8[1];
    v13[0] = *v8;
    v13[1] = v9;
    v10 = *(_DWORD *)(a1 + 48);
    switch(v10)
    {
      case ')':
        v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(v3);
        goto LABEL_12;
      case '*':
        v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16((uint64_t)v3);
        goto LABEL_12;
      case '+':
        v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes((uint64_t)v3);
        goto LABEL_12;
      case ',':
        v11 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32((uint64_t)v3);
LABEL_12:
        v12 = v11;
        break;
      default:
        if (v10 == 27)
          v12 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
        else
          v12 = 0;
        break;
    }
    result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index((uint64_t)v13, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 104), v12);
    **(_QWORD **)(a1 + 8) = result;
  }
  else
  {
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
    *(_QWORD *)(a1 + 40) = result;
  }
  return result;
}

uint64_t TDwarfReadDW_FORM_AddrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action_stage2(uint64_t result, uint64_t *a2)
{
  _WORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD v9[2];

  v2 = *(_WORD **)(result + 16);
  v3 = (unsigned __int16)*v2;
  v4 = *(unsigned __int16 *)(result + 24);
  if ((v4 & v3) == 0)
  {
    v5 = result;
    v6 = *a2;
    *v2 = v4 | v3;
    v7 = *(_OWORD **)(v6 + 72);
    v8 = v7[1];
    v9[0] = *v7;
    v9[1] = v8;
    result = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index((uint64_t)v9, *(_DWORD *)(*(_QWORD *)(result + 32) + 104), *(_DWORD *)(result + 40));
    **(_QWORD **)(v5 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  do
  {
    if (*(_QWORD *)(result + 24) <= (unint64_t)v1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Cursor overflow, attempt to skip ULEB", 37);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v7, &v5);
      Exception::Exception(v4, &v5);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v4);
    }
    v2 = v1++;
  }
  while (*(char *)(*(_QWORD *)result + v2) < 0);
  *(_DWORD *)(result + 8) = v1;
  return result;
}

void sub_1B413F56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  unint64_t v7;
  _QWORD *exception;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  _BYTE v15[256];

  v6 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::length_from_header(a1, a2);
  if (a3 >> 29)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Base relative index overflow in TDwarfAddressTableStream", 56);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v12);
  }
  if (8 * a3 > v6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Base relative index not in bounds of current address table in TDwarfAddressTableStream", 86);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    v10 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v10, (uint64_t)v12);
  }
  v7 = 8 * a3 + a2;
  if (*(_QWORD *)(a1 + 24) < v7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Offset not in bounds of TDwarfAddressTableStream", 48);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
    Exception::Exception(v12, &v13);
    v11 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v11, (uint64_t)v12);
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, v7);
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(a1);
}

void sub_1B413F768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 2) > *(_QWORD *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint16", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(unsigned __int16 *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 2;
  return v2;
}

void sub_1B413F89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 3) > *(_QWORD *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read three bytes", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(_DWORD *)(*(_QWORD *)a1 + v1) & 0xFFFFFF;
  *(_DWORD *)(a1 + 8) = v1 + 3;
  return v2;
}

void sub_1B413F9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 4) > *(_QWORD *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint32", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(unsigned int *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_1B413FAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::length_from_header(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  _QWORD *exception;
  _QWORD *v6;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;
  _BYTE v10[256];

  if (a2 <= 7)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Overflow calculating start of header in TDwarfAddressTableStream", 64);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v7);
  }
  v3 = a2 - 8;
  if (*(_QWORD *)(a1 + 24) < (unint64_t)v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Invalid offset to address table header in TDwarfAddressTableStream", 66);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, &v8);
    Exception::Exception(v7, &v8);
    v6 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v6, (uint64_t)v7);
  }
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, v3);
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
}

void sub_1B413FC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipConstantAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a2 + 8) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_RefAddrAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

void TDwarfSkipDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;

  if (a3 >= 3)
    v3 = 4;
  else
    v3 = 8;
  *(_DWORD *)(*(_QWORD *)a2 + 8) += v3;
}

void TDwarfSkipDW_FORM_Block1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Block1AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipDW_FORM_Block1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block1(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block1(uint64_t result)
{
  int v1;
  uint64_t v2;
  int v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_DWORD *)(result + 24);
  v2 = *(unsigned int *)(result + 8);
  if ((v1 - v2) < 0x100)
  {
    if (v1 == (_DWORD)v2 || v1 - (int)v2 < (*(_BYTE *)(*(_QWORD *)result + v2) + 1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block1", 44);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
      Exception::Exception(v5, &v6);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v5);
    }
    v3 = (*(_BYTE *)(*(_QWORD *)result + v2) + 1);
  }
  else
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)result + v2) + 1;
  }
  *(_DWORD *)(result + 8) = v3 + v2;
  return result;
}

void sub_1B413FE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_Block2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Block2AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipDW_FORM_Block2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block2(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block2(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
  v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(_QWORD *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block2", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B413FF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_Block4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Block4AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipDW_FORM_Block4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block4(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
  v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(_QWORD *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block4", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B4140050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_StringAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

size_t TDwarfSkipDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(*a2);
}

size_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  size_t result;
  _QWORD *exception;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 24) - v2;
  result = strlen((const char *)(*(_QWORD *)a1 + v2));
  if ((int)result + 1 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Cursor overflow, attempt to skip FORM_string", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v9, &v7);
    Exception::Exception(v6, &v7);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v6);
  }
  *(_DWORD *)(a1 + 8) = result + 1 + v2;
  return result;
}

void sub_1B4140184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_BlockAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(*a2);
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
  v3 = (*(_DWORD *)(a1 + 8) + result);
  if (*(_QWORD *)(a1 + 24) < v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to skip FORM_block", 43);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

void sub_1B41402A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfSkipULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipULEBAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(*a2);
}

void TDwarfReadDW_FORM_Data1ToOffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data1ToOffsetAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data1ToOffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data2AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data4AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data8AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 8) > *(_QWORD *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read uint64", 39);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(_QWORD *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 8;
  return v2;
}

void sub_1B4140594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_Sec_OffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Sec_OffsetAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Sec_OffsetAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((unint64_t)(v1 + 4) > *(_QWORD *)(a1 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Cursor overflow, attempt to read dwarf_offset", 45);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *(unsigned int *)(*(_QWORD *)a1 + v1);
  *(_DWORD *)(a1 + 8) = v1 + 4;
  return v2;
}

void sub_1B4140710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_UdataAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void TDwarfReadDW_FORM_SdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_SdataAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_SdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

uint64_t TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = 0;
  v2 = 0;
  v3 = *(_DWORD *)(a1 + 8);
  do
  {
    if (*(_DWORD *)(a1 + 24) == v3)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Cursor overflow, attempt to read LEB", 36);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }
    v4 = *(char *)(*(_QWORD *)a1 + v3);
    v5 = v3 + 1;
    v2 |= (unint64_t)(*(_BYTE *)(*(_QWORD *)a1 + v3) & 0x7F) << v1;
    v1 += 7;
    ++v3;
  }
  while (v4 < 0);
  v6 = (v4 & 0x40) == 0 || v1 > 0x3F;
  v7 = -1 << v1;
  if (v6)
    v7 = 0;
  *(_DWORD *)(a1 + 8) = v5;
  return v7 | v2;
}

void sub_1B4140930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_AT_ranges()
{
  JUMPOUT(0x1B5E36940);
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a3 == 5)
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf5_ranges(a1, (uint64_t)a2, 5);
  }
  else if (a3 > 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v4[0] = 67109120;
      v4[1] = a3;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Unexpected DWARF version parsing DW_AT_ranges: %d\n", (uint8_t *)v4, 8u);
    }
  }
  else
  {
    TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf4_ranges(a1, a2, a3);
  }
}

void TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf5_ranges(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int i;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t *v46;
  char *v47;
  char *v48;
  unint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *exception;
  _QWORD v54[4];
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[2];
  char *v59;
  char *v60;
  char *v61;

  v3 = *(_QWORD *)(a2 + 48);
  if (!v3)
    return;
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v3, 0);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
  v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  if (v6)
  {
    v7 = v6;
    for (i = 0; i != v7; ++i)
    {
      v9 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(v3);
      v10 = v9;
      v11 = v60;
      if (v60 >= v61)
      {
        v13 = v59;
        v14 = (v60 - v59) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v16 = v61 - v59;
        if ((v61 - v59) >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)&v61, v17);
          v13 = v59;
          v11 = v60;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v10;
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v59 = v19;
        v60 = v12;
        v61 = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v60 = v9;
        v12 = v11 + 4;
      }
      v60 = v12;
    }
  }
  v21 = *(uint64_t **)a2;
  if (!v21)
    goto LABEL_56;
  if (*(_DWORD *)(a1 + 16) == 35)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v23 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v21);
    if (v23 >= (v60 - v59) >> 2)
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    v24 = *(_DWORD *)(v22 + 112) + *(_DWORD *)&v59[4 * v23];
  }
  else
  {
    v24 = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges(a1, (uint64_t)v21, a3);
  }
  if (v24 == -1)
    goto LABEL_56;
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v3, 0);
  *(_DWORD *)(v3 + 8) += v24;
  v25 = (_OWORD *)v21[9];
  v26 = v25[1];
  v58[0] = *v25;
  v58[1] = v26;
  if (!*(_QWORD *)v3)
  {
    *(_OWORD *)*(_QWORD *)(a1 + 8) = xmmword_1B41A9140;
    goto LABEL_56;
  }
  v27 = 0;
  v28 = 0;
  v29 = -1;
  while (1)
  {
    v30 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)v3);
    v31 = v30;
    if (v30 != 1)
      break;
    v38 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3);
    v27 = TDwarfAddressTableStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::address_at_base_and_index((uint64_t)v58, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 104), v38);
LABEL_49:
    if (!*(_QWORD *)v3)
      goto LABEL_53;
  }
  if (v30 == 4)
  {
    v32 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    v33 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)v3) + v27;
    v34 = *(_QWORD **)(a1 + 8);
    v35 = (unint64_t *)v34[16];
    v36 = v34[17];
    if ((unint64_t)v35 >= v36)
    {
      v39 = v34[15];
      v40 = ((uint64_t)v35 - v39) >> 4;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v42 = v36 - v39;
      if (v42 >> 3 > v41)
        v41 = v42 >> 3;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
        v43 = 0xFFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(v34 + 17), v43);
      v46 = (unint64_t *)&v44[16 * v40];
      *v46 = v32;
      v46[1] = v33;
      v48 = (char *)v34[15];
      v47 = (char *)v34[16];
      v49 = v46;
      if (v47 != v48)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v47 - 1);
          v49 -= 2;
          v47 -= 16;
        }
        while (v47 != v48);
        v47 = (char *)v34[15];
      }
      v37 = v46 + 2;
      v34[15] = v49;
      v34[16] = v46 + 2;
      v34[17] = &v44[16 * v45];
      if (v47)
        operator delete(v47);
    }
    else
    {
      *v35 = v32;
      v35[1] = v33;
      v37 = v35 + 2;
    }
    v34[16] = v37;
    if (v32 < v29)
      v29 = v32;
    if (v28 <= v33)
      v28 = v33;
    goto LABEL_49;
  }
  if (v30)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v56);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Unimplemented range list entry kind", 35);
    LOBYTE(v54[0]) = v31;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v54, 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v57, &v55);
    Exception::Exception(v54, &v55);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v54);
  }
LABEL_53:
  v50 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v50 = v29;
  *(_QWORD *)(v50 + 8) = v28;
  if (v29 != -1 && v28)
    *(_WORD *)(v50 + 76) |= 3u;
LABEL_56:
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
}

void sub_1B4140EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  Exception::~Exception(&a11);
  if (a20 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(_QWORD *)(v21 - 104) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::extract_dwarf4_ranges(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  char *v26;
  char *v27;
  unint64_t *v28;
  uint64_t v29;

  v4 = *a2;
  if (v4)
  {
    v5 = result;
    result = TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges(result, v4, a3);
    if ((_DWORD)result != -1)
    {
      v6 = a2[5];
      if (v6)
      {
        *(_DWORD *)(v6 + 8) += result;
        v7 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
        v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
        v9 = 0;
        if (v7 | v8)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 88);
          v11 = -1;
          do
          {
            if (v7 == -1)
            {
              v10 = v8;
            }
            else
            {
              v12 = v10 + v7;
              v13 = v10 + v8;
              v14 = *(_QWORD **)(v5 + 8);
              v15 = (unint64_t *)v14[16];
              v16 = v14[17];
              if ((unint64_t)v15 >= v16)
              {
                v18 = v14[15];
                v19 = ((uint64_t)v15 - v18) >> 4;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 60)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                v21 = v16 - v18;
                if (v21 >> 3 > v20)
                  v20 = v21 >> 3;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
                  v22 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(v14 + 17), v22);
                v25 = (unint64_t *)&v24[16 * v19];
                *v25 = v12;
                v25[1] = v13;
                v27 = (char *)v14[15];
                v26 = (char *)v14[16];
                v28 = v25;
                if (v26 != v27)
                {
                  do
                  {
                    *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
                    v28 -= 2;
                    v26 -= 16;
                  }
                  while (v26 != v27);
                  v26 = (char *)v14[15];
                }
                v17 = v25 + 2;
                v14[15] = v28;
                v14[16] = v25 + 2;
                v14[17] = &v24[16 * v23];
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *v15 = v12;
                v15[1] = v13;
                v17 = v15 + 2;
              }
              v14[16] = v17;
              if (v12 < v11)
                v11 = v12;
              if (v9 <= v13)
                v9 = v13;
            }
            v7 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
            v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(v6);
          }
          while (v7 | v8);
        }
        else
        {
          v11 = -1;
        }
        result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v6, 0);
        v29 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)v29 = v11;
        *(_QWORD *)(v29 + 8) = v9;
        if (v11 != -1)
        {
          if (v9)
            *(_WORD *)(v29 + 76) |= 3u;
        }
      }
    }
  }
  return result;
}

uint64_t TDwarfReadDW_AT_ranges<Dwarf<Dwarf32,Pointer64,LittleEndian>>::offset_into_ranges(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 16);
  switch(v3)
  {
    case 6:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a2);
    case 7:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(a2);
    case 23:
      return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(a2);
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    v8 = a3;
    v9 = 1024;
    v10 = v3;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n", buf, 0xEu);
    v3 = *(_DWORD *)(a1 + 16);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "DWARF %d form %u is unrecognized for reading non-indexed ranges.\n", a3, v3);
  return 0xFFFFFFFFLL;
}

void TDwarfReadDW_FORM_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_StrpAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;

  result = *a2;
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    v4 = *(_QWORD *)(result + 40);
    v5 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v5);
    v6 = *(_QWORD **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *v6 = *(_QWORD *)v4 + *(unsigned int *)(v4 + 8);
  }
  return result;
}

void TDwarfReadDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_StringAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

const char *TDwarfReadDW_FORM_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _WORD *v4;
  int v5;
  int v6;
  const char *result;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return (const char *)TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(v3);
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

const char *TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  const char *v4;
  unsigned int v5;
  _QWORD *exception;
  _QWORD v8[4];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 24) - v2;
  v4 = (const char *)(*(_QWORD *)a1 + v2);
  v5 = strlen(v4) + 1;
  if (v5 > v3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Cursor overflow, attempt to read FORM_string", 44);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v11, &v9);
    Exception::Exception(v8, &v9);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v8);
  }
  *(_DWORD *)(a1 + 8) = v5 + v2;
  return v4;
}

void sub_1B4141440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_StrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_StrxAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_StrxAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *exception;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  _BYTE v15[256];

  v2 = *a2;
  if ((*(_WORD *)(result + 24) & **(_WORD **)(result + 16)) != 0)
  {
    *((_DWORD *)v2 + 2) += 4;
  }
  else
  {
    v3 = result;
    v4 = v2[8];
    v5 = *(_DWORD *)(result + 40);
    switch(v5)
    {
      case '%':
        v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(*a2);
        goto LABEL_11;
      case '&':
        v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16((uint64_t)*a2);
        goto LABEL_11;
      case '\'':
        v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::threeBytes((uint64_t)*a2);
        goto LABEL_11;
      case '(':
        v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32((uint64_t)*a2);
        goto LABEL_11;
      default:
        if (v5 == 26)
        {
          v6 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(*a2);
LABEL_11:
          if ((v6 & 0xC0000000) != 0)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"FORM_strx index overflow", 24);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
            Exception::Exception(v12, &v13);
            exception = __cxa_allocate_exception(0x20uLL);
            Exception::Exception(exception, (uint64_t)v12);
          }
        }
        else
        {
          v6 = 0;
        }
        v7 = **(_DWORD **)(v3 + 32);
        if (__CFADD__(v7, 4 * v6))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"FORM_strx offset overflow", 25);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, &v13);
          Exception::Exception(v12, &v13);
          v10 = __cxa_allocate_exception(0x20uLL);
          Exception::Exception(v10, (uint64_t)v12);
        }
        TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v7 + 4 * v6);
        v8 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(v4);
        v9 = v2[5];
        result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v9, v8);
        **(_WORD **)(v3 + 16) |= *(_WORD *)(v3 + 24);
        **(_QWORD **)(v3 + 8) = *(_QWORD *)v9 + *(unsigned int *)(v9 + 8);
        break;
    }
  }
  return result;
}

void sub_1B41416AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_RefAddrAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_RefAddrAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result;
  _WORD *v5;
  int v6;
  int v7;
  int v8;

  result = *a2;
  v5 = *(_WORD **)(a1 + 16);
  v6 = (unsigned __int16)*v5;
  v7 = *(unsigned __int16 *)(a1 + 24);
  if ((v7 & v6) != 0)
  {
    if (a3 >= 3)
      v8 = 4;
    else
      v8 = 8;
    *(_DWORD *)(result + 8) += v8;
  }
  else
  {
    *v5 = v7 | v6;
    if (a3 > 2)
      result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    else
      result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref1AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref2AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref4AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref8AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 8;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_Ref_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Ref_UdataAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Ref_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void TDwarfReadDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_Data1AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_BYTE **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_FlagAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_FlagAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_FlagAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *a2;
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_BYTE **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadDW_FORM_FlagPresentAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_FlagPresentAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_FlagPresentAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 8);
  **(_WORD **)(result + 16) |= *(_WORD *)(result + 24);
  *v1 = 1;
  return result;
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSourceInfoAbbrev(uint64_t a1, int a2, char a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  char **v9;
  _QWORD *v10;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t action_for_string;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = *a4;
  *a4 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a4[1];
  a4[1] = v6;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a4[2];
  a4[2] = v7;
  *(_QWORD *)a1 = &off_1E67783D8;
  *(_QWORD *)(a1 + 64) = a5;
  v8 = *(unsigned __int16 **)(a1 + 16);
  if (v8 != *(unsigned __int16 **)(a1 + 24))
  {
    v9 = (char **)(a1 + 40);
    v10 = (_QWORD *)(a1 + 56);
    do
    {
      v11 = *v8;
      if (v11 <= 0x51)
      {
        if (*v8 > 0x11u)
        {
          if (v11 != 18)
          {
            if (v11 != 27)
            {
LABEL_42:
              v15 = v8[1];
LABEL_43:
              action_for_string = skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v15);
              goto LABEL_44;
            }
            v13 = *(_QWORD *)(a1 + 64);
            v14 = v13 + 40;
            v12 = 32;
LABEL_21:
            action_for_string = read_action_for_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8[1], v13 + 76, v12, v14, v13 + 108);
            goto LABEL_44;
          }
          v22 = v8[1];
          if ((v22 - 41) < 4 || v22 == 27)
          {
            v17 = operator new();
            v28 = *(_QWORD *)(a1 + 64);
            v29 = v8[1];
            *(_QWORD *)v17 = &off_1E6777AC8;
            *(_QWORD *)(v17 + 8) = v28 + 8;
            *(_QWORD *)(v17 + 16) = v28 + 76;
            *(_WORD *)(v17 + 24) = 2;
LABEL_39:
            *(_QWORD *)(v17 + 32) = v28;
            *(_QWORD *)(v17 + 40) = 0;
            *(_DWORD *)(v17 + 48) = v29;
            goto LABEL_45;
          }
          if (v22 != 1)
          {
            v51 = *(_QWORD *)(a1 + 64);
            v24 = v51 + 76;
            v25 = v51 + 80;
            v21 = -32766;
LABEL_41:
            action_for_string = read_action_for_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v22, v24, v21, v25);
LABEL_44:
            v17 = action_for_string;
            goto LABEL_45;
          }
          v46 = operator new();
          v17 = v46;
          v49 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)v46 = &off_1E6777A78;
          *(_QWORD *)(v46 + 8) = v49 + 8;
          *(_QWORD *)(v46 + 16) = v49 + 76;
          v48 = 2;
        }
        else
        {
          if (v11 == 16)
          {
            v22 = v8[1];
            v26 = *(_QWORD *)(a1 + 64);
            v24 = v26 + 76;
            v25 = v26 + 52;
            v21 = 64;
            goto LABEL_41;
          }
          if (v11 != 17)
            goto LABEL_42;
          v15 = v8[1];
          if ((v15 - 41) < 4 || v15 == 27)
          {
            v17 = operator new();
            v18 = *(_QWORD *)(a1 + 64);
            v19 = v8[1];
            *(_QWORD *)v17 = &off_1E6777AC8;
            *(_QWORD *)(v17 + 8) = v18;
            *(_QWORD *)(v17 + 16) = v18 + 76;
            *(_WORD *)(v17 + 24) = 1;
            *(_QWORD *)(v17 + 32) = v18;
            *(_QWORD *)(v17 + 40) = 0;
            *(_DWORD *)(v17 + 48) = v19;
            goto LABEL_45;
          }
          if (v15 != 1)
            goto LABEL_43;
          v46 = operator new();
          v17 = v46;
          v47 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)v46 = &off_1E6777A78;
          *(_QWORD *)(v46 + 8) = v47;
          *(_QWORD *)(v46 + 16) = v47 + 76;
          v48 = 1;
        }
        *(_WORD *)(v46 + 24) = v48;
      }
      else
      {
        if (*v8 > 0x72u)
        {
          if (v11 == 115)
          {
            v21 = 0;
            v22 = v8[1];
            v30 = *(_QWORD *)(a1 + 64);
            v24 = v30 + 76;
            v25 = v30 + 104;
            goto LABEL_41;
          }
          if (v11 == 116)
          {
            v21 = 0;
            v22 = v8[1];
            v32 = *(_QWORD *)(a1 + 64);
            v24 = v32 + 76;
            v25 = v32 + 112;
            goto LABEL_41;
          }
          if (v11 != 16368)
            goto LABEL_42;
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 64);
          v14 = v13 + 144;
          goto LABEL_21;
        }
        if (v11 != 82)
        {
          if (v11 == 114)
          {
            v21 = 0;
            v22 = v8[1];
            v23 = *(_QWORD *)(a1 + 64);
            v24 = v23 + 76;
            v25 = v23 + 108;
            goto LABEL_41;
          }
          goto LABEL_42;
        }
        v15 = v8[1];
        if ((v15 - 41) < 4 || v15 == 27)
        {
          v17 = operator new();
          v28 = *(_QWORD *)(a1 + 64);
          v29 = v8[1];
          *(_QWORD *)v17 = &off_1E6777AC8;
          *(_QWORD *)(v17 + 8) = v28 + 16;
          *(_QWORD *)(v17 + 16) = v28 + 76;
          *(_WORD *)(v17 + 24) = 0;
          goto LABEL_39;
        }
        if (v15 != 1)
          goto LABEL_43;
        v17 = operator new();
        v50 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)v17 = &off_1E6777A78;
        *(_QWORD *)(v17 + 8) = v50 + 16;
        *(_QWORD *)(v17 + 16) = v50 + 76;
        *(_WORD *)(v17 + 24) = 0;
      }
LABEL_45:
      v33 = *(uint64_t **)(a1 + 40);
      if (v33 != *(uint64_t **)(a1 + 48)
        && (v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17), v33 = *(uint64_t **)(a1 + 48), v34)
        && (v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v33 - 1) + 32))(*(v33 - 1)),
            v33 = *(uint64_t **)(a1 + 48),
            v35))
      {
        *(_DWORD *)(*(v33 - 1) + 8) += *(_DWORD *)(v17 + 8);
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      else
      {
        if ((unint64_t)v33 >= *v10)
        {
          v37 = ((char *)v33 - *v9) >> 3;
          if ((unint64_t)(v37 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v38 = *v10 - (_QWORD)*v9;
          v39 = v38 >> 2;
          if (v38 >> 2 <= (unint64_t)(v37 + 1))
            v39 = v37 + 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v40);
          else
            v41 = 0;
          v42 = (uint64_t *)&v41[8 * v37];
          *v42 = v17;
          v36 = v42 + 1;
          v44 = *(char **)(a1 + 40);
          v43 = *(char **)(a1 + 48);
          if (v43 != v44)
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *--v42 = v45;
            }
            while (v43 != v44);
            v43 = *v9;
          }
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)(a1 + 48) = v36;
          *(_QWORD *)(a1 + 56) = &v41[8 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *v33 = v17;
          v36 = v33 + 1;
        }
        *(_QWORD *)(a1 + 48) = v36;
      }
      v8 += 2;
    }
    while (v8 != *(unsigned __int16 **)(a1 + 24));
  }
  return a1;
}

void sub_1B4141FB4(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev *v1;

  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

void TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSourceInfoAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 2;
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSkipAbbrev(uint64_t a1, int a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = *a4;
  *a4 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a4[1];
  a4[1] = v5;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a4[2];
  a4[2] = v6;
  *(_QWORD *)a1 = &off_1E6778420;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 != *(_QWORD *)(a1 + 24))
  {
    v8 = (char **)(a1 + 40);
    v9 = (_QWORD *)(a1 + 56);
    do
    {
      v10 = skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(*(unsigned __int16 *)(v7 + 2));
      v11 = (_DWORD *)v10;
      v12 = *(_QWORD **)(a1 + 40);
      if (v12 != *(_QWORD **)(a1 + 48)
        && (v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10), v12 = *(_QWORD **)(a1 + 48), v13)
        && (v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v12 - 1) + 32))(*(v12 - 1)),
            v12 = *(_QWORD **)(a1 + 48),
            v14))
      {
        *(_DWORD *)(*(v12 - 1) + 8) += v11[2];
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      }
      else
      {
        if ((unint64_t)v12 >= *v9)
        {
          v16 = ((char *)v12 - *v8) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v17 = *v9 - (_QWORD)*v8;
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 56, v19);
          else
            v20 = 0;
          v21 = &v20[8 * v16];
          *(_QWORD *)v21 = v11;
          v15 = v21 + 8;
          v23 = *(char **)(a1 + 40);
          v22 = *(char **)(a1 + 48);
          if (v22 != v23)
          {
            do
            {
              v24 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *((_QWORD *)v21 - 1) = v24;
              v21 -= 8;
            }
            while (v22 != v23);
            v22 = *v8;
          }
          *(_QWORD *)(a1 + 40) = v21;
          *(_QWORD *)(a1 + 48) = v15;
          *(_QWORD *)(a1 + 56) = &v20[8 * v19];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v12 = v11;
          v15 = v12 + 1;
        }
        *(_QWORD *)(a1 + 48) = v15;
      }
      v7 += 4;
    }
    while (v7 != *(_QWORD *)(a1 + 24));
  }
  return a1;
}

void sub_1B41421C8(_Unwind_Exception *a1)
{
  CSCppDwarfAbbrev *v1;

  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(v1);
  _Unwind_Resume(a1);
}

void TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipAbbrev(CSCppDwarfAbbrev *a1)
{
  CSCppDwarfAbbrev::~CSCppDwarfAbbrev(a1);
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::type()
{
  return 0;
}

uint64_t std::__split_buffer<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v2 + 80);
    JUMPOUT(0x1B5E36940);
  }
  return result;
}

uint64_t parse_die_stream_for_specification<Dwarf<Dwarf32,Pointer64,LittleEndian>,TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>,std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>>(uint64_t a1, uint64_t a2, uint64_t **a3, _DWORD *a4)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v25;
  uint8_t buf[2];
  __int16 v27;

  v4 = a2;
  v6 = *(unsigned __int16 *)(a1 + 76);
  if ((v6 & 0x10) != 0)
  {
    v7 = *(_DWORD *)(a1 + 48) & (v6 << 18 >> 31);
    if ((v6 & 0x2000) != 0)
      v8 = 0;
    else
      v8 = *(_DWORD *)(a1 + 48);
    v9 = -8209;
  }
  else
  {
    if ((v6 & 0x200) == 0)
      return 0;
    v7 = *(_DWORD *)(a1 + 60) & (v6 << 17 >> 31);
    if ((v6 & 0x4000) != 0)
      v8 = 0;
    else
      v8 = *(_DWORD *)(a1 + 60);
    v9 = -16897;
  }
  *(_WORD *)(a1 + 76) = v6 & v9;
  v10 = (*a4)++;
  if (v10 < 10)
  {
    if (v8)
      v14 = 1;
    else
      v14 = v7 == 0;
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      v16 = *a3;
      v17 = a3[1];
      if (v17 != *a3)
      {
        v18 = v17 - *a3;
        do
        {
          v19 = v18 >> 1;
          v20 = &v16[v18 >> 1];
          v22 = *v20;
          v21 = v20 + 1;
          v18 += ~(v18 >> 1);
          if (*(_QWORD *)(v22 + 24) + *(_QWORD *)(v22 + 16) > (unint64_t)v7)
            v18 = v19;
          else
            v16 = v21;
        }
        while (v18);
      }
      if (v16 == v17
        || (v4 = *v16, v23 = *(_QWORD *)(*v16 + 16), v15 = *(_QWORD *)(*v16 + 24), (unint64_t)v7 - v23 >= v15))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v11 = MEMORY[0x1E0C81028];
          v12 = "Ref addr is not within the bounds of any compile unit";
          v13 = buf;
          goto LABEL_34;
        }
        return 0;
      }
      v8 = v7 - v23;
    }
    if (v15 >= v8)
    {
      read_specification_abbrev_at<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v8, v4);
      return v4;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v11 = MEMORY[0x1E0C81028];
      v12 = "Out-of-bounds abstract origin or specification offset";
      v13 = (uint8_t *)&v25;
      goto LABEL_34;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v27 = 0;
    v11 = MEMORY[0x1E0C81028];
    v12 = "Possible reference cycle in DIE";
    v13 = (uint8_t *)&v27;
LABEL_34:
    _os_log_impl(&dword_1B40C5000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
  }
  return 0;
}

uint64_t resolve_parsed_data_names<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __int16 v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_WORD *)(a1 + 76);
  v4 = (_QWORD *)(a1 + 24);
  if ((v3 & 0xC) == 8)
    v5 = (uint64_t *)(a1 + 32);
  else
    v5 = (uint64_t *)(a1 + 24);
  v6 = *v5;
  if ((v3 & 0xC) == 8)
    v7 = 67141633;
  else
    v7 = 67174401;
  *a2 = v6;
  if ((v3 & 4) != 0)
    v8 = 0x200000;
  else
    v8 = 0x100000;
  v9 = v7 | v8;
  if ((v3 & 4) == 0)
    v4 = (_QWORD *)(a1 + 32);
  *a3 = *v4;
  if (*(_BYTE *)(a1 + 56) == 1 && (v3 & 0x80u) != 0)
    v11 = v9 | 0x40;
  else
    v11 = v9;
  if (*(_BYTE *)(a1 + 57) == 1)
    v12 = v11 | 0x80;
  else
    v12 = v11;
  if ((v3 & 0x100) != 0)
    return v12;
  else
    return v11;
}

unint64_t TAddressRelocator<Pointer64>::relocate(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = a2;
  v16 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[3];
  if (a2 - *v3 < v3[1])
    return v3[2] + a2;
  v4 = a1[1] - *a1;
  if (v4)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    v6 = (_QWORD *)*a1;
    do
    {
      v7 = v5 >> 1;
      v8 = &v6[3 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 3;
      v5 += ~(v5 >> 1);
      if (v10 > a2)
        v5 = v7;
      else
        v6 = v9;
    }
    while (v5);
    if (v6 != (_QWORD *)*a1)
    {
      v11 = *(v6 - 3);
      v12 = *(v6 - 2);
      v3 = v6 - 3;
      if (a2 - v11 < v12)
      {
        a1[3] = v3;
        return v3[2] + a2;
      }
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v14 = 134217984;
    v15 = v2;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Attempt to relocate address [0x%llx], which is outside segment deltas\n", (uint8_t *)&v14, 0xCu);
  }
  return v2;
}

uint64_t TDwarfAbbrevData<Dwarf<Dwarf32,Pointer64,LittleEndian>>::has_inlined_info(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v3;
  uint64_t result;

  v2 = *(unsigned __int16 *)(a1 + 76);
  if (a2 >= 5)
  {
    v3 = (v2 >> 10) & 1;
LABEL_8:
    result = 1;
    if ((v3 & 1) == 0 && (v2 & 0x800) == 0)
      return (v2 >> 12) & 1;
    return result;
  }
  if ((v2 & 0x400) != 0)
  {
    LOBYTE(v3) = *(_DWORD *)(a1 + 64) != 0;
    goto LABEL_8;
  }
  if ((v2 & 0x800) == 0)
    return (v2 >> 12) & 1;
  return 1;
}

const char *path_from_file_index<Pointer64>(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5;
  void **v9;
  FILE *v10;
  const char *v11;
  void *__p[2];
  char v13;
  _BYTE buf[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = (__PAIR64__(a2, a5) - 5) >> 32;
  if (v5 < (uint64_t)(a1[1] - *a1) >> 3)
    return *(const char **)(*a1 + 8 * v5);
  if ((path_from_file_index<Pointer64>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer64> &,unsigned int)::suppress_error & 1) == 0)
  {
    path_from_file_index<Pointer64>(std::vector<char const*> const&,unsigned int,unsigned long long,TRawSymbolOwnerData<Pointer64> &,unsigned int)::suppress_error = 1;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a4 + 232))(__p, a4);
      v9 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v9;
      v15 = 2048;
      v16 = a3;
      v17 = 1024;
      v18 = v5;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n", buf, 0x1Cu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a4 + 232))(buf, a4);
    if (v17 >= 0)
      v11 = buf;
    else
      v11 = *(const char **)buf;
    fprintf(v10, "[CoreSymbolication] In DWARF data from %s:\n  .debug_line[%llx] file = %d is not a valid index\n", v11, a3, v5);
    if (SHIBYTE(v17) < 0)
      operator delete(*(void **)buf);
  }
  return "<Bad file name in .debug_info>";
}

void record_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  if (*(_DWORD *)(a3 + 8) == 29)
    record_inlined_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>>(a1, a2, a3, a5);
  else
    record_concrete_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>((uint64_t)a1, a2, a3, a4, (void **)a5);
}

uint64_t TDwarfSourceInfoAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_compilation_unit_pc_ranges(uint64_t result)
{
  uint64_t *v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)(result + 64);
  v2 = *((_WORD *)v1 + 38);
  if ((v2 & 1) != 0)
  {
    v3 = *v1;
LABEL_6:
    v1[11] = v3;
    if ((v2 & 2) == 0)
      return result;
    goto LABEL_7;
  }
  v3 = v1[2];
  if (v3 != -1)
    goto LABEL_6;
  if ((*((_WORD *)v1 + 38) & 2) == 0)
    return result;
LABEL_7:
  if (v2 < 0)
    v4 = *v1 + *((unsigned int *)v1 + 20);
  else
    v4 = v1[1];
  v1[12] = v4;
  return result;
}

void parse_line_numbers<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t (***a9)(_QWORD, std::vector<std::string>::pointer), uint64_t a10, _QWORD *a11)
{
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t **v51;
  unsigned int v52;
  uint64_t v53;
  CSCppStringCache *v54;
  char v55;
  uint64_t v56;
  unsigned __int8 *v59;
  int v60;
  void *v61;
  unsigned int v62;
  int v63;
  void *__p;
  _BYTE *v65;
  uint64_t v66;
  char __s1[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a1, a3);
  v17 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(a1);
  v18 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
  if (v18 - 6 >= 0xFFFFFFFC)
  {
    v19 = v18;
    if (v18 == 5)
    {
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    }
    v54 = (CSCppStringCache *)(a7 + 96);
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(a1);
    v52 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    if (v19 >= 4)
      TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    v55 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    v20 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
    v21 = *(unsigned int *)(a1 + 8);
    v59 = (unsigned __int8 *)(*(_QWORD *)a1 + v21);
    v22 = *v59;
    *(_DWORD *)(a1 + 8) = v21 + v22;
    __p = 0;
    v65 = 0;
    v66 = 0;
    if (v19 == 5)
    {
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>((uint64_t *)a1, a2, 5u, a9, v54, a4, (uint64_t)&__p, (char **)&__p);
      parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>((uint64_t *)a1, a2, 5u, a9, v54, a4, (uint64_t)&__p, (char **)a10);
    }
    else
    {
      parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>((uint64_t *)a1, a5, (uint64_t (***)(_QWORD, char *))a9, v54, &__p, (void **)a10);
    }
    v62 = 0;
    v63 = 1;
    v23 = a3 + v17 + 4;
    if (*(_DWORD *)(a1 + 8) < v23)
    {
      v24 = 0;
      v56 = v52;
      v25 = 1;
      v53 = (v22 ^ 0xFF) / v20 * v52;
      do
      {
        v26 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
        if (v26 >= v22)
        {
          v24 += v56 * (unint64_t)((v26 - v22) / v20);
          v63 += v55 + (v26 - v22) % v20;
          *(_QWORD *)__s1 = 0;
          v36 = v24 + a6;
          if (a8)
            v36 = TAddressRelocator<Pointer64>::relocate(a8, v36);
LABEL_22:
          *(_QWORD *)__s1 = v36;
          v61 = 0;
          v61 = (void *)path_from_file_index<Pointer64>((_QWORD *)a10, v25, *(unsigned int *)(a1 + 8), a7, v19);
          v60 = 0;
          std::deque<TRawSourceInfo<Pointer64>>::emplace_back<unsigned long long &,int,char const*&,int &,unsigned int &>(a11, __s1, &v60, (uint64_t *)&v61, &v63, &v62);
        }
        else
        {
          v27 = v26;
          switch(v26)
          {
            case 0u:
              v28 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              if (!v28)
                goto LABEL_62;
              v29 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)a1);
              switch(v29)
              {
                case 1:
                  v24 = 0;
                  v25 = 1;
                  v62 = 0;
                  v63 = 1;
                  break;
                case 2:
                  v24 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_address(a1);
                  break;
                case 3:
                  v30 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string(a1);
                  v31 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  if (*v30 == 47)
                  {
                    v32 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                    v33 = v32;
                    v35 = *(uint64_t **)(a10 + 8);
                    v34 = *(_QWORD *)(a10 + 16);
                    if ((unint64_t)v35 >= v34)
                    {
                      v41 = ((uint64_t)v35 - *(_QWORD *)a10) >> 3;
                      v42 = v41 + 1;
                      if ((unint64_t)(v41 + 1) >> 61)
                        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                      v43 = v34 - *(_QWORD *)a10;
                      if (v43 >> 2 > v42)
                        v42 = v43 >> 2;
                      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                        v44 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v44 = v42;
                      if (v44)
                        v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a10 + 16, v44);
                      else
                        v45 = 0;
                      v46 = (uint64_t *)&v45[8 * v41];
                      *v46 = v33;
                      v47 = v46 + 1;
                      v49 = *(char **)a10;
                      v48 = *(char **)(a10 + 8);
                      if (v48 == *(char **)a10)
                      {
                        v51 = (uint64_t **)a10;
                      }
                      else
                      {
                        do
                        {
                          v50 = *((_QWORD *)v48 - 1);
                          v48 -= 8;
                          *--v46 = v50;
                        }
                        while (v48 != v49);
                        v51 = (uint64_t **)a10;
                        v48 = *(char **)a10;
                      }
                      *v51 = v46;
                      v51[1] = v47;
                      v51[2] = (uint64_t *)&v45[8 * v44];
                      if (v48)
                        operator delete(v48);
                      *(_QWORD *)(a10 + 8) = v47;
                    }
                    else
                    {
                      *v35 = v32;
                      *(_QWORD *)(a10 + 8) = v35 + 1;
                    }
                  }
                  else
                  {
                    if (v31 >= (unint64_t)((v65 - (_BYTE *)__p) >> 3))
                      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
                    v39 = (const char *)*((_QWORD *)__p + v31);
                    if (v39)
                    {
                      stringByAppendingPathComponents(__s1, 0x400uLL, v39, v30);
                      v40 = (char *)(**a9)(a9, (std::vector<std::string>::pointer)__s1);
                      v61 = CSCppStringCache::intern(v54, v40);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, &v61);
                    }
                    else
                    {
                      *(_QWORD *)__s1 = (**a9)(a9, (std::vector<std::string>::pointer)v30);
                      std::vector<char const*>::push_back[abi:ne180100]((void **)a10, __s1);
                    }
                  }
                  break;
                default:
                  *(_DWORD *)(a1 + 8) = v28 + *(_DWORD *)(a1 + 8) - 1;
                  break;
              }
              break;
            case 1u:
              *(_QWORD *)__s1 = 0;
              v36 = v24 + a6;
              if (a8)
                v36 = TAddressRelocator<Pointer64>::relocate(a8, v36);
              goto LABEL_22;
            case 2u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1) * v56;
              break;
            case 3u:
              v37 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::LEB(a1);
              v63 += v37;
              break;
            case 4u:
              v25 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 5u:
              v62 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a1);
              break;
            case 6u:
            case 7u:
            case 0xAu:
            case 0xBu:
              break;
            case 8u:
              v24 += v53;
              break;
            case 9u:
              v24 += TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(a1);
              break;
            case 0xCu:
              TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
              break;
            default:
              if (v59[v26])
              {
                v38 = 0;
                do
                {
                  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(a1);
                  ++v38;
                }
                while (v38 < v59[v27]);
              }
              break;
          }
        }
      }
      while (*(_DWORD *)(a1 + 8) < v23);
    }
LABEL_62:
    if (__p)
    {
      v65 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B4142E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*&>(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;

  v8 = a1[2];
  v9 = a1[1];
  if (v8 == v9)
    v10 = 0;
  else
    v10 = 170 * ((v8 - v9) >> 3) - 1;
  v11 = a1[4];
  v12 = a1[5];
  v13 = v12 + v11;
  if (v10 == v12 + v11)
  {
    std::deque<TRangeValue<Pointer64,char const*>>::__add_back_capacity(a1);
    v11 = a1[4];
    v12 = a1[5];
    v9 = a1[1];
    v13 = v11 + v12;
  }
  v14 = (_QWORD *)(*(_QWORD *)(v9 + 8 * (v13 / 0xAA)) + 24 * (v13 % 0xAA));
  v15 = *a3;
  v16 = *a4;
  *v14 = *a2;
  v14[1] = v15;
  v14[2] = v16;
  v17 = v12 + 1;
  a1[5] = v17;
  v18 = v11 + v17;
  v19 = (_QWORD *)(v9 + 8 * (v18 / 0xAA));
  v20 = v18 % 0xAA;
  if (v20)
    v21 = *v19 + 24 * v20;
  else
    v21 = *(v19 - 1) + 4080;
  return v21 - 24;
}

void read_specification_abbrev_at<Dwarf<Dwarf32,Pointer64,LittleEndian>>(unsigned int a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  CSCppDwarfAbbrevTable *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *exception;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[4];
  __int128 v23;
  void *__p;
  _OWORD v25[16];
  CSCppDwarfAbbrevTable *v26;
  std::__shared_weak_count *v27;

  v3 = *(_DWORD *)(a2 + 8);
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a2, a1);
  v4 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB((uint64_t *)a2);
  v6 = *(CSCppDwarfAbbrevTable **)(a2 + 80);
  v5 = *(std::__shared_weak_count **)(a2 + 88);
  v26 = v6;
  v27 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v4 || (v9 = v4, v4 >= (unint64_t)((uint64_t)(*((_QWORD *)v6 + 2) - *((_QWORD *)v6 + 1)) >> 3)))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid specification abbrev index in DWARF: ", 45);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
    Exception::Exception(v22, &v23);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v22);
  }
  v10 = *((_QWORD *)v6 + 7);
  v11 = CSCppDwarfAbbrevTable::specification_abbrev_at(v6, v4);
  if (!v11)
  {
    v12 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * v9);
    if (!v12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Null abbrev discovered in DWARF at index ", 41);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      v19 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v19, (uint64_t)v22);
    }
    v13 = *(_DWORD *)(v12 + 8);
    if (v13 > 0x2E || ((1 << v13) & 0x400020000008) == 0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid abbrev tag ", 19);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for symbol entry.", 18);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, &v23);
      Exception::Exception(v22, &v23);
      v21 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v21, (uint64_t)v22);
    }
    v25[0] = 0uLL;
    __p = 0;
    std::vector<CSCppDwarfAttribute>::__init_with_size[abi:ne180100]<CSCppDwarfAttribute*,CSCppDwarfAttribute*>(&__p, *(const void **)(v12 + 16), *(_QWORD *)(v12 + 24), (uint64_t)(*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 2);
    v11 = operator new();
    TDwarfSymbolAbbrev<Dwarf<Dwarf32,Pointer64,LittleEndian>>::TDwarfSymbolAbbrev(v11, *(_DWORD *)(v12 + 8), *(_BYTE *)(v12 + 12), &__p, v10);
    v15 = *((_QWORD *)v6 + 4);
    if (v9 >= (*((_QWORD *)v6 + 5) - v15) >> 3)
      std::vector<CSCppSegmentRange>::__throw_out_of_range[abi:ne180100]();
    *(_QWORD *)(v15 + 8 * v9) = v11;
    if (__p)
    {
      *(_QWORD *)&v25[0] = __p;
      operator delete(__p);
    }
  }
  memset(v25, 0, 48);
  __p = (void *)a2;
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v11 + 16))(v11, &__p, *(unsigned __int16 *)(a2 + 36));
  TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(a2, v3);
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B41432FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  uint64_t v20;

  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v20 - 96);
  _Unwind_Resume(a1);
}

void record_concrete_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>,std::deque<TRawSymbol<Pointer64>>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void **a5)
{
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;

  if (a2)
  {
    v9 = 0;
    v25 = (uint64_t)(a5 + 2);
    v10 = *(unsigned __int8 *)(a3 + 12);
    do
    {
      std::deque<TRawSymbol<Pointer64>>::push_back(a4, a1 + 104 * v9);
      if (v10)
      {
        v11 = a4[5] + a4[4] - 1;
        v12 = *(_QWORD *)(a4[1] + 8 * (v11 / 0x27)) + 104 * (v11 % 0x27);
        v14 = (unint64_t *)a5[1];
        v13 = (unint64_t)a5[2];
        if ((unint64_t)v14 >= v13)
        {
          v16 = ((char *)v14 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v17 = v13 - (_QWORD)*a5;
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25, v19);
          else
            v20 = 0;
          v21 = (unint64_t *)&v20[8 * v16];
          *v21 = v12;
          v15 = v21 + 1;
          v23 = (char *)*a5;
          v22 = (char *)a5[1];
          if (v22 != *a5)
          {
            do
            {
              v24 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *--v21 = v24;
            }
            while (v22 != v23);
            v22 = (char *)*a5;
          }
          *a5 = v21;
          a5[1] = v15;
          a5[2] = &v20[8 * v19];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v14 = v12;
          v15 = v14 + 1;
        }
        a5[1] = v15;
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

void record_inlined_symbols_with_ancestor<Pointer64,std::vector<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t **v39;
  char *v40;
  uint64_t **v41;
  uint64_t *v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *__p;
  char *v61;
  char *v62;

  v5 = a1;
  v6 = *(unsigned __int8 *)(a3 + 12);
  __p = 0;
  v61 = 0;
  v62 = 0;
  v7 = &a1[13 * a2];
  v9 = (char *)*a4;
  v8 = (char *)a4[1];
  do
  {
    if (v8 == v9)
    {
      v11 = (char *)*a4;
      if (a2)
        goto LABEL_10;
      goto LABEL_60;
    }
    v10 = *((_QWORD *)v8 - 1);
    v8 -= 8;
  }
  while (!v10);
  v11 = v8 + 8;
  while (v8 != v9)
  {
    v12 = v8;
    v14 = *((_QWORD *)v8 - 1);
    v8 -= 8;
    v13 = v14;
    if (!v14 || !*(_BYTE *)(v13 + 88))
    {
      v9 = v12;
      break;
    }
  }
  if (!a2)
  {
LABEL_60:
    v46 = 0;
    if (!v6)
      goto LABEL_81;
    goto LABEL_61;
  }
LABEL_10:
  v16 = a2 != 1 || v6 == 0;
  v59 = (uint64_t)(a4 + 2);
  do
  {
    v17 = v11;
    while (v17 != v9)
    {
      v19 = (uint64_t *)*((_QWORD *)v17 - 1);
      v17 -= 8;
      v18 = v19;
      if (*v5 - *v19 < (unint64_t)v19[1])
      {
        v20 = v18[9];
        if (v20 >= v18[10])
        {
          v21 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(v18 + 8, (uint64_t)v5);
        }
        else
        {
          *(_QWORD *)(v20 + 96) = 0;
          *(_OWORD *)v20 = 0u;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 48) = 0u;
          *(_OWORD *)(v20 + 64) = 0u;
          *(_OWORD *)(v20 + 73) = 0u;
          TRawSymbol<Pointer64>::operator=(v20, (uint64_t)v5);
          v21 = v20 + 104;
        }
        v18[9] = v21;
        if (v16)
        {
          if (v6)
          {
            v22 = 0x4EC4EC4EC4EC4EC5 * ((v21 - v18[8]) >> 3) - 1;
            if (v61 >= v62)
            {
              v33 = (v61 - __p) >> 4;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 60)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              v35 = v62 - __p;
              if ((v62 - __p) >> 3 > v34)
                v34 = v35 >> 3;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
                v36 = 0xFFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v62, v36);
              v39 = (uint64_t **)&v37[16 * v33];
              *v39 = v18;
              v39[1] = (uint64_t *)v22;
              v40 = v61;
              v41 = v39;
              if (v61 != __p)
              {
                do
                {
                  *((_OWORD *)v41 - 1) = *((_OWORD *)v40 - 1);
                  v41 -= 2;
                  v40 -= 16;
                }
                while (v40 != __p);
                v40 = __p;
              }
              v23 = (char *)(v39 + 2);
              __p = (char *)v41;
              v62 = &v37[16 * v38];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_QWORD *)v61 = v18;
              *((_QWORD *)v61 + 1) = v22;
              v23 = v61 + 16;
            }
            v61 = v23;
          }
        }
        else
        {
          v24 = v21 - 104;
          v26 = a4[1];
          v25 = (unint64_t)a4[2];
          if ((unint64_t)v26 >= v25)
          {
            v28 = v26 - *a4;
            if ((unint64_t)(v28 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v29 = v25 - (_QWORD)*a4;
            v30 = v29 >> 2;
            if (v29 >> 2 <= (unint64_t)(v28 + 1))
              v30 = v28 + 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v59, v31);
            else
              v32 = 0;
            v42 = (uint64_t *)&v32[8 * v28];
            *v42 = v24;
            v27 = v42 + 1;
            v44 = *a4;
            v43 = (char *)a4[1];
            if (v43 != (char *)*a4)
            {
              do
              {
                v45 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *--v42 = v45;
              }
              while (v43 != (char *)v44);
              v43 = (char *)*a4;
            }
            *a4 = v42;
            a4[1] = v27;
            a4[2] = (uint64_t *)&v32[8 * v31];
            if (v43)
              operator delete(v43);
          }
          else
          {
            *v26 = v24;
            v27 = v26 + 1;
          }
          a4[1] = v27;
        }
        break;
      }
    }
    v5 += 13;
  }
  while (v5 != v7);
  v46 = __p;
  if (v6)
  {
LABEL_61:
    if (v46 != v61)
    {
      v47 = a4 + 2;
      v48 = a4[1];
      do
      {
        v49 = *(_QWORD *)(*(_QWORD *)v46 + 64) + 104 * *((_QWORD *)v46 + 1);
        if ((unint64_t)v48 >= *v47)
        {
          v50 = v48 - *a4;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v51 = *v47 - (_QWORD)*a4;
          v52 = v51 >> 2;
          if (v51 >> 2 <= (unint64_t)(v50 + 1))
            v52 = v50 + 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          if (v53)
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v53);
          else
            v54 = 0;
          v55 = (uint64_t *)&v54[8 * v50];
          *v55 = v49;
          v48 = v55 + 1;
          v57 = *a4;
          v56 = (char *)a4[1];
          if (v56 != (char *)*a4)
          {
            do
            {
              v58 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *--v55 = v58;
            }
            while (v56 != (char *)v57);
            v56 = (char *)*a4;
          }
          *a4 = v55;
          a4[1] = v48;
          a4[2] = (uint64_t *)&v54[8 * v53];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v48++ = v49;
        }
        a4[1] = v48;
        v46 += 16;
      }
      while (v46 != v61);
      v46 = __p;
    }
  }
LABEL_81:
  if (v46)
    operator delete(v46);
}

void sub_1B4143930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<TRawSymbol<Pointer64>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 39 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<TRawSymbol<Pointer64>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x27)) + 104 * (v7 % 0x27);
  }
  *(_QWORD *)(v8 + 96) = 0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 73) = 0u;
  result = TRawSymbol<Pointer64>::operator=(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<TRawSymbol<Pointer64>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x27;
  v4 = v2 - 39;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD8uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD8uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD8uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B4143CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__emplace_back_slow_path<TRawSymbol<Pointer64>::dwarf_ranges_tag,unsigned long long &,unsigned long long &,char const*&,char const*&,unsigned int &,RawSymbolSourceInfo *>(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7, _OWORD **a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  void *v31[5];

  v9 = *a1;
  v10 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) > 0x276276276276276)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v18 = (uint64_t)(a1 + 2);
  v19 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v9) >> 3);
  if (2 * v19 > v11)
    v11 = 2 * v19;
  if (v19 >= 0x13B13B13B13B13BLL)
    v20 = 0x276276276276276;
  else
    v20 = v11;
  v31[4] = a1 + 2;
  if (v20)
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>(v18, v20);
  else
    v21 = 0;
  v22 = &v21[104 * v10];
  v31[0] = v21;
  v31[1] = v22;
  v31[3] = &v21[104 * v20];
  v23 = *a4;
  v24 = *a5;
  v25 = *a6;
  v26 = *a7;
  v27 = *a8;
  *(_QWORD *)v22 = *a3;
  *((_QWORD *)v22 + 1) = v23;
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = 0;
  *((_QWORD *)v22 + 4) = v24;
  *((_QWORD *)v22 + 5) = v25;
  *((_OWORD *)v22 + 3) = 0u;
  *((_QWORD *)v22 + 12) = 0;
  *(_OWORD *)(v22 + 73) = 0u;
  *((_OWORD *)v22 + 4) = 0u;
  if (v27)
  {
    *((_OWORD *)v22 + 3) = *v27;
    v26 |= 0x80000000;
  }
  v28 = &v21[104 * v10];
  *((_DWORD *)v28 + 7) = v26;
  v28[88] = 1;
  v31[2] = v22 + 104;
  std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v31);
  v29 = a1[1];
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v31);
  return v29;
}

void sub_1B4143EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void parse_dwarf5_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t *a1, unint64_t a2, unsigned __int16 a3, uint64_t (***a4)(_QWORD, std::vector<std::string>::pointer), CSCppStringCache *a5, uint64_t a6, uint64_t a7, char **a8)
{
  size_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *i;
  int v17;
  int v18;
  uint64_t action_for_line_string;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  std::vector<std::string>::pointer end;
  __int128 v29;
  const std::string *begin;
  std::vector<std::string>::const_iterator v31;
  std::__split_buffer<std::string>::pointer first;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::string *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::vector<std::string>::pointer v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::vector<std::string>::pointer v49;
  std::vector<std::string>::pointer v50;
  char *v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unsigned __int8 **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 **v71;
  char *v72;
  char *v73;
  unsigned __int8 *v74;
  char *v75;
  unsigned __int8 *v76;
  char *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  _BOOL4 v82;
  void *__p[2];
  std::string::size_type v84;
  std::vector<std::string> v85;
  _OWORD v86[3];
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  char *__s;
  unsigned int v91;
  __int16 v92;
  std::__split_buffer<std::string> buf[25];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a7 + 8) - *(_QWORD *)a7;
  v82 = v13 == a8[1] - *a8 && memcmp(*(const void **)a7, *a8, v13) == 0;
  v92 = 0;
  v91 = 0;
  __s = 0;
  v14 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8(a1);
  std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::vector(&v88, v14);
  v15 = v88;
  for (i = v89; v15 != i; ++v15)
  {
    v17 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    v18 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    if (v17 <= 2)
    {
      if (v17 == 1)
      {
        action_for_line_string = read_action_for_line_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v18, (uint64_t)&v92, 1, (uint64_t)&__s);
        goto LABEL_14;
      }
      if (v17 != 2)
      {
LABEL_12:
        action_for_line_string = skip_action_for_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v18);
        goto LABEL_14;
      }
      action_for_line_string = read_action_for_line_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v18, (uint64_t)&v92, 2, (uint64_t)&v91);
    }
    else
    {
      if ((v17 - 3) >= 3 && v17 != 8193)
        goto LABEL_12;
      action_for_line_string = skip_action_for_line_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(v18);
    }
LABEL_14:
    v20 = *v15;
    *v15 = action_for_line_string;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
  std::vector<CSCppSymbolOwner *>::reserve((void **)a8, v21);
  v86[0] = 0u;
  v86[1] = (unint64_t)a1;
  v87 = 0;
  v86[2] = a2;
  if (v21)
  {
    v22 = 0;
    v79 = (uint64_t)(a8 + 2);
    v23 = MEMORY[0x1E0C81028];
    v24 = a3;
    do
    {
      v25 = v21;
      memset(&v85, 0, sizeof(v85));
      v27 = v88;
      v26 = v89;
      if (v88 != v89)
      {
        while (1)
        {
          v92 = 0;
          (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)*v27 + 16))(*v27, v86, v24);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v27 + 32))(*v27))
          {
            if (!__s)
            {
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf[0].__first_) = 0;
                _os_log_impl(&dword_1B40C5000, v23, OS_LOG_TYPE_DEFAULT, "No string extracted from DWARF5 path list", (uint8_t *)buf, 2u);
              }
              goto LABEL_21;
            }
            if (v92 == 2)
            {
              if (v91 > (unint64_t)((uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 3))
                goto LABEL_21;
              if (isAbsolutePath(__s))
                goto LABEL_21;
              begin = v85.__begin_;
              std::string::basic_string[abi:ne180100]<0>(buf, *(char **)(*(_QWORD *)a7 + 8 * v91));
              v31.__i_ = begin;
              std::vector<std::string>::insert(&v85, v31, (std::vector<std::string>::value_type *)buf);
              if ((SHIBYTE(buf[0].__end_) & 0x80000000) == 0)
                goto LABEL_21;
              first = buf[0].__first_;
              goto LABEL_61;
            }
            if (v92 == 1)
            {
              if (v82 && *(_QWORD *)(a7 + 8) != *(_QWORD *)a7 && !isAbsolutePath(__s))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, **(char ***)a7);
                end = v85.__end_;
                if (v85.__end_ >= v85.__end_cap_.__value_)
                {
                  v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
                  v34 = v33 + 1;
                  if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v34)
                    v34 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555)
                    v35 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v35 = v34;
                  buf[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
                  if (v35)
                    v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v85.__end_cap_, v35);
                  else
                    v36 = 0;
                  v37 = v36 + v33;
                  buf[0].__first_ = v36;
                  buf[0].__begin_ = v37;
                  buf[0].__end_cap_.__value_ = &v36[v35];
                  v38 = *(_OWORD *)__p;
                  v37->__r_.__value_.__r.__words[2] = v84;
                  *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
                  __p[1] = 0;
                  v84 = 0;
                  __p[0] = 0;
                  buf[0].__end_ = v37 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(&v85, buf);
                  v39 = v85.__end_;
                  std::__split_buffer<std::string>::~__split_buffer(buf);
                  v85.__end_ = v39;
                  if (SHIBYTE(v84) < 0)
                    operator delete(__p[0]);
                }
                else
                {
                  v29 = *(_OWORD *)__p;
                  v85.__end_->__r_.__value_.__r.__words[2] = v84;
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v29;
                  v85.__end_ = end + 1;
                }
              }
              std::string::basic_string[abi:ne180100]<0>(__p, __s);
              v40 = v85.__end_;
              if (v85.__end_ >= v85.__end_cap_.__value_)
              {
                v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
                v43 = v42 + 1;
                if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v43)
                  v43 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555)
                  v44 = 0xAAAAAAAAAAAAAAALL;
                else
                  v44 = v43;
                buf[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
                if (v44)
                  v45 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v85.__end_cap_, v44);
                else
                  v45 = 0;
                v46 = v45 + v42;
                buf[0].__first_ = v45;
                buf[0].__begin_ = v46;
                buf[0].__end_cap_.__value_ = &v45[v44];
                v47 = *(_OWORD *)__p;
                v46->__r_.__value_.__r.__words[2] = v84;
                *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
                __p[1] = 0;
                v84 = 0;
                __p[0] = 0;
                buf[0].__end_ = v46 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v85, buf);
                v48 = v85.__end_;
                std::__split_buffer<std::string>::~__split_buffer(buf);
                v85.__end_ = v48;
                if ((SHIBYTE(v84) & 0x80000000) == 0)
                  goto LABEL_21;
                first = (std::__split_buffer<std::string>::pointer)__p[0];
LABEL_61:
                operator delete(first);
                goto LABEL_21;
              }
              v41 = *(_OWORD *)__p;
              v85.__end_->__r_.__value_.__r.__words[2] = v84;
              *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
              v85.__end_ = v40 + 1;
            }
          }
LABEL_21:
          if (++v27 == v26)
          {
            v50 = v85.__begin_;
            v49 = v85.__end_;
            goto LABEL_63;
          }
        }
      }
      v50 = 0;
      v49 = 0;
LABEL_63:
      if ((char *)v49 - (char *)v50 == 24)
      {
        if (SHIBYTE(v50->__r_.__value_.__r.__words[2]) < 0)
          v50 = (std::vector<std::string>::pointer)v50->__r_.__value_.__r.__words[0];
        v51 = (char *)(**a4)(a4, v50);
        v52 = CSCppStringCache::intern(a5, v51);
        v54 = (unsigned __int8 **)a8[1];
        v53 = (unint64_t)a8[2];
        if ((unint64_t)v54 >= v53)
        {
          v55 = ((char *)v54 - *a8) >> 3;
          if ((unint64_t)(v55 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v56 = v53 - (_QWORD)*a8;
          v57 = v56 >> 2;
          if (v56 >> 2 <= (unint64_t)(v55 + 1))
            v57 = v55 + 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v57;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v79, v58);
          else
            v59 = 0;
          v71 = (unsigned __int8 **)&v59[8 * v55];
          *v71 = v52;
          v67 = (char *)(v71 + 1);
          v73 = *a8;
          v72 = a8[1];
          if (v72 != *a8)
          {
            do
            {
              v74 = (unsigned __int8 *)*((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v71 = v74;
            }
            while (v72 != v73);
            goto LABEL_111;
          }
          goto LABEL_112;
        }
      }
      else if (0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v50) >> 3) < 2)
      {
        v52 = CSCppStringCache::intern(a5, "");
        v54 = (unsigned __int8 **)a8[1];
        v61 = (unint64_t)a8[2];
        if ((unint64_t)v54 >= v61)
        {
          v62 = ((char *)v54 - *a8) >> 3;
          if ((unint64_t)(v62 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v63 = v61 - (_QWORD)*a8;
          v64 = v63 >> 2;
          if (v63 >> 2 <= (unint64_t)(v62 + 1))
            v64 = v62 + 1;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v64;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v79, v58);
          else
            v59 = 0;
          v71 = (unsigned __int8 **)&v59[8 * v62];
          *v71 = v52;
          v67 = (char *)(v71 + 1);
          v75 = *a8;
          v72 = a8[1];
          if (v72 != *a8)
          {
            do
            {
              v76 = (unsigned __int8 *)*((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v71 = v76;
            }
            while (v72 != v75);
LABEL_111:
            v72 = *a8;
          }
LABEL_112:
          *a8 = (char *)v71;
          a8[1] = v67;
          a8[2] = &v59[8 * v58];
          if (v72)
            operator delete(v72);
          goto LABEL_114;
        }
      }
      else
      {
        LOBYTE(buf[0].__first_) = 0;
        while (v50 != v49)
        {
          v60 = (const char *)v50;
          if (SHIBYTE(v50->__r_.__value_.__r.__words[2]) < 0)
            v60 = (const char *)v50->__r_.__value_.__r.__words[0];
          stringByAppendingPathComponents((char *)buf, 0x400uLL, (const char *)buf, v60);
          ++v50;
        }
        v65 = (char *)(**a4)(a4, (std::vector<std::string>::pointer)buf);
        v52 = CSCppStringCache::intern(a5, v65);
        v54 = (unsigned __int8 **)a8[1];
        v66 = (unint64_t)a8[2];
        if ((unint64_t)v54 >= v66)
        {
          v68 = ((char *)v54 - *a8) >> 3;
          if ((unint64_t)(v68 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v69 = v66 - (_QWORD)*a8;
          v70 = v69 >> 2;
          if (v69 >> 2 <= (unint64_t)(v68 + 1))
            v70 = v68 + 1;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v70;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v79, v58);
          else
            v59 = 0;
          v71 = (unsigned __int8 **)&v59[8 * v68];
          *v71 = v52;
          v67 = (char *)(v71 + 1);
          v77 = *a8;
          v72 = a8[1];
          if (v72 != *a8)
          {
            do
            {
              v78 = (unsigned __int8 *)*((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v71 = v78;
            }
            while (v72 != v77);
            goto LABEL_111;
          }
          goto LABEL_112;
        }
      }
      *v54 = v52;
      v67 = (char *)(v54 + 1);
LABEL_114:
      a8[1] = v67;
      buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      ++v22;
      v21 = v25;
    }
    while (v22 != v25);
  }
  buf[0].__first_ = (std::__split_buffer<std::string>::pointer)&v88;
  std::vector<std::unique_ptr<CSCppMemory>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B41446C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__split_buffer<std::string> *a34)
{
  _Unwind_Resume(exception_object);
}

const char *parse_dwarf2_path_list<Dwarf<Dwarf32,Pointer64,LittleEndian>>(uint64_t *a1, const char *a2, uint64_t (***a3)(_QWORD, char *), CSCppStringCache *a4, void **a5, void **a6)
{
  unint64_t v12;
  uint64_t v13;
  const char **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  const char **v21;
  char *v22;
  char *v23;
  char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  unint64_t v28;
  const char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char **v41;
  char *v42;
  char *v43;
  const char *v44;
  char *v45;
  const char *v46;
  const char *result;
  const char *i;
  unsigned int v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unsigned __int8 **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 **v68;
  char *v69;
  char *v70;
  unsigned __int8 *v71;
  char *v72;
  unsigned __int8 *v73;
  char *v74;
  unsigned __int8 *v75;
  char v76[1024];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t)(a5 + 2);
  v12 = (unint64_t)a5[2];
  v14 = (const char **)a5[1];
  if ((unint64_t)v14 >= v12)
  {
    v16 = ((char *)v14 - (_BYTE *)*a5) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v17 = v12 - (_QWORD)*a5;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a5 + 2), v19);
    else
      v20 = 0;
    v21 = (const char **)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = a2;
    v15 = v21 + 1;
    v24 = (char *)*a5;
    v23 = (char *)a5[1];
    if (v23 != *a5)
    {
      do
      {
        v25 = (const char *)*((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = (char *)*a5;
    }
    *a5 = v21;
    a5[1] = v15;
    a5[2] = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v14 = a2;
    v15 = v14 + 1;
  }
  a5[1] = v15;
  v26 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
  if (*v26)
  {
    v27 = v26;
    do
    {
      if (isAbsolutePath(v27))
      {
        v29 = (const char **)a5[1];
        v28 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v28)
        {
          v30 = ((char *)v29 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v31 = v28 - (_QWORD)*a5;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          else
            v34 = 0;
          v41 = (const char **)&v34[8 * v30];
          *v41 = v27;
          v37 = v41 + 1;
          v43 = (char *)*a5;
          v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              v44 = (const char *)*((_QWORD *)v42 - 1);
              v42 -= 8;
              *--v41 = v44;
            }
            while (v42 != v43);
            goto LABEL_46;
          }
          goto LABEL_47;
        }
      }
      else
      {
        stringByAppendingPathComponents(v76, 0x400uLL, a2, v27);
        v35 = (char *)(**a3)(a3, v76);
        v27 = (const char *)CSCppStringCache::intern(a4, v35);
        v29 = (const char **)a5[1];
        v36 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v36)
        {
          v38 = ((char *)v29 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v39 = v36 - (_QWORD)*a5;
          v40 = v39 >> 2;
          if (v39 >> 2 <= (unint64_t)(v38 + 1))
            v40 = v38 + 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v40;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13, v33);
          else
            v34 = 0;
          v41 = (const char **)&v34[8 * v38];
          *v41 = v27;
          v37 = v41 + 1;
          v45 = (char *)*a5;
          v42 = (char *)a5[1];
          if (v42 != *a5)
          {
            do
            {
              v46 = (const char *)*((_QWORD *)v42 - 1);
              v42 -= 8;
              *--v41 = v46;
            }
            while (v42 != v45);
LABEL_46:
            v42 = (char *)*a5;
          }
LABEL_47:
          *a5 = v41;
          a5[1] = v37;
          a5[2] = &v34[8 * v33];
          if (v42)
            operator delete(v42);
          goto LABEL_49;
        }
      }
      *v29 = v27;
      v37 = v29 + 1;
LABEL_49:
      a5[1] = v37;
      v27 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
    }
    while (*v27);
  }
  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
  for (i = result; *result; i = result)
  {
    v49 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(a1);
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)a1);
    TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)a1);
    if (*i == 47)
    {
      v50 = (unsigned __int8 *)(**a3)(a3, (char *)i);
      v52 = (unsigned __int8 **)a6[1];
      v51 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v51)
      {
        v53 = ((char *)v52 - (_BYTE *)*a6) >> 3;
        if ((unint64_t)(v53 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v54 = v51 - (_QWORD)*a6;
        v55 = v54 >> 2;
        if (v54 >> 2 <= (unint64_t)(v53 + 1))
          v55 = v53 + 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        else
          v57 = 0;
        v68 = (unsigned __int8 **)&v57[8 * v53];
        *v68 = v50;
        v64 = v68 + 1;
        v70 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            v71 = (unsigned __int8 *)*((_QWORD *)v69 - 1);
            v69 -= 8;
            *--v68 = v71;
          }
          while (v69 != v70);
          goto LABEL_92;
        }
        goto LABEL_93;
      }
    }
    else if (v49 >= (unint64_t)(((_BYTE *)a5[1] - (_BYTE *)*a5) >> 3))
    {
      v50 = (unsigned __int8 *)(**a3)(a3, (char *)i);
      v52 = (unsigned __int8 **)a6[1];
      v63 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v63)
      {
        v65 = ((char *)v52 - (_BYTE *)*a6) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v66 = v63 - (_QWORD)*a6;
        v67 = v66 >> 2;
        if (v66 >> 2 <= (unint64_t)(v65 + 1))
          v67 = v65 + 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v67;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        else
          v57 = 0;
        v68 = (unsigned __int8 **)&v57[8 * v65];
        *v68 = v50;
        v64 = v68 + 1;
        v72 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            v73 = (unsigned __int8 *)*((_QWORD *)v69 - 1);
            v69 -= 8;
            *--v68 = v73;
          }
          while (v69 != v72);
LABEL_92:
          v69 = (char *)*a6;
        }
LABEL_93:
        *a6 = v68;
        a6[1] = v64;
        a6[2] = &v57[8 * v56];
        if (v69)
          operator delete(v69);
        goto LABEL_95;
      }
    }
    else
    {
      stringByAppendingPathComponents(v76, 0x400uLL, *((const char **)*a5 + v49), i);
      v58 = (char *)(**a3)(a3, v76);
      v50 = CSCppStringCache::intern(a4, v58);
      v52 = (unsigned __int8 **)a6[1];
      v59 = (unint64_t)a6[2];
      if ((unint64_t)v52 >= v59)
      {
        v60 = ((char *)v52 - (_BYTE *)*a6) >> 3;
        if ((unint64_t)(v60 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v61 = v59 - (_QWORD)*a6;
        v62 = v61 >> 2;
        if (v61 >> 2 <= (unint64_t)(v60 + 1))
          v62 = v60 + 1;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v62;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v56);
        else
          v57 = 0;
        v68 = (unsigned __int8 **)&v57[8 * v60];
        *v68 = v50;
        v64 = v68 + 1;
        v74 = (char *)*a6;
        v69 = (char *)a6[1];
        if (v69 != *a6)
        {
          do
          {
            v75 = (unsigned __int8 *)*((_QWORD *)v69 - 1);
            v69 -= 8;
            *--v68 = v75;
          }
          while (v69 != v74);
          goto LABEL_92;
        }
        goto LABEL_93;
      }
    }
    *v52 = v50;
    v64 = v52 + 1;
LABEL_95:
    a6[1] = v64;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::FORM_string((uint64_t)a1);
  }
  return result;
}

uint64_t std::deque<TRawSourceInfo<Pointer64>>::emplace_back<unsigned long long &,int,char const*&,int &,unsigned int &>(_QWORD *a1, _QWORD *a2, int *a3, uint64_t *a4, int *a5, unsigned int *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;

  v12 = a1[2];
  v13 = a1[1];
  if (v12 == v13)
    v14 = 0;
  else
    v14 = 102 * ((v12 - v13) >> 3) - 1;
  v15 = a1[4];
  v16 = a1[5];
  v17 = v16 + v15;
  if (v14 == v16 + v15)
  {
    std::deque<TRawSourceInfo<Pointer64>>::__add_back_capacity(a1);
    v15 = a1[4];
    v16 = a1[5];
    v13 = a1[1];
    v17 = v15 + v16;
  }
  v18 = *(_QWORD *)(v13 + 8 * (v17 / 0x66)) + 40 * (v17 % 0x66);
  v19 = *a3;
  v20 = *a4;
  v21 = *a5;
  v22 = *a6;
  *(_QWORD *)v18 = *a2;
  *(_QWORD *)(v18 + 8) = v19;
  *(_QWORD *)(v18 + 16) = v20;
  *(_DWORD *)(v18 + 24) = v21;
  *(_QWORD *)(v18 + 28) = v22;
  v23 = v16 + 1;
  a1[5] = v23;
  v24 = v15 + v23;
  v25 = (_QWORD *)(v13 + 8 * (v24 / 0x66));
  v26 = v24 % 0x66;
  if (v26)
    v27 = *v25 + 40 * v26;
  else
    v27 = *(v25 - 1) + 4080;
  return v27 - 40;
}

uint64_t read_action_for_line_string_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v8)();
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == 8)
  {
    result = operator new();
    v8 = &off_1E6778068;
  }
  else
  {
    if (a1 != 31 && a1 != 14)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled form in read string binding ", 38);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
    }
    result = operator new();
    v8 = &off_1E6778468;
  }
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = a3;
  return result;
}

void sub_1B4144F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t read_action_for_line_data_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (**v8)();
  _QWORD *exception;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  switch(a1)
  {
    case 5:
      result = operator new();
      v8 = &off_1E6778508;
      break;
    case 6:
      result = operator new();
      v8 = &off_1E6778558;
      break;
    case 7:
      result = operator new();
      v8 = &off_1E67785A8;
      break;
    case 11:
      result = operator new();
      v8 = &off_1E67784B8;
      break;
    case 15:
      result = operator new();
      v8 = &off_1E67785F8;
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unhandled form in read data binding ", 36);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v13, &v11);
      Exception::Exception(v10, &v11);
      exception = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(exception, (uint64_t)v10);
  }
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = a3;
  return result;
}

void sub_1B41450FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t skip_action_for_line_form<Dwarf<Dwarf32,Pointer64,LittleEndian>>(int a1)
{
  uint64_t result;
  uint64_t (**v2)();
  int v3;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  switch(a1)
  {
    case 5:
      result = operator new();
      *(_QWORD *)result = &off_1E67786E8;
      v3 = 2;
      goto LABEL_9;
    case 6:
      result = operator new();
      *(_QWORD *)result = &off_1E67786E8;
      v3 = 4;
      goto LABEL_9;
    case 7:
      result = operator new();
      *(_QWORD *)result = &off_1E67786E8;
      v3 = 8;
      goto LABEL_9;
    case 8:
      result = operator new();
      v2 = &off_1E6778698;
      goto LABEL_12;
    case 9:
      result = operator new();
      v2 = &off_1E6778738;
      goto LABEL_12;
    case 10:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_15;
    case 11:
      goto LABEL_4;
    case 14:
    case 23:
    case 31:
      result = operator new();
      v2 = &off_1E6778648;
      goto LABEL_12;
    case 15:
      result = operator new();
      v2 = &off_1E6778788;
LABEL_12:
      *(_QWORD *)result = v2;
      break;
    case 30:
      result = operator new();
      *(_QWORD *)result = &off_1E67786E8;
      *(_DWORD *)(result + 8) = 16;
      break;
    default:
      if (a1 != 37)
      {
LABEL_15:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Unhandled dwarf attribute in Debug Line Table ", 46);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
        Exception::Exception(v5, &v6);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v5);
      }
LABEL_4:
      result = operator new();
      *(_QWORD *)result = &off_1E67786E8;
      v3 = 1;
LABEL_9:
      *(_DWORD *)(result + 8) = v3;
      break;
  }
  return result;
}

void sub_1B414538C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void TDwarfReadDW_FORM_LineStrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadDW_FORM_LineStrpAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadDW_FORM_LineStrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;

  result = *(_QWORD *)(a2 + 16);
  if ((*(_WORD *)(a1 + 24) & **(_WORD **)(a1 + 16)) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    v5 = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::dwarf_offset(result);
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::set_cursor(v4, v5);
    v6 = *(_QWORD **)(a1 + 8);
    **(_WORD **)(a1 + 16) |= *(_WORD *)(a1 + 24);
    *v6 = *(_QWORD *)v4 + *(unsigned int *)(v4 + 8);
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_Data1AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_Data1AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    ++*(_DWORD *)(result + 8);
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint8((uint64_t *)result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_Data2AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_Data2AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint16(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_Data4AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_Data4AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint32(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_Data8AttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_Data8AttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v4;
  int v5;
  int v6;

  result = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
  {
    *(_DWORD *)(result + 8) += 4;
  }
  else
  {
    *v4 = v6 | v5;
    result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::uint64(result);
    **(_DWORD **)(a1 + 8) = result;
  }
  return result;
}

void TDwarfReadLineDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfReadLineDW_FORM_UdataAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfReadLineDW_FORM_UdataAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _WORD *v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = *(uint64_t **)(a2 + 16);
  v4 = *(_WORD **)(a1 + 16);
  v5 = (unsigned __int16)*v4;
  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 & v5) != 0)
    return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB((uint64_t)v3);
  *v4 = v6 | v5;
  result = TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::ULEB(v3);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Line_StrpAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

void TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8) += 4;
}

uint64_t TDwarfSkipDW_FORM_Line_StrpAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipDW_FORM_Line_StringAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

size_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_string(*(_QWORD *)(a2 + 16));
}

uint64_t TDwarfSkipDW_FORM_Line_StringAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipLineConstantAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8) += *(_DWORD *)(result + 8);
  return result;
}

uint64_t TDwarfSkipLineConstantAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::is_skip_constant()
{
  return 1;
}

void TDwarfSkipLineDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipLineDW_FORM_BlockAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipLineDW_FORM_BlockAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_FORM_block(*(_QWORD *)(a2 + 16));
}

void TDwarfSkipLineULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::~TDwarfSkipLineULEBAttributeAction()
{
  JUMPOUT(0x1B5E36940);
}

uint64_t TDwarfSkipLineULEBAttributeAction<Dwarf<Dwarf32,Pointer64,LittleEndian>>::action(uint64_t a1, uint64_t a2)
{
  return TDwarfStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>::skip_ULEB(*(_QWORD *)(a2 + 16));
}

void std::deque<TRawSourceInfo<Pointer64>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B4145A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<TRangeValue<Pointer64,char const*>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B4145D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRawSourceInfo<Pointer64>,TRawSourceInfo<Pointer64>*,TRawSourceInfo<Pointer64>&,TRawSourceInfo<Pointer64>**,long,102l>,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>>>(__int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, void ***a5)
{
  void **v8;
  __int128 **v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *i;
  void **v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *result;
  void **v17;

  v8 = *a5;
  if (a1 == a3)
  {
    v15 = a2;
  }
  else
  {
    v9 = a1 + 1;
    v10 = (uint64_t)(*a1 + 255);
    v11 = a2;
    for (i = (__int128 *)v10; ; i = v14 + 255)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>(v11, i, v8);
      v8 = v13;
      *a5 = v13;
      if (v9 == a3)
        break;
      v14 = *v9++;
      v11 = v14;
    }
    v15 = *a3;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>(v15, a4, v8);
  *a5 = v17;
  return result;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>,0>(__int128 *a1, __int128 *a2, void **a3)
{
  __int128 *v3;
  __int128 *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>::operator=[abi:ne180100](&v6, v3);
    v3 = (__int128 *)((char *)v3 + 40);
  }
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<TRawSourceInfo<Pointer64>>>::operator=[abi:ne180100](void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*v4) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(v7, v16);
    else
      v17 = 0;
    v18 = &v17[40 * v13];
    v19 = &v17[40 * v16];
    v20 = *a2;
    v21 = a2[1];
    *((_QWORD *)v18 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    v12 = v18 + 40;
    v23 = (char *)*v4;
    v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        v24 = *(_OWORD *)(v22 - 40);
        v25 = *(_OWORD *)(v22 - 24);
        *((_DWORD *)v18 - 2) = *((_DWORD *)v22 - 2);
        *(_OWORD *)(v18 - 24) = v25;
        *(_OWORD *)(v18 - 40) = v24;
        v18 -= 40;
        v22 -= 40;
      }
      while (v22 != v23);
      v22 = (char *)*v4;
    }
    *v4 = v18;
    v4[1] = v12;
    v4[2] = v19;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v10 = *a2;
    v11 = a2[1];
    *((_QWORD *)v5 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v5 = v10;
    *((_OWORD *)v5 + 1) = v11;
    v12 = v5 + 40;
  }
  v4[1] = v12;
  return a1;
}

__int128 *std::__for_each_segment[abi:ne180100]<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<TRangeValue<Pointer64,char const*>,TRangeValue<Pointer64,char const*>*,TRangeValue<Pointer64,char const*>&,TRangeValue<Pointer64,char const*>**,long,170l>,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>>>(__int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, void ***a5)
{
  void **v8;
  __int128 **v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *i;
  void **v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *result;
  void **v17;

  v8 = *a5;
  if (a1 == a3)
  {
    v15 = a2;
  }
  else
  {
    v9 = a1 + 1;
    v10 = (uint64_t)(*a1 + 255);
    v11 = a2;
    for (i = (__int128 *)v10; ; i = v14 + 255)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>(v11, i, v8);
      v8 = v13;
      *a5 = v13;
      if (v9 == a3)
        break;
      v14 = *v9++;
      v11 = v14;
    }
    v15 = *a3;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>(v15, a4, v8);
  *a5 = v17;
  return result;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRangeValue<Pointer64,char const*> *,TRangeValue<Pointer64,char const*> *,std::back_insert_iterator<std::vector<TRangeValue<Pointer64,char const*>>>,0>(__int128 *a1, __int128 *a2, void **a3)
{
  __int128 *v3;
  __int128 *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<CSCppFlatbufferRelocation>>::operator=[abi:ne180100](&v6, v3);
    v3 = (__int128 *)((char *)v3 + 24);
  }
  while (v3 != v4);
  return v4;
}

uint64_t std::deque<TRangeValue<Pointer64,char const*>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<TRawSymbol<Pointer64>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void **v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x27];
    v7 = (unint64_t)*v6 + 104 * (v5 % 0x27);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x27] + 104 * ((a1[5] + v5) % 0x27);
    if (v7 != v8)
    {
      do
      {
        v15 = (void **)(v7 + 64);
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 104;
        if (v7 - (_QWORD)*v6 == 4056)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 19;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 39;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<TRawSourceInfo<Pointer64>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 51;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 102;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<TRangeValue<Pointer32,char const*> *,std::allocator<TRangeValue<Pointer32,char const*> *>>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<TDwarfDIEStream<Dwarf<Dwarf32,Pointer64,LittleEndian>>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void extract_direct_stabs_from_header_filtering_redacted<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  BOOL v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 8);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 32))(v19, a5, a6);
  v11 = a4;
  TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a2, a4);
  if (a4)
  {
    v12 = 0;
    v13 = (unsigned __int8 *)(a3 + 4);
    do
    {
      v14 = *v13;
      v15 = v14 <= 0x1F && (v14 & 0xE) == 14;
      if (v15 && v13[1])
      {
        v16 = "$$$bad-name-in-nlist$$$";
        if (a6 > *((unsigned int *)v13 - 1)
          && TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at((uint64_t)&v19))
        {
          v16 = (const char *)(v18 + *((unsigned int *)v13 - 1));
        }
        if (!v12)
        {
          if (!strcmp(v16, "<redacted>"))
            v12 = v16;
          else
            v12 = 0;
        }
        if (v16 == v12)
        {
          v12 = v16;
        }
        else
        {
          v17 = 38289424;
          if ((v14 & 1) == 0)
            v17 = 38289408;
          TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, *(_QWORD *)(v13 + 4) + v10, 0, (uint64_t)v16, (uint64_t)v16, v17 | (2 * v14) & 0x20 | (8 * *((unsigned __int16 *)v13 + 1)) & 0x40, 0, 0);
        }
      }
      v13 += 16;
      --v11;
    }
    while (v11);
  }
}

void extract_stripped_locals_from_dyld_shared_cache<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  int v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  const char *v19;

  v6 = *((_DWORD *)a3 + 2);
  v5 = *((_DWORD *)a3 + 3);
  if (v5 != v6)
  {
    v10 = *(_QWORD *)(a4 + 32);
    v11 = *a3;
    TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a5, (v5 - v6));
    v13 = *((unsigned int *)a3 + 2);
    v12 = *((unsigned int *)a3 + 3);
    if (v13 < v12)
    {
      v14 = (_QWORD *)(v11 + a1 + 16 * v13 + 8);
      do
      {
        v15 = *((unsigned __int8 *)v14 - 4);
        v16 = v15 <= 0x1F && (v15 & 0xE) == 14;
        if (v16 && *((_BYTE *)v14 - 3))
        {
          v17 = 38289440;
          if ((v15 & 0x10) == 0)
            v17 = 38289408;
          v18 = *((unsigned int *)v14 - 2);
          if (v18 >= *((_DWORD *)a3 + 4) || (v19 = (const char *)(a1 + v18 + a3[3])) == 0 || !*v19)
            v19 = "$$$bad-name-in-nlist$$$";
          TRawSymbolOwnerData<Pointer64>::emplace_symbol(a5, *v14 + v10, 0, (uint64_t)v19, (uint64_t)v19, v17 | (8 * *((unsigned __int16 *)v14 - 1)) & 0x40, 0, 0);
          v12 = *((unsigned int *)a3 + 3);
        }
        ++v13;
        v14 += 2;
      }
      while (v13 < v12);
    }
  }
}

void extract_direct_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, _QWORD *a7)
{
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v22 = a1[4];
  v24 = a1[1];
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 32))(v24, a5, a6);
  v13 = a4;
  v23 = (uint64_t *)a2;
  TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by(a2, a4);
  if (a4)
  {
    v14 = (unsigned __int8 *)(a3 + 4);
    do
    {
      v15 = *v14;
      v16 = v15 <= 0x1F && (v15 & 0xE) == 14;
      if (v16 && v14[1])
      {
        if ((v15 & 1) != 0)
          v17 = 38289424;
        else
          v17 = 38289408;
        v18 = *((unsigned __int16 *)v14 + 1);
        v19 = "$$$bad-name-in-nlist$$$";
        if (a6 > *((unsigned int *)v14 - 1)
          && TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at((uint64_t)&v24))
        {
          v19 = (const char *)(v21 + *((unsigned int *)v14 - 1));
        }
        if (*(_DWORD *)(a1[3] + 12) != 1 || strncmp(v19, "ltmp", 4uLL))
        {
          v20 = *(_QWORD *)(v14 + 4) + v22;
          if (a7)
            v20 = TAddressRelocator<Pointer64>::relocate(a7, v20);
          TRawSymbolOwnerData<Pointer64>::emplace_symbol(v23, v20, 0, (uint64_t)v19, (uint64_t)v19, v17 | (2 * v15) & 0x20 | (8 * v18) & 0x40, 0, 0);
        }
      }
      v14 += 16;
      --v13;
    }
    while (v13);
  }
}

void extract_indirect_stabs_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unint64_t a10, _QWORD *a11)
{
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v31;

  v11 = *(unsigned int *)(a3 + 72);
  v12 = *(_DWORD *)(a3 + 40);
  if (v11 <= v12)
  {
    v13 = *(_QWORD *)(a3 + 32);
    if (v13)
    {
      v17 = *(unsigned int *)(a3 + 68);
      v18 = *(_QWORD *)(a1 + 32) + v13;
      v31 = *(_QWORD *)(a1 + 8);
      v19 = v12 / v11;
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
      TRawSymbolOwnerData<Pointer64>::presize_symbols_container_by((uint64_t)a2, v19);
      v20 = 0;
      if (a5 >= v17)
        v21 = a5 - v17;
      else
        v21 = 0;
      if (v19 <= 1)
        v19 = 1;
      else
        v19 = v19;
      v22 = (unsigned int *)(a4 + 4 * v17);
      v28 = a7;
      while (1)
      {
        if (!v21)
          return;
        v23 = *v22;
        v24 = v18 + v20;
        v25 = "$$$indirect-absolute-symbol$$$";
        if ((v23 & 0x40000000) != 0)
          goto LABEL_21;
        if ((v23 & 0x80000000) != 0)
          break;
        if (v23 < a7)
        {
          v26 = (unsigned int *)(a6 + 16 * v23);
          v25 = "$$$bad-name-in-nlist$$$";
          if (a10 > *v26 && TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at((uint64_t)&v31))
            v25 = (const char *)(v27 + *v26);
          if (a11)
            v24 = TAddressRelocator<Pointer64>::relocate(a11, v18 + v20);
          a7 = v28;
          goto LABEL_23;
        }
LABEL_24:
        --v21;
        v20 += v11;
        ++v22;
        if (!--v19)
          return;
      }
      v25 = "$$$indirect-local-symbol$$$";
LABEL_21:
      if (a11)
        v24 = TAddressRelocator<Pointer64>::relocate(a11, v18 + v20);
LABEL_23:
      TRawSymbolOwnerData<Pointer64>::emplace_symbol(a2, v24, v11, (uint64_t)v25, (uint64_t)v25, 34095362, 0, 0);
      goto LABEL_24;
    }
  }
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symtab(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 32 + v1;
  v6 = a1 + 32;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 2);
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::dysymtab(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 32 + v1;
  v6 = a1 + 32;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 11);
  return result;
}

uint64_t TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::string_at(uint64_t a1)
{
  uint64_t (*i)(void);
  uint64_t result;
  int v4;
  uint64_t v5;

  for (i = *(uint64_t (**)(void))(**(_QWORD **)a1 + 32); ; i = *(uint64_t (**)(void))(**(_QWORD **)a1 + 32))
  {
    result = i();
    if (!result)
      break;
    v5 = 0;
    while (v4 != (_DWORD)v5)
    {
      if (!*(unsigned __int8 *)(result + v5++))
        return result;
    }
  }
  return result;
}

_DWORD *TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::function_starts(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = a1;
  v5 = a1 + 32 + v1;
  v6 = a1 + 32;
  do
    result = (_DWORD *)TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v3);
  while (result && *result != 38);
  return result;
}

void extract_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __n128 (*v31)(uint64_t, uint64_t);
  uint64_t (*v32)();
  uint64_t v33;
  int v34;
  int v35;
  _QWORD v36[4];
  _QWORD v37[4];
  __int128 buf;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 32);
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x2000000000;
  v37[3] = a2 + 208;
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x2000000000;
  v36[3] = a2 + 96;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a5, a6);
  v28 = 0;
  v29 = &v28;
  v30 = 0x3802000000;
  v31 = __Block_byref_object_copy__231;
  v32 = __Block_byref_object_dispose__232;
  v33 = a3;
  v34 = a4;
  v35 = 0;
  if (!a4)
    goto LABEL_19;
  v12 = v11;
  v13 = &v28;
  while (1)
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x2000000000;
    v27 = 0;
    v27 = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(v13 + 5);
    v14 = v25[3];
    if (*(_BYTE *)(v14 + 4) != 100 || *(_QWORD *)(v14 + 8))
      goto LABEL_15;
    v15 = *((unsigned int *)v29 + 13);
    if (v15 >= *((_DWORD *)v29 + 12))
      break;
    v16 = v29 + 5;
    v17 = v29[5];
    v18 = v17 + 16 * v15;
    v25[3] = v18;
    if (!v17)
      goto LABEL_18;
    if (*(_BYTE *)(v18 + 4) == 102 && *(_WORD *)(v18 + 6) == 1)
    {
      v19 = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(v16);
      v25[3] = (uint64_t)v19;
      v20 = (char *)(v12 + *v19);
      if (!*v20)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v21 = *(_QWORD *)(a1 + 48);
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v21;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Empty object_file_path in mach-o header: %s\n", (uint8_t *)&buf, 0xCu);
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Empty object_file_path in mach-o header: %s\n", *(const char **)(a1 + 48));
      }
      if (!deny_nfs_mount_lookup(v20))
      {
        *(_QWORD *)&buf = CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification(v20, (void **)(*(unsigned int *)(*(_QWORD *)(a1 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 24) + 8) & 0xFFFFFF) << 32)), 537657344, 0);
        *((_QWORD *)&buf + 1) = v22;
        v23[0] = MEMORY[0x1E0C809B0];
        v23[1] = 0x40000000;
        v23[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke;
        v23[3] = &unk_1E6778858;
        v23[4] = &v24;
        v23[5] = &v28;
        v23[8] = v10;
        v23[9] = v12;
        v23[10] = a1;
        v23[11] = a2;
        v23[6] = v36;
        v23[7] = v37;
        CSSymbolicatorForeachSymbolOwnerAtTime(buf, v22, 0x8000000000000000, (uint64_t)v23);
        CSCppTypeRefMark::~CSCppTypeRefMark((CSCppTypeRefMark *)&buf);
      }
    }
LABEL_15:
    _Block_object_dispose(&v24, 8);
    v13 = v29;
    if (*((_DWORD *)v29 + 13) >= *((_DWORD *)v29 + 12))
      goto LABEL_19;
  }
  v25[3] = 0;
LABEL_18:
  _Block_object_dispose(&v24, 8);
LABEL_19:
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(v37, 8);
}

void sub_1B4146D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  CSCppTypeRefMark::~CSCppTypeRefMark((CSCppTypeRefMark *)(v30 - 128));
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 192), 8);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  _Unwind_Resume(a1);
}

unsigned int *extract_relinked_subdylibs_in_debug_maps_from_header<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unsigned int *result;
  unsigned int *v11;
  void **v12;
  CSCppStringCache *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v9 = *(_QWORD *)(a1 + 32);
  result = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a5, a6);
  v23 = a3;
  v24 = a4;
  v25 = 0;
  if (a4)
  {
    v11 = result;
    v12 = (void **)(a2 + 496);
    v13 = (CSCppStringCache *)(a2 + 96);
    while (1)
    {
      result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
      if (*((_BYTE *)result + 4) == 100 && !*((_QWORD *)result + 1))
      {
        if (v25 >= v24 || !v23)
          return result;
        if (*(_BYTE *)(v23 + 16 * v25 + 4) == 104)
        {
          result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
          if (v25 >= v24)
            return result;
          v14 = *result;
          result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
          if (*((_BYTE *)result + 4) == 100)
          {
            if (v25 >= v24)
              return result;
            result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            if (*((_BYTE *)result + 4) == 100)
            {
              if (v25 >= v24)
                return result;
              result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
              if (*((_BYTE *)result + 4) == 102)
              {
                v15 = v25;
                if (v25 < (unint64_t)v24)
                  break;
              }
            }
          }
        }
      }
LABEL_30:
      if (v25 >= v24)
        return result;
    }
    v16 = (char *)v11 + v14;
    while (1)
    {
      if (!v23)
        goto LABEL_20;
      v17 = v23 + 16 * v15;
      v18 = *(unsigned __int8 *)(v17 + 4);
      if (v18 == 100)
      {
        if (!*(_QWORD *)(v17 + 8))
          goto LABEL_30;
      }
      else if (v18 == 46)
      {
        NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
LABEL_20:
        result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
        if (*((_BYTE *)result + 4) == 36)
        {
          v22 = *((_QWORD *)result + 1) + v9;
          do
          {
            result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            v19 = *((unsigned __int8 *)result + 4);
          }
          while (v19 == 132);
          if (v19 == 36)
          {
            v21 = *((_QWORD *)result + 1);
            if (v25 >= v24)
              goto LABEL_30;
            result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
            if (*((_BYTE *)result + 4) == 78)
            {
              v20 = CSCppStringCache::intern(v13, v16);
              result = (unsigned int *)std::vector<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*>(v12, &v22, &v21, (uint64_t *)&v20);
            }
          }
        }
        goto LABEL_29;
      }
      result = (unsigned int *)NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(&v23);
LABEL_29:
      v15 = v25;
      if (v25 >= (unint64_t)v24)
        goto LABEL_30;
    }
  }
  return result;
}

__n128 __Block_byref_object_copy__231(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *exception;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((unsigned int *)a1 + 3);
  if (v1 >= *((_DWORD *)a1 + 2))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"out of range index into nlist array", 35);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v8, &v6);
    Exception::Exception(v5, &v6);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v5);
  }
  v2 = *a1;
  *((_DWORD *)a1 + 3) = v1 + 1;
  return v2 + 16 * v1;
}

void sub_1B41470A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v21[4];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8);
  result = CSSymbolOwnerGetLastModifiedTimestamp(a2, a3);
  v8 = result - v6;
  if (v6 > result)
    v8 = v6 - result;
  if (v6)
    v9 = v8 > 5;
  else
    v9 = 0;
  if (!v9)
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C809B0];
    while (1)
    {
      while (1)
      {
        result = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                              + 40));
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
        v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4);
        if (v12 == 46)
          break;
        if (v12 == 100)
          return result;
      }
      result = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                            + 40));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
      v13 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (*((_BYTE *)v13 + 4) != 36)
        break;
      v14 = *((_QWORD *)v13 + 1);
      v15 = *(_QWORD *)(a1 + 64);
      v16 = (_BYTE *)(*(_QWORD *)(a1 + 72) + *v13);
      if (!*v16)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 48);
          *(_DWORD *)buf = 136315138;
          v26 = v17;
          _os_log_impl(&dword_1B40C5000, v10, OS_LOG_TYPE_ERROR, "Empty function_name in mach-o header: %s\n", buf, 0xCu);
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Empty function_name in mach-o header: %s\n", *(const char **)(*(_QWORD *)(a1 + 80) + 48));
      }
      v18 = v15 + v14;
      do
      {
        result = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                              + 40));
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
        v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4);
      }
      while (v19 == 132);
      if (v19 != 36)
        break;
      result = NListRangeChecker<SizeAndEndianness<Pointer64,LittleEndian>>::next((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                            + 40));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4) != 78)
        break;
      v21[0] = v11;
      v21[1] = 0x40000000;
      v21[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_235;
      v21[3] = &unk_1E6778830;
      v20 = *(_QWORD *)(a1 + 88);
      v23 = v18;
      v24 = v20;
      v22 = *(_OWORD *)(a1 + 48);
      CSSymbolOwnerForeachSymbolWithMangledName(a2, a3, (uint64_t)v16, (uint64_t)v21);
    }
  }
  return result;
}

unint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_235(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  TMMapSymbolOwnerData *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t i;
  void ***v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v38[4];
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD v42[6];
  _BYTE v43[24];
  _BYTE *v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint8_t buf[16];
  uint64_t v48;
  uint8_t *v49;
  void (*v50)(uint64_t);
  const char *v51;
  __int128 v52;
  _BYTE v53[40];
  _BYTE v54[32];
  uint64_t v55;
  _QWORD v56[3];
  _QWORD *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 48) - CSSymbolGetRange(a2, a3);
  if (CSSymbolIsKnownLength(a2, a3))
    v7 = 256;
  else
    v7 = 0;
  if (CSSymbolIsOmitFramePointer(a2, a3))
    v8 = v7 | 0x80;
  else
    v8 = v7;
  v9 = MEMORY[0x1E0C809B0];
  if (!v8)
    goto LABEL_60;
  v57 = 0;
  *(_QWORD *)buf = &off_1E6778888;
  *(_QWORD *)&buf[8] = v56;
  v49 = buf;
  std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](buf, v56);
  v10 = v49;
  if (v49 == buf)
  {
    v11 = 4;
    v10 = buf;
  }
  else
  {
    if (!v49)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_13:
  v12 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if ((v13 - 1) < 2)
  {
    v14 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 48);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 56);
      v17 = CSCppStringCache::intern(*(CSCppStringCache **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v15);
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v58[0] = v17;
    v58[1] = v16;
    v23 = atomic_load((unsigned int *)(v14 + 28));
    if ((v23 & 0x80000000) != 0)
    {
      v24 = (__int128 *)v58;
      if (!*(_QWORD *)(v14 + 48))
        v24 = 0;
    }
    else
    {
      v24 = 0;
    }
    *(_OWORD *)buf = *(_OWORD *)v14;
    v48 = 0;
    v49 = 0;
    v50 = (void (*)(uint64_t))"$$$debug-map-fake-name$$$";
    v51 = "$$$debug-map-fake-mangled-name$$$";
    *(_QWORD *)&v53[32] = 0;
    v52 = 0u;
    memset(v53, 0, 25);
    if (v24)
    {
      v52 = *v24;
      v25 = v8 | 0x88000000;
    }
    else
    {
      v25 = v8 | 0x8000000;
    }
    HIDWORD(v49) = v25;
    v26 = *(_QWORD *)(v14 + 64);
    for (i = *(_QWORD *)(v14 + 72); v26 != i; v26 += 104)
    {
      if (!v57)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, uint64_t, _BYTE *, _QWORD))(*v57 + 48))(v57, v26, v53, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    }
    slideSymbolsByOffset<Pointer64>(buf, v6);
    TRawSymbolOwnerData<Pointer64>::add_symbol(*(uint64_t **)(a1 + 56), (__n128 *)buf);
    v45[0] = v53;
    v28 = (void ***)v45;
    goto LABEL_54;
  }
  if (v13 == 4)
  {
    v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
    v41 = 0;
    if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v18, *(unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL), &v41) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps", buf, 2u);
      }
      fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      goto LABEL_55;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v48 = 0x9002000000;
    v49 = (uint8_t *)__Block_byref_object_copy__237;
    v50 = __Block_byref_object_dispose__238;
    v19 = *(unsigned int *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    v51 = (const char *)(v41 + v6);
    v52 = v19;
    *(_DWORD *)v53 = 0;
    *(_QWORD *)&v53[8] = "$$$debug-map-fake-name$$$";
    *(_QWORD *)&v53[16] = "$$$debug-map-fake-mangled-name$$$";
    v55 = 0;
    *(_OWORD *)&v53[24] = 0u;
    memset(v54, 0, 25);
    *(_DWORD *)&v53[4] = v8 | 0x8000000;
    v46 = 0;
    v20 = operator new(0x20uLL);
    *v20 = &off_1E6778968;
    v20[1] = v45;
    v20[2] = v18;
    v20[3] = v6;
    v59 = v20;
    std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](v58, v45);
    v21 = v59;
    if (v59 == v58)
    {
      v22 = 4;
      v21 = v58;
    }
    else
    {
      if (!v59)
        goto LABEL_38;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_38:
    v42[0] = v9;
    v42[1] = 1174405120;
    v42[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_239;
    v42[3] = &unk_1E67787D0;
    v29 = v43;
    v30 = (uint64_t)v46;
    if (v46)
    {
      if (v46 == v45)
      {
        v44 = v43;
        (*(void (**)(_QWORD *, _BYTE *))(v45[0] + 24))(v45, v43);
LABEL_43:
        v31 = *(_QWORD *)(a1 + 32);
        v42[4] = buf;
        v42[5] = v31;
        TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v18, a3 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)v42);
        TRawSymbolOwnerData<Pointer64>::add_symbol(*(uint64_t **)(a1 + 56), (__n128 *)(*(_QWORD *)&buf[8] + 40));
        if (v44 == v43)
        {
          v32 = 4;
        }
        else
        {
          if (!v44)
            goto LABEL_48;
          v32 = 5;
          v29 = v44;
        }
        (*(void (**)(_QWORD *))(*v29 + 8 * v32))(v29);
LABEL_48:
        v33 = v46;
        if (v46 == v45)
        {
          v34 = 4;
          v33 = v45;
        }
        else
        {
          if (!v46)
          {
LABEL_53:
            _Block_object_dispose(buf, 8);
            v58[0] = v54;
            v28 = (void ***)v58;
LABEL_54:
            std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v28);
            goto LABEL_55;
          }
          v34 = 5;
        }
        (*(void (**)(void))(*v33 + 8 * v34))();
        goto LABEL_53;
      }
      v30 = (*(uint64_t (**)(void))(*v46 + 16))();
    }
    v44 = (_BYTE *)v30;
    goto LABEL_43;
  }
LABEL_55:
  v35 = v57;
  if (v57 == v56)
  {
    v36 = 4;
    v35 = v56;
    goto LABEL_59;
  }
  if (v57)
  {
    v36 = 5;
LABEL_59:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
LABEL_60:
  v38[0] = v9;
  v38[1] = 0x40000000;
  v38[2] = ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_241;
  v38[3] = &unk_1E6778808;
  v39 = *(_OWORD *)(a1 + 32);
  v40 = v6;
  return CSSymbolForeachSourceInfo(a2, a3, (uint64_t)v38);
}

void sub_1B41478CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v46 = a30;
  if (a30 == &a27)
  {
    v47 = 4;
    v46 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_6:
  _Block_object_dispose(&a31, 8);
  *(_QWORD *)(v44 - 120) = &a44;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 120));
  v48 = *(_QWORD **)(v44 - 128);
  if (v48 == (_QWORD *)(v44 - 152))
  {
    v49 = 4;
    v48 = (_QWORD *)(v44 - 152);
  }
  else
  {
    if (!v48)
      goto LABEL_11;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_11:
  _Unwind_Resume(a1);
}

_QWORD *slideSymbolsByOffset<Pointer64>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  *result += a2;
  v2 = result[8];
  for (i = result[9]; v2 != i; v2 += 104)
    result = (_QWORD *)slideSymbolsByOffset<Pointer64>(v2, a2);
  return result;
}

uint64_t __Block_byref_object_copy__237(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_OWORD *)(a1 + 40) = 0u;
  v2 = a1 + 40;
  *(_QWORD *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  return TRawSymbol<Pointer64>::operator=(v2, a2 + 40);
}

void __Block_byref_object_dispose__238(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 104);
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_239(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1[4] + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v6 = a2;
  v4 = a1[9];
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v6, v2 + 104, v3);
}

uint64_t __copy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

_QWORD *__destroy_helper_block_e8_48c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___Z30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_E_block_invoke_241(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  CSCppSymbolOwner *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  TMMapSymbolOwnerData *v18;
  unsigned int *v19;
  _DWORD *v20;
  CSCppStringCache *v21;
  char *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;

  v5 = (CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v6 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFF8));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if ((v7 - 1) >= 2)
  {
    if (v7 != 4)
      return;
    v18 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v5);
    v19 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (_DWORD *)*((_QWORD *)v18 + 11);
    v21 = *(CSCppStringCache **)(*(_QWORD *)(a1[4] + 8) + 24);
    v22 = (char *)CSCppMMapSourceInfo::path((CSCppMMapSourceInfo *)v19, (uint64_t)v20+ 32 * v20[2]+ 24 * v20[3]+ (24 * v20[4])+ (unint64_t)(4 * v20[4])+ (36 * v20[5])+ (20 * v20[6])+ v20[22]+ v20[20]+ 96);
    v23 = CSCppStringCache::intern(v21, v22);
    v52 = 0;
    TMMapSymbolOwnerData::convert_archive_address_to_real_address(v18, *v19, &v52);
    v24 = a1[6];
    v11 = *(void ***)(*(_QWORD *)(a1[5] + 8) + 24);
    v25 = v24 + v52;
    v26 = v19[1];
    v28 = v19[3];
    v27 = v19[4];
    v16 = (char *)v11[1];
    v29 = (char *)v11[2];
    if (v16 < v29)
    {
      *(_QWORD *)v16 = v25;
      *((_QWORD *)v16 + 1) = v26;
      *((_QWORD *)v16 + 2) = v23;
      *((_DWORD *)v16 + 6) = v28;
      *((_DWORD *)v16 + 7) = v27;
      goto LABEL_7;
    }
    v43 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)*v11) >> 3);
    v44 = v43 + 1;
    if (v43 + 1 <= 0x666666666666666)
    {
      v45 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)*v11) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x333333333333333)
        v46 = 0x666666666666666;
      else
        v46 = v44;
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v11 + 2), v46);
      v36 = &v47[40 * v43];
      v38 = &v47[40 * v48];
      *(_QWORD *)v36 = v25;
      *((_QWORD *)v36 + 1) = v26;
      *((_QWORD *)v36 + 2) = v23;
      *((_DWORD *)v36 + 6) = v28;
      *((_DWORD *)v36 + 7) = v27;
      *((_DWORD *)v36 + 8) = 0;
      v30 = v36 + 40;
      v49 = (char *)*v11;
      v39 = (char *)v11[1];
      if (v39 == *v11)
        goto LABEL_26;
      do
      {
        v50 = *(_OWORD *)(v39 - 40);
        v51 = *(_OWORD *)(v39 - 24);
        *((_DWORD *)v36 - 2) = *((_DWORD *)v39 - 2);
        *(_OWORD *)(v36 - 24) = v51;
        *(_OWORD *)(v36 - 40) = v50;
        v36 -= 40;
        v39 -= 40;
      }
      while (v39 != v49);
      goto LABEL_25;
    }
LABEL_30:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v9 = CSCppStringCache::intern(*(CSCppStringCache **)(*(_QWORD *)(a1[4] + 8) + 24), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 16));
  v10 = a1[6];
  v11 = *(void ***)(*(_QWORD *)(a1[5] + 8) + 24);
  v12 = *(_QWORD *)(v8 + 8);
  v13 = v10 + *(_QWORD *)v8;
  v14 = *(_DWORD *)(v8 + 24);
  v15 = *(_DWORD *)(v8 + 28) & 0x7FFFFFFF;
  v16 = (char *)v11[1];
  v17 = (char *)v11[2];
  if (v16 >= v17)
  {
    v31 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)*v11) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 <= 0x666666666666666)
    {
      v33 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - (_BYTE *)*v11) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x333333333333333)
        v34 = 0x666666666666666;
      else
        v34 = v32;
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v11 + 2), v34);
      v36 = &v35[40 * v31];
      v38 = &v35[40 * v37];
      *(_QWORD *)v36 = v13;
      *((_QWORD *)v36 + 1) = v12;
      *((_QWORD *)v36 + 2) = v9;
      *((_DWORD *)v36 + 6) = v14;
      *((_DWORD *)v36 + 7) = v15;
      *((_DWORD *)v36 + 8) = 0;
      v30 = v36 + 40;
      v40 = (char *)*v11;
      v39 = (char *)v11[1];
      if (v39 == *v11)
        goto LABEL_26;
      do
      {
        v41 = *(_OWORD *)(v39 - 40);
        v42 = *(_OWORD *)(v39 - 24);
        *((_DWORD *)v36 - 2) = *((_DWORD *)v39 - 2);
        *(_OWORD *)(v36 - 24) = v42;
        *(_OWORD *)(v36 - 40) = v41;
        v36 -= 40;
        v39 -= 40;
      }
      while (v39 != v40);
LABEL_25:
      v39 = (char *)*v11;
LABEL_26:
      *v11 = v36;
      v11[1] = v30;
      v11[2] = v38;
      if (v39)
        operator delete(v39);
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  *(_QWORD *)v16 = v13;
  *((_QWORD *)v16 + 1) = v12;
  *((_QWORD *)v16 + 2) = v9;
  *((_DWORD *)v16 + 6) = v14;
  *((_DWORD *)v16 + 7) = v15;
LABEL_7:
  v30 = v16 + 40;
  *((_DWORD *)v16 + 8) = 0;
LABEL_28:
  v11[1] = v30;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EED0Ev()
{
  JUMPOUT(0x1B5E36940);
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6778888;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE7__cloneEPNS0_6__baseISX_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6778888;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EEclESN_SS_SU_(uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  char *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[3];
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  void **v33;

  v8 = *(char **)(a2 + 48);
  if (v8)
  {
    *((_QWORD *)&v25 + 1) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)&v25 = CSCppStringCache::intern(this, v8);
  }
  else
  {
    v25 = 0uLL;
  }
  v9 = atomic_load((unsigned int *)(a2 + 28));
  v10 = v9 & 0xF77BFFFF;
  v11 = v9 & 0xF77BFFFF | 0x8000000;
  v13 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v14 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a2);
  v15 = CSCppStringCache::intern(this, v14);
  v16 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a2);
  v17 = CSCppStringCache::intern(this, v16);
  v18 = atomic_load((unsigned int *)(a2 + 28));
  v19 = *(_QWORD *)(a2 + 48);
  v26[0] = v13;
  v26[1] = v12;
  v26[2] = 0;
  v27 = 0;
  v28 = v15;
  v29 = v17;
  v32 = 0;
  v30 = 0u;
  memset(v31, 0, 25);
  if ((v18 & 0x80000000) != 0 && v19)
  {
    v30 = v25;
    v11 = v10 | 0x88000000;
  }
  HIDWORD(v27) = v11;
  v20 = *(_QWORD *)(a2 + 64);
  for (i = *(_QWORD *)(a2 + 72); v20 != i; v20 += 104)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v22)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(_QWORD *)v22 + 48))(v22, v20, v31, this);
  }
  v23 = a3[1];
  if (v23 >= a3[2])
  {
    v24 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)v26);
  }
  else
  {
    *(_QWORD *)(v23 + 96) = 0;
    *(_OWORD *)v23 = 0u;
    *(_OWORD *)(v23 + 16) = 0u;
    *(_OWORD *)(v23 + 48) = 0u;
    *(_OWORD *)(v23 + 64) = 0u;
    *(_OWORD *)(v23 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v23, (uint64_t)v26);
    v24 = v23 + 104;
  }
  a3[1] = v24;
  v33 = (void **)v31;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B4148050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  *(_QWORD *)(v19 - 88) = &a19;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 88));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlR10TRawSymbolIS4_ERNS_6vectorISM_NS_9allocatorISM_EEEER16CSCppStringCacheE_NSP_ISV_EEFvSN_SS_SU_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlR10TRawSymbolIS1_ERNSt3__16vectorISJ_NSL_9allocatorISJ_EEEER16CSCppStringCacheE_;
}

uint64_t TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  CSCppBitLock *v5;
  _QWORD v7[5];
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (unsigned int *)(a1 + 28);
  v3 = atomic_load((unsigned int *)(a1 + 28));
  if ((v3 & 0x400000) == 0)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2000000000;
    v12 = 0;
    v4 = operator new();
    CSCppBitLock::CSCppBitLock(v4, v2, 0x2000);
    v12 = v4;
    v7[4] = &v9;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke;
    v8[3] = &unk_1E6778900;
    v8[4] = &v9;
    v8[5] = a1;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___ZN10TRawSymbolI9Pointer64E21_resolve_mangled_nameINS1_20EphemeralMangledNameEEEPKcT__block_invoke_2;
    v7[3] = &unk_1E6778928;
    CSExceptionSafeThreadProtectBlockWithHandler((CSCppExceptionSafeThread *)v8, (uint64_t)v7);
    v5 = (CSCppBitLock *)v10[3];
    if (v5)
    {
      CSCppBitLock::~CSCppBitLock(v5);
      MEMORY[0x1B5E36940]();
      v10[3] = 0;
    }
    _Block_object_dispose(&v9, 8);
  }
  return *(_QWORD *)(a1 + 40);
}

void sub_1B41481D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B414845C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EED0Ev()
{
  JUMPOUT(0x1B5E36940);
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6778968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6778968;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EEclEOSM_ST_SV_(_QWORD *a1, uint64_t *a2, uint64_t *a3, CSCppStringCache *this)
{
  __int128 *v7;
  TMMapSymbolOwnerData *v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[7];
  uint8_t buf[8];
  uint8_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  __int128 v43;
  _BYTE v44[32];
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  void **v49;

  v7 = (__int128 *)*a2;
  v8 = (TMMapSymbolOwnerData *)a1[2];
  v9 = (_DWORD *)*((_QWORD *)v8 + 11);
  v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*(_DWORD *)(*a2 + 8) & 0x80000000) != 0 && (v11 = *((unsigned int *)v7 + 6), v10 + v11))
  {
    v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)v7 + 2) & 0x80000000) != 0)
      v24 = *(_QWORD *)((char *)v7 + 28);
    else
      v24 = 0;
    *((_QWORD *)&v30 + 1) = v24;
    v8 = (TMMapSymbolOwnerData *)a1[2];
  }
  else
  {
    v12 = 0;
    *((_QWORD *)&v30 + 1) = 0;
  }
  v13 = *v7;
  v48 = *((_QWORD *)v7 + 2);
  v47 = v13;
  v46 = 0;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v13, &v46) & 1) != 0)
  {
    *(_QWORD *)&v30 = v12;
    v14 = (char *)(v10 + v48);
    v15 = DWORD1(v47);
    v16 = DWORD2(v47);
    if (HIDWORD(v47))
      v17 = (char *)(v10 + HIDWORD(v47));
    else
      v17 = (char *)(v10 + v48);
    if (HIDWORD(v47))
      v18 = DWORD2(v47);
    else
      v18 = DWORD2(v47) & 0xF779FFFF;
    v19 = v18 & 0xF77BFFFF;
    v35 = __Block_byref_object_copy__237;
    v36 = __Block_byref_object_dispose__238;
    v20 = a1[3] + v46;
    *(_QWORD *)buf = 0;
    v33 = buf;
    v34 = 0x9002000000;
    v21 = CSCppStringCache::intern(this, v17);
    v22 = CSCppStringCache::intern(this, v14);
    v37 = v20;
    v38 = v15;
    v39 = 0;
    v40 = 0;
    v41 = v21;
    v42 = v22;
    v45 = 0;
    v43 = 0u;
    memset(v44, 0, 25);
    if (v16 < 0)
    {
      v43 = v30;
      v23 = v19 | 0x88000000;
    }
    else
    {
      v23 = v19 | 0x8000000;
    }
    HIDWORD(v40) = v23;
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 0x40000000;
    v31[2] = ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke;
    v31[3] = &unk_1E67789E0;
    v26 = a1[1];
    v25 = a1[2];
    v31[4] = buf;
    v31[5] = v26;
    v31[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v25, (uint64_t)&v47, (uint64_t)v31);
    v27 = (uint64_t)(v33 + 40);
    v28 = a3[1];
    if (v28 >= a3[2])
    {
      v29 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, v27);
    }
    else
    {
      *(_QWORD *)(v28 + 96) = 0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v28, v27);
      v29 = v28 + 104;
    }
    a3[1] = v29;
    _Block_object_dispose(buf, 8);
    v49 = (void **)v44;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v49);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps inline enumeration", buf, 2u);
    }
    fwrite("Could not remap archive address to real in debug maps inline enumeration", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
}

void sub_1B41487F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  _Block_object_dispose(&a21, 8);
  *(_QWORD *)(v34 - 104) = &a34;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 104));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS8_4SIZEEEPK6TNListIS8_Ej6TRangeISC_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolIS4_ENS_9allocatorISP_EEEER16CSCppStringCacheE_NSQ_ISW_EEFvSM_ST_SV_EE11target_typeEv()
{
  return &_ZTIZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_EUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_;
}

uint64_t ___ZZZZ30extract_debug_maps_from_headerI17SizeAndEndiannessI9Pointer6412LittleEndianEEvR20TExtendedMachOHeaderIT_ER19TRawSymbolOwnerDataINS5_4SIZEEEPK6TNListIS5_Ej6TRangeIS9_EEUb_EUb_ENKUlP22CSCppMMapInlinedSymbolRNSt3__16vectorI10TRawSymbolIS1_ENSK_9allocatorISN_EEEER16CSCppStringCacheE_clESJ_SR_ST__block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a1[5];
  v3 = *(_QWORD *)(a1[4] + 8);
  v4 = a1[6];
  v7 = a2;
  v5 = *(_QWORD *)(v2 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v3 + 104, v4);
}

_QWORD *std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B4148A14(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::vector<TRangeValue<Pointer64,char const*>>::emplace_back<unsigned long long &,unsigned long long &,char const*>(void **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;

  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD **)(v8 - 8);
  if ((unint64_t)v11 >= v10)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (_BYTE *)*a1) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)*a1) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v8, v18);
    v20 = &v19[24 * v15];
    v22 = &v19[24 * v21];
    v23 = *a3;
    v24 = *a4;
    *(_QWORD *)v20 = *a2;
    *((_QWORD *)v20 + 1) = v23;
    *((_QWORD *)v20 + 2) = v24;
    v14 = v20 + 24;
    v26 = (char *)*a1;
    v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        v27 = *(_OWORD *)(v25 - 24);
        *((_QWORD *)v20 - 1) = *((_QWORD *)v25 - 1);
        *(_OWORD *)(v20 - 24) = v27;
        v20 -= 24;
        v25 -= 24;
      }
      while (v25 != v26);
      v25 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v14;
    a1[2] = v22;
    if (v25)
      operator delete(v25);
  }
  else
  {
    v12 = *a3;
    v13 = *a4;
    *v11 = *a2;
    v11[1] = v12;
    v11[2] = v13;
    v14 = v11 + 3;
  }
  a1[1] = v14;
  return v14 - 3;
}

void sort_inlined_functions<Pointer64>(uint64_t a1)
{
  __n128 *v2;
  __n128 *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(__n128 **)(a1 + 64);
  v3 = *(__n128 **)(a1 + 72);
  v4 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,false>(v2, v3, (uint64_t)&v8, v5, 1);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  while (v6 != v7)
  {
    sort_inlined_functions<Pointer64>(v6);
    v6 += 104;
  }
}

uint64_t std::vector<TRawSymbol<Pointer64>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v10;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = v7 - 104;
        v10 = (void **)(v7 - 40);
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v10);
        v7 = v8;
      }
      while (v8 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void **std::vector<TRawSymbol<Pointer64>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 104 * v6;
    std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B4148D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  __int128 *v18;
  unint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  char v22;
  BOOL v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  __int128 *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 24);
        if (v6 < *(_QWORD *)v4)
        {
          v10 = *(_OWORD *)(v4 + 32);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_DWORD *)(v8 + 40) = *(_DWORD *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v6 >= *(_QWORD *)(v8 - 24))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_QWORD *)v9 = v6;
          *(_QWORD *)(v9 + 8) = v10;
          *(_DWORD *)(v9 + 16) = DWORD2(v10);
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(__int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  unint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  unint64_t v18;
  int v19;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      v6 = *((_QWORD *)a1 + 2);
      v7 = *((_DWORD *)a3 + 4);
      *a1 = *(_OWORD *)a3;
      *((_DWORD *)a1 + 4) = v7;
      *((_DWORD *)a3 + 4) = v6;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v14 = *a1;
    v15 = *((_QWORD *)a1 + 2);
    v16 = *((_DWORD *)a2 + 4);
    *a1 = *(_OWORD *)a2;
    *((_DWORD *)a1 + 4) = v16;
    *((_DWORD *)a2 + 4) = v15;
    *(_OWORD *)a2 = v14;
    if (*a3 >= *a2)
      return 1;
    v17 = *(_OWORD *)a2;
    v18 = a2[2];
    v19 = *((_DWORD *)a3 + 4);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_DWORD *)a2 + 4) = v19;
    *((_DWORD *)a3 + 4) = v18;
    *(_OWORD *)a3 = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = *(_OWORD *)a2;
    v9 = a2[2];
    v10 = *((_DWORD *)a3 + 4);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_DWORD *)a2 + 4) = v10;
    *((_DWORD *)a3 + 4) = v9;
    *(_OWORD *)a3 = v8;
    if (*a2 >= *(_QWORD *)a1)
      return 1;
    v11 = *a1;
    v12 = *((_QWORD *)a1 + 2);
    v13 = *((_DWORD *)a2 + 4);
    *a1 = *(_OWORD *)a2;
    *((_DWORD *)a1 + 4) = v13;
    *((_DWORD *)a2 + 4) = v12;
    *(_OWORD *)a2 = v11;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v12;
  unint64_t v13;
  __int128 v14;

  v2 = *a1;
  v14 = *(_OWORD *)(a1 + 1);
  if (*a1 >= *(_QWORD *)(a2 - 24))
  {
    v5 = a1 + 3;
    do
    {
      v3 = v5;
      if ((unint64_t)v5 >= a2)
        break;
      v5 += 3;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      v6 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v6);
  }
  while ((unint64_t)v3 < a2)
  {
    v13 = v3[2];
    v12 = *(_OWORD *)v3;
    v7 = *(_OWORD *)a2;
    *((_DWORD *)v3 + 4) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)v3 = v7;
    *(_DWORD *)(a2 + 16) = v13;
    *(_OWORD *)a2 = v12;
    do
    {
      v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      v9 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    v10 = *(_OWORD *)(v3 - 3);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v3 - 2);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_DWORD *)v3 - 2) = DWORD2(v14);
  *(v3 - 2) = v14;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRangeValue<Pointer64,unsigned int> *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v17;

  v2 = 0;
  v3 = *a1;
  v17 = *(_OWORD *)(a1 + 1);
  do
  {
    v4 = a1[v2 + 3];
    v2 += 3;
  }
  while (v4 < v3);
  v5 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    do
    {
      if (v5 >= a2)
        break;
      v7 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  v8 = &a1[v2];
  if (v5 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_OWORD *)v8;
      v11 = v8[2];
      v12 = *(_DWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *((_DWORD *)v8 + 4) = v12;
      *(_DWORD *)(v9 + 16) = v11;
      *(_OWORD *)v9 = v10;
      do
      {
        v13 = v8[3];
        v8 += 3;
      }
      while (v13 < v3);
      do
      {
        v14 = *(_QWORD *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if (v8 - 3 != a1)
  {
    v15 = *(_OWORD *)(v8 - 3);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v8 - 2);
    *(_OWORD *)a1 = v15;
  }
  *(v8 - 3) = v3;
  *((_DWORD *)v8 - 2) = DWORD2(v17);
  *(v8 - 2) = v17;
  return v8 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_DWORD *)(a1 + 16) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        *v6 = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *v10)
    {
      v18 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_DWORD *)(v16 + 88) = *(_DWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(_QWORD *)(v17 + 8) = v18;
      *(_DWORD *)(v17 + 16) = DWORD2(v18);
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  __n128 result;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((__int128 *)a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    v9 = a3[2];
    v10 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_DWORD *)a3 + 4) = v10;
    *(_DWORD *)(a4 + 16) = v9;
    *(__n128 *)a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      v11 = a2[2];
      v12 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v12;
      *((_DWORD *)a3 + 4) = v11;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = *(__n128 *)a1;
        v13 = *(_QWORD *)(a1 + 16);
        v14 = *((_DWORD *)a2 + 4);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v14;
        *((_DWORD *)a2 + 4) = v13;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(__n128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unint64_t v11;
  unsigned __int32 v12;
  unint64_t v13;
  unsigned __int32 v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unsigned __int32 v18;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    result = *a4;
    v11 = a4[1].n128_u64[0];
    v12 = a5[1].n128_u32[0];
    *a4 = *a5;
    a4[1].n128_u32[0] = v12;
    a5[1].n128_u32[0] = v11;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      v13 = a3[2];
      v14 = a4[1].n128_u32[0];
      *(__n128 *)a3 = *a4;
      *((_DWORD *)a3 + 4) = v14;
      a4[1].n128_u32[0] = v13;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        v15 = a2[2];
        v16 = *((_DWORD *)a3 + 4);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_DWORD *)a2 + 4) = v16;
        *((_DWORD *)a3 + 4) = v15;
        *(__n128 *)a3 = result;
        if (*a2 < a1->n128_u64[0])
        {
          result = *a1;
          v17 = a1[1].n128_u64[0];
          v18 = *((_DWORD *)a2 + 4);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u32[0] = v18;
          *((_DWORD *)a2 + 4) = v17;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *,TRangeValue<Pointer64,unsigned int> *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v28;
  uint64_t v29;

  if ((__int128 *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (unint64_t *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_QWORD *)v14 < *(_QWORD *)a1)
        {
          v15 = *v14;
          v16 = *((_QWORD *)v14 + 2);
          v17 = *(_DWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_DWORD *)v14 + 4) = v17;
          *(_DWORD *)(a1 + 16) = v16;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, a4, v9, (unint64_t *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      do
      {
        v19 = 0;
        v28 = *(_OWORD *)a1;
        v29 = *(_QWORD *)(a1 + 16);
        v20 = a1;
        do
        {
          v21 = v20 + 24 * v19 + 24;
          v22 = (2 * v19) | 1;
          v23 = 2 * v19 + 2;
          if (v23 < v18 && *(_QWORD *)v21 < *(_QWORD *)(v21 + 24))
          {
            v21 += 24;
            v22 = v23;
          }
          v24 = *(_OWORD *)v21;
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v21 + 16);
          *(_OWORD *)v20 = v24;
          v20 = v21;
          v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 = (__int128 *)((char *)v6 - 24);
        if ((__int128 *)v21 == v6)
        {
          *(_DWORD *)(v21 + 16) = v29;
          *(_OWORD *)v21 = v28;
        }
        else
        {
          v25 = *v6;
          *(_DWORD *)(v21 + 16) = *((_DWORD *)v6 + 4);
          *(_OWORD *)v21 = v25;
          *v6 = v28;
          *((_DWORD *)v6 + 4) = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(a1, v21 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      v6 = (unint64_t *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 >= a3)
      {
        v7 = *v6;
      }
      else
      {
        v7 = *v6;
        v8 = v6[3];
        if (*v6 <= v8)
          v7 = v6[3];
        if (*v6 < v8)
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
      v9 = *a4;
      if (v7 >= *a4)
      {
        v15 = *(_OWORD *)(a4 + 1);
        do
        {
          v10 = a4;
          a4 = v6;
          v11 = *(_OWORD *)v6;
          *((_DWORD *)v10 + 4) = *((_DWORD *)v6 + 4);
          *(_OWORD *)v10 = v11;
          if (v4 < v5)
            break;
          v12 = (2 * v5) | 1;
          v6 = (unint64_t *)(result + 24 * v12);
          v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            v13 = *v6;
            v5 = v12;
          }
          else
          {
            v13 = *v6;
            v14 = v6[3];
            if (*v6 <= v14)
              v13 = v6[3];
            if (*v6 >= v14)
              v5 = v12;
            else
              v6 += 3;
          }
        }
        while (v13 >= v9);
        *a4 = v9;
        a4[1] = v15;
        *((_DWORD *)a4 + 4) = DWORD2(v15);
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (__int128 *)(result + 24 * (v4 >> 1));
    v7 = (__int128 *)(a2 - 24);
    v8 = *(_QWORD *)(a2 - 24);
    if (*(_QWORD *)v6 < v8)
    {
      v11 = *(_OWORD *)(a2 - 16);
      do
      {
        v9 = v7;
        v7 = v6;
        v10 = *v6;
        *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
        *v9 = v10;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (__int128 *)(result + 24 * v5);
      }
      while (*(_QWORD *)v6 < v8);
      *(_QWORD *)v7 = v8;
      *((_QWORD *)v7 + 1) = v11;
      *((_DWORD *)v7 + 4) = DWORD2(v11);
    }
  }
  return result;
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void *v27[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = a1 + 2;
    v10 = v11;
    v12 = *(v9 - 1);
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - a2;
      if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        v21 = a3 + 104 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<TRawSymbol<Pointer64>>::__move_range((uint64_t)a1, v5, v12, v5 + 104 * a5);
      if (v21 != v7)
      {
        v22 = v5;
        do
        {
          TRawSymbol<Pointer64>::operator=(v22, v7);
          v7 += 104;
          v22 += 104;
        }
        while (v7 != v21);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x276276276276276)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      v15 = 0x4EC4EC4EC4EC4EC5 * ((a2 - v13) >> 3);
      v16 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x13B13B13B13B13BLL)
        v18 = 0x276276276276276;
      else
        v18 = v17;
      v27[4] = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>>((uint64_t)v9, v18);
      else
        v19 = 0;
      v23 = &v19[104 * v15];
      v27[0] = v19;
      v27[1] = v23;
      v27[3] = &v19[104 * v18];
      v24 = 104 * a5;
      v25 = &v23[104 * a5];
      do
      {
        *((_QWORD *)v23 + 12) = 0;
        *(_OWORD *)v23 = 0u;
        *((_OWORD *)v23 + 1) = 0u;
        *((_OWORD *)v23 + 3) = 0u;
        *((_OWORD *)v23 + 4) = 0u;
        *(_OWORD *)(v23 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=((uint64_t)v23, v7);
        v23 += 104;
        v7 += 104;
        v24 -= 104;
      }
      while (v24);
      v27[2] = v25;
      v5 = std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<TRawSymbol<Pointer64>>::~__split_buffer(v27);
    }
  }
  return v5;
}

void sub_1B4149FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)(v8 + 96) = 0;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v8, v10);
      v10 += 104;
      v8 += 104;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(a2, v7, v6);
}

uint64_t std::vector<TRawSymbol<Pointer64>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>,std::reverse_iterator<TRawSymbol<Pointer64>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TRawSymbol<Pointer64>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64>*>>,TRawSymbol<Pointer64>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)(v4 + 96) = 0;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v4, v6);
      v6 += 104;
      v4 = v11 + 104;
      v11 += 104;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TRawSymbol<Pointer64>>,TRawSymbol<Pointer64>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 104;
      a3 -= 104;
      TRawSymbol<Pointer64>::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      TRawSymbol<Pointer64>::operator=(a3, v4);
      v4 += 104;
      a3 += 104;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *std::__merge[abi:ne180100]<std::__less<void,void> &,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::move_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v8;
  uint64_t *v10;
  uint64_t *v11;

  v10 = a5;
  if (a1 != a2)
  {
    v8 = a1;
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v10, (uint64_t)v8);
        v8 += 13;
      }
      else
      {
        std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v10, (uint64_t)a3);
        a3 += 13;
      }
      if (v8 == a2)
      {
        a5 = v10;
        goto LABEL_9;
      }
    }
    v11 = v10;
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v11, (uint64_t)v8);
      v8 += 13;
    }
    while (v8 != a2);
    return v11;
  }
LABEL_9:
  v11 = a5;
  if (a3 != a4)
  {
    do
    {
      std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](&v11, (uint64_t)a3);
      a3 += 13;
    }
    while (a3 != a4);
    return v11;
  }
  return a5;
}

uint64_t **std::back_insert_iterator<std::vector<TRawSymbol<Pointer64>>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v5 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(*a1, a2);
  }
  else
  {
    *(_QWORD *)(v4 + 96) = 0;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v4, a2);
    v5 = v4 + 104;
  }
  v3[1] = v5;
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSourceInfo<Pointer64>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x333333333333333)
    v1 = 0x333333333333333;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(40 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6, __n128 a7)
{
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  __int128 v13;
  unint64_t v18;
  __int128 *v19;
  unint64_t v20;
  __n128 v21;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v9 = (__int128 *)((char *)a2 - 40);
      if (*((_QWORD *)a2 - 5) < *(_QWORD *)a1)
      {
        v10 = *(_QWORD *)(a1 + 32);
        a7 = *(__n128 *)a1;
        v11 = *(_OWORD *)(a1 + 16);
        v12 = *((_DWORD *)a2 - 2);
        v13 = *(__int128 *)((char *)a2 - 24);
        *(_OWORD *)a1 = *v9;
        *(_OWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 32) = v12;
        *v9 = a7;
        *(__int128 *)((char *)a2 - 24) = v11;
        *((_DWORD *)a2 - 2) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v18 = a4 >> 1;
      v19 = (__int128 *)(a1 + 40 * (a4 >> 1));
      v20 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v21.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, v19, a3, v20, (uint64_t)a5, a7);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1 + 40 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (uint64_t)&a5[40 * v18], v21);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>((uint64_t)a5, (uint64_t)&a5[40 * v18], (uint64_t)&a5[40 * v18], (uint64_t)&a5[40 * a4], a1).n128_u64[0];
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, v19, a3, v20, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1 + 40 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>((char *)a1, (__int128 *)(a1 + 40 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, (unint64_t *)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[32];

  if ((unint64_t *)result != a2)
  {
    v2 = (unint64_t *)(result + 40);
    if ((unint64_t *)(result + 40) != a2)
    {
      v3 = 0;
      v4 = (unint64_t *)result;
      do
      {
        v5 = v2;
        v6 = *v2;
        if (v6 < *v4)
        {
          *(_OWORD *)v11 = *((_OWORD *)v4 + 3);
          *(_OWORD *)&v11[16] = *((_OWORD *)v4 + 4);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 40) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 56) = v9;
            *(_DWORD *)(v8 + 72) = *(_DWORD *)(result + v7 + 32);
            if (!v7)
              break;
            v7 -= 40;
            if (v6 >= *(_QWORD *)(v8 - 40))
            {
              v10 = result + v7 + 40;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_QWORD *)v10 = v6;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)v11;
          *(_OWORD *)(v10 + 20) = *(_OWORD *)&v11[12];
        }
        v2 = v5 + 5;
        v3 += 40;
        v4 = v5;
      }
      while (v5 + 5 != a2);
    }
  }
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  __int128 v10;
  __n128 *v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __n128 v17;
  __int128 v18;

  if (a4)
  {
    if (a4 == 2)
    {
      v11 = (__n128 *)((char *)a2 - 40);
      if (*((_QWORD *)a2 - 5) >= *(_QWORD *)a1)
      {
        v17 = *(__n128 *)a1;
        v18 = *(_OWORD *)(a1 + 16);
        *(_QWORD *)(a5 + 32) = *(_QWORD *)(a1 + 32);
        *(__n128 *)a5 = v17;
        *(_OWORD *)(a5 + 16) = v18;
        a6 = *v11;
        v14 = *(__int128 *)((char *)a2 - 24);
        v15 = *((_QWORD *)a2 - 1);
      }
      else
      {
        v12 = *v11;
        v13 = *(__int128 *)((char *)a2 - 24);
        *(_QWORD *)(a5 + 32) = *((_QWORD *)a2 - 1);
        *(__n128 *)a5 = v12;
        *(_OWORD *)(a5 + 16) = v13;
        a6 = *(__n128 *)a1;
        v14 = *(_OWORD *)(a1 + 16);
        v15 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(a5 + 72) = v15;
      *(__n128 *)(a5 + 40) = a6;
      *(_OWORD *)(a5 + 56) = v14;
    }
    else if (a4 == 1)
    {
      a6 = *(__n128 *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a5 + 32) = *(_QWORD *)(a1 + 32);
      *(__n128 *)a5 = a6;
      *(_OWORD *)(a5 + 16) = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, a1 + 40 * (a4 >> 1), a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1 + 40 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5 + 40 * (a4 >> 1), a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, a1 + 40 * (a4 >> 1), a1 + 40 * (a4 >> 1), (uint64_t)a2, a5).n128_u64[0];
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>((__int128 *)a1, a2, (unint64_t *)a5);
    }
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        result = *(__n128 *)a3;
        v8 = *(_OWORD *)(a3 + 16);
        *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v8;
        a3 += 40;
        a5 += 40;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (*(_QWORD *)a3 >= *(_QWORD *)a1)
    {
      result = *(__n128 *)a1;
      v7 = *(_OWORD *)(a1 + 16);
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v7;
      a1 += 40;
    }
    else
    {
      result = *(__n128 *)a3;
      v6 = *(_OWORD *)(a3 + 16);
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v6;
      a3 += 40;
    }
    a5 += 40;
  }
  if (a1 != a2)
  {
    v9 = 0;
    do
    {
      v10 = a5 + v9;
      result = *(__n128 *)(a1 + v9);
      v11 = *(_OWORD *)(a1 + v9 + 16);
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(a1 + v9 + 32);
      *(__n128 *)v10 = result;
      *(_OWORD *)(v10 + 16) = v11;
      v9 += 40;
    }
    while (a1 + v9 != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(char *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  __n128 result;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __n128 v47;
  __int128 v48;
  uint64_t v49;

  if (a6)
  {
    v9 = a6;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(a1, a2, a3, a4, a5, v9, a7);
        return result;
      }
      if (!a5)
        return result;
      v12 = 0;
      v13 = -a5;
      while (*(_QWORD *)a2 >= *(_QWORD *)&a1[v12])
      {
        v12 += 40;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v15 = -v13;
      v43 = a3;
      v44 = a8;
      v42 = &a1[v12];
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          v39 = &a1[v12];
          v49 = *(_QWORD *)&a1[v12 + 32];
          v47 = *(__n128 *)&a1[v12];
          v48 = *(_OWORD *)&a1[v12 + 16];
          v40 = *a2;
          v41 = a2[1];
          *((_DWORD *)v39 + 8) = *((_DWORD *)a2 + 8);
          *(_OWORD *)v39 = v40;
          *((_OWORD *)v39 + 1) = v41;
          result = v47;
          *a2 = (__int128)v47;
          a2[1] = v48;
          *((_DWORD *)a2 + 8) = v49;
          return result;
        }
        if (v13 > 0)
          v15 = 1 - v13;
        v25 = v15 >> 1;
        v19 = (__int128 *)&a1[40 * (v15 >> 1) + v12];
        v18 = a2;
        if (a2 != a3)
        {
          v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
          v18 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = (_QWORD *)v18 + 5 * (v26 >> 1);
            v30 = *v28;
            v29 = (__int128 *)(v28 + 5);
            v26 += ~(v26 >> 1);
            if (v30 < *(_QWORD *)v19)
              v18 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v17 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v18 - (char *)a2) >> 3);
      }
      else
      {
        if (v9 >= 0)
          v16 = v9;
        else
          v16 = v9 + 1;
        v17 = v16 >> 1;
        v18 = (__int128 *)((char *)a2 + 40 * (v16 >> 1));
        v19 = a2;
        if ((char *)a2 - a1 != v12)
        {
          v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - a1 - v12) >> 3);
          v19 = (__int128 *)&a1[v12];
          do
          {
            v21 = v20 >> 1;
            v22 = (_QWORD *)v19 + 5 * (v20 >> 1);
            v24 = *v22;
            v23 = (__int128 *)(v22 + 5);
            v20 += ~(v20 >> 1);
            if (*(_QWORD *)v18 < v24)
              v20 = v21;
            else
              v19 = v23;
          }
          while (v20);
        }
        v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v19 - a1 - v12) >> 3);
      }
      a5 = -v25 - v13;
      v31 = v9 - v17;
      v32 = v25;
      v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(v19, a2, v18);
      v34 = v32;
      v35 = v33;
      if (v34 + v17 >= v9 - (v34 + v17) - v13)
      {
        v38 = v34;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(v33, v18, v43, a4, a5, v9 - v17, a7, v44);
        a2 = v19;
        v31 = v17;
        a8 = v44;
        a5 = v38;
        a3 = v35;
        a1 = v42;
      }
      else
      {
        v36 = v17;
        a8 = v44;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(&a1[v12], v19, v33, a4, v34, v36, a7, v44);
        a1 = (char *)v35;
        a2 = v18;
        a3 = v43;
      }
      v9 = v31;
    }
    while (v31);
  }
  return result;
}

__int128 *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(__int128 *result, __int128 *a2, unint64_t *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (result != a2)
  {
    v3 = *result;
    v4 = result[1];
    a3[4] = *((_QWORD *)result + 4);
    *(_OWORD *)a3 = v3;
    *((_OWORD *)a3 + 1) = v4;
    v5 = (__int128 *)((char *)result + 40);
    if ((__int128 *)((char *)result + 40) != a2)
    {
      v6 = 0;
      v7 = a3;
      v8 = a3;
      do
      {
        v9 = *v8;
        v8 += 5;
        if (*(_QWORD *)v5 >= v9)
        {
          v16 = *v5;
          v17 = v5[1];
          v8[4] = *((_QWORD *)v5 + 4);
          *(_OWORD *)v8 = v16;
          *((_OWORD *)v8 + 1) = v17;
        }
        else
        {
          v10 = *((_OWORD *)v7 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v7;
          *((_OWORD *)v8 + 1) = v10;
          v8[4] = v7[4];
          v11 = a3;
          if (v7 != a3)
          {
            v12 = v6;
            while (1)
            {
              v11 = (unint64_t *)((char *)a3 + v12);
              if (*(_QWORD *)v5 >= *(unint64_t *)((char *)a3 + v12 - 40))
                break;
              v13 = *(_OWORD *)((char *)a3 + v12 - 24);
              *(_OWORD *)v11 = *(_OWORD *)((char *)a3 + v12 - 40);
              *((_OWORD *)v11 + 1) = v13;
              *((_DWORD *)v11 + 8) = *(_DWORD *)((char *)a3 + v12 - 8);
              v12 -= 40;
              if (!v12)
              {
                v11 = a3;
                break;
              }
            }
          }
          v14 = *v5;
          v15 = v5[1];
          *((_DWORD *)v11 + 8) = *((_DWORD *)v5 + 8);
          *(_OWORD *)v11 = v14;
          *((_OWORD *)v11 + 1) = v15;
        }
        v5 = (__int128 *)((char *)v5 + 40);
        v6 += 40;
        v7 = v8;
      }
      while (v5 != a2);
    }
  }
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        result = *(__n128 *)a3;
        v8 = *(_OWORD *)(a3 + 16);
        *(_QWORD *)(a5 + 32) = *(_QWORD *)(a3 + 32);
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v8;
        a3 += 40;
        a5 += 40;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (*(_QWORD *)a3 >= *(_QWORD *)a1)
    {
      result = *(__n128 *)a1;
      v7 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a5 + 32) = *(_QWORD *)(a1 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v7;
      a1 += 40;
    }
    else
    {
      result = *(__n128 *)a3;
      v6 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a5 + 32) = *(_QWORD *)(a3 + 32);
      *(__n128 *)a5 = result;
      *(_OWORD *)(a5 + 16) = v6;
      a3 += 40;
    }
    a5 += 40;
  }
  if (a1 != a2)
  {
    v9 = 0;
    do
    {
      v10 = a5 + v9;
      result = *(__n128 *)(a1 + v9);
      v11 = *(_OWORD *)(a1 + v9 + 16);
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(a1 + v9 + 32);
      *(__n128 *)v10 = result;
      *(_OWORD *)(v10 + 16) = v11;
      v9 += 40;
    }
    while (a1 + v9 != a2);
  }
  return result;
}

_DWORD *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(_DWORD *result, _OWORD *a2, _OWORD *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  if (a5 <= a6)
  {
    if (result != (_DWORD *)a2)
    {
      v19 = 0;
      do
      {
        v20 = &__src[v19 * 4];
        v21 = *(_OWORD *)&result[v19];
        v22 = *(_OWORD *)&result[v19 + 4];
        *((_QWORD *)v20 + 4) = *(_QWORD *)&result[v19 + 8];
        *(_OWORD *)v20 = v21;
        *((_OWORD *)v20 + 1) = v22;
        v19 += 10;
      }
      while (&result[v19] != (_DWORD *)a2);
      if (v19 * 4)
      {
        v23 = __src;
        while (a2 != a3)
        {
          if (*(_QWORD *)a2 >= *(_QWORD *)v23)
          {
            v26 = *(_OWORD *)v23;
            v27 = *((_OWORD *)v23 + 1);
            result[8] = *((_DWORD *)v23 + 8);
            *(_OWORD *)result = v26;
            *((_OWORD *)result + 1) = v27;
            v23 += 40;
          }
          else
          {
            v24 = *a2;
            v25 = a2[1];
            result[8] = *((_DWORD *)a2 + 8);
            *(_OWORD *)result = v24;
            *((_OWORD *)result + 1) = v25;
            a2 = (_OWORD *)((char *)a2 + 40);
          }
          result += 10;
          if (&__src[v19 * 4] == v23)
            return result;
        }
        return memmove(result, v23, __src - v23 + v19 * 4 - 4);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = &__src[v7];
      v9 = *(_OWORD *)((char *)a2 + v7);
      v10 = *(_OWORD *)((char *)a2 + v7 + 16);
      *((_QWORD *)v8 + 4) = *(_QWORD *)((char *)a2 + v7 + 32);
      *(_OWORD *)v8 = v9;
      *((_OWORD *)v8 + 1) = v10;
      v7 += 40;
    }
    while ((_OWORD *)((char *)a2 + v7) != a3);
    if (v7)
    {
      v11 = &__src[v7];
      v12 = (uint64_t)a3 - 40;
      while (a2 != (_OWORD *)result)
      {
        v13 = *((_QWORD *)v11 - 5);
        v14 = *((_QWORD *)a2 - 5);
        v15 = v13 >= v14;
        if (v13 >= v14)
          v16 = v11 - 40;
        else
          v16 = (char *)a2 - 40;
        if (v15)
          v11 -= 40;
        else
          a2 = (_OWORD *)((char *)a2 - 40);
        v17 = *(_OWORD *)v16;
        v18 = *((_OWORD *)v16 + 1);
        *(_DWORD *)(v12 + 32) = *((_DWORD *)v16 + 8);
        *(_OWORD *)v12 = v17;
        *(_OWORD *)(v12 + 16) = v18;
        v12 -= 40;
        if (v11 == __src)
          return result;
      }
      v28 = 0;
      do
      {
        v29 = v12 + v28;
        v30 = *(_OWORD *)&v11[v28 - 40];
        v31 = *(_OWORD *)&v11[v28 - 24];
        *(_DWORD *)(v29 + 32) = *(_DWORD *)&v11[v28 - 8];
        *(_OWORD *)v29 = v30;
        *(_OWORD *)(v29 + 16) = v31;
        v28 -= 40;
      }
      while (&v11[v28] != __src);
    }
  }
  return result;
}

__int128 *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(__int128 *__src, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  int64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if ((__int128 *)((char *)__src + 40) == a2)
    {
      v7 = *__src;
      v9 = __src[1];
      v11 = *((_QWORD *)__src + 4);
      v5 = (char *)a3 - (char *)a2;
      memmove(__src, a2, (char *)a3 - (char *)a2 - 4);
      v3 = (__int128 *)((char *)__src + v5);
      *v3 = v7;
      v3[1] = v9;
      *((_DWORD *)v3 + 8) = v11;
    }
    else if ((__int128 *)((char *)a2 + 40) == a3)
    {
      v3 = (__int128 *)((char *)__src + 40);
      v8 = *(__int128 *)((char *)a3 - 40);
      v10 = *(__int128 *)((char *)a3 - 24);
      v12 = *((_QWORD *)a3 - 1);
      if ((__int128 *)((char *)a3 - 40) != __src)
        memmove((char *)__src + 40, __src, (char *)a3 - 40 - (char *)__src - 4);
      *__src = v8;
      __src[1] = v10;
      *((_DWORD *)__src + 8) = v12;
    }
    else
    {
      return std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(__src, a2, a3);
    }
  }
  return v3;
}

__int128 *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v30;
  __int128 v31;
  int v32;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
  if (v3 == 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3))
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = (__int128 *)((char *)a1 + 40);
      v5 = (__int128 *)((char *)a2 + 40);
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        v7 = *(__int128 *)((char *)v4 - 40);
        v8 = *(__int128 *)((char *)v4 - 24);
        v9 = *((_DWORD *)v5 - 2);
        v10 = *(__int128 *)((char *)v5 - 24);
        *(__int128 *)((char *)v4 - 40) = *(__int128 *)((char *)v5 - 40);
        *(__int128 *)((char *)v4 - 24) = v10;
        *((_DWORD *)v4 - 2) = v9;
        *(__int128 *)((char *)v5 - 24) = v8;
        *(__int128 *)((char *)v5 - 40) = v7;
        *((_DWORD *)v5 - 2) = v6;
        if (v4 == a2)
          break;
        v4 = (__int128 *)((char *)v4 + 40);
        v11 = v5 == a3;
        v5 = (__int128 *)((char *)v5 + 40);
      }
      while (!v11);
    }
  }
  else
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
    v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      v14 = v13;
      v13 = v12;
      v12 = v14 % v12;
    }
    while (v12);
    if (v13)
    {
      v15 = (__int128 *)((char *)a1 + 40 * v13);
      do
      {
        v16 = *(__int128 *)((char *)v15 - 40);
        v17 = *(__int128 *)((char *)v15 - 24);
        v18 = *((_QWORD *)v15 - 1);
        v15 = (__int128 *)((char *)v15 - 40);
        v30 = v16;
        v31 = v17;
        v32 = v18;
        v19 = (__int128 *)((char *)v15 + 8 * (((char *)a2 - (char *)a1) >> 3));
        v20 = v15;
        do
        {
          v21 = v19;
          v22 = *v19;
          v23 = v19[1];
          *((_DWORD *)v20 + 8) = *((_DWORD *)v19 + 8);
          *v20 = v22;
          v20[1] = v23;
          v24 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)v19) >> 3);
          v19 = (__int128 *)((char *)v19 + 8 * (((char *)a2 - (char *)a1) >> 3));
          v25 = __OFSUB__(v3, v24);
          v27 = v3 - v24;
          v26 = (v27 < 0) ^ v25;
          v28 = (__int128 *)((char *)a1 + 40 * v27);
          if (!v26)
            v19 = v28;
          v20 = v21;
        }
        while (v19 != v15);
        *((_DWORD *)v21 + 8) = v32;
        *v21 = v30;
        v21[1] = v31;
      }
      while (v15 != a1);
    }
    return (__int128 *)((char *)a1 + 8 * (((char *)a3 - (char *)a2) >> 3));
  }
  return a2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  __int128 *v18;
  unint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  char v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,char const*> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) < *(_QWORD *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *v10)
    {
      v18 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

char **adjustVectorToMatchSegmentDeltas<CSCppSegmentRange,Pointer64>(char **result, _QWORD *a2)
{
  char *v2;
  char *v3;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  int64_t v15;

  v3 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v5 = result;
    do
    {
      v6 = a2[1];
      v7 = v6 - *a2;
      if (v6 == *a2)
        goto LABEL_12;
      v8 = *(_QWORD *)v3;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      v10 = (_QWORD *)*a2;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[3 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == (_QWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        v15 = v2 - (v3 + 32);
        if (v2 != v3 + 32)
          result = (char **)memmove(v3, v3 + 32, v2 - (v3 + 32));
        v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(_QWORD *)v3 = *(v10 - 1) + v8;
        v3 += 32;
      }
    }
    while (v3 != v2);
  }
  return result;
}

char **adjustVectorToMatchSegmentDeltas<CSCppSectionRange,Pointer64>(char **result, _QWORD *a2)
{
  char *v2;
  char *v3;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  int64_t v15;

  v3 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v5 = result;
    do
    {
      v6 = a2[1];
      v7 = v6 - *a2;
      if (v6 == *a2)
        goto LABEL_12;
      v8 = *(_QWORD *)v3;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      v10 = (_QWORD *)*a2;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[3 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == (_QWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        v15 = v2 - (v3 + 24);
        if (v2 != v3 + 24)
          result = (char **)memmove(v3, v3 + 24, v2 - (v3 + 24));
        v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(_QWORD *)v3 = *(v10 - 1) + v8;
        v3 += 24;
      }
    }
    while (v3 != v2);
  }
  return result;
}

void adjustSymbolsToMatchSegmentDeltas<Pointer64>(uint64_t a1, _QWORD *a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v2 = *(unint64_t **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v3)
  {
    do
    {
      v6 = a2[1];
      v7 = v6 - *a2;
      if (v6 == *a2)
        goto LABEL_11;
      v8 = *v2;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      v10 = (_QWORD *)*a2;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[3 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == (_QWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_11:
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,0>((uint64_t)(v2 + 13), v3, (uint64_t)v2);
        v3 = v15;
        v16 = *(_QWORD *)(a1 + 8);
        if (v16 != v15)
        {
          do
          {
            v17 = v16 - 104;
            v18 = (void **)(v16 - 40);
            std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v18);
            v16 = v17;
          }
          while (v17 != v3);
        }
        *(_QWORD *)(a1 + 8) = v3;
      }
      else
      {
        slideSymbolsByOffset<Pointer64>(v2, *(v10 - 1));
        v2 += 13;
        v3 = *(_QWORD *)(a1 + 8);
      }
    }
    while (v2 != (unint64_t *)v3);
  }
}

char **adjustVectorToMatchSegmentDeltas<TRawSourceInfo<Pointer64>,Pointer64>(char **result, _QWORD *a2)
{
  char *v2;
  char *v3;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  int64_t v15;

  v3 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v5 = result;
    do
    {
      v6 = a2[1];
      v7 = v6 - *a2;
      if (v6 == *a2)
        goto LABEL_12;
      v8 = *(_QWORD *)v3;
      v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      v10 = (_QWORD *)*a2;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[3 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v9 += ~(v9 >> 1);
        if (v8 < v14)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
      if (v10 == (_QWORD *)*a2 || v8 - *(v10 - 3) >= *(v10 - 2))
      {
LABEL_12:
        v15 = v2 - (v3 + 40);
        if (v2 != v3 + 40)
          result = (char **)memmove(v3, v3 + 40, v15 - 4);
        v2 = &v3[v15];
        v5[1] = &v3[v15];
      }
      else
      {
        *(_QWORD *)v3 = *(v10 - 1) + v8;
        v3 += 40;
      }
    }
    while (v3 != v2);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t *v17;
  __int128 *v18;
  unint64_t *v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  char v23;
  BOOL v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[32];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[32];

  if (result != a2)
  {
    v2 = result + 40;
    if (result + 40 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 40);
        if (v6 < *(_QWORD *)v4)
        {
          *(_OWORD *)v11 = *(_OWORD *)(v4 + 48);
          *(_OWORD *)&v11[16] = *(_OWORD *)(v4 + 64);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 40) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 56) = v9;
            *(_DWORD *)(v8 + 72) = *(_DWORD *)(result + v7 + 32);
            if (!v7)
              break;
            v7 -= 40;
            if (v6 >= *(_QWORD *)(v8 - 40))
            {
              v10 = result + v7 + 40;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_QWORD *)v10 = v6;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)v11;
          *(_OWORD *)(v10 + 20) = *(_OWORD *)&v11[12];
        }
        v2 = v5 + 40;
        v3 += 40;
        v4 = v5;
      }
      while (v5 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(__int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  uint64_t result;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)a1)
  {
    if (v4 >= v3)
      return 0;
    v11 = a2[4];
    v12 = *(_OWORD *)a2;
    v13 = *((_OWORD *)a2 + 1);
    v14 = *((_DWORD *)a3 + 8);
    v15 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v15;
    *((_DWORD *)a2 + 8) = v14;
    *(_OWORD *)a3 = v12;
    *((_OWORD *)a3 + 1) = v13;
    *((_DWORD *)a3 + 8) = v11;
    if (*a2 < *(_QWORD *)a1)
    {
      v16 = *((_QWORD *)a1 + 4);
      v17 = *a1;
      v18 = a1[1];
      v19 = *((_DWORD *)a2 + 8);
      v20 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v20;
      *((_DWORD *)a1 + 8) = v19;
      *(_OWORD *)a2 = v17;
      *((_OWORD *)a2 + 1) = v18;
      result = 2;
      *((_DWORD *)a2 + 8) = v16;
      return result;
    }
  }
  else
  {
    if (v4 < v3)
    {
      v5 = *((_QWORD *)a1 + 4);
      v6 = *a1;
      v7 = a1[1];
      v8 = *((_DWORD *)a3 + 8);
      v9 = *((_OWORD *)a3 + 1);
      *a1 = *(_OWORD *)a3;
      a1[1] = v9;
      *((_DWORD *)a1 + 8) = v8;
      *(_OWORD *)a3 = v6;
      *((_OWORD *)a3 + 1) = v7;
      result = 1;
LABEL_9:
      *((_DWORD *)a3 + 8) = v5;
      return result;
    }
    v21 = *((_QWORD *)a1 + 4);
    v22 = *a1;
    v23 = a1[1];
    v24 = *((_DWORD *)a2 + 8);
    v25 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v25;
    *((_DWORD *)a1 + 8) = v24;
    *(_OWORD *)a2 = v22;
    *((_OWORD *)a2 + 1) = v23;
    *((_DWORD *)a2 + 8) = v21;
    if (*a3 < *a2)
    {
      v5 = a2[4];
      v26 = *(_OWORD *)a2;
      v27 = *((_OWORD *)a2 + 1);
      v28 = *((_DWORD *)a3 + 8);
      v29 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v29;
      *((_DWORD *)a2 + 8) = v28;
      *(_OWORD *)a3 = v26;
      *((_OWORD *)a3 + 1) = v27;
      result = 2;
      goto LABEL_9;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  __int128 *v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[32];

  v2 = *a1;
  *(_OWORD *)v17 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 3);
  if ((unint64_t)*a1 >= *((_QWORD *)a2 - 5))
  {
    v5 = (__int128 *)(a1 + 5);
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 = (__int128 *)((char *)v5 + 40);
    }
    while (v2 >= *(_QWORD *)v3);
  }
  else
  {
    v3 = (__int128 *)a1;
    do
    {
      v4 = *((_QWORD *)v3 + 5);
      v3 = (__int128 *)((char *)v3 + 40);
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *((_QWORD *)a2 - 5);
      a2 = (__int128 *)((char *)a2 - 40);
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    v16 = *((_QWORD *)v3 + 4);
    v14 = *v3;
    v15 = v3[1];
    v7 = *a2;
    v8 = a2[1];
    *((_DWORD *)v3 + 8) = *((_DWORD *)a2 + 8);
    *v3 = v7;
    v3[1] = v8;
    *((_DWORD *)a2 + 8) = v16;
    *a2 = v14;
    a2[1] = v15;
    do
    {
      v9 = *((_QWORD *)v3 + 5);
      v3 = (__int128 *)((char *)v3 + 40);
    }
    while (v2 >= v9);
    do
    {
      v10 = *((_QWORD *)a2 - 5);
      a2 = (__int128 *)((char *)a2 - 40);
    }
    while (v2 < v10);
  }
  if ((uint64_t *)((char *)v3 - 40) != a1)
  {
    v11 = *(__int128 *)((char *)v3 - 40);
    v12 = *(__int128 *)((char *)v3 - 24);
    *((_DWORD *)a1 + 8) = *((_DWORD *)v3 - 2);
    *(_OWORD *)a1 = v11;
    *((_OWORD *)a1 + 1) = v12;
  }
  *((_QWORD *)v3 - 5) = v2;
  *(__int128 *)((char *)v3 - 20) = *(_OWORD *)&v17[12];
  *(v3 - 2) = *(_OWORD *)v17;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRawSourceInfo<Pointer64> *,std::__less<void,void> &>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  _BYTE v20[32];

  v2 = 0;
  v3 = *a1;
  *(_OWORD *)v20 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 3);
  do
  {
    v4 = a1[v2 + 5];
    v2 += 5;
  }
  while (v4 < v3);
  v5 = (unint64_t)&a1[v2];
  if (v2 == 5)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      v7 = *((_QWORD *)a2 - 5);
      a2 = (__int128 *)((char *)a2 - 40);
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *((_QWORD *)a2 - 5);
      a2 = (__int128 *)((char *)a2 - 40);
    }
    while (v6 >= v3);
  }
  v8 = &a1[v2];
  if (v5 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_OWORD *)v8;
      v19 = *((_OWORD *)v8 + 1);
      v11 = v8[4];
      v13 = *v9;
      v12 = v9[1];
      *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
      *(_OWORD *)v8 = v13;
      *((_OWORD *)v8 + 1) = v12;
      *((_DWORD *)v9 + 8) = v11;
      *v9 = v10;
      v9[1] = v19;
      do
      {
        v14 = v8[5];
        v8 += 5;
      }
      while (v14 < v3);
      do
      {
        v15 = *((_QWORD *)v9 - 5);
        v9 = (__int128 *)((char *)v9 - 40);
      }
      while (v15 >= v3);
    }
    while (v8 < (uint64_t *)v9);
  }
  if (v8 - 5 != a1)
  {
    v16 = *(_OWORD *)(v8 - 5);
    v17 = *(_OWORD *)(v8 - 3);
    *((_DWORD *)a1 + 8) = *((_DWORD *)v8 - 2);
    *(_OWORD *)a1 = v16;
    *((_OWORD *)a1 + 1) = v17;
  }
  *(v8 - 5) = v3;
  *(_OWORD *)((char *)v8 - 20) = *(_OWORD *)&v20[12];
  *((_OWORD *)v8 - 2) = *(_OWORD *)v20;
  return v8 - 5;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[32];

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 40);
      if (*(_QWORD *)(a2 - 40) < *(_QWORD *)a1)
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = *(_OWORD *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v10 = *(_DWORD *)(a2 - 8);
        v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_DWORD *)(a1 + 32) = v10;
        *v6 = v8;
        *(_OWORD *)(a2 - 24) = v9;
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((__int128 *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v12 = (_QWORD *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((__int128 *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a1 + 80));
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_QWORD *)v13;
    if (*(_QWORD *)v13 < *v12)
    {
      *(_OWORD *)v21 = *(_OWORD *)(v13 + 8);
      *(_OWORD *)&v21[16] = *(_OWORD *)(v13 + 24);
      v17 = v14;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_DWORD *)(v18 + 152) = *(_DWORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v16 >= *(_QWORD *)(v18 + 40))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(_OWORD *)(v20 + 8) = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 20) = *(_OWORD *)&v21[12];
      if (++v15 == 8)
        return v13 + 40 == a2;
    }
    v12 = (_QWORD *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>((__int128 *)a1, (unint64_t *)a2, (unint64_t *)a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    v9 = *(_QWORD *)(a3 + 32);
    result = *(__n128 *)a3;
    v10 = *(_OWORD *)(a3 + 16);
    v11 = *(_DWORD *)(a4 + 32);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 32) = v11;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v10;
    *(_DWORD *)(a4 + 32) = v9;
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
      v13 = *(_QWORD *)(a2 + 32);
      result = *(__n128 *)a2;
      v14 = *(_OWORD *)(a2 + 16);
      v15 = *(_DWORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_DWORD *)(a2 + 32) = v15;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v14;
      *(_DWORD *)(a3 + 32) = v13;
      if (*(_QWORD *)a2 < *(_QWORD *)a1)
      {
        v17 = *(_QWORD *)(a1 + 32);
        result = *(__n128 *)a1;
        v18 = *(_OWORD *)(a1 + 16);
        v19 = *(_DWORD *)(a2 + 32);
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a1 + 32) = v19;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v18;
        *(_DWORD *)(a2 + 32) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  __int128 v26;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a2, a3, a4).n128_u64[0];
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a4 + 32);
    result = *(__n128 *)a4;
    v12 = *(_OWORD *)(a4 + 16);
    v13 = *(_DWORD *)(a5 + 32);
    v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(_DWORD *)(a4 + 32) = v13;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v12;
    *(_DWORD *)(a5 + 32) = v11;
    if (*(_QWORD *)a4 < *(_QWORD *)a3)
    {
      v15 = *(_QWORD *)(a3 + 32);
      result = *(__n128 *)a3;
      v16 = *(_OWORD *)(a3 + 16);
      v17 = *(_DWORD *)(a4 + 32);
      v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(_DWORD *)(a3 + 32) = v17;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v16;
      *(_DWORD *)(a4 + 32) = v15;
      if (*(_QWORD *)a3 < *(_QWORD *)a2)
      {
        v19 = *(_QWORD *)(a2 + 32);
        result = *(__n128 *)a2;
        v20 = *(_OWORD *)(a2 + 16);
        v21 = *(_DWORD *)(a3 + 32);
        v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(_DWORD *)(a2 + 32) = v21;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v20;
        *(_DWORD *)(a3 + 32) = v19;
        if (*(_QWORD *)a2 < *(_QWORD *)a1)
        {
          v23 = *(_QWORD *)(a1 + 32);
          result = *(__n128 *)a1;
          v24 = *(_OWORD *)(a1 + 16);
          v25 = *(_DWORD *)(a2 + 32);
          v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(_DWORD *)(a1 + 32) = v25;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v24;
          *(_DWORD *)(a2 + 32) = v23;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  if ((__int128 *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (unint64_t *)(a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a4, v9, v12);
        v12 -= 5;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_QWORD *)v14 < *(_QWORD *)a1)
        {
          v15 = *((_QWORD *)v14 + 4);
          v16 = *v14;
          v17 = v14[1];
          v18 = *(_DWORD *)(a1 + 32);
          v19 = *(_OWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          v14[1] = v19;
          *((_DWORD *)v14 + 8) = v18;
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(_DWORD *)(a1 + 32) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, a4, v9, (unint64_t *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 40);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 41)
    {
      v20 = v8 / 0x28uLL;
      do
      {
        v21 = 0;
        v32 = *(_OWORD *)a1;
        v33 = *(_OWORD *)(a1 + 16);
        v34 = *(_QWORD *)(a1 + 32);
        v22 = a1;
        do
        {
          v23 = v22 + 40 * v21 + 40;
          v24 = (2 * v21) | 1;
          v25 = 2 * v21 + 2;
          if (v25 < v20 && *(_QWORD *)v23 < *(_QWORD *)(v23 + 40))
          {
            v23 += 40;
            v24 = v25;
          }
          v26 = *(_OWORD *)v23;
          v27 = *(_OWORD *)(v23 + 16);
          *(_DWORD *)(v22 + 32) = *(_DWORD *)(v23 + 32);
          *(_OWORD *)v22 = v26;
          *(_OWORD *)(v22 + 16) = v27;
          v22 = v23;
          v21 = v24;
        }
        while (v24 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        v6 = (__int128 *)((char *)v6 - 40);
        if ((__int128 *)v23 == v6)
        {
          *(_DWORD *)(v23 + 32) = v34;
          *(_OWORD *)v23 = v32;
          *(_OWORD *)(v23 + 16) = v33;
        }
        else
        {
          v28 = *v6;
          v29 = v6[1];
          *(_DWORD *)(v23 + 32) = *((_DWORD *)v6 + 8);
          *(_OWORD *)v23 = v28;
          *(_OWORD *)(v23 + 16) = v29;
          *v6 = v32;
          v6[1] = v33;
          *((_DWORD *)v6 + 8) = v34;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(a1, v23 + 40, a4, 0xCCCCCCCCCCCCCCCDLL * ((v23 + 40 - a1) >> 3));
        }
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int64_t v4;
  int64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 result;
  _BYTE v17[32];

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v5 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v6 = (unint64_t *)(a1 + 40 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2) >= a3)
      {
        v7 = *v6;
      }
      else
      {
        v7 = *v6;
        v8 = v6[5];
        if (*v6 <= v8)
          v7 = v6[5];
        if (*v6 < v8)
        {
          v6 += 5;
          v5 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      v9 = *a4;
      if (v7 >= *a4)
      {
        *(_OWORD *)v17 = *(_OWORD *)(a4 + 1);
        *(_OWORD *)&v17[16] = *(_OWORD *)(a4 + 3);
        do
        {
          v10 = a4;
          a4 = v6;
          v11 = *(_OWORD *)v6;
          v12 = *((_OWORD *)v6 + 1);
          *((_DWORD *)v10 + 8) = *((_DWORD *)v6 + 8);
          *(_OWORD *)v10 = v11;
          *((_OWORD *)v10 + 1) = v12;
          if (v4 < v5)
            break;
          v13 = (2 * v5) | 1;
          v6 = (unint64_t *)(a1 + 40 * v13);
          v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            v14 = *v6;
            v5 = v13;
          }
          else
          {
            v14 = *v6;
            v15 = v6[5];
            if (*v6 <= v15)
              v14 = v6[5];
            if (*v6 >= v15)
              v5 = v13;
            else
              v6 += 5;
          }
        }
        while (v14 >= v9);
        *a4 = v9;
        result = *(__n128 *)v17;
        *(_OWORD *)((char *)a4 + 20) = *(_OWORD *)&v17[12];
        *(_OWORD *)(a4 + 1) = *(_OWORD *)v17;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSourceInfo<Pointer64> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  _BYTE v13[32];

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (__int128 *)(a1 + 40 * (v4 >> 1));
    v7 = (__int128 *)(a2 - 40);
    v8 = *(_QWORD *)(a2 - 40);
    if (*(_QWORD *)v6 < v8)
    {
      *(_OWORD *)v13 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)&v13[16] = *(_OWORD *)(a2 - 16);
      do
      {
        v9 = v7;
        v7 = v6;
        v10 = *v6;
        v11 = v6[1];
        *((_DWORD *)v9 + 8) = *((_DWORD *)v6 + 8);
        *v9 = v10;
        v9[1] = v11;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (__int128 *)(a1 + 40 * v5);
      }
      while (*(_QWORD *)v6 < v8);
      *(_QWORD *)v7 = v8;
      *(__int128 *)((char *)v7 + 8) = *(_OWORD *)v13;
      result = *(__n128 *)&v13[12];
      *(__int128 *)((char *)v7 + 20) = *(_OWORD *)&v13[12];
    }
  }
  return result;
}

uint64_t intern_symbol_names_and_path<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(uint64_t a1, CSCppMMapStringTable *a2, DemanglingUtilities::CSCppReusableDemanglingBuffer *a3, _QWORD *a4, _QWORD *a5, int a6)
{
  unsigned int v12;
  char *v13;
  const char *v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  _BOOL4 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  int v31;
  char is_objc_method;
  int v33;
  unsigned int v34;
  unint64_t v35;
  __int128 v36;

  v12 = atomic_load((unsigned int *)(a1 + 28));
  if ((v12 & 0x400000) != 0)
  {
    v13 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(a1);
    v14 = "";
  }
  else
  {
    v13 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::EphemeralMangledName>(a1);
    v14 = *(const char **)(a1 + 96);
  }
  *(_QWORD *)&v36 = v14;
  *((_QWORD *)&v36 + 1) = v13;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::find<std::pair<unsigned long,unsigned long>>(a4, &v36);
  if (result)
  {
    v16 = *(_DWORD *)(result + 32);
    LODWORD(v17) = *(_DWORD *)(result + 36);
    goto LABEL_30;
  }
  v16 = CSCppMMapStringTable::intern_with_prefix(a2, v14, v13);
  v18 = (const char *)atomic_load((unsigned int *)(a1 + 28));
  if (DemanglingUtilities::is_simple_mangled_name((DemanglingUtilities *)v13, v18))
  {
    v19 = (const char *)atomic_load((unsigned int *)(a1 + 28));
    v20 = DemanglingUtilities::simple_demangle(v13, v19);
  }
  else
  {
    if (a6)
    {
      v21 = DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(a3);
      v22 = CSCppAddressSet::sort(a3);
      v23 = a1;
      v24 = v21;
    }
    else
    {
      v25 = atomic_load((unsigned int *)(a1 + 28));
      if ((v25 & 0x20000) == 0)
        goto LABEL_17;
      v23 = a1;
      v24 = 0;
      v22 = 0;
    }
    v20 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v23, v24, v22);
  }
  v26 = (char *)v20;
  if (v20)
  {
    if (v20 == v13 + 1 || v20 == v13)
    {
      v27 = v20 != v13;
      v28 = atomic_load((unsigned int *)(a1 + 28));
      if ((v28 & 0x80000) != 0)
      {
        v31 = 0;
      }
      else
      {
        v29 = atomic_load((unsigned int *)(a1 + 28));
        if (v29 < 0)
        {
          v31 = 1;
        }
        else
        {
          v30 = atomic_load((unsigned int *)(a1 + 28));
          v31 = HIWORD(v30) & 1;
        }
      }
      is_objc_method = TRawSymbol<Pointer64>::is_objc_method(a1);
      if (v26 == v13)
        v33 = v31;
      else
        v33 = 1;
      if ((is_objc_method & 1) != 0)
        v33 = v27;
      v17 = v16 + v33;
    }
    else
    {
      v17 = CSCppMMapStringTable::intern_with_prefix(a2, 0, v20);
    }
    goto LABEL_29;
  }
LABEL_17:
  v17 = 0;
LABEL_29:
  v35 = v16 | (unint64_t)(v17 << 32);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>&,std::pair<unsigned int,unsigned int>>((uint64_t)a4, &v36, &v36, &v35);
LABEL_30:
  *(_DWORD *)(a1 + 16) = v17;
  *(_DWORD *)(a1 + 20) = v16;
  v34 = atomic_load((unsigned int *)(a1 + 28));
  if ((v34 & 0x80000000) != 0)
  {
    result = *(_QWORD *)(a1 + 48);
    if (result)
    {
      result = intern_string<std::unordered_map<unsigned long,unsigned int>>((const char *)result, a2, a5);
      *(_DWORD *)(a1 + 24) = result;
    }
  }
  return result;
}

uint64_t write_symbols_and_inlined_functions<Pointer64>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t **v10;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  BOOL v30;
  unint64_t v31;
  unint64_t **v33;
  uint64_t v36;
  uint64_t v38;
  _OWORD v39[2];
  __int128 v40;
  unint64_t *v41;
  int v42;

  v42 = 0;
  v41 = *a5;
  v40 = 0u;
  memset(v39, 0, sizeof(v39));
  v8 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    v10 = a5;
    do
    {
      if (!a6 || CSCppAddressSet::_intersects_range(a6, *(_QWORD *)v8, *(_QWORD *)(v8 + 8)))
      {
        v12 = children_index_for_symbol<Pointer64>(v8, &v42, a6);
        if (*(_QWORD *)(v8 + 72) != *(_QWORD *)(v8 + 64))
        {
          v38 = v8;
          std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back(v39, &v38);
        }
        if (*v10 == v10[1])
        {
          v13 = *(_QWORD *)v8;
        }
        else
        {
          advance_delta_iterator_to_containing_range<Pointer64>((unint64_t *)v8, (uint64_t)v10, &v41);
          v13 = *(_QWORD *)v8 + v41[2];
        }
        v14 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)a2 = v13;
        *(_DWORD *)(a2 + 4) = v14;
        TRawSymbol<Pointer64>::is_objc_method(v8);
        v15 = atomic_load((unsigned int *)(v8 + 28));
        *(_DWORD *)(a2 + 8) = v15;
        *(_DWORD *)(a2 + 20) = v12;
        *(_QWORD *)(a2 + 12) = *(_QWORD *)(v8 + 16);
        a2 += 24;
      }
      v8 += 104;
    }
    while (v8 != v7);
    v16 = *((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v17 = v40;
      v33 = v10;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v39[0] + 1) + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF));
        v41 = *v10;
        v19 = *(_QWORD *)(v18 + 72) - *(_QWORD *)(v18 + 64);
        if (v19)
        {
          v20 = 0;
          v21 = 0;
          v22 = v19 / 104;
          if ((unint64_t)(v19 / 104) <= 1)
            v23 = 1;
          else
            v23 = v19 / 104;
          v36 = v23;
          do
          {
            v24 = *(_QWORD *)(v18 + 64);
            v25 = v24 + 104 * v21;
            if (!a6 || CSCppAddressSet::_intersects_range(a6, *(_QWORD *)v25, *(_QWORD *)(v25 + 8)))
            {
              v26 = children_index_for_symbol<Pointer64>(v24 + 104 * v21, &v42, a6);
              if (*(_QWORD *)(v24 + 104 * v21 + 72) != *(_QWORD *)(v24 + 104 * v21 + 64))
              {
                v38 = v24 + 104 * v21;
                std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back(v39, &v38);
              }
              if (a6)
              {
                v27 = v20;
                v28 = v21;
                do
                {
                  v29 = ++v28 >= v22;
                  if (v28 >= v22)
                    break;
                  v30 = CSCppAddressSet::_intersects_range(a6, *(_QWORD *)(*(_QWORD *)(v18 + 64) + v27 + 104), *(_QWORD *)(*(_QWORD *)(v18 + 64) + v27 + 112));
                  v27 += 104;
                }
                while (!v30);
              }
              else
              {
                v29 = v21 + 1 >= v22;
              }
              v10 = v33;
              if (*v33 == v33[1])
              {
                LODWORD(v31) = 0;
              }
              else
              {
                advance_delta_iterator_to_containing_range<Pointer64>((unint64_t *)v25, (uint64_t)v33, &v41);
                v31 = v41[2];
              }
              CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer64>(a3, v31, a7, v25, a4, v26, v29);
              a3 += 36;
            }
            ++v21;
            v20 += 104;
          }
          while (v21 != v36);
          v16 = *((_QWORD *)&v40 + 1);
          v17 = v40;
        }
        --v16;
        *(_QWORD *)&v40 = ++v17;
        *((_QWORD *)&v40 + 1) = v16;
        if (v17 >= 0x400)
        {
          operator delete(**((void ***)&v39[0] + 1));
          v17 = v40 - 512;
          *((_QWORD *)&v39[0] + 1) += 8;
          *(_QWORD *)&v40 = v40 - 512;
          v16 = *((_QWORD *)&v40 + 1);
        }
      }
      while (v16);
    }
  }
  return std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100](v39);
}

void sub_1B414D0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::deque<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned long>>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>&,std::pair<unsigned int,unsigned int>>(uint64_t a1, _QWORD *a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = a2[1];
  v9 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = (*a2 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2 && i[3] == v8)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = *a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_42:
    *v23 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B414D32C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t recursive_intern_inlined_function_names_with_name_cache<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(uint64_t a1, CSCppMMapStringTable *a2, uint64_t a3, DemanglingUtilities::CSCppReusableDemanglingBuffer *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  if (v7 == v8)
    return 0;
  v15 = 0;
  do
  {
    if (!a3 || CSCppAddressSet::_intersects_range(a3, *(_QWORD *)v7, *(_QWORD *)(v7 + 8)))
    {
      intern_symbol_names_and_path<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(v7, a2, a4, a5, a6, a7);
      v15 = v15
          + recursive_intern_inlined_function_names_with_name_cache<Pointer64,std::unordered_map<std::pair<unsigned long,unsigned long>,std::pair<unsigned int,unsigned int>,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::PairOfAddressesHash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<std::pair<unsigned long,unsigned long> const,std::pair<unsigned int,unsigned int>>>>,std::unordered_map<unsigned long,unsigned int>>(v7, a2, a3, a4, a5, a6, a7)+ 1;
    }
    v7 += 104;
  }
  while (v7 != v8);
  return v15;
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**,false>(unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t **v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t **v18;
  unint64_t **v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t **v23;
  unint64_t **v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t **v27;
  BOOL v28;
  unint64_t *v29;
  unint64_t **v30;
  unint64_t **v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t **v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t **v40;
  unint64_t **v41;
  unint64_t **v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t **v50;
  BOOL v52;
  uint64_t v53;
  unint64_t **v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t **v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t **v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  BOOL v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t **v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t **v81;
  unint64_t ***v82;
  unint64_t ***v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t **v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t **v92;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*v38 < **v8)
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*v43 < *v44)
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = **v42;
          if (v47 < **v41)
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < **v40)
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < **v8)
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *v55;
                if (*v55 < *v56)
                {
                  v58 = v53;
                  while (1)
                  {
                    *(unint64_t **)((char *)v8 + v58 + 8) = v56;
                    if (!v58)
                      break;
                    v56 = *(unint64_t **)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (v57 >= *v56)
                    {
                      v59 = (unint64_t **)((char *)v8 + v58 + 8);
                      goto LABEL_79;
                    }
                  }
                  v59 = v8;
LABEL_79:
                  *v59 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v95 = *v7;
              v94 = v7[1];
              v7 = v50;
              v96 = *v94;
              if (*v94 < *v95)
              {
                do
                {
                  *v50 = v95;
                  v95 = *(v50 - 2);
                  --v50;
                }
                while (v96 < *v95);
                *v50 = v94;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 >= (uint64_t)v10)
                {
                  v67 = *v65;
                }
                else
                {
                  v66 = v64[1];
                  v67 = *v65;
                  v68 = *v65 >= *v66;
                  if (*v65 <= *v66)
                    v67 = *v66;
                  if (*v65 < *v66)
                  {
                    v65 = v64[1];
                    ++v64;
                  }
                  if (!v68)
                    v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v69 = *result;
                v70 = **result;
                if (v67 >= v70)
                {
                  do
                  {
                    v71 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v72 = (2 * v63) | 1;
                    v64 = &v8[v72];
                    v63 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v63 >= (uint64_t)v10)
                    {
                      v74 = *v65;
                      v63 = v72;
                    }
                    else
                    {
                      v73 = v64[1];
                      v74 = *v65;
                      v75 = *v65 >= *v73;
                      if (*v65 <= *v73)
                        v74 = *v73;
                      if (*v65 < *v73)
                      {
                        v65 = v64[1];
                        ++v64;
                      }
                      if (v75)
                        v63 = v72;
                    }
                    result = v71;
                  }
                  while (v74 >= v70);
                  *v71 = v69;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v76 = (unint64_t)v9 >> 3;
            do
            {
              v77 = 0;
              v78 = *v8;
              v79 = v8;
              do
              {
                v80 = &v79[v77];
                v83 = (unint64_t ***)v80[1];
                v81 = (unint64_t **)(v80 + 1);
                v82 = v83;
                v84 = (2 * v77) | 1;
                v85 = 2 * v77 + 2;
                if (v85 < v76)
                {
                  result = *v82;
                  if ((unint64_t)*v82 < *v81[1])
                  {
                    v82 = (unint64_t ***)v81[1];
                    ++v81;
                    v84 = v85;
                  }
                }
                *v79 = v82;
                v79 = v81;
                v77 = v84;
              }
              while (v84 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              if (v81 == --a2)
              {
                *v81 = v78;
              }
              else
              {
                *v81 = *a2;
                *a2 = v78;
                v86 = (char *)v81 - (char *)v8 + 8;
                if (v86 >= 9)
                {
                  v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = &v8[v87];
                  v89 = *v88;
                  v90 = *v81;
                  v91 = **v81;
                  if (**v88 < v91)
                  {
                    do
                    {
                      v92 = v88;
                      *v81 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v8[v87];
                      v89 = *v88;
                      v81 = v92;
                    }
                    while (**v88 < v91);
                    *v92 = v90;
                  }
                }
              }
            }
            while (v76-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        v15 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v15)
        {
          if (v15 >= **(a2 - 1))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= **v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *v32);
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *v35);
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *v36);
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*v17 < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*v21 >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*v20 >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*v25 < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*v26 >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_32:
          result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v7, v27);
        v8 = v27 + 1;
        result = (unint64_t **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = **result;
  v7 = *a3;
  v8 = **a3;
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (**a3 >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t **v8;
  unint64_t **v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t **v17;
  unint64_t **v18;
  unint64_t **v19;
  unint64_t **v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*v21 < *v22)
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = **v20;
        if (v25 < **v19)
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = **v9;
    if (v14 < **v8)
    {
      v15 = v11;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(unint64_t **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          v17 = (unint64_t **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  unint64_t **result;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,compress_relocations_for_mmap_symbol_owner_data(std::vector<CSCppSegmentRange> const&,TRawSymbolOwnerData<Pointer64> &)::$_0 &,CSCppSegmentRange**>(a1, a2, a3);
  v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t children_index_for_symbol<Pointer64>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t *v5;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t result;

  if (a3)
  {
    v4 = *(unint64_t **)(a1 + 64);
    v5 = *(unint64_t **)(a1 + 72);
    if (v4 == v5)
    {
      v7 = 0;
LABEL_10:
      v10 = &CSCppMMapSymbol::kNoChildren;
      goto LABEL_11;
    }
    v7 = 0;
    do
    {
      v8 = *v4;
      v9 = v4[1];
      v4 += 13;
      v7 += CSCppAddressSet::_intersects_range(a3, v8, v9);
    }
    while (v4 != v5);
  }
  else
  {
    v7 = -991146299 * ((*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3);
  }
  v10 = a2;
  if (!v7)
    goto LABEL_10;
LABEL_11:
  result = *v10;
  *a2 += v7;
  return result;
}

unint64_t *advance_delta_iterator_to_containing_range<Pointer64>(unint64_t *result, uint64_t a2, unint64_t **a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  FILE *v11;
  unsigned int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (uint64_t)result;
  v20 = *MEMORY[0x1E0C80C00];
  v4 = *result;
  v5 = *a3;
  v6 = *(_QWORD *)(a2 + 8);
  while (v4 < *v5 || result[1] + v4 > v5[1] + *v5)
  {
    v5 += 3;
    *a3 = v5;
    if ((unint64_t)v5 >= v6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v7 = atomic_load((unsigned int *)(v3 + 28));
        if ((v7 & 0x1C000) != 0)
          v8 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v3, 0, 0);
        else
          v8 = "UNNAMED";
        v9 = *(_QWORD *)v3;
        v10 = *(_QWORD *)(v3 + 8);
        *(_DWORD *)buf = 136315650;
        v15 = v8;
        v16 = 2048;
        v17 = v9;
        v18 = 2048;
        v19 = v10;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n", buf, 0x20u);
      }
      v11 = (FILE *)*MEMORY[0x1E0C80C10];
      v12 = atomic_load((unsigned int *)(v3 + 28));
      if ((v12 & 0x1C000) != 0)
        v13 = (const char *)TRawSymbol<Pointer64>::_resolve_name(v3, 0, 0);
      else
        v13 = "UNNAMED";
      return (unint64_t *)fprintf(v11, "Symbol %s [%llx -> %llx) outside of relocations in mmap SOD\n", v13, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    }
  }
  return result;
}

void std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<TRawSymbol<Pointer64> *,std::allocator<TRawSymbol<Pointer64> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TRawSymbol<Pointer32> *,std::allocator<TRawSymbol<Pointer32> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B414E5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CSCppMMapInlinedSymbol::CSCppMMapInlinedSymbol<Pointer64>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;

  v11 = *(_QWORD *)(a4 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a4 + a2;
  *(_DWORD *)(a1 + 4) = v11;
  TRawSymbol<Pointer64>::is_objc_method(a4);
  v12 = (unsigned int *)(a4 + 28);
  v13 = atomic_load((unsigned int *)(a4 + 28));
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 20) = a6;
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a4 + 16);
  if (a7)
    *(_DWORD *)(a1 + 8) = v13 | 0x40000000;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a4 + 24);
  v14 = atomic_load(v12);
  if (*(_QWORD *)(a4 + 48))
    v15 = v14 < 0;
  else
    v15 = 0;
  v16 = *(_DWORD *)(a4 + 56);
  if (!v15)
    v16 = 0;
  *(_DWORD *)(a1 + 28) = v16;
  v17 = atomic_load(v12);
  if (*(_QWORD *)(a4 + 48))
    v18 = v17 < 0;
  else
    v18 = 0;
  v19 = *(_DWORD *)(a4 + 60);
  if (!v18)
    v19 = 0;
  *(_DWORD *)(a1 + 32) = v19;
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        result = strcmp((const char *)(*a3 + *(unsigned int *)(v20 + 12)), (const char *)(*a3 + *(unsigned int *)(*v9 + 12)));
        if ((result & 0x80000000) != 0)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((strcmp((const char *)(*a3 + *(unsigned int *)(*(v9 - 1) + 12)), (const char *)(*a3 + *(unsigned int *)(*v9 + 12))) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>((char *)v9, (char *)a2, (char *)a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 12)), (const char *)(*a3 + *(unsigned int *)(*a1 + 12))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 12));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12))) < 0)
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 12)));
        v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        result = strcmp((const char *)(*a3 + *(unsigned int *)(v20 + 16)), (const char *)(*a3 + *(unsigned int *)(*v9 + 16)));
        if ((result & 0x80000000) != 0)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((strcmp((const char *)(*a3 + *(unsigned int *)(*(v9 - 1) + 16)), (const char *)(*a3 + *(unsigned int *)(*v9 + 16))) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,CSCppMMapSymbol const**,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**,CSCppMMapSymbol const**>((char *)v9, (char *)a2, (char *)a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (strcmp((const char *)(*a3 + *(unsigned int *)(v8 + 16)), (const char *)(*a3 + *(unsigned int *)(*a1 + 16))) < 0)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TMMapArchive * CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,CSCppAddressSet *,BOOL)::{lambda(unsigned long)#2}::operator() const(unsigned long)::{lambda(CSCppMMapSymbol const*,CSCppMMapSymbol const*)#1} &,CSCppMMapSymbol const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = (const char *)(v13 + *(unsigned int *)(*v11 + 16));
    if (strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16))) < 0)
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v20 = strcmp(v17, (const char *)(v13 + *(unsigned int *)(v16 + 16)));
        v18 = v19;
        if ((v20 & 0x80000000) == 0)
        {
          v21 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t CSCppTRawSymbolNameGuard<Pointer64>::~CSCppTRawSymbolNameGuard(uint64_t a1)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)a1)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (v3)
    {
      v4 = *v3;
      v5 = v3[1];
      while (v4 != v5)
      {
        TRawSymbol<Pointer64>::rollback_mmap_archive_naming(v4);
        v4 += 104;
      }
    }
  }
  return a1;
}

uint64_t TRawSymbol<Pointer64>::rollback_mmap_archive_naming(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v1 = result;
  v2 = *(_QWORD *)(result + 64);
  v3 = *(_QWORD *)(result + 72);
  while (v2 != v3)
  {
    result = TRawSymbol<Pointer64>::rollback_mmap_archive_naming(v2);
    v2 += 104;
  }
  v4 = (unsigned int *)(v1 + 28);
  v5 = atomic_load((unsigned int *)(v1 + 28));
  v6 = atomic_load((unsigned int *)(v1 + 28));
  if ((v6 & 0x40000) == 0)
  {
    v5 &= ~0x20000u;
    *(_QWORD *)(v1 + 32) = *(_QWORD *)(v1 + 40);
  }
  v7 = atomic_load(v4);
  if ((v7 & 0x800000) == 0)
    v5 &= 0xFEBFFFFB;
  atomic_store(v5, v4);
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      CSCppSymbolOwner::~CSCppSymbolOwner((CSCppSymbolOwner *)(v2 + 16));
    operator delete((void *)v2);
  }
}

_QWORD *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  _QWORD v20[7];
  void *__p;
  void *v22;
  uint64_t v23;
  void **v24[4];
  __int128 v25[3];
  uint64_t v26;
  _QWORD v27[7];
  void *v28;
  _BYTE *v29;
  unint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v33 = a3;
  v34 = a4;
  v32 = 0;
  v36 = 0;
  *(_QWORD *)&v25[0] = v35;
  std::function<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>(v35, v25);
  v30 = a3 & 0xFFFFFFFFFFFFFFF8;
  v31 = &v33;
  create_segment_relocation_deltas<Pointer32,CSCppSegmentRange,CSCppSegmentRange>((a3 & 0xFFFFFFFFFFFFFFF8) + 32, a1 + 32, 0, (uint64_t)&v28);
  v9 = a2 + 96;
  v27[0] = &v30;
  v27[1] = &v31;
  v27[2] = &v32;
  v27[3] = a2 + 96;
  v27[4] = v35;
  v27[5] = &v28;
  v27[6] = &v33;
  _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator()((uint64_t)v27, (uint64_t)v25);
  if (*(_QWORD *)&v25[0])
  {
    v24[0] = 0;
    v24[1] = (void **)v24;
    v24[2] = (void **)0x2000000000;
    v24[3] = (void **)(a2 + 208);
    v10 = v33;
    v11 = v34;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 1174405120;
    v20[2] = ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke;
    v20[3] = &unk_1E6778A18;
    v20[4] = v24;
    v20[5] = v30;
    v20[6] = v9;
    __p = 0;
    v22 = 0;
    v23 = 0;
    std::vector<TRangeValue<Pointer32,unsigned int>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer32,unsigned int>*,TRangeValue<Pointer32,unsigned int>*>(&__p, v28, (uint64_t)v29, 0xAAAAAAAAAAAAAAABLL * ((v29 - (_BYTE *)v28) >> 2));
    CSSymbolForeachSourceInfo(v10, v11, (uint64_t)v20);
    *(_QWORD *)(a5 + 88) = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(a5, (uint64_t)v25);
    *(_BYTE *)(a5 + 96) = 1;
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v24, 8);
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 96) = 0;
  }
  v24[0] = (void **)&v26;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v24);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  result = v36;
  if (v36 == v35)
  {
    v19 = 4;
    result = v35;
  }
  else
  {
    if (!v36)
      return result;
    v19 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v19))(result, v12, v13, v14, v15, v16, v17);
}

void sub_1B414F448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  _QWORD *v33;
  uint64_t v34;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a19, 8);
  a19 = &a30;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  v32 = *(void **)(v30 - 152);
  if (v32)
  {
    *(_QWORD *)(v30 - 144) = v32;
    operator delete(v32);
  }
  v33 = *(_QWORD **)(v30 - 64);
  if (v33 == (_QWORD *)(v30 - 88))
  {
    v34 = 4;
    v33 = (_QWORD *)(v30 - 88);
  }
  else
  {
    if (!v33)
      goto LABEL_10;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_10:
  _Unwind_Resume(a1);
}

unsigned __int8 *intern_name_or_default(char *a1, const void *a2, CSCppStringCache *this)
{
  char __str[16];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
    return CSCppStringCache::intern(this, a1);
  snprintf(__str, 0x10uLL, "%p", a2);
  return CSCppStringCache::intern(this, __str);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

_QWORD *std::function<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = &off_1E6778A58;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<void ()(TRawSymbol<Pointer32> &,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

_QWORD *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  FlatbufferSymbolOwnerData *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  const void *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  char *v14;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  TMMapSymbolOwnerData *v19;
  unsigned int *v20;
  unsigned int v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint8_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  FILE *v56;
  uint64_t v57;
  int v58;
  char *v59;
  int v60;
  unsigned int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD v76[4];
  _BYTE v77[24];
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  CSCppSymbolOwner **v82;
  _QWORD v83[4];
  _BYTE v84[24];
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint8_t buf[8];
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if (((_DWORD)result - 1) < 2)
  {
    v15 = (unsigned int *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL);
    v16 = (char *)*((_QWORD *)v15 + 5);
    if (v16)
    {
      v17 = *((_QWORD *)v15 + 6);
      v18 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 24), v16);
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    *(_QWORD *)buf = v18;
    v89 = v17;
    v27 = atomic_load(v15 + 5);
    if ((v27 & 0x1C000) != 0)
      v28 = (char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)v15, 0, 0);
    else
      v28 = 0;
    v29 = atomic_load(v15 + 5);
    if ((v29 & 0x1C000) != 0)
      v30 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)v15);
    else
      v30 = 0;
    v31 = atomic_load(v15 + 5);
    v74 = *(_QWORD *)v15;
    v32 = *(_QWORD *)v15;
    v33 = intern_name_or_default(v28, (const void *)v32, *(CSCppStringCache **)(a1 + 24));
    v34 = intern_name_or_default(v30, (const void *)*v15, *(CSCppStringCache **)(a1 + 24));
    v35 = atomic_load(v15 + 5);
    if ((v35 & 0x80000000) != 0)
    {
      v36 = buf;
      if (!*((_QWORD *)v15 + 5))
        v36 = 0;
    }
    else
    {
      v36 = 0;
    }
    *(_QWORD *)a2 = v74;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v33;
    *(_QWORD *)(a2 + 32) = v34;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 65) = 0u;
    if (v36)
    {
      *(_OWORD *)(a2 + 40) = *(_OWORD *)v36;
      v37 = -2143157248;
    }
    else
    {
      v37 = 4326400;
    }
    *(_DWORD *)(a2 + 20) = v31 & 0xFF39FBFF | v37;
    v38 = *((_QWORD *)v15 + 7);
    v39 = *((_QWORD *)v15 + 8);
    if (v38 != v39)
    {
      do
      {
        v40 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
        if (!v40)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v40 + 48))(v40, v38, a2 + 56, *(_QWORD *)(a1 + 24));
        v38 += 96;
      }
      while (v38 != v39);
      v32 = *(_DWORD *)a2;
    }
    v41 = slide_for_remote_address<Pointer32,unsigned int>(*(_QWORD **)(a1 + 40), v32);
    return (_QWORD *)slideSymbolsByOffset<Pointer32>(a2, v41);
  }
  if ((_DWORD)result != 4)
  {
    if ((_DWORD)result == 5)
    {
      v6 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
      v90 = 0;
      *(_QWORD *)&v81 = buf;
      *((_QWORD *)&v81 + 1) = v6;
      v82 = *(CSCppSymbolOwner ***)a1;
      std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>(buf, (uint64_t)&v81);
      v75 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL;
      v7 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
      v8 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v6, v7);
      v10 = v9;
      if (!v9)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v55 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
          LODWORD(v81) = 134217984;
          *(_QWORD *)((char *)&v81 + 4) = v55;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to relocate address %#llx in flatbuffer SOD", (uint8_t *)&v81, 0xCu);
        }
        v56 = (FILE *)*MEMORY[0x1E0C80C10];
        v57 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
        fprintf(v56, "Failed to relocate address %#llx in flatbuffer SOD", v57);
        goto LABEL_63;
      }
      v11 = (const void *)v8;
      if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v75)
        || (v12 = (unsigned __int16 *)(v75 - *(int *)v75), *v12 < 9u)
        || (v13 = v12[4]) == 0)
      {
        v14 = 0;
      }
      else
      {
        v14 = (char *)(v75 + v13 + *(unsigned int *)(v75 + v13) + 4);
      }
      if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v75)
        || (v42 = (unsigned __int16 *)(v75 - *(int *)v75), *v42 < 0xBu)
        || (v43 = v42[5]) == 0)
      {
        v44 = 0;
      }
      else
      {
        v44 = (char *)(v75 + v43 + *(unsigned int *)(v75 + v43) + 4);
      }
      v45 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(&v75);
      FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
      v47 = v46;
      v48 = intern_name_or_default(v44, v11, *(CSCppStringCache **)(a1 + 24));
      v49 = intern_name_or_default(v14, v11, *(CSCppStringCache **)(a1 + 24));
      *(_DWORD *)a2 = (_DWORD)v11;
      *(_DWORD *)(a2 + 4) = v47;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = v48;
      *(_QWORD *)(a2 + 32) = v49;
      *(_QWORD *)(a2 + 88) = 0;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)(a2 + 65) = 0u;
      *(_DWORD *)(a2 + 20) = v45 & 0xFF39FBFF | 0x420400;
      v50 = *(uint64_t **)(a1 + 48);
      v51 = *v50;
      v52 = v50[1];
      v76[0] = MEMORY[0x1E0C809B0];
      v76[1] = 1174405120;
      v76[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_261;
      v76[3] = &__block_descriptor_tmp_263;
      v53 = v77;
      v54 = (uint64_t)v90;
      if (v90)
      {
        if (v90 == buf)
        {
          v78 = v77;
          (*(void (**)(uint8_t *, _BYTE *))(*(_QWORD *)buf + 24))(buf, v77);
          goto LABEL_58;
        }
        v54 = (*(uint64_t (**)(void))(*(_QWORD *)v90 + 16))();
      }
      v78 = (_BYTE *)v54;
LABEL_58:
      v66 = *(_QWORD *)(a1 + 24);
      v79 = a2;
      v80 = v66;
      FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v6, v51, v52, (uint64_t)v76);
      v67 = slide_for_remote_address<Pointer32,unsigned int>(*(_QWORD **)(a1 + 40), *(_DWORD *)a2);
      slideSymbolsByOffset<Pointer32>(a2, v67);
      if (v78 == v77)
      {
        v68 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_63;
        v68 = 5;
        v53 = v78;
      }
      (*(void (**)(_QWORD *))(*v53 + 8 * v68))(v53);
LABEL_63:
      result = v90;
      if (v90 == buf)
      {
        v69 = 4;
        result = buf;
      }
      else
      {
        if (!v90)
          goto LABEL_68;
        v69 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v69))();
LABEL_68:
      if (v10)
        return result;
    }
LABEL_69:
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_BYTE *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 20) = 0;
    return result;
  }
  v19 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  v20 = (unsigned int *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL);
  v75 = 0;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v19, *v20, &v75) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps", buf, 2u);
    }
    result = (_QWORD *)fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    goto LABEL_69;
  }
  v90 = 0;
  *(_QWORD *)&v81 = buf;
  *((_QWORD *)&v81 + 1) = v19;
  std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>(buf, &v81);
  v21 = v20[2];
  if ((v21 & 0x1C000) != 0)
  {
    v22 = (_DWORD *)*((_QWORD *)v19 + 11);
    v23 = (unint64_t)v22
        + 32 * v22[2]
        + 24 * v22[3]
        + (24 * v22[4])
        + (unint64_t)(4 * v22[4])
        + (36 * v22[5])
        + (20 * v22[6])
        + v22[22]
        + v22[20]
        + 96;
    v24 = v20[3];
    v25 = (char *)(v23 + v20[4]);
    v26 = (char *)(v23 + v24);
  }
  else
  {
    v25 = 0;
    v26 = 0;
    LODWORD(v24) = v20[3];
  }
  v58 = v24 != 0;
  if ((_DWORD)v24)
    v59 = v26;
  else
    v59 = v25;
  v60 = v75;
  v61 = v20[1];
  v62 = intern_name_or_default(v59, (const void *)v75, *(CSCppStringCache **)(a1 + 24));
  v63 = intern_name_or_default(v25, (const void *)v75, *(CSCppStringCache **)(a1 + 24));
  *(_DWORD *)a2 = v60;
  *(_DWORD *)(a2 + 4) = v61;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v62;
  *(_QWORD *)(a2 + 32) = v63;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 65) = 0u;
  *(_DWORD *)(a2 + 20) = (v21 & 0x7F39FBFF | (v58 << 17)) + 4195328;
  v83[0] = MEMORY[0x1E0C809B0];
  v83[1] = 1174405120;
  v83[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke;
  v83[3] = &__block_descriptor_tmp_259;
  v64 = v84;
  v65 = (uint64_t)v90;
  if (!v90)
    goto LABEL_56;
  if (v90 != buf)
  {
    v65 = (*(uint64_t (**)(void))(*(_QWORD *)v90 + 16))();
LABEL_56:
    v85 = (_BYTE *)v65;
    goto LABEL_72;
  }
  v85 = v84;
  (*(void (**)(uint8_t *, _BYTE *))(*(_QWORD *)buf + 24))(buf, v84);
LABEL_72:
  v70 = *(_QWORD *)(a1 + 24);
  v86 = a2;
  v87 = v70;
  TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v19, (uint64_t)v20, (uint64_t)v83);
  v71 = slide_for_remote_address<Pointer32,unsigned int>(*(_QWORD **)(a1 + 40), *(_DWORD *)a2);
  slideSymbolsByOffset<Pointer32>(a2, v71);
  if (v85 == v84)
  {
    v72 = 4;
    goto LABEL_76;
  }
  if (v85)
  {
    v72 = 5;
    v64 = v85;
LABEL_76:
    (*(void (**)(_QWORD *))(*v64 + 8 * v72))(v64);
  }
  result = v90;
  if (v90 == buf)
  {
    v73 = 4;
    result = buf;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v73))();
  }
  if (v90)
  {
    v73 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v73))();
  }
  return result;
}

void sub_1B414FE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;

  v38 = *(_QWORD **)(v36 - 104);
  if (v38 == (_QWORD *)(v36 - 128))
  {
    v39 = 4;
    v38 = (_QWORD *)(v36 - 128);
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  TMMapSymbolOwnerData *v7;
  CSCppMMapSourceInfo *v8;
  _DWORD *v9;
  CSCppStringCache *v10;
  char *v11;
  unsigned __int8 *v12;
  void **v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  unsigned int *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned __int16 *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  int v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  __int128 v73;
  unint64_t v74;

  v5 = CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if ((v6 - 1) < 2)
  {
    v21 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    v22 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 8));
    v13 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v23 = *v21;
    v24 = slide_for_remote_address<Pointer32,unsigned int>((_QWORD *)(a1 + 56), *v21) + v23;
    v25 = v21[1];
    v26 = v21[4];
    v17 = v21[5] & 0x7FFFFFFF;
    v19 = (char *)v13[1];
    v27 = (char *)v13[2];
    if (v19 < v27)
    {
      *(_DWORD *)v19 = v24;
      *((_DWORD *)v19 + 1) = v25;
      *((_QWORD *)v19 + 1) = v22;
      *((_DWORD *)v19 + 4) = v26;
      goto LABEL_8;
    }
    v34 = (v19 - (_BYTE *)*v13) >> 5;
    v35 = v34 + 1;
    if (!((unint64_t)(v34 + 1) >> 59))
    {
      v36 = v27 - (_BYTE *)*v13;
      if (v36 >> 4 > v35)
        v35 = v36 >> 4;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0)
        v37 = 0x7FFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v13 + 2), v37);
      v39 = &v38[32 * v34];
      v41 = &v38[32 * v40];
      *(_DWORD *)v39 = v24;
      *((_DWORD *)v39 + 1) = v25;
      *((_QWORD *)v39 + 1) = v22;
      *((_DWORD *)v39 + 4) = v26;
      *((_DWORD *)v39 + 5) = v17;
      *((_DWORD *)v39 + 6) = 0;
      v42 = v39 + 32;
      v44 = (char *)*v13;
      v43 = (char *)v13[1];
      if (v43 == *v13)
        goto LABEL_60;
      do
      {
        v45 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v39 - 20) = *(_OWORD *)(v43 - 20);
        *((_OWORD *)v39 - 2) = v45;
        v39 -= 32;
        v43 -= 32;
      }
      while (v43 != v44);
      goto LABEL_59;
    }
LABEL_64:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  if (v6 == 5)
  {
    v28 = (char *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = *(int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    v30 = -v29;
    v31 = (unsigned __int16 *)((a3 & 0xFFFFFFFFFFFFFFFCLL) - v29);
    if (*v31 >= 5u && (v32 = v31[2]) != 0)
    {
      v33 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), &v28[v32 + 4 + *(unsigned int *)&v28[v32]]);
      v30 = -(uint64_t)*(int *)v28;
    }
    else
    {
      v33 = "<Invalid file path>";
    }
    v13 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v46 = &v28[v30];
    if (*(unsigned __int16 *)v46 >= 0xDu && (v47 = *((unsigned __int16 *)v46 + 6)) != 0)
    {
      v48 = *(_QWORD *)&v28[v47];
      v49 = v48;
    }
    else
    {
      v49 = -1;
      LODWORD(v48) = -1;
    }
    v50 = v48 + slide_for_remote_address<Pointer32,unsigned int>((_QWORD *)(a1 + 56), v49);
    v51 = (unsigned __int16 *)&v28[-*(int *)v28];
    v52 = *v51;
    if (v52 < 0xF)
    {
      v53 = 0;
      v62 = 0;
      v63 = 0;
      if (v52 < 9)
        goto LABEL_48;
    }
    else if (v51[7])
    {
      v53 = *(_DWORD *)&v28[v51[7]];
    }
    else
    {
      v53 = 0;
    }
    if (v51[4])
      v62 = *(_DWORD *)&v28[v51[4]];
    else
      v62 = 0;
    if (v52 >= 0xB && (v64 = v51[5]) != 0)
      v63 = *(_DWORD *)&v28[v64];
    else
      v63 = 0;
LABEL_48:
    v65 = (char *)v13[2];
    v19 = (char *)v13[1];
    if (v19 < v65)
    {
      *(_DWORD *)v19 = v50;
      *((_DWORD *)v19 + 1) = v53;
      *((_QWORD *)v19 + 1) = v33;
      *((_DWORD *)v19 + 4) = v62;
      *((_DWORD *)v19 + 5) = v63;
      goto LABEL_50;
    }
    v66 = (v19 - (_BYTE *)*v13) >> 5;
    v67 = v66 + 1;
    if (!((unint64_t)(v66 + 1) >> 59))
    {
      v68 = v65 - (_BYTE *)*v13;
      if (v68 >> 4 > v67)
        v67 = v68 >> 4;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFE0)
        v69 = 0x7FFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v13 + 2), v69);
      v39 = &v70[32 * v66];
      v41 = &v70[32 * v71];
      *(_DWORD *)v39 = v50;
      *((_DWORD *)v39 + 1) = v53;
      *((_QWORD *)v39 + 1) = v33;
      *((_DWORD *)v39 + 4) = v62;
      *((_DWORD *)v39 + 5) = v63;
      *((_DWORD *)v39 + 6) = 0;
      v42 = v39 + 32;
      v72 = (char *)*v13;
      v43 = (char *)v13[1];
      if (v43 == *v13)
        goto LABEL_60;
      do
      {
        v73 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v39 - 20) = *(_OWORD *)(v43 - 20);
        *((_OWORD *)v39 - 2) = v73;
        v39 -= 32;
        v43 -= 32;
      }
      while (v43 != v72);
      goto LABEL_59;
    }
    goto LABEL_64;
  }
  if (v6 != 4)
    return;
  v7 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  v8 = (CSCppMMapSourceInfo *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)*((_QWORD *)v7 + 11);
  v10 = *(CSCppStringCache **)(a1 + 48);
  v11 = (char *)CSCppMMapSourceInfo::path(v8, (uint64_t)v9+ 32 * v9[2]+ 24 * v9[3]+ (24 * v9[4])+ (unint64_t)(4 * v9[4])+ (36 * v9[5])+ (20 * v9[6])+ v9[22]+ v9[20]+ 96);
  v12 = CSCppStringCache::intern(v10, v11);
  v74 = 0;
  TMMapSymbolOwnerData::convert_archive_address_to_real_address(v7, *(unsigned int *)v8, &v74);
  v13 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v14 = v74;
  v15 = v14 + slide_for_remote_address<Pointer32,unsigned int>((_QWORD *)(a1 + 56), v74);
  v16 = *((_DWORD *)v8 + 1);
  v18 = *((_DWORD *)v8 + 3);
  v17 = *((_DWORD *)v8 + 4);
  v19 = (char *)v13[1];
  v20 = (char *)v13[2];
  if (v19 >= v20)
  {
    v54 = (v19 - (_BYTE *)*v13) >> 5;
    v55 = v54 + 1;
    if (!((unint64_t)(v54 + 1) >> 59))
    {
      v56 = v20 - (_BYTE *)*v13;
      if (v56 >> 4 > v55)
        v55 = v56 >> 4;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0)
        v57 = 0x7FFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)(v13 + 2), v57);
      v39 = &v58[32 * v54];
      v41 = &v58[32 * v59];
      *(_DWORD *)v39 = v15;
      *((_DWORD *)v39 + 1) = v16;
      *((_QWORD *)v39 + 1) = v12;
      *((_DWORD *)v39 + 4) = v18;
      *((_DWORD *)v39 + 5) = v17;
      *((_DWORD *)v39 + 6) = 0;
      v42 = v39 + 32;
      v60 = (char *)*v13;
      v43 = (char *)v13[1];
      if (v43 == *v13)
        goto LABEL_60;
      do
      {
        v61 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v39 - 20) = *(_OWORD *)(v43 - 20);
        *((_OWORD *)v39 - 2) = v61;
        v39 -= 32;
        v43 -= 32;
      }
      while (v43 != v60);
LABEL_59:
      v43 = (char *)*v13;
LABEL_60:
      *v13 = v39;
      v13[1] = v42;
      v13[2] = v41;
      if (v43)
        operator delete(v43);
      goto LABEL_62;
    }
    goto LABEL_64;
  }
  *(_DWORD *)v19 = v15;
  *((_DWORD *)v19 + 1) = v16;
  *((_QWORD *)v19 + 1) = v12;
  *((_DWORD *)v19 + 4) = v18;
LABEL_8:
  *((_DWORD *)v19 + 5) = v17;
LABEL_50:
  v42 = v19 + 32;
  *((_DWORD *)v19 + 6) = 0;
LABEL_62:
  v13[1] = v42;
}

uint64_t slide_for_remote_address<Pointer32,unsigned int>(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unsigned int *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1[1] - *a1;
  if (!v2)
    return 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 2);
  v4 = (_DWORD *)*a1;
  do
  {
    v5 = v3 >> 1;
    v6 = &v4[3 * (v3 >> 1)];
    v8 = *v6;
    v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (v8 > a2)
      v3 = v5;
    else
      v4 = v7;
  }
  while (v3);
  if (v4 != (_DWORD *)*a1 && (v9 = *(v4 - 3), v9 <= a2) && a2 + 1 <= *(v4 - 2) + v9)
    return *(v4 - 1);
  else
    return 0;
}

_QWORD *__copy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer32jENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<TRangeValue<Pointer32,unsigned int>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer32,unsigned int>*,TRangeValue<Pointer32,unsigned int>*>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2));
}

void __destroy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer32jENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6778A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6778A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3, CSCppStringCache *a4)
{
  _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}::operator()(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target_type()
{
}

void _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer32>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3, CSCppStringCache *this)
{
  char *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;
  void **v35;

  v8 = (char *)*((_QWORD *)a2 + 5);
  if (v8)
  {
    v26 = *((_QWORD *)a2 + 6);
    v9 = CSCppStringCache::intern(this, v8);
  }
  else
  {
    v9 = 0;
    v26 = 0;
  }
  v10 = atomic_load(a2 + 5);
  if ((v10 & 0x1C000) != 0)
    v11 = (char *)TRawSymbol<Pointer32>::_resolve_name((uint64_t)a2, 0, 0);
  else
    v11 = 0;
  v12 = atomic_load(a2 + 5);
  if ((v12 & 0x1C000) != 0)
    v13 = (char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a2);
  else
    v13 = 0;
  v14 = atomic_load(a2 + 5);
  v15 = v14 & 0xFF39FBFF;
  v16 = v14 & 0xFF39FBFF | 0x420400;
  v27 = *(_QWORD *)a2;
  v17 = intern_name_or_default(v11, (const void *)*(_QWORD *)a2, this);
  v18 = intern_name_or_default(v13, (const void *)*a2, this);
  v19 = atomic_load(a2 + 5);
  v20 = *((_QWORD *)a2 + 5);
  v28[0] = v27;
  v28[1] = 0;
  v29 = 0;
  v30 = v17;
  v31 = v18;
  v34 = 0;
  v32 = 0u;
  memset(v33, 0, 25);
  if ((v19 & 0x80000000) != 0 && v20)
  {
    *(_QWORD *)&v32 = v9;
    *((_QWORD *)&v32 + 1) = v26;
    v16 = v15 | 0x80420400;
  }
  HIDWORD(v29) = v16;
  v21 = *((_QWORD *)a2 + 7);
  for (i = *((_QWORD *)a2 + 8); v21 != i; v21 += 96)
  {
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (!v23)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(_QWORD *)v23 + 48))(v23, v21, v33, this);
  }
  v24 = a3[1];
  if (v24 >= a3[2])
  {
    v25 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)v28);
  }
  else
  {
    *(_QWORD *)(v24 + 88) = 0;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)v24 = 0;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(v24, (uint64_t)v28);
    v25 = v24 + 96;
  }
  a3[1] = v25;
  v35 = (void **)v33;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_1B41507E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 - 88) = &a21;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = &off_1E6778B38;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a1[8];
  v2 = a1[9];
  v6 = a2;
  v4 = a1[7];
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v6, v3 + 56, v2);
}

uint64_t __copy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = &off_1E6778BD8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 16);
  v9 = v4;
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](v8, a1);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_261(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a1[8];
  v2 = a1[9];
  v6 = a2;
  v4 = a1[7];
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v6, v3 + 56, v2);
}

uint64_t __copy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer32ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6778B38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6778B38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(uint64_t a1, __int128 **a2, uint64_t *a3, CSCppStringCache *a4)
{
  std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}::operator()((_QWORD *)(a1 + 8), *a2, a3, a4);
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}::operator()(_QWORD *a1, __int128 *a2, uint64_t *a3, CSCppStringCache *this)
{
  TMMapSymbolOwnerData *v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[7];
  uint8_t buf[4];
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  __int128 v31;
  _BYTE v32[32];
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  void **v37;

  v8 = (TMMapSymbolOwnerData *)a1[1];
  v9 = (_DWORD *)*((_QWORD *)v8 + 11);
  v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0 && (v11 = *((unsigned int *)a2 + 6), v10 + v11))
  {
    v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0)
      v19 = *(_QWORD *)((char *)a2 + 28);
    else
      v19 = 0;
    v23 = v19;
    v8 = (TMMapSymbolOwnerData *)a1[1];
  }
  else
  {
    v12 = 0;
    v23 = 0;
  }
  v35 = *a2;
  v36 = *((_QWORD *)a2 + 2);
  v34 = 0;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v35, &v34) & 1) != 0)
  {
    v13 = DWORD2(v35);
    if ((DWORD2(v35) & 0x1C000) != 0)
      v14 = (char *)(v10 + v36);
    else
      v14 = 0;
    if ((DWORD2(v35) & 0x1C000) != 0)
      v15 = (char *)(v10 + HIDWORD(v35));
    else
      v15 = 0;
    if (HIDWORD(v35))
      v16 = v15;
    else
      v16 = v14;
    v17 = DWORD2(v35) & 0xFF39FBFF | ((HIDWORD(v35) != 0) << 17);
    *(_DWORD *)buf = v34;
    v26 = DWORD1(v35);
    v27 = 0;
    v28 = 0;
    v29 = intern_name_or_default(v16, (const void *)v34, this);
    v30 = intern_name_or_default(v14, (const void *)v34, this);
    v33 = 0;
    v31 = 0u;
    memset(v32, 0, 25);
    if (v13 < 0)
    {
      *(_QWORD *)&v31 = v12;
      *((_QWORD *)&v31 + 1) = v23;
      v18 = -2143288320;
    }
    else
    {
      v18 = 4195328;
    }
    HIDWORD(v28) = v17 | v18;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 0x40000000;
    v24[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke;
    v24[3] = &__block_descriptor_tmp_264;
    v20 = a1[1];
    v24[4] = *a1;
    v24[5] = buf;
    v24[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v20, (uint64_t)&v35, (uint64_t)v24);
    v21 = a3[1];
    if (v21 >= a3[2])
    {
      v22 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)buf);
    }
    else
    {
      *(_QWORD *)(v21 + 88) = 0;
      *(_QWORD *)(v21 + 8) = 0;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)v21 = 0;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      *(_OWORD *)(v21 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v21, (uint64_t)buf);
      v22 = v21 + 96;
    }
    a3[1] = v22;
    v37 = (void **)v32;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v37);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps inline enumeration", buf, 2u);
    }
    fwrite("Could not remap archive address to real in debug maps inline enumeration", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
}

void sub_1B4150E18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = v1 + 56;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 96));
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = a1[4];
  v2 = a1[5];
  v4 = a1[6];
  v7 = a2;
  v5 = *(_QWORD *)(v3 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v2 + 56, v4);
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6778BD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6778BD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, CSCppStringCache *a4)
{
  std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}::operator()(a1 + 8, *a2, a3, a4);
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer32>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer32,LittleEndian>,Pointer32>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer32> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned __int16 *v8;
  uint64_t v9;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  int *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  FlatbufferSymbolOwnerData *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  const void *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  char *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int16 *v40;
  BOOL v41;
  unsigned __int8 **v42;
  uint64_t v43;
  FILE *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[7];
  unsigned __int8 *v52;
  uint64_t v53;
  int *v54;
  void **v55;
  uint8_t buf[4];
  _BYTE v57[12];
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  __int128 v61;
  _BYTE v62[32];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v53 = 0;
  v54 = (int *)a2;
  v52 = 0;
  v8 = (unsigned __int16 *)(a2 - *(int *)a2);
  if (*v8 >= 0xDu)
  {
    v9 = v8[6];
    if (v9)
    {
      v10 = (int *)(a2 + v9 + *(unsigned int *)(a2 + v9));
      v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 5u && (v12 = v11[2]) != 0)
        v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
      else
        v13 = 0;
      v52 = CSCppStringCache::intern(this, v13 + 4);
      v14 = (unsigned __int16 *)(a2 - *(int *)a2);
      v15 = *v14;
      if (v15 < 0xD)
      {
        v16 = 0;
      }
      else
      {
        v16 = (int *)v14[6];
        if (v14[6])
          v16 = (int *)((char *)v16 + a2 + *(unsigned int *)((char *)v16 + a2));
      }
      v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 9u && (v18 = v17[4]) != 0)
        v19 = *(int *)((char *)v16 + v18);
      else
        v19 = 0;
      LODWORD(v53) = v19;
      if (v15 < 0xD)
      {
        v20 = 0;
      }
      else
      {
        v20 = (int *)v14[6];
        if (v20)
          v20 = (int *)((char *)v20 + a2 + *(unsigned int *)((char *)v20 + a2));
      }
      v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xBu && (v22 = v21[5]) != 0)
        v23 = *(int *)((char *)v20 + v22);
      else
        v23 = 0;
      HIDWORD(v53) = v23;
    }
  }
  v24 = *(FlatbufferSymbolOwnerData **)(a1 + 8);
  v25 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
  v26 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v24, v25);
  if (v27)
  {
    v28 = (const void *)v26;
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (v29 = (unsigned __int16 *)((char *)v54 - *v54), *v29 < 9u)
      || (v30 = v29[4]) == 0)
    {
      v31 = 0;
    }
    else
    {
      v31 = (char *)v54 + v30 + *(unsigned int *)((char *)v54 + v30) + 4;
    }
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (v32 = (unsigned __int16 *)((char *)v54 - *v54), *v32 < 0xBu)
      || (v33 = v32[5]) == 0)
    {
      v34 = 0;
    }
    else
    {
      v34 = (char *)v54 + v33 + *(unsigned int *)((char *)v54 + v33) + 4;
    }
    v35 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(&v54);
    FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    v37 = v36;
    v38 = intern_name_or_default(v34, v28, this);
    v39 = intern_name_or_default(v31, v28, this);
    v40 = (unsigned __int16 *)((char *)v54 - *v54);
    if (*v40 < 0xDu)
    {
      v42 = 0;
    }
    else
    {
      v41 = v40[6] == 0;
      v42 = &v52;
      if (v41)
        v42 = 0;
    }
    *(_DWORD *)buf = (_DWORD)v28;
    *(_DWORD *)v57 = v37;
    *(_QWORD *)&v57[4] = 0;
    v58 = 0;
    v59 = v38;
    v60 = v39;
    v63 = 0;
    v61 = 0u;
    memset(v62, 0, 25);
    if (v42)
    {
      v61 = *(_OWORD *)v42;
      v46 = -2143288320;
    }
    else
    {
      v46 = 4195328;
    }
    HIDWORD(v58) = v35 & 0xFF3BFBFF | v46;
    v47 = *(_QWORD *)(a1 + 8);
    v48 = **(_QWORD **)(a1 + 16) | 2;
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 0x40000000;
    v51[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke;
    v51[3] = &__block_descriptor_tmp_265;
    v51[4] = *(_QWORD *)a1;
    v51[5] = buf;
    v51[6] = this;
    FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v47, v48, a2 | 1, (uint64_t)v51);
    v49 = a3[1];
    if (v49 >= a3[2])
    {
      v50 = std::vector<TRawSymbol<Pointer32>>::__push_back_slow_path<TRawSymbol<Pointer32>>(a3, (uint64_t)buf);
    }
    else
    {
      *(_QWORD *)(v49 + 88) = 0;
      *(_QWORD *)(v49 + 8) = 0;
      *(_QWORD *)(v49 + 16) = 0;
      *(_QWORD *)v49 = 0;
      *(_OWORD *)(v49 + 40) = 0u;
      *(_OWORD *)(v49 + 56) = 0u;
      *(_OWORD *)(v49 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v49, (uint64_t)buf);
      v50 = v49 + 96;
    }
    a3[1] = v50;
    v55 = (void **)v62;
    std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v55);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v43 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v57 = v43;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to relocate address %#llx in flatbuffer SOD", buf, 0xCu);
    }
    v44 = (FILE *)*MEMORY[0x1E0C80C10];
    v45 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    fprintf(v44, "Failed to relocate address %#llx in flatbuffer SOD", v45);
  }
}

void sub_1B415138C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a20 = (void **)&a28;
  std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer3212LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = a1[4];
  v2 = a1[5];
  v4 = a1[6];
  v7 = a2;
  v5 = *(_QWORD *)(v3 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v2 + 56, v4);
}

_QWORD *std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B4151560(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL are_symbols_aliases<Pointer32>(_DWORD *a1, _DWORD *a2)
{
  const char *v5;
  const char *v6;

  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  v5 = (const char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a1);
  v6 = (const char *)TRawSymbol<Pointer32>::_resolve_mangled_name<TRawSymbol<Pointer32>::PersistentMangledName>((uint64_t)a2);
  return strcmp(v5, v6) != 0;
}

void ***std::back_insert_iterator<std::vector<CSUserSuppliedSymbolData>>::operator=[abi:ne180100](void ***a1, __int128 *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*v4) >> 4);
    v14 = v13 + 1;
    if (v13 + 1 > 0x555555555555555)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)*v4) >> 4);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x2AAAAAAAAAAAAAALL)
      v16 = 0x555555555555555;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSUserSuppliedSymbolData>>(v7, v16);
    else
      v17 = 0;
    v18 = &v17[48 * v13];
    v19 = &v17[48 * v16];
    v20 = *a2;
    v21 = a2[2];
    *((_OWORD *)v18 + 1) = a2[1];
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)v18 = v20;
    v12 = v18 + 48;
    v23 = (char *)*v4;
    v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        v24 = *((_OWORD *)v22 - 3);
        v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v18 - 1) = v25;
        *((_OWORD *)v18 - 3) = v24;
        v18 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      v22 = (char *)*v4;
    }
    *v4 = v18;
    v4[1] = v12;
    v4[2] = v19;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v10 = *a2;
    v11 = a2[2];
    v5[1] = a2[1];
    v5[2] = v11;
    *v5 = v10;
    v12 = v5 + 3;
  }
  v4[1] = v12;
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer32>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x155555555555555)
    v1 = 0x155555555555555;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(96 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17[2];
  unint64_t v18;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (*(a2 - 24) < *a1)
        swap(a1, (int *)a2 - 24);
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((unsigned int *)a1, a2);
    }
    else
    {
      v12 = a4 >> 1;
      v13 = &a1[24 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        v17[0] = a5;
        v17[1] = (uint64_t)&v18;
        v18 = 0;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((unsigned int *)a1, (unsigned int *)&a1[24 * (a4 >> 1)], a3, a4 >> 1, a5);
        v18 = a4 >> 1;
        v15 = a4 - v12;
        v16 = (_DWORD *)(a5 + 96 * v12);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((unsigned int *)&a1[24 * (a4 >> 1)], a2, a3, v15, (uint64_t)v16);
        v18 = a4;
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a5, v16, v16, (_DWORD *)(a5 + 96 * a4), (uint64_t)a1);
        std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v17, 0);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a1, &a1[24 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v13, a2, a3, v14, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((uint64_t)a1, v13, (char *)a2, a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_1B4151924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(unsigned int *a1, unsigned int *a2)
{
  void **v2;
  void **v3;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD v13[5];
  __int128 v14;
  _BYTE v15[32];
  uint64_t v16;
  void **v17[11];

  if (a1 != a2)
  {
    v17[9] = v2;
    v17[10] = v3;
    v6 = a1 + 24;
    if (a1 + 24 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = *v8;
        v8 = v6;
        if (*v6 < v9)
        {
          v16 = 0;
          memset(v13, 0, 24);
          v14 = 0u;
          memset(v15, 0, 25);
          TRawSymbol<Pointer32>::operator=((uint64_t)v13, (uint64_t)v6);
          v10 = v7;
          while (1)
          {
            TRawSymbol<Pointer32>::operator=((uint64_t)a1 + v10 + 96, (uint64_t)a1 + v10);
            if (!v10)
              break;
            v11 = *(unsigned int *)((char *)a1 + v10 - 96);
            v10 -= 96;
            if (LODWORD(v13[0]) >= v11)
            {
              v12 = (uint64_t)a1 + v10 + 96;
              goto LABEL_10;
            }
          }
          v12 = (uint64_t)a1;
LABEL_10:
          TRawSymbol<Pointer32>::operator=(v12, (uint64_t)v13);
          v17[0] = (void **)v15;
          std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](v17);
        }
        v6 = v8 + 24;
        v7 += 96;
      }
      while (v8 + 24 != a2);
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(unsigned int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[2];
  uint64_t v17;

  if (a4)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v16[1] = (uint64_t)&v17;
      v17 = 0;
      v10 = *(a2 - 24);
      v9 = a2 - 24;
      v11 = *a1;
      *(_QWORD *)(a5 + 88) = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)a5 = 0;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 65) = 0u;
      v12 = v10 >= v11;
      if (v10 >= v11)
        v13 = (uint64_t)a1;
      else
        v13 = (uint64_t)(a2 - 24);
      if (v12)
        v8 = v9;
      TRawSymbol<Pointer32>::operator=(a5, v13);
      ++v17;
      *(_QWORD *)(a5 + 96) = 0;
      v14 = a5 + 96;
      *(_QWORD *)(v14 + 88) = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      *(_OWORD *)(v14 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v14, (uint64_t)v8);
      v16[0] = 0;
      std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v16, 0);
    }
    else if (a4 == 1)
    {
      *(_QWORD *)(a5 + 88) = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)a5 = 0;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a1);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a1, &a1[24 * (a4 >> 1)], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(&v8[24 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 96 * (a4 >> 1), a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v8, &v8[24 * (a4 >> 1)], &v8[24 * (a4 >> 1)], a2, a5);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>((uint64_t)a1, a2, a5);
    }
  }
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v9;
  uint64_t v10;

  if ((_DWORD *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a3);
      a3 += 24;
      a5 += 96;
    }
  }
  else
  {
    v9 = (_DWORD *)result;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)v9);
        v9 += 24;
      }
      else
      {
        result = TRawSymbol<Pointer32>::operator=(a5, (uint64_t)a3);
        a3 += 24;
      }
      a5 += 96;
      if (v9 == a2)
        goto LABEL_10;
    }
    if (v9 != a2)
    {
      v10 = 0;
      do
      {
        result = TRawSymbol<Pointer32>::operator=(a5 + v10 * 4, (uint64_t)&v9[v10]);
        v10 += 24;
      }
      while (&v9[v10] != a2);
    }
  }
  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t a1, int *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  int *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  char *v36;
  int *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double result;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  if (a6)
  {
    v8 = a6;
    do
    {
      if (v8 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a1, a2, a3, a4, a5, v8, a7);
        return result;
      }
      if (!a5)
        return result;
      v11 = 0;
      v12 = -a5;
      while (*a2 >= *(_DWORD *)&v11[a1])
      {
        v11 += 96;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v14 = -v12;
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          *(_QWORD *)&result = swap((int *)&v11[a1], a2).n128_u64[0];
          return result;
        }
        if (v12 > 0)
          v14 = 1 - v12;
        v24 = v14 >> 1;
        v18 = (int *)&v11[96 * (v14 >> 1) + a1];
        v17 = a2;
        if (a2 != (int *)a3)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (char *)a2) >> 5);
          v17 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v17[24 * (v25 >> 1)];
            v29 = *v27;
            v28 = v27 + 24;
            v25 += ~(v25 >> 1);
            if (v29 < *v18)
              v17 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)a2) >> 5);
      }
      else
      {
        if (v8 >= 0)
          v15 = v8;
        else
          v15 = v8 + 1;
        v16 = v15 >> 1;
        v17 = &a2[24 * (v15 >> 1)];
        v18 = a2;
        if ((char *)a2 - a1 != v11)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - a1 - v11) >> 5);
          v18 = (int *)&v11[a1];
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[24 * (v19 >> 1)];
            v23 = *v21;
            v22 = v21 + 24;
            v19 += ~(v19 >> 1);
            if (*v17 < v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - a1 - v11) >> 5);
      }
      v52 = (uint64_t)&v11[a1];
      if (v18 == a2)
      {
        v34 = v17;
      }
      else if (v17 == a2)
      {
        v34 = v18;
      }
      else
      {
        v50 = a7;
        v51 = a3;
        v30 = a4;
        v31 = a8;
        v32 = v24;
        v49 = v16;
        v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v18, a2, v17);
        v16 = v49;
        a7 = v50;
        v24 = v32;
        a3 = v51;
        a8 = v31;
        a4 = v30;
        v34 = v33;
      }
      a5 = -v24 - v12;
      v35 = v8 - v16;
      if (v24 + v16 >= v8 - (v24 + v16) - v12)
      {
        v43 = v17;
        v44 = a4;
        v45 = v24;
        v46 = v16;
        v47 = a7;
        v48 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v34, v43, a3);
        a8 = v48;
        a4 = v44;
        a7 = v47;
        a2 = v18;
        v35 = v46;
        a5 = v45;
        a3 = (char *)v34;
        a1 = v52;
      }
      else
      {
        v36 = &v11[a1];
        v37 = v18;
        v38 = a3;
        v39 = a4;
        v40 = a7;
        v41 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(v36, v37, v34);
        a3 = v38;
        a8 = v41;
        a4 = v39;
        a7 = v40;
        a1 = (uint64_t)v34;
        a2 = v17;
      }
      v8 = v35;
    }
    while (v35);
  }
  return result;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  _QWORD v17[9];

  if ((unsigned int *)a1 != a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    v16[0] = a3;
    v16[1] = (uint64_t)v17;
    v17[0] = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 65) = 0u;
    TRawSymbol<Pointer32>::operator=(a3, a1);
    ++v17[0];
    v8 = (unsigned int *)(a1 + 96);
    if (v8 != a2)
    {
      v9 = 0;
      v10 = a3;
      v11 = a3;
      do
      {
        v12 = *v8;
        *(_QWORD *)(v11 + 96) = 0;
        v11 += 96;
        v13 = *(_DWORD *)v10;
        *(_QWORD *)(v10 + 184) = 0;
        *(_QWORD *)(v10 + 104) = 0;
        *(_QWORD *)(v10 + 112) = 0;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 161) = 0u;
        if (v12 >= v13)
        {
          TRawSymbol<Pointer32>::operator=(v11, (uint64_t)v8);
          ++v17[0];
        }
        else
        {
          TRawSymbol<Pointer32>::operator=(v11, v10);
          ++v17[0];
          v14 = a3;
          if (v10 != a3)
          {
            v15 = v9;
            while (1)
            {
              v14 = a3 + v15;
              if (*v8 >= *(_DWORD *)(a3 + v15 - 96))
                break;
              TRawSymbol<Pointer32>::operator=(v14, a3 + v15 - 96);
              v15 -= 96;
              if (!v15)
              {
                v14 = a3;
                break;
              }
            }
          }
          TRawSymbol<Pointer32>::operator=(v14, (uint64_t)v8);
        }
        v8 += 24;
        v9 += 96;
        v10 = v11;
      }
      while (v8 != a2);
    }
    v16[0] = 0;
    std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v16, 0);
  }
}

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;

  v5 = a5;
  v14[0] = a5;
  v14[1] = (uint64_t)&v15;
  v15 = 0;
  if (a1 == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)v5 = 0;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 65) = 0u;
      TRawSymbol<Pointer32>::operator=(v5, (uint64_t)a3);
      a3 += 24;
      v5 += 96;
      ++v15;
    }
  }
  else
  {
    v9 = a1;
    while (a3 != a4)
    {
      v10 = *a3;
      v11 = *v9;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)v5 = 0;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 65) = 0u;
      if (v10 >= v11)
      {
        TRawSymbol<Pointer32>::operator=(v5, (uint64_t)v9);
        v9 += 24;
      }
      else
      {
        TRawSymbol<Pointer32>::operator=(v5, (uint64_t)a3);
        a3 += 24;
      }
      ++v15;
      v5 += 96;
      if (v9 == a2)
        goto LABEL_10;
    }
    if (v9 != a2)
    {
      v12 = 0;
      do
      {
        v13 = v5 + v12 * 4;
        *(_QWORD *)(v13 + 88) = 0;
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)v13 = 0;
        *(_OWORD *)(v13 + 40) = 0u;
        *(_OWORD *)(v13 + 56) = 0u;
        *(_OWORD *)(v13 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v5 + v12 * 4, (uint64_t)&v9[v12]);
        ++v15;
        v12 += 24;
      }
      while (&v9[v12] != a2);
    }
  }
  v14[0] = 0;
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v14, 0);
}

void std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  void **v5;
  void **v6;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      v4 = 0;
      v5 = (void **)(v2 + 56);
      do
      {
        v6 = v5;
        std::vector<TRawSymbol<Pointer32>>::__destroy_vector::operator()[abi:ne180100](&v6);
        ++v4;
        v5 += 12;
      }
      while (v4 < *v3);
    }
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;

  v14[0] = a7;
  v14[1] = (uint64_t)&v15;
  v15 = 0;
  v11 = a7;
  if (a5 <= a6)
  {
    if ((_DWORD *)a1 != a2)
    {
      v11 = a7;
      v13 = a1;
      do
      {
        *(_QWORD *)(v11 + 88) = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = 0;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v11, v13);
        ++v15;
        v13 += 96;
        v11 += 96;
      }
      while ((_DWORD *)v13 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>(a7, v11, a2, a3, a1);
  }
  else
  {
    if (a2 != a3)
    {
      v11 = a7;
      v12 = (uint64_t)a2;
      do
      {
        *(_QWORD *)(v11 + 88) = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = 0;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 65) = 0u;
        TRawSymbol<Pointer32>::operator=(v11, v12);
        ++v15;
        v12 += 96;
        v11 += 96;
      }
      while ((_DWORD *)v12 != a3);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>>(v11, a7, (uint64_t)a2, a1, (uint64_t)a3);
  }
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100](v14, 0);
}

void sub_1B415245C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<TRawSymbol<Pointer32>,std::__destruct_n &>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>,std::__wrap_iter<TRawSymbol<Pointer32> *>>(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _DWORD *v9;
  uint64_t v10;

  if (result != a2)
  {
    v5 = a5;
    v9 = (_DWORD *)result;
    v10 = a5;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        result = TRawSymbol<Pointer32>::operator=(v10, (uint64_t)v9);
        v9 += 24;
      }
      else
      {
        result = TRawSymbol<Pointer32>::operator=(v10, (uint64_t)a3);
        a3 += 24;
      }
      v10 += 96;
      v5 += 96;
      if (v9 == (_DWORD *)a2)
        return result;
    }
    return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,0>((uint64_t)v9, a2, v5);
  }
  return result;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer32> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer32> *>>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v8 = result;
    v9 = a5 - 96;
    while (a3 != a4)
    {
      v10 = *(_DWORD *)(v8 - 96);
      v11 = *(_DWORD *)(a3 - 96);
      if (v10 >= v11)
        v12 = v8 - 96;
      else
        v12 = a3 - 96;
      if (v10 >= v11)
        v8 -= 96;
      else
        a3 -= 96;
      result = TRawSymbol<Pointer32>::operator=(v9, v12);
      v9 -= 96;
      if (v8 == a2)
        return result;
    }
    v13 = 0;
    do
    {
      v14 = v9 + v13;
      v13 -= 96;
      result = TRawSymbol<Pointer32>::operator=(v14, v8 + v13);
    }
    while (v8 + v13 != a2);
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *,std::__wrap_iter<TRawSymbol<Pointer32> *>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = a1;
  if (a1 != a2)
  {
    v6 = a3;
    do
    {
      TRawSymbol<Pointer32>::operator=(v6, v4);
      v4 += 96;
      v6 += 96;
      v3 += 96;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

int *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer32> *>>(int *a1, int *a2, int *a3)
{
  int *v4;
  int *v6;
  int *i;
  int *v8;
  int *v9;

  v4 = a2;
  swap(a1, a2);
  v6 = a1 + 24;
  for (i = v4 + 24; i != a3; i += 24)
  {
    if (v6 == v4)
      v4 = i;
    swap(v6, i);
    v6 += 24;
  }
  if (v6 != v4)
  {
    v8 = v6;
    v9 = v4;
    do
    {
      while (1)
      {
        swap(v8, v9);
        v8 += 24;
        v9 += 24;
        if (v9 == a3)
          break;
        if (v8 == v4)
          v4 = v9;
      }
      v9 = v4;
    }
    while (v8 != v4);
  }
  return v6;
}

_QWORD *std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::__emplace_unique_key_args<TRawSymbol<Pointer32> *,TRawSymbol<Pointer32> *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4152920(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<TRawSymbol<Pointer32> *,std::hash<TRawSymbol<Pointer32> *>,std::equal_to<TRawSymbol<Pointer32> *>,std::allocator<TRawSymbol<Pointer32> *>>::find<TRawSymbol<Pointer32> *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

__int128 *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__wrap_iter<TRawSourceInfo<Pointer32> *>,std::__equal_to &>(__int128 *a1, __int128 *a2)
{
  __int128 *result;
  __int128 *v4;
  int v5;
  int v6;
  __int128 *i;
  __int128 v10;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 - 2;
    do
    {
      if (v4 + 4 == a2)
        return a2;
      v5 = *((_DWORD *)v4 + 8);
      v6 = *((_DWORD *)v4 + 9);
      v4 += 2;
    }
    while (v5 != *((_DWORD *)v4 + 8) || v6 != *((_DWORD *)v4 + 9));
    for (i = v4 + 4; i != a2; i += 2)
    {
      if (*(_DWORD *)v4 != *(_DWORD *)i || *((_DWORD *)v4 + 1) != *((_DWORD *)i + 1))
      {
        v10 = *i;
        *(__int128 *)((char *)v4 + 44) = *(__int128 *)((char *)i + 12);
        v4[2] = v10;
        v4 += 2;
      }
    }
    return v4 + 2;
  }
  return result;
}

_QWORD *std::__hash_table<TRawSourceInfo<Pointer32> *,std::hash<TRawSourceInfo<Pointer32> *>,std::equal_to<TRawSourceInfo<Pointer32> *>,std::allocator<TRawSourceInfo<Pointer32> *>>::__emplace_unique_key_args<TRawSourceInfo<Pointer32> *,TRawSourceInfo<Pointer32> *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4152CD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD v14[7];
  void *__p;
  void *v16;
  uint64_t v17;
  void **v18[4];
  __int128 v19[4];
  uint64_t v20;
  _QWORD v21[7];
  void *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = a3;
  v28 = a4;
  v26 = 0;
  v30 = 0;
  *(_QWORD *)&v19[0] = v29;
  std::function<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>(v29, v19);
  v24 = a3 & 0xFFFFFFFFFFFFFFF8;
  v25 = &v27;
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppSegmentRange>((a3 & 0xFFFFFFFFFFFFFFF8) + 32, a1 + 32, 0, &v22);
  v9 = a2 + 96;
  v21[0] = &v24;
  v21[1] = &v25;
  v21[2] = &v26;
  v21[3] = a2 + 96;
  v21[4] = v29;
  v21[5] = &v22;
  v21[6] = &v27;
  _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator()((uint64_t)v21, (uint64_t)v19);
  if (v19[0] == 0)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 104) = 0;
  }
  else
  {
    v18[0] = 0;
    v18[1] = (void **)v18;
    v18[2] = (void **)0x2000000000;
    v18[3] = (void **)(a2 + 208);
    v10 = v27;
    v11 = v28;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke;
    v14[3] = &unk_1E6778C80;
    v14[4] = v18;
    v14[5] = v24;
    v14[6] = v9;
    __p = 0;
    v16 = 0;
    v17 = 0;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(&__p, v22, (uint64_t)v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (_BYTE *)v22) >> 3));
    CSSymbolForeachSourceInfo(v10, v11, (uint64_t)v14);
    *(_QWORD *)(a5 + 96) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(a5, (uint64_t)v19);
    *(_BYTE *)(a5 + 104) = 1;
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v18, 8);
  }
  v18[0] = (void **)&v20;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v18);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  result = v30;
  if (v30 == v29)
  {
    v13 = 4;
    result = v29;
  }
  else
  {
    if (!v30)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_1B4152F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  _QWORD *v35;
  uint64_t v36;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a20, 8);
  a20 = &a32;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  v34 = *(void **)(v32 - 152);
  if (v34)
  {
    *(_QWORD *)(v32 - 144) = v34;
    operator delete(v34);
  }
  v35 = *(_QWORD **)(v32 - 64);
  if (v35 == (_QWORD *)(v32 - 88))
  {
    v36 = 4;
    v35 = (_QWORD *)(v32 - 88);
  }
  else
  {
    if (!v35)
      goto LABEL_10;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_10:
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = &off_1E6778CC0;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<void ()(TRawSymbol<Pointer64> &,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

_QWORD *_copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  FlatbufferSymbolOwnerData *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  const void *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  TMMapSymbolOwnerData *v19;
  unsigned int *v20;
  unsigned int v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  const void *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint8_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  FILE *v57;
  uint64_t v58;
  int v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD v76[4];
  _BYTE v77[24];
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  CSCppSymbolOwner **v82;
  _QWORD v83[4];
  _BYTE v84[24];
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint8_t buf[8];
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if (((_DWORD)result - 1) < 2)
  {
    v15 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL;
    v16 = *(char **)(v15 + 48);
    if (v16)
    {
      v17 = *(_QWORD *)(v15 + 56);
      v18 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 24), v16);
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    *(_QWORD *)buf = v18;
    v89 = v17;
    v27 = atomic_load((unsigned int *)(v15 + 28));
    if ((v27 & 0x1C000) != 0)
      v28 = (char *)TRawSymbol<Pointer64>::_resolve_name(v15, 0, 0);
    else
      v28 = 0;
    v29 = atomic_load((unsigned int *)(v15 + 28));
    if ((v29 & 0x1C000) != 0)
      v30 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(v15);
    else
      v30 = 0;
    v31 = atomic_load((unsigned int *)(v15 + 28));
    v32 = *(const void **)v15;
    v33 = *(_QWORD *)(v15 + 8);
    v34 = intern_name_or_default(v28, *(const void **)v15, *(CSCppStringCache **)(a1 + 24));
    v35 = intern_name_or_default(v30, *(const void **)v15, *(CSCppStringCache **)(a1 + 24));
    v36 = atomic_load((unsigned int *)(v15 + 28));
    if ((v36 & 0x80000000) != 0)
    {
      v37 = buf;
      if (!*(_QWORD *)(v15 + 48))
        v37 = 0;
    }
    else
    {
      v37 = 0;
    }
    *(_QWORD *)a2 = v32;
    *(_QWORD *)(a2 + 8) = v33;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = v34;
    *(_QWORD *)(a2 + 40) = v35;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 73) = 0u;
    if (v37)
    {
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v37;
      v38 = -2143157248;
    }
    else
    {
      v38 = 4326400;
    }
    *(_DWORD *)(a2 + 28) = v31 & 0xFF39FBFF | v38;
    v39 = *(_QWORD *)(v15 + 64);
    v40 = *(_QWORD *)(v15 + 72);
    if (v39 != v40)
    {
      do
      {
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
        if (!v41)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v41 + 48))(v41, v39, a2 + 64, *(_QWORD *)(a1 + 24));
        v39 += 104;
      }
      while (v39 != v40);
      v32 = *(const void **)a2;
    }
    v42 = slide_for_remote_address<Pointer64,unsigned long long>(*(_QWORD **)(a1 + 40), (unint64_t)v32);
    return slideSymbolsByOffset<Pointer64>((_QWORD *)a2, v42);
  }
  if ((_DWORD)result != 4)
  {
    if ((_DWORD)result == 5)
    {
      v6 = (FlatbufferSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
      v90 = 0;
      *(_QWORD *)&v81 = buf;
      *((_QWORD *)&v81 + 1) = v6;
      v82 = *(CSCppSymbolOwner ***)a1;
      std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>(buf, (uint64_t)&v81);
      v75 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL;
      v7 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
      v8 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v6, v7);
      v10 = v9;
      if (!v9)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v56 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
          LODWORD(v81) = 134217984;
          *(_QWORD *)((char *)&v81 + 4) = v56;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to relocate address %#llx in flatbuffer SOD", (uint8_t *)&v81, 0xCu);
        }
        v57 = (FILE *)*MEMORY[0x1E0C80C10];
        v58 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
        fprintf(v57, "Failed to relocate address %#llx in flatbuffer SOD", v58);
        goto LABEL_63;
      }
      v11 = (const void *)v8;
      if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v75)
        || (v12 = (unsigned __int16 *)(v75 - *(int *)v75), *v12 < 9u)
        || (v13 = v12[4]) == 0)
      {
        v14 = 0;
      }
      else
      {
        v14 = (char *)(v75 + v13 + *(unsigned int *)(v75 + v13) + 4);
      }
      if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::is_unnamed(&v75)
        || (v43 = (unsigned __int16 *)(v75 - *(int *)v75), *v43 < 0xBu)
        || (v44 = v43[5]) == 0)
      {
        v45 = 0;
      }
      else
      {
        v45 = (char *)(v75 + v44 + *(unsigned int *)(v75 + v44) + 4);
      }
      v46 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(&v75);
      FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v75);
      v48 = v47;
      v49 = intern_name_or_default(v45, v11, *(CSCppStringCache **)(a1 + 24));
      v50 = intern_name_or_default(v14, v11, *(CSCppStringCache **)(a1 + 24));
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v48;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = v49;
      *(_QWORD *)(a2 + 40) = v50;
      *(_QWORD *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 73) = 0u;
      *(_DWORD *)(a2 + 28) = v46 & 0xFF39FBFF | 0x420400;
      v51 = *(uint64_t **)(a1 + 48);
      v52 = *v51;
      v53 = v51[1];
      v76[0] = MEMORY[0x1E0C809B0];
      v76[1] = 1174405120;
      v76[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_271;
      v76[3] = &__block_descriptor_tmp_272;
      v54 = v77;
      v55 = (uint64_t)v90;
      if (v90)
      {
        if (v90 == buf)
        {
          v78 = v77;
          (*(void (**)(uint8_t *, _BYTE *))(*(_QWORD *)buf + 24))(buf, v77);
          goto LABEL_58;
        }
        v55 = (*(uint64_t (**)(void))(*(_QWORD *)v90 + 16))();
      }
      v78 = (_BYTE *)v55;
LABEL_58:
      v67 = *(_QWORD *)(a1 + 24);
      v79 = a2;
      v80 = v67;
      FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v6, v52, v53, (uint64_t)v76);
      v68 = slide_for_remote_address<Pointer64,unsigned long long>(*(_QWORD **)(a1 + 40), *(_QWORD *)a2);
      slideSymbolsByOffset<Pointer64>((_QWORD *)a2, v68);
      if (v78 == v77)
      {
        v69 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_63;
        v69 = 5;
        v54 = v78;
      }
      (*(void (**)(_QWORD *))(*v54 + 8 * v69))(v54);
LABEL_63:
      result = v90;
      if (v90 == buf)
      {
        v70 = 4;
        result = buf;
      }
      else
      {
        if (!v90)
          goto LABEL_68;
        v70 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v70))();
LABEL_68:
      if (v10)
        return result;
    }
LABEL_69:
    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 73) = 0u;
    *(_DWORD *)(a2 + 28) = 0;
    return result;
  }
  v19 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(**(CSCppSymbolOwner ***)a1);
  v20 = (unsigned int *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) & 0xFFFFFFFFFFFFFFFCLL);
  v75 = 0;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v19, *v20, &v75) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps", buf, 2u);
    }
    result = (_QWORD *)fwrite("Could not remap archive address to real in debug maps", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    goto LABEL_69;
  }
  v90 = 0;
  *(_QWORD *)&v81 = buf;
  *((_QWORD *)&v81 + 1) = v19;
  std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>(buf, &v81);
  v21 = v20[2];
  if ((v21 & 0x1C000) != 0)
  {
    v22 = (_DWORD *)*((_QWORD *)v19 + 11);
    v23 = (unint64_t)v22
        + 32 * v22[2]
        + 24 * v22[3]
        + (24 * v22[4])
        + (unint64_t)(4 * v22[4])
        + (36 * v22[5])
        + (20 * v22[6])
        + v22[22]
        + v22[20]
        + 96;
    v24 = v20[3];
    v25 = (char *)(v23 + v20[4]);
    v26 = (char *)(v23 + v24);
  }
  else
  {
    v25 = 0;
    v26 = 0;
    LODWORD(v24) = v20[3];
  }
  v59 = v24 != 0;
  if ((_DWORD)v24)
    v60 = v26;
  else
    v60 = v25;
  v61 = v75;
  v62 = v20[1];
  v63 = intern_name_or_default(v60, (const void *)v75, *(CSCppStringCache **)(a1 + 24));
  v64 = intern_name_or_default(v25, (const void *)v75, *(CSCppStringCache **)(a1 + 24));
  *(_QWORD *)a2 = v61;
  *(_QWORD *)(a2 + 8) = v62;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v63;
  *(_QWORD *)(a2 + 40) = v64;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 73) = 0u;
  *(_DWORD *)(a2 + 28) = (v21 & 0x7F39FBFF | (v59 << 17)) + 4195328;
  v83[0] = MEMORY[0x1E0C809B0];
  v83[1] = 1174405120;
  v83[2] = ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke;
  v83[3] = &__block_descriptor_tmp_269;
  v65 = v84;
  v66 = (uint64_t)v90;
  if (!v90)
    goto LABEL_56;
  if (v90 != buf)
  {
    v66 = (*(uint64_t (**)(void))(*(_QWORD *)v90 + 16))();
LABEL_56:
    v85 = (_BYTE *)v66;
    goto LABEL_72;
  }
  v85 = v84;
  (*(void (**)(uint8_t *, _BYTE *))(*(_QWORD *)buf + 24))(buf, v84);
LABEL_72:
  v71 = *(_QWORD *)(a1 + 24);
  v86 = a2;
  v87 = v71;
  TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol((uint64_t)v19, (uint64_t)v20, (uint64_t)v83);
  v72 = slide_for_remote_address<Pointer64,unsigned long long>(*(_QWORD **)(a1 + 40), *(_QWORD *)a2);
  slideSymbolsByOffset<Pointer64>((_QWORD *)a2, v72);
  if (v85 == v84)
  {
    v73 = 4;
    goto LABEL_76;
  }
  if (v85)
  {
    v73 = 5;
    v65 = v85;
LABEL_76:
    (*(void (**)(_QWORD *))(*v65 + 8 * v73))(v65);
  }
  result = v90;
  if (v90 == buf)
  {
    v74 = 4;
    result = buf;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v74))();
  }
  if (v90)
  {
    v74 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v74))();
  }
  return result;
}

void sub_1B4153848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;

  v34 = *(_QWORD **)(v32 - 104);
  if (v34 == (_QWORD *)(v32 - 128))
  {
    v35 = 4;
    v34 = (_QWORD *)(v32 - 128);
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___Z29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  TMMapSymbolOwnerData *v7;
  unsigned int *v8;
  _DWORD *v9;
  CSCppStringCache *v10;
  char *v11;
  unsigned __int8 *v12;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;

  v5 = CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if ((v6 - 1) < 2)
  {
    v21 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v22 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), *(char **)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 16));
    v13 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v23 = *(_QWORD *)v21;
    v24 = slide_for_remote_address<Pointer64,unsigned long long>((_QWORD *)(a1 + 56), *(_QWORD *)v21) + v23;
    v25 = *(_QWORD *)(v21 + 8);
    v26 = *(_DWORD *)(v21 + 24);
    v17 = *(_DWORD *)(v21 + 28) & 0x7FFFFFFF;
    v19 = (char *)v13[1];
    v27 = (char *)v13[2];
    if (v19 < v27)
    {
      *(_QWORD *)v19 = v24;
      *((_QWORD *)v19 + 1) = v25;
      *((_QWORD *)v19 + 2) = v22;
      *((_DWORD *)v19 + 6) = v26;
      goto LABEL_8;
    }
    v34 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)*v13) >> 3);
    v35 = v34 + 1;
    if (v34 + 1 <= 0x666666666666666)
    {
      v36 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - (_BYTE *)*v13) >> 3);
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x333333333333333)
        v37 = 0x666666666666666;
      else
        v37 = v35;
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v13 + 2), v37);
      v39 = &v38[40 * v34];
      v41 = &v38[40 * v40];
      *(_QWORD *)v39 = v24;
      *((_QWORD *)v39 + 1) = v25;
      *((_QWORD *)v39 + 2) = v22;
      *((_DWORD *)v39 + 6) = v26;
      *((_DWORD *)v39 + 7) = v17;
      *((_DWORD *)v39 + 8) = 0;
      v42 = v39 + 40;
      v44 = (char *)*v13;
      v43 = (char *)v13[1];
      if (v43 == *v13)
        goto LABEL_60;
      do
      {
        v45 = *(_OWORD *)(v43 - 40);
        v46 = *(_OWORD *)(v43 - 24);
        *((_DWORD *)v39 - 2) = *((_DWORD *)v43 - 2);
        *(_OWORD *)(v39 - 24) = v46;
        *(_OWORD *)(v39 - 40) = v45;
        v39 -= 40;
        v43 -= 40;
      }
      while (v43 != v44);
      goto LABEL_59;
    }
LABEL_64:
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  }
  if (v6 == 5)
  {
    v28 = (char *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = *(int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
    v30 = -v29;
    v31 = (unsigned __int16 *)((a3 & 0xFFFFFFFFFFFFFFFCLL) - v29);
    if (*v31 >= 5u && (v32 = v31[2]) != 0)
    {
      v33 = CSCppStringCache::intern(*(CSCppStringCache **)(a1 + 48), &v28[v32 + 4 + *(unsigned int *)&v28[v32]]);
      v30 = -(uint64_t)*(int *)v28;
    }
    else
    {
      v33 = "<Invalid file path>";
    }
    v13 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v47 = &v28[v30];
    if (*(unsigned __int16 *)v47 >= 0xDu && (v48 = *((unsigned __int16 *)v47 + 6)) != 0)
      v49 = *(_QWORD *)&v28[v48];
    else
      v49 = -1;
    v50 = slide_for_remote_address<Pointer64,unsigned long long>((_QWORD *)(a1 + 56), v49);
    v51 = (unsigned __int16 *)&v28[-*(int *)v28];
    v52 = *v51;
    if (v52 < 0xF)
    {
      v53 = 0;
      v63 = 0;
      v64 = 0;
      if (v52 < 9)
        goto LABEL_48;
    }
    else if (v51[7])
    {
      v53 = *(_DWORD *)&v28[v51[7]];
    }
    else
    {
      v53 = 0;
    }
    if (v51[4])
      v63 = *(_DWORD *)&v28[v51[4]];
    else
      v63 = 0;
    if (v52 >= 0xB && (v65 = v51[5]) != 0)
      v64 = *(_DWORD *)&v28[v65];
    else
      v64 = 0;
LABEL_48:
    v66 = v50 + v49;
    v67 = (char *)v13[2];
    v19 = (char *)v13[1];
    if (v19 < v67)
    {
      *(_QWORD *)v19 = v66;
      *((_QWORD *)v19 + 1) = v53;
      *((_QWORD *)v19 + 2) = v33;
      *((_DWORD *)v19 + 6) = v63;
      *((_DWORD *)v19 + 7) = v64;
      *((_DWORD *)v19 + 8) = 0;
      goto LABEL_50;
    }
    v68 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)*v13) >> 3);
    v69 = v68 + 1;
    if (v68 + 1 <= 0x666666666666666)
    {
      v70 = 0xCCCCCCCCCCCCCCCDLL * ((v67 - (_BYTE *)*v13) >> 3);
      if (2 * v70 > v69)
        v69 = 2 * v70;
      if (v70 >= 0x333333333333333)
        v71 = 0x666666666666666;
      else
        v71 = v69;
      v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v13 + 2), v71);
      v39 = &v72[40 * v68];
      v41 = &v72[40 * v73];
      *(_QWORD *)v39 = v66;
      *((_QWORD *)v39 + 1) = v53;
      *((_QWORD *)v39 + 2) = v33;
      *((_DWORD *)v39 + 6) = v63;
      *((_DWORD *)v39 + 7) = v64;
      *((_DWORD *)v39 + 8) = 0;
      v42 = v39 + 40;
      v74 = (char *)*v13;
      v43 = (char *)v13[1];
      if (v43 == *v13)
        goto LABEL_60;
      do
      {
        v75 = *(_OWORD *)(v43 - 40);
        v76 = *(_OWORD *)(v43 - 24);
        *((_DWORD *)v39 - 2) = *((_DWORD *)v43 - 2);
        *(_OWORD *)(v39 - 24) = v76;
        *(_OWORD *)(v39 - 40) = v75;
        v39 -= 40;
        v43 -= 40;
      }
      while (v43 != v74);
      goto LABEL_59;
    }
    goto LABEL_64;
  }
  if (v6 != 4)
    return;
  v7 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(*(CSCppSymbolOwner **)(a1 + 40));
  v8 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)*((_QWORD *)v7 + 11);
  v10 = *(CSCppStringCache **)(a1 + 48);
  v11 = (char *)CSCppMMapSourceInfo::path((CSCppMMapSourceInfo *)v8, (uint64_t)v9+ 32 * v9[2]+ 24 * v9[3]+ (24 * v9[4])+ (unint64_t)(4 * v9[4])+ (36 * v9[5])+ (20 * v9[6])+ v9[22]+ v9[20]+ 96);
  v12 = CSCppStringCache::intern(v10, v11);
  v77 = 0;
  TMMapSymbolOwnerData::convert_archive_address_to_real_address(v7, *v8, &v77);
  v13 = *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v14 = v77;
  v15 = slide_for_remote_address<Pointer64,unsigned long long>((_QWORD *)(a1 + 56), v77) + v14;
  v16 = v8[1];
  v18 = v8[3];
  v17 = v8[4];
  v19 = (char *)v13[1];
  v20 = (char *)v13[2];
  if (v19 >= v20)
  {
    v54 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)*v13) >> 3);
    v55 = v54 + 1;
    if (v54 + 1 <= 0x666666666666666)
    {
      v56 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)*v13) >> 3);
      if (2 * v56 > v55)
        v55 = 2 * v56;
      if (v56 >= 0x333333333333333)
        v57 = 0x666666666666666;
      else
        v57 = v55;
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)(v13 + 2), v57);
      v39 = &v58[40 * v54];
      v41 = &v58[40 * v59];
      *(_QWORD *)v39 = v15;
      *((_QWORD *)v39 + 1) = v16;
      *((_QWORD *)v39 + 2) = v12;
      *((_DWORD *)v39 + 6) = v18;
      *((_DWORD *)v39 + 7) = v17;
      *((_DWORD *)v39 + 8) = 0;
      v42 = v39 + 40;
      v60 = (char *)*v13;
      v43 = (char *)v13[1];
      if (v43 == *v13)
        goto LABEL_60;
      do
      {
        v61 = *(_OWORD *)(v43 - 40);
        v62 = *(_OWORD *)(v43 - 24);
        *((_DWORD *)v39 - 2) = *((_DWORD *)v43 - 2);
        *(_OWORD *)(v39 - 24) = v62;
        *(_OWORD *)(v39 - 40) = v61;
        v39 -= 40;
        v43 -= 40;
      }
      while (v43 != v60);
LABEL_59:
      v43 = (char *)*v13;
LABEL_60:
      *v13 = v39;
      v13[1] = v42;
      v13[2] = v41;
      if (v43)
        operator delete(v43);
      goto LABEL_62;
    }
    goto LABEL_64;
  }
  *(_QWORD *)v19 = v15;
  *((_QWORD *)v19 + 1) = v16;
  *((_QWORD *)v19 + 2) = v12;
  *((_DWORD *)v19 + 6) = v18;
LABEL_8:
  *((_DWORD *)v19 + 7) = v17;
  *((_DWORD *)v19 + 8) = 0;
LABEL_50:
  v42 = v19 + 40;
LABEL_62:
  v13[1] = v42;
}

uint64_t slide_for_remote_address<Pointer64,unsigned long long>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v2 = a1[1] - *a1;
  if (!v2)
    return 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  v4 = (_QWORD *)*a1;
  do
  {
    v5 = v3 >> 1;
    v6 = &v4[3 * (v3 >> 1)];
    v8 = *v6;
    v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (v8 > a2)
      v3 = v5;
    else
      v4 = v7;
  }
  while (v3);
  if (v4 != (_QWORD *)*a1 && (v9 = *(v4 - 3), v9 <= a2) && a2 + 1 <= *(v4 - 2) + v9)
    return *(v4 - 1);
  else
    return 0;
}

_QWORD *__copy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer64yENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
}

void __destroy_helper_block_e8_56c66_ZTSNSt3__16vectorI11TRangeValueI9Pointer64yENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6778CC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6778CC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *a4)
{
  _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}::operator()(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}>,void ()(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)>::target_type()
{
}

void _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(TRawSymbol&<Pointer64>,std::vector<TRawSymbol&> &,CSCppStringCache &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  char *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  const void *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v28[3];
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;
  void **v35;

  v7 = *(char **)(a2 + 48);
  if (v7)
  {
    *((_QWORD *)&v26 + 1) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)&v26 = CSCppStringCache::intern(this, v7);
  }
  else
  {
    v26 = 0uLL;
  }
  v8 = atomic_load((unsigned int *)(a2 + 28));
  if ((v8 & 0x1C000) != 0)
    v9 = (char *)TRawSymbol<Pointer64>::_resolve_name(a2, 0, 0);
  else
    v9 = 0;
  v10 = atomic_load((unsigned int *)(a2 + 28));
  if ((v10 & 0x1C000) != 0)
    v11 = (char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>(a2);
  else
    v11 = 0;
  v12 = atomic_load((unsigned int *)(a2 + 28));
  v13 = v12 & 0xFF39FBFF;
  v14 = v12 & 0xFF39FBFF | 0x420400;
  v16 = *(const void **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v17 = intern_name_or_default(v9, *(const void **)a2, this);
  v18 = intern_name_or_default(v11, *(const void **)a2, this);
  v19 = atomic_load((unsigned int *)(a2 + 28));
  v20 = *(_QWORD *)(a2 + 48);
  v28[0] = v16;
  v28[1] = v15;
  v28[2] = 0;
  v29 = 0;
  v30 = v17;
  v31 = v18;
  v34 = 0;
  v32 = 0u;
  memset(v33, 0, 25);
  if ((v19 & 0x80000000) != 0 && v20)
  {
    v32 = v26;
    v14 = v13 | 0x80420400;
  }
  HIDWORD(v29) = v14;
  v21 = *(_QWORD *)(a2 + 64);
  for (i = *(_QWORD *)(a2 + 72); v21 != i; v21 += 104)
  {
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (!v23)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t, _OWORD *, CSCppStringCache *))(*(_QWORD *)v23 + 48))(v23, v21, v33, this);
  }
  v24 = a3[1];
  if (v24 >= a3[2])
  {
    v25 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)v28);
  }
  else
  {
    *(_QWORD *)(v24 + 96) = 0;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(v24, (uint64_t)v28);
    v25 = v24 + 104;
  }
  a3[1] = v25;
  v35 = (void **)v33;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_1B4154214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 - 88) = &a21;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = &off_1E6778DA0;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a1[8];
  v2 = a1[9];
  v6 = a2;
  v4 = a1[7];
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v6, v3 + 64, v2);
}

uint64_t __copy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c127_ZTSNSt3__18functionIFvP22CSCppMMapInlinedSymbolRNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS6_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::function<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator=<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = &off_1E6778E40;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 16);
  v9 = v4;
  std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](v8, a1);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t ___ZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEv_block_invoke_271(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a1[8];
  v2 = a1[9];
  v6 = a2;
  v4 = a1[7];
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v6, v3 + 64, v2);
}

uint64_t __copy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer32>> &,CSCppStringCache &)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c139_ZTSNSt3__18functionIFvPKN17FlatbufferSymbols12InlineSymbolERNS_6vectorI10TRawSymbolI9Pointer64ENS_9allocatorIS8_EEEER16CSCppStringCacheEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6778DA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6778DA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(uint64_t a1, __int128 **a2, uint64_t *a3, CSCppStringCache *a4)
{
  std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}::operator()((_QWORD *)(a1 + 8), *a2, a3, a4);
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(CSCppMMapInlinedSymbol *,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}::operator()(_QWORD *a1, __int128 *a2, uint64_t *a3, CSCppStringCache *this)
{
  TMMapSymbolOwnerData *v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[7];
  uint8_t buf[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  __int128 v31;
  _BYTE v32[32];
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  void **v37;

  v8 = (TMMapSymbolOwnerData *)a1[1];
  v9 = (_DWORD *)*((_QWORD *)v8 + 11);
  v10 = (unint64_t)v9
      + 32 * v9[2]
      + 24 * v9[3]
      + (24 * v9[4])
      + (unint64_t)(4 * v9[4])
      + (36 * v9[5])
      + (20 * v9[6])
      + v9[22]
      + v9[20]
      + 96;
  if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0 && (v11 = *((unsigned int *)a2 + 6), v10 + v11))
  {
    v12 = CSCppStringCache::intern(this, (char *)(v10 + v11));
    if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0)
      v19 = *(_QWORD *)((char *)a2 + 28);
    else
      v19 = 0;
    *((_QWORD *)&v23 + 1) = v19;
    v8 = (TMMapSymbolOwnerData *)a1[1];
  }
  else
  {
    v12 = 0;
    *((_QWORD *)&v23 + 1) = 0;
  }
  v35 = *a2;
  v36 = *((_QWORD *)a2 + 2);
  v34 = 0;
  if ((TMMapSymbolOwnerData::convert_archive_address_to_real_address(v8, v35, &v34) & 1) != 0)
  {
    *(_QWORD *)&v23 = v12;
    v13 = DWORD2(v35);
    if ((DWORD2(v35) & 0x1C000) != 0)
      v14 = (char *)(v10 + v36);
    else
      v14 = 0;
    if ((DWORD2(v35) & 0x1C000) != 0)
      v15 = (char *)(v10 + HIDWORD(v35));
    else
      v15 = 0;
    if (HIDWORD(v35))
      v16 = v15;
    else
      v16 = v14;
    v17 = DWORD2(v35) & 0xFF39FBFF | ((HIDWORD(v35) != 0) << 17);
    *(_QWORD *)buf = v34;
    v26 = DWORD1(v35);
    v27 = 0;
    v28 = 0;
    v29 = intern_name_or_default(v16, (const void *)v34, this);
    v30 = intern_name_or_default(v14, (const void *)v34, this);
    v33 = 0;
    v31 = 0u;
    memset(v32, 0, 25);
    if (v13 < 0)
    {
      v31 = v23;
      v18 = -2143288320;
    }
    else
    {
      v18 = 4195328;
    }
    HIDWORD(v28) = v17 | v18;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 0x40000000;
    v24[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke;
    v24[3] = &__block_descriptor_tmp_274;
    v20 = a1[1];
    v24[4] = *a1;
    v24[5] = buf;
    v24[6] = this;
    TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v20, (uint64_t)&v35, (uint64_t)v24);
    v21 = a3[1];
    if (v21 >= a3[2])
    {
      v22 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)buf);
    }
    else
    {
      *(_QWORD *)(v21 + 96) = 0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v21, (uint64_t)buf);
      v22 = v21 + 104;
    }
    a3[1] = v22;
    v37 = (void **)v32;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v37);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not remap archive address to real in debug maps inline enumeration", buf, 2u);
    }
    fwrite("Could not remap archive address to real in debug maps inline enumeration", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
}

void sub_1B415484C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1 + 64;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlP22CSCppMMapInlinedSymbolRNS4_6vectorIS6_IS1_ENS4_9allocatorISK_EEEER16CSCppStringCacheE_clESI_SO_SQ__block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = a1[4];
  v2 = a1[5];
  v4 = a1[6];
  v7 = a2;
  v5 = *(_QWORD *)(v3 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v2 + 64, v4);
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6778E40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6778E40;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, CSCppStringCache *a4)
{
  std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}::operator()(a1 + 8, *a2, a3, a4);
}

uint64_t std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1},std::allocator<std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}>,void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::target_type()
{
}

void std::optional<TRawSymbol<Pointer64>> _copy_symbol_and_source_infos<SizeAndEndianness<Pointer64,LittleEndian>,Pointer64>(CSCppSymbolOwner *,TRawSymbolOwnerData<Pointer64> &,_CSTypeRef)::{lambda(void)#1}::operator() const(void)::{lambda(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t *a3, CSCppStringCache *this)
{
  unsigned __int16 *v8;
  uint64_t v9;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  int *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  FlatbufferSymbolOwnerData *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  const void *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  char *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int16 *v40;
  BOOL v41;
  unsigned __int8 **v42;
  uint64_t v43;
  FILE *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[7];
  unsigned __int8 *v52;
  uint64_t v53;
  int *v54;
  void **v55;
  __int128 buf;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  __int128 v61;
  _BYTE v62[32];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v53 = 0;
  v54 = (int *)a2;
  v52 = 0;
  v8 = (unsigned __int16 *)(a2 - *(int *)a2);
  if (*v8 >= 0xDu)
  {
    v9 = v8[6];
    if (v9)
    {
      v10 = (int *)(a2 + v9 + *(unsigned int *)(a2 + v9));
      v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 5u && (v12 = v11[2]) != 0)
        v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
      else
        v13 = 0;
      v52 = CSCppStringCache::intern(this, v13 + 4);
      v14 = (unsigned __int16 *)(a2 - *(int *)a2);
      v15 = *v14;
      if (v15 < 0xD)
      {
        v16 = 0;
      }
      else
      {
        v16 = (int *)v14[6];
        if (v14[6])
          v16 = (int *)((char *)v16 + a2 + *(unsigned int *)((char *)v16 + a2));
      }
      v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 9u && (v18 = v17[4]) != 0)
        v19 = *(int *)((char *)v16 + v18);
      else
        v19 = 0;
      LODWORD(v53) = v19;
      if (v15 < 0xD)
      {
        v20 = 0;
      }
      else
      {
        v20 = (int *)v14[6];
        if (v20)
          v20 = (int *)((char *)v20 + a2 + *(unsigned int *)((char *)v20 + a2));
      }
      v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xBu && (v22 = v21[5]) != 0)
        v23 = *(int *)((char *)v20 + v22);
      else
        v23 = 0;
      HIDWORD(v53) = v23;
    }
  }
  v24 = *(FlatbufferSymbolOwnerData **)(a1 + 8);
  v25 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
  v26 = FlatbufferSymbolOwnerData::convertVMAddressToSlidAddress(v24, v25);
  if (v27)
  {
    v28 = (const void *)v26;
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (v29 = (unsigned __int16 *)((char *)v54 - *v54), *v29 < 9u)
      || (v30 = v29[4]) == 0)
    {
      v31 = 0;
    }
    else
    {
      v31 = (char *)v54 + v30 + *(unsigned int *)((char *)v54 + v30) + 4;
    }
    if (FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::is_unnamed(&v54)
      || (v32 = (unsigned __int16 *)((char *)v54 - *v54), *v32 < 0xBu)
      || (v33 = v32[5]) == 0)
    {
      v34 = 0;
    }
    else
    {
      v34 = (char *)v54 + v33 + *(unsigned int *)((char *)v54 + v33) + 4;
    }
    v35 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(&v54);
    FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    v37 = v36;
    v38 = intern_name_or_default(v34, v28, this);
    v39 = intern_name_or_default(v31, v28, this);
    v40 = (unsigned __int16 *)((char *)v54 - *v54);
    if (*v40 < 0xDu)
    {
      v42 = 0;
    }
    else
    {
      v41 = v40[6] == 0;
      v42 = &v52;
      if (v41)
        v42 = 0;
    }
    *(_QWORD *)&buf = v28;
    *((_QWORD *)&buf + 1) = v37;
    v57 = 0;
    v58 = 0;
    v59 = v38;
    v60 = v39;
    v63 = 0;
    v61 = 0u;
    memset(v62, 0, 25);
    if (v42)
    {
      v61 = *(_OWORD *)v42;
      v46 = -2143288320;
    }
    else
    {
      v46 = 4195328;
    }
    HIDWORD(v58) = v35 & 0xFF3BFBFF | v46;
    v47 = *(_QWORD *)(a1 + 8);
    v48 = **(_QWORD **)(a1 + 16) | 2;
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 0x40000000;
    v51[2] = ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke;
    v51[3] = &__block_descriptor_tmp_276;
    v51[4] = *(_QWORD *)a1;
    v51[5] = &buf;
    v51[6] = this;
    FlatbufferSymbolOwnerData::for_each_child_symbol_with_parent_symbol(v47, v48, a2 | 1, (uint64_t)v51);
    v49 = a3[1];
    if (v49 >= a3[2])
    {
      v50 = std::vector<TRawSymbol<Pointer64>>::__push_back_slow_path<TRawSymbol<Pointer64>>(a3, (uint64_t)&buf);
    }
    else
    {
      *(_QWORD *)(v49 + 96) = 0;
      *(_OWORD *)v49 = 0u;
      *(_OWORD *)(v49 + 16) = 0u;
      *(_OWORD *)(v49 + 48) = 0u;
      *(_OWORD *)(v49 + 64) = 0u;
      *(_OWORD *)(v49 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v49, (uint64_t)&buf);
      v50 = v49 + 104;
    }
    a3[1] = v50;
    v55 = (void **)v62;
    std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v55);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v43 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v43;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to relocate address %#llx in flatbuffer SOD", (uint8_t *)&buf, 0xCu);
    }
    v44 = (FILE *)*MEMORY[0x1E0C80C10];
    v45 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(&v54);
    fprintf(v44, "Failed to relocate address %#llx in flatbuffer SOD", v45);
  }
}

void sub_1B4154DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  a20 = (void **)&a29;
  std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t ___ZZZ29_copy_symbol_and_source_infosI17SizeAndEndiannessI9Pointer6412LittleEndianES1_ENSt3__18optionalI10TRawSymbolIT0_EEEP16CSCppSymbolOwnerR19TRawSymbolOwnerDataIS7_E10_CSTypeRefENKUlvE_clEvENKUlPKN17FlatbufferSymbols12InlineSymbolERNS4_6vectorIS6_IS1_ENS4_9allocatorISM_EEEER16CSCppStringCacheE_clESK_SQ_SS__block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = a1[4];
  v2 = a1[5];
  v4 = a1[6];
  v7 = a2;
  v5 = *(_QWORD *)(v3 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v2 + 64, v4);
}

_QWORD *std::__function::__value_func<void ()(FlatbufferSymbols::InlineSymbol const*,std::vector<TRawSymbol<Pointer64>> &,CSCppStringCache &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B4154F88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL are_symbols_aliases<Pointer64>(_QWORD *a1, _QWORD *a2)
{
  const char *v5;
  const char *v6;

  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  v5 = (const char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>((uint64_t)a1);
  v6 = (const char *)TRawSymbol<Pointer64>::_resolve_mangled_name<TRawSymbol<Pointer64>::PersistentMangledName>((uint64_t)a2);
  return strcmp(v5, v6) != 0;
}

void *std::get_temporary_buffer[abi:ne180100]<TRawSymbol<Pointer64>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x13B13B13B13B13BLL)
    v1 = 0x13B13B13B13B13BLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(104 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17[2];
  unint64_t v18;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (a2[-7].n128_u64[1] < a1->n128_u64[0])
        swap(a1, (__n128 *)((char *)a2 - 104));
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1->n128_u64, a2->n128_u64);
    }
    else
    {
      v12 = a4 >> 1;
      v13 = (__n128 *)((char *)a1 + 104 * (a4 >> 1));
      if ((uint64_t)a4 <= a6)
      {
        v17[0] = a5;
        v17[1] = (uint64_t)&v18;
        v18 = 0;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1->n128_u64, &a1->n128_u64[13 * (a4 >> 1)], a3, a4 >> 1, a5);
        v18 = a4 >> 1;
        v15 = a4 - v12;
        v16 = (_QWORD *)(a5 + 104 * v12);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(&a1->n128_u64[13 * (a4 >> 1)], a2->n128_u64, a3, v15, (uint64_t)v16);
        v18 = a4;
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a5, v16, v16, (_QWORD *)(a5 + 104 * a4), (uint64_t)a1);
        std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v17, 0);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1, (char *)a1 + 104 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v13, a2, a3, v14, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>((uint64_t)a1, v13, a2, a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_1B415522C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(unint64_t *a1, unint64_t *a2)
{
  void **v2;
  void **v3;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD v13[4];
  _BYTE v14[32];
  uint64_t v15;
  void **v16[11];

  if (a1 != a2)
  {
    v16[9] = v2;
    v16[10] = v3;
    v6 = a1 + 13;
    if (a1 + 13 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = *v8;
        v8 = v6;
        if (*v6 < v9)
        {
          v15 = 0;
          memset(v13, 0, 32);
          v13[3] = 0u;
          memset(v14, 0, 25);
          TRawSymbol<Pointer64>::operator=((uint64_t)v13, (uint64_t)v6);
          v10 = v7;
          while (1)
          {
            TRawSymbol<Pointer64>::operator=((uint64_t)a1 + v10 + 104, (uint64_t)a1 + v10);
            if (!v10)
              break;
            v11 = *(unint64_t *)((char *)a1 + v10 - 104);
            v10 -= 104;
            if (*(_QWORD *)&v13[0] >= v11)
            {
              v12 = (uint64_t)a1 + v10 + 104;
              goto LABEL_10;
            }
          }
          v12 = (uint64_t)a1;
LABEL_10:
          TRawSymbol<Pointer64>::operator=(v12, (uint64_t)v13);
          v16[0] = (void **)v14;
          std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        v6 = v8 + 13;
        v7 += 104;
      }
      while (v8 + 13 != a2);
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  if (a4)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v17[1] = (uint64_t)&v18;
      v18 = 0;
      v10 = a2 - 13;
      v9 = *(a2 - 13);
      v11 = *a1;
      *(_QWORD *)(a5 + 96) = 0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 73) = 0u;
      if (v9 >= v11)
        v12 = (uint64_t)a1;
      else
        v12 = (uint64_t)(a2 - 13);
      if (v9 >= v11)
        v8 = v10;
      TRawSymbol<Pointer64>::operator=(a5, v12);
      v13 = v18 + 1;
      *(_OWORD *)(a5 + 104) = 0u;
      v14 = a5 + 104;
      v18 = v13;
      *(_QWORD *)(v14 + 96) = 0;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v14, (uint64_t)v8);
      v17[0] = 0;
      std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v17, 0);
    }
    else if (a4 == 1)
    {
      *(_QWORD *)(a5 + 96) = 0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a1);
    }
    else if ((uint64_t)a4 > 8)
    {
      v16 = 13 * (a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1, &a1[v16], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(&v8[v16], a2, a3, a4 - (a4 >> 1), a5 + v16 * 8, a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v8, &v8[v16], &v8[v16], a2, a5);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>((uint64_t)a1, a2, a5);
    }
  }
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t result, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;

  if ((_QWORD *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a3);
      a3 += 13;
      a5 += 104;
    }
  }
  else
  {
    v9 = (_QWORD *)result;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)v9);
        v9 += 13;
      }
      else
      {
        result = TRawSymbol<Pointer64>::operator=(a5, (uint64_t)a3);
        a3 += 13;
      }
      a5 += 104;
      if (v9 == a2)
        goto LABEL_10;
    }
    if (v9 != a2)
    {
      v10 = 0;
      do
      {
        result = TRawSymbol<Pointer64>::operator=(a5 + v10 * 8, (uint64_t)&v9[v10]);
        v10 += 13;
      }
      while (&v9[v10] != a2);
    }
  }
  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  __n128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  __n128 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  __n128 *v34;
  uint64_t v35;
  char *v36;
  __n128 *v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double result;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 *v51;
  uint64_t v52;

  if (a6)
  {
    v8 = a6;
    do
    {
      if (v8 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a1, a2, a3, a4, a5, v8, a7);
        return result;
      }
      if (!a5)
        return result;
      v11 = 0;
      v12 = -a5;
      while (a2->n128_u64[0] >= *(unint64_t *)((char *)v11->n128_u64 + a1))
      {
        v11 = (__n128 *)((char *)v11 + 104);
        if (__CFADD__(v12++, 1))
          return result;
      }
      v14 = -v12;
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          *(_QWORD *)&result = swap((__n128 *)((char *)v11 + a1), a2).n128_u64[0];
          return result;
        }
        if (v12 > 0)
          v14 = 1 - v12;
        v24 = v14 >> 1;
        v18 = (__n128 *)((char *)v11 + 104 * (v14 >> 1) + a1);
        v17 = a2;
        if (a2 != a3)
        {
          v25 = 0x4EC4EC4EC4EC4EC5 * (((char *)a3 - (char *)a2) >> 3);
          v17 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v17->n128_u64[13 * (v25 >> 1)];
            v29 = *v27;
            v28 = (__n128 *)(v27 + 13);
            v25 += ~(v25 >> 1);
            if (v29 < v18->n128_u64[0])
              v17 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v16 = 0x4EC4EC4EC4EC4EC5 * (((char *)v17 - (char *)a2) >> 3);
      }
      else
      {
        if (v8 >= 0)
          v15 = v8;
        else
          v15 = v8 + 1;
        v16 = v15 >> 1;
        v17 = (__n128 *)((char *)a2 + 104 * (v15 >> 1));
        v18 = a2;
        if ((__n128 *)((char *)a2 - a1) != v11)
        {
          v19 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - a1 - (char *)v11) >> 3);
          v18 = (__n128 *)((char *)v11 + a1);
          do
          {
            v20 = v19 >> 1;
            v21 = &v18->n128_u64[13 * (v19 >> 1)];
            v23 = *v21;
            v22 = (__n128 *)(v21 + 13);
            v19 += ~(v19 >> 1);
            if (v17->n128_u64[0] < v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = 0x4EC4EC4EC4EC4EC5 * (((char *)v18 - a1 - (char *)v11) >> 3);
      }
      v52 = (uint64_t)v11 + a1;
      if (v18 == a2)
      {
        v34 = v17;
      }
      else if (v17 == a2)
      {
        v34 = v18;
      }
      else
      {
        v50 = a7;
        v51 = a3;
        v30 = a4;
        v31 = a8;
        v32 = v24;
        v49 = v16;
        v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v18, a2, v17);
        v16 = v49;
        a7 = v50;
        v24 = v32;
        a3 = v51;
        a8 = v31;
        a4 = v30;
        v34 = v33;
      }
      a5 = -v24 - v12;
      v35 = v8 - v16;
      if (v24 + v16 >= v8 - (v24 + v16) - v12)
      {
        v43 = v17;
        v44 = a4;
        v45 = v24;
        v46 = v16;
        v47 = a7;
        v48 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v34, v43, a3);
        a8 = v48;
        a4 = v44;
        a7 = v47;
        a2 = v18;
        v35 = v46;
        a5 = v45;
        a3 = v34;
        a1 = v52;
      }
      else
      {
        v36 = (char *)v11 + a1;
        v37 = v18;
        v38 = a3;
        v39 = a4;
        v40 = a7;
        v41 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(v36, v37, v34);
        a3 = v38;
        a8 = v41;
        a4 = v39;
        a7 = v40;
        a1 = (uint64_t)v34;
        a2 = v17;
      }
      v8 = v35;
    }
    while (v35);
  }
  return result;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  _QWORD v17[9];

  if ((unint64_t *)a1 != a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    v16[0] = a3;
    v16[1] = (uint64_t)v17;
    v17[0] = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 73) = 0u;
    TRawSymbol<Pointer64>::operator=(a3, a1);
    ++v17[0];
    v8 = (unint64_t *)(a1 + 104);
    if (v8 != a2)
    {
      v9 = 0;
      v10 = a3;
      v11 = a3;
      do
      {
        v12 = *v8;
        *(_OWORD *)(v11 + 104) = 0u;
        v11 += 104;
        v13 = *(_QWORD *)v10;
        *(_QWORD *)(v10 + 200) = 0;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 177) = 0u;
        if (v12 >= v13)
        {
          TRawSymbol<Pointer64>::operator=(v11, (uint64_t)v8);
          ++v17[0];
        }
        else
        {
          TRawSymbol<Pointer64>::operator=(v11, v10);
          ++v17[0];
          v14 = a3;
          if (v10 != a3)
          {
            v15 = v9;
            while (1)
            {
              v14 = a3 + v15;
              if (*v8 >= *(_QWORD *)(a3 + v15 - 104))
                break;
              TRawSymbol<Pointer64>::operator=(v14, a3 + v15 - 104);
              v15 -= 104;
              if (!v15)
              {
                v14 = a3;
                break;
              }
            }
          }
          TRawSymbol<Pointer64>::operator=(v14, (uint64_t)v8);
        }
        v8 += 13;
        v9 += 104;
        v10 = v11;
      }
      while (v8 != a2);
    }
    v16[0] = 0;
    std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v16, 0);
  }
}

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;

  v5 = a5;
  v14[0] = a5;
  v14[1] = (uint64_t)&v15;
  v15 = 0;
  if (a1 == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      *(_QWORD *)(v5 + 96) = 0;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 73) = 0u;
      TRawSymbol<Pointer64>::operator=(v5, (uint64_t)a3);
      a3 += 13;
      v5 += 104;
      ++v15;
    }
  }
  else
  {
    v9 = a1;
    while (a3 != a4)
    {
      v10 = *a3;
      v11 = *v9;
      *(_QWORD *)(v5 + 96) = 0;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 73) = 0u;
      if (v10 >= v11)
      {
        TRawSymbol<Pointer64>::operator=(v5, (uint64_t)v9);
        v9 += 13;
      }
      else
      {
        TRawSymbol<Pointer64>::operator=(v5, (uint64_t)a3);
        a3 += 13;
      }
      ++v15;
      v5 += 104;
      if (v9 == a2)
        goto LABEL_10;
    }
    if (v9 != a2)
    {
      v12 = 0;
      do
      {
        v13 = v5 + v12 * 8;
        *(_QWORD *)(v13 + 96) = 0;
        *(_OWORD *)v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v5 + v12 * 8, (uint64_t)&v9[v12]);
        ++v15;
        v12 += 13;
      }
      while (&v9[v12] != a2);
    }
  }
  v14[0] = 0;
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v14, 0);
}

void std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  void **v5;
  void **v6;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      v4 = 0;
      v5 = (void **)(v2 + 64);
      do
      {
        v6 = v5;
        std::vector<TRawSymbol<Pointer64>>::__destroy_vector::operator()[abi:ne180100](&v6);
        ++v4;
        v5 += 13;
      }
      while (v4 < *v3);
    }
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;

  v14[0] = a7;
  v14[1] = (uint64_t)&v15;
  v15 = 0;
  v11 = a7;
  if (a5 <= a6)
  {
    if ((_QWORD *)a1 != a2)
    {
      v11 = a7;
      v13 = a1;
      do
      {
        *(_QWORD *)(v11 + 96) = 0;
        *(_OWORD *)v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v11, v13);
        ++v15;
        v13 += 104;
        v11 += 104;
      }
      while ((_QWORD *)v13 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>(a7, v11, a2, a3, a1);
  }
  else
  {
    if (a2 != a3)
    {
      v11 = a7;
      v12 = (uint64_t)a2;
      do
      {
        *(_QWORD *)(v11 + 96) = 0;
        *(_OWORD *)v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 73) = 0u;
        TRawSymbol<Pointer64>::operator=(v11, v12);
        ++v15;
        v12 += 104;
        v11 += 104;
      }
      while ((_QWORD *)v12 != a3);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>>(v11, a7, (uint64_t)a2, a1, (uint64_t)a3);
  }
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100](v14, 0);
}

void sub_1B4155D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<TRawSymbol<Pointer64>,std::__destruct_n &>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>,std::__wrap_iter<TRawSymbol<Pointer64> *>>(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;

  if (result != a2)
  {
    v5 = a5;
    v9 = (_QWORD *)result;
    v10 = a5;
    while (a3 != a4)
    {
      if (*a3 >= *v9)
      {
        result = TRawSymbol<Pointer64>::operator=(v10, (uint64_t)v9);
        v9 += 13;
      }
      else
      {
        result = TRawSymbol<Pointer64>::operator=(v10, (uint64_t)a3);
        a3 += 13;
      }
      v10 += 104;
      v5 += 104;
      if (v9 == (_QWORD *)a2)
        return result;
    }
    return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,0>((uint64_t)v9, a2, v5);
  }
  return result;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<TRawSymbol<Pointer64> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>,std::__unconstrained_reverse_iterator<std::__wrap_iter<TRawSymbol<Pointer64> *>>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v8 = result;
    v9 = a5 - 104;
    while (a3 != a4)
    {
      v10 = *(_QWORD *)(v8 - 104);
      v11 = *(_QWORD *)(a3 - 104);
      if (v10 >= v11)
        v12 = v8 - 104;
      else
        v12 = a3 - 104;
      if (v10 >= v11)
        v8 -= 104;
      else
        a3 -= 104;
      result = TRawSymbol<Pointer64>::operator=(v9, v12);
      v9 -= 104;
      if (v8 == a2)
        return result;
    }
    v13 = 0;
    do
    {
      v14 = v9 + v13;
      v13 -= 104;
      result = TRawSymbol<Pointer64>::operator=(v14, v8 + v13);
    }
    while (v8 + v13 != a2);
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *,std::__wrap_iter<TRawSymbol<Pointer64> *>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = a1;
  if (a1 != a2)
  {
    v6 = a3;
    do
    {
      TRawSymbol<Pointer64>::operator=(v6, v4);
      v4 += 104;
      v6 += 104;
      v3 += 104;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

__n128 *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSymbol<Pointer64> *>>(__n128 *a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  __n128 *v6;
  __n128 *i;
  __n128 *v8;
  __n128 *v9;

  v4 = a2;
  swap(a1, a2);
  v6 = (__n128 *)((char *)a1 + 104);
  for (i = (__n128 *)((char *)v4 + 104); i != a3; i = (__n128 *)((char *)i + 104))
  {
    if (v6 == v4)
      v4 = i;
    swap(v6, i);
    v6 = (__n128 *)((char *)v6 + 104);
  }
  if (v6 != v4)
  {
    v8 = v6;
    v9 = v4;
    do
    {
      while (1)
      {
        swap(v8, v9);
        v8 = (__n128 *)((char *)v8 + 104);
        v9 = (__n128 *)((char *)v9 + 104);
        if (v9 == a3)
          break;
        if (v8 == v4)
          v4 = v9;
      }
      v9 = v4;
    }
    while (v8 != v4);
  }
  return v6;
}

_QWORD *std::__hash_table<TRawSymbol<Pointer64> *,std::hash<TRawSymbol<Pointer64> *>,std::equal_to<TRawSymbol<Pointer64> *>,std::allocator<TRawSymbol<Pointer64> *>>::__emplace_unique_key_args<TRawSymbol<Pointer64> *,TRawSymbol<Pointer64> *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B41561F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__wrap_iter<TRawSourceInfo<Pointer64> *>,std::__equal_to &>(__int128 *a1, __int128 *a2)
{
  __int128 *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *i;
  __int128 v10;
  __int128 v11;

  result = a2;
  if (a1 != a2)
  {
    v4 = (uint64_t)a1 - 40;
    do
    {
      if ((__int128 *)(v4 + 80) == a2)
        return a2;
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(_QWORD *)(v4 + 48);
      v4 += 40;
    }
    while (v5 != *(_QWORD *)(v4 + 40) || v6 != *(_QWORD *)(v4 + 48));
    for (i = (__int128 *)(v4 + 80); i != a2; i = (__int128 *)((char *)i + 40))
    {
      if (*(_QWORD *)v4 != *(_QWORD *)i || *(_QWORD *)(v4 + 8) != *((_QWORD *)i + 1))
      {
        v10 = *i;
        v11 = i[1];
        *(_DWORD *)(v4 + 72) = *((_DWORD *)i + 8);
        *(_OWORD *)(v4 + 56) = v11;
        *(_OWORD *)(v4 + 40) = v10;
        v4 += 40;
      }
    }
    return (__int128 *)(v4 + 40);
  }
  return result;
}

_QWORD *std::__hash_table<TRawSourceInfo<Pointer64> *,std::hash<TRawSourceInfo<Pointer64> *>,std::equal_to<TRawSourceInfo<Pointer64> *>,std::allocator<TRawSourceInfo<Pointer64> *>>::__emplace_unique_key_args<TRawSourceInfo<Pointer64> *,TRawSourceInfo<Pointer64> *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B41564CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::find<CSCppSymbolOwner>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = CSCppSymbolOwnerHashFunctor::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (CSCppSymbolOwnerEqualsFunctor::operator()(v12, (uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t CSCppSymbolOwnerHashFunctor::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!UUID::is_null((UUID *)(a2 + 16)))
    return **(_QWORD **)(a2 + 32) + (*(_QWORD *)(a2 + 24) ^ *(_QWORD *)(a2 + 16));
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  if (v3 >= v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = *(uint64_t **)(a2 + 32);
    do
    {
      v8 = *v7;
      v7 += 4;
      v9 = v8 << v6;
      if (v6 <= 15)
        ++v6;
      else
        v6 = 0;
      v10 = v9 * v5;
      v5 += v9;
      if ((v6 & 1) != 0)
        v5 = v10;
    }
    while ((unint64_t)v7 < v4);
  }
  return (v5 + ((uint64_t)(v4 - v3) >> 5)) ^ ((unint64_t)*(unsigned int *)(a2 + 104) << 32);
}

BOOL CSCppSymbolOwnerEqualsFunctor::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  _OWORD v17[2];

  v5 = *(_DWORD *)(a3 + 108);
  if ((*(_DWORD *)(a2 + 108) & 0x80000000) != 0)
  {
    if ((v5 & 0x80000000) == 0)
      return 0;
    v7 = *(_QWORD *)(a2 + 144);
    if (!v7)
      return 0;
    return v7 == *(_QWORD *)(a3 + 144);
  }
  else
  {
    if (v5 < 0)
      return 0;
    v6 = (_QWORD *)(a2 + 16);
    if (UUID::is_null((UUID *)(a2 + 16)))
    {
      if (*(_DWORD *)(a2 + 104) != *(_DWORD *)(a3 + 104)
        || strcmp(*(const char **)(a2 + 120), *(const char **)(a3 + 120))
        || *(_QWORD *)(a2 + 112) != *(_QWORD *)(a3 + 112))
      {
        return 0;
      }
    }
    else if (*v6 != *(_QWORD *)(a3 + 16) || *(_QWORD *)(a2 + 24) != *(_QWORD *)(a3 + 24))
    {
      return 0;
    }
    v10 = *(char **)(a2 + 32);
    v11 = *(char **)(a2 + 40);
    v12 = *(_OWORD **)(a3 + 32);
    if (v11 - v10 != *(_QWORD *)(a3 + 40) - (_QWORD)v12)
      return 0;
    if (v10 != v11)
    {
      while (1)
      {
        v13 = *((_OWORD *)v10 + 1);
        v17[0] = *(_OWORD *)v10;
        v17[1] = v13;
        v14 = v12[1];
        v16[0] = *v12;
        v16[1] = v14;
        if (v17[0] != v16[0]
          && (!CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v17)
           || !CSCppSegmentRange::is_skippable((CSCppSegmentRange *)v16)))
        {
          break;
        }
        v10 += 32;
        v12 += 2;
        if (v10 == v11)
        {
          v10 = v11;
          break;
        }
      }
      if (v10 != *(char **)(a2 + 40))
        return 0;
    }
    return v12 == *(_OWORD **)(a3 + 40);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>(uint64_t a1, uint64_t a2, const CSCppSymbolOwner *a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = CSCppSymbolOwnerHashFunctor::operator()(a1 + 24, a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (*v15)
      {
        do
        {
          v17 = v16[1];
          if (v17 == v11)
          {
            if (CSCppSymbolOwnerEqualsFunctor::operator()(a1 + 32, (uint64_t)(v16 + 2), a2))
              return v16;
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12)
                v17 %= v12;
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v16 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v27, 0);
  return v16;
}

void sub_1B4156A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

CSCppSymbolOwner *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<CSCppSymbolOwner const&,CSCppSymbolOwnerData *&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const CSCppSymbolOwner *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  CSCppSymbolOwner *result;

  v9 = a1 + 16;
  v10 = operator new(0xE8uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = CSCppSymbolOwner::CSCppSymbolOwner((CSCppSymbolOwner *)(v10 + 2), a3);
  v10[28] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1B4156AC4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__emplace_unique_key_args<CSCppSymbolOwner,std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const CSCppSymbolOwner **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = CSCppSymbolOwnerHashFunctor::operator()(a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (CSCppSymbolOwnerEqualsFunctor::operator()(a1 + 32, (uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v15 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v26, 0);
  return v15;
}

void sub_1B4156D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

CSCppSymbolOwner *std::__hash_table<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,std::__unordered_map_hasher<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerHashFunctor,CSCppSymbolOwnerEqualsFunctor,true>,std::__unordered_map_equal<CSCppSymbolOwner,std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,CSCppSymbolOwnerEqualsFunctor,CSCppSymbolOwnerHashFunctor,true>,std::allocator<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<CSCppSymbolOwner const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const CSCppSymbolOwner **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  CSCppSymbolOwner *result;

  v7 = a1 + 16;
  v8 = operator new(0xE8uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = CSCppSymbolOwner::CSCppSymbolOwner((CSCppSymbolOwner *)(v8 + 2), *a3);
  v8[28] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1B4156DD8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CSCppSymbolOwner,CSCppSymbolOwnerData *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void CSCppDsymData::CSCppDsymData(CSCppDsymData *this, const CSCppDsymData *a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *(__int128 **)a2, *((__int128 **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  v4 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 3);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  memcpy((char *)this + 72, (char *)a2 + 72, 0x400uLL);
}

void sub_1B4156EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B4156F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B4157004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void *OUTLINED_FUNCTION_4(void *a1)
{
  return __cxa_begin_catch(a1);
}

__CFString *CSSymbolCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  __CFString *i;
  CSCppSymbolOwner *v6;
  uint64_t v7;
  char *v8;
  TMMapSymbolOwnerData *v9;
  char *v10;
  uint64_t v12;
  _QWORD *exception;
  _QWORD v14[4];
  __int128 v15;
  unint64_t v16;
  uint64_t v17;

  i = (__CFString *)(a1 & 7 | (8 * (a2 & 3)));
  if (i)
  {
    v6 = (CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8);
    v7 = CSCppSymbolOwner::data((CSCppSymbolOwner *)(a1 & 0xFFFFFFFFFFFFFFF8));
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
    {
      case 1u:
        v8 = TRawSymbol<Pointer32>::description(a2 & 0xFFFFFFFFFFFFFFFCLL);
        break;
      case 2u:
        v8 = TRawSymbol<Pointer64>::description(a2 & 0xFFFFFFFFFFFFFFFCLL);
        break;
      case 4u:
        v9 = (TMMapSymbolOwnerData *)CSCppSymbolOwner::data(v6);
        v8 = CSCppMMapSymbol::description<TMMapSymbolOwnerData>((unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v9);
        break;
      case 5u:
        v16 = a2 & 0xFFFFFFFFFFFFFFFCLL;
        if (i == (__CFString *)10)
          v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::description(&v16);
        else
          v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::description(&v16);
        break;
      default:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Unhandled CSCppSymbolOwnerData type_id: ", 40);
        v12 = CSCppSymbolOwner::data(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17, &v15);
        Exception::Exception(v14, &v15);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v14);
    }
    v10 = v8;
    for (i = CFStringCreateMutable(0, 0); a3; --a3)
      CFStringAppendCString(i, "\t", 0x8000100u);
    CFStringAppendFormat(i, 0, CFSTR("<CSSymbol: %p> %s"), a2 & 0xFFFFFFFFFFFFFFFCLL, v10);
    free(v10);
  }
  return i;
}

void sub_1B415723C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  Exception::~Exception(&a11);
  if (a20 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

char *TRawSymbol<Pointer32>::description(uint64_t a1)
{
  int v2;
  const char *v3;

  TRawSymbol<Pointer32>::is_objc_method(a1);
  v2 = atomic_load((unsigned int *)(a1 + 20));
  v3 = (const char *)TRawSymbol<Pointer32>::_resolve_name(a1, 0, 0);
  return TRawSymbol<Pointer32>::description((int *)a1, v2, v3);
}

char *TRawSymbol<Pointer32>::description(int *a1, int a2, const char *a3)
{
  unint64_t v5;
  int v6;
  int v7;
  char *v9;
  char __dst[256];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a2);
  if (v5 >= 2)
    __dst[v5 - 2] = 0;
  v6 = *a1;
  v7 = a1[1] + *a1;
  v9 = 0;
  asprintf(&v9, "[0x%08x -> 0x%08x) %s [%s]", v6, v7, a3, __dst);
  return v9;
}

char *TRawSymbol<Pointer64>::description(uint64_t a1)
{
  int v2;
  const char *v3;

  TRawSymbol<Pointer64>::is_objc_method(a1);
  v2 = atomic_load((unsigned int *)(a1 + 28));
  v3 = (const char *)TRawSymbol<Pointer64>::_resolve_name(a1, 0, 0);
  return TRawSymbol<Pointer64>::description((uint64_t *)a1, v2, v3);
}

char *TRawSymbol<Pointer64>::description(uint64_t *a1, int a2, const char *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char __dst[256];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a2);
  if (v5 >= 2)
    __dst[v5 - 2] = 0;
  v6 = *a1;
  v7 = a1[1] + *a1;
  v9 = 0;
  asprintf(&v9, "[0x%016llx -> 0x%016llx) %s [%s]", v6, v7, a3, __dst);
  return v9;
}

char *CSCppMMapSymbol::description<TMMapSymbolOwnerData>(unsigned int *a1, TMMapSymbolOwnerData *a2)
{
  unint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  int v7;
  const char *v8;
  unint64_t v10;
  char *v11;
  char __dst[256];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, a1[2]);
  if (v4 >= 2)
    __dst[v4 - 2] = 0;
  v10 = 0;
  v11 = 0;
  v5 = (_DWORD *)*((_QWORD *)a2 + 11);
  v6 = (unint64_t)v5
     + 32 * v5[2]
     + 24 * v5[3]
     + (24 * v5[4])
     + (unint64_t)(4 * v5[4])
     + (36 * v5[5])
     + (20 * v5[6])
     + v5[22]
     + v5[20]
     + a1[3]
     + 96;
  v7 = (*(uint64_t (**)(TMMapSymbolOwnerData *, unint64_t))(*(_QWORD *)a2 + 72))(a2, v6);
  if (!TMMapSymbolOwnerData::convert_archive_address_to_real_address(a2, *a1, &v10))
    return 0;
  v8 = "<Invalid symbol name>";
  if (v7)
    v8 = (const char *)v6;
  asprintf(&v11, "[0x%016llx -> 0x%016llx) %s [%s]", v10, v10 + a1[1], v8, __dst);
  return v11;
}

char *FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::description(_QWORD *a1)
{
  int v2;
  unint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char __dst[256];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::flags(a1);
  v3 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, v2);
  if (v3 >= 2)
    __dst[v3 - 2] = 0;
  v12 = 0;
  v4 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  v5 = *v4;
  if (v5 < 0xB)
  {
    if (v5 < 9)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = v4[5];
  if (!v4[5])
  {
LABEL_7:
    v6 = v4[4];
    if (v4[4])
      goto LABEL_8;
LABEL_9:
    v7 = 0;
    goto LABEL_10;
  }
LABEL_8:
  v7 = (const char *)(*a1 + v6 + *(unsigned int *)(*a1 + v6) + 4);
LABEL_10:
  v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(a1);
  v9 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(a1);
  asprintf(&v12, "[0x%016llx -> 0x%016llx) %s [%s]", v8, v10 + v9, v7, __dst);
  return v12;
}

char *FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::description(_QWORD *a1)
{
  int v2;
  unint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char __dst[256];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::Symbol>::flags(a1);
  v3 = convert_symbol_flags_to_symbolic_representation(__dst, 0x100uLL, v2);
  if (v3 >= 2)
    __dst[v3 - 2] = 0;
  v12 = 0;
  v4 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  v5 = *v4;
  if (v5 < 0xB)
  {
    if (v5 < 9)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = v4[5];
  if (!v4[5])
  {
LABEL_7:
    v6 = v4[4];
    if (v4[4])
      goto LABEL_8;
LABEL_9:
    v7 = 0;
    goto LABEL_10;
  }
LABEL_8:
  v7 = (const char *)(*a1 + v6 + *(unsigned int *)(*a1 + v6) + 4);
LABEL_10:
  v8 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(a1);
  v9 = FlatbufferSymbolAdapterImpl<FlatbufferSymbols::InlineSymbol>::range(a1);
  asprintf(&v12, "[0x%016llx -> 0x%016llx) %s [%s]", v8, v10 + v9, v7, __dst);
  return v12;
}

uint64_t CSSetDebugLoggingLevel(uint64_t result)
{
  CSDebugLoggingLevel = result;
  return result;
}

uint64_t CSGetDebugLoggingLevel()
{
  return CSDebugLoggingLevel;
}

void CSSymbolicatorPrintTimeline(char a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  unint64_t *v11;
  unint64_t v12;
  char v13[32];
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v19);
    v3 = v19;
    for (i = v20; v3 != i; v3 += 2)
    {
      v4 = *v3;
      v5 = (std::__shared_weak_count *)v3[1];
      v17 = *v3;
      v18 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v8 = printf("SYMBOL OWNER: %s\n", *(const char **)(v4 + 136));
      MEMORY[0x1E0C80A78](v8);
      CFUUIDBytesToString((const CFUUIDBytes *)(v4 + 16), v13, 0x28uLL);
      printf("\tUUID: %s\n", v13);
      printf("\tPath: %s\n", *(const char **)(v4 + 120));
      _printTimestamp("Load Timestamp", *(_QWORD *)(v4 + 88));
      _printTimestamp("Unload Timestamp", *(_QWORD *)(v4 + 96));
      puts("\tSegments:");
      v14 = 0;
      v15 = 0;
      v16 = 0;
      std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<CSCppSegmentRange*,CSCppSegmentRange*>(&v14, *(const void **)(v4 + 32), *(_QWORD *)(v4 + 40), (uint64_t)(*(_QWORD *)(v4 + 40) - *(_QWORD *)(v4 + 32)) >> 5);
      v10 = v14;
      v9 = v15;
      if (v14 != v15)
      {
        do
        {
          printf("\t\t%s 0x%llx - 0x%llx\n", (const char *)v10[2], *v10, (char *)*v10 + (_QWORD)v10[1]);
          v10 += 4;
        }
        while (v10 != v9);
        v10 = v14;
      }
      if (v10)
      {
        v15 = v10;
        operator delete(v10);
      }
      if (v5)
      {
        v11 = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    v14 = (void **)&v19;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

void sub_1B4157A1C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t _printTimestamp(const char *a1, int64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (!a2 || a2 == 0x7FFFFFFFFFFFFFFFLL)
      return printf("\t%s: %s (%llu)\n");
    return printf("\t%s: %llu\n");
  }
  if (a2 > (uint64_t)0x8000000000000001)
    return printf("\t%s: %llu\n");
  return printf("\t%s: %s (%llu)\n");
}

uint64_t CSSymbolicatorCreateWithTaskPidFlagsAndNotification(unsigned int a1, int a2, uint64_t a3, uint64_t a4)
{
  CSCppMachTask *v8;
  uint64_t v9;
  CSCppMachTask *v11;

  v8 = (CSCppMachTask *)operator new();
  CSCppMachTask::CSCppMachTask(v8, a1, a2, a3 & 1);
  v11 = v8;
  v9 = CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification(&v11, a3, a4);
  if (v11)
    (*(void (**)(CSCppMachTask *))(*(_QWORD *)v11 + 8))(v11);
  return v9;
}

void sub_1B4157B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B4157B64);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification(CSCppMachTask **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  CSCppMachTask *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CSCppMachTask *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  CSCppMachTask::symbol_owners(*a1, a2, &v16);
  v6 = v16;
  v8 = *v16;
  v7 = v16[1];
  if (v7 != *v16)
  {
    v9 = *a1;
    *a1 = 0;
    v15 = v9;
    a3 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v6, (uint64_t *)&v15, a2, a3);
    v10 = (uint64_t)v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v7 == v8)
    return 0;
  return a3;
}

#error "1B4157DD8: call analysis failed (funcsize=52)"

uint64_t CSSymbolicatorCreateWithTaskFlagsAndNotification(unsigned int a1, uint64_t a2, uint64_t a3)
{
  CSCppMachTask *v6;
  uint64_t v7;
  CSCppMachTask *v9;

  v6 = (CSCppMachTask *)operator new();
  CSCppMachTask::CSCppMachTask(v6, a1, a2 & 1);
  v9 = v6;
  v7 = CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification(&v9, a2, a3);
  if (v9)
    (*(void (**)(CSCppMachTask *))(*(_QWORD *)v9 + 8))(v9);
  return v7;
}

void sub_1B4157E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B4157E68);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorCreateWithPidFlagsAndNotification(int a1, uint64_t a2, uint64_t a3)
{
  CSCppMachTask *v6;
  uint64_t v7;
  CSCppMachTask *v9;

  v6 = (CSCppMachTask *)operator new();
  CSCppMachTask::CSCppMachTask(v6, a1, a2 & 1);
  v9 = v6;
  v7 = CSSymbolicatorCreateWithCSCppMachTaskFlagsAndNotification(&v9, a2, a3);
  if (v9)
    (*(void (**)(CSCppMachTask *))(*(_QWORD *)v9 + 8))(v9);
  return v7;
}

void sub_1B4157F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B4157F6CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CSSymbolicatorSubscribeToTaskMainNotification(uint64_t result, uint64_t a2)
{
  if (result & 7 | (8 * (a2 & 3)))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 120))(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  return result;
}

const __CFData *CSSymbolicatorCreateWithSignatureAndNotification(const __CFData *a1, uint64_t a2)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, -2147475454, 0, a2, 0);
}

const __CFData *CSSymbolicatorCreateWithSignatureFlagsAndNotification(const __CFData *a1, int a2, unsigned int a3, uint64_t a4)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, a2, a3, a4, 0);
}

uint64_t CSSymbolicatorCreateWithSignature(uint64_t a1)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, 2147491842, 0, 0, 0);
}

const __CFData *CSSymbolicatorCreateWithSignatureAndAdditionalSymbolOwners(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  return _CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotification<__CFData const*>(a1, -1, 0, a2, a3, 0);
}

__CFData *CSSymbolicatorCreateSignature(char a1, uint64_t a2, char a3)
{
  if ((a3 & 8) != 0)
    return _CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>(a1, a2, a3, 0, 0);
  else
    return _CSSymbolicatorCreateSignatureElidingSomeSymbolOwners<__CFData const*>(a1, a2, a3, 0, 0);
}

__CFData *CSSymbolicatorCreateSignatureWithProcessTimeRange(char a1, uint64_t a2, char a3, unint64_t a4, unint64_t a5)
{
  if ((a3 & 8) != 0)
    return _CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>(a1, a2, a3, a4, a5);
  else
    return 0;
}

__CFData *CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlock(uint64_t a1, uint64_t a2)
{
  return _CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRange<__CFData const*>(a1, 0, 0, a2);
}

uint64_t CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification(const __CFURL *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  UInt8 buffer[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    v11 = -1;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification_block_invoke;
    v9[3] = &unk_1E6778EE8;
    v10 = a2;
    v9[5] = a4;
    v9[6] = &v12;
    v9[4] = a3;
    iterate_symbol_owners_from_path((char *)buffer, (a2 & 0x20000000) == 0, 0, &v11, 0, (uint64_t)v9);
  }
  v7 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_1B41582E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithURLArchitectureFlagsAndNotification(const __CFURL *a1, void **a2, uint64_t a3, uint64_t a4)
{
  UInt8 buffer[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    return CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification((char *)buffer, a2, a3, a4);
  else
    return 0;
}

unsigned int *CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification(char a1, uint64_t a2, int a3)
{
  UUID *SharedCacheUUID;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  _QWORD v13[8];
  _QWORD v14[4];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  SharedCacheUUID = CSSymbolicatorGetSharedCacheUUID(a1, a2);
  if (SharedCacheUUID)
  {
    v7 = (unsigned int *)CSSymbolicatorCreateWithSharedCacheUUID((uint64_t)SharedCacheUUID, a3);
    v9 = v8;
    if (!CSIsNull((char)v7, v8))
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2000000000;
      v18 = 0;
      v14[0] = 0;
      v14[1] = v14;
      v14[2] = 0x2000000000;
      v14[3] = 0;
      v10 = MEMORY[0x1E0C809B0];
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke;
      v13[3] = &unk_1E6778F38;
      v13[6] = v7;
      v13[7] = v9;
      v13[4] = &v15;
      v13[5] = v14;
      CSSymbolicatorForeachSymbolOwnerAtTime(a1, a2, 0x8000000000000000, (uint64_t)v13);
      if (*((_BYTE *)v16 + 24))
      {
        v12[0] = v10;
        v12[1] = 0x40000000;
        v12[2] = __CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification_block_invoke_2;
        v12[3] = &unk_1E6778FB0;
        v12[5] = v7;
        v12[6] = v9;
        v12[4] = v14;
        if ((CSSymbolicatorApplyMutableContextBlock((char)v7, v9, (uint64_t)v12) & 1) != 0)
        {
LABEL_9:
          _Block_object_dispose(v14, 8);
          _Block_object_dispose(&v15, 8);
          return v7;
        }
        CSRelease(v7, v9);
      }
      else
      {
        CSRelease(v7, v9);
      }
      v7 = 0;
      goto LABEL_9;
    }
  }
  return 0;
}

void sub_1B4158544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithSharedCacheUUID(uint64_t a1, int a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  CSCppDyldSplitSharedCacheMemory *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v13[5];
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 (*v18)(uint64_t, uint64_t);
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  void *__p[2];
  char v25;

  if (!a1)
    return 0;
  shared_cache_search_directories(&v22);
  v15 = 0;
  v16 = &v15;
  v17 = 0x3802000000;
  v18 = __Block_byref_object_copy__8;
  v19 = __Block_byref_object_dispose__8;
  v20 = 0;
  v21 = 0;
  v4 = v23;
  if (v22 == v23)
  {
    v11 = 0;
  }
  else
  {
    v5 = (char *)v22 + 16;
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      v7 = (char *)*((_QWORD *)v5 - 2);
      v8 = (CSCppDyldSplitSharedCacheMemory *)operator new();
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      CSCppDyldSplitSharedCacheMemory::CSCppDyldSplitSharedCacheMemory(v8, __p, a1);
      if (v25 < 0)
        operator delete(__p[0]);
      v13[0] = v6;
      v13[1] = 0x40000000;
      v13[2] = __CSSymbolicatorCreateWithSharedCacheUUID_block_invoke;
      v13[3] = &unk_1E6778FD8;
      v13[4] = &v15;
      v14 = a2;
      process_all_shared_cache_libraries(v8, -1, a2, (uint64_t)v13);
      v9 = CSIsNull(v16[5], v16[6]);
      (*(void (**)(CSCppDyldSplitSharedCacheMemory *))(*(_QWORD *)v8 + 8))(v8);
      v10 = v5 != v4 && v9;
      v5 += 16;
    }
    while (v10);
    v11 = v16[5];
  }
  _Block_object_dispose(&v15, 8);
  if (v22)
  {
    v23 = (char *)v22;
    operator delete(v22);
  }
  return v11;
}

void sub_1B4158710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  MEMORY[0x1B5E36940](v30, 0x10A1C404D4F90C9);
  _Block_object_dispose(&a15, 8);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_1B41588B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(a2 & 0xFFFFFFFFFFFFFFFCLL, a4, a3, &v11);
  v6 = v11;
  v7 = v12;
  if (v11 == v12)
  {
    v8 = v11;
  }
  else
  {
    do
    {
      if (a5)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(a5 + 16))(a5, 3, *v6);
      ++v6;
    }
    while (v6 != v7);
    v6 = v11;
    v8 = v12;
  }
  v9 = v8 - v6;
  if (v6)
  {
    v12 = v6;
    operator delete(v6);
  }
  return v9;
}

void sub_1B4158990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _createSymbolicatorFromSharedCacheSymbolOwners(uint64_t a1, uint64_t a2, uint64_t a3, const UUID *a4, uint64_t **a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const CSCppSymbolOwner *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  UUID *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  UUID *v40;
  __int128 v41;
  __int128 v42;
  char *v43[3];
  _OWORD v44[2];
  int v45;

  memset(v44, 0, sizeof(v44));
  v45 = 1065353216;
  memset(v43, 0, sizeof(v43));
  v5 = *a5;
  v6 = a5[1];
  if (v6 == *a5)
  {
    v36 = 0;
  }
  else
  {
    do
    {
      v10 = *v5;
      v11 = v5[1];
      *(_QWORD *)&v42 = *v5;
      *((_QWORD *)&v42 + 1) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = (_OWORD *)(v10 + 16);
      v15 = std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__equal_range_multi<UUID>(v44, (_QWORD *)(v10 + 16));
      v17 = v15;
      v18 = v16;
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      v41 = v42;
      if (*((_QWORD *)&v42 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      if (v15 != v16)
      {
        while (1)
        {
          v22 = (const CSCppSymbolOwner *)v17[4];
          v23 = (std::__shared_weak_count *)v17[5];
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          v26 = check_if_segments_match((const CSCppSymbolOwner *)v41, v22);
          if (v23)
          {
            v27 = (unint64_t *)&v23->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if (v26)
            break;
          v17 = (_QWORD *)*v17;
          if (v17 == v18)
          {
            v17 = v18;
            break;
          }
        }
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      }
      if (v19)
      {
        v29 = (unint64_t *)&v19->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v17 == v18)
      {
        std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<UUID const&,std::shared_ptr<CSCppSymbolOwner>&>(v44, v14, &v42);
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v43, &v42);
      }
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
    v34 = (UUID *)operator new();
    v35 = UUID::null_uuid(v34);
    CSCppFakeTask::CSCppFakeTask((CSCppFakeTask *)v34, -1, 0, a4, a3, (const UUID *)v35, 0);
    v40 = v34;
    v36 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v43, (uint64_t *)&v40, a1, a2);
    v37 = (uint64_t)v40;
    v40 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  *(_QWORD *)&v42 = v43;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table((uint64_t)v44);
  return v36;
}

void sub_1B4158DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void **v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void **);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
  va_copy((va_list)v7, va1);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,std::shared_ptr<CSCppSymbolOwner>>>>::~__hash_table((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorForeachSharedCacheSymbolicatorWithFlagsAndNotification()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 0;
  v3 = &v2;
  v4 = 0x2000000000;
  v5 = 0;
  iterate_symbol_owners_from_disk_dsc(0);
  v0 = v3[3];
  _Block_object_dispose(&v2, 8);
  return v0;
}

uint64_t CSSymbolicatorForEachAotImage()
{
  return 0;
}

uint64_t CSSymbolicatorGetAotSharedCacheAddress(char a1, uint64_t a2)
{
  _BYTE *v2;

  if (a1 & 7 | (8 * (a2 & 3)) && (v2 = *(_BYTE **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56), v2[16]))
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 72))(v2);
  else
    return 0;
}

UUID *CSSymbolicatorGetAotSharedCacheUUID(char a1, uint64_t a2)
{
  _BYTE *v2;
  UUID *v3;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = *(_BYTE **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56);
  if (!v2[16])
    return 0;
  v3 = (UUID *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 56))(v2);
  if (UUID::is_null(v3))
    return 0;
  else
    return v3;
}

uint64_t CSSymbolicatorCreateWithMachKernelFlagsAndNotification(unsigned int a1)
{
  return _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification(0, 0, a1);
}

uint64_t _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification(char **a1, uint64_t a2, unsigned int a3)
{
  UUID *Current;
  char *v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  DIR *v21;
  char *v22;
  NSObject *v23;
  const char *v24;
  os_log_type_t v25;
  void *v26;
  uint64_t v27;
  std::string *v28;
  int v29;
  uint8_t *v30;
  CFArrayRef v31;
  const __CFDictionary *v32;
  uint64_t *v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unsigned int v39;
  int v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  CSCppFakeTask *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  unsigned int v53;
  CSCppFakeTask *v54;
  _BYTE v55[40];
  UUID *v56;
  _OWORD v57[2];
  int v58;
  __int128 v59;
  unint64_t v60;
  dirent *v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  unint64_t v66;
  char *v67[2];
  char v68;
  __int128 *v69;
  _QWORD v70[4];
  __int128 v71;
  char __str[1024];
  UUID v73;
  dirent __p;
  std::string v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t (*v77)(uint64_t);
  _BYTE v78[32];
  int v79;
  void *values;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  const __CFString *v83;
  const __CFString *v84;
  uint8_t *v85;
  __int128 buf;
  uint64_t v87;
  _QWORD v88[2];
  uint64_t v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  memset(v57, 0, sizeof(v57));
  v58 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "xnu");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v57, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v75)+ 5) = 0;
  if (__p.d_name[2] < 0)
    operator delete((void *)__p.d_ino);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sptm");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v57, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v75)+ 5) = 0;
  if (__p.d_name[2] < 0)
    operator delete((void *)__p.d_ino);
  std::string::basic_string[abi:ne180100]<0>(&__p, "txm");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v57, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v75)+ 5) = 0;
  if (__p.d_name[2] < 0)
  {
    operator delete((void *)__p.d_ino);
    if ((a3 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  *(_QWORD *)__str = 0;
  *(_QWORD *)&buf = 8;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      v8 = MEMORY[0x1E0C81028];
      v9 = "Unable to determine kernel slide.";
LABEL_76:
      _os_log_impl(&dword_1B40C5000, v8, OS_LOG_TYPE_INFO, v9, (uint8_t *)&__p, 2u);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  v14 = *(_QWORD *)__str;
  std::string::basic_string[abi:ne180100]<0>(&__p, "xnu");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v57, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v75)+ 5) = v14;
  if (__p.d_name[2] < 0)
    operator delete((void *)__p.d_ino);
  values = 0;
  *(_QWORD *)&v62 = 8;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      v8 = MEMORY[0x1E0C81028];
      v9 = "Unable to determine a special slide 1.";
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  v26 = values;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sptm");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v57, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v75)+ 5) = v26;
  if (__p.d_name[2] < 0)
    operator delete((void *)__p.d_ino);
  *(_QWORD *)&v65 = 0;
  *(_QWORD *)&v59 = 8;
  if (kas_info())
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      v8 = MEMORY[0x1E0C81028];
      v9 = "Unable to determine special slide 2.";
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  v47 = v65;
  std::string::basic_string[abi:ne180100]<0>(&__p, "txm");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v57, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v75)+ 5) = v47;
  if (__p.d_name[2] < 0)
    operator delete((void *)__p.d_ino);
LABEL_9:
  Current = (UUID *)CSArchitectureGetCurrent();
  if (!Current)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      v8 = MEMORY[0x1E0C81028];
      v9 = "Unable to determine architecture of the kernel";
      goto LABEL_76;
    }
LABEL_77:
    v27 = 0;
    goto LABEL_120;
  }
  v56 = Current;
  *(_OWORD *)v73 = *(_OWORD *)UUID::null_uuid(Current);
  v75.__r_.__value_.__r.__words[0] = 48;
  if ((sysctlbyname("kern.uuid", &__p, (size_t *)&v75, 0, 0)
     || v75.__r_.__value_.__r.__words[0] > 0x2F
     || !CSUUIDStringToCFUUIDBytes(&__p, v73))
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.d_ino) = 0;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not read UUID of running kernel\n", (uint8_t *)&__p, 2u);
  }
  *(_QWORD *)&v62 = 0;
  *((_QWORD *)&v62 + 1) = &v62;
  v63 = 0x2000000000;
  v64 = 0;
  v53 = a3;
  if (!UUID::is_null((UUID *)v73))
  {
    v61 = 0;
    v10 = getwd((char *)&v75);
    v67[0] = v10;
    std::string::basic_string[abi:ne180100]<0>(&buf, "/System/Library/Kernels");
    std::string::basic_string[abi:ne180100]<0>(v88, "/");
    v65 = 0uLL;
    v66 = 0;
    v67[1] = (char *)&v65;
    v68 = 0;
    *(_QWORD *)&v65 = operator new(0x30uLL);
    *((_QWORD *)&v65 + 1) = v65;
    v66 = v65 + 48;
    v11 = 0;
    *((_QWORD *)&v65 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v66, &buf, &v90, (std::string *)v65);
    do
    {
      if (*((char *)&v89 + v11 * 8 + 7) < 0)
        operator delete((void *)v88[v11]);
      v11 -= 3;
    }
    while (v11 != -6);
    if (v10)
    {
      v12 = *((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1) >= v66)
      {
        v13 = std::vector<std::string>::__emplace_back_slow_path<char const*&>((uint64_t *)&v65, v67);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(*((_QWORD **)&v65 + 1), v10);
        v13 = v12 + 24;
      }
      *((_QWORD *)&v65 + 1) = v13;
    }
    if (a1 && a2)
    {
      std::unordered_set<std::string>::unordered_set<char const**>((uint64_t)&buf, a1, &a1[a2]);
      v59 = 0uLL;
      v60 = 0;
      v15 = (__int128 *)*((_QWORD *)&v65 + 1);
      v16 = (__int128 *)v65;
      v69 = &v59;
      while (v16 != v15)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(&buf, (unsigned __int8 *)v16))std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)&v69, v16);
        v16 = (__int128 *)((char *)v16 + 24);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf);
    }
    else
    {
      v59 = v65;
      v60 = v66;
      v66 = 0;
      v65 = 0uLL;
    }
    *(_QWORD *)&buf = &v65;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    v18 = *((_QWORD *)&v59 + 1);
    v17 = v59;
    if ((_QWORD)v59 == *((_QWORD *)&v59 + 1))
    {
      if (!*(_BYTE *)(*((_QWORD *)&v62 + 1) + 24))
      {
        memset(&v75, 0, sizeof(v75));
LABEL_79:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v28 = &v75;
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v28 = (std::string *)v75.__r_.__value_.__r.__words[0];
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v28;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to find matching kernels in %s\n", (uint8_t *)&buf, 0xCu);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
LABEL_85:
        v29 = *(unsigned __int8 *)(*((_QWORD *)&v62 + 1) + 24);
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
        _Block_object_dispose(&v62, 8);
        if (v29)
          v7 = __str;
        else
          v7 = "/mach_kernel";
        goto LABEL_88;
      }
    }
    else
    {
      v19 = 0;
      while (1)
      {
        v20 = (const char *)v17;
        if (*(char *)(v17 + 23) < 0)
          v20 = *(const char **)v17;
        v21 = opendir(v20);
        if (v21)
        {
          if (!*(_BYTE *)(*((_QWORD *)&v62 + 1) + 24))
          {
            while (1)
            {
              v19 = readdir_r(v21, &__p, &v61);
              if (v19 || !v61)
                break;
              if (v61->d_type == 8)
              {
                if (!strcmp(v20, "/"))
                  snprintf(__str, 0x400uLL, "/%s");
                else
                  snprintf(__str, 0x400uLL, "%s/%s");
                if ((CSFileIsSuitableForCS(__str) & 1) != 0)
                {
                  values = (void *)MEMORY[0x1E0C809B0];
                  v81 = 0x40000000;
                  v82 = ___ZL23get_running_kernel_pathRK4UUIDRK17CSCppArchitecturePcmPPKcm_block_invoke;
                  v83 = (const __CFString *)&unk_1E6779068;
                  v84 = (const __CFString *)&v62;
                  v85 = v73;
                  iterate_symbol_owners_from_path(__str, 0, 0, (unint64_t *)&v56, 1, (uint64_t)&values);
                }
              }
              if (*(_BYTE *)(*((_QWORD *)&v62 + 1) + 24))
              {
                v19 = 0;
                break;
              }
            }
          }
          closedir(v21);
          if (*(_BYTE *)(*((_QWORD *)&v62 + 1) + 24))
            break;
        }
        v17 += 24;
        if (v17 == v18)
        {
          if (*(_BYTE *)(*((_QWORD *)&v62 + 1) + 24))
            break;
          if (!v19)
          {
            v49 = *((_QWORD *)&v59 + 1);
            v48 = v59;
            memset(&v75, 0, sizeof(v75));
            if ((_QWORD)v59 != *((_QWORD *)&v59 + 1))
            {
              do
              {
                v50 = *(char *)(v48 + 23);
                if (v50 >= 0)
                  v51 = (const std::string::value_type *)v48;
                else
                  v51 = *(const std::string::value_type **)v48;
                if (v50 >= 0)
                  v52 = *(unsigned __int8 *)(v48 + 23);
                else
                  v52 = *(_QWORD *)(v48 + 8);
                std::string::append(&v75, v51, v52);
                std::string::append(&v75, ", ", 2uLL);
                v48 += 24;
              }
              while (v48 != v49);
            }
            goto LABEL_79;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            goto LABEL_85;
          v22 = strerror(v19);
          LODWORD(v75.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          v23 = MEMORY[0x1E0C81028];
          v24 = "Error reading kernels directory: %s\n";
          v25 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_70;
        }
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      LODWORD(v75.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 4) = (std::string::size_type)__str;
      v23 = MEMORY[0x1E0C81028];
      v24 = "Found matching kernel in %s\n";
      v25 = OS_LOG_TYPE_INFO;
LABEL_70:
      _os_log_impl(&dword_1B40C5000, v23, v25, v24, (uint8_t *)&v75, 0xCu);
    }
    goto LABEL_85;
  }
  _Block_object_dispose(&v62, 8);
  v7 = "/mach_kernel";
LABEL_88:
  if (!UUID::is_null((UUID *)v73))
  {
    v70[0] = MEMORY[0x1E0C809B0];
    v70[1] = 0x40000000;
    v70[2] = ___ZL73_createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotificationPPKcmjU13block_pointerFvj19_CSNotificationDataE_block_invoke;
    v70[3] = &__block_descriptor_tmp_40;
    v71 = *(_OWORD *)v73;
    iterate_symbol_owners_from_path(v7, 0, 0, (unint64_t *)&v56, 1, (uint64_t)v70);
  }
  v62 = 0uLL;
  v63 = 0;
  pthread_mutex_lock(&kext_lock);
  std::unordered_map<std::string,unsigned long long>::unordered_map((uint64_t)v55, (uint64_t)v57);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v87 = 0x4002000000;
  v88[0] = __Block_byref_object_copy__51;
  v88[1] = __Block_byref_object_dispose__52;
  v90 = 0uLL;
  v89 = 0;
  values = CFSTR("OSBundleLoadAddress");
  v81 = (uint64_t)CFSTR("OSBundleMachOHeaders");
  v82 = (uint64_t (*)(uint64_t, uint64_t))CFSTR("OSBundleExecutablePath");
  v83 = CFSTR("OSBundlePath");
  v30 = (uint8_t *)*MEMORY[0x1E0C9AE78];
  v84 = CFSTR("OSBundleUUID");
  v85 = v30;
  v31 = CFArrayCreate(0, (const void **)&values, 6, MEMORY[0x1E0C9B378]);
  v32 = (const __CFDictionary *)OSKextCopyLoadedKextInfo();
  v75.__r_.__value_.__r.__words[0] = 0;
  v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v75;
  v75.__r_.__value_.__r.__words[2] = 0x5002000000;
  v76 = __Block_byref_object_copy__63;
  v77 = __Block_byref_object_dispose__64;
  memset(v78, 0, sizeof(v78));
  v79 = 1065353216;
  __p.d_ino = MEMORY[0x1E0C809B0];
  __p.d_seekoff = 1174405120;
  *(_QWORD *)&__p.d_reclen = ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke;
  *(_QWORD *)&__p.d_name[3] = &unk_1E67790B8;
  std::unordered_map<std::string,unsigned long long>::unordered_map((uint64_t)&__p.d_name[27], (uint64_t)v55);
  *(_QWORD *)&__p.d_name[67] = v7;
  *(_QWORD *)&__p.d_name[11] = &v75;
  *(_QWORD *)&__p.d_name[19] = &buf;
  if (v32)
  {
    CFDictionaryApplyFunction(v32, (CFDictionaryApplierFunction)CFDictionaryBlockApplierCallback, &__p);
    CFRelease(v32);
  }
  CFRelease(v31);
  v66 = 0;
  v65 = 0uLL;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)&v65, *(_QWORD **)(*((_QWORD *)&buf + 1) + 40), *(_QWORD **)(*((_QWORD *)&buf + 1) + 48), (uint64_t)(*(_QWORD *)(*((_QWORD *)&buf + 1) + 48) - *(_QWORD *)(*((_QWORD *)&buf + 1) + 40)) >> 4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p.d_name[27]);
  _Block_object_dispose(&v75, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v78);
  _Block_object_dispose(&buf, 8);
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((void **)&v62);
  v62 = v65;
  v63 = v66;
  v66 = 0;
  v65 = 0uLL;
  __p.d_ino = (__uint64_t)&v65;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v55);
  pthread_mutex_unlock(&kext_lock);
  v34 = (uint64_t *)*((_QWORD *)&v62 + 1);
  v33 = (uint64_t *)v62;
  if ((_QWORD)v62 == *((_QWORD *)&v62 + 1))
    goto LABEL_134;
  do
  {
    v36 = *v33;
    v35 = (std::__shared_weak_count *)v33[1];
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
    v39 = *(_DWORD *)(v36 + 108);
    if ((v39 & 0x200) != 0)
    {
      v39 = v39 & 0xFEFFEDFF | 0x1000;
      *(_DWORD *)(v36 + 108) = v39;
    }
    if ((v39 & 0x3000) == 0x2000)
    {
      v40 = v39 | 0x1000000;
      *(_DWORD *)(v36 + 108) = v39 | 0x1000000;
      v41 = *(char **)(v36 + 136);
      if (!strstr(v41, "mach") && !strstr(v41, "kernel") && (strstr(v41, "sptm") || strstr(v41, "txm")))
      {
        v40 &= ~0x10u;
        *(_DWORD *)(v36 + 108) = v40;
      }
      *(_DWORD *)(v36 + 108) = v40 & 0xFEFFEFFF | 0x1000;
    }
    if (v35)
    {
      v42 = (unint64_t *)&v35->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v33 += 2;
  }
  while (v33 != v34);
  if ((_QWORD)v62 == *((_QWORD *)&v62 + 1))
  {
LABEL_134:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.d_ino) = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to create any kext symbol owners.\n", (uint8_t *)&__p, 2u);
    }
    v27 = 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.d_ino) = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Succesfully created kext symbol owners.\n", (uint8_t *)&__p, 2u);
    }
    v44 = (CSCppFakeTask *)operator new();
    CSCppFakeTask::CSCppFakeTask(v44, -1, 1);
    v54 = v44;
    v27 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v62, (uint64_t *)&v54, v53, 0);
    v45 = (uint64_t)v54;
    v54 = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  __p.d_ino = (__uint64_t)&v62;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_120:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v57);
  return v27;
}

void sub_1B4159E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  STACK[0x960] = (unint64_t)&a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x960]);
  _Block_object_dispose(&a29, 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolicatorCreateWithMachKernelExcludingSearchPaths(char **a1, uint64_t a2)
{
  return _createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotification(a1, a2, 0);
}

void CSSymbolicatorResymbolicate(char a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t *v10[3];
  void **v11;

  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v10);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v10, a3, a4, a5, a6);
    v11 = (void **)v10;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
}

void sub_1B415A108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CSSymbolicatorResymbolicateFail(char a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t v4[3];
  void **v5;

  if (a1 & 7 | (8 * (a2 & 3)))
  {
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v4);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v4, a3);
    v5 = (void **)v4;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void sub_1B415A17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CSSymbolicatorResymbolicateFromDebugSymbolsInfo(char a1, uint64_t a2)
{
  int FlagsForNonFaultingBehavior;
  os_unfair_lock_s *v4;
  uint32_t v5;
  uint64_t *v6[3];
  void **v7;

  if (a1 & 7 | (8 * (a2 & 3)))
  {
    FlagsForNonFaultingBehavior = CSSymbolicatorGetFlagsForNonFaultingBehavior();
    v4 = (os_unfair_lock_s *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = CSCppSymbolicator::flags(v4) & ~FlagsForNonFaultingBehavior;
    os_unfair_lock_lock(v4 + 3);
    v4[16]._os_unfair_lock_opaque = v5;
    os_unfair_lock_unlock(v4 + 3);
    CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)v4, v6);
    CSCppSymbolOwnerCache::resymbolicate_symbol_owners(v6);
    v7 = (void **)v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
}

void sub_1B415A22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

__CFString *CSSymbolicatorCopyDescriptionWithIndent(char a1, uint64_t a2, int a3)
{
  __CFString *Mutable;
  int v7;
  uint64_t Architecture;
  const char *FamilyName;
  uint64_t Pid;
  int IsTaskValid;
  const char *v12;
  _QWORD v14[5];
  int v15;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  Mutable = CFStringCreateMutable(0, 0);
  if (a3)
  {
    v7 = a3;
    do
    {
      CFStringAppendCString(Mutable, "\t", 0x8000100u);
      --v7;
    }
    while (v7);
  }
  Architecture = CSSymbolicatorGetArchitecture(a1, a2);
  FamilyName = CSArchitectureGetFamilyName(Architecture);
  Pid = CSSymbolicatorGetPid(a1, a2);
  IsTaskValid = CSSymbolicatorIsTaskValid(a1, a2);
  v12 = "";
  if (IsTaskValid)
    v12 = " LIVE";
  CFStringAppendFormat(Mutable, 0, CFSTR("<CSSymbolicator: %p> %s (pid:%d%s) {\n"), a2 & 0xFFFFFFFFFFFFFFFCLL, FamilyName, Pid, v12);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = __CSSymbolicatorCopyDescriptionWithIndent_block_invoke;
  v14[3] = &__block_descriptor_tmp_26_0;
  v15 = a3;
  v14[4] = Mutable;
  CSSymbolicatorForeachSymbolOwnerAtTime(a1, a2, 0x8000000000000001, (uint64_t)v14);
  for (; a3; --a3)
    CFStringAppendCString(Mutable, "\t", 0x8000100u);
  CFStringAppendCString(Mutable, "}", 0x8000100u);
  return Mutable;
}

__n128 ___ZL73_createSymbolicatorWithMachKernelExcludingSearchPathsFlagsAndNotificationPPKcmjU13block_pointerFvj19_CSNotificationDataE_block_invoke(__n128 *a1, __n128 **a2)
{
  __n128 result;

  result = a1[2];
  (*a2)[1] = result;
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1B415A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZL23get_running_kernel_pathRK4UUIDRK17CSCppArchitecturePcmPPKcm_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(uint64_t **)(result + 40);
  v4 = *v2;
  v3 = v2[1];
  if (v4 == *(_QWORD *)(*(_QWORD *)a2 + 16) && v3 == *(_QWORD *)(*(_QWORD *)a2 + 24))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const*&>(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_1B415A7E8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<char const**>(uint64_t a1, char **a2, char **a3)
{
  char **v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_impl<char const*&>((_QWORD *)a1, v5++);
    while (v5 != a3);
  }
  return a1;
}

void sub_1B415A85C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1B415A914(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B415AA28(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__51(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t __Block_byref_object_copy__63(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__64(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 40);
}

void ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const __CFString *v6;
  CFComparisonResult v7;
  CFComparisonResult v8;
  CFComparisonResult v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  const __CFData *v13;
  const __CFString *v14;
  const __CFString *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  const char *v19;
  int v20;
  const __CFString *v21;
  const __CFURL *v22;
  __CFBundle *v23;
  __CFBundle *v24;
  const __CFURL *v25;
  const __CFURL *v26;
  const char *v27;
  _QWORD v28[7];
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  uint64_t valuePtr;
  char __s[8];
  uint8_t buffer[784];
  void *__p[2];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("OSBundleLoadAddress"));
  valuePtr = 0;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr) && valuePtr)
  {
    v6 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0C9AE78]);
    v7 = CFStringCompare(CFSTR("__kernel__"), v6, 0);
    v8 = CFStringCompare(CFSTR("com.apple.sptm"), v6, 0);
    v9 = CFStringCompare(CFSTR("com.apple.txm"), v6, 0);
    if (v7)
    {
      if (v8)
      {
        if (v9)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "xnu");
          v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)__p);
          if (!v10)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "txm");
          v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)__p);
          if (!v10)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "sptm");
        v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)__p);
        if (!v10)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "xnu");
      v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)__p);
      if (!v10)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    v11 = *((_QWORD *)v10 + 5);
    if (v37 < 0)
      operator delete(__p[0]);
    v12 = CFDictionaryGetValue(theDict, CFSTR("OSBundleUUID"));
    v13 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("OSBundleMachOHeaders"));
    if (v13)
    {
      v14 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("OSBundleExecutablePath"));
      v15 = v14;
      if (v14)
      {
        if ((!CFStringGetCString(v14, (char *)__p, 1024, 0x8000100u) || access((const char *)__p, 4))
          && CFStringGetCString(v15, (char *)__p, 1024, 0x8000100u)
          && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 64))
        {
          bzero(buffer, 0x400uLL);
          bzero(__s, 0x400uLL);
          if (!CFStringGetCString(v6, (char *)buffer, 1024, 0x8000100u)
            || !CFStringGetCString(v15, __s, 1024, 0x8000100u))
          {
            return;
          }
          std::string::basic_string[abi:ne180100]<0>(v31, (char *)buffer);
          std::string::basic_string[abi:ne180100]<0>(v29, __s);
          v16 = std::string::find[abi:ne180100]((uint64_t *)v29, "_development", 0);
          v17 = std::string::find[abi:ne180100]((uint64_t *)v29, "_kasan", 0);
          v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (unsigned __int8 *)v31);
          if (v18)
          {
            v19 = (const char *)(v18 + 40);
            v20 = (char)v18[63];
            if (v16 == -1)
            {
              if (v17 == -1)
              {
                if (v20 < 0)
                  v19 = *(const char **)v19;
                strlcpy((char *)__p, v19, 0x400uLL);
              }
              else
              {
                if (v20 < 0)
                  v19 = *(const char **)v19;
                snprintf((char *)__p, 0x400uLL, "%s%s", v19, "_kasan");
              }
            }
            else
            {
              if (v20 < 0)
                v19 = *(const char **)v19;
              snprintf((char *)__p, 0x400uLL, "%s%s", v19, "_development");
            }
          }
          if (v30 < 0)
            operator delete(v29[0]);
          if (v32 < 0)
            operator delete(v31[0]);
        }
      }
      else
      {
        v21 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("OSBundlePath"));
        if (v21)
        {
          v22 = CFURLCreateWithFileSystemPath(0, v21, kCFURLPOSIXPathStyle, 1u);
          if (v22)
          {
            v23 = CFBundleCreate(0, v22);
            v24 = v23;
            if (v23)
            {
              v25 = CFBundleCopyExecutableURL(v23);
              v26 = v25;
              if (v25)
              {
                CFURLGetFileSystemRepresentation(v25, 1u, (UInt8 *)__p, 1024);
                CFRelease(v26);
              }
              CFRelease(v24);
            }
            CFRelease(v22);
          }
        }
      }
      if (v7 == kCFCompareEqualTo)
      {
        v27 = *(const char **)(a1 + 88);
        if (v27 && !access(v27, 4))
          strlcpy((char *)__p, *(const char **)(a1 + 88), 0x400uLL);
        else
          strcpy((char *)__p, "__kernel__");
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buffer = 0;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Found running kernel dummy entry.\n", buffer, 2u);
        }
      }
      CSCppCFDataMemory::CSCppCFDataMemory((CSCppCFDataMemory *)buffer, v13);
      *(_QWORD *)__s = -1;
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 0x40000000;
      v28[2] = ___ZL14fast_kext_info17CSCppArchitectureNSt3__113unordered_mapINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyNS0_4hashIS7_EENS0_8equal_toIS7_EENS5_INS0_4pairIKS7_yEEEEEEjPKc_block_invoke_75;
      v28[3] = &unk_1E6779090;
      v28[5] = v12;
      v28[6] = v11;
      v28[4] = *(_QWORD *)(a1 + 40);
      iterate_symbol_owners_from_memory((uint64_t)buffer, (char *)__p, 0, 0, 0, (unint64_t *)__s, 0, 1, (uint64_t)v28);
      CSCppCFDataMemory::~CSCppCFDataMemory((CSCppCFDataMemory *)buffer);
    }
  }
}

void sub_1B415AFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

uint64_t __copy_helper_block_e8_48c143_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_yEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,unsigned long long>::unordered_map(a1 + 48, a2 + 48);
}

uint64_t __destroy_helper_block_e8_48c143_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEyNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_yEEEEEE(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 48);
}

uint64_t CFDictionaryBlockApplierCallback(const void *a1, const void *a2, uint64_t (**a3)(_QWORD, _QWORD, _QWORD))
{
  return ((uint64_t (**)(_QWORD, const void *, const void *))a3)[2](a3, a1, a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::unordered_map<std::string,unsigned long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1B415B39C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__construct_node_hash<std::pair<std::string const,unsigned long long> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1B415B60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__construct_node_hash<std::pair<std::string const,unsigned long long> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  v8[5] = *(_QWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1B415B6BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E67790F8;
  v8[1] = a4;
  v8[2] = a2;
  v8[3] = a3;
  v12 = v8;
  CSCppSymbolicator::read_timeline(a1, (uint64_t)v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1B415B79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  CSCppSymbolicator::get_symbol_owners_at_time(v13);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E67790F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E67790F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1},std::allocator<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1}>,void ()(CSCppSymbolOwnerTimeline&)>::target_type()
{
}

double std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::vector<CSCppSymbolOwner*> CSCppSymbolicator::get_symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(unsigned long long,CFUUIDBytes const)::{lambda(CSCppSymbolOwnerTimeline const&)#1} &,CSCppSymbolOwnerTimeline&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  CSCppSymbolOwnerTimeline::symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(a2, a1[1], (_QWORD *)a1[2], (void **)&v6);
  v3 = *a1;
  v4 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  result = *(double *)&v6;
  *(_OWORD *)v3 = v6;
  *(_QWORD *)(v3 + 16) = v7;
  return result;
}

void CSCppSymbolOwnerTimeline::symbol_owners_at_time<unsigned long _CSSymbolicatorForeachSymbolOwnerWithUUIDBytesAtTime<CFUUIDBytes const>(_CSTypeRef,CFUUIDBytes const *,unsigned long long,void({block_pointer})(_CSTypeRef))::{lambda(CSCppSymbolOwner const&)#1}>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void **a4@<X8>)
{
  uint64_t v5;
  CSCppSymbolOwner **v6;
  CSCppSymbolOwner **i;
  uint64_t unload_timestamp_range;
  unint64_t v11;
  CSCppSymbolOwner *v12;
  unint64_t v14;
  CSCppSymbolOwner **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  CSCppSymbolOwner **v22;
  char *v23;
  char *v24;
  CSCppSymbolOwner *v25;

  if ((unint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    v5 = a2;
  else
    v5 = 0x7FFFFFFFFFFFFFFDLL;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v6 = *(CSCppSymbolOwner ***)(a1 + 56);
  for (i = *(CSCppSymbolOwner ***)(a1 + 64); v6 != i; v6 += 2)
  {
    if (a2 != 0x8000000000000001)
    {
      unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*v6);
      if (v5 - unload_timestamp_range >= v11)
        continue;
    }
    v12 = *v6;
    if (*a3 == *((_QWORD *)*v6 + 2) && a3[1] == *((_QWORD *)*v6 + 3))
    {
      v15 = (CSCppSymbolOwner **)a4[1];
      v14 = (unint64_t)a4[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = ((char *)v15 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v18 = v14 - (_QWORD)*a4;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v20);
        else
          v21 = 0;
        v22 = (CSCppSymbolOwner **)&v21[8 * v17];
        *v22 = v12;
        v16 = v22 + 1;
        v24 = (char *)*a4;
        v23 = (char *)a4[1];
        if (v23 != *a4)
        {
          do
          {
            v25 = (CSCppSymbolOwner *)*((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v22 = v25;
          }
          while (v23 != v24);
          v23 = (char *)*a4;
        }
        *a4 = v22;
        a4[1] = v16;
        a4[2] = &v21[8 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v15 = v12;
        v16 = v15 + 1;
      }
      a4[1] = v16;
    }
  }
}

void sub_1B415BA80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *find_core_file_dumped_region_containing_location(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  if (v3 != *(_QWORD **)a1)
  {
    v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[5 * (v4 >> 1)];
      v7 = v6[3] + *v6;
      v8 = v6 + 5;
      v4 += ~(v4 >> 1);
      if (v7 <= a2)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  if (v2 == v3)
    return 0;
  if (a2 - *v2 >= v2[3])
    return 0;
  return v2;
}

void CSCppCoreFileMetadata::~CSCppCoreFileMetadata(CSCppCoreFileMetadata *this)
{
  CSCppCoreFileMetadata *v2;
  ipc_space_t *v3;
  CSCppCoreFileMetadata *v4;
  CSCppCoreFileMetadata *v5;
  BOOL v6;
  void *v7;
  void **v8;

  *(_QWORD *)this = off_1E6779178;
  close(*((_DWORD *)this + 2));
  v2 = (CSCppCoreFileMetadata *)*((_QWORD *)this + 6);
  if (v2 != (CSCppCoreFileMetadata *)((char *)this + 56))
  {
    v3 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    do
    {
      mach_port_deallocate(*v3, *((_DWORD *)v2 + 8));
      v4 = (CSCppCoreFileMetadata *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(CSCppCoreFileMetadata **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (CSCppCoreFileMetadata *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (CSCppCoreFileMetadata *)((char *)this + 56));
  }
  if (*((_BYTE *)this + 112))
  {
    v8 = (void **)((char *)this + 88);
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
}

uint64_t CSCppCoreFileMetadata::thread_get_state(CSCppCoreFileMetadata *this, unsigned int a2, int a3, unsigned int *a4, unsigned int *a5)
{
  char *v5;
  char *v9;
  unsigned int v10;
  BOOL v11;
  char **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int *v32;
  int v33;
  BOOL v34;
  uint64_t *v35;
  const void *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  int *v51;
  int v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t v55;
  _DWORD *v56;
  _QWORD *v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  unint64_t v71;
  size_t v72;
  char *v73;
  char *v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  char v78;
  __int128 v79;
  char *v80;
  char v81;
  char *v82;
  char *v83;
  char *v84;
  _BYTE v85[280];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v5 = (char *)*((_QWORD *)this + 7);
  if (!v5)
    return 4;
  v9 = (char *)this + 56;
  do
  {
    v10 = *((_DWORD *)v5 + 8);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (char **)v5;
    else
      v12 = (char **)(v5 + 8);
    if (v11)
      v9 = v5;
    v5 = *v12;
  }
  while (*v12);
  if (v9 == (char *)this + 56 || *((_DWORD *)v9 + 8) > a2)
    return 4;
  v15 = *((_QWORD *)this + 5);
  v18 = *((_QWORD *)v9 + 7);
  v17 = (int *)(v9 + 56);
  v16 = v18;
  if (v18)
  {
    v19 = v17;
    do
    {
      v20 = *(_DWORD *)(v16 + 32);
      v21 = v20 < a3;
      if (v20 >= a3)
        v22 = (uint64_t *)v16;
      else
        v22 = (uint64_t *)(v16 + 8);
      if (!v21)
        v19 = (int *)v16;
      v16 = *v22;
    }
    while (*v22);
    if (v19 != v17 && v19[8] <= a3)
    {
      v79 = 0uLL;
      v80 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v79, *((const void **)v19 + 5), *((_QWORD *)v19 + 6), *((_QWORD *)v19 + 6) - *((_QWORD *)v19 + 5));
      goto LABEL_93;
    }
  }
  if (!CSArchitectureIsArm64(*((_QWORD *)this + 5)) && !CSArchitectureMatchesArchitecture(v15, 0x200000CuLL))
  {
    if (CSArchitectureIsX86_64(v15))
    {
      if (a3 == 7)
      {
        v60 = *(_QWORD *)v17;
        if (!*(_QWORD *)v17)
          return 4;
        v61 = v17;
        do
        {
          v62 = *(_DWORD *)(v60 + 32);
          v63 = v62 < 4;
          if (v62 >= 4)
            v64 = (uint64_t *)v60;
          else
            v64 = (uint64_t *)(v60 + 8);
          if (!v63)
            v61 = (int *)v60;
          v60 = *v64;
        }
        while (*v64);
        if (v61 == v17)
          return 4;
        if (v61[8] > 4)
          return 4;
        v66 = v61 + 10;
        v65 = *((_QWORD *)v61 + 5);
        if (v66[1] - v65 != 168)
          return 4;
        v37 = 0;
        v67 = 0;
        *(_QWORD *)v85 = 0x2A00000004;
        *(_OWORD *)&v85[120] = *(_OWORD *)(v65 + 112);
        *(_OWORD *)&v85[136] = *(_OWORD *)(v65 + 128);
        *(_OWORD *)&v85[152] = *(_OWORD *)(v65 + 144);
        *(_QWORD *)&v85[168] = *(_QWORD *)(v65 + 160);
        *(_OWORD *)&v85[56] = *(_OWORD *)(v65 + 48);
        *(_OWORD *)&v85[72] = *(_OWORD *)(v65 + 64);
        *(_OWORD *)&v85[88] = *(_OWORD *)(v65 + 80);
        *(_OWORD *)&v85[104] = *(_OWORD *)(v65 + 96);
        *(_OWORD *)&v85[8] = *(_OWORD *)v65;
        *(_OWORD *)&v85[24] = *(_OWORD *)(v65 + 16);
        *(_OWORD *)&v85[40] = *(_OWORD *)(v65 + 32);
        v82 = 0;
        v83 = 0;
        v84 = 0;
        do
        {
          if (v37 >= v84)
          {
            v68 = (unint64_t)v82;
            v69 = (_BYTE *)(v37 - v82);
            v70 = v37 - v82 + 1;
            if (v70 < 0)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v71 = v84 - v82;
            if (2 * (v84 - v82) > (unint64_t)v70)
              v70 = 2 * v71;
            if (v71 >= 0x3FFFFFFFFFFFFFFFLL)
              v72 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72)
              v73 = (char *)operator new(v72);
            else
              v73 = 0;
            v74 = &v69[(_QWORD)v73];
            v75 = &v69[(_QWORD)v73];
            *v75 = v85[v67];
            v76 = v75 + 1;
            if (v37 != (char *)v68)
            {
              v77 = &v37[~v68];
              do
              {
                v78 = *--v37;
                (v77--)[(_QWORD)v73] = v78;
              }
              while (v37 != (char *)v68);
              v37 = v82;
              v74 = v73;
            }
            v82 = v74;
            v84 = &v73[v72];
            if (v37)
              operator delete(v37);
            v37 = v76;
          }
          else
          {
            *v37++ = v85[v67];
          }
          v83 = v37;
          ++v67;
        }
        while (v67 != 176);
        goto LABEL_74;
      }
      if (a3 == 4)
      {
        v50 = *(_QWORD *)v17;
        if (*(_QWORD *)v17)
        {
          v51 = v17;
          do
          {
            v52 = *(_DWORD *)(v50 + 32);
            v53 = v52 < 7;
            if (v52 >= 7)
              v54 = (uint64_t *)v50;
            else
              v54 = (uint64_t *)(v50 + 8);
            if (!v53)
              v51 = (int *)v50;
            v50 = *v54;
          }
          while (*v54);
          if (v51 != v17 && v51[8] <= 7)
          {
            v57 = v51 + 10;
            v56 = (_DWORD *)*((_QWORD *)v51 + 5);
            v55 = v57[1];
            if (v55 - (_QWORD)v56 == 176 && *v56 == 4 && v55 - (_QWORD)(v56 + 2) == 168)
            {
              memset(v85, 0, 24);
              std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v85, v56 + 2, v55, 0xA8uLL);
              goto LABEL_42;
            }
          }
        }
      }
    }
    return 4;
  }
  if (a3 == 1)
  {
    v31 = *(_QWORD *)v17;
    if (!*(_QWORD *)v17)
      return 4;
    v32 = v17;
    do
    {
      v33 = *(_DWORD *)(v31 + 32);
      v34 = v33 < 6;
      if (v33 >= 6)
        v35 = (uint64_t *)v31;
      else
        v35 = (uint64_t *)(v31 + 8);
      if (!v34)
        v32 = (int *)v31;
      v31 = *v35;
    }
    while (*v35);
    if (v32 == v17)
      return 4;
    if (v32[8] > 6)
      return 4;
    v36 = (const void *)*((_QWORD *)v32 + 5);
    if (*((_QWORD *)v32 + 6) - (_QWORD)v36 != 272)
      return 4;
    *(_QWORD *)v85 = 0x4400000006;
    memcpy(&v85[8], v36, 0x110uLL);
    v37 = 0;
    v38 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    do
    {
      if (v37 >= v84)
      {
        v39 = (unint64_t)v82;
        v40 = (_BYTE *)(v37 - v82);
        v41 = v37 - v82 + 1;
        if (v41 < 0)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v42 = v84 - v82;
        if (2 * (v84 - v82) > (unint64_t)v41)
          v41 = 2 * v42;
        if (v42 >= 0x3FFFFFFFFFFFFFFFLL)
          v43 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
          v44 = (char *)operator new(v43);
        else
          v44 = 0;
        v45 = &v40[(_QWORD)v44];
        v46 = &v40[(_QWORD)v44];
        *v46 = v85[v38];
        v47 = v46 + 1;
        if (v37 != (char *)v39)
        {
          v48 = &v37[~v39];
          do
          {
            v49 = *--v37;
            (v48--)[(_QWORD)v44] = v49;
          }
          while (v37 != (char *)v39);
          v37 = v82;
          v45 = v44;
        }
        v82 = v45;
        v84 = &v44[v43];
        if (v37)
          operator delete(v37);
        v37 = v47;
      }
      else
      {
        *v37++ = v85[v38];
      }
      v83 = v37;
      ++v38;
    }
    while (v38 != 280);
LABEL_74:
    *(_QWORD *)&v79 = v82;
    *((_QWORD *)&v79 + 1) = v37;
    v80 = v84;
    goto LABEL_93;
  }
  if (a3 != 6)
    return 4;
  v23 = *(_QWORD *)v17;
  if (!*(_QWORD *)v17)
    return 4;
  v24 = v17;
  do
  {
    v25 = *(_DWORD *)(v23 + 32);
    v26 = v25 < 1;
    if (v25 >= 1)
      v27 = (uint64_t *)v23;
    else
      v27 = (uint64_t *)(v23 + 8);
    if (!v26)
      v24 = (int *)v23;
    v23 = *v27;
  }
  while (*v27);
  if (v24 == v17)
    return 4;
  if (v24[8] > 1)
    return 4;
  v30 = v24 + 10;
  v29 = (_DWORD *)*((_QWORD *)v24 + 5);
  v28 = v30[1];
  if (v28 - (_QWORD)v29 != 280 || *v29 != 6 || v28 - (_QWORD)(v29 + 2) != 272)
    return 4;
  memset(v85, 0, 24);
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v85, v29 + 2, v28, 0x110uLL);
LABEL_42:
  v79 = *(_OWORD *)v85;
  v80 = *(char **)&v85[16];
LABEL_93:
  v81 = 1;
  v58 = (void *)v79;
  v59 = *((_QWORD *)&v79 + 1) - v79;
  if (((*((_QWORD *)&v79 + 1) - (_QWORD)v79) & 3) != 0)
  {
    v13 = 5;
  }
  else if (v59 <= 4 * (unint64_t)*a5)
  {
    memcpy(a4, (const void *)v79, *((_QWORD *)&v79 + 1) - v79);
    v13 = 0;
    *a5 = v59 >> 2;
  }
  else
  {
    v13 = 4;
  }
  if (v58)
  {
    *((_QWORD *)&v79 + 1) = v58;
    operator delete(v58);
  }
  return v13;
}

void sub_1B415C1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t CSCppCoreFileMetadata::task_threads(CSCppCoreFileMetadata *this, unsigned int **a2, unsigned int *a3)
{
  unint64_t v3;
  ipc_space_t *v7;
  uint64_t v8;
  unsigned int *v9;
  CSCppCoreFileMetadata *v10;
  CSCppCoreFileMetadata *v11;
  CSCppCoreFileMetadata *v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  mach_port_name_t v19;
  mach_vm_address_t address;

  v3 = *((_QWORD *)this + 8);
  if (!v3)
    return 4;
  address = 0;
  v7 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  v8 = mach_vm_allocate(*MEMORY[0x1E0C83DA0], &address, 4 * v3, 1);
  if (!(_DWORD)v8)
  {
    v9 = (unsigned int *)address;
    v10 = (CSCppCoreFileMetadata *)*((_QWORD *)this + 6);
    if (v10 != (CSCppCoreFileMetadata *)((char *)this + 56))
    {
      do
      {
        v9[*((unsigned int *)v10 + 10)] = *((_DWORD *)v10 + 8);
        v11 = (CSCppCoreFileMetadata *)*((_QWORD *)v10 + 1);
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = *(CSCppCoreFileMetadata **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (CSCppCoreFileMetadata *)*((_QWORD *)v10 + 2);
            v13 = *(_QWORD *)v12 == (_QWORD)v10;
            v10 = v12;
          }
          while (!v13);
        }
        v10 = v12;
      }
      while (v12 != (CSCppCoreFileMetadata *)((char *)this + 56));
    }
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = mach_port_mod_refs(*v7, v9[v14], 4u, 1);
      if ((_DWORD)v16)
        break;
      v14 = ++v15;
      if (v3 <= v15)
      {
        v8 = 0;
        *a2 = v9;
        *a3 = v3;
        return v8;
      }
    }
    v8 = v16;
    if (v15)
    {
      v18 = v15;
      do
      {
        v19 = *v9++;
        mach_port_deallocate(*v7, v19);
        --v18;
      }
      while (v18);
    }
  }
  return v8;
}

void parse_task_crashinfo_note(char *a1@<X0>, const note_command *a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *size;
  std::string::size_type v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *data;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE *v63;
  uint64_t v64;
  std::string v65;
  char v66;
  std::string v67;
  char v68;
  std::string v69;
  char v70;
  std::string v71;
  char v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  void *v81[3];
  char v82;
  void *v83[3];
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  __n128 v98;
  char *v99;
  char v100;
  std::string v101;
  char v102;
  std::string v103;
  char v104;
  std::string v105;
  char v106;
  std::string __p;
  char v108;
  __int128 v109;
  char v110;
  char v111;
  _BYTE v112[128];

  v6 = (_QWORD *)CSCppFileMemory::CSCppFileMemory(v112, a1, a2->offset);
  v7 = CSCppFileMemory::bytes_at(v6, a2->offset, a2->size);
  v9 = v7;
  if (!v7 || v8 <= 0x28B || *(_DWORD *)v7 != 2)
  {
    *a3 = 0;
    a3[440] = 0;
    goto LABEL_25;
  }
  LOBYTE(v109) = 0;
  v111 = 0;
  v10 = *(_QWORD *)(v7 + 44);
  if (v10 != -1)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(_QWORD *)(v7 + 44));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v10, &__p);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v109, (__n128 *)&__p);
    if (v108)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  v108 = 0;
  v11 = *(_QWORD *)(v9 + 52);
  if (v11 != -1)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(_QWORD *)(v9 + 52));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v11, &v105);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__p, (__n128 *)&v105);
    if (v106)
    {
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
    }
  }
  v105.__r_.__value_.__s.__data_[0] = 0;
  v106 = 0;
  v12 = *(_QWORD *)(v9 + 60);
  if (v12 != -1)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(_QWORD *)(v9 + 60));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v12, &v103);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v105, (__n128 *)&v103);
    if (v104)
    {
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
    }
  }
  v103.__r_.__value_.__s.__data_[0] = 0;
  v104 = 0;
  v13 = *(_QWORD *)(v9 + 68);
  if (v13 != -1)
  {
    CSCppFileMemory::CSCppFileMemory(&v65, a1, *(_QWORD *)(v9 + 68));
    read_path_from_offset_in_cpp_memory((uint64_t)&v65, v13, &v101);
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v103, (__n128 *)&v101);
    if (v102)
    {
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  v101.__r_.__value_.__s.__data_[0] = 0;
  v102 = 0;
  v14 = *(_QWORD *)(v9 + 196);
  if (!v14 || (v15 = *(_QWORD *)(v9 + 188), v15 == -1))
  {
LABEL_50:
    v98.n128_u8[0] = 0;
    v100 = 0;
    v31 = *(_QWORD *)(v9 + 212);
    if (v31)
    {
      v32 = *(_QWORD *)(v9 + 204);
      if (v32 != -1)
      {
        if (!is_mul_ok(v31, 0x38uLL))
        {
          *a3 = 0;
          a3[440] = 0;
LABEL_97:
          if (v100 && v98.n128_u64[0])
          {
            v98.n128_u64[1] = v98.n128_u64[0];
            operator delete((void *)v98.n128_u64[0]);
          }
          if (v102 && v101.__r_.__value_.__r.__words[0])
          {
            v101.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
            operator delete(v101.__r_.__value_.__l.__data_);
          }
          goto LABEL_103;
        }
        v63 = a3;
        v33 = 56 * v31;
        CSCppFileMemory::CSCppFileMemory((uint64_t)&v65, a1, v32, 56 * v31);
        v34 = CSCppFileMemory::bytes_at(&v65, v32, v33);
        if (v34 && v35 >= v33)
        {
          v64 = v34;
          v96 = 0uLL;
          v97 = 0;
          std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>((uint64_t)&v98, &v96);
          if (v96.n128_u64[0])
          {
            v96.n128_u64[1] = v96.n128_u64[0];
            operator delete((void *)v96.n128_u64[0]);
          }
          std::vector<CS_vm_object_query_data_t>::reserve((void **)&v98, *(_QWORD *)(v9 + 212));
          v36 = v64;
          if (*(_QWORD *)(v9 + 212))
          {
            v37 = 0;
            v38 = v98.n128_u64[1];
            do
            {
              v39 = (uint64_t *)(v36 + 56 * v37);
              v40 = *v39;
              v41 = v39[1];
              v42 = v39[2];
              v43 = v39[3];
              v44 = v39[4];
              v45 = v39[5];
              v46 = v39[6] & 0x3F;
              if (v38 >= (unint64_t)v99)
              {
                v47 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v38 - v98.n128_u64[0]) >> 3);
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) > 0x492492492492492)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v99[-v98.n128_u64[0]] >> 3) > v48)
                  v48 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v99[-v98.n128_u64[0]] >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v99[-v98.n128_u64[0]] >> 3)) >= 0x249249249249249)
                  v49 = 0x492492492492492;
                else
                  v49 = v48;
                if (v49)
                  data = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>((uint64_t)&v99, v49);
                else
                  data = 0;
                v51 = &data[56 * v47];
                *(_QWORD *)v51 = v40;
                *((_QWORD *)v51 + 1) = v41;
                *((_QWORD *)v51 + 2) = v42;
                *((_QWORD *)v51 + 3) = v43;
                *((_QWORD *)v51 + 4) = v44;
                *((_QWORD *)v51 + 5) = v45;
                v51[48] = v46;
                *(_DWORD *)(v51 + 49) = 0;
                *((_DWORD *)v51 + 13) = 0;
                v52 = (char *)v98.n128_u64[1];
                v53 = v98.n128_u64[0];
                v54 = (unint64_t)v51;
                if (v98.n128_u64[1] != v98.n128_u64[0])
                {
                  do
                  {
                    v55 = *(_OWORD *)(v52 - 56);
                    v56 = *(_OWORD *)(v52 - 40);
                    v57 = *(_OWORD *)(v52 - 24);
                    *(_QWORD *)(v54 - 8) = *((_QWORD *)v52 - 1);
                    *(_OWORD *)(v54 - 24) = v57;
                    *(_OWORD *)(v54 - 40) = v56;
                    *(_OWORD *)(v54 - 56) = v55;
                    v54 -= 56;
                    v52 -= 56;
                  }
                  while (v52 != (char *)v53);
                  v52 = (char *)v53;
                }
                v38 = (unint64_t)(v51 + 56);
                v98.n128_u64[0] = v54;
                v98.n128_u64[1] = (unint64_t)(v51 + 56);
                v99 = &data[56 * v49];
                if (v52)
                  operator delete(v52);
                v36 = v64;
              }
              else
              {
                *(_QWORD *)v38 = v40;
                *(_QWORD *)(v38 + 8) = v41;
                *(_QWORD *)(v38 + 16) = v42;
                *(_QWORD *)(v38 + 24) = v43;
                *(_QWORD *)(v38 + 32) = v44;
                *(_QWORD *)(v38 + 40) = v45;
                *(_BYTE *)(v38 + 48) = v46;
                *(_DWORD *)(v38 + 49) = 0;
                *(_DWORD *)(v38 + 52) = 0;
                v38 += 56;
              }
              v98.n128_u64[1] = v38;
              ++v37;
            }
            while (v37 < *(_QWORD *)(v9 + 212));
          }
        }
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
        a3 = v63;
      }
    }
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v65, &v109);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v67, (__int128 *)&__p);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v69, (__int128 *)&v105);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v71, (__int128 *)&v103);
    v73 = *(_DWORD *)(v9 + 104);
    v74 = *(_QWORD *)(v9 + 156);
    v75 = *(_OWORD *)(v9 + 172);
    v76 = *(_QWORD *)(v9 + 12);
    v77 = *(_OWORD *)(v9 + 28);
    v78 = *(_QWORD *)(v9 + 84);
    v79 = *(_QWORD *)(v9 + 92);
    v80 = *(_DWORD *)(v9 + 100);
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v81, (uint64_t)&v101);
    std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v83, (uint64_t)&v98);
    v58 = *(_OWORD *)(v9 + 500);
    v85 = *(_OWORD *)(v9 + 484);
    v86 = v58;
    v59 = *(_OWORD *)(v9 + 532);
    v87 = *(_OWORD *)(v9 + 516);
    v88 = v59;
    v60 = *(_OWORD *)(v9 + 564);
    v89 = *(_OWORD *)(v9 + 548);
    v90 = v60;
    v61 = *(_OWORD *)(v9 + 596);
    v91 = *(_OWORD *)(v9 + 580);
    v92 = v61;
    v62 = *(_OWORD *)(v9 + 628);
    v93 = *(_OWORD *)(v9 + 612);
    v94 = v62;
    v95 = *(_QWORD *)(v9 + 644);
    std::__optional_destruct_base<CSCppCoreFileTaskCrashinfo,false>::__optional_destruct_base[abi:ne180100]<CSCppCoreFileTaskCrashinfo>((uint64_t)a3, (__int128 *)&v65);
    if (v84 && v83[0])
    {
      v83[1] = v83[0];
      operator delete(v83[0]);
    }
    if (v82 && v81[0])
    {
      v81[1] = v81[0];
      operator delete(v81[0]);
    }
    if (v72 && SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (v70 && SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (v68 && SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (v66 && SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    goto LABEL_97;
  }
  if (!(v14 >> 61))
  {
    v16 = a3;
    v17 = 8 * v14;
    CSCppFileMemory::CSCppFileMemory((uint64_t)&v65, a1, *(_QWORD *)(v9 + 188), 8 * v14);
    v19 = CSCppFileMemory::bytes_at(&v65, v15, v17);
    if (v19 && v18 >= v17)
    {
      v98 = 0uLL;
      v99 = 0;
      std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>((uint64_t)&v101, &v98);
      if (v98.n128_u64[0])
      {
        v98.n128_u64[1] = v98.n128_u64[0];
        operator delete((void *)v98.n128_u64[0]);
      }
      std::vector<unsigned long long>::reserve((void **)&v101.__r_.__value_.__l.__data_, *(_QWORD *)(v9 + 196));
      if (*(_QWORD *)(v9 + 196))
      {
        v20 = 0;
        size = (_QWORD *)v101.__r_.__value_.__l.__size_;
        do
        {
          if ((unint64_t)size >= v101.__r_.__value_.__r.__words[2])
          {
            v23 = (_QWORD *)v101.__r_.__value_.__r.__words[0];
            v24 = (uint64_t)((uint64_t)size - v101.__r_.__value_.__r.__words[0]) >> 3;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v26 = v101.__r_.__value_.__r.__words[2] - v101.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v101.__r_.__value_.__r.__words[2] - v101.__r_.__value_.__r.__words[0]) >> 2 > v25)
              v25 = v26 >> 2;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v101.__r_.__value_.__r.__words[2], v27);
              size = (_QWORD *)v101.__r_.__value_.__l.__size_;
              v23 = (_QWORD *)v101.__r_.__value_.__r.__words[0];
            }
            else
            {
              v28 = 0;
            }
            v29 = &v28[8 * v24];
            *(_QWORD *)v29 = *(_QWORD *)(v19 + 8 * v20);
            v22 = (std::string::size_type)(v29 + 8);
            while (size != v23)
            {
              v30 = *--size;
              *((_QWORD *)v29 - 1) = v30;
              v29 -= 8;
            }
            v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
            v101.__r_.__value_.__l.__size_ = v22;
            v101.__r_.__value_.__r.__words[2] = (std::string::size_type)&v28[8 * v27];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *size = *(_QWORD *)(v19 + 8 * v20);
            v22 = (std::string::size_type)(size + 1);
          }
          v101.__r_.__value_.__l.__size_ = v22;
          ++v20;
          size = (_QWORD *)v22;
        }
        while (v20 < *(_QWORD *)(v9 + 196));
      }
    }
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v65);
    a3 = v16;
    goto LABEL_50;
  }
  *a3 = 0;
  a3[440] = 0;
LABEL_103:
  if (v104 && SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (v106 && SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v108 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v111 && v110 < 0)
    operator delete((void *)v109);
LABEL_25:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v112);
}

void sub_1B415CBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a69;
  void *a71;
  uint64_t a72;
  uint64_t v72;
  void *v74;

  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a13);
  if (LOBYTE(STACK[0x208]) && a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  if (LOBYTE(STACK[0x228]))
  {
    v74 = (void *)STACK[0x210];
    if (STACK[0x210])
    {
      STACK[0x218] = (unint64_t)v74;
      operator delete(v74);
    }
  }
  if (LOBYTE(STACK[0x248]) && SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (LOBYTE(STACK[0x268]) && SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (LOBYTE(STACK[0x288]) && SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (*(_BYTE *)(v72 - 216))
  {
    if (*(char *)(v72 - 217) < 0)
      operator delete(*(void **)(v72 - 240));
  }
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)(v72 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<unsigned long long>>::operator=[abi:ne180100]<std::vector<unsigned long long>,void>(uint64_t a1, __n128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    std::vector<CSSymbolicatorAotImageInfo>::__move_assign(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<CS_vm_object_query_data_t>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *data;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 56;
    data = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>(v3, a2);
    v7 = &data[56 * v5];
    v9 = &data[56 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 56);
        v14 = *(_OWORD *)(v10 - 40);
        v15 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 56;
        v10 -= 56;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_name(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  uint64_t result;
  const char *v4;

  if (!*((_BYTE *)this + 560))
    return 4;
  result = 4;
  if (a2 && *((_BYTE *)this + 144))
  {
    v4 = (char *)this + 120;
    if (*((char *)this + 143) < 0)
      v4 = *(const char **)v4;
    result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_path(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  uint64_t result;
  const char *v4;

  if (!*((_BYTE *)this + 560))
    return 4;
  result = 4;
  if (a2 && *((_BYTE *)this + 176))
  {
    v4 = (char *)this + 152;
    if (*((char *)this + 175) < 0)
      v4 = *(const char **)v4;
    result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_parent_proc_name(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  uint64_t result;
  const char *v4;

  if (!*((_BYTE *)this + 560))
    return 4;
  result = 4;
  if (a2 && *((_BYTE *)this + 208))
  {
    v4 = (char *)this + 184;
    if (*((char *)this + 207) < 0)
      v4 = *(const char **)v4;
    result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_parent_proc_path(CSCppCoreFileDarwinMetadata *this, const char **a2)
{
  uint64_t result;
  const char *v4;

  if (!*((_BYTE *)this + 560))
    return 4;
  result = 4;
  if (a2 && *((_BYTE *)this + 240))
  {
    v4 = (char *)this + 216;
    if (*((char *)this + 239) < 0)
      v4 = *(const char **)v4;
    result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_pid(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_DWORD *)this + 70);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ppid(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_DWORD *)this + 71);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_starttime_sec(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 36);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_starttime_usec(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 37);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_userstack(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 38);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_flags(CSCppCoreFileDarwinMetadata *this, unsigned int *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_DWORD *)this + 78);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_argslen(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_DWORD *)this + 79);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_proc_argc(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_DWORD *)this + 80);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_dirty_flags(CSCppCoreFileDarwinMetadata *this, int *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_DWORD *)this + 62);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_dyld_all_image_infos_addr(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 32);
    }
  }
  return result;
}

__n128 CSCppCoreFileDarwinMetadata::get_dyld_shared_cache_range(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 560))
    {
      result = *(__n128 *)(a1 + 264);
      *a2 = result;
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_architecture(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 560))
    {
      result = 0;
      *a2 = *(_QWORD *)(a1 + 40);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_internal(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 49);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_internal_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 50);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_iokit_mapped(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 51);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_alternate_accounting(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 52);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_alternate_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 53);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_purgable_nonvolatile(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 54);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_purgable_nonvolatile_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 55);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_page_table(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 56);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_phys_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 57);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_phys_footprint_lifetime_max(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 58);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_network_nonvolatile(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 59);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_network_nonvolatile_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 60);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_wired_mem(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 61);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_tagged_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 62);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_tagged_footprint_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 63);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_media_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 64);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_media_footprint_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 65);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_graphics_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 66);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_graphics_footprint_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 67);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_neural_footprint(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 68);
    }
  }
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_ledger_neural_footprint_compressed(CSCppCoreFileDarwinMetadata *this, unint64_t *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    if (*((_BYTE *)this + 560))
    {
      result = 0;
      *a2 = *((_QWORD *)this + 69);
    }
  }
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_name(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_path(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_parent_proc_name(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_parent_proc_path(CSCppCoreFileExclavesMetadata *this, const char **a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = "";
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_pid(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  uint64_t result;
  int v4;

  if (!a2)
    return 4;
  result = 0;
  v4 = *((_DWORD *)this + 32);
  if (v4 < 0)
    v4 = -v4;
  *a2 = v4;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_flags(CSCppCoreFileExclavesMetadata *this, unsigned int *a2)
{
  uint64_t result;

  result = 4;
  if (a2)
  {
    *a2 = 4;
    return 0;
  }
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ppid(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_starttime_sec(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_starttime_usec(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_userstack(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_argslen(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_proc_argc(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dirty_flags(CSCppCoreFileExclavesMetadata *this, int *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dyld_all_image_infos_addr(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_dyld_shared_cache_range()
{
  return 5;
}

uint64_t CSCppCoreFileExclavesMetadata::get_architecture(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_internal(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_internal_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_iokit_mapped(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_alternate_accounting(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_alternate_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_purgable_nonvolatile(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_purgable_nonvolatile_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_page_table(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_phys_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_phys_footprint_lifetime_max(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_network_nonvolatile(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_network_nonvolatile_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_wired_mem(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_tagged_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_tagged_footprint_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_media_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_media_footprint_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_graphics_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_graphics_footprint_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_neural_footprint(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_ledger_neural_footprint_compressed(CSCppCoreFileExclavesMetadata *this, unint64_t *a2)
{
  uint64_t result;

  if (!a2)
    return 4;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t CSCppCoreFileMetadata::has_info_for_memory_analysis(CSCppCoreFileMetadata *this)
{
  return *((unsigned __int8 *)this + 112);
}

BOOL CSCppCoreFileDarwinMetadata::has_info_for_memory_analysis(CSCppCoreFileDarwinMetadata *this)
{
  return *((_BYTE *)this + 112) && *((_BYTE *)this + 560) != 0;
}

uint64_t CSCppCoreFileExclavesMetadata::has_info_for_memory_analysis(CSCppCoreFileExclavesMetadata *this)
{
  return *((unsigned __int8 *)this + 112);
}

void parse_vm_info_note(const char *a1@<X0>, const note_command *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t offset;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int *v16;
  char v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t *v25;
  void **v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t **v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t **v46;
  unint64_t **v47;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  const char *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  void *v79;
  char *v80;
  char *i;
  void *p_p;
  char *v83;
  char *v84;
  void *__p;
  _BYTE *v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  _QWORD v92[15];
  void **v93[2];

  CSCppFileMemory::CSCppFileMemory(v92, a1, a2->offset);
  v6 = CSCppFileMemory::bytes_at(v92, a2->offset, a2->size);
  if (v6)
    v8 = v7 >= 0x10;
  else
    v8 = 0;
  if (!v8 || *(_DWORD *)v6 != 2)
    goto LABEL_13;
  v9 = *(_QWORD *)(v6 + 8);
  offset = a2->offset;
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v92);
  if (135 * v9 + 16 > a2->size)
  {
    *a3 = 0;
    a3[24] = 0;
    return;
  }
  CSCppFileMemory::CSCppFileMemory(v92, a1, offset + 16);
  v11 = CSCppFileMemory::bytes_at(v92, offset + 16, 135 * v9);
  v13 = v11;
  if (v11 && v12 >= 135 * v9)
  {
    v89 = 0;
    v90 = 0;
    v91 = 0;
    LOBYTE(v88) = 0;
    if (v9)
    {
      v15 = v88;
      v16 = (unsigned int *)(v11 + 16);
      v17 = 1;
      v18 = v9;
      do
      {
        v19 = v16;
        if ((v17 & 1) == 0)
        {
          if (v15 >= *v16)
            v19 = &v88;
          else
            v19 = v16;
        }
        v17 = 0;
        v15 = *v19;
        v88 = *v19;
        v16 = (unsigned int *)((char *)v16 + 135);
        --v18;
      }
      while (v18);
      v20 = v15 + 1;
      if (v15 != -1)
      {
        do
        {
          __p = 0;
          v86 = 0;
          v87 = 0;
          std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::push_back[abi:ne180100]((uint64_t *)&v89, (uint64_t)&__p);
          if (__p)
          {
            v86 = __p;
            operator delete(__p);
          }
          --v20;
        }
        while (v20);
      }
      v72 = a1;
      v73 = a3;
      v21 = 0;
      if (v9 <= 1)
        v22 = 1;
      else
        v22 = v9;
      do
      {
        v23 = v13 + 135 * v21;
        v24 = &v89[3 * *(unsigned int *)(v23 + 16)];
        v26 = (void **)(v24 + 1);
        v25 = (uint64_t *)v24[1];
        v28 = v24 + 2;
        v27 = v24[2];
        if ((unint64_t)v25 >= v27)
        {
          v30 = (uint64_t)((uint64_t)v25 - *v24) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v31 = v27 - *v24;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v28, v33);
          else
            v34 = 0;
          v35 = &v34[8 * v30];
          *(_QWORD *)v35 = v23;
          v29 = v35 + 8;
          v36 = (char *)*v26;
          v37 = (char *)*v24;
          if (*v26 != (void *)*v24)
          {
            do
            {
              v38 = *((_QWORD *)v36 - 1);
              v36 -= 8;
              *((_QWORD *)v35 - 1) = v38;
              v35 -= 8;
            }
            while (v36 != v37);
            v36 = (char *)*v24;
          }
          *v24 = (unint64_t)v35;
          *v26 = v29;
          *v28 = &v34[8 * v33];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *v25 = v23;
          v29 = v25 + 1;
        }
        *v26 = v29;
        ++v21;
      }
      while (v21 != v22);
      v40 = v89;
      v39 = v90;
      if (v89 == v90)
        goto LABEL_60;
      do
      {
        v41 = *v40;
        v42 = (unint64_t **)v40[1];
        v40 += 3;
        v43 = 126 - 2 * __clz((uint64_t)((uint64_t)v42 - v41) >> 3);
        if (v42 == (unint64_t **)v41)
          v44 = 0;
        else
          v44 = v43;
        std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>(v41, v42, v44, 1);
      }
      while (v40 != v39);
      v45 = v89;
      v40 = v90;
      if (v89 == v90)
      {
LABEL_60:
        v49 = v40;
LABEL_61:
        __p = 0;
        v86 = 0;
        v87 = 0;
        p_p = 0;
        v83 = 0;
        v84 = 0;
        v79 = 0;
        v80 = 0;
        for (i = 0; v49 != v40; v49 += 3)
        {
          v50 = *v49;
          v51 = v83;
          if (v83 >= v84)
          {
            v53 = (v83 - (_BYTE *)p_p) >> 3;
            if ((unint64_t)(v53 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v54 = (v84 - (_BYTE *)p_p) >> 2;
            if (v54 <= v53 + 1)
              v54 = v53 + 1;
            if ((unint64_t)(v84 - (_BYTE *)p_p) >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v84, v55);
            else
              v56 = 0;
            v57 = &v56[8 * v53];
            *(_QWORD *)v57 = v50;
            v52 = v57 + 8;
            v59 = (char *)p_p;
            v58 = v83;
            if (v83 != p_p)
            {
              do
              {
                v60 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *((_QWORD *)v57 - 1) = v60;
                v57 -= 8;
              }
              while (v58 != v59);
              v58 = (char *)p_p;
            }
            p_p = v57;
            v83 = v52;
            v84 = &v56[8 * v55];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *(_QWORD *)v83 = v50;
            v52 = v51 + 8;
          }
          v83 = v52;
          v61 = v49[1];
          v62 = v80;
          if (v80 >= i)
          {
            v64 = (v80 - (_BYTE *)v79) >> 3;
            if ((unint64_t)(v64 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v65 = (i - (_BYTE *)v79) >> 2;
            if (v65 <= v64 + 1)
              v65 = v64 + 1;
            if ((unint64_t)(i - (_BYTE *)v79) >= 0x7FFFFFFFFFFFFFF8)
              v66 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v66 = v65;
            if (v66)
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&i, v66);
            else
              v67 = 0;
            v68 = &v67[8 * v64];
            *(_QWORD *)v68 = v61;
            v63 = v68 + 8;
            v70 = (char *)v79;
            v69 = v80;
            if (v80 != v79)
            {
              do
              {
                v71 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *((_QWORD *)v68 - 1) = v71;
                v68 -= 8;
              }
              while (v69 != v70);
              v69 = (char *)v79;
            }
            v79 = v68;
            v80 = v63;
            i = &v67[8 * v66];
            if (v69)
              operator delete(v69);
          }
          else
          {
            *(_QWORD *)v80 = v61;
            v63 = v62 + 8;
          }
          v80 = v63;
        }
        if (recursively_create_region_tree((uint64_t *)&p_p, &v79, 0, (uint64_t *)&__p, 0, -1, (uint64_t)v72))
        {
          v75 = 0;
          v76 = 0;
          v74 = 0;
          std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(&v74, (uint64_t)__p, (uint64_t)v86, 0x6DB6DB6DB6DB6DB7 * ((v86 - (_BYTE *)__p) >> 5));
          v77 = 0uLL;
          v78 = 0;
          std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(&v77, v74, v75, 0x6DB6DB6DB6DB6DB7 * ((v75 - v74) >> 5));
          *(_OWORD *)v73 = v77;
          *((_QWORD *)v73 + 2) = v78;
          v78 = 0;
          v77 = 0uLL;
          v73[24] = 1;
          v93[0] = (void **)&v77;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](v93);
          v93[0] = (void **)&v74;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](v93);
        }
        else
        {
          *v73 = 0;
          v73[24] = 0;
        }
        if (v79)
        {
          v80 = (char *)v79;
          operator delete(v79);
        }
        if (p_p)
        {
          v83 = (char *)p_p;
          operator delete(p_p);
        }
        p_p = &__p;
        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      }
      else
      {
        while (1)
        {
          v46 = (unint64_t **)v45[1];
          v47 = (unint64_t **)(*v45 + 8);
          if ((unint64_t)v46 - *v45 >= 9 && v47 != v46)
            break;
LABEL_58:
          v45 += 3;
          if (v45 == v40)
          {
            v49 = v89;
            v40 = v90;
            goto LABEL_61;
          }
        }
        while (!CSRangeIntersectsRange(**(v47 - 1), (*(v47 - 1))[1], **v47, (*v47)[1]))
        {
          if (++v47 == (unint64_t **)v45[1])
            goto LABEL_58;
        }
        *v73 = 0;
        v73[24] = 0;
      }
    }
    else
    {
      *a3 = 0;
      a3[24] = 0;
    }
    __p = &v89;
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
LABEL_13:
    *a3 = 0;
    a3[24] = 0;
  }
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v92);
}

void sub_1B415DF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char **a22,char **a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  *(_QWORD *)(v32 - 96) = &a12;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a22)
  {
    a23 = a22;
    operator delete(a22);
  }
  a22 = &a25;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a25 = &a29;
  std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a32);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B415E114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL recursively_create_region_tree(uint64_t *a1, _QWORD *a2, unsigned int a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t **v7;
  _BOOL8 result;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v27[6];
  uint64_t v28;
  std::string v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[32];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  std::string v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 __p;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58[3];
  char v59;
  _QWORD v60[3];
  std::string v61;
  char v62;
  __int128 v63;
  char v64;
  char v65;
  void **v66;

  v22 = *a1;
  v7 = *(unint64_t ***)(*a1 + 8 * a3);
  result = 1;
  if (v7 != *(unint64_t ***)(*a2 + 8 * a3))
  {
    v21 = a3 + 1;
    v11 = a3;
    while (1)
    {
      v12 = *v7;
      v14 = **v7;
      v13 = (*v7)[1];
      if (!CSRangeContainsRange(a5, a6, v14, v13))
        break;
      v15 = v12[1];
      if (!v15)
      {
        LOBYTE(v27[0]) = 0;
        v40 = 0;
LABEL_45:
        std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v27);
        return 0;
      }
      v16 = a5;
      v17 = *v12;
      LOBYTE(v63) = 0;
      v65 = 0;
      v18 = *(unint64_t *)((char *)v12 + 95);
      if (v18 != -1)
      {
        CSCppFileMemory::CSCppFileMemory(&v41, a7, v18);
        read_path_from_offset_in_cpp_memory((uint64_t)&v41, *(unint64_t *)((char *)v12 + 95), &v61);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v63, (__n128 *)&v61);
        if (v62 && SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v41);
      }
      v60[0] = a7;
      v60[1] = v17;
      v60[2] = v15;
      cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()((uint64_t)v60, *(unint64_t *)((char *)v12 + 111), *(unint64_t *)((char *)v12 + 103), (uint64_t)&v61);
      cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()((uint64_t)v60, *(unint64_t *)((char *)v12 + 127), *(unint64_t *)((char *)v12 + 119), (uint64_t)v58);
      *(_QWORD *)&v41 = v17;
      *((_QWORD *)&v41 + 1) = v15;
      v42 = *((_OWORD *)v12 + 1);
      *(_QWORD *)v43 = v12[4];
      *(_OWORD *)&v43[8] = *(_OWORD *)(v12 + 5);
      *(_QWORD *)&v43[24] = v12[7];
      LOWORD(v44) = *((_WORD *)v12 + 32);
      BYTE2(v44) = *((_BYTE *)v12 + 66);
      *(_WORD *)((char *)&v44 + 3) = *(_WORD *)((char *)v12 + 67);
      *((_QWORD *)&v44 + 1) = *(unint64_t *)((char *)v12 + 69);
      LOWORD(v45) = *(_WORD *)((char *)v12 + 77);
      DWORD1(v45) = *(_DWORD *)((char *)v12 + 79);
      *((_QWORD *)&v45 + 1) = *(unint64_t *)((char *)v12 + 83);
      v46 = *(unsigned int *)((char *)v12 + 91);
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v47, &v63);
      std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]((uint64_t)&v49, (uint64_t)&v61);
      a5 = v16;
      std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100]((uint64_t)&__p, (uint64_t)v58);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v27[4] = v44;
      v27[5] = v45;
      v28 = v46;
      v27[0] = v41;
      v27[1] = v42;
      v27[2] = *(_OWORD *)v43;
      v27[3] = *(_OWORD *)&v43[16];
      v29.__r_.__value_.__s.__data_[0] = 0;
      v30 = 0;
      if (v48)
      {
        v29 = v47;
        memset(&v47, 0, sizeof(v47));
        v30 = 1;
      }
      LOBYTE(v31) = 0;
      v33 = 0;
      if (v51)
      {
        v31 = v49;
        v32 = v50;
        v50 = 0;
        v49 = 0uLL;
        v33 = 1;
      }
      LOBYTE(v34) = 0;
      v36 = 0;
      if (v54)
      {
        v34 = __p;
        v35 = v53;
        v53 = 0;
        __p = 0uLL;
        v36 = 1;
      }
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v56 = 0;
      v57 = 0;
      v55 = 0;
      v40 = 1;
      v66 = (void **)&v55;
      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v66);
      if (v54 && (_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v51 && (_QWORD)v49)
      {
        *((_QWORD *)&v49 + 1) = v49;
        operator delete((void *)v49);
      }
      if (v48 && SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (v59 && v58[0])
      {
        v58[1] = v58[0];
        operator delete(v58[0]);
      }
      if (v62 && v61.__r_.__value_.__r.__words[0])
      {
        v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (v65 && v64 < 0)
        operator delete((void *)v63);
      if (!v40)
        goto LABEL_45;
      v19 = a4[1];
      if (v19 >= a4[2])
      {
        v20 = std::vector<CSCppCoreFileRegionInfo>::__push_back_slow_path<CSCppCoreFileRegionInfo const&>(a4, v27);
      }
      else
      {
        CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo(a4[1], v27);
        v20 = v19 + 224;
        a4[1] = v19 + 224;
      }
      a4[1] = v20;
      if (((a1[1] - *a1) >> 3) - 1 > v11
        && (recursively_create_region_tree(a1, a2, v21, v20 - 24, v14, v13, a7) & 1) == 0)
      {
        goto LABEL_45;
      }
      *(_QWORD *)(v22 + 8 * v11) += 8;
      std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v27);
      v7 = *(unint64_t ***)(v22 + 8 * v11);
      if (v7 == *(unint64_t ***)(*a2 + 8 * v11))
        return 1;
    }
    if (v14 >= a5)
      return !CSRangeIntersectsRange(a5, a6, v14, v13);
    return 0;
  }
  return result;
}

void sub_1B415E590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  *(_QWORD *)(v11 + 8) = v12;
  std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *result;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  if (a4 - 1 == a3)
  {
    result = find_core_file_region_info_containing_or_after_location((char **)(a5 + 200), a2);
    if (*(char **)(a5 + 208) == result)
      return 0;
  }
  else
  {
    v7 = *(char **)(a5 + 200);
    v8 = *(char **)(a5 + 208);
    if (v8 != v7)
    {
      v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 5);
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[224 * (v9 >> 1)];
        v13 = *(_QWORD *)v11;
        v14 = *((_QWORD *)v11 + 1);
        v12 = v11 + 224;
        v9 += ~(v9 >> 1);
        if (v14 + v13 <= a2)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    if (v7 == v8 || a2 - *(_QWORD *)v7 >= *((_QWORD *)v7 + 1))
      return 0;
    else
      return (char *)CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address();
  }
  return result;
}

char *find_core_file_region_info_containing_or_after_location(char **a1, unint64_t a2)
{
  char *result;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  result = a1[1];
  if (result != v3)
  {
    v4 = 0x6DB6DB6DB6DB6DB7 * ((result - v3) >> 5);
    do
    {
      v5 = v4 >> 1;
      v6 = (uint64_t *)&v3[224 * (v4 >> 1)];
      v8 = *v6;
      v9 = v6[1];
      v7 = (char *)(v6 + 28);
      v4 += ~(v4 >> 1);
      if (v9 + v8 <= a2)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
    return v3;
  }
  return result;
}

uint64_t CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v10;
  char v11;

  if (a3 > a4)
    return 0;
  if (*(_BYTE *)(a5 + 68))
  {
    v5 = *(_QWORD **)(a5 + 200);
    v6 = *(_QWORD **)(a5 + 208);
    if (v5 == v6)
    {
      return a5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      v10 = a3 + 1;
      while (1)
      {
        if (v5[1] + *v5 > a2)
        {
          a5 = CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address(a1, a2, v10, a4, v5);
          if (v11)
            break;
        }
        v5 += 28;
        if (v5 == v6)
          return a5 & 0xFFFFFFFFFFFFFF00;
      }
    }
  }
  return a5;
}

uint64_t CSCppCoreFileRegionsTree::get_region_at_address(char **this, unint64_t a2, unint64_t a3)
{
  char *core_file_region_info_containing_or_after_location;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  core_file_region_info_containing_or_after_location = find_core_file_region_info_containing_or_after_location(this, a2);
  v7 = this[1];
  if (v7 == core_file_region_info_containing_or_after_location)
    return 0;
  v8 = (uint64_t)core_file_region_info_containing_or_after_location;
  if (a3
    && a2 - *(_QWORD *)core_file_region_info_containing_or_after_location >= *((_QWORD *)core_file_region_info_containing_or_after_location
                                                                             + 1))
  {
LABEL_4:
    while (1)
    {
      v9 = CSCppCoreFileRegionsTree::recursively_search_forward_for_objects_at_or_after_address((uint64_t)this, a2, 0, a3, v8);
      if (v10)
        break;
      v8 += 224;
      if ((char *)v8 == v7)
        return 0;
    }
    return v9;
  }
  if (a3 && core_file_region_info_containing_or_after_location[68])
  {
    v9 = (uint64_t)CSCppCoreFileRegionsTree::recursively_search_for_region_at_specific_address((uint64_t)this, a2, 1, a3, (uint64_t)core_file_region_info_containing_or_after_location);
    if (!v11)
      goto LABEL_4;
    return v9;
  }
  return v8;
}

void CSCppCoreFileRegionsTree::get_dispositions(char **this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v9;
  __int128 v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t region_at_address;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v39;
  void *__p[2];
  char *v41;

  if (a2 % a4 || (v9 = a3 % a4) != 0)
  {
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 24) = 0;
    return;
  }
  v41 = 0;
  v11 = 0uLL;
  *(_OWORD *)__p = 0u;
  v12 = a2 + a3;
  if (a2 >= a2 + a3)
  {
LABEL_49:
    *(_OWORD *)a6 = v11;
    *(_QWORD *)(a6 + 16) = v9;
    *(_BYTE *)(a6 + 24) = 1;
    return;
  }
  v37 = a3 / a4;
  v14 = a2;
  v39 = a2 + a3;
  while (1)
  {
    region_at_address = CSCppCoreFileRegionsTree::get_region_at_address(this, v14, 0x270FuLL);
    if (!v16)
      break;
    v17 = (unint64_t *)region_at_address;
    if (*(_BYTE *)(region_at_address + 68))
      break;
    v18 = *(_QWORD *)region_at_address;
    if (v14 != a2 && v14 != v18)
      break;
    if (*(_BYTE *)(region_at_address + 67) != 3)
    {
      v31 = region_at_address + 136;
      v32 = 168;
      if (a5)
        v32 = 136;
      else
        v31 = region_at_address + 168;
      if (!*(_BYTE *)(v31 + 24))
        break;
      v33 = *(char **)(region_at_address + v32);
      if (v14 > v18)
        v34 = &v33[2 * ((v14 - v18) / a4)];
      else
        v34 = v33;
      v35 = (uint64_t)(*(_QWORD *)(v31 + 8) - (_QWORD)v33) >> 1;
      if (v35 >= (v12 - v14) / a4)
        v36 = (v12 - v14) / a4;
      else
        v36 = v35;
      std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((uint64_t)__p, (uint64_t)__p[1], v34, &v34[2 * v36], v36);
      goto LABEL_46;
    }
    if (a3 >= a4)
    {
      v19 = 0;
      v20 = (char *)__p[1];
      if (v37 <= 1)
        v21 = 1;
      else
        v21 = v37;
      do
      {
        if (v20 >= v41)
        {
          v23 = (char *)__p[0];
          v24 = v20 - (char *)__p[0];
          if (v20 - (char *)__p[0] <= -3)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v25 = v24 >> 1;
          if (v41 - (char *)__p[0] <= (unint64_t)((v24 >> 1) + 1))
            v26 = v25 + 1;
          else
            v26 = v41 - (char *)__p[0];
          if ((unint64_t)(v41 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFFELL)
            v27 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)&v41, v27);
            v23 = (char *)__p[0];
            v20 = (char *)__p[1];
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[2 * v25];
          *(_WORD *)v29 = 0;
          v22 = v29 + 2;
          while (v20 != v23)
          {
            v30 = *((_WORD *)v20 - 1);
            v20 -= 2;
            *((_WORD *)v29 - 1) = v30;
            v29 -= 2;
          }
          __p[0] = v29;
          __p[1] = v22;
          v41 = &v28[2 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_WORD *)v20 = 0;
          v22 = v20 + 2;
        }
        __p[1] = v22;
        ++v19;
        v20 = (char *)v22;
      }
      while (v19 != v21);
LABEL_46:
      v18 = *v17;
      v12 = v39;
    }
    v14 = v17[1] + v18;
    if (v14 >= v12)
    {
      v11 = *(_OWORD *)__p;
      v9 = (unint64_t)v41;
      goto LABEL_49;
    }
  }
  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 24) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B415EBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t CSCppCoreFileMetadata::region_filename(char **this, unint64_t a2, char *a3, unsigned int a4)
{
  uint64_t region_at_address;
  char v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;

  if (*((_BYTE *)this + 112))
  {
    region_at_address = CSCppCoreFileRegionsTree::get_region_at_address(this + 11, a2, 0x270FuLL);
    if (v8)
    {
      if (a2 - *(_QWORD *)region_at_address < *(_QWORD *)(region_at_address + 8) && *(_BYTE *)(region_at_address + 128))
      {
        v9 = (const char *)(region_at_address + 104);
        if (*(char *)(region_at_address + 127) < 0)
        {
          v11 = *(_QWORD *)(region_at_address + 112) + 1;
          if (v11 <= a4)
          {
            v9 = *(const char **)v9;
            goto LABEL_12;
          }
        }
        else
        {
          v10 = *(unsigned __int8 *)(region_at_address + 127);
          if (v10 < a4)
          {
            v11 = v10 + 1;
LABEL_12:
            strcpy(a3, v9);
            return v11;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t CSCppCoreFileDarwinMetadata::get_udata_pointers(CSCppCoreFileDarwinMetadata *this, void *__dst, unint64_t *a3)
{
  uint64_t result;
  int64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  result = 4;
  if (a3 && *((_BYTE *)this + 560))
  {
    if (__dst)
    {
      v6 = *((_QWORD *)this + 42) - *((_QWORD *)this + 41);
      if (*a3 < v6 >> 3)
        return 4;
      v7 = (_QWORD *)((char *)this + 328);
      v8 = (_QWORD *)((char *)this + 336);
      memcpy(__dst, *((const void **)this + 41), v6);
    }
    else
    {
      v7 = (_QWORD *)((char *)this + 328);
      v8 = (_QWORD *)((char *)this + 336);
    }
    result = 0;
    *a3 = (uint64_t)(*v8 - *v7) >> 3;
  }
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_udata_pointers(CSCppCoreFileExclavesMetadata *this, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;

  if (!a3)
    return 4;
  result = 0;
  if (!a2)
    *a3 = 0;
  return result;
}

uint64_t CSCppCoreFileDarwinMetadata::get_owned_vm_objects(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t result;
  const void *v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;

  result = 4;
  if (a3 && *(_BYTE *)(a1 + 560))
  {
    v7 = a1 + 360;
    v6 = *(const void **)(a1 + 360);
    v8 = *(_QWORD *)(v7 + 8) - (_QWORD)v6;
    v9 = v8 + 8;
    if (a2)
    {
      if (*a3 < v9)
        return 4;
      *a2 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
      memcpy(a2 + 1, v6, v8);
    }
    result = 0;
    *a3 = v9;
  }
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_owned_vm_objects(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (!a3)
    return 4;
  result = 0;
  *a3 = 0;
  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_purgable_control(char **this, unint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t region_at_address;
  char v9;
  int v10;

  result = 4;
  if (a3 == 1 && a4 && *((_BYTE *)this + 112))
  {
    region_at_address = CSCppCoreFileRegionsTree::get_region_at_address(this + 11, a2, 0x270FuLL);
    if (v9
      && a2 - *(_QWORD *)region_at_address < *(_QWORD *)(region_at_address + 8)
      && (v10 = *(_DWORD *)(region_at_address + 96), v10 != 0x7FFFFFFF))
    {
      result = 0;
      *a4 = v10;
    }
    else
    {
      return 5;
    }
  }
  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_page_range_query(CSCppCoreFileMetadata *this, unint64_t a2, unint64_t a3, _DWORD *a4, unint64_t *a5, int a6)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  char v23;

  v6 = 4;
  if (!a5)
    return v6;
  v7 = a4;
  if (!a4 || !*((_BYTE *)this + 112))
    return v6;
  if (CSArchitectureIsArm(*((_QWORD *)this + 5)) || CSArchitectureIsArm64(*((_QWORD *)this + 5)))
  {
    v13 = 0x4000;
    if (!a3)
      return v6;
  }
  else
  {
    if (!CSArchitectureIsX86_64(*((_QWORD *)this + 5)))
      return 5;
    v13 = 4096;
    if (!a3)
      return v6;
  }
  if (((v13 - 1) & (a3 | a2)) != 0)
    return v6;
  CSCppCoreFileRegionsTree::get_dispositions((char **)this + 11, a2, a3, v13, a6, (uint64_t)&v21);
  if (!v23)
    return 5;
  v14 = v21;
  v15 = v22;
  if (*a5 >= v22 - v21)
  {
    v16 = v22 - v21;
    *a5 = v16;
    if (v15 != v14)
    {
      if (v16 <= 1)
        v17 = 1;
      else
        v17 = v16;
      v18 = v14;
      do
      {
        v19 = *v18++;
        *v7++ = v19;
        --v17;
      }
      while (v17);
      v6 = 0;
      goto LABEL_24;
    }
    v6 = 0;
  }
  else
  {
    v6 = 5;
  }
  if (v14)
LABEL_24:
    operator delete(v14);
  return v6;
}

uint64_t CSCppCoreFileMetadata::mach_vm_region_recurse_submap_short_64(uint64_t a1, unint64_t *a2, _QWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t region_at_address;
  char v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(_BYTE *)(a1 + 112))
    return 4;
  region_at_address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(a1 + 88), *a2, *a4);
  if (!v10)
    return 1;
  v11 = region_at_address;
  result = 0;
  v13 = *(_DWORD *)(v11 + 28);
  v14 = *(_DWORD *)(v11 + 40);
  v15 = *(_DWORD *)(v11 + 60);
  v16 = *(_WORD *)(v11 + 64);
  v17 = *(_WORD *)(v11 + 66);
  v18 = *(unsigned __int8 *)(v11 + 68);
  *(_QWORD *)(a5 + 12) = *(_QWORD *)(v11 + 32);
  v19 = *(_WORD *)(v11 + 80);
  v20 = *(_QWORD *)(v11 + 20);
  *(_WORD *)(a5 + 28) = v16;
  v21 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)a5 = v20;
  *(_DWORD *)(a5 + 8) = v13;
  *(_DWORD *)(a5 + 20) = v14;
  *(_DWORD *)(a5 + 24) = v15;
  *(_WORD *)(a5 + 30) = v17;
  *(_DWORD *)(a5 + 32) = v18;
  *(_QWORD *)(a5 + 36) = v21;
  *(_WORD *)(a5 + 44) = v19;
  *a4 = *(_DWORD *)(v11 + 16);
  *a2 = *(_QWORD *)v11;
  *a3 = *(_QWORD *)(v11 + 8);
  return result;
}

uint64_t CSCppCoreFileMetadata::mach_vm_region_recurse_submap_64(uint64_t a1, unint64_t *a2, _QWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t region_at_address;
  char v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  __int16 v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_BYTE *)(a1 + 112))
    return 4;
  region_at_address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(a1 + 88), *a2, *a4);
  if (!v10)
    return 1;
  v11 = region_at_address;
  result = 0;
  v13 = *(_DWORD *)(v11 + 28);
  v14 = *(_WORD *)(v11 + 64);
  v15 = *(_WORD *)(v11 + 66);
  v16 = *(unsigned __int8 *)(v11 + 68);
  v17 = *(_WORD *)(v11 + 80);
  v18 = *(_QWORD *)(v11 + 88);
  *(_QWORD *)(a5 + 12) = *(_QWORD *)(v11 + 32);
  v19 = *(_DWORD *)(v11 + 84);
  v20 = *(_OWORD *)(v11 + 40);
  v21 = *(_QWORD *)(v11 + 56);
  v22 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)a5 = *(_QWORD *)(v11 + 20);
  *(_DWORD *)(a5 + 8) = v13;
  *(_OWORD *)(a5 + 20) = v20;
  *(_QWORD *)(a5 + 36) = v21;
  *(_WORD *)(a5 + 44) = v14;
  *(_WORD *)(a5 + 46) = v15;
  *(_DWORD *)(a5 + 48) = v16;
  *(_QWORD *)(a5 + 52) = v22;
  *(_WORD *)(a5 + 60) = v17;
  *(_DWORD *)(a5 + 64) = v19;
  *(_QWORD *)(a5 + 68) = v18;
  *a4 = *(_DWORD *)(v11 + 16);
  *a2 = *(_QWORD *)v11;
  *a3 = *(_QWORD *)(v11 + 8);
  return result;
}

uint64_t CSCppCoreFileExclavesMetadata::get_exclave_vm_flags_for_address(CSCppCoreFileExclavesMetadata *this, unint64_t a2, unsigned int *a3)
{
  uint64_t region_at_address;
  char v5;
  uint64_t v6;
  uint64_t result;

  if (!a3)
    return 4;
  if (!*((_BYTE *)this + 112))
    return 4;
  region_at_address = CSCppCoreFileRegionsTree::get_region_at_address((char **)this + 11, a2, 0);
  if (!v5)
    return 1;
  v6 = region_at_address;
  result = 0;
  *a3 = *(_DWORD *)(v6 + 100);
  return result;
}

uint64_t parse_addrable_bits_note(const char *a1, const note_command *a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[15];

  if (a2->size >= 0x10)
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2->offset);
    v5 = (int *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11[0] + 32))(v11, a2->offset, 16);
    if (v6 >= 0x10
      && ((v7 = *v5, *v5 == 4) || v7 == 3 || v7 == 2)
      && (v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11[0] + 32))(v11, a2->offset, 16),
          v9 >= 0x10))
    {
      v3 = ~(-1 << *(_DWORD *)(v8 + 4));
      v4 = v3 & 0x7FFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v3) = 0;
      v4 = 0;
    }
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }
  else
  {
    LOBYTE(v3) = 0;
    v4 = 0;
  }
  return v4 & 0x7FFFFFFFFFFFFF00 | v3;
}

void sub_1B415F2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

void CSCppCoreFileDarwinMetadata::~CSCppCoreFileDarwinMetadata(CSCppCoreFileDarwinMetadata *this)
{
  CSCppCoreFileDarwinMetadata::~CSCppCoreFileDarwinMetadata(this);
  JUMPOUT(0x1B5E36940);
}

{
  *(_QWORD *)this = &off_1E67792E8;
  if (*((_BYTE *)this + 560))
    CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo((CSCppCoreFileDarwinMetadata *)((char *)this + 120));
  CSCppCoreFileMetadata::~CSCppCoreFileMetadata(this);
}

void CSCppCoreFileExclavesMetadata::~CSCppCoreFileExclavesMetadata(CSCppCoreFileExclavesMetadata *this)
{
  CSCppCoreFileMetadata::~CSCppCoreFileMetadata(this);
  JUMPOUT(0x1B5E36940);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B415F384(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B415F43C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1B415F568(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<unsigned long long>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned long long>,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_1B415F608(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<std::vector<unsigned long long>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned long long>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(result, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::unique_ptr<CSCppDwarfAttributeAction>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B415F6C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<CS_vm_object_query_data_t>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_1B415F710(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<std::vector<CS_vm_object_query_data_t>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<CS_vm_object_query_data_t>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<CS_vm_object_query_data_t>::__init_with_size[abi:ne180100]<CS_vm_object_query_data_t*,CS_vm_object_query_data_t*>(result, *(const void **)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<CS_vm_object_query_data_t>::__init_with_size[abi:ne180100]<CS_vm_object_query_data_t*,CS_vm_object_query_data_t*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CS_vm_object_query_data_t>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B415F7E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CS_vm_object_query_data_t>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CS_vm_object_query_data_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

__n128 std::__optional_destruct_base<CSCppCoreFileTaskCrashinfo,false>::__optional_destruct_base[abi:ne180100]<CSCppCoreFileTaskCrashinfo>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  __int128 v17;
  __int128 v18;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v4 = a2[4];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    v5 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v5;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 12) = 0;
    *(_BYTE *)(a1 + 120) = 1;
  }
  v6 = a2[10];
  v7 = a2[11];
  v8 = *(__int128 *)((char *)a2 + 188);
  v10 = a2[8];
  v9 = a2[9];
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 188) = v8;
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 232) = 0;
  if (*((_BYTE *)a2 + 232))
  {
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_OWORD *)(a1 + 208) = a2[13];
    *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
    *((_QWORD *)a2 + 26) = 0;
    *((_QWORD *)a2 + 27) = 0;
    *((_QWORD *)a2 + 28) = 0;
    *(_BYTE *)(a1 + 232) = 1;
  }
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*((_BYTE *)a2 + 264))
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 240) = a2[15];
    *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
    *((_QWORD *)a2 + 30) = 0;
    *((_QWORD *)a2 + 31) = 0;
    *((_QWORD *)a2 + 32) = 0;
    *(_BYTE *)(a1 + 264) = 1;
  }
  v11 = a2[17];
  v12 = a2[19];
  *(_OWORD *)(a1 + 288) = a2[18];
  *(_OWORD *)(a1 + 304) = v12;
  *(_OWORD *)(a1 + 272) = v11;
  v13 = a2[20];
  v14 = a2[21];
  v15 = a2[23];
  *(_OWORD *)(a1 + 352) = a2[22];
  *(_OWORD *)(a1 + 368) = v15;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v14;
  result = (__n128)a2[24];
  v17 = a2[25];
  v18 = a2[26];
  *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
  *(_OWORD *)(a1 + 400) = v17;
  *(_OWORD *)(a1 + 416) = v18;
  *(__n128 *)(a1 + 384) = result;
  *(_BYTE *)(a1 + 440) = 1;
  return result;
}

void CSCppCoreFileTaskCrashinfo::~CSCppCoreFileTaskCrashinfo(CSCppCoreFileTaskCrashinfo *this)
{
  void *v2;
  void *v3;

  if (*((_BYTE *)this + 264))
  {
    v2 = (void *)*((_QWORD *)this + 30);
    if (v2)
    {
      *((_QWORD *)this + 31) = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 232))
  {
    v3 = (void *)*((_QWORD *)this + 26);
    if (v3)
    {
      *((_QWORD *)this + 27) = v3;
      operator delete(v3);
    }
  }
  if (*((_BYTE *)this + 120) && *((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((_BYTE *)this + 56) && *((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*(void **)this);
  }
}

uint64_t std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::reference_wrapper<portable_region_info_t const>>>,std::reverse_iterator<std::vector<std::reference_wrapper<portable_region_info_t const>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>(unint64_t result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t **v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t **v18;
  unint64_t **v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t **v23;
  unint64_t **v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t **v28;
  BOOL v29;
  unint64_t *v30;
  unint64_t **v31;
  unint64_t **v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t **v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t **v42;
  unint64_t **v43;
  unint64_t **v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t **v51;
  BOOL v53;
  uint64_t v54;
  unint64_t **v55;
  unint64_t *v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t **v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t **v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  unint64_t **v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t ***v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t **v78;
  unint64_t **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t **v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v88;
  unint64_t *v89;

  v7 = (unint64_t **)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v40 = *(a2 - 1);
        v41 = *v8;
        if (*v40 < **v8)
        {
          *v8 = v40;
          *(a2 - 1) = v41;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v42 = v8 + 1;
        v43 = v8 + 2;
        v44 = v8 + 3;
        result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v8, v8 + 1, v8 + 2, v8 + 3);
        v45 = *(a2 - 1);
        v46 = v8[3];
        if (*v45 < *v46)
        {
          *v44 = v45;
          *(a2 - 1) = v46;
          v47 = *v44;
          v48 = *v43;
          if (**v44 < **v43)
          {
            *v43 = v47;
            *v44 = v48;
            v49 = *v42;
            if (*v47 < **v42)
            {
              v8[1] = v47;
              v8[2] = v49;
              v50 = *v8;
              if (*v47 < **v8)
              {
                *v8 = v47;
                v8[1] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 1;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v57 = *v55;
                v56 = v55[1];
                v55 = v51;
                if (*v56 < *v57)
                {
                  v58 = v54;
                  while (1)
                  {
                    *(unint64_t **)((char *)v8 + v58 + 8) = v57;
                    if (!v58)
                      break;
                    v57 = *(unint64_t **)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (*v56 >= *v57)
                    {
                      v59 = (unint64_t **)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v56;
                }
                v51 = v55 + 1;
                v54 += 8;
              }
              while (v55 + 1 != a2);
            }
          }
          else if (!v53)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v51;
              if (*v88 < *v89)
              {
                do
                {
                  *v51 = v89;
                  v89 = *(v51 - 2);
                  --v51;
                }
                while (*v88 < *v89);
                *v51 = v88;
              }
              v51 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 >= (uint64_t)v10)
                {
                  v67 = *v65;
                }
                else
                {
                  v66 = *v65;
                  v67 = *v64[1];
                  v68 = v66 >= v67;
                  if (v66 > v67)
                    v67 = v66;
                  if (!v68)
                  {
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v69 = &v8[v62];
                v70 = *v69;
                if (v67 >= **v69)
                {
                  v71 = *v64;
                  do
                  {
                    *v69 = v71;
                    v69 = v64;
                    if (v60 < v63)
                      break;
                    v72 = (2 * v63) | 1;
                    v64 = &v8[v72];
                    v63 = 2 * v63 + 2;
                    v71 = *v64;
                    if (v63 >= (uint64_t)v10)
                    {
                      result = *v71;
                      v63 = v72;
                    }
                    else
                    {
                      v73 = (unint64_t ***)v64[1];
                      result = *v71;
                      v74 = *v71 >= (unint64_t)*v73;
                      if (*v71 <= (unint64_t)*v73)
                        result = (unint64_t)*v73;
                      if (*v71 < (unint64_t)*v73)
                      {
                        v71 = v64[1];
                        ++v64;
                      }
                      if (v74)
                        v63 = v72;
                    }
                  }
                  while (result >= *v70);
                  *v69 = v70;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v75 = (unint64_t)v9 >> 3;
            do
            {
              v76 = 0;
              v77 = *v8;
              v78 = v8;
              do
              {
                v79 = &v78[v76 + 1];
                v80 = (2 * v76) | 1;
                v81 = 2 * v76 + 2;
                if (v81 < v75 && **v79 < *v79[1])
                {
                  ++v79;
                  v80 = v81;
                }
                *v78 = *v79;
                v78 = v79;
                v76 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v79 == --a2)
              {
                *v79 = v77;
              }
              else
              {
                *v79 = *a2;
                *a2 = v77;
                v82 = (char *)v79 - (char *)v8 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = &v8[v83];
                  v85 = *v84;
                  v86 = *v79;
                  if (**v84 < **v79)
                  {
                    do
                    {
                      *v79 = v85;
                      v79 = v84;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = &v8[v83];
                      v85 = *v84;
                    }
                    while (**v84 < *v86);
                    *v79 = v86;
                  }
                }
              }
            }
            while (v75-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *v7;
          v15 = **v7;
          if (**(v7 - 1) < v15)
            goto LABEL_12;
          if (v15 >= **(a2 - 1))
          {
            v31 = v7 + 1;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              ++v31;
            }
            while (v15 >= **v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v30 = v8[1];
              ++v8;
            }
            while (v15 >= *v30);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
              v33 = *--v32;
            while (v15 < *v33);
          }
          if (v8 < v32)
          {
            v34 = *v8;
            v35 = *v32;
            do
            {
              *v8 = v35;
              *v32 = v34;
              v36 = *v14;
              do
              {
                v37 = v8[1];
                ++v8;
                v34 = v37;
              }
              while (v36 >= *v37);
              do
              {
                v38 = *--v32;
                v35 = v38;
              }
              while (v36 < *v38);
            }
            while (v8 < v32);
          }
          v39 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v39;
          a4 = 0;
          *v39 = v14;
          continue;
        }
        v14 = *v7;
        v15 = **v7;
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*v17 < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*v21 >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*v20 >= v15);
        }
        if (v18 >= v19)
        {
          v28 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            v25 = *v14;
            do
            {
              v26 = v23[1];
              ++v23;
              v17 = v26;
            }
            while (*v26 < v25);
            do
            {
              v27 = *--v24;
              v22 = v27;
            }
            while (*v27 >= v25);
          }
          while (v23 < v24);
          v28 = v23 - 1;
        }
        if (v28 != v7)
          *v7 = *v28;
        *v28 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *,false>(v7, v28, a3, a4 & 1);
          a4 = 0;
          v8 = v28 + 1;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v7, v28);
        v8 = v28 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(v28 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v28;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = *a3;
  v7 = **a3;
  if (v5 >= **result)
  {
    if (v7 < v5)
    {
      *a2 = v6;
      *a3 = v3;
      v8 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (**a3 >= *v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t **v8;
  unint64_t **v9;
  uint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t **v15;
  unint64_t **v16;
  unint64_t **v17;
  unint64_t **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v16 = a1 + 1;
      v17 = a1 + 2;
      v18 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v19 = *(a2 - 1);
      v20 = a1[3];
      if (*v19 < *v20)
      {
        *v18 = v19;
        *(a2 - 1) = v20;
        v21 = *v18;
        v22 = *v17;
        if (**v18 < **v17)
        {
          *v17 = v21;
          *v18 = v22;
          v23 = *v16;
          if (*v21 < **v16)
          {
            a1[1] = v21;
            a1[2] = v23;
            v24 = *a1;
            if (*v21 < **a1)
            {
              *a1 = v21;
              a1[1] = v24;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (**v9 < **v8)
    {
      v14 = v10;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v14 + 24) = v13;
        if (v14 == -16)
          break;
        v13 = *(unint64_t **)((char *)a1 + v14 + 8);
        v14 -= 8;
        if (*v12 >= *v13)
        {
          v15 = (unint64_t **)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  unint64_t **result;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,parse_vm_info_note(char const*,note_command const&)::$_0 &,std::reference_wrapper<portable_region_info_t const> *>(a1, a2, a3);
  v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void cpp_region_info_for_portable_region(char const*,portable_region_info_t const&)::$_0::operator()(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char *v22;
  void *__p;
  char *v24;
  char *v25;
  _QWORD v26[15];

  if (a2 == -1 || !a3)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
  }
  else
  {
    v8 = 2 * a3;
    CSCppFileMemory::CSCppFileMemory(v26, *(_QWORD *)a1, a2);
    v10 = CSCppFileMemory::bytes_at(v26, a2, 2 * a3);
    if (v10 && v9 >= v8)
    {
      __p = 0;
      v24 = 0;
      v25 = 0;
      std::vector<unsigned short>::reserve(&__p, a3);
      v11 = 0;
      v12 = v24;
      do
      {
        if (v12 >= v25)
        {
          v13 = (char *)__p;
          v14 = v12 - (_BYTE *)__p;
          if (v12 - (_BYTE *)__p <= -3)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v15 = v14 >> 1;
          if (v25 - (_BYTE *)__p <= (unint64_t)((v14 >> 1) + 1))
            v16 = v15 + 1;
          else
            v16 = v25 - (_BYTE *)__p;
          if ((unint64_t)(v25 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)&v25, v17);
            v13 = (char *)__p;
            v12 = v24;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[2 * v15];
          *(_WORD *)v19 = *(_WORD *)(v10 + 2 * v11);
          v20 = v19 + 2;
          while (v12 != v13)
          {
            v21 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v19 - 1) = v21;
            v19 -= 2;
          }
          __p = v19;
          v24 = v20;
          v25 = &v18[2 * v17];
          if (v13)
            operator delete(v13);
          v12 = v20;
        }
        else
        {
          *(_WORD *)v12 = *(_WORD *)(v10 + 2 * v11);
          v12 += 2;
        }
        v24 = v12;
        ++v11;
      }
      while (v11 != a3);
      v22 = v25;
      *(_QWORD *)a4 = __p;
      *(_QWORD *)(a4 + 8) = v12;
      *(_QWORD *)(a4 + 16) = v22;
      *(_BYTE *)(a4 + 24) = 1;
    }
    else
    {
      printf("Error mapping dispositions for region %p-%p\n", *(const void **)(a1 + 8), (const void *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8)));
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
    }
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v26);
  }
}

void sub_1B41608B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a14);
  _Unwind_Resume(a1);
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

uint64_t std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<unsigned short>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned short>,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_1B41609D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::vector<unsigned long long>,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<std::vector<unsigned short>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned short>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(result, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4160A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t std::vector<CSCppCoreFileRegionInfo>::__push_back_slow_path<CSCppCoreFileRegionInfo const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x92492492492492)
    v9 = 0x124924924924924;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[224 * v4];
  v16 = &v10[224 * v9];
  CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo((uint64_t)v14, a2);
  v15 = v14 + 224;
  std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B4160BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 104), (__int128 *)((char *)a2 + 104));
  std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100](a1 + 136, (uint64_t)a2 + 136);
  std::__optional_copy_base<std::vector<unsigned short>,false>::__optional_copy_base[abi:ne180100](a1 + 168, (uint64_t)a2 + 168);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>((_QWORD *)(a1 + 200), *((_QWORD *)a2 + 25), *((_QWORD *)a2 + 26), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 5));
  return a1;
}

void sub_1B4160CC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  if (*(_BYTE *)(v1 + 192))
  {
    v6 = *v4;
    if (*v4)
    {
      *(_QWORD *)(v1 + 176) = v6;
      operator delete(v6);
    }
  }
  if (*(_BYTE *)(v1 + 160))
  {
    v7 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 144) = v7;
      operator delete(v7);
    }
  }
  if (*(_BYTE *)(v1 + 128))
  {
    if (*(char *)(v1 + 127) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CSCppCoreFileRegionInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 224;
    v4 -= 14;
    std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(224 * a2);
}

__n128 std::construct_at[abi:ne180100]<CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo,CSCppCoreFileRegionInfo*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    v7 = *(__int128 *)((char *)a2 + 104);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v7;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 19) = 0;
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  if (*((_BYTE *)a2 + 192))
  {
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 21) = 0;
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *(_BYTE *)(a1 + 192) = 1;
  }
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  result = *(__n128 *)((char *)a2 + 200);
  *(__n128 *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  return result;
}

void std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 200);
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(_BYTE *)(a1 + 192))
  {
    v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(_QWORD *)(a1 + 176) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v3 = *(void **)(a1 + 136);
    if (v3)
    {
      *(_QWORD *)(a1 + 144) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(char *)(a1 + 127) < 0)
      operator delete(*(void **)(a1 + 104));
  }
}

uint64_t std::__split_buffer<CSCppCoreFileRegionInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 224;
    std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(i - 224);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__optional_destruct_base<CSCppCoreFileRegionInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  if (*(_BYTE *)(a1 + 224))
  {
    v5 = (void **)(a1 + 200);
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (*(_BYTE *)(a1 + 192))
    {
      v2 = *(void **)(a1 + 168);
      if (v2)
      {
        *(_QWORD *)(a1 + 176) = v2;
        operator delete(v2);
      }
    }
    if (*(_BYTE *)(a1 + 160))
    {
      v3 = *(void **)(a1 + 136);
      if (v3)
      {
        *(_QWORD *)(a1 + 144) = v3;
        operator delete(v3);
      }
    }
    if (*(_BYTE *)(a1 + 128) && *(char *)(a1 + 127) < 0)
      operator delete(*(void **)(a1 + 104));
  }
  return a1;
}

_QWORD *std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CSCppCoreFileRegionInfo>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B41610B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CSCppCoreFileRegionInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x124924924924925)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CSCppCoreFileRegionInfo>,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      CSCppCoreFileRegionInfo::CSCppCoreFileRegionInfo((CSCppCoreFileRegionInfo *)(a4 + v7), (const CSCppCoreFileRegionInfo *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B4161180(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 224;
    do
    {
      std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(v4 + v2);
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 224;
        std::__destroy_at[abi:ne180100]<CSCppCoreFileRegionInfo,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<std::reference_wrapper<portable_region_info_t const>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1) < 0)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v14 = (__dst - (uint64_t)v13) >> 1;
    v15 = v10 - (_QWORD)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1))
      v16 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1);
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v14];
    __p = v18;
    v34 = v28;
    v36 = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1B4161474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int16 v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void OUTLINED_FUNCTION_0_0(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = __p;
  operator delete(__p);
}

uint64_t CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline(uint64_t a1, unint64_t **a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t i;
  __int128 v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_1E67795D8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = *v4;
      v7 = (std::__shared_weak_count *)v4[1];
      v20 = *v4;
      v21 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        *(_QWORD *)&v19 = v6;
        *((_QWORD *)&v19 + 1) = v7;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      else
      {
        v19 = v6;
      }
      CSCppSymbolOwnerTimeline::add_symbol_owner(a1, &v19);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v21;
      if (v21)
      {
        v15 = (unint64_t *)&v21->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
    v4 = *a2;
    for (i = (uint64_t)a2[1];
          (unint64_t *)i != v4;
  }
  a2[1] = v4;
  return a1;
}

void sub_1B41617B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  uint64_t v12;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a11 = (void **)(v11 + 80);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)(v11 + 56);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(v12, *(_QWORD **)(v11 + 16));
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerTimeline::add_symbol_owner(uint64_t a1, __int128 *a2)
{
  CSCppSegmentRange *v4;
  CSCppSegmentRange *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char inserted;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  char **v24;
  uint64_t v25;
  _QWORD v27[2];
  _QWORD v28[2];

  v4 = *(CSCppSegmentRange **)(*(_QWORD *)a2 + 32);
  v5 = *(CSCppSegmentRange **)(*(_QWORD *)a2 + 40);
  if (v4 == v5)
  {
LABEL_31:
    v24 = (char **)(a1 + 56);
    v25 = 1;
    goto LABEL_34;
  }
  v6 = 0;
  v7 = 0;
  v8 = *(_DWORD *)(*(_QWORD *)a2 + 108);
  do
  {
    if (!CSCppSegmentRange::is_valid_address_query_target(v4, v8))
      goto LABEL_21;
    if (!v6)
      goto LABEL_20;
    v9 = v6 + v7;
    if (v6 + v7 != *(_QWORD *)v4)
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      v28[0] = *(_QWORD *)a2;
      v28[1] = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      inserted = CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner(a1, v7, v6, (uint64_t)v28);
      if (v11)
      {
        v15 = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if ((inserted & 1) == 0)
        goto LABEL_33;
LABEL_20:
      v7 = *(_QWORD *)v4;
      v6 = *((_QWORD *)v4 + 1);
      goto LABEL_21;
    }
    v10 = *((_QWORD *)v4 + 1) + v9;
    if (v9 > v10)
      v10 = v6 + v7;
    if (v7 >= v9)
      v7 += v6;
    v6 = v10 - v7;
LABEL_21:
    v4 = (CSCppSegmentRange *)((char *)v4 + 32);
  }
  while (v4 != v5);
  if (!v6)
    goto LABEL_31;
  v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v27[0] = *(_QWORD *)a2;
  v27[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner(a1, v7, v6, (uint64_t)v27);
  v21 = v20;
  if (!v17)
    goto LABEL_30;
  v22 = (unint64_t *)&v17->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((v21 & 1) != 0)
      goto LABEL_31;
  }
  else
  {
LABEL_30:
    if (v20)
      goto LABEL_31;
  }
LABEL_33:
  v25 = 0;
  v24 = (char **)(a1 + 80);
LABEL_34:
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v24, a2);
  return v25;
}

void sub_1B41619C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CSCppSymbolOwnerTimeline::CSCppSymbolOwnerTimeline(CSCppSymbolOwnerTimeline *this, const CSCppSymbolOwnerTimeline *a2)
{
  uint64_t **v4;
  char *v5;

  *(_QWORD *)this = &off_1E67795D8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  v4 = (uint64_t **)((char *)this + 8);
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 2) = 0u;
  v5 = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)this + 56, *((_QWORD **)a2 + 7), *((_QWORD **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 4);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)this + 80, *((_QWORD **)a2 + 10), *((_QWORD **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 4);
  if (this != a2)
  {
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>(v4, *((_QWORD **)a2 + 1), (_QWORD *)a2 + 2);
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>((uint64_t)v5, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 5);
  }
}

void sub_1B4161AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD **v3;
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(v2, *v3);
  _Unwind_Resume(a1);
}

uint64_t CSCppSymbolOwnerTimeline::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(a1 + 56, *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(a1 + 80, *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4);
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>((uint64_t **)(a1 + 8), *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>(a1 + 32, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 5);
  }
  return a1;
}

CSCppSymbolOwner *CSCppSymbolOwnerTimeline::symbol_owner_with_address_at_time(CSCppSymbolOwnerTimeline *this, unint64_t a2, unint64_t a3)
{
  CSCppSymbolOwner *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t unload_timestamp_range;
  unint64_t v17;
  CSCppSymbolOwner **v18;
  CSCppSymbolOwner **v19;
  CSCppSymbolOwner **i;
  CSCppSymbolOwner **v21;
  uint64_t v22;
  unint64_t v23;

  result = 0;
  if (a2 == -1 || a3 == 0x8000000000000001)
    return result;
  if (!*((_QWORD *)this + 3))
    return 0;
  v6 = a3 - 0x7FFFFFFFFFFFFFFFLL;
  if (a3 - 0x7FFFFFFFFFFFFFFFLL >= 2)
    v7 = a3;
  else
    v7 = 0x7FFFFFFFFFFFFFFDLL;
  v8 = (uint64_t *)((char *)this + 16);
  v9 = (_QWORD *)*((_QWORD *)this + 2);
  if (v9)
  {
    do
    {
      v10 = v9[4];
      v11 = v10 > a2;
      if (v10 <= a2)
        v12 = v9 + 1;
      else
        v12 = v9;
      if (v11)
        v8 = v9;
      v9 = (_QWORD *)*v12;
    }
    while (*v12);
  }
  if (v8 == *((uint64_t **)this + 1))
    goto LABEL_22;
  v13 = *v8;
  if (*v8)
  {
    do
    {
      v14 = v13;
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
  }
  else
  {
    do
    {
      v14 = v8[2];
      v15 = *(_QWORD *)v14 == (_QWORD)v8;
      v8 = (uint64_t *)v14;
    }
    while (v15);
  }
  if (a2 - *(_QWORD *)(v14 + 32) >= *(_QWORD *)(v14 + 40))
  {
LABEL_22:
    if (v6 < 2)
      return 0;
    goto LABEL_23;
  }
  unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)(v14 + 48));
  if (v7 - unload_timestamp_range < v17)
    return *(CSCppSymbolOwner **)(v14 + 48);
  result = 0;
  if (v6 >= 2 && v7 <= *(_QWORD *)(*(_QWORD *)(v14 + 48) + 88))
  {
LABEL_23:
    v18 = (CSCppSymbolOwner **)*((_QWORD *)this + 4);
    v19 = (CSCppSymbolOwner **)*((_QWORD *)this + 5);
    if (v18 != v19)
    {
      for (i = v18 + 2; ; i += 4)
      {
        v21 = i - 2;
        if (a2 - (unint64_t)*(i - 2) < (unint64_t)*(i - 1))
        {
          v22 = CSCppSymbolOwner::load_unload_timestamp_range(*i);
          if (v7 - v22 < v23)
            break;
        }
        if (v21 + 4 == v19)
          return 0;
      }
      return *i;
    }
    return 0;
  }
  return result;
}

uint64_t CSCppSymbolOwnerTimeline::_insertAddressRangeForSymbolOwner(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  unint64_t v21;
  CSCppSymbolOwner *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t unload_timestamp_range;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  CSCppSymbolOwner *v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  CSCppSymbolOwner *v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  _BYTE buf[24];
  std::__shared_weak_count *v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  unint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)(a1 + 16);
  v8 = *(_QWORD **)(a1 + 16);
  v9 = (uint64_t **)(a1 + 8);
  if (v8)
  {
    v11 = (_QWORD *)(a1 + 16);
    do
    {
      v12 = v8[4];
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = v8;
      else
        v14 = v8 + 1;
      if (v13)
        v11 = v8;
      v8 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 != v7)
    {
      v15 = v11[4];
      v16 = a3 + a2;
      if (v15 < a3 + a2)
      {
        v17 = v11;
        if (a2 < v11[5] + v15)
          goto LABEL_22;
      }
      v18 = (_QWORD *)v11[1];
      if (v18)
      {
        do
        {
          v17 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        v19 = v11;
        do
        {
          v17 = (_QWORD *)v19[2];
          v20 = *v17 == (_QWORD)v19;
          v19 = v17;
        }
        while (!v20);
      }
      if (v17 == v7 || (v21 = v17[4], v21 >= v16) || a2 >= v17[5] + v21)
      {
        v7 = v11;
      }
      else
      {
LABEL_22:
        v20 = v17 == v7;
        v7 = v11;
        if (!v20)
        {
          v22 = (CSCppSymbolOwner *)v17[6];
          v90 = *((_OWORD *)v17 + 2);
          v23 = (std::__shared_weak_count *)v17[7];
          v91 = v23;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          unload_timestamp_range = CSCppSymbolOwner::load_unload_timestamp_range(v22);
          v89 = v22;
          v28 = v27;
          v29 = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)a4);
          if (unload_timestamp_range < v30 + v29 && v29 < v28 + unload_timestamp_range)
          {
            if (v16 <= *((_QWORD *)&v90 + 1) + (_QWORD)v90)
              v53 = *((_QWORD *)&v90 + 1) + v90;
            else
              v53 = a3 + a2;
            if (a2 >= (unint64_t)v90)
              v54 = v90;
            else
              v54 = a2;
            v55 = v53 - v54;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              v56 = *((_QWORD *)v89 + 11);
              v57 = *((_QWORD *)v89 + 12);
              v58 = *((_QWORD *)v89 + 15);
              v59 = *(_QWORD *)(*(_QWORD *)a4 + 88);
              v60 = *(_QWORD *)(*(_QWORD *)a4 + 96);
              v61 = *(_QWORD *)(*(_QWORD *)a4 + 120);
              *(_DWORD *)buf = 134221058;
              *(_QWORD *)&buf[4] = v55;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v90;
              *(_WORD *)&buf[22] = 2048;
              v93 = (std::__shared_weak_count *)(*((_QWORD *)&v90 + 1) + v90);
              v94 = 2048;
              v95 = *((_QWORD *)&v90 + 1);
              v96 = 2048;
              v97 = v56;
              v98 = 2048;
              v99 = v57;
              v100 = 2080;
              v101 = v58;
              v102 = 2048;
              v103 = a2;
              v104 = 2048;
              v105 = a3 + a2;
              v106 = 2048;
              v107 = a3;
              v108 = 2048;
              v109 = v59;
              v110 = 2048;
              v111 = v60;
              v112 = 2080;
              v113 = v61;
              _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Timeline modification failed -- dylibs overlap by 0x%llx:\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n", buf, 0x84u);
            }
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Timeline modification failed -- dylibs overlap by 0x%llx:\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n", v55, (_QWORD)v90, *((_QWORD *)&v90 + 1) + (_QWORD)v90, *((_QWORD *)&v90 + 1), *((_QWORD *)v89 + 11), *((_QWORD *)v89 + 12), *((_QWORD *)v89 + 15));
LABEL_67:
            v51 = 0;
LABEL_87:
            if (v91)
            {
              v74 = (unint64_t *)&v91->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            return v51;
          }
          v32 = *(CSCppSymbolOwner **)a4;
          v33 = (uint64_t *)(a1 + 32);
          if (*((_QWORD *)v89 + 11) >= *(_QWORD *)(*(_QWORD *)a4 + 88))
          {
            v63 = *(_QWORD *)(a1 + 32);
            v62 = *(_QWORD *)(a1 + 40);
            if (v63 != v62)
            {
              while (1)
              {
                if (*(_QWORD *)v63 < v16 && a2 < *(_QWORD *)(v63 + 8) + *(_QWORD *)v63)
                {
                  v64 = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)(v63 + 16));
                  v66 = v65;
                  v67 = CSCppSymbolOwner::load_unload_timestamp_range(*(CSCppSymbolOwner **)a4);
                  if (v64 < v68 + v67 && v67 < v66 + v64)
                    break;
                }
                v63 += 32;
                if (v63 == v62)
                {
                  v32 = *(CSCppSymbolOwner **)a4;
                  goto LABEL_78;
                }
              }
              v76 = *(_QWORD *)v63;
              v77 = *(_QWORD *)(v63 + 8);
              v78 = (std::__shared_weak_count *)(v77 + *(_QWORD *)v63);
              if (v16 <= (unint64_t)v78)
                v79 = v77 + *(_QWORD *)v63;
              else
                v79 = a3 + a2;
              if (a2 >= v76)
                v80 = *(_QWORD *)v63;
              else
                v80 = a2;
              v81 = v79 - v80;
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                v82 = *(_QWORD **)(v63 + 16);
                v83 = v82[11];
                v84 = v82[12];
                v85 = v82[15];
                v86 = *(_QWORD *)(*(_QWORD *)a4 + 88);
                v87 = *(_QWORD *)(*(_QWORD *)a4 + 96);
                v88 = *(_QWORD *)(*(_QWORD *)a4 + 120);
                *(_DWORD *)buf = 134221058;
                *(_QWORD *)&buf[4] = v81;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v76;
                *(_WORD *)&buf[22] = 2048;
                v93 = v78;
                v94 = 2048;
                v95 = v77;
                v96 = 2048;
                v97 = v83;
                v98 = 2048;
                v99 = v84;
                v100 = 2080;
                v101 = v85;
                v102 = 2048;
                v103 = a2;
                v104 = 2048;
                v105 = a3 + a2;
                v106 = 2048;
                v107 = a3;
                v108 = 2048;
                v109 = v86;
                v110 = 2048;
                v111 = v87;
                v112 = 2080;
                v113 = v88;
                _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Historical timeline modification failed -- dylibs overlap by 0x%llx:\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n", buf, 0x84u);
                v76 = *(_QWORD *)v63;
                v77 = *(_QWORD *)(v63 + 8);
                v78 = (std::__shared_weak_count *)(v77 + *(_QWORD *)v63);
              }
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "Historical timeline modification failed -- dylibs overlap by 0x%llx:\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n    0x%llx-0x%llx [0x%llx] (%llu-%llu) %s\n", v81, v76, v78, v77, *(_QWORD *)(*(_QWORD *)(v63 + 16) + 88), *(_QWORD *)(*(_QWORD *)(v63 + 16) + 96), *(_QWORD *)(*(_QWORD *)(v63 + 16) + 120));
              goto LABEL_67;
            }
LABEL_78:
            *(_QWORD *)buf = a2;
            *(_QWORD *)&buf[8] = a3;
            v70 = *(std::__shared_weak_count **)(a4 + 8);
            *(_QWORD *)&buf[16] = v32;
            v93 = v70;
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
            }
            std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::emplace_back<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(v33, (uint64_t)buf);
            v42 = v93;
            if (!v93)
            {
LABEL_86:
              v51 = 1;
              goto LABEL_87;
            }
            v73 = (unint64_t *)&v93->__shared_owners_;
            do
              v44 = __ldaxr(v73);
            while (__stlxr(v44 - 1, v73));
          }
          else
          {
            *(_OWORD *)buf = v90;
            *(_QWORD *)&buf[16] = v89;
            v93 = v23;
            if (v23)
            {
              v34 = (unint64_t *)&v23->__shared_owners_;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::push_back[abi:ne180100](v33, (uint64_t)buf);
            v36 = v93;
            if (v93)
            {
              v37 = (unint64_t *)&v93->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer(v9, v17);
            std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v17 + 6));
            operator delete(v17);
            *(_QWORD *)buf = a2;
            *(_QWORD *)&buf[8] = a3;
            v39 = *(std::__shared_weak_count **)(a4 + 8);
            *(_QWORD *)&buf[16] = *(_QWORD *)a4;
            v93 = v39;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(v9, (unint64_t *)buf, (uint64_t)buf);
            v42 = v93;
            if (!v93)
              goto LABEL_86;
            v43 = (unint64_t *)&v93->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
          }
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          goto LABEL_86;
        }
      }
    }
  }
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  v45 = *(std::__shared_weak_count **)(a4 + 8);
  *(_QWORD *)&buf[16] = *(_QWORD *)a4;
  v93 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_hint_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>((uint64_t **)(a1 + 8), v7, (unint64_t *)buf, (uint64_t)buf);
  v48 = v93;
  if (v93)
  {
    v49 = (unint64_t *)&v93->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return 1;
}

void sub_1B41623B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v27);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(result, v12);
    v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v15];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v16[2] = v14 + 32;
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_OWORD *)a1[1];
    result = std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    v7[1] = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B41624E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::emplace_back<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v4, v12);
    v14 = &v13[32 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[32 * v15];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v17[2] = v14 + 32;
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_OWORD *)a1[1];
    std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    v7[1] = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 2;
}

void sub_1B41625E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CSCppSegmentRange::is_valid_address_query_target(CSCppSegmentRange *this, __int16 a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;

  v4 = (const char *)*((_QWORD *)this + 3);
  v5 = v4;
  if (!v4)
    v5 = (const char *)*((_QWORD *)this + 2);
  result = strncmp(v5, "__PAGEZERO", 0xBuLL);
  if ((_DWORD)result)
  {
    if ((a2 & 0x1200) == 0)
      return 1;
    v7 = v4;
    if (!v4)
      v7 = (const char *)*((_QWORD *)this + 2);
    if (!strncmp(v7, "__LINKEDIT", 0xBuLL))
      return 0;
    if (*(_QWORD *)this)
      return 1;
    if (!v4)
      v4 = (const char *)*((_QWORD *)this + 2);
    return !strncmp(v4, "__TEXT", 7uLL);
  }
  return result;
}

BOOL CSCppSymbolOwnerTimeline::remove_symbol_owner(uint64_t a1, __int128 *a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  __int128 *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  unint64_t *v31;
  unint64_t v32;

  v4 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<CSCppSymbolOwner> *>,std::shared_ptr<CSCppSymbolOwner>>(*(__int128 **)(a1 + 56), *(__int128 **)(a1 + 64), a2);
  v5 = v4;
  v6 = *(__int128 **)(a1 + 64);
  if (v6 != v4)
  {
    v7 = (uint64_t)v4;
    if (v4 + 1 == v6)
    {
      v10 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      do
      {
        v8 = v7 + 16;
        std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v7, (__int128 *)(v7 + 16));
        v9 = v7 + 32;
        v7 += 16;
      }
      while ((__int128 *)v9 != v6);
      v10 = *(_QWORD *)(a1 + 64);
      v7 = v8;
    }
    while (v10 != v7)
      v10 = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v10 - 16);
    *(_QWORD *)(a1 + 64) = v7;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)(a1 + 80), a2);
    v12 = *(_QWORD *)a2;
    v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(uint64_t **)(a1 + 8);
    if (v15 != (uint64_t *)(a1 + 16))
    {
      do
      {
        if (v15[6] == v12)
        {
          v17 = std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)(a1 + 8), v15);
          std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v15 + 6));
          operator delete(v15);
        }
        else
        {
          v16 = (uint64_t *)v15[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v15[2];
              v18 = *v17 == (_QWORD)v15;
              v15 = v17;
            }
            while (!v18);
          }
        }
        v15 = v17;
      }
      while (v17 != (uint64_t *)(a1 + 16));
    }
    if (v11)
    {
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v21 = *(__int128 **)(a1 + 32);
    v22 = *(__int128 **)(a1 + 40);
    if (v22 != v21)
    {
      v24 = *(_QWORD *)a2;
      v23 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = v21 + 2;
      while (*((_QWORD *)v27 - 2) != v24)
      {
        v18 = v27 == v22;
        v27 += 2;
        if (v18)
        {
          v28 = v22;
          goto LABEL_41;
        }
      }
      v28 = v27 - 2;
      if (v27 - 2 != v22 && v27 != v22)
      {
        v29 = v27 + 1;
        do
        {
          if (*(_QWORD *)v29 != v24)
          {
            *v28 = *(v29 - 1);
            std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(v28 + 1), v29);
            v28 += 2;
          }
          v30 = v29 + 1;
          v29 += 2;
        }
        while (v30 != v22);
      }
LABEL_41:
      std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::erase(a1 + 32, v28, *(_OWORD **)(a1 + 40));
      if (v23)
      {
        v31 = (unint64_t *)&v23->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  return v6 != v5;
}

void sub_1B4162940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<CSCppSymbolOwner> *>,std::shared_ptr<CSCppSymbolOwner>>(__int128 *a1, __int128 *a2, _QWORD *a3)
{
  __int128 *v5;
  __int128 *i;

  if (a1 == a2)
  {
LABEL_5:
    v5 = a2;
  }
  else
  {
    v5 = a1;
    while (*(_QWORD *)v5 != *a3)
    {
      if (++v5 == a2)
        goto LABEL_5;
    }
  }
  if (v5 != a2)
  {
    for (i = v5 + 1; i != a2; ++i)
    {
      if (*(_QWORD *)i != *a3)
        std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)v5++, i);
    }
  }
  return v5;
}

_OWORD *std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::erase(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,0>(a3, *(_OWORD **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = v7 - 32;
        std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v7 - 16);
        v7 = v8;
      }
      while (v8 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void CSCppSymbolOwnerTimeline::~CSCppSymbolOwnerTimeline(CSCppSymbolOwnerTimeline *this)
{
  CSCppSymbolOwnerTimeline::~CSCppSymbolOwnerTimeline(this);
  JUMPOUT(0x1B5E36940);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E67795D8;
  v2 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 32);
  std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

void std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__assign_with_size[abi:ne180100]<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2;
  v8 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__vdeallocate((void **)a1);
    if (a4 >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(_QWORD *)(a1 + 8);
    while (v6 != a3)
    {
      *(_OWORD *)v13 = *(_OWORD *)v6;
      v14 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v13 + 24) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 32;
      v13 += 32;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v17 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 5;
  if (v17 < a4)
  {
    v18 = a2 + 32 * v17;
    result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,0>(a2, v18, (uint64_t)v8);
    v13 = *(_QWORD *)(a1 + 8);
    while (v18 != a3)
    {
      *(_OWORD *)v13 = *(_OWORD *)v18;
      v19 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v13 + 24) = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v18 += 32;
      v13 += 32;
    }
    goto LABEL_21;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,0>(a2, a3, (uint64_t)v8);
  v23 = v22;
  v24 = *(_QWORD *)(a1 + 8);
  if (v24 != v22)
  {
    do
    {
      v25 = v24 - 32;
      result = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v24 - 16);
      v24 = v25;
    }
    while (v25 != v23);
  }
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 32;
        std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100]((_QWORD *)(a3 + 16), (uint64_t *)(v4 + 16));
    a3 += 32;
    v4 += 32;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::vector<std::shared_ptr<CSCppSymbolOwner>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

uint64_t *std::vector<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 32;
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 32;
      v4 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v6 = *result;
  *result = v5;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>> *,0>(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  _OWORD *v4;
  _OWORD *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *a3 = *v4;
    std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)(a3 + 1), v4 + 1);
    a3 += 2;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

void std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(a1, a2[1]);
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          std::shared_ptr<CSCppSymbolOwner>::operator=[abi:ne180100](v8 + 6, v9 + 6);
          std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<std::pair<TRange<Pointer64> const,std::shared_ptr<CSCppSymbolOwner>> const&>(v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B41631C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

_QWORD *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

_OWORD *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_multi<std::pair<TRange<Pointer64> const,std::shared_ptr<CSCppSymbolOwner>> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  _QWORD v13[2];
  char v14;

  v4 = a1 + 1;
  v5 = operator new(0x40uLL);
  v6 = v5;
  v13[0] = v5;
  v13[1] = v4;
  v5[2] = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v5 + 6) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v5 + 7) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v14 = 1;
  v10 = *v4;
  v11 = v4;
  if (*v4)
  {
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v10;
        if (*((_QWORD *)v5 + 4) >= (unint64_t)v10[4])
          break;
        v10 = (uint64_t *)*v10;
        v11 = v4;
        if (!*v4)
          goto LABEL_10;
      }
      v10 = (uint64_t *)v10[1];
    }
    while (v10);
    v11 = v4 + 1;
  }
LABEL_10:
  std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v4, v11, (uint64_t *)v5);
  v13[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 48);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_hint_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__find_equal<TRange<Pointer64>>(a1, a2, &v14, &v13, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v11[1] = a1 + 1;
    v9 = *(_OWORD *)(a4 + 16);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a4;
    *((_OWORD *)v7 + 3) = v9;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    v12 = 1;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, v14, v8, v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__find_equal<TRange<Pointer64>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **std::__tree<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::__map_value_compare<TRange<Pointer64>,std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,std::less<TRange<Pointer64>>,true>,std::allocator<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>>::__emplace_unique_key_args<TRange<Pointer64>,std::pair<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  __int128 v12;
  _QWORD v14[2];
  char v15;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x40uLL);
    v14[1] = v6;
    v12 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v11 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v11 + 3) = v12;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v15 = 1;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<TRange<Pointer64>,std::shared_ptr<CSCppSymbolOwner>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t CSSymbolicatorCreateWithCoreFilePathAndFlags(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  char *v29;
  void **v30;
  BOOL v31;
  uint64_t v32;
  __int128 *v33;
  char *v34;
  char *v35;
  int64_t v36;
  int v37;
  size_t v38;
  char *v39;
  char *v40;
  _DWORD *v41;
  unint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t mapped_memory_cache_for_core_file_without_exclave_metadata;
  uint64_t unretained_reconstructed_core_file_memory;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  size_t v61;
  uint64_t v62;
  uint64_t p_p;
  BOOL v64;
  uint64_t v65;
  __int128 *v66;
  void *v67;
  char *v68;
  int64_t v69;
  int v70;
  size_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 *v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  const CSCppSymbolOwner *v82;
  unint64_t *v83;
  unint64_t v84;
  CSCppFakeTask *v85;
  int v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned int *v103;
  unint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  CSCppFakeTask *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t address_from_main_bin_spec_lcnote_with_matching;
  char v131;
  uint64_t v132;
  const CSCppSymbolOwner *v133;
  unint64_t *v134;
  unint64_t v135;
  CSCppFakeTask *v136;
  int FlagsForNListOnlyData;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  char AOutSymbolOwner;
  uint64_t v144;
  uint64_t SymbolWithMangledName;
  uint64_t v146;
  unint64_t Range;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  CSCppFakeTask *v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  BOOL v182;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  CSCppFakeTask *v194;
  unsigned int *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  char v202;
  uint64_t j;
  _QWORD *v204;
  unint64_t v205;
  BOOL v206;
  uint64_t v208;
  uint64_t v209;
  int mach_header_and_cmds_from;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  CSCppFakeTask *v218;
  unsigned int *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  unint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  _DWORD *v248;
  _DWORD *v249;
  char *v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t SymbolWithMangledNameAtTime;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  __int128 v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  __int128 v285;
  char *v286;
  char *v287;
  char *v288;
  __int128 v289;
  uint64_t v290;
  uint64_t *v291;
  __int128 v292;
  uint64_t v293;
  unint64_t i;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  _QWORD *v310;
  unint64_t *v311;
  unint64_t v312;
  CSCppFakeTask *v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  void **v328;
  unint64_t v329;
  char v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  _QWORD *v335;
  unint64_t *v336;
  unint64_t v337;
  CSCppFakeTask *v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  _DWORD *v345;
  unint64_t v346;
  BOOL v347;
  char *v348;
  _QWORD *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  unint64_t *v356;
  unint64_t v357;
  char v358;
  uint64_t RegionWithNameAtTime;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  __int128 v372;
  uint64_t v373;
  unint64_t k;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  BOOL v389;
  char *v390;
  _QWORD *v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  char *v397;
  unint64_t *v398;
  unint64_t v399;
  char v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unsigned int v412;
  unsigned int v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  char *v424;
  char *v425;
  char *v426;
  char *v427;
  _QWORD v428[15];
  void *v429[2];
  __int128 v430;
  int v431;
  _QWORD v432[15];
  __int128 v433;
  __int128 v434;
  uint64_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  void *v440;
  __int128 v441;
  __int128 v442;
  int v443;
  __int128 v444;
  __int128 v445;
  void (*v446)(uint64_t);
  void *v447[3];
  void *v448;
  void *v449;
  char *v450;
  void **v451;
  __int128 v452;
  __int128 v453;
  uint64_t (*v454)(uint64_t);
  _QWORD v455[4];
  int v456;
  __int128 v457;
  __int128 v458;
  char v459;
  __int128 __p;
  __int128 v461;
  char v462;
  _OWORD v463[2];
  __int128 v464;
  __int128 v465;
  __int128 v466;
  _BYTE v467[32];
  _OWORD *v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  _BYTE v477[24];
  char v478;
  uint64_t v479;

  v7 = a1;
  v479 = *MEMORY[0x1E0C80C00];
  CSCppFileMemory::CSCppFileMemory(v428, a1, 0);
  v8 = (_DWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v428[0] + 32))(v428, 0, 28);
  if (!v8 || *v8 != -17958194)
  {
    CSCppFileMemory::CSCppFileMemory(&v452, v7, 0);
    v41 = (_DWORD *)(*(uint64_t (**)(__int128 *, _QWORD, uint64_t))(v452 + 32))(&v452, 0, 32);
    if (!v41 || *v41 != -17958193)
    {
      v74 = 0;
      goto LABEL_140;
    }
    CSCppFileMemory::CSCppFileMemory(v432, v7, 0);
    v42 = 32;
    do
    {
      v43 = (_DWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, unint64_t))(v432[0] + 32))(v432, 0, v42);
      v45 = (uint64_t)v43;
      if (!v43 || *v43 != -17958193)
        goto LABEL_138;
      v42 = v43[5] + 32;
    }
    while (v42 > v44);
    if (v43[3] != 4)
    {
LABEL_138:
      v74 = 0;
      goto LABEL_139;
    }
    v430 = 0u;
    *(_OWORD *)v429 = 0u;
    v431 = 1065353216;
    if (a4)
    {
      v46 = (uint64_t *)(a3 + 8);
      do
      {
        v47 = *v46;
        v46 += 2;
        *(_QWORD *)&v470 = (v47 & 0xFFFFFFFFFFFFFFFCLL) + 16;
        std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>((uint64_t)v429, (_QWORD *)v470, (uint64_t)&std::piecewise_construct, (_OWORD **)&v470)[4] = v47 & 0xFFFFFFFFFFFFFFFCLL;
        --a4;
      }
      while (a4);
    }
    mapped_memory_cache_for_core_file_without_exclave_metadata = create_mapped_memory_cache_for_core_file_without_exclave_metadata(v7, "CSSymbolicator for core file");
    if (!mapped_memory_cache_for_core_file_without_exclave_metadata)
    {
      v74 = 0;
      goto LABEL_451;
    }
    CSCppCoreFileMemory::CSCppCoreFileMemory(v463, mapped_memory_cache_for_core_file_without_exclave_metadata);
    release_core_file_mapped_memory_cache(mapped_memory_cache_for_core_file_without_exclave_metadata);
    *(_QWORD *)&v470 = 0;
    unretained_reconstructed_core_file_memory = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
    if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(unretained_reconstructed_core_file_memory, (uint64_t)&v470))
    {
      v178 = v470;
      LOBYTE(__p) = 0;
      v462 = 0;
LABEL_342:
      v261 = (*(uint64_t (**)(_OWORD *, unint64_t, uint64_t))(*(_QWORD *)&v463[0] + 32))(v463, v178, 368);
      if (v262 <= 0x16F)
        goto LABEL_370;
      v263 = *(_DWORD *)v261;
      v264 = *(unsigned int *)(v261 + 4);
      v265 = *(_QWORD *)(v261 + 8);
      v266 = *(_QWORD *)(v261 + 32);
      v267 = *(_OWORD *)(v261 + 136);
      v475 = *(_OWORD *)(v261 + 120);
      v476 = v267;
      *(_OWORD *)v477 = *(_OWORD *)(v261 + 152);
      v268 = *(_QWORD *)(v261 + 176);
      *(_QWORD *)&v477[16] = *(_QWORD *)(v261 + 168);
      v269 = *(_OWORD *)(v261 + 72);
      v471 = *(_OWORD *)(v261 + 56);
      v472 = v269;
      v270 = *(_OWORD *)(v261 + 104);
      v473 = *(_OWORD *)(v261 + 88);
      v474 = v270;
      v271 = *(_OWORD *)(v261 + 40);
      v272 = *(_QWORD *)(v261 + 192);
      v273 = *(_DWORD *)(v261 + 320);
      v274 = *(_QWORD *)(v261 + 344);
      v469 = *(_OWORD *)(v261 + 352);
      v470 = v271;
      if (v263 <= 0x10)
        goto LABEL_370;
      if (v265)
      {
        v423 = v273;
        v449 = 0;
        v448 = 0;
        v450 = 0;
        v275 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)&v463[0] + 32))(v463, v265, 24 * v264);
        if (v275)
        {
          v419 = v266;
          v408 = v274;
          v427 = v7;
          if ((_DWORD)v264)
          {
            v276 = 0;
            v277 = (char *)v449;
            do
            {
              v278 = v275 + 24 * v276;
              if (v277 >= v450)
              {
                v280 = 0xAAAAAAAAAAAAAAABLL * ((v277 - (_BYTE *)v448) >> 3);
                v281 = v280 + 1;
                if (v280 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((v450 - (_BYTE *)v448) >> 3) > v281)
                  v281 = 0x5555555555555556 * ((v450 - (_BYTE *)v448) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v450 - (_BYTE *)v448) >> 3) >= 0x555555555555555)
                  v282 = 0xAAAAAAAAAAAAAAALL;
                else
                  v282 = v281;
                if (v282)
                  v283 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)&v450, v282);
                else
                  v283 = 0;
                v284 = &v283[24 * v280];
                v285 = *(_OWORD *)v278;
                *((_QWORD *)v284 + 2) = *(_QWORD *)(v278 + 16);
                *(_OWORD *)v284 = v285;
                v286 = (char *)v449;
                v287 = (char *)v448;
                v288 = v284;
                if (v449 != v448)
                {
                  do
                  {
                    v289 = *(_OWORD *)(v286 - 24);
                    *((_QWORD *)v288 - 1) = *((_QWORD *)v286 - 1);
                    *(_OWORD *)(v288 - 24) = v289;
                    v288 -= 24;
                    v286 -= 24;
                  }
                  while (v286 != v287);
                  v286 = (char *)v448;
                }
                v277 = v284 + 24;
                v448 = v288;
                v449 = v284 + 24;
                v450 = &v283[24 * v282];
                if (v286)
                  operator delete(v286);
              }
              else
              {
                v279 = *(_OWORD *)v278;
                *((_QWORD *)v277 + 2) = *(_QWORD *)(v278 + 16);
                *(_OWORD *)v277 = v279;
                v277 += 24;
              }
              v449 = v277;
              ++v276;
            }
            while (v276 != v264);
          }
          *(_QWORD *)&v444 = 0;
          *((_QWORD *)&v444 + 1) = &v444;
          *(_QWORD *)&v445 = 0x4002000000;
          *((_QWORD *)&v445 + 1) = __Block_byref_object_copy__40;
          v446 = __Block_byref_object_dispose__41;
          memset(v447, 0, sizeof(v447));
          LOBYTE(v464) = 0;
          BYTE8(v465) = 0;
          if (v423 <= 0x18 && ((1 << v423) & 0x1550000) != 0)
            std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>((std::string *)&v464, "/usr/lib/dyld");
          create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v463, v272, v419, (uint64_t)&v464, (void ***)&v438);
          v290 = v438;
          if ((_QWORD)v438)
          {
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)(*((_QWORD *)&v444 + 1) + 40), &v438);
          }
          else
          {
            LOBYTE(v457) = 0;
            v459 = 0;
          }
          a2 = a2;
          v7 = v427;
          v363 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
          if (*((_QWORD *)&v438 + 1))
          {
            v364 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
            do
              v365 = __ldaxr(v364);
            while (__stlxr(v365 - 1, v364));
            if (!v365)
            {
              ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
              std::__shared_weak_count::__release_weak(v363);
            }
          }
          if (BYTE8(v465) && SBYTE7(v465) < 0)
            operator delete((void *)v464);
          if (v290)
          {
            *(_QWORD *)&v438 = 0;
            *((_QWORD *)&v438 + 1) = &v438;
            *(_QWORD *)&v439 = 0x5002000000;
            *((_QWORD *)&v439 + 1) = __Block_byref_object_copy__43;
            v440 = __Block_byref_object_dispose__44;
            v441 = 0u;
            v442 = 0u;
            v443 = 1065353216;
            *(_QWORD *)&v436 = 0;
            *((_QWORD *)&v436 + 1) = &v436;
            *(_QWORD *)&v437 = 0x2000000000;
            BYTE8(v437) = 1;
            v366 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
            *(_QWORD *)&v464 = MEMORY[0x1E0C809B0];
            *((_QWORD *)&v464 + 1) = 1174405120;
            *(_QWORD *)&v465 = ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke;
            *((_QWORD *)&v465 + 1) = &unk_1E6779708;
            memset(&v467[8], 0, 24);
            std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>(&v467[8], v448, (uint64_t)v449, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v449 - (_BYTE *)v448) >> 3));
            *(_QWORD *)&v466 = &v438;
            *((_QWORD *)&v466 + 1) = &v436;
            v468 = v463;
            *(_QWORD *)v467 = &v444;
            enumerate_mapped_memory_core_file_dumped_regions(v366, (uint64_t)&v464);
            if (*(_BYTE *)(*((_QWORD *)&v436 + 1) + 24))
            {
              v367 = operator new();
              *(_BYTE *)(v367 + 16) = 0;
              *(_QWORD *)v367 = &off_1E6774D70;
              *(_QWORD *)(v367 + 8) = 0;
              CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTaskContainer *)(v367 + 24), 0, -1);
              *(_BYTE *)(v367 + 40) = 0;
              *(_OWORD *)(v367 + 41) = *(_OWORD *)&v477[8];
              *(_OWORD *)(v367 + 57) = v469;
              *(_QWORD *)(v367 + 80) = v268;
              *(_QWORD *)(v367 + 88) = v408;
              v435 = v367;
              *(_BYTE *)(v367 + 16) = v408 != 0;
              std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>((uint64_t)&v433, &v435, (_QWORD **)(*((_QWORD *)&v444 + 1) + 40));
              v368 = v433;
              v433 = 0uLL;
              v457 = v368;
              v458 = v434;
              v434 = 0uLL;
              v459 = 1;
              v451 = (void **)&v433 + 1;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v451);
              v369 = v433;
              *(_QWORD *)&v433 = 0;
              if (v369)
                (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
              v370 = v435;
              v435 = 0;
              if (v370)
                (*(void (**)(uint64_t))(*(_QWORD *)v370 + 8))(v370);
            }
            else
            {
              LOBYTE(v457) = 0;
              v459 = 0;
            }
            if (*(_QWORD *)&v467[8])
            {
              *(_QWORD *)&v467[16] = *(_QWORD *)&v467[8];
              operator delete(*(void **)&v467[8]);
            }
            _Block_object_dispose(&v436, 8);
            _Block_object_dispose(&v438, 8);
            std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v441);
          }
          _Block_object_dispose(&v444, 8);
          *(_QWORD *)&v438 = v447;
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
        }
        else
        {
          LOBYTE(v457) = 0;
          v459 = 0;
        }
        if (v448)
        {
          v449 = v448;
          operator delete(v448);
        }
      }
      else
      {
LABEL_370:
        LOBYTE(v457) = 0;
        v459 = 0;
      }
      std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((void **)&__p, (uint64_t *)&v457);
      v291 = (uint64_t *)&v457;
      goto LABEL_372;
    }
    v417 = 0;
    v50 = *(unsigned int *)(v45 + 20);
    LODWORD(v438) = *(_DWORD *)(v45 + 16);
    *((_QWORD *)&v438 + 1) = v45;
    *(_QWORD *)&v439 = v45 + 32 + v50;
    *((_QWORD *)&v439 + 1) = v45 + 32;
    while (2)
    {
      v51 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v438);
      v52 = v51;
      if (!v51)
        goto LABEL_193;
      if (*(_DWORD *)v51 != 49 || strncmp((const char *)(v51 + 8), "all image infos", 0x10uLL))
      {
        v53 = 2;
        goto LABEL_85;
      }
      read_type_from_raw_core_file_bytes<CS_all_image_infos_header>((uint64_t)v7, *(_QWORD *)(v52 + 24), *(_QWORD *)(v52 + 32), 1, (uint64_t)&v444);
      v53 = 1;
      if (!BYTE8(v445) || (_DWORD)v444 != 1)
      {
        mapped_memory_cache_for_core_file_without_exclave_metadata = 0;
        v417 = 0;
        goto LABEL_85;
      }
      v54 = DWORD1(v444);
      if (!DWORD1(v444))
      {
        v53 = 3;
        goto LABEL_85;
      }
      v410 = mapped_memory_cache_for_core_file_without_exclave_metadata;
      v55 = 0;
      v56 = *((_QWORD *)&v444 + 1);
      v57 = v445;
      v421 = *((_QWORD *)&v444 + 1);
      v425 = v7;
      v415 = DWORD1(v444);
      while (1)
      {
        read_type_from_raw_core_file_bytes<CS_image_entry>((uint64_t)v7, v56 + (v57 * v55), v57, 1, (uint64_t)&v464);
        if (!v467[0])
        {
          mapped_memory_cache_for_core_file_without_exclave_metadata = 0;
          v417 = 0;
          goto LABEL_134;
        }
        v58 = v464;
        if ((_QWORD)v464 == -1)
          goto LABEL_125;
        v59 = CSCppFileMemory::CSCppFileMemory(&v470, v7, v464);
        read_path_from_offset_in_cpp_memory(v59, v58, (std::string *)&__p);
        if (BYTE8(v461))
          break;
LABEL_124:
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v470);
LABEL_125:
        if (++v55 == v54)
        {
          v53 = 3;
          mapped_memory_cache_for_core_file_without_exclave_metadata = v410;
          goto LABEL_85;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v457, "/dyld");
      v60 = SBYTE7(v458);
      if ((SBYTE7(v458) & 0x80u) == 0)
        v61 = BYTE7(v458);
      else
        v61 = *((_QWORD *)&v457 + 1);
      if (SBYTE7(v461) < 0)
      {
        v62 = *((_QWORD *)&__p + 1);
        if (v61 <= *((_QWORD *)&__p + 1))
        {
          p_p = __p;
          goto LABEL_103;
        }
      }
      else
      {
        v62 = BYTE7(v461);
        if (v61 <= BYTE7(v461))
        {
          p_p = (uint64_t)&__p;
LABEL_103:
          v65 = v62 - v61;
          if ((SBYTE7(v458) & 0x80u) == 0)
            v66 = &v457;
          else
            v66 = (__int128 *)v457;
          if (v61)
          {
            v67 = (void *)(p_p + v65);
            v68 = (char *)(p_p + v62);
            v69 = v61;
            v413 = a2;
            v70 = *(char *)v66;
            do
            {
              v71 = v69 - v61;
              if (v71 == -1)
                break;
              v72 = (char *)memchr(v67, v70, v71 + 1);
              if (!v72)
                break;
              v73 = v72;
              if (!memcmp(v72, v66, v61))
                goto LABEL_113;
              v67 = v73 + 1;
              v69 = v68 - (v73 + 1);
            }
            while (v69 >= (uint64_t)v61);
            v73 = v68;
LABEL_113:
            a2 = v413;
            if (v73 == v68)
              v65 = -1;
            else
              v65 = (uint64_t)&v73[-p_p];
            v7 = v425;
          }
          v54 = v415;
          v64 = v65 != -1;
          goto LABEL_118;
        }
      }
      v64 = 0;
LABEL_118:
      if (v60 < 0)
        operator delete((void *)v457);
      if (v64)
      {
        mapped_memory_cache_for_core_file_without_exclave_metadata = *((_QWORD *)&v465 + 1);
        if (BYTE8(v461) && SBYTE7(v461) < 0)
          operator delete((void *)__p);
        v407 = mapped_memory_cache_for_core_file_without_exclave_metadata >> 8;
        CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v470);
        v417 = 1;
LABEL_134:
        v53 = 1;
LABEL_85:
        if (v53 != 2)
        {
          if (v53 != 3 && v417)
          {
            v128 = mapped_memory_cache_for_core_file_without_exclave_metadata | (v407 << 8);
            goto LABEL_280;
          }
LABEL_193:
          *(_QWORD *)&v470 = 0;
          v129 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
          if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v129, (uint64_t)&v470))
          {
            v128 = v470;
            goto LABEL_280;
          }
          address_from_main_bin_spec_lcnote_with_matching = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>(v45, (uint64_t)v7, 1);
          if (v131)
          {
            v132 = address_from_main_bin_spec_lcnote_with_matching;
LABEL_196:
            LOBYTE(__p) = 0;
            v462 = 0;
            v438 = 0uLL;
            *(_QWORD *)&v439 = 0;
            create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v463, v132, (uint64_t)"__kernel__", (uint64_t)v429, 1, &v457);
            if ((_QWORD)v457)
            {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v438, &v457);
              v133 = (const CSCppSymbolOwner *)v457;
              v436 = v457;
              if (*((_QWORD *)&v457 + 1))
              {
                v134 = (unint64_t *)(*((_QWORD *)&v457 + 1) + 8);
                do
                  v135 = __ldxr(v134);
                while (__stxr(v135 + 1, v134));
              }
              std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>(v133, &v444);
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v470, 1uLL, &v444);
              v136 = (CSCppFakeTask *)operator new();
              CSCppFakeTask::CSCppFakeTask(v136, -1, 1);
              v448 = v136;
              FlagsForNListOnlyData = CSSymbolicatorGetFlagsForNListOnlyData();
              v138 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v470, (uint64_t *)&v448, FlagsForNListOnlyData | 2u, 0);
              v140 = v139;
              v141 = v448;
              v448 = 0;
              if (v141)
                (*(void (**)(void *))(*(_QWORD *)v141 + 8))(v141);
              v142 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
              release_core_file_mapped_memory_cache(*(_QWORD *)((v140 & 0xFFFFFFFFFFFFFFFCLL) + 120));
              *(_QWORD *)((v140 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v142);
              AOutSymbolOwner = CSSymbolicatorGetAOutSymbolOwner((char)v138, v140);
              SymbolWithMangledName = CSSymbolOwnerGetSymbolWithMangledName(AOutSymbolOwner, v144, (uint64_t)"_gLoadedKextSummaries");
              Range = CSSymbolGetRange(SymbolWithMangledName, v146);
              CSRelease(v138, v140);
              *(_QWORD *)&v433 = &v470;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
              v148 = (std::__shared_weak_count *)*((_QWORD *)&v444 + 1);
              if (*((_QWORD *)&v444 + 1))
              {
                v149 = (unint64_t *)(*((_QWORD *)&v444 + 1) + 8);
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
              v151 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
              if (*((_QWORD *)&v436 + 1))
              {
                v152 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
              if (Range)
              {
                v154 = (_QWORD *)(*(uint64_t (**)(_OWORD *, unint64_t, uint64_t))(*(_QWORD *)&v463[0]
                                                                                                + 32))(v463, Range, 8);
                if (v155 >= 8)
                {
                  v156 = *v154;
                  v157 = (_DWORD *)(*(uint64_t (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)&v463[0] + 32))(v463, *v154, 16);
                  if (v158 >= 0x10 && *v157 == 2)
                  {
                    v159 = v157[2];
                    if (v157[1] == 136 && (_DWORD)v159 != 0)
                    {
                      v161 = 0;
                      v162 = v156 + 16;
                      do
                      {
                        v163 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)&v463[0] + 32))(v463, v162 + 136 * v161, 136);
                        if (v164 >= 0x88)
                        {
                          v470 = *(_OWORD *)v163;
                          v165 = *(_OWORD *)(v163 + 16);
                          v166 = *(_OWORD *)(v163 + 32);
                          v167 = *(_OWORD *)(v163 + 64);
                          v473 = *(_OWORD *)(v163 + 48);
                          v474 = v167;
                          v471 = v165;
                          v472 = v166;
                          v168 = *(_OWORD *)(v163 + 80);
                          v169 = *(_OWORD *)(v163 + 96);
                          v170 = *(_OWORD *)(v163 + 112);
                          *(_QWORD *)&v477[16] = *(_QWORD *)(v163 + 128);
                          v476 = v169;
                          *(_OWORD *)v477 = v170;
                          v475 = v168;
                          v478 = 1;
                          if ((_QWORD)v168)
                          {
                            create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v463, v168, (uint64_t)&v470, (uint64_t)v429, 0, &v444);
                            if ((_QWORD)v444)
                              std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v438, &v444);
                            v171 = (std::__shared_weak_count *)*((_QWORD *)&v444 + 1);
                            if (*((_QWORD *)&v444 + 1))
                            {
                              v172 = (unint64_t *)(*((_QWORD *)&v444 + 1) + 8);
                              do
                                v173 = __ldaxr(v172);
                              while (__stlxr(v173 - 1, v172));
                              if (!v173)
                              {
                                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                                std::__shared_weak_count::__release_weak(v171);
                              }
                            }
                          }
                        }
                        ++v161;
                      }
                      while (v161 != v159);
                    }
                  }
                }
              }
              v174 = (CSCppFakeTask *)operator new();
              CSCppFakeTask::CSCppFakeTask(v174, -1, 1);
              *(_QWORD *)&v433 = v174;
              std::pair<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>((uint64_t)&v470, (uint64_t *)&v433, (_QWORD **)&v438);
              v175 = v470;
              v470 = 0uLL;
              v464 = v175;
              v465 = v471;
              v471 = 0uLL;
              LOBYTE(v466) = 1;
              *(_QWORD *)&v444 = (char *)&v470 + 8;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v444);
              v176 = v470;
              *(_QWORD *)&v470 = 0;
              if (v176)
                (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
              v177 = v433;
              *(_QWORD *)&v433 = 0;
              if (v177)
                (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
            }
            else
            {
              LOBYTE(v464) = 0;
              LOBYTE(v466) = 0;
            }
            v254 = (std::__shared_weak_count *)*((_QWORD *)&v457 + 1);
            if (*((_QWORD *)&v457 + 1))
            {
              v255 = (unint64_t *)(*((_QWORD *)&v457 + 1) + 8);
              do
                v256 = __ldaxr(v255);
              while (__stlxr(v256 - 1, v255));
              if (!v256)
              {
                ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                std::__shared_weak_count::__release_weak(v254);
              }
            }
            *(_QWORD *)&v470 = &v438;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v470);
            std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((void **)&__p, (uint64_t *)&v464);
            std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&v464);
            v257 = 0;
LABEL_374:
            if (v462)
            {
              v292 = __p;
              __p = 0uLL;
              v438 = v292;
              v439 = v461;
              v461 = 0uLL;
              if ((v257 & 1) == 0)
              {
                v293 = *(unsigned int *)(v45 + 20);
                LODWORD(v464) = *(_DWORD *)(v45 + 16);
                *((_QWORD *)&v464 + 1) = v45;
                *(_QWORD *)&v465 = v45 + 32 + v293;
                *((_QWORD *)&v465 + 1) = v45 + 32;
                for (i = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v464);
                      i;
                      i = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v464))
                {
                  if (*(_DWORD *)i == 49 && !strncmp((const char *)(i + 8), "load binary", 0x10uLL))
                  {
                    read_type_from_raw_core_file_bytes<CS_load_binary_note>((uint64_t)v7, *(_QWORD *)(i + 24), *(_QWORD *)(i + 32), 1, (uint64_t)&v470);
                    if (BYTE4(v474))
                    {
                      if (*(_QWORD *)((char *)&v471 + 4)
                        && (!(DWORD1(v472) ^ 0x6D747073 | BYTE8(v472)) || DWORD1(v472) == 7174260))
                      {
                        create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v463, *(uint64_t *)((char *)&v471 + 4), (uint64_t)&v472 + 4, (uint64_t)v429, 0, &v444);
                        if ((_QWORD)v444)
                          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v438 + 1, &v444);
                        v295 = (std::__shared_weak_count *)*((_QWORD *)&v444 + 1);
                        if (*((_QWORD *)&v444 + 1))
                        {
                          v296 = (unint64_t *)(*((_QWORD *)&v444 + 1) + 8);
                          do
                            v297 = __ldaxr(v296);
                          while (__stlxr(v297 - 1, v296));
                          if (!v297)
                          {
                            ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                            std::__shared_weak_count::__release_weak(v295);
                          }
                        }
                      }
                    }
                  }
                }
                a2 = a2 | 2;
              }
              CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
              v298 = v438;
              *(_QWORD *)&v438 = 0;
              *(_QWORD *)&v444 = v298;
              v74 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask((_QWORD *)&v438 + 1, (uint64_t *)&v444, a2, 0);
              v300 = v299;
              v301 = v444;
              *(_QWORD *)&v444 = 0;
              if (v301)
                (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
              v302 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
              release_core_file_mapped_memory_cache(*(_QWORD *)((v300 & 0xFFFFFFFFFFFFFFFCLL) + 120));
              *(_QWORD *)((v300 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v302);
              *(_QWORD *)&v470 = MEMORY[0x1E0C809B0];
              *((_QWORD *)&v470 + 1) = 0x40000000;
              *(_QWORD *)&v471 = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke;
              *((_QWORD *)&v471 + 1) = &__block_descriptor_tmp_52_0;
              *(_QWORD *)&v472 = v74;
              *((_QWORD *)&v472 + 1) = v300;
              CSSymbolicatorApplyMutableContextBlock(v74, v300, (uint64_t)&v470);
              *(_QWORD *)&v464 = (char *)&v438 + 8;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v464);
              v303 = v438;
              *(_QWORD *)&v438 = 0;
              if (v303)
                (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
LABEL_450:
              std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&__p);
              CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v463);
LABEL_451:
              std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v429);
LABEL_139:
              CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v432);
LABEL_140:
              v75 = &v452;
              goto LABEL_141;
            }
LABEL_449:
            v74 = 0;
            goto LABEL_450;
          }
          for (j = 0; j != 7; ++j)
          {
            v204 = (_QWORD *)(*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)&v463[0] + 32))(v463, qword_1B41ACE00[j] - 16, 40);
            if (v205 >= 0x28)
            {
              v132 = v204[2];
              v206 = *v204 == 0x2068736966746143 || *v204 == 0x20206E656B61724BLL;
              if (v206 && v132 != 0)
                goto LABEL_196;
            }
          }
          *(_QWORD *)&v470 = 0;
          *((_QWORD *)&v470 + 1) = &v470;
          *(_QWORD *)&v471 = 0x3802000000;
          *((_QWORD *)&v471 + 1) = __Block_byref_object_copy__9;
          *(_QWORD *)&v472 = __Block_byref_object_dispose__9;
          BYTE8(v472) = 0;
          LOBYTE(v473) = 0;
          v208 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
          *(_QWORD *)&v464 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v464 + 1) = 0x40000000;
          *(_QWORD *)&v465 = ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke;
          *((_QWORD *)&v465 + 1) = &unk_1E67796E0;
          *((_QWORD *)&v466 + 1) = v463;
          *(_QWORD *)&v466 = &v470;
          enumerate_mapped_memory_core_file_dumped_regions(v208, (uint64_t)&v464);
          v128 = *(_QWORD *)(*((_QWORD *)&v470 + 1) + 40);
          v209 = *(unsigned __int8 *)(*((_QWORD *)&v470 + 1) + 48);
          _Block_object_dispose(&v470, 8);
          if (v209)
          {
LABEL_280:
            LOBYTE(__p) = 0;
            v462 = 0;
            *(_QWORD *)&v438 = 0;
            mach_header_and_cmds_from = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v463, v128, (uint64_t)"<unknown>", (uint64_t *)&v438);
            v211 = v438;
            if (mach_header_and_cmds_from)
            {
              LOBYTE(v212) = 0;
              v213 = 0;
              v214 = 0;
              goto LABEL_338;
            }
            TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(v438, &v464);
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v470, 1uLL, &v464);
            v215 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
            if (*((_QWORD *)&v464 + 1))
            {
              v216 = (unint64_t *)(*((_QWORD *)&v464 + 1) + 8);
              do
                v217 = __ldaxr(v216);
              while (__stlxr(v217 - 1, v216));
              if (!v217)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v218 = (CSCppFakeTask *)operator new();
            CSCppFakeTask::CSCppFakeTask(v218, -1, 0);
            *(_QWORD *)&v444 = v218;
            v219 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v470, (uint64_t *)&v444, 0, 0);
            v221 = v220;
            v222 = v444;
            *(_QWORD *)&v444 = 0;
            if (v222)
              (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
            if (CSIsNull((char)v219, v221))
            {
LABEL_290:
              LOBYTE(v212) = 0;
              v213 = 0;
              v214 = 0;
LABEL_337:
              *(_QWORD *)&v464 = &v470;
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v464);
              v211 = v438;
LABEL_338:
              if (v211)
                (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
              if (v213)
              {
                v178 = v214 & 0xFFFFFFFFFFFFFF00 | v212;
                goto LABEL_342;
              }
LABEL_373:
              v257 = 1;
              goto LABEL_374;
            }
            v258 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)v463);
            release_core_file_mapped_memory_cache(*(_QWORD *)((v221 & 0xFFFFFFFFFFFFFFFCLL) + 120));
            *(_QWORD *)((v221 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v258);
            SymbolWithMangledNameAtTime = CSSymbolicatorGetSymbolWithMangledNameAtTime((char)v219, v221, (uint64_t)"_dyld_all_image_infos", 0x8000000000000000);
            v212 = CSSymbolGetRange(SymbolWithMangledNameAtTime, v260);
            if (v212)
            {
LABEL_336:
              CSRelease(v219, v221);
              v214 = v212 & 0xFFFFFFFFFFFFFF00;
              v213 = 1;
              goto LABEL_337;
            }
            RegionWithNameAtTime = CSSymbolicatorGetRegionWithNameAtTime((char)v219, v221, (uint64_t)"__DATA_DIRTY __all_image_info", 0x8000000000000000);
            v361 = v360;
            if (CSIsNull(RegionWithNameAtTime, v360))
            {
              RegionWithNameAtTime = CSSymbolicatorGetRegionWithNameAtTime((char)v219, v221, (uint64_t)"__DATA __all_image_info", 0x8000000000000000);
              v361 = v362;
              if (CSIsNull(RegionWithNameAtTime, v362))
              {
                CSRelease(v219, v221);
                goto LABEL_290;
              }
            }
            v464 = 0uLL;
            *(_QWORD *)&v465 = 0;
            v384 = CSRegionGetRange(RegionWithNameAtTime, v361);
            v386 = v385 - 368 + v384;
            if (__CFADD__(v385 - 368, v384))
            {
LABEL_560:
              if (*((_QWORD *)&v464 + 1) - (_QWORD)v464 != 8)
                goto LABEL_590;
              v212 = *(_QWORD *)v464;
              v400 = 1;
            }
            else
            {
              while (1)
              {
                v387 = (*(uint64_t (**)(_OWORD *, unint64_t, uint64_t))(*(_QWORD *)&v463[0] + 32))(v463, v384, 368);
                if (v388 <= 0x16F)
                  break;
                v389 = *(_QWORD *)(v387 + 104) == v384 && *(_QWORD *)(v387 + 32) == v128;
                if (v389 && *(_DWORD *)v387 >= 0x11u)
                {
                  v390 = (char *)*((_QWORD *)&v464 + 1);
                  if (*((_QWORD *)&v464 + 1) >= (unint64_t)v465)
                  {
                    v392 = (char *)v464;
                    v393 = (uint64_t)(*((_QWORD *)&v464 + 1) - v464) >> 3;
                    v394 = v393 + 1;
                    if ((unint64_t)(v393 + 1) >> 61)
                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                    v395 = v465 - v464;
                    if ((uint64_t)(v465 - v464) >> 2 > v394)
                      v394 = v395 >> 2;
                    if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFF8)
                      v396 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v396 = v394;
                    if (v396)
                    {
                      v397 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v465, v396);
                      v390 = (char *)*((_QWORD *)&v464 + 1);
                      v392 = (char *)v464;
                    }
                    else
                    {
                      v397 = 0;
                    }
                    v398 = (unint64_t *)&v397[8 * v393];
                    *v398 = v384;
                    v391 = v398 + 1;
                    while (v390 != v392)
                    {
                      v399 = *((_QWORD *)v390 - 1);
                      v390 -= 8;
                      *--v398 = v399;
                    }
                    *(_QWORD *)&v464 = v398;
                    *((_QWORD *)&v464 + 1) = v391;
                    *(_QWORD *)&v465 = &v397[8 * v396];
                    if (v392)
                      operator delete(v392);
                  }
                  else
                  {
                    **((_QWORD **)&v464 + 1) = v384;
                    v391 = v390 + 8;
                  }
                  *((_QWORD *)&v464 + 1) = v391;
                }
                v384 += 8;
                if (v384 > v386)
                  goto LABEL_560;
              }
LABEL_590:
              CSRelease(v219, v221);
              v212 = 0;
              v400 = 0;
            }
            if ((_QWORD)v464)
            {
              *((_QWORD *)&v464 + 1) = v464;
              operator delete((void *)v464);
            }
            if ((v400 & 1) == 0)
              goto LABEL_290;
            goto LABEL_336;
          }
          v329 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>(v45, (uint64_t)v7, 3);
          LOBYTE(__p) = 0;
          v462 = 0;
          if (!v330)
            goto LABEL_449;
          LOBYTE(v464) = 0;
          BYTE8(v465) = 0;
          create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>((uint64_t)v463, 0, v329, (uint64_t)&v464, (void ***)&v444);
          if (BYTE8(v465) && SBYTE7(v465) < 0)
            operator delete((void *)v464);
          v331 = v444;
          if ((_QWORD)v444)
          {
            v332 = *((_QWORD *)&v444 + 1);
            v457 = v444;
            if (*((_QWORD *)&v444 + 1))
            {
              v333 = (unint64_t *)(*((_QWORD *)&v444 + 1) + 8);
              do
                v334 = __ldxr(v333);
              while (__stxr(v334 + 1, v333));
            }
            v438 = 0uLL;
            *(_QWORD *)&v439 = 0;
            *(_QWORD *)&v464 = &v438;
            BYTE8(v464) = 0;
            v335 = operator new(0x10uLL);
            *(_QWORD *)&v438 = v335;
            *(_QWORD *)&v439 = v335 + 2;
            *v335 = v331;
            v335[1] = v332;
            if (v332)
            {
              v336 = (unint64_t *)(v332 + 8);
              do
                v337 = __ldxr(v336);
              while (__stxr(v337 + 1, v336));
            }
            *((_QWORD *)&v438 + 1) = v335 + 2;
            std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&v457);
            v338 = (CSCppFakeTask *)operator new();
            CSCppFakeTask::CSCppFakeTask(v338, -1, 0);
            *(_QWORD *)&v436 = v338;
            std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>> const,0>((uint64_t)&v464, (uint64_t *)&v436, (_QWORD **)&v438);
            v339 = v464;
            v464 = 0uLL;
            v470 = v339;
            v471 = v465;
            v465 = 0uLL;
            LOBYTE(v472) = 1;
            *(_QWORD *)&v457 = (char *)&v464 + 8;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v457);
            v340 = v464;
            *(_QWORD *)&v464 = 0;
            if (v340)
              (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
            v341 = v436;
            *(_QWORD *)&v436 = 0;
            if (v341)
              (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
            *(_QWORD *)&v464 = &v438;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v464);
          }
          else
          {
            LOBYTE(v470) = 0;
            LOBYTE(v472) = 0;
          }
          v404 = (std::__shared_weak_count *)*((_QWORD *)&v444 + 1);
          if (*((_QWORD *)&v444 + 1))
          {
            v405 = (unint64_t *)(*((_QWORD *)&v444 + 1) + 8);
            do
              v406 = __ldaxr(v405);
            while (__stlxr(v406 - 1, v405));
            if (!v406)
            {
              ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
              std::__shared_weak_count::__release_weak(v404);
            }
          }
          std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>((void **)&__p, (uint64_t *)&v470);
          v291 = (uint64_t *)&v470;
LABEL_372:
          std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100](v291);
          goto LABEL_373;
        }
        continue;
      }
      break;
    }
    v56 = v421;
    if (BYTE8(v461) && SBYTE7(v461) < 0)
      operator delete((void *)__p);
    goto LABEL_124;
  }
  CSCppFileMemory::CSCppFileMemory(v432, v7, 0);
  v9 = 28;
  do
  {
    v10 = (_DWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, unint64_t))(v432[0] + 32))(v432, 0, v9);
    v12 = (uint64_t)v10;
    if (!v10 || *v10 != -17958194)
      goto LABEL_136;
    v9 = v10[5] + 28;
  }
  while (v9 > v11);
  if (v10[3] != 4)
  {
LABEL_136:
    v74 = 0;
    goto LABEL_137;
  }
  v444 = 0u;
  v445 = 0u;
  LODWORD(v446) = 1065353216;
  if (a4)
  {
    v13 = (uint64_t *)(a3 + 8);
    do
    {
      v14 = *v13;
      v13 += 2;
      *(_QWORD *)&v470 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 16;
      std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>((uint64_t)&v444, (_QWORD *)v470, (uint64_t)&std::piecewise_construct, (_OWORD **)&v470)[4] = v14 & 0xFFFFFFFFFFFFFFFCLL;
      --a4;
    }
    while (a4);
  }
  v15 = create_mapped_memory_cache_for_core_file_without_exclave_metadata(v7, "CSSymbolicator for core file");
  if (!v15)
  {
    v74 = 0;
    goto LABEL_533;
  }
  CSCppCoreFileMemory::CSCppCoreFileMemory(&v448, v15);
  release_core_file_mapped_memory_cache(v15);
  *(_QWORD *)&v470 = 0;
  v16 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
  if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v16, (uint64_t)&v470))
  {
    v127 = v470;
    LOBYTE(v429[0]) = 0;
    LOBYTE(v431) = 0;
    goto LABEL_298;
  }
  v416 = 0;
  v17 = *(unsigned int *)(v12 + 20);
  LODWORD(v464) = *(_DWORD *)(v12 + 16);
  *((_QWORD *)&v464 + 1) = v12;
  *(_QWORD *)&v465 = v12 + 28 + v17;
  *((_QWORD *)&v465 + 1) = v12 + 28;
  do
  {
    v18 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v464);
    v19 = v18;
    if (!v18)
      goto LABEL_147;
    if (*(_DWORD *)v18 != 49 || strncmp((const char *)(v18 + 8), "all image infos", 0x10uLL))
    {
      v20 = 2;
      continue;
    }
    read_type_from_raw_core_file_bytes<CS_all_image_infos_header>((uint64_t)v7, *(_QWORD *)(v19 + 24), *(_QWORD *)(v19 + 32), 1, (uint64_t)&v438);
    v20 = 1;
    if (!BYTE8(v439) || (_DWORD)v438 != 1)
    {
      v15 = 0;
      v416 = 0;
      continue;
    }
    v21 = DWORD1(v438);
    if (!DWORD1(v438))
    {
      v20 = 3;
      continue;
    }
    v409 = v15;
    v22 = 0;
    v23 = *((_QWORD *)&v438 + 1);
    v24 = v439;
    v420 = *((_QWORD *)&v438 + 1);
    v424 = v7;
    v414 = DWORD1(v438);
    while (1)
    {
      read_type_from_raw_core_file_bytes<CS_image_entry>((uint64_t)v7, v23 + (v24 * v22), v24, 1, (uint64_t)&v452);
      if (!LOBYTE(v455[1]))
      {
        v15 = 0;
        v416 = 0;
        goto LABEL_67;
      }
      v25 = v452;
      if ((_QWORD)v452 != -1)
        break;
LABEL_58:
      if (++v22 == v21)
      {
        v20 = 3;
        v15 = v409;
        goto LABEL_18;
      }
    }
    v26 = CSCppFileMemory::CSCppFileMemory(&v470, v7, v452);
    read_path_from_offset_in_cpp_memory(v26, v25, (std::string *)v429);
    if (!BYTE8(v430))
      goto LABEL_57;
    std::string::basic_string[abi:ne180100]<0>(&__p, "/dyld");
    v27 = SBYTE7(v461);
    if ((SBYTE7(v461) & 0x80u) == 0)
      v28 = BYTE7(v461);
    else
      v28 = *((_QWORD *)&__p + 1);
    if (SBYTE7(v430) < 0)
    {
      v29 = (char *)v429[1];
      if ((void *)v28 > v429[1])
      {
LABEL_34:
        v31 = 0;
        if ((SBYTE7(v461) & 0x80000000) == 0)
          goto LABEL_53;
LABEL_52:
        operator delete((void *)__p);
        goto LABEL_53;
      }
      v30 = (void **)v429[0];
    }
    else
    {
      v29 = (char *)BYTE7(v430);
      if (v28 > BYTE7(v430))
        goto LABEL_34;
      v30 = v429;
    }
    v32 = (uint64_t)&v29[-v28];
    if ((SBYTE7(v461) & 0x80u) == 0)
      v33 = &__p;
    else
      v33 = (__int128 *)__p;
    if (v28)
    {
      v34 = (char *)v30 + v32;
      v35 = &v29[(_QWORD)v30];
      v36 = v28;
      v412 = a2;
      v37 = *(char *)v33;
      do
      {
        v38 = v36 - v28;
        if (v38 == -1)
          break;
        v39 = (char *)memchr(v34, v37, v38 + 1);
        if (!v39)
          break;
        v40 = v39;
        if (!memcmp(v39, v33, v28))
          goto LABEL_47;
        v34 = v40 + 1;
        v36 = v35 - (v40 + 1);
      }
      while (v36 >= (uint64_t)v28);
      v40 = v35;
LABEL_47:
      a2 = v412;
      if (v40 == v35)
        v32 = -1;
      else
        v32 = v40 - (char *)v30;
      v7 = v424;
    }
    v21 = v414;
    v31 = v32 != -1;
    if (v27 < 0)
      goto LABEL_52;
LABEL_53:
    if (!v31)
    {
      v23 = v420;
      if (BYTE8(v430) && SBYTE7(v430) < 0)
        operator delete(v429[0]);
LABEL_57:
      CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v470);
      goto LABEL_58;
    }
    v15 = *((_QWORD *)&v453 + 1);
    if (BYTE8(v430) && SBYTE7(v430) < 0)
      operator delete(v429[0]);
    v407 = v15 >> 8;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v470);
    v416 = 1;
LABEL_67:
    v20 = 1;
LABEL_18:
    ;
  }
  while (v20 == 2);
  if (v20 != 3 && v416)
  {
    v77 = v15 | (v407 << 8);
    goto LABEL_250;
  }
LABEL_147:
  *(_QWORD *)&v470 = 0;
  v78 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
  if (!mapped_memory_core_file_get_dyld_all_image_infos_addr(v78, (uint64_t)&v470))
  {
    v77 = v470;
LABEL_250:
    LOBYTE(v429[0]) = 0;
    LOBYTE(v431) = 0;
    *(_QWORD *)&v464 = 0;
    v186 = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v448, v77, (uint64_t)"<unknown>", (uint64_t *)&v464);
    v187 = v464;
    if (v186)
    {
      LOBYTE(v188) = 0;
      v189 = 0;
      v190 = 0;
LABEL_294:
      if (v187)
        (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
      if (!v189)
      {
LABEL_507:
        v202 = 1;
        goto LABEL_508;
      }
      v127 = v190 & 0xFFFFFFFFFFFFFF00 | v188;
LABEL_298:
      v226 = (*((uint64_t (**)(void **, unint64_t, uint64_t))v448 + 4))(&v448, v127, 224);
      if (v227 > 0xDF)
      {
        v426 = v7;
        v228 = *(_DWORD *)v226;
        v229 = *(unsigned int *)(v226 + 4);
        v230 = *(unsigned int *)(v226 + 8);
        v231 = *(unsigned int *)(v226 + 20);
        v232 = *(_OWORD *)(v226 + 56);
        v465 = *(_OWORD *)(v226 + 40);
        v466 = v232;
        *(_OWORD *)v467 = *(_OWORD *)(v226 + 72);
        *(_OWORD *)&v467[12] = *(_OWORD *)(v226 + 84);
        v464 = *(_OWORD *)(v226 + 24);
        v233 = *(unsigned int *)(v226 + 100);
        v234 = *(unsigned int *)(v226 + 112);
        v235 = *(_DWORD *)(v226 + 176);
        v236 = *(unsigned int *)(v226 + 200);
        v463[0] = *(_OWORD *)(v226 + 204);
        if (v228 > 0x10 && (_DWORD)v230)
        {
          v422 = v235;
          v433 = 0uLL;
          *(_QWORD *)&v434 = 0;
          v237 = (*((uint64_t (**)(void **, uint64_t, uint64_t))v448 + 4))(&v448, v230, 12 * v229);
          if (v237)
          {
            v418 = v231;
            v411 = v233;
            if ((_DWORD)v229)
            {
              v238 = 0;
              v239 = *((_QWORD *)&v433 + 1);
              do
              {
                v240 = v237 + 12 * v238;
                if (v239 >= (unint64_t)v434)
                {
                  v242 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v239 - v433) >> 2);
                  v243 = v242 + 1;
                  if (v242 + 1 > 0x1555555555555555)
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v434 - v433) >> 2) > v243)
                    v243 = 0x5555555555555556 * ((uint64_t)(v434 - v433) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v434 - v433) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v244 = 0x1555555555555555;
                  else
                    v244 = v243;
                  if (v244)
                    v245 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRangeValue<Pointer32,unsigned int>>>((uint64_t)&v434, v244);
                  else
                    v245 = 0;
                  v246 = &v245[12 * v242];
                  v247 = *(_QWORD *)v240;
                  *((_DWORD *)v246 + 2) = *(_DWORD *)(v240 + 8);
                  *(_QWORD *)v246 = v247;
                  v248 = (_DWORD *)*((_QWORD *)&v433 + 1);
                  v249 = (_DWORD *)v433;
                  v250 = v246;
                  if (*((_QWORD *)&v433 + 1) != (_QWORD)v433)
                  {
                    do
                    {
                      v251 = *(_QWORD *)(v248 - 3);
                      v248 -= 3;
                      v252 = v248[2];
                      *(_QWORD *)(v250 - 12) = v251;
                      v250 -= 12;
                      *((_DWORD *)v250 + 2) = v252;
                    }
                    while (v248 != v249);
                    v248 = (_DWORD *)v433;
                  }
                  v239 = (unint64_t)(v246 + 12);
                  *(_QWORD *)&v433 = v250;
                  *((_QWORD *)&v433 + 1) = v246 + 12;
                  *(_QWORD *)&v434 = &v245[12 * v244];
                  if (v248)
                    operator delete(v248);
                }
                else
                {
                  v241 = *(_QWORD *)v240;
                  *(_DWORD *)(v239 + 8) = *(_DWORD *)(v240 + 8);
                  *(_QWORD *)v239 = v241;
                  v239 += 12;
                }
                *((_QWORD *)&v433 + 1) = v239;
                ++v238;
              }
              while (v238 != v229);
            }
            *(_QWORD *)&v438 = 0;
            *((_QWORD *)&v438 + 1) = &v438;
            *(_QWORD *)&v439 = 0x4002000000;
            *((_QWORD *)&v439 + 1) = __Block_byref_object_copy__40;
            v440 = __Block_byref_object_dispose__41;
            *(_QWORD *)&v442 = 0;
            v441 = 0uLL;
            LOBYTE(v470) = 0;
            BYTE8(v471) = 0;
            if (v422 <= 0x18 && ((1 << v422) & 0x1550000) != 0)
              std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>((std::string *)&v470, "/usr/lib/dyld");
            create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v448, v234, v418, (uint64_t)&v470, (void ***)&v452);
            v7 = v426;
            v253 = v452;
            if ((_QWORD)v452)
            {
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)(*((_QWORD *)&v438 + 1) + 40), &v452);
            }
            else
            {
              LOBYTE(__p) = 0;
              v462 = 0;
            }
            a2 = a2;
            v321 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
            if (*((_QWORD *)&v452 + 1))
            {
              v322 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
              do
                v323 = __ldaxr(v322);
              while (__stlxr(v323 - 1, v322));
              if (!v323)
              {
                ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                std::__shared_weak_count::__release_weak(v321);
              }
            }
            if (BYTE8(v471) && SBYTE7(v471) < 0)
              operator delete((void *)v470);
            if (v253)
            {
              *(_QWORD *)&v452 = 0;
              *((_QWORD *)&v452 + 1) = &v452;
              *(_QWORD *)&v453 = 0x5002000000;
              *((_QWORD *)&v453 + 1) = __Block_byref_object_copy__43;
              v454 = __Block_byref_object_dispose__44;
              memset(v455, 0, sizeof(v455));
              v456 = 1065353216;
              *(_QWORD *)&v457 = 0;
              *((_QWORD *)&v457 + 1) = &v457;
              *(_QWORD *)&v458 = 0x2000000000;
              BYTE8(v458) = 1;
              v324 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
              *(_QWORD *)&v470 = MEMORY[0x1E0C809B0];
              *((_QWORD *)&v470 + 1) = 1174405120;
              *(_QWORD *)&v471 = ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke;
              *((_QWORD *)&v471 + 1) = &unk_1E6779668;
              v474 = 0uLL;
              *((_QWORD *)&v473 + 1) = 0;
              std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>((_QWORD *)&v473 + 1, (const void *)v433, *((uint64_t *)&v433 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v433 + 1) - v433) >> 2));
              *(_QWORD *)&v472 = &v452;
              *((_QWORD *)&v472 + 1) = &v457;
              *(_QWORD *)&v475 = &v448;
              *(_QWORD *)&v473 = &v438;
              enumerate_mapped_memory_core_file_dumped_regions(v324, (uint64_t)&v470);
              if (*(_BYTE *)(*((_QWORD *)&v457 + 1) + 24))
              {
                v325 = operator new();
                *(_BYTE *)(v325 + 16) = 0;
                *(_QWORD *)v325 = &off_1E6774D70;
                *(_QWORD *)(v325 + 8) = 0;
                CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTaskContainer *)(v325 + 24), 0, -1);
                *(_BYTE *)(v325 + 40) = 0;
                *(_OWORD *)(v325 + 41) = *(_OWORD *)&v467[12];
                *(_OWORD *)(v325 + 57) = v463[0];
                *(_QWORD *)(v325 + 80) = v411;
                *(_QWORD *)(v325 + 88) = v236;
                v451 = (void **)v325;
                *(_BYTE *)(v325 + 16) = (_DWORD)v236 != 0;
                std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>((uint64_t)&v436, (uint64_t *)&v451, (_QWORD **)(*((_QWORD *)&v438 + 1) + 40));
                v326 = v436;
                v436 = 0uLL;
                __p = v326;
                v461 = v437;
                v437 = 0uLL;
                v462 = 1;
                *(_QWORD *)&v469 = (char *)&v436 + 8;
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v469);
                v327 = v436;
                *(_QWORD *)&v436 = 0;
                if (v327)
                  (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
                v328 = v451;
                v451 = 0;
                if (v328)
                  (*((void (**)(void **))*v328 + 1))(v328);
              }
              else
              {
                LOBYTE(__p) = 0;
                v462 = 0;
              }
              if (*((_QWORD *)&v473 + 1))
              {
                *(_QWORD *)&v474 = *((_QWORD *)&v473 + 1);
                operator delete(*((void **)&v473 + 1));
              }
              _Block_object_dispose(&v457, 8);
              _Block_object_dispose(&v452, 8);
              std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v455);
            }
            _Block_object_dispose(&v438, 8);
            *(_QWORD *)&v452 = &v441;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
          }
          else
          {
            LOBYTE(__p) = 0;
            v462 = 0;
            v7 = v426;
          }
          if ((_QWORD)v433)
          {
            *((_QWORD *)&v433 + 1) = v433;
            operator delete((void *)v433);
          }
        }
        else
        {
          LOBYTE(__p) = 0;
          v462 = 0;
          v7 = v426;
        }
      }
      else
      {
        LOBYTE(__p) = 0;
        v462 = 0;
      }
      std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>(v429, (uint64_t *)&__p);
      v371 = (uint64_t *)&__p;
LABEL_506:
      std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100](v371);
      goto LABEL_507;
    }
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(v464, &v452);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v470, 1uLL, &v452);
    v191 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
    if (*((_QWORD *)&v452 + 1))
    {
      v192 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    v194 = (CSCppFakeTask *)operator new();
    CSCppFakeTask::CSCppFakeTask(v194, -1, 0);
    *(_QWORD *)&v438 = v194;
    v195 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v470, (uint64_t *)&v438, 0, 0);
    v197 = v196;
    v198 = v438;
    *(_QWORD *)&v438 = 0;
    if (v198)
      (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
    if (CSIsNull((char)v195, v197))
      goto LABEL_260;
    v223 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
    release_core_file_mapped_memory_cache(*(_QWORD *)((v197 & 0xFFFFFFFFFFFFFFFCLL) + 120));
    *(_QWORD *)((v197 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v223);
    v224 = CSSymbolicatorGetSymbolWithMangledNameAtTime((char)v195, v197, (uint64_t)"_dyld_all_image_infos", 0x8000000000000000);
    v188 = CSSymbolGetRange(v224, v225);
    if (v188)
    {
LABEL_292:
      CSRelease(v195, v197);
      v190 = v188 & 0xFFFFFFFFFFFFFF00;
      v189 = 1;
      goto LABEL_293;
    }
    v317 = CSSymbolicatorGetRegionWithNameAtTime((char)v195, v197, (uint64_t)"__DATA_DIRTY __all_image_info", 0x8000000000000000);
    v319 = v318;
    if (CSIsNull(v317, v318))
    {
      v317 = CSSymbolicatorGetRegionWithNameAtTime((char)v195, v197, (uint64_t)"__DATA __all_image_info", 0x8000000000000000);
      v319 = v320;
      if (CSIsNull(v317, v320))
      {
        CSRelease(v195, v197);
        goto LABEL_260;
      }
    }
    v452 = 0uLL;
    *(_QWORD *)&v453 = 0;
    v342 = CSRegionGetRange(v317, v319);
    v344 = v343 - 224 + v342;
    if (__CFADD__(v343 - 224, v342))
    {
LABEL_478:
      if (*((_QWORD *)&v452 + 1) - (_QWORD)v452 == 8)
      {
        v188 = *(_QWORD *)v452;
        v358 = 1;
        goto LABEL_579;
      }
    }
    else
    {
      while (1)
      {
        v345 = (_DWORD *)(*((uint64_t (**)(void **, unint64_t, uint64_t))v448 + 4))(&v448, v342, 224);
        if (v346 <= 0xDF)
          break;
        v347 = v342 == v345[14] && v77 == v345[5];
        if (v347 && *v345 >= 0x11u)
        {
          v348 = (char *)*((_QWORD *)&v452 + 1);
          if (*((_QWORD *)&v452 + 1) >= (unint64_t)v453)
          {
            v350 = (char *)v452;
            v351 = (uint64_t)(*((_QWORD *)&v452 + 1) - v452) >> 3;
            v352 = v351 + 1;
            if ((unint64_t)(v351 + 1) >> 61)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v353 = v453 - v452;
            if ((uint64_t)(v453 - v452) >> 2 > v352)
              v352 = v353 >> 2;
            if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
              v354 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v354 = v352;
            if (v354)
            {
              v355 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v453, v354);
              v348 = (char *)*((_QWORD *)&v452 + 1);
              v350 = (char *)v452;
            }
            else
            {
              v355 = 0;
            }
            v356 = (unint64_t *)&v355[8 * v351];
            *v356 = v342;
            v349 = v356 + 1;
            while (v348 != v350)
            {
              v357 = *((_QWORD *)v348 - 1);
              v348 -= 8;
              *--v356 = v357;
            }
            *(_QWORD *)&v452 = v356;
            *((_QWORD *)&v452 + 1) = v349;
            *(_QWORD *)&v453 = &v355[8 * v354];
            if (v350)
              operator delete(v350);
          }
          else
          {
            **((_QWORD **)&v452 + 1) = v342;
            v349 = v348 + 8;
          }
          *((_QWORD *)&v452 + 1) = v349;
        }
        v342 += 8;
        if (v342 > v344)
          goto LABEL_478;
      }
    }
    CSRelease(v195, v197);
    v188 = 0;
    v358 = 0;
LABEL_579:
    if ((_QWORD)v452)
    {
      *((_QWORD *)&v452 + 1) = v452;
      operator delete((void *)v452);
    }
    if ((v358 & 1) != 0)
      goto LABEL_292;
LABEL_260:
    LOBYTE(v188) = 0;
    v189 = 0;
    v190 = 0;
LABEL_293:
    *(_QWORD *)&v452 = &v470;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
    v187 = v464;
    goto LABEL_294;
  }
  v79 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>(v12, (uint64_t)v7, 1);
  if (v80)
  {
    v81 = v79;
  }
  else
  {
    v179 = 0;
    while (1)
    {
      v180 = (_QWORD *)(*((uint64_t (**)(void **, uint64_t, uint64_t))v448 + 4))(&v448, qword_1B41ACE00[v179] - 16, 40);
      if (v181 >= 0x28)
      {
        v81 = v180[2];
        v182 = *v180 == 0x2068736966746143 || *v180 == 0x20206E656B61724BLL;
        if (v182 && v81 != 0)
          break;
      }
      if (++v179 == 7)
      {
        *(_QWORD *)&v470 = 0;
        *((_QWORD *)&v470 + 1) = &v470;
        *(_QWORD *)&v471 = 0x3802000000;
        *((_QWORD *)&v471 + 1) = __Block_byref_object_copy__9;
        *(_QWORD *)&v472 = __Block_byref_object_dispose__9;
        BYTE8(v472) = 0;
        LOBYTE(v473) = 0;
        v184 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
        *(_QWORD *)&v452 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v452 + 1) = 0x40000000;
        *(_QWORD *)&v453 = ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke;
        *((_QWORD *)&v453 + 1) = &unk_1E6779640;
        v455[0] = &v448;
        v454 = (uint64_t (*)(uint64_t))&v470;
        enumerate_mapped_memory_core_file_dumped_regions(v184, (uint64_t)&v452);
        v77 = *(_QWORD *)(*((_QWORD *)&v470 + 1) + 40);
        v185 = *(unsigned __int8 *)(*((_QWORD *)&v470 + 1) + 48);
        _Block_object_dispose(&v470, 8);
        if (v185)
          goto LABEL_250;
        v304 = get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>(v12, (uint64_t)v7, 3);
        LOBYTE(v429[0]) = 0;
        LOBYTE(v431) = 0;
        if (v305)
        {
          LOBYTE(v452) = 0;
          BYTE8(v453) = 0;
          create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v448, 0, v304, (uint64_t)&v452, (void ***)&v438);
          if (BYTE8(v453) && SBYTE7(v453) < 0)
            operator delete((void *)v452);
          v306 = v438;
          if ((_QWORD)v438)
          {
            v307 = *((_QWORD *)&v438 + 1);
            __p = v438;
            if (*((_QWORD *)&v438 + 1))
            {
              v308 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
              do
                v309 = __ldxr(v308);
              while (__stxr(v309 + 1, v308));
            }
            v464 = 0uLL;
            *(_QWORD *)&v465 = 0;
            *(_QWORD *)&v452 = &v464;
            BYTE8(v452) = 0;
            v310 = operator new(0x10uLL);
            *(_QWORD *)&v464 = v310;
            *(_QWORD *)&v465 = v310 + 2;
            *v310 = v306;
            v310[1] = v307;
            if (v307)
            {
              v311 = (unint64_t *)(v307 + 8);
              do
                v312 = __ldxr(v311);
              while (__stxr(v312 + 1, v311));
            }
            *((_QWORD *)&v464 + 1) = v310 + 2;
            std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
            v313 = (CSCppFakeTask *)operator new();
            CSCppFakeTask::CSCppFakeTask(v313, -1, 0);
            *(_QWORD *)&v457 = v313;
            std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>> const,0>((uint64_t)&v452, (uint64_t *)&v457, (_QWORD **)&v464);
            v314 = v452;
            v452 = 0uLL;
            v470 = v314;
            v471 = v453;
            v453 = 0uLL;
            LOBYTE(v472) = 1;
            *(_QWORD *)&__p = (char *)&v452 + 8;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v315 = v452;
            *(_QWORD *)&v452 = 0;
            if (v315)
              (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
            v316 = v457;
            *(_QWORD *)&v457 = 0;
            if (v316)
              (*(void (**)(uint64_t))(*(_QWORD *)v316 + 8))(v316);
            *(_QWORD *)&v452 = &v464;
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
          }
          else
          {
            LOBYTE(v470) = 0;
            LOBYTE(v472) = 0;
          }
          v401 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
          if (*((_QWORD *)&v438 + 1))
          {
            v402 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
            do
              v403 = __ldaxr(v402);
            while (__stlxr(v403 - 1, v402));
            if (!v403)
            {
              ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
              std::__shared_weak_count::__release_weak(v401);
            }
          }
          std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>(v429, (uint64_t *)&v470);
          v371 = (uint64_t *)&v470;
          goto LABEL_506;
        }
        goto LABEL_526;
      }
    }
  }
  LOBYTE(v429[0]) = 0;
  LOBYTE(v431) = 0;
  v464 = 0uLL;
  *(_QWORD *)&v465 = 0;
  create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v448, v81, (uint64_t)"__kernel__", (uint64_t)&v444, 1, &__p);
  if ((_QWORD)__p)
  {
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v464, &__p);
    v82 = (const CSCppSymbolOwner *)__p;
    v457 = __p;
    if (*((_QWORD *)&__p + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,CSCppSymbolOwner&,void>(v82, &v438);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(&v470, 1uLL, &v438);
    v85 = (CSCppFakeTask *)operator new();
    CSCppFakeTask::CSCppFakeTask(v85, -1, 1);
    *(_QWORD *)&v433 = v85;
    v86 = CSSymbolicatorGetFlagsForNListOnlyData();
    v87 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v470, (uint64_t *)&v433, v86 | 2u, 0);
    v89 = v88;
    v90 = v433;
    *(_QWORD *)&v433 = 0;
    if (v90)
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
    v91 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
    release_core_file_mapped_memory_cache(*(_QWORD *)((v89 & 0xFFFFFFFFFFFFFFFCLL) + 120));
    *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v91);
    v92 = CSSymbolicatorGetAOutSymbolOwner((char)v87, v89);
    v94 = CSSymbolOwnerGetSymbolWithMangledName(v92, v93, (uint64_t)"_gLoadedKextSummaries");
    v96 = CSSymbolGetRange(v94, v95);
    CSRelease(v87, v89);
    *(_QWORD *)&v436 = &v470;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
    if (*((_QWORD *)&v438 + 1))
    {
      v98 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = (std::__shared_weak_count *)*((_QWORD *)&v457 + 1);
    if (*((_QWORD *)&v457 + 1))
    {
      v101 = (unint64_t *)(*((_QWORD *)&v457 + 1) + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if (v96)
    {
      v103 = (unsigned int *)(*((uint64_t (**)(void **, unint64_t, uint64_t))v448 + 4))(&v448, v96, 4);
      if (v104 >= 4)
      {
        v105 = *v103;
        v106 = (_DWORD *)(*((uint64_t (**)(void **, uint64_t, uint64_t))v448 + 4))(&v448, v105, 16);
        if (v107 >= 0x10 && *v106 == 2)
        {
          v108 = v106[2];
          if (v106[1] == 136 && (_DWORD)v108 != 0)
          {
            v110 = 0;
            v111 = v105 + 16;
            do
            {
              v112 = (*((uint64_t (**)(void **, uint64_t, uint64_t))v448 + 4))(&v448, v111 + 136 * v110, 136);
              if (v113 >= 0x88)
              {
                v470 = *(_OWORD *)v112;
                v114 = *(_OWORD *)(v112 + 16);
                v115 = *(_OWORD *)(v112 + 32);
                v116 = *(_OWORD *)(v112 + 64);
                v473 = *(_OWORD *)(v112 + 48);
                v474 = v116;
                v471 = v114;
                v472 = v115;
                v117 = *(_OWORD *)(v112 + 80);
                v118 = *(_OWORD *)(v112 + 96);
                v119 = *(_OWORD *)(v112 + 112);
                *(_QWORD *)&v477[16] = *(_QWORD *)(v112 + 128);
                v476 = v118;
                *(_OWORD *)v477 = v119;
                v475 = v117;
                v478 = 1;
                if ((_QWORD)v117)
                {
                  create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v448, v117, (uint64_t)&v470, (uint64_t)&v444, 0, &v438);
                  if ((_QWORD)v438)
                    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v464, &v438);
                  v120 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
                  if (*((_QWORD *)&v438 + 1))
                  {
                    v121 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                }
              }
              ++v110;
            }
            while (v110 != v108);
          }
        }
      }
    }
    v123 = (CSCppFakeTask *)operator new();
    CSCppFakeTask::CSCppFakeTask(v123, -1, 1);
    *(_QWORD *)&v436 = v123;
    std::pair<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>((uint64_t)&v470, (uint64_t *)&v436, (_QWORD **)&v464);
    v124 = v470;
    v470 = 0uLL;
    v452 = v124;
    v453 = v471;
    v471 = 0uLL;
    LOBYTE(v454) = 1;
    *(_QWORD *)&v438 = (char *)&v470 + 8;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v438);
    v125 = v470;
    *(_QWORD *)&v470 = 0;
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
    v126 = v436;
    *(_QWORD *)&v436 = 0;
    if (v126)
      (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  }
  else
  {
    LOBYTE(v452) = 0;
    LOBYTE(v454) = 0;
  }
  v199 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v200 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  *(_QWORD *)&v470 = &v464;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v470);
  std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>(v429, (uint64_t *)&v452);
  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&v452);
  v202 = 0;
LABEL_508:
  if ((_BYTE)v431)
  {
    v372 = *(_OWORD *)v429;
    v429[0] = 0;
    v429[1] = 0;
    v464 = v372;
    v465 = v430;
    v430 = 0uLL;
    if ((v202 & 1) == 0)
    {
      v373 = *(unsigned int *)(v12 + 20);
      LODWORD(v452) = *(_DWORD *)(v12 + 16);
      *((_QWORD *)&v452 + 1) = v12;
      *(_QWORD *)&v453 = v12 + 28 + v373;
      *((_QWORD *)&v453 + 1) = v12 + 28;
      for (k = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v452);
            k;
            k = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v452))
      {
        if (*(_DWORD *)k == 49 && !strncmp((const char *)(k + 8), "load binary", 0x10uLL))
        {
          read_type_from_raw_core_file_bytes<CS_load_binary_note>((uint64_t)v7, *(_QWORD *)(k + 24), *(_QWORD *)(k + 32), 1, (uint64_t)&v470);
          if (BYTE4(v474))
          {
            if (*(_QWORD *)((char *)&v471 + 4)
              && (!(DWORD1(v472) ^ 0x6D747073 | BYTE8(v472)) || DWORD1(v472) == 7174260))
            {
              create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>((uint64_t)&v448, *(uint64_t *)((char *)&v471 + 4), (uint64_t)&v472 + 4, (uint64_t)&v444, 0, &v438);
              if ((_QWORD)v438)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v464 + 1, &v438);
              v375 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
              if (*((_QWORD *)&v438 + 1))
              {
                v376 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
                do
                  v377 = __ldaxr(v376);
                while (__stlxr(v377 - 1, v376));
                if (!v377)
                {
                  ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                  std::__shared_weak_count::__release_weak(v375);
                }
              }
            }
          }
        }
      }
      a2 = a2 | 2;
    }
    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
    v378 = v464;
    *(_QWORD *)&v464 = 0;
    *(_QWORD *)&v438 = v378;
    v74 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask((_QWORD *)&v464 + 1, (uint64_t *)&v438, a2, 0);
    v380 = v379;
    v381 = v438;
    *(_QWORD *)&v438 = 0;
    if (v381)
      (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
    v382 = CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory((CSCppCoreFileMemory *)&v448);
    release_core_file_mapped_memory_cache(*(_QWORD *)((v380 & 0xFFFFFFFFFFFFFFFCLL) + 120));
    *(_QWORD *)((v380 & 0xFFFFFFFFFFFFFFFCLL) + 120) = retain_mapped_memory_cache(v382);
    *(_QWORD *)&v470 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v470 + 1) = 0x40000000;
    *(_QWORD *)&v471 = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke;
    *((_QWORD *)&v471 + 1) = &__block_descriptor_tmp_4_2;
    *(_QWORD *)&v472 = v74;
    *((_QWORD *)&v472 + 1) = v380;
    CSSymbolicatorApplyMutableContextBlock(v74, v380, (uint64_t)&v470);
    *(_QWORD *)&v452 = (char *)&v464 + 8;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
    v383 = v464;
    *(_QWORD *)&v464 = 0;
    if (v383)
      (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
  }
  else
  {
LABEL_526:
    v74 = 0;
  }
  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)v429);
  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v448);
LABEL_533:
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&v444);
LABEL_137:
  v75 = (__int128 *)v432;
LABEL_141:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v75);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v428);
  return v74;
}

void sub_1B416662C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  void *v63;

  v63 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x350] = v61 - 256;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  if (a61)
    (*(void (**)(uint64_t))(*(_QWORD *)a61 + 8))(a61);
  std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t *)&STACK[0x300]);
  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&STACK[0x330]);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a31);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a36);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&STACK[0x250]);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a16);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t address_from_main_bin_spec_lcnote_with_matching_type;
  uint64_t v7;
  unint64_t v8;
  uint64_t type_from_raw_core_file;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(unsigned int *)(a1 + 20);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = a1;
  v13 = a1 + 28 + v5;
  v14 = a1 + 28;
  address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (address_from_main_bin_spec_lcnote_with_matching_type)
  {
    v7 = address_from_main_bin_spec_lcnote_with_matching_type;
    while (*(_DWORD *)v7 != 49 || strncmp((const char *)(v7 + 8), "main bin spec", 0x10uLL))
    {
      address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      v7 = address_from_main_bin_spec_lcnote_with_matching_type;
      if (!address_from_main_bin_spec_lcnote_with_matching_type)
        goto LABEL_6;
    }
    type_from_raw_core_file = read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>(a2, *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), 1);
    v8 = BYTE4(type_from_raw_core_file);
    if (BYTE4(type_from_raw_core_file))
    {
      if ((_DWORD)type_from_raw_core_file == 2)
      {
        address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>(a2, v7, a3);
        goto LABEL_13;
      }
      if ((_DWORD)type_from_raw_core_file == 1)
      {
        address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>(a2, v7, a3);
LABEL_13:
        v8 = address_from_main_bin_spec_lcnote_with_matching_type & 0xFFFFFFFFFFFFFF00;
        return address_from_main_bin_spec_lcnote_with_matching_type | v8;
      }
      v8 = 0;
    }
    LOBYTE(address_from_main_bin_spec_lcnote_with_matching_type) = 0;
    return address_from_main_bin_spec_lcnote_with_matching_type | v8;
  }
LABEL_6:
  v8 = 0;
  return address_from_main_bin_spec_lcnote_with_matching_type | v8;
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2;
  v5[3] = &__block_descriptor_tmp_14;
  v5[4] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v2, v3, 0x8000000000000000, (uint64_t)v5);
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer3212LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  char *v7;
  char *MutableInContext;
  char v9;
  uint64_t v10;
  uint64_t v11;
  const char *Path;

  result = (uint64_t)CSSymbolOwnerGetCFUUIDBytes(a2, a3);
  if (result)
  {
    result = (uint64_t)CSGetBinaryPathForExclaveWithUUIDBytes((_QWORD *)result);
    if (result)
    {
      v7 = (char *)result;
      MutableInContext = (char *)CSSymbolOwnerMakeMutableInContext(a2, a3, *(CSCppMutableContext **)(a1 + 32));
      v9 = (char)MutableInContext;
      v11 = v10;
      CSSymbolOwnerSetPathForSymbolication(MutableInContext, v10, v7);
      Path = (const char *)CSSymbolOwnerGetPath(v9, v11);
      if (!Path)
        return CSSymbolOwnerSetPath(v9, v11, v7);
      result = strcmp(Path, "<unknown>");
      if (!(_DWORD)result)
        return CSSymbolOwnerSetPath(v9, v11, v7);
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = a2[1] ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_42:
    *v21 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4167344(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void read_type_from_raw_core_file_bytes<CS_all_image_infos_header>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v10[15];

  if (a4 && a3 <= 0x17)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 24) = 0;
  }
  else
  {
    CSCppFileMemory::CSCppFileMemory(v10, a1, a2);
    v7 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10[0] + 32))(v10, a2, 24);
    if (v8 > 0x17)
    {
      *(_OWORD *)a5 = *(_OWORD *)v7;
      *(_QWORD *)(a5 + 16) = *(_QWORD *)(v7 + 16);
      v9 = 1;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)a5 = 0;
    }
    *(_BYTE *)(a5 + 24) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v10);
  }
}

void sub_1B4167400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

void read_type_from_raw_core_file_bytes<CS_image_entry>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _OWORD *v7;
  unint64_t v8;
  char v9;
  __int128 v10;
  _QWORD v11[15];

  if (a4 && a3 <= 0x2F)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 48) = 0;
  }
  else
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2);
    v7 = (_OWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11[0] + 32))(v11, a2, 48);
    if (v8 > 0x2F)
    {
      v10 = v7[1];
      *(_OWORD *)a5 = *v7;
      *(_OWORD *)(a5 + 16) = v10;
      *(_OWORD *)(a5 + 32) = v7[2];
      v9 = 1;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)a5 = 0;
    }
    *(_BYTE *)(a5 + 48) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }
}

void sub_1B41674BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  _QWORD v11[15];

  if (a4 && a3 < 4)
  {
    LOBYTE(v6) = 0;
    v7 = 0;
  }
  else
  {
    CSCppFileMemory::CSCppFileMemory(v11, a1, a2);
    v8 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11[0] + 32))(v11, a2, 4);
    if (v9 >= 4)
    {
      v6 = *v8;
      v7 = 1;
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    v4 = v6 >> 8;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v11);
  }
  return (v7 << 32) | ((*(_QWORD *)&v4 & 0xFFFFFFLL) << 8) | v6;
}

void sub_1B416757C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[15];

  if (*(_QWORD *)(a2 + 32) < 0x24uLL)
    goto LABEL_9;
  v4 = *(_QWORD *)(a2 + 24);
  CSCppFileMemory::CSCppFileMemory(v13, a1, v4);
  v5 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13[0] + 32))(v13, v4, 36);
  if (v6 < 0x24)
  {
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
LABEL_9:
    v12 = 0;
    v11 = 0;
    return v11 | v12;
  }
  v7 = *(_DWORD *)(v5 + 4);
  v8 = *(_QWORD *)(v5 + 8);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
  if (v7 != a3 || v8 == -1)
    goto LABEL_9;
  v11 = v8 & 0xFFFFFFFFFFFFFF00;
  v12 = v8;
  return v11 | v12;
}

void sub_1B4167650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[15];

  if (*(_QWORD *)(a2 + 32) < 0x30uLL)
    goto LABEL_9;
  v4 = *(_QWORD *)(a2 + 24);
  CSCppFileMemory::CSCppFileMemory(v13, a1, v4);
  v5 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13[0] + 32))(v13, v4, 48);
  if (v6 < 0x30)
  {
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
LABEL_9:
    v12 = 0;
    v11 = 0;
    return v11 | v12;
  }
  v7 = *(_DWORD *)(v5 + 4);
  v8 = *(_QWORD *)(v5 + 8);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v13);
  if (v7 != a3 || v8 == -1)
    goto LABEL_9;
  v11 = v8 & 0xFFFFFFFFFFFFFF00;
  v12 = v8;
  return v11 | v12;
}

void sub_1B4167724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t v4;
  int mach_header_and_cmds_from;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = (*a2 + 4095) & 0xFFFFFFFFFFFFF000;
  while (v4 < *a2 + a2[3] - 28)
  {
    v12 = 0;
    mach_header_and_cmds_from = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>(*(_QWORD *)(a1 + 40), v4, (uint64_t)"<unknown>", (uint64_t *)&v12);
    if (mach_header_and_cmds_from)
    {
      if (mach_header_and_cmds_from == 29)
      {
        v4 += 4096;
        v8 = 2;
        goto LABEL_9;
      }
      v8 = 1;
    }
    else
    {
      v9 = v12[3];
      if (*(_DWORD *)(v9 + 12) != 7)
      {
        v11 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(v9, "__TEXT");
        v8 = 0;
        if (v11)
          v4 = (v4 + *(unsigned int *)(v11 + 28) + 4095) & 0xFFFFFFFFFFFFF000;
        else
          v4 += 4096;
        goto LABEL_9;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      *(_QWORD *)(v10 + 40) = v4;
      v8 = 1;
      *(_BYTE *)(v10 + 48) = 1;
    }
    *a3 = 1;
LABEL_9:
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    if ((v8 | 2) != 2)
      return;
  }
  CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 40));
}

void sub_1B41678B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v6;
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v6 = a2;
  v8 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, 28);
  if (!v8)
    return 5;
  if (*v8 == -17958194)
  {
    v9 = 28;
    while (1)
    {
      v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)a1 + 32))(a1, v6, v9);
      if (!v10)
        break;
      v12 = (uint64_t)v10;
      if (*v10 != -17958194)
        break;
      v9 = v10[5] + 28;
      if (v9 <= v11)
      {
        v13 = operator new();
        TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader(v13, a1, v6, v12, a3, 0, 0, v14, 0, 0);
        result = *a4;
        *a4 = v13;
        if (result)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          return 0;
        }
        return result;
      }
    }
    return 5;
  }
  return 29;
}

void sub_1B41679F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x10F1C40D39611B8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__40(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const(&)[14],void>(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void ***a5@<X8>)
{
  std::string *p_p;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string __p;
  std::string v13;
  char v14;

  if (*(_BYTE *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v13 = *(std::string *)a4;
    v14 = 1;
  }
  else
  {
    read_path_from_offset_in_cpp_memory(a1, a2, &v13);
  }
  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>((uint64_t)&v13, "<unknown>", &__p);
  v11 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>(a1, a3, (uint64_t)p_p, &v11))
  {
    *a5 = 0;
    a5[1] = 0;
    v9 = v11;
  }
  else
  {
    v9 = v11;
    TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(v11, a5);
    if (v14)
    {
      v10 = (v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v13
          : (std::string *)v13.__r_.__value_.__r.__words[0];
      if (!access((const char *)v10, 4))
        CSCppSymbolOwner::set_path_for_symbolication(*a5, (const char *)v10);
    }
  }
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14)
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1B4167BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v22);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (a15 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__43(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__44(uint64_t a1)
{
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 40);
}

void ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer3212LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  char v19;
  __int128 v20;

  v4 = *(unsigned int **)(a1 + 56);
  v5 = *(unsigned int **)(a1 + 64);
  if (v4 == v5)
  {
LABEL_18:
    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 80));
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    while (1)
    {
      if ((unint64_t)*v4 - v7 < v8)
      {
        v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        __p[0] = (void *)*v4;
        if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v9, (unint64_t *)__p))
        {
          break;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_impl<unsigned int const&>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v4);
        v10 = *(_QWORD *)(a1 + 80);
        v12 = *v4;
        v11 = v4[1];
        LOBYTE(__p[0]) = 0;
        v19 = 0;
        create_symbol_owner<SizeAndEndianness<Pointer32,LittleEndian>>(v10, v11, v12, (uint64_t)__p, (void ***)&v20);
        if (v19 && v18 < 0)
          operator delete(__p[0]);
        v13 = v20;
        if ((_QWORD)v20)
        {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), &v20);
        }
        else
        {
          *a3 = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
        }
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
        if (*((_QWORD *)&v20 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (!v13)
          break;
      }
      v4 += 3;
      if (v4 == v5)
        goto LABEL_18;
    }
  }
}

void sub_1B4167DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer32ENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2));
}

void __destroy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer32ENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_impl<unsigned int const&>(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *inserted;
  char v7;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[1] = v5;
  v4[2] = v5;
  *v4 = 0;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__node_insert_unique(a1, v4);
  if ((v7 & 1) == 0)
    operator delete(v4);
  return inserted;
}

void sub_1B4167F84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CS_dyld_image_info_arch_specific<Pointer32>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer32>*,CS_dyld_image_info_arch_specific<Pointer32>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<TRangeValue<Pointer32,unsigned int>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4167FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>(uint64_t a1, uint64_t *a2, _QWORD **a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)(a1 + 8), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1B4168054(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>>(void **a1, uint64_t *a2)
{
  __n128 result;
  void *v3;

  if (*((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*((_BYTE *)a1 + 32))
      std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::operator=[abi:ne180100](a1, a2);
  }
  else if (*((_BYTE *)a1 + 32))
  {
    std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::reset[abi:ne180100]((uint64_t)a1);
  }
  else
  {
    v3 = (void *)*a2;
    *a2 = 0;
    *a1 = v3;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 0;
    result = *(__n128 *)(a2 + 1);
    *(__n128 *)(a1 + 1) = result;
    a1[3] = (void *)a2[3];
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
    *((_BYTE *)a1 + 32) = 1;
  }
  return result;
}

void **std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::operator=[abi:ne180100](void **a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)*a2;
  *a2 = 0;
  v5 = (uint64_t)*a1;
  *a1 = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = (void *)a2[3];
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return a1;
}

uint64_t std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(result + 32))
  {
    v1 = result;
    v2 = (void **)(result + 8);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v2);
    result = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t *std::__optional_destruct_base<std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>,false>::~__optional_destruct_base[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void **v4;

  if (*((_BYTE *)a1 + 32))
  {
    v4 = (void **)(a1 + 1);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v2 = *a1;
    *a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer32,LittleEndian>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  const char *v14;
  int64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;

  v23 = 0;
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer32,LittleEndian>>(a1, a2, a3, &v23))
  {
    *a6 = 0;
    a6[1] = 0;
    v9 = v23;
    if (!v23)
      return;
    goto LABEL_3;
  }
  v9 = v23;
  v24 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::uuid(*(_QWORD *)(v23 + 24));
  v10 = std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(a4, v24, (uint64_t)&std::piecewise_construct, (_OWORD **)&v24)[4];
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(v9, a6);
  v11 = *a6;
  *(_DWORD *)(v11 + 108) = *(_DWORD *)(*a6 + 108) | 0x1000000;
  v12 = *(char **)(v11 + 32);
  v13 = *(char **)(v11 + 40);
  while (v12 != v13)
  {
    v14 = (const char *)*((_QWORD *)v12 + 2);
    if (!strncmp(v14, "__PRELINK", 9uLL) || !strncmp(v14, "__PLK", 5uLL))
    {
      v15 = v13 - (v12 + 32);
      if (v13 != v12 + 32)
        memmove(v12, v12 + 32, v13 - (v12 + 32));
      v13 -= 32;
      *(_QWORD *)(v11 + 40) = &v12[v15];
    }
    else
    {
      v12 += 32;
    }
  }
  if (v10)
  {
    v16 = *(const char **)(v10 + 120);
    if (v16)
      CSCppSymbolOwner::set_path((void **)*a6, v16);
    v17 = *(const char **)(v10 + 128);
    if (v17 && v17 != *(const char **)(v10 + 120))
      CSCppSymbolOwner::set_path_for_symbolication((void **)*a6, v17);
    v18 = *a6;
    v19 = *(_DWORD *)(*a6 + 108) & 0xFFF7EFFF;
    *(_DWORD *)(*a6 + 108) = v19;
    v20 = *(_DWORD *)(v10 + 108);
    if ((v20 & 0x80000) != 0)
    {
      v19 |= 0x80000u;
      *(_DWORD *)(v18 + 108) = v19;
      v20 = *(_DWORD *)(v10 + 108);
    }
    if ((v20 & 0x1000) != 0)
    {
      v19 |= 0x1000u;
      *(_DWORD *)(v18 + 108) = v19;
    }
  }
  else
  {
    v18 = *a6;
    v19 = *(_DWORD *)(*a6 + 108);
  }
  if (a5)
    v21 = -513;
  else
    v21 = -529;
  v22 = v19 & v21;
  if ((v19 & 0x200) != 0 || (a5 & 1) == 0)
    *(_DWORD *)(v18 + 108) = v22;
  *(_DWORD *)(v18 + 108) = v22 & 0xFEFFFDFF;
  if (v9)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1B41683C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppFakeTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>&,0>(uint64_t a1, uint64_t *a2, _QWORD **a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)(a1 + 8), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1B4168454(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>>>::pair[abi:ne180100]<std::unique_ptr<CSCppTask>,std::vector<std::shared_ptr<CSCppSymbolOwner>> const,0>(uint64_t a1, uint64_t *a2, _QWORD **a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)(a1 + 8), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1B41684BC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void read_type_from_raw_core_file_bytes<CS_load_binary_note>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[15];

  if (a4 && a3 <= 0x43)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 68) = 0;
  }
  else
  {
    CSCppFileMemory::CSCppFileMemory(v12, a1, a2);
    v7 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12[0] + 32))(v12, a2, 68);
    if (v8 > 0x43)
    {
      v10 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(a5 + 32) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a5 + 48) = v10;
      *(_DWORD *)(a5 + 64) = *(_DWORD *)(v7 + 64);
      v11 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)a5 = *(_OWORD *)v7;
      *(_OWORD *)(a5 + 16) = v11;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)a5 = 0;
    }
    *(_BYTE *)(a5 + 68) = v9;
    CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v12);
  }
}

void sub_1B4168590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)va);
  _Unwind_Resume(a1);
}

unint64_t get_address_from_main_bin_spec_lcnote_with_matching_type<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t address_from_main_bin_spec_lcnote_with_matching_type;
  uint64_t v7;
  unint64_t v8;
  uint64_t type_from_raw_core_file;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(unsigned int *)(a1 + 20);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = a1;
  v13 = a1 + 32 + v5;
  v14 = a1 + 32;
  address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
  if (address_from_main_bin_spec_lcnote_with_matching_type)
  {
    v7 = address_from_main_bin_spec_lcnote_with_matching_type;
    while (*(_DWORD *)v7 != 49 || strncmp((const char *)(v7 + 8), "main bin spec", 0x10uLL))
    {
      address_from_main_bin_spec_lcnote_with_matching_type = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v11);
      v7 = address_from_main_bin_spec_lcnote_with_matching_type;
      if (!address_from_main_bin_spec_lcnote_with_matching_type)
        goto LABEL_6;
    }
    type_from_raw_core_file = read_type_from_raw_core_file_bytes<CS_main_bin_spec_header>(a2, *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), 1);
    v8 = BYTE4(type_from_raw_core_file);
    if (BYTE4(type_from_raw_core_file))
    {
      if ((_DWORD)type_from_raw_core_file == 2)
      {
        address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v2_note>(a2, v7, a3);
        goto LABEL_13;
      }
      if ((_DWORD)type_from_raw_core_file == 1)
      {
        address_from_main_bin_spec_lcnote_with_matching_type = get_address_from_main_bin_spec_lcnote_with_matching_type_specific<CS_main_bin_spec_v1_note>(a2, v7, a3);
LABEL_13:
        v8 = address_from_main_bin_spec_lcnote_with_matching_type & 0xFFFFFFFFFFFFFF00;
        return address_from_main_bin_spec_lcnote_with_matching_type | v8;
      }
      v8 = 0;
    }
    LOBYTE(address_from_main_bin_spec_lcnote_with_matching_type) = 0;
    return address_from_main_bin_spec_lcnote_with_matching_type | v8;
  }
LABEL_6:
  v8 = 0;
  return address_from_main_bin_spec_lcnote_with_matching_type | v8;
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2;
  v5[3] = &__block_descriptor_tmp_51;
  v5[4] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v2, v3, 0x8000000000000000, (uint64_t)v5);
}

uint64_t ___ZL53CSSymbolicatorCreateWithCoreFileAndFlags_ArchSpecificI17SizeAndEndiannessI9Pointer6412LittleEndianEE10_CSTypeRefPKcjjPS4_m_block_invoke_2(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;
  char *v7;
  char *MutableInContext;
  char v9;
  uint64_t v10;
  uint64_t v11;
  const char *Path;

  result = (uint64_t)CSSymbolOwnerGetCFUUIDBytes(a2, a3);
  if (result)
  {
    result = (uint64_t)CSGetBinaryPathForExclaveWithUUIDBytes((_QWORD *)result);
    if (result)
    {
      v7 = (char *)result;
      MutableInContext = (char *)CSSymbolOwnerMakeMutableInContext(a2, a3, *(CSCppMutableContext **)(a1 + 32));
      v9 = (char)MutableInContext;
      v11 = v10;
      CSSymbolOwnerSetPathForSymbolication(MutableInContext, v10, v7);
      Path = (const char *)CSSymbolOwnerGetPath(v9, v11);
      if (!Path)
        return CSSymbolOwnerSetPath(v9, v11, v7);
      result = strcmp(Path, "<unknown>");
      if (!(_DWORD)result)
        return CSSymbolOwnerSetPath(v9, v11, v7);
    }
  }
  return result;
}

void ___ZL51get_dyld_vmaddr_from_brute_force_search_for_headersI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalIyEER19CSCppCoreFileMemory_block_invoke(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t v4;
  int mach_header_and_cmds_from;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = (*a2 + 4095) & 0xFFFFFFFFFFFFF000;
  while (v4 < *a2 + a2[3] - 32)
  {
    v12 = 0;
    mach_header_and_cmds_from = read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>(*(_QWORD *)(a1 + 40), v4, (uint64_t)"<unknown>", (uint64_t *)&v12);
    if (mach_header_and_cmds_from)
    {
      if (mach_header_and_cmds_from == 29)
      {
        v4 += 4096;
        v8 = 2;
        goto LABEL_9;
      }
      v8 = 1;
    }
    else
    {
      v9 = v12[3];
      if (*(_DWORD *)(v9 + 12) != 7)
      {
        v11 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(v9, "__TEXT");
        v8 = 0;
        if (v11)
          v4 = (v4 + *(_QWORD *)(v11 + 32) + 4095) & 0xFFFFFFFFFFFFF000;
        else
          v4 += 4096;
        goto LABEL_9;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      *(_QWORD *)(v10 + 40) = v4;
      v8 = 1;
      *(_BYTE *)(v10 + 48) = 1;
    }
    *a3 = 1;
LABEL_9:
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    if ((v8 | 2) != 2)
      return;
  }
  CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 40));
}

void sub_1B416891C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  char v16;

  v8 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, 32);
  if (!v8)
    return 5;
  if (*v8 == -17958193)
  {
    v9 = 32;
    while (1)
    {
      v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(a1, a2, v9);
      if (!v10)
        break;
      v12 = (uint64_t)v10;
      if (*v10 != -17958193)
        break;
      v9 = v10[5] + 32;
      if (v9 <= v11)
      {
        v13 = operator new();
        LOBYTE(v15) = 0;
        v16 = 0;
        TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader(v13, a1, a2, v12, a3, 0, 0, &v15);
        result = *a4;
        *a4 = v13;
        if (result)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          return 0;
        }
        return result;
      }
    }
    return 5;
  }
  return 29;
}

void sub_1B4168A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x10F1C40E5D9F5EBLL);
  _Unwind_Resume(a1);
}

void create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void ***a5@<X8>)
{
  std::string *p_p;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string __p;
  std::string v13;
  char v14;

  if (*(_BYTE *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v13 = *(std::string *)a4;
    v14 = 1;
  }
  else
  {
    read_path_from_offset_in_cpp_memory(a1, a2, &v13);
  }
  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>((uint64_t)&v13, "<unknown>", &__p);
  v11 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a3, (uint64_t)p_p, &v11))
  {
    *a5 = 0;
    a5[1] = 0;
    v9 = v11;
  }
  else
  {
    v9 = v11;
    TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(v11, a5);
    if (v14)
    {
      v10 = (v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v13
          : (std::string *)v13.__r_.__value_.__r.__words[0];
      if (!access((const char *)v10, 4))
        CSCppSymbolOwner::set_path_for_symbolication(*a5, (const char *)v10);
    }
  }
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14)
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1B4168BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v22);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (a15 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void ___ZL58get_fake_task_and_symbol_owners_using_dyld_all_image_infosI17SizeAndEndiannessI9Pointer6412LittleEndianEENSt3__18optionalINS4_4pairINS4_10unique_ptrI9CSCppTaskNS4_14default_deleteIS8_EEEENS4_6vectorINS4_10shared_ptrI16CSCppSymbolOwnerEENS4_9allocatorISF_EEEEEEEER19CSCppCoreFileMemoryy_block_invoke(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  char v17;
  char v18;
  __int128 v19;

  v4 = *(unint64_t **)(a1 + 56);
  v5 = *(unint64_t **)(a1 + 64);
  if (v4 == v5)
  {
LABEL_18:
    CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(*(CSCppCoreFileMemory **)(a1 + 80));
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    while (1)
    {
      if (*v4 - v7 < v8)
      {
        if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v4))
        {
          break;
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, v4, v4);
        v9 = *(_QWORD *)(a1 + 80);
        v11 = *v4;
        v10 = v4[1];
        LOBYTE(__p) = 0;
        v18 = 0;
        create_symbol_owner<SizeAndEndianness<Pointer64,LittleEndian>>(v9, v10, v11, (uint64_t)&__p, (void ***)&v19);
        if (v18 && v17 < 0)
          operator delete(__p);
        v12 = v19;
        if ((_QWORD)v19)
        {
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), &v19);
        }
        else
        {
          *a3 = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
        }
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (!v12)
          break;
      }
      v4 += 3;
      if (v4 == v5)
        goto LABEL_18;
    }
  }
}

void sub_1B4168D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer64ENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
}

void __destroy_helper_block_e8_56c86_ZTSNSt3__16vectorI32CS_dyld_image_info_arch_specificI9Pointer64ENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4168FF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CS_dyld_image_info_arch_specific<Pointer64>>::__init_with_size[abi:ne180100]<CS_dyld_image_info_arch_specific<Pointer64>*,CS_dyld_image_info_arch_specific<Pointer64>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppFlatbufferRelocation>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4169068(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void create_kernel_core_symbol_owner_at_vmaddr<SizeAndEndianness<Pointer64,LittleEndian>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  const char *v14;
  int64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;

  v23 = 0;
  if (read_mach_header_and_cmds_from_cscppmemory<SizeAndEndianness<Pointer64,LittleEndian>>(a1, a2, a3, &v23))
  {
    *a6 = 0;
    a6[1] = 0;
    v9 = v23;
    if (!v23)
      return;
    goto LABEL_3;
  }
  v9 = v23;
  v24 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::uuid(*(_QWORD *)(v23 + 24));
  v10 = std::__hash_table<std::__hash_value_type<UUID,CSCppSymbolOwner *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,CSCppSymbolOwner *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,CSCppSymbolOwner *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(a4, v24, (uint64_t)&std::piecewise_construct, (_OWORD **)&v24)[4];
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(v9, a6);
  v11 = *a6;
  *(_DWORD *)(v11 + 108) = *(_DWORD *)(*a6 + 108) | 0x1000000;
  v12 = *(char **)(v11 + 32);
  v13 = *(char **)(v11 + 40);
  while (v12 != v13)
  {
    v14 = (const char *)*((_QWORD *)v12 + 2);
    if (!strncmp(v14, "__PRELINK", 9uLL) || !strncmp(v14, "__PLK", 5uLL))
    {
      v15 = v13 - (v12 + 32);
      if (v13 != v12 + 32)
        memmove(v12, v12 + 32, v13 - (v12 + 32));
      v13 -= 32;
      *(_QWORD *)(v11 + 40) = &v12[v15];
    }
    else
    {
      v12 += 32;
    }
  }
  if (v10)
  {
    v16 = *(const char **)(v10 + 120);
    if (v16)
      CSCppSymbolOwner::set_path((void **)*a6, v16);
    v17 = *(const char **)(v10 + 128);
    if (v17 && v17 != *(const char **)(v10 + 120))
      CSCppSymbolOwner::set_path_for_symbolication((void **)*a6, v17);
    v18 = *a6;
    v19 = *(_DWORD *)(*a6 + 108) & 0xFFF7EFFF;
    *(_DWORD *)(*a6 + 108) = v19;
    v20 = *(_DWORD *)(v10 + 108);
    if ((v20 & 0x80000) != 0)
    {
      v19 |= 0x80000u;
      *(_DWORD *)(v18 + 108) = v19;
      v20 = *(_DWORD *)(v10 + 108);
    }
    if ((v20 & 0x1000) != 0)
    {
      v19 |= 0x1000u;
      *(_DWORD *)(v18 + 108) = v19;
    }
  }
  else
  {
    v18 = *a6;
    v19 = *(_DWORD *)(*a6 + 108);
  }
  if (a5)
    v21 = -513;
  else
    v21 = -529;
  v22 = v19 & v21;
  if ((v19 & 0x200) != 0 || (a5 & 1) == 0)
    *(_DWORD *)(v18 + 108) = v22;
  *(_DWORD *)(v18 + 108) = v22 & 0xFEFFFDFF;
  if (v9)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1B416926C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void CSCppTaskMemory::CSCppTaskMemory(CSCppTaskMemory *this, const CSCppMachTaskContainer *a2, int a3)
{
  CSCppMachTaskContainer *v5;
  uint64_t v6;
  uint64_t shared_cache_range;
  uint64_t v8;
  char *v9;
  _QWORD *i;
  _QWORD v11[6];
  CSCppTaskMemory *v12;
  uint64_t v13;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[6];

  *(_QWORD *)this = &off_1E6779748;
  v5 = (CSCppTaskMemory *)((char *)this + 8);
  CSCppMachTaskContainer::CSCppMachTaskContainer((uint64_t)this + 8, (uint64_t)a2);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (a3)
    task_suspend2(*((_DWORD *)this + 4), (task_suspension_token_t *)this + 28);
  task_info_outCnt = 5;
  if (!CSCppMachTaskContainer::is_self_task(v5))
  {
    if (CSTaskIs64Bit(*((_DWORD *)this + 4)))
    {
      if ((CSTaskIsTranslated(*((_DWORD *)this + 4)) & 1) == 0
        && !task_info(*MEMORY[0x1E0C83DA0], 0x11u, task_info_out, &task_info_outCnt))
      {
        v6 = *(_QWORD *)task_info_out;
        v13 = 0;
        shared_cache_range = _dyld_get_shared_cache_range();
        if (shared_cache_range)
        {
          v8 = v13;
          if (CSCppTaskMemory::region_at_address(this, shared_cache_range, 1) == shared_cache_range)
          {
            *((_QWORD *)this + 9) = shared_cache_range;
            *((_QWORD *)this + 10) = v8;
            v12 = this;
            v9 = (char *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v12, shared_cache_range);
            v11[0] = MEMORY[0x1E0C809B0];
            v11[1] = 0x40000000;
            v11[2] = ___ZN15CSCppTaskMemoryC2ERK22CSCppMachTaskContainerb_block_invoke;
            v11[3] = &__block_descriptor_tmp_15;
            v11[4] = this;
            v11[5] = v6;
            CSCppDyldSharedCache::for_each_mapped_cache(v9, (uint64_t)v11);
            for (i = (_QWORD *)*((_QWORD *)this + 11); i != *((_QWORD **)this + 12); i += 2)
            {
              if (*i)
                return;
            }
            *((_QWORD *)this + 9) = 0;
            *((_QWORD *)this + 10) = 0;
          }
        }
      }
    }
  }
}

void sub_1B4169430(_Unwind_Exception *a1)
{
  _QWORD *v1;
  CSCppMachTaskContainer *v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)v1[11];
  if (v5)
  {
    v1[12] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[6];
  if (v6)
  {
    v1[7] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[4] = v7;
    operator delete(v7);
  }
  CSCppMachTaskContainer::~CSCppMachTaskContainer(v2);
  _Unwind_Resume(a1);
}

void CSCppTaskMemory::CSCppTaskMemory(CSCppTaskMemory *this, mach_port_name_t a2, int a3, int a4)
{
  _BYTE v6[16];

  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTaskContainer *)v6, a2, a3);
  CSCppTaskMemory::CSCppTaskMemory(this, (const CSCppMachTaskContainer *)v6, a4);
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppMachTaskContainer *)v6);
}

void sub_1B41694D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppMachTaskContainer *)&a9);
  _Unwind_Resume(a1);
}

mach_vm_address_t CSCppTaskMemory::region_at_address(CSCppTaskMemory *this, mach_vm_address_t a2, int a3)
{
  kern_return_t v5;
  mach_vm_address_t result;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[12];
  natural_t nesting_depth;

  nesting_depth = 999999;
  address = a2;
  size = 0;
  infoCnt = 12;
  v5 = mach_vm_region_recurse(*((_DWORD *)this + 4), &address, &size, &nesting_depth, info, &infoCnt);
  result = 0;
  if (!v5)
  {
    if (address > a2 || size + address <= a2)
    {
      return 0;
    }
    else if ((info[0] & a3) == a3)
    {
      return address;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void ___ZN15CSCppTaskMemoryC2ERK22CSCppMachTaskContainerb_block_invoke(uint64_t a1, CSCppDyldSharedCache *this)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char **v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;

  v3 = *(_QWORD **)(a1 + 32);
  CSCppDyldSharedCache::data_segment_ranges(this, &v21);
  v4 = v21;
  v5 = v22;
  if (v21 != v22)
  {
    v6 = (char **)(v3 + 11);
    v7 = v3 + 13;
    v8 = (char *)v3[12];
    do
    {
      v9 = v4[1];
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152) + *v4;
      if ((unint64_t)v8 >= *v7)
      {
        v11 = (v8 - *v6) >> 4;
        if ((unint64_t)(v11 + 1) >> 60)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v12 = *v7 - (_QWORD)*v6;
        v13 = v12 >> 3;
        if (v12 >> 3 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)(v3 + 13), v14);
        v17 = &v15[16 * v11];
        *(_QWORD *)v17 = v10;
        *((_QWORD *)v17 + 1) = v9;
        v19 = (char *)v3[11];
        v18 = (char *)v3[12];
        v20 = v17;
        if (v18 != v19)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v18 - 1);
            v20 -= 16;
            v18 -= 16;
          }
          while (v18 != v19);
          v18 = *v6;
        }
        v8 = v17 + 16;
        v3[11] = v20;
        v3[12] = v17 + 16;
        v3[13] = &v15[16 * v16];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v8 = v10;
        *((_QWORD *)v8 + 1) = v9;
        v8 += 16;
      }
      v3[12] = v8;
      v4 += 2;
    }
    while (v4 != v5);
    v4 = v21;
  }
  if (v4)
  {
    v22 = v4;
    operator delete(v4);
  }
}

void sub_1B41696E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CSCppTaskMemory::~CSCppTaskMemory(CSCppTaskMemory *this)
{
  task_suspension_token_t v2;
  uint64_t v3;
  vm_map_t *v4;
  uint64_t v5;
  vm_map_t *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_1E6779748;
  v2 = *((_DWORD *)this + 28);
  if (v2 + 1 >= 2)
  {
    task_resume2(v2);
    *((_DWORD *)this + 28) = 0;
  }
  if (!CSCppMachTaskContainer::is_self_task((CSCppTaskMemory *)((char *)this + 8)))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3 != *((_QWORD *)this + 4))
    {
      v4 = (vm_map_t *)MEMORY[0x1E0C83DA0];
      do
      {
        mach_vm_deallocate(*v4, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 8));
        v3 += 24;
      }
      while (v3 != *((_QWORD *)this + 4));
    }
    v5 = *((_QWORD *)this + 6);
    if (v5 != *((_QWORD *)this + 7))
    {
      v6 = (vm_map_t *)MEMORY[0x1E0C83DA0];
      do
      {
        mach_vm_deallocate(*v6, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 8));
        v5 += 24;
      }
      while (v5 != *((_QWORD *)this + 7));
    }
  }
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  v7 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 7) = v7;
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 12) = v8;
    operator delete(v8);
    v7 = (void *)*((_QWORD *)this + 6);
  }
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppTaskMemory *)((char *)this + 8));
}

{
  CSCppTaskMemory::~CSCppTaskMemory(this);
  JUMPOUT(0x1B5E36940);
}

uint64_t CSCppTaskMemory::map_task_memory(uint64_t a1, mach_vm_address_t a2, mach_vm_size_t a3, mach_vm_address_t *a4, _DWORD *a5)
{
  uint64_t result;
  unint64_t v11;
  vm_prot_t v12;
  vm_prot_t cur_protection;

  if (CSCppMachTaskContainer::is_self_task((CSCppMachTaskContainer *)(a1 + 8)))
  {
    result = 0;
    *a4 = a2;
    *a5 = a3;
  }
  else
  {
    *a4 = 0;
    *a5 = a3;
    v12 = 1;
    cur_protection = 0;
    v11 = 0;
    result = remap_memory_from_target(*MEMORY[0x1E0C83DA0], &v11, a3, 0, 33, *(_DWORD *)(a1 + 16), a2, 1, &cur_protection, &v12, 1u);
    if (!(_DWORD)result)
      *a4 = v11;
  }
  return result;
}

uint64_t CSCppTaskMemory::resume(CSCppTaskMemory *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 28);
  if ((result + 1) >= 2)
  {
    result = task_resume2(result);
    *((_DWORD *)this + 28) = 0;
  }
  return result;
}

mach_vm_address_t CSCppTaskMemory::bytes_at(CSCppTaskMemory *this, mach_vm_address_t a2, mach_vm_address_t a3)
{
  mach_vm_address_t v3;
  mach_vm_address_t v4;
  mach_vm_address_t v6;
  mach_vm_address_t v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  mach_vm_address_t *v14;
  char *v15;
  mach_vm_address_t v16;
  unint64_t v17;
  mach_vm_address_t v18;
  mach_vm_address_t v19;
  mach_vm_address_t v20;
  mach_vm_address_t v21;
  mach_vm_address_t v22;
  unint64_t v23;
  unint64_t v24;
  mach_vm_address_t *v25;
  char *v26;
  mach_vm_address_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  mach_vm_address_t v46;
  mach_vm_address_t v47;
  uint64_t v48;
  mach_vm_address_t v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  mach_vm_address_t *i;
  _QWORD v56[2];
  uint64_t v57;
  int v58;
  uint64_t v59;

  v3 = a3;
  v4 = a2;
  v6 = *((_QWORD *)this + 9);
  v7 = a3 + a2;
  if (a2 >= v6 && v7 <= *((_QWORD *)this + 10) + v6)
  {
    for (i = (mach_vm_address_t *)*((_QWORD *)this + 11); i != *((mach_vm_address_t **)this + 12); i += 2)
    {
      if (a2 >= *i && v7 <= i[1] + *i)
        goto LABEL_3;
    }
  }
  else
  {
LABEL_3:
    v10 = (char *)*((_QWORD *)this + 3);
    v9 = (char *)*((_QWORD *)this + 4);
    v8 = (char *)this + 24;
    if (v9 == v10)
      goto LABEL_12;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
    v12 = (char *)*((_QWORD *)this + 3);
    do
    {
      v13 = v11 >> 1;
      v14 = (mach_vm_address_t *)&v12[24 * (v11 >> 1)];
      v16 = *v14;
      v15 = (char *)(v14 + 3);
      v11 += ~(v11 >> 1);
      if (v16 < v7)
        v12 = v15;
      else
        v11 = v13;
    }
    while (v11);
    if (v12 == v10 || (v17 = *((_QWORD *)v12 - 3), a2 < v17) || v7 > *((_QWORD *)v12 - 2) + v17)
    {
LABEL_12:
      if (a2 >= v7)
      {
        v19 = a2;
LABEL_22:
        if (v9 != v10)
        {
          v23 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
          v9 = v10;
          do
          {
            v24 = v23 >> 1;
            v25 = (mach_vm_address_t *)&v9[24 * (v23 >> 1)];
            v27 = *v25;
            v26 = (char *)(v25 + 3);
            v23 += ~(v23 >> 1);
            if (v27 < v7)
              v9 = v26;
            else
              v23 = v24;
          }
          while (v23);
        }
        v28 = v9;
        while (v28 != v10)
        {
          v29 = *((_QWORD *)v28 - 3);
          v30 = *((_QWORD *)v28 - 2);
          v28 -= 24;
          if (v19 >= v30 + v29)
          {
            v10 = v28 + 24;
            break;
          }
        }
        if (v10 != v9)
        {
          v31 = (_QWORD *)((char *)this + 48);
          v32 = (_QWORD *)((char *)this + 64);
          v33 = (char *)*((_QWORD *)this + 7);
          v34 = v10;
          do
          {
            if ((unint64_t)v33 >= *v32)
            {
              v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v33[-*v31] >> 3);
              v37 = v36 + 1;
              if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(*v32 - *v31) >> 3) > v37)
                v37 = 0x5555555555555556 * ((uint64_t)(*v32 - *v31) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v32 - *v31) >> 3) >= 0x555555555555555)
                v38 = 0xAAAAAAAAAAAAAAALL;
              else
                v38 = v37;
              if (v38)
                v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)this + 64, v38);
              else
                v39 = 0;
              v40 = &v39[24 * v36];
              v41 = *(_OWORD *)v34;
              *((_QWORD *)v40 + 2) = *((_QWORD *)v34 + 2);
              *(_OWORD *)v40 = v41;
              v43 = (char *)*((_QWORD *)this + 6);
              v42 = (char *)*((_QWORD *)this + 7);
              v44 = v40;
              if (v42 != v43)
              {
                do
                {
                  v45 = *(_OWORD *)(v42 - 24);
                  *((_QWORD *)v44 - 1) = *((_QWORD *)v42 - 1);
                  *(_OWORD *)(v44 - 24) = v45;
                  v44 -= 24;
                  v42 -= 24;
                }
                while (v42 != v43);
                v42 = (char *)*v31;
              }
              v33 = v40 + 24;
              *((_QWORD *)this + 6) = v44;
              *((_QWORD *)this + 7) = v40 + 24;
              *((_QWORD *)this + 8) = &v39[24 * v38];
              if (v42)
                operator delete(v42);
            }
            else
            {
              v35 = *(_OWORD *)v34;
              *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
              *(_OWORD *)v33 = v35;
              v33 += 24;
            }
            *((_QWORD *)this + 7) = v33;
            v46 = v3 + v19;
            v47 = *(_QWORD *)v34;
            v48 = *((_QWORD *)v34 + 1);
            v34 += 24;
            v49 = v48 + v47;
            if (v3 + v19 <= v49)
              v46 = v49;
            if (v19 >= v47)
              v19 = v47;
            v3 = v46 - v19;
          }
          while (v34 != v9);
          v50 = (_BYTE *)*((_QWORD *)this + 4);
          v51 = v50 - v9;
          v8 = (char *)this + 24;
          if (v50 != v9)
            memmove(v10, v9, v50 - v9);
          *((_QWORD *)this + 4) = &v10[v51];
        }
        v59 = 0;
        v58 = 0;
        v52 = (*(uint64_t (**)(CSCppTaskMemory *, mach_vm_address_t, mach_vm_address_t, uint64_t *, int *))(*(_QWORD *)this + 56))(this, v19, v3, &v59, &v58);
        v53 = 0;
        if (!v52)
        {
          v56[0] = v19;
          v56[1] = v3;
          v57 = v59;
          std::vector<TRangeValue<Pointer64,unsigned char *>>::insert((uint64_t)v8, v10, (unint64_t)v56);
          return v4 - v19 + v57;
        }
        return v53;
      }
      else
      {
        v18 = a2;
        v19 = a2;
        while (1)
        {
          v20 = CSCppTaskMemory::region_at_address(this, v18, 1);
          if (v18 - v20 >= v21)
            return 0;
          v22 = v3 + v19;
          v18 = v21 + v20;
          if (v3 + v19 <= v21 + v20)
            v22 = v21 + v20;
          if (v19 >= v20)
            v19 = v20;
          v3 = v22 - v19;
          if (v18 >= v7)
          {
            v10 = (char *)*((_QWORD *)this + 3);
            v9 = (char *)*((_QWORD *)this + 4);
            v7 = v22;
            goto LABEL_22;
          }
        }
      }
    }
    else
    {
      return a2 - v17 + *((_QWORD *)v12 - 1);
    }
  }
  return v4;
}

char *std::vector<TRangeValue<Pointer64,unsigned char *>>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v13) >> 3);
    if (2 * v17 > v14)
      v14 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v14;
    v33 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(a1 + 16, v18);
    else
      v19 = 0;
    v22 = &v19[24 * v16];
    __p = v19;
    v30 = v22;
    v31 = v22;
    v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v24 = 1;
        else
          v24 = 2 * v16;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>(v8, v24);
        v22 = &v25[24 * (v24 >> 2)];
        __p = v25;
        v30 = v22;
        v32 = &v25[24 * v26];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v23 = v16 + 2;
        if (v16 >= -1)
          v23 = v16 + 1;
        v22 -= 24 * (v23 >> 1);
        v30 = v22;
      }
    }
    v27 = *(_OWORD *)v3;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v22 = v27;
    v31 = v22 + 24;
    v4 = (char *)std::vector<TRangeValue<Pointer64,unsigned char *>>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30)
      v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v21 = *(_OWORD *)a3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 24;
  }
  else
  {
    v9 = __src + 24;
    v10 = v6 - 24;
    v11 = *(_QWORD *)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v11 = v12;
      v11 += 24;
      v10 += 24;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(__src + 24, __src, v6 - v9);
    if ((unint64_t)v4 <= v3)
      v3 += 24 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_OWORD *)v3;
    *((_QWORD *)v4 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v20;
  }
  return v4;
}

void sub_1B4169F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CSCppTaskMemory::footprint(CSCppTaskMemory *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  v2 = *((_QWORD *)this + 4) - *((_QWORD *)this + 3) + *((_QWORD *)this + 7) - *((_QWORD *)this + 6) + 120;
  if (!CSCppMachTaskContainer::is_self_task((CSCppTaskMemory *)((char *)this + 8)))
  {
    for (i = *((_QWORD *)this + 3); i != *((_QWORD *)this + 4); i += 24)
      v2 += *(_QWORD *)(i + 8);
    for (j = *((_QWORD *)this + 6); j != *((_QWORD *)this + 7); j += 24)
      v2 += *(_QWORD *)(j + 8);
  }
  return v2;
}

uint64_t CSCppTaskMemory::to_string@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v4;
  _QWORD v5[10];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"CSCppTaskMemory pid:", 20);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v5[-1] + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E368EC](&v7);
}

void sub_1B416A114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *CSCppTaskMemory::validate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *exception;
  _QWORD v19[4];
  __int128 v20;
  uint64_t v21;
  _BYTE v22[256];

  v1 = (_QWORD *)this[3];
  v2 = (_QWORD *)this[4];
  v3 = v1 + 3;
  if (v1 != v2 && v3 != v2)
  {
    do
    {
      v5 = *(v3 - 3);
      if (v5 < v3[1] + *v3 && *v3 < *(v3 - 2) + v5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"CSCppTaskMemory: range values must not overlap", 46);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22, &v20);
        Exception::Exception(v19, &v20);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v19);
      }
      v3 += 3;
    }
    while (v3 != v2);
  }
  v6 = (_QWORD *)this[6];
  for (i = (_QWORD *)this[7]; v6 != i; v6 += 3)
  {
    v8 = v6[1] + *v6;
    v9 = v1;
    if (v1 != v2)
    {
      v9 = v1;
      v10 = 0xAAAAAAAAAAAAAAABLL * (v2 - v1);
      do
      {
        v11 = v10 >> 1;
        v12 = &v9[3 * (v10 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v10 += ~(v10 >> 1);
        if (v14 < v8)
          v9 = v13;
        else
          v10 = v11;
      }
      while (v10);
    }
    if (v9 == v1)
      v15 = 0;
    else
      v15 = -1;
    v16 = &v9[3 * v15];
    this = (_QWORD *)*v16;
    if (*v6 < (unint64_t)*v16 || v8 > (unint64_t)this + v16[1])
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"CSCppTaskMemory: retired memory must be contained by live memory", 64);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22, &v20);
      Exception::Exception(v19, &v20);
      v17 = __cxa_allocate_exception(0x20uLL);
      Exception::Exception(v17, (uint64_t)v19);
    }
  }
  return this;
}

void sub_1B416A308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t CSCppTaskMemory::is_task(CSCppTaskMemory *this)
{
  return 1;
}

uint64_t CSCppTaskMemory::is_dyld_shared_cache(CSCppTaskMemory *this)
{
  return 0;
}

void *std::vector<TRangeValue<Pointer64,unsigned char *>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 24);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *demangle(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return DemanglingUtilities::demangle_with_reusable_buffer(a1, 0, 0, a4);
}

char *CSDemangleSymbolName(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return DemanglingUtilities::demangle_with_reusable_buffer(a1, 0, 0, a4);
}

char *DemanglingUtilities::demangle_with_reusable_buffer(char *this, char *a2, char **a3, unint64_t *a4)
{
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  BOOL v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  char *v19;
  char *v20;
  int status;
  char v22;
  char **v23;
  char *v24;

  if (!this)
    return this;
  v6 = *this;
  if (v6 != 95 && v6 != 36)
    return 0;
  if (this[1] == 95)
    v7 = (uint64_t)(this + 1);
  else
    v7 = (uint64_t)this;
  status = -3;
  if (a3)
    v8 = *a3;
  else
    v8 = 0;
  v20 = v8;
  if (a2)
    v9 = *(char **)a2;
  else
    v9 = 0;
  v10 = atomic_load(&call_external_swift_demangle(char const*,char *,unsigned long *,int *)::onceFlag);
  if (v10 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&call_external_swift_demangle(char const*,char *,unsigned long *,int *)::onceFlag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<call_external_swift_demangle(char const*,char *,unsigned long *,int *)::$_0 &&>>);
  }
  if (demanglerLibraryFunctions)
  {
    if (v9)
      v11 = v20 == 0;
    else
      v11 = 1;
    if (v11)
      v12 = 0;
    else
      v12 = v20;
    if (v11)
      v13 = 0;
    else
      v13 = v9;
    v14 = demanglerLibraryFunctions(v7, v13, v12);
    if (!v14)
    {
      v17 = -2;
      goto LABEL_33;
    }
    if (v14 < (unint64_t)v12)
      goto LABEL_29;
    v15 = (char *)(v14 + 1);
    v16 = (char *)malloc_type_realloc(v9, v14 + 1, 0xE031A237uLL);
    if (v16)
    {
      v13 = v16;
      demanglerLibraryFunctions(v7, v16, v15);
      v20 = v15;
LABEL_29:
      this = v13;
      if (!a2)
        return this;
      goto LABEL_48;
    }
  }
  v17 = -3;
LABEL_33:
  status = v17;
  if (*(_BYTE *)v7 != 95)
    return 0;
  if (*(_WORD *)v7 != 23135)
  {
    v18 = *(_WORD *)v7 == 24415 && *(_BYTE *)(v7 + 2) == 90;
    if (!v18 && *(_DWORD *)v7 != 1516199775)
      return 0;
  }
  if (a2)
    v19 = *(char **)a2;
  else
    v19 = 0;
  this = __cxa_demangle((const char *)v7, v19, (size_t *)&v20, &status);
  v13 = this;
  if (status)
    this = 0;
  if (a2 && !status)
  {
LABEL_48:
    if (v13 != *(char **)a2)
    {
      *(_QWORD *)a2 = v13;
      if (a3)
        *a3 = v20;
    }
    return v13;
  }
  return this;
}

BOOL isAbsolutePath(const char *a1)
{
  int v1;

  v1 = *(unsigned __int8 *)a1;
  return v1 == 126 || v1 == 47;
}

BOOL stringByAppendingPathComponents(char *__s1, size_t __n, const char *__source, const char *a4)
{
  size_t v7;

  if (__s1 == __source)
    v7 = strnlen(__s1, __n);
  else
    v7 = strlcpy(__s1, __source, __n);
  if (v7 < __n)
  {
    if (!v7 || __s1[v7 - 1] == 47)
      return strlcpy(&__s1[v7], a4, __n - v7) < __n - v7;
    if (v7 < __n - 2)
    {
      *(_WORD *)&__s1[v7++] = 47;
      return strlcpy(&__s1[v7], a4, __n - v7) < __n - v7;
    }
  }
  return 0;
}

const char *filename_from_path(const char *a1)
{
  const char *v1;
  size_t v2;

  v1 = a1;
  v2 = strlen(a1);
  if (v2)
  {
    while (v1[v2] != 47)
    {
      if (!--v2)
        return v1;
    }
    v1 += v2 + 1;
  }
  return v1;
}

BOOL is_root_directory(char *a1)
{
  return strlen(a1) == 1 && strchr(a1, 47);
}

__int128 *system_dyld_shared_cache_path(void)
{
  unsigned __int8 v0;

  {
    system_dyld_shared_cache_path(void)::$_0::operator()();
  }
  return &system_dyld_shared_cache_path(void)::shared_cache_dir;
}

void sub_1B416A824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void system_dyld_shared_cache_path(void)::$_0::operator()()
{
  char *v0;
  std::string *p_p;
  std::string::size_type size;
  char *v3;
  int v4;
  std::string::size_type v5;
  std::string __p;
  char v7;

  v0 = (char *)dyld_shared_cache_file_path();
  if (v0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, v0);
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    v3 = (char *)&p_p[-1].__r_.__value_.__r.__words[2] + 7;
    while (size)
    {
      v4 = v3[size--];
      if (v4 == 47)
      {
        v5 = size + 1;
        goto LABEL_12;
      }
    }
    v5 = 0;
LABEL_12:
    std::string::basic_string((std::string *)&system_dyld_shared_cache_path(void)::shared_cache_dir, &__p, 0, v5, (std::allocator<char> *)&v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&system_dyld_shared_cache_path(void)::shared_cache_dir, "");
  }
}

void sub_1B416A8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter(CSCppCrashReporterInfoSetter *this, const char *a2)
{
  uint64_t v4;
  __uint64_t v5;
  BOOL v6;
  __uint64_t v7;

  v7 = 0;
  pthread_threadid_np(0, &v7);
  pthread_mutex_lock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
  v4 = qword_1ED03E100;
  *((_QWORD *)this + 1) = qword_1ED03E100;
  v5 = v7;
  if (v4)
    v6 = CSCppCrashReporterInfoSetter::crash_reporter_owner == v7;
  else
    v6 = 1;
  if (v6)
  {
    qword_1ED03E100 = (uint64_t)a2;
    *(_BYTE *)this = 1;
    CSCppCrashReporterInfoSetter::crash_reporter_owner = v5;
  }
  else
  {
    *(_BYTE *)this = 0;
  }
  pthread_mutex_unlock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
}

void CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter(CSCppCrashReporterInfoSetter *this)
{
  if (*(_BYTE *)this)
  {
    pthread_mutex_lock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
    qword_1ED03E100 = *((_QWORD *)this + 1);
    pthread_mutex_unlock(&CSCppCrashReporterInfoSetter::crash_reporter_mutex);
  }
}

uint64_t convert_symbol_flags_to_symbolic_representation(char *__dst, size_t __size, int a3)
{
  uint64_t result;

  *__dst = 0;
  if ((a3 & 1) != 0)
  {
    result = strlcat(__dst, "IsFunction, ", __size);
    if ((a3 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  result = 0;
  if ((a3 & 2) != 0)
LABEL_5:
    result = strlcat(__dst, "IsDyldStub, ", __size);
LABEL_6:
  if ((a3 & 4) != 0)
  {
    result = strlcat(__dst, "IsObjcMethod, ", __size);
    if ((a3 & 8) == 0)
    {
LABEL_8:
      if ((a3 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((a3 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = strlcat(__dst, "IsJavaMethod, ", __size);
  if ((a3 & 0x10) == 0)
  {
LABEL_9:
    if ((a3 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  result = strlcat(__dst, "IsExternal, ", __size);
  if ((a3 & 0x20) == 0)
  {
LABEL_10:
    if ((a3 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  result = strlcat(__dst, "IsPrivateExternal, ", __size);
  if ((a3 & 0x40) == 0)
  {
LABEL_11:
    if ((a3 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  result = strlcat(__dst, "IsThumb, ", __size);
  if ((a3 & 0x80) == 0)
  {
LABEL_12:
    if ((a3 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  result = strlcat(__dst, "IsOmitFramePointer, ", __size);
  if ((a3 & 0x100) == 0)
  {
LABEL_13:
    if ((a3 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  result = strlcat(__dst, "IsKnownLength, ", __size);
  if ((a3 & 0x1000) == 0)
  {
LABEL_14:
    if ((a3 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  result = strlcat(__dst, "IsMarked, ", __size);
  if ((a3 & 0x2000) == 0)
  {
LABEL_15:
    if ((a3 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  result = strlcat(__dst, "Lock, ", __size);
  if ((a3 & 0x4000) == 0)
  {
LABEL_16:
    if ((a3 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  result = strlcat(__dst, "NameSourceNlist, ", __size);
  if ((a3 & 0x8000) == 0)
  {
LABEL_17:
    if ((a3 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  result = strlcat(__dst, "NameSourceDwarf, ", __size);
  if ((a3 & 0x10000) == 0)
  {
LABEL_18:
    if ((a3 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  result = strlcat(__dst, "NameSourceDwarfMIPSLinkage, ", __size);
  if ((a3 & 0x20000) == 0)
  {
LABEL_19:
    if ((a3 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  result = strlcat(__dst, "NameValid, ", __size);
  if ((a3 & 0x40000) == 0)
  {
LABEL_20:
    if ((a3 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  result = strlcat(__dst, "NameAllocated, ", __size);
  if ((a3 & 0x80000) == 0)
  {
LABEL_21:
    if ((a3 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  result = strlcat(__dst, "MangledNameSourceNlist, ", __size);
  if ((a3 & 0x100000) == 0)
  {
LABEL_22:
    if ((a3 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  result = strlcat(__dst, "MangledNameSourceDwarf, ", __size);
  if ((a3 & 0x200000) == 0)
  {
LABEL_23:
    if ((a3 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  result = strlcat(__dst, "MangledNameSourceDwarfMIPSLinkage, ", __size);
  if ((a3 & 0x400000) == 0)
  {
LABEL_24:
    if ((a3 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  result = strlcat(__dst, "MangledNameValid, ", __size);
  if ((a3 & 0x800000) == 0)
  {
LABEL_25:
    if ((a3 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  result = strlcat(__dst, "MangledNameAllocated, ", __size);
  if ((a3 & 0x1000000) == 0)
  {
LABEL_26:
    if ((a3 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  result = strlcat(__dst, "IsObjcMethodValid, ", __size);
  if ((a3 & 0x2000000) == 0)
  {
LABEL_27:
    if ((a3 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  result = strlcat(__dst, "NList, ", __size);
  if ((a3 & 0x4000000) == 0)
  {
LABEL_28:
    if ((a3 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  result = strlcat(__dst, "Dwarf, ", __size);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_29:
    if ((a3 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  result = strlcat(__dst, "DebugMap, ", __size);
  if ((a3 & 0x10000000) == 0)
  {
LABEL_30:
    if ((a3 & 0x20000000) == 0)
      return result;
    return strlcat(__dst, "Merged, ", __size);
  }
LABEL_55:
  result = strlcat(__dst, "FunctionStarts, ", __size);
  if ((a3 & 0x20000000) != 0)
    return strlcat(__dst, "Merged, ", __size);
  return result;
}

void shared_cache_search_directories(_QWORD *a1@<X8>)
{
  uint64_t v2;
  std::string::size_type v3;
  __int128 v4;
  int64_t v5;
  char v6;
  std::string *p_p;
  int v8;
  void *v9;
  std::string *v10;
  int64_t v11;
  char *v12;
  int v13;
  std::string *v14;
  int64_t v15;
  char *v16;
  char *v17;
  unsigned __int8 v18;
  const char *v19;
  uint64_t v20;
  __int128 v21;
  size_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  _QWORD *v30;
  std::string::size_type size;
  std::string v32;
  __int128 *v33;
  __int128 *v34;
  char *v35;
  std::string *v36;
  std::string v37;
  std::string __p;
  _QWORD v39[3];
  __int128 v40;

  *(_QWORD *)&v40 = *MEMORY[0x1E0C80C00];
  system_dyld_shared_cache_path();
  std::string::basic_string[abi:ne180100]<0>(&v37, "/System/Volumes/Preboot/Cryptexes/OS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "/private/preboot/Cryptexes/OS");
  std::string::basic_string[abi:ne180100]<0>(v39, "/System/Cryptexes/OS");
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  v32.__r_.__value_.__s.__data_[8] = 0;
  v33 = (__int128 *)operator new(0x48uLL);
  v34 = v33;
  v35 = (char *)v33 + 72;
  v2 = 0;
  v34 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (__int128 *)&v37, &v40, (std::string *)v33);
  do
  {
    if (SHIBYTE(v39[v2 + 2]) < 0)
      operator delete((void *)v39[v2]);
    v2 -= 3;
  }
  while (v2 != -9);
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  v30 = a1;
  if (system_dyld_shared_cache_path(void)::shared_cache_dir[23] < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)system_dyld_shared_cache_path(void)::shared_cache_dir, *(std::string::size_type *)&system_dyld_shared_cache_path(void)::shared_cache_dir[8]);
  else
    __p = *(std::string *)system_dyld_shared_cache_path(void)::shared_cache_dir;
  size = v37.__r_.__value_.__l.__size_;
  v3 = v37.__r_.__value_.__r.__words[0];
  if (v37.__r_.__value_.__r.__words[0] == v37.__r_.__value_.__l.__size_)
  {
LABEL_38:
    std::string::basic_string[abi:ne180100]<0>(&v32, "");
    v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    while (1)
    {
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v4 = *(_OWORD *)v3;
        v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v4;
      }
      v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v5 = __p.__r_.__value_.__l.__size_;
      v8 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      v9 = (void *)v32.__r_.__value_.__r.__words[0];
      v10 = (v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v32
          : (std::string *)v32.__r_.__value_.__r.__words[0];
      v11 = (v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v32.__r_.__value_.__r.__words[2])
          : v32.__r_.__value_.__l.__size_;
      if (!v11)
        break;
      if (v5 >= v11)
      {
        v12 = (char *)p_p + v5;
        v13 = v10->__r_.__value_.__s.__data_[0];
        v14 = p_p;
        do
        {
          v15 = v5 - v11;
          if (v15 == -1)
            break;
          v16 = (char *)memchr(v14, v13, v15 + 1);
          if (!v16)
            break;
          v17 = v16;
          if (!memcmp(v16, v10, v11))
          {
            if (v17 == v12 || v17 - (char *)p_p == -1)
              break;
            goto LABEL_39;
          }
          v14 = (std::string *)(v17 + 1);
          v5 = v12 - (v17 + 1);
        }
        while (v5 >= v11);
      }
      if (v8 < 0)
        operator delete(v9);
      v3 += 24;
      if (v3 == size)
        goto LABEL_38;
    }
  }
LABEL_39:
  if (v6 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v36 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v19 = (const char *)&shared_cache_search_directories(void)::final_driverkit_path;
  if ((v18 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "/System/DriverKit/System/Library/dyld/");
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v37;
    else
      v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v27 = v37.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v32, (const std::string::value_type *)v26, v27);
    if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&shared_cache_search_directories(void)::final_driverkit_path, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
    }
    else
    {
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      unk_1ED03E230 = *((_QWORD *)&v28->__r_.__value_.__l + 2);
      shared_cache_search_directories(void)::final_driverkit_path = v29;
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
  v20 = system_dyld_shared_cache_path(void)::shared_cache_dir[23];
  v21 = *(_OWORD *)system_dyld_shared_cache_path(void)::shared_cache_dir;
  if (byte_1ED03E237 < 0)
    v19 = (const char *)shared_cache_search_directories(void)::final_driverkit_path;
  v22 = strlen(v19);
  v30[1] = 0;
  v30[2] = 0;
  *v30 = 0;
  v23 = operator new(0x20uLL);
  if ((v20 & 0x80u) == 0)
    v24 = system_dyld_shared_cache_path(void)::shared_cache_dir;
  else
    v24 = (char *)v21;
  if ((v20 & 0x80u) == 0)
    v25 = v20;
  else
    v25 = *((_QWORD *)&v21 + 1);
  v30[1] = v23 + 4;
  v30[2] = v23 + 4;
  *v23 = v24;
  v23[1] = v25;
  v23[2] = v19;
  v23[3] = v22;
  *v30 = v23;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_1B416B128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  a23 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t shared_cache_search_directories(void)::$_0::~$_0(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v3 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t with_primary_shared_cache_uuid_and_unslid_base_from_path(UUID *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  const char *v7;
  uint64_t *v8;
  stat v10;

  v4 = UUID::null_uuid(a1);
  v5 = open((const char *)a1, 0x1000000);
  if (v5 == -1)
    return std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)v4, 0);
  v6 = v5;
  if (!fstat(v5, &v10)
    && v10.st_size > 0x207uLL
    && (v7 = (const char *)mmap(0, 0x208uLL, 1, 1, v6, 0)) != 0
    && (v8 = (uint64_t *)v7, v7 != (const char *)-1)
    && !strncmp(v7, "dyld_v", 6uLL))
  {
    std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)(v8 + 11), v8[28]);
    close(v6);
    return munmap(v8, 0x208uLL);
  }
  else
  {
    std::function<void ()(UUID const*,unsigned long long)>::operator()(a2, (uint64_t)v4, 0);
    return close(v6);
  }
}

uint64_t std::function<void ()(UUID const*,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t is_device_sptm_enabled(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&is_device_sptm_enabled(void)::once);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&is_device_sptm_enabled(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<is_device_sptm_enabled(void)::$_0 &&>>);
  }
  return is_device_sptm_enabled(void)::sptm_txm_enabled;
}

DemanglingUtilities::CSCppReusableDemanglingBuffer *DemanglingUtilities::CSCppReusableDemanglingBuffer::CSCppReusableDemanglingBuffer(DemanglingUtilities::CSCppReusableDemanglingBuffer *this)
{
  *(_QWORD *)this = 4096;
  *((_QWORD *)this + 1) = malloc_type_malloc(0x1000uLL, 0x8EF97A77uLL);
  return this;
}

uint64_t DemanglingUtilities::CSCppReusableDemanglingBuffer::reusable_buffer(DemanglingUtilities::CSCppReusableDemanglingBuffer *this)
{
  return (uint64_t)this + 8;
}

void DemanglingUtilities::CSCppReusableDemanglingBuffer::~CSCppReusableDemanglingBuffer(void **this)
{
  free(this[1]);
}

char *DemanglingUtilities::create_dyld_stub_name(DemanglingUtilities *this, const char *a2)
{
  size_t v3;
  char *v4;

  v3 = strlen((const char *)this);
  v4 = (char *)malloc_type_malloc(v3 + 12, 0xB6F0ACEAuLL);
  strcpy(v4, "DYLD-STUB$$");
  strcpy(v4 + 11, (const char *)this);
  return v4;
}

BOOL DemanglingUtilities::is_simple_mangled_name(DemanglingUtilities *this, const char *a2)
{
  int v2;
  uint64_t v3;
  const char *v4;
  size_t v5;
  int v6;
  _BOOL8 result;
  BOOL v8;

  if ((a2 & 2) != 0)
    return 0;
  v2 = *(unsigned __int8 *)this;
  if (v2 != 95 && v2 != 36)
    return 1;
  v3 = 0;
  if (*((_BYTE *)this + 1) == 95)
    v4 = (char *)this + 1;
  else
    v4 = (const char *)this;
  do
  {
    v5 = strlen((&off_1E67797C8)[v3]);
    v6 = strncmp(v4, (&off_1E67797C8)[v3], v5);
    result = v6 != 0;
    if (!v6)
      break;
    v8 = v3 == 12;
    v3 += 2;
  }
  while (!v8);
  return result;
}

_BYTE *DemanglingUtilities::simple_demangle(_BYTE *this, const char *a2)
{
  if ((a2 & 0x380000) != 0 && *this == 95)
    ++this;
  return this;
}

unsigned __int8 *std::__call_once_proxy[abi:ne180100]<std::tuple<call_external_swift_demangle(char const*,char *,unsigned long *,int *)::$_0 &&>>()
{
  unsigned __int8 *result;
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;

  result = (unsigned __int8 *)getenv("CS_DO_NOT_DEMANGLE_SWIFT");
  if (!result
    || ((v1 = *result - 48, v2 = v1 > 0x3E, v3 = (1 << v1) & 0x4000000040000001, !v2) ? (v4 = v3 == 0) : (v4 = 1),
        !v4))
  {
    result = (unsigned __int8 *)dlopen("/usr/lib/swift/libswiftDemangle.dylib", 1);
    if (result
      || (result = (unsigned __int8 *)dlopen("/System/Library/PrivateFrameworks/Swift/libswiftDemangle.dylib", 1)) != 0)
    {
      result = (unsigned __int8 *)dlsym(result, "swift_demangle_getSimplifiedDemangledName");
      demanglerLibraryFunctions = result;
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<is_device_sptm_enabled(void)::$_0 &&>>()
{
  uint64_t result;
  BOOL v1;
  char v2;
  size_t v3;
  int v4;

  v4 = 0;
  v3 = 4;
  result = sysctlbyname("kern.page_protection_type", &v4, &v3, 0, 0);
  if ((_DWORD)result)
    v1 = 0;
  else
    v1 = v4 == 2;
  v2 = v1;
  is_device_sptm_enabled(void)::sptm_txm_enabled = v2;
  return result;
}

uint64_t CSSymbolicatorCreateWithTask(unsigned int a1)
{
  return CSSymbolicatorCreateWithTaskFlagsAndNotification(a1, 0, 0);
}

uint64_t CSSymbolicatorCreateWithPid(int a1)
{
  return CSSymbolicatorCreateWithPidFlagsAndNotification(a1, 0, 0);
}

uint64_t CSSymbolicatorForeachSymbolicatorWithURL(const __CFURL *a1, uint64_t a2)
{
  return CSSymbolicatorForeachSymbolicatorWithURLFlagsAndNotification(a1, 0, 0, a2);
}

uint64_t CSSymbolicatorCreateWithURLAndArchitecture(const __CFURL *a1, void **a2)
{
  return CSSymbolicatorCreateWithURLArchitectureFlagsAndNotification(a1, a2, 0, 0);
}

uint64_t CSSymbolicatorForeachSharedCache()
{
  return CSSymbolicatorForeachSharedCacheSymbolicatorWithFlagsAndNotification();
}

unsigned int *CSSymbolicatorCreateForTaskSharedCache(char a1, uint64_t a2)
{
  return CSSymbolicatorCreateForTaskSharedCacheWithFlagsAndNotification(a1, a2, 0);
}

uint64_t CSSymbolicatorCreateWithMachKernel()
{
  return CSSymbolicatorCreateWithMachKernelFlagsAndNotification(0);
}

uint64_t CSSymbolicatorIsTaskTranslated()
{
  return 0;
}

uint64_t CSSymbolicatorIsKernelSymbolicator(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 24))(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  else
    return 0;
}

uint64_t CSSymbolicatorIsTaskValid(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 32))(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  else
    return 0;
}

uint64_t CSSymbolicatorGetPid(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(unsigned int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 16))(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56))
                           + 12);
  else
    return 0;
}

uint64_t CSSymbolicatorGetTask(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return *(unsigned int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 16))(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56))
                           + 8);
  else
    return 0;
}

UUID *CSSymbolicatorGetSharedCacheUUID(char a1, uint64_t a2)
{
  UUID *v2;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = (UUID *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 48))(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  if (UUID::is_null(v2))
    return 0;
  else
    return v2;
}

uint64_t CSSymbolicatorGetSharedCacheBaseAddress(char a1, uint64_t a2)
{
  if (a1 & 7 | (8 * (a2 & 3)))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 64))(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56));
  else
    return 0;
}

BOOL CSSymbolicatorGetTaskIsTranslated(char a1, uint64_t a2)
{
  return a1 & 7 | (8 * (a2 & 3)) && *(_BYTE *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56) + 16) != 0;
}

uint64_t CSSymbolicatorForeachSymbolOwnerWithUUIDAtTime(uint64_t a1, uint64_t a2, CFUUIDRef uuid, uint64_t a4, uint64_t a5)
{
  CFUUIDBytes v10;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v10 = CFUUIDGetUUIDBytes(uuid);
  return CSSymbolicatorForeachSymbolOwnerWithCFUUIDBytesAtTime(a1, a2, &v10, a4, a5);
}

uint64_t CSSymbolicatorGetSymbolOwnerWithUUIDAtTime(uint64_t a1, uint64_t a2, const __CFUUID *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)();

  v7 = 0;
  v8 = &v7;
  v9 = 0x3802000000;
  v10 = __Block_byref_object_copy__10;
  v11 = __Block_byref_object_dispose__10;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolicatorGetSymbolOwnerWithUUIDAtTime_block_invoke;
  v6[3] = &unk_1E6779840;
  v6[4] = &v7;
  if (CSSymbolicatorForeachSymbolOwnerWithUUIDAtTime(a1, a2, a3, a4, (uint64_t)v6) == 1)
    v4 = v8[5];
  else
    v4 = 0;
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B416B980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)();

  v7 = 0;
  v8 = &v7;
  v9 = 0x3802000000;
  v10 = __Block_byref_object_copy__10;
  v11 = __Block_byref_object_dispose__10;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime_block_invoke;
  v6[3] = &unk_1E6779868;
  v6[4] = &v7;
  if (CSSymbolicatorForeachSymbolOwnerWithCFUUIDBytesAtTime(a1, a2, a3, a4, v6) == 1)
    v4 = v8[5];
  else
    v4 = 0;
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B416BA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t WriteMMapArchiveToDirectory(CSCppSymbolOwner *a1, TMMapArchive *a2, char *a3)
{
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  size_t v9;
  std::string *v10;
  int v11;
  int v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  stat v19;
  std::string v20;
  uint64_t v21;
  int v22;
  int __buf;
  char __s[40];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  CFUUIDBytesToString((const CFUUIDBytes *)((char *)a2 + 52), __s, 0x28uLL);
  v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v20, a3);
  size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v20;
  else
    v8 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v20.__r_.__value_.__l.__size_;
  if (v8->__r_.__value_.__s.__data_[size - 1] != 47)
    std::string::push_back(v6, 47);
  v9 = strlen(__s);
  std::string::append(&v20, __s, v9);
  std::string::append(&v20, ".symbolsarchive", 0xFuLL);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v20;
  else
    v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
  v11 = open((const char *)v10, 16777730, 432);
  v12 = v11;
  if (v11 == -1)
    goto LABEL_26;
  if (fstat(v11, &v19) == -1)
    goto LABEL_26;
  v13 = *((unsigned int *)a2 + 1);
  if (v19.st_size == v13 || a1 && v19.st_size && (*((_BYTE *)a1 + 110) & 4) == 0)
    goto LABEL_26;
  v18 = 0;
  if (!*((_DWORD *)a2 + 20))
  {
    v15 = TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(a2, v13, v12, &v18);
    goto LABEL_31;
  }
  if (!TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(a2, 4uLL, v12, &v18)|| (__buf = *((_DWORD *)a2 + 1) - *((_DWORD *)a2 + 20), !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(&__buf, 4uLL, v12, &v18))|| !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>((char *)a2 + 8, 0x28uLL, v12, &v18)|| (v22 = TMMapArchive::calculate_checksum((int32x4_t *)a2) - *((_DWORD *)a2 + 20), !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(&v22, 4uLL,
                         v12,
                         &v18))
    || !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>((char *)a2 + 52, 0x18uLL, v12, &v18)|| (v21 = 0, !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(&v21, 8uLL, v12, &v18))|| (v14 = TMMapArchive::TEXT_text(a2), !TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>((char *)a2 + 84, v14 - ((_QWORD)a2 + 84), v12, &v18)))
  {
LABEL_26:
    v16 = 0;
    goto LABEL_27;
  }
  v15 = TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>((void *)(*((unsigned int *)a2 + 20) + v14), (size_t)a2 + v13 - *((unsigned int *)a2 + 20) - v14, v12, &v18);
LABEL_31:
  v16 = v15;
LABEL_27:
  close(v12);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1B416BD34(_Unwind_Exception *a1)
{
  int v1;
  uint64_t v2;

  close(v1);
  if (*(char *)(v2 - 129) < 0)
    operator delete(*(void **)(v2 - 152));
  _Unwind_Resume(a1);
}

uint64_t AddMmapArchiveToDirectory(CSCppSymbolOwner *a1, char *a2)
{
  const CFUUIDBytes *v4;
  _QWORD *v5;
  unsigned int *v6;
  _BOOL4 v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  int v14;
  CSCppAddressSet *v15;
  mach_vm_address_t mmap_archive_arch;
  CSCppAddressSet *v17;
  _BYTE v19[16];
  uint64_t *v20[3];
  __int128 v21;
  char v22[40];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a1 + 110) & 1) == 0)
    return 0;
  v4 = (const CFUUIDBytes *)((char *)a1 + 16);
  if (UUID::is_null((UUID *)((uint8_t *)a1 + 1)) || !*((_QWORD *)a1 + 10))
    return 0;
  v5 = (_QWORD *)CSCppSymbolOwner::data(a1);
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 24))(v5) == 4)
  {
    v6 = (unsigned int *)v5[11];
    if (v6)
    {
      v7 = 0;
LABEL_33:
      WriteMMapArchiveToDirectory(a1, (TMMapArchive *)v6, a2);
      goto LABEL_34;
    }
    return 0;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 24))(v5) != 1)
  {
    if ((*(unsigned int (**)(_QWORD *))(*v5 + 24))(v5) != 2)
      return 0;
    CFUUIDBytesToString(v4, v22, 0x28uLL);
    v11 = (_QWORD *)TRawSymbolOwnerData<Pointer64>::mutable_sorted_symbols((uint64_t)v5);
    if (*v11 != v11[1])
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
      v13 = (char *)*((_QWORD *)a1 + 4);
      v12 = (char *)*((_QWORD *)a1 + 5);
      if (v12 - v13 == 32)
      {
        if (v13 == v12)
        {
          v13 = (char *)*((_QWORD *)a1 + 5);
        }
        else
        {
          do
          {
            v21 = *(_OWORD *)v13;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(v20, (unint64_t *)&v21, &v21);
            v13 += 32;
          }
          while (v13 != v12);
          v13 = (char *)*((_QWORD *)a1 + 4);
          v12 = (char *)*((_QWORD *)a1 + 5);
        }
      }
      if (v12 - v13 == 32)
        v17 = (CSCppAddressSet *)v19;
      else
        v17 = 0;
      mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>((uint64_t)a1, v5, v17, 0);
      goto LABEL_30;
    }
LABEL_19:
    v7 = 0;
    v14 = 0;
    v6 = 0;
    goto LABEL_31;
  }
  CFUUIDBytesToString(v4, v22, 0x28uLL);
  v8 = (_QWORD *)TRawSymbolOwnerData<Pointer32>::mutable_sorted_symbols((uint64_t)v5);
  if (*v8 == v8[1])
    goto LABEL_19;
  CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
  v10 = (char *)*((_QWORD *)a1 + 4);
  v9 = (char *)*((_QWORD *)a1 + 5);
  if (v9 - v10 == 32)
  {
    if (v10 == v9)
    {
      v10 = (char *)*((_QWORD *)a1 + 5);
    }
    else
    {
      do
      {
        v21 = *(_OWORD *)v10;
        std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(v20, (unint64_t *)&v21, &v21);
        v10 += 32;
      }
      while (v10 != v9);
      v10 = (char *)*((_QWORD *)a1 + 4);
      v9 = (char *)*((_QWORD *)a1 + 5);
    }
  }
  if (v9 - v10 == 32)
    v15 = (CSCppAddressSet *)v19;
  else
    v15 = 0;
  mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>((uint64_t)a1, (uint64_t)v5, v15, 0);
LABEL_30:
  v6 = (unsigned int *)mmap_archive_arch;
  v7 = mmap_archive_arch != 0;
  v14 = 4 * v7;
  CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)v19);
LABEL_31:
  if (!v6)
    return 0;
  if (v14 == 4)
    goto LABEL_33;
LABEL_34:
  if (v7)
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], (mach_vm_address_t)v6, v6[1]);
  return 1;
}

void sub_1B416C018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)va);
  _Unwind_Resume(a1);
}

void CSCppAddMmapArchivesFromSymbolicatorToDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __CSCppAddMmapArchivesFromSymbolicatorToDirectory_block_invoke;
  v3[3] = &__block_descriptor_tmp_17;
  v3[4] = a3;
  CSCppForEachMMapArchiveInSymbolicator(a1, a2, (uint64_t)v3);
}

void CSCppForEachMMapArchiveInSymbolicator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  _OWORD v16[2];
  int v17;
  _QWORD v18[3];

  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v18);
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v4 = (_QWORD *)v18[0];
  v5 = (_QWORD *)v18[1];
  while (v4 != v5)
  {
    if (std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::find<UUID>(v16, (_QWORD *)(*v4 + 16)))
    {
      goto LABEL_13;
    }
    v6 = (std::__shared_weak_count *)v4[1];
    v14 = *v4;
    v15 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(a3 + 16))(a3, &v14);
    v10 = v9;
    v11 = v15;
    if (!v15)
      goto LABEL_11;
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (v13)
    {
LABEL_11:
      if (!v9)
        goto LABEL_13;
LABEL_12:
      std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__emplace_unique_key_args<UUID,UUID const&>((uint64_t)v16, (_QWORD *)(*v4 + 16), (_OWORD *)(*v4 + 16));
      goto LABEL_13;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v10)
      goto LABEL_12;
LABEL_13:
    v4 += 2;
  }
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v16);
  *(_QWORD *)&v16[0] = v18;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
}

void sub_1B416C1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)&a11);
  a11 = (void **)&a16;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t CSCppAddMmapArchivesToDirectory(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (a2)
  {
    v4 = a2;
    v5 = (uint64_t *)(result + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      result = AddMmapArchiveToDirectory((CSCppSymbolOwner *)(v6 & 0xFFFFFFFFFFFFFFFCLL), a3);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _findPrimarySharedCacheInFlatbufferSymbolicator(const FlatbufferSymbols::Symbolicator *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;

  v1 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v1 < 0xBu)
    return 0;
  v2 = v1[5];
  if (!v2)
    return 0;
  v3 = (unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  v4 = *v3;
  if ((_DWORD)v4 == 1)
    return (uint64_t)v3 + v3[1] + 4;
  v6 = &v3[v4 + 1];
  v7 = v3 + 1;
  _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>((uint64_t)&v7, &v6, "dyld_shared_cache", 0x11uLL, &v8);
  if (v8 == &v3[*v3 + 1])
    return 0;
  else
    return (uint64_t)v8 + *v8;
}

uint64_t _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>@<X0>(uint64_t result@<X0>, unsigned int **a2@<X1>, const char *a3@<X2>, size_t a4@<X3>, unsigned int **a5@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned __int16 *v10;
  uint64_t v11;

  v6 = *(unsigned int **)result;
  v7 = *a2;
  if (*(unsigned int **)result != *a2)
  {
    while (1)
    {
      result = FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata((FlatbufferSymbols::SymbolOwner *)((char *)v6 + *v6));
      if (result)
      {
        v10 = (unsigned __int16 *)(result - *(int *)result);
        if (*v10 >= 0x13u)
        {
          v11 = v10[9];
          if (v11)
          {
            result = strncmp((const char *)(result + v11 + *(unsigned int *)(result + v11) + 4), a3, a4);
            if (!(_DWORD)result)
              break;
          }
        }
      }
      if (++v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  *a5 = v6;
  return result;
}

char *_findAOTSharedCacheInFlatbufferSymbolicator(int *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;

  v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0xBu)
    return 0;
  v2 = v1[5];
  if (!v2)
    return 0;
  v3 = (unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  v5 = &v3[*v3 + 1];
  v6 = v3 + 1;
  _findSharedCacheWithNamePrefix<flatbuffers::VectorIterator<flatbuffers::Offset<FlatbufferSymbols::SharedCache>,FlatbufferSymbols::SharedCache const*>>((uint64_t)&v6, &v5, "aot_shared_cache", 0x10uLL, &v7);
  if (v7 == &v3[*v3 + 1])
    return 0;
  else
    return (char *)v7 + *v7;
}

void _assignArchivesToSymbolOwners(_QWORD *a1, TMMapArchive *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  UUID *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *i;

  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  while (v3 != v4)
  {
    v6 = *(UUID **)v3;
    v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (!UUID::is_null(v6 + 1)
      && std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::find<UUID>(a1, &(*v6)[16]))
    {
      CSCppSymbolOwner::data_claim_empty((CSCppSymbolOwner *)v6);
    }
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 += 16;
  }
  for (i = (_QWORD *)a1[2]; i; i = (_QWORD *)*i)
    CSCppMMapArchiveCache::release_archive(i[4], a2);
}

void sub_1B416C4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double CSCppSignatureEncodeSymbolicator<__CFData *>(const __CFData *a1, int a2, int a3, int a4, int a5)
{
  CFIndex Length;
  UInt8 *MutableBytePtr;
  double result;

  Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + 24);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  *(_QWORD *)&result = 0x1FF01FF02;
  *(_QWORD *)MutableBytePtr = 0x1FF01FF02;
  *((_DWORD *)MutableBytePtr + 2) = a2;
  *((_DWORD *)MutableBytePtr + 3) = a3;
  *((_DWORD *)MutableBytePtr + 4) = a4;
  *((_DWORD *)MutableBytePtr + 5) = a5;
  return result;
}

char *CSCppSignatureEncodeSymbolOwner<__CFData *>(const __CFData *a1, _OWORD *a2, int a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, const char *a8, _QWORD *a9, uint64_t a10)
{
  int v11;
  unint64_t v17;
  CFIndex Length;
  size_t v19;
  UInt8 *v20;
  unsigned int v21;
  char *result;
  _QWORD *v23;
  const char *v24;
  char *v25;

  v11 = a7;
  v17 = HIDWORD(a7);
  Length = CFDataGetLength(a1);
  v19 = strlen(a8);
  CFDataSetLength(a1, Length + (v19 & 0xFFFFFFFFFFFFFFF8) + ((a9[1] - *a9) & 0x1FFFFFFFE0) + 64);
  v20 = &CFDataGetMutableBytePtr(a1)[Length];
  *(_OWORD *)v20 = *a2;
  *((_DWORD *)v20 + 4) = a3;
  *((_DWORD *)v20 + 5) = a4 & 0xFFFBFFFF;
  *((_QWORD *)v20 + 3) = a5;
  *((_QWORD *)v20 + 4) = a6;
  *((_DWORD *)v20 + 10) = v11;
  *((_DWORD *)v20 + 11) = v17;
  *((_DWORD *)v20 + 12) = (a9[1] - *a9) >> 5;
  v21 = (strlen(a8) & 0xFFFFFFF8) + 8;
  *((_DWORD *)v20 + 13) = v21;
  result = strcpy((char *)v20 + 56, a8);
  v23 = (_QWORD *)*a9;
  if (*a9 < a9[1])
  {
    result += v21;
    do
    {
      v24 = (const char *)v23[3];
      if (!v24)
        v24 = (const char *)v23[2];
      v25 = strncpy(result, v24, 0x10uLL);
      *((_QWORD *)v25 + 2) = *v23 + a10;
      *((_QWORD *)v25 + 3) = v23[1];
      result = v25 + 32;
      v23 += 4;
    }
    while ((unint64_t)v23 < a9[1]);
  }
  return result;
}

void *CSCppSignatureEncodeMMapArchive<__CFData *>(const __CFData *a1, _DWORD *a2)
{
  CFIndex Length;
  UInt8 *v5;
  size_t v6;

  Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + ((a2[1] + 23) & 0xFFFFFFF8));
  v5 = &CFDataGetMutableBytePtr(a1)[Length];
  *(_QWORD *)v5 = 0x7A1B22B1ALL;
  v6 = a2[1];
  *((_DWORD *)v5 + 2) = -1582159078;
  *((_DWORD *)v5 + 3) = (v6 + 23) & 0xFFFFFFF8;
  return memcpy(v5 + 16, a2, v6);
}

UInt8 *CSCppSignatureEncodeOptionalDataHeader<__CFData *>(const __CFData *a1, uint64_t a2)
{
  CFIndex Length;
  UInt8 *result;

  Length = CFDataGetLength(a1);
  CFDataSetLength(a1, Length + 8);
  result = CFDataGetMutableBytePtr(a1);
  *(_QWORD *)&result[Length] = (a2 << 32) | 0xC0FFEE;
  return result;
}

void CSCppSignatureEncodeOptionalData<__CFData *>(const __CFData *a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, char a7, uint64_t a8)
{
  CFIndex Length;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  task_read_t Task;
  unint64_t v20;
  uint64_t v21;
  CFIndex v22;
  UInt8 *v23;
  __int128 v24;
  int v25;
  UInt8 *MutableBytePtr;
  UInt8 *v27;
  const char **v28;
  const char **v29;
  const char *v30;
  size_t v31;
  unsigned int v32;
  size_t v33;
  _QWORD v34[6];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  __n128 (*v43)(_QWORD *, uint64_t);
  void (*v44)(uint64_t);
  void *__p;
  void *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  CSCppSignatureEncodeOptionalDataHeader<__CFData *>(a1, a2);
  Length = CFDataGetLength(a1);
  v16 = *a3;
  v48 = *a5;
  v49 = v16;
  v40 = 0;
  v41 = &v40;
  v42 = 0x4002000000;
  v43 = __Block_byref_object_copy__27;
  v44 = __Block_byref_object_dispose__28;
  v47 = 0;
  __p = 0;
  v46 = 0;
  v35 = MEMORY[0x1E0C809B0];
  v36 = 0x40000000;
  v37 = (uint64_t)___ZL31_addAotImageInfosToOptionalDataR37SignatureOptionalDataEncodingVersion310_CSTypeRefP8__CFDatam_block_invoke;
  v38 = &unk_1E67799C0;
  v39 = &v40;
  CSSymbolicatorForEachAotImage();
  v18 = v41[5];
  v17 = v41[6];
  Task = CSSymbolicatorGetTask(a7, a8);
  LOBYTE(a3) = CSTaskIsTranslated(Task);
  v20 = v17 - v18;
  v21 = (v17 - v18 + 56);
  v22 = v21 + Length;
  CFDataSetLength(a1, v21 + Length);
  v23 = &CFDataGetMutableBytePtr(a1)[Length];
  v24 = v48;
  *(_OWORD *)v23 = v49;
  *((_QWORD *)v23 + 2) = a4;
  *(_OWORD *)(v23 + 24) = v24;
  *((_QWORD *)v23 + 5) = a6;
  v23[48] = a3;
  *((_DWORD *)v23 + 13) = -1431655765 * (v20 >> 5);
  memcpy(v23 + 56, (const void *)v41[5], v21 - 56);
  _Block_object_dispose(&v40, 8);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v40 = 0;
  v41 = &v40;
  v42 = 0x4002000000;
  v43 = __Block_byref_object_copy__11;
  v44 = __Block_byref_object_dispose__11;
  v46 = 0;
  v47 = 0;
  __p = 0;
  v35 = 0;
  v36 = (uint64_t)&v35;
  v37 = 0x2000000000;
  LODWORD(v38) = 0;
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 0x40000000;
  v34[2] = ___Z32CSCppSignatureEncodeOptionalDataIP8__CFDataEvT_jPKhyS4_y10_CSTypeRef_block_invoke;
  v34[3] = &unk_1E67798B0;
  v34[4] = &v35;
  v34[5] = &v40;
  CSSymbolicatorForeachSymbolOwnerAtTime(a7, a8, 0x8000000000000001, (uint64_t)v34);
  v25 = ((*(_DWORD *)(v36 + 24) - 1) | 7) + 1;
  CFDataSetLength(a1, v22 + (v25 & 0xFFFFFFF8) + 4);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  *(_DWORD *)&MutableBytePtr[v22] = v25;
  v27 = &MutableBytePtr[v22 + 4];
  v28 = (const char **)v41[5];
  v29 = (const char **)v41[6];
  while (v28 != v29)
  {
    v30 = *v28++;
    v31 = strlen(v30) + 1;
    memcpy(v27, v30, v31);
    v27 += v31;
  }
  v32 = v25 - *(_DWORD *)(v36 + 24);
  if (v32)
  {
    if (v32 <= 1)
      v33 = 1;
    else
      v33 = v32;
    bzero(v27, v33);
  }
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v40, 8);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_1B416CAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___Z32CSCppSignatureEncodeOptionalDataIP8__CFDataEvT_jPKhyS4_y10_CSTypeRef_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t Version;
  const char *v5;
  _QWORD *v6;
  const char **v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  const char **v16;
  char *v17;
  char *v18;
  char *v19;
  const char *v20;

  Version = CSSymbolOwnerGetVersion(a2, a3);
  if (Version)
    v5 = (const char *)Version;
  else
    v5 = "";
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += strlen(v5) + 1;
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v7 = (const char **)v6[6];
  v8 = v6[7];
  if ((unint64_t)v7 >= v8)
  {
    v10 = v6[5];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v12 = v8 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v6 + 7), v14);
    else
      v15 = 0;
    v16 = (const char **)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v5;
    v9 = v16 + 1;
    v19 = (char *)v6[5];
    v18 = (char *)v6[6];
    if (v18 != v19)
    {
      do
      {
        v20 = (const char *)*((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = (char *)v6[5];
    }
    v6[5] = v16;
    v6[6] = v9;
    v6[7] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  v6[6] = v9;
}

uint64_t CSCppSignatureDecodeSymbolicator<__CFData const*>(const __CFData *a1, unint64_t *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v16;
  const UInt8 *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;

  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  v16 = *a2 + 24;
  if (v16 > Length)
    return 0;
  v17 = &BytePtr[*a2];
  v23 = *((_DWORD *)v17 + 1);
  v22 = *((_DWORD *)v17 + 2);
  v21 = *((_DWORD *)v17 + 3);
  v20 = *((_DWORD *)v17 + 4);
  v19 = *((_DWORD *)v17 + 5);
  if (*(_DWORD *)v17 != -16646398)
    return 0;
  *a3 = v23;
  if (v23 > 1)
    return 0;
  *a4 = v22;
  *a5 = v21;
  *a6 = v20;
  *a7 = v19;
  *a2 = v16;
  return 1;
}

uint64_t CSCppDetermineSignatureType<__CFData const*>(const __CFData *a1)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(a1);
  if (!strncmp((const char *)BytePtr + 4, "SYMB", 4uLL))
    return 2;
  else
    return *(_DWORD *)BytePtr == -16646398;
}

uint64_t CSCppSignatureDecodeSymbolOwner<__CFData const*>(const __CFData *a1, unint64_t *a2, const UInt8 **a3, _DWORD *a4, _DWORD *a5, _QWORD *a6, _QWORD *a7, unint64_t *a8, _QWORD *a9, void **a10)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v20;
  const UInt8 *v21;
  unint64_t v22;
  unint64_t v23;
  const UInt8 *v25;
  uint64_t v26;
  CSCppNamedRange *v27;
  uint64_t v28;
  CSCppNamedRange *v29;
  uint64_t v30;
  uint64_t v31;

  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  v20 = *a2;
  if (*a2 + 64 > Length)
    return 0;
  v21 = &BytePtr[v20];
  v22 = *(unsigned int *)&BytePtr[v20 + 48];
  v23 = v20 + *((unsigned int *)v21 + 13) + 32 * v22 + 56;
  if (v23 > Length)
    return 0;
  *a3 = v21;
  *a4 = *((_DWORD *)v21 + 4);
  *a5 = *((_DWORD *)v21 + 5);
  *a6 = *((_QWORD *)v21 + 3);
  *a7 = *((_QWORD *)v21 + 4);
  *a8 = *((unsigned int *)v21 + 10) | ((unint64_t)*((unsigned int *)v21 + 11) << 32);
  v25 = v21 + 56;
  *a9 = v21 + 56;
  if ((*a7 & 0x8000000000000000) != 0)
    *a7 = 0x7FFFFFFFFFFFFFFFLL;
  *a5 &= ~0x80000000;
  v26 = *((unsigned int *)v21 + 13);
  std::vector<CSCppSegmentRange>::reserve(a10, v22);
  if ((_DWORD)v22)
  {
    v27 = (CSCppNamedRange *)&v25[v26];
    do
    {
      v31 = *((_QWORD *)v27 + 2);
      v28 = *((_QWORD *)v27 + 3);
      v29 = v27;
      v30 = v28;
      std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char *>(a10, &v31, &v30, &v29);
      v27 = (CSCppNamedRange *)((char *)v27 + 32);
      LODWORD(v22) = v22 - 1;
    }
    while ((_DWORD)v22);
  }
  *a2 = v23;
  return 1;
}

_QWORD *std::vector<CSCppSegmentRange>::emplace_back<unsigned long long,unsigned long long,char *>(void **a1, _QWORD *a2, uint64_t *a3, CSCppNamedRange **a4)
{
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    v13 = (uint64_t)(v11 - (_QWORD)*a1) >> 5;
    if ((unint64_t)(v13 + 1) >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_BYTE *)*a1;
    v15 = v14 >> 4;
    if (v14 >> 4 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v8, v16);
      v19 = v18;
    }
    else
    {
      v17 = 0;
      v19 = 0;
    }
    v20 = &v17[32 * v13];
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(v20, a2, a3, a4);
    v12 = v20 + 32;
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v20 - 1) = v23;
        v20 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v17[32 * v19];
    if (v21)
      operator delete(v21);
  }
  else
  {
    std::construct_at[abi:ne180100]<CSCppSegmentRange,unsigned long long &,unsigned long long &,char const*&,CSCppSegmentRange*>(*(_QWORD **)(v8 - 8), a2, a3, a4);
    v12 = (_QWORD *)(v11 + 32);
    a1[1] = (void *)(v11 + 32);
  }
  a1[1] = v12;
  return v12 - 4;
}

void sub_1B416D03C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

int32x4_t *CSCppSignatureDecodeMMapArchive<__CFData const*>(const __CFData *a1, _QWORD *a2, BOOL *a3)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  int32x4_t *result;

  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (*a2 + 16 > Length)
    return 0;
  result = MMapArchiveEncoding::mmap_archive((MMapArchiveEncoding *)&BytePtr[*a2], Length - *a2, a3);
  if (result)
    *a2 += (result->i32[1] + 23) & 0xFFFFFFF8;
  return result;
}

int32x4_t *MMapArchiveEncoding::mmap_archive(MMapArchiveEncoding *this, unint64_t a2, BOOL *a3)
{
  unsigned int v5;
  int32x4_t *result;

  if (*((unsigned int *)this + 3) <= a2 && *(_DWORD *)this == -1582159078)
  {
    v5 = *((unsigned __int16 *)this + 2);
    if (v5 <= 6)
    {
      result = MMapArchiveEncoding::_migrate_legacy_archive(this);
      if (!result)
        return result;
      *a3 = 1;
LABEL_8:
      if (*((_DWORD *)this + 2) == -1582159078)
        return result;
      return 0;
    }
    *a3 = 0;
    if (v5 == 7)
    {
      result = (int32x4_t *)((char *)this + 16);
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t ___Z31CSCppAddMMapArchivesToSignatureIP8__CFDataEv10_CSTypeRefT_b_block_invoke(uint64_t a1, CSCppSymbolOwner **a2)
{
  return _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>(*a2, *(const __CFData **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>(CSCppSymbolOwner *a1, const __CFData *a2, int a3)
{
  unsigned int *v6;
  char v7;
  unsigned int *v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  CSCppAddressSet *v15;
  mach_vm_address_t mmap_archive_arch;
  CSCppAddressSet *v17;
  _DWORD *v18;
  _BYTE v19[16];
  uint64_t *v20[3];
  __int128 v21;

  v6 = (unsigned int *)CSCppSymbolOwner::data(a1);
  v7 = atomic_load(v6 + 3);
  if (v7 < 0)
    return 0;
  v8 = v6;
  if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6) != 4)
  {
    if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8) == 1)
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
      v11 = (char *)*((_QWORD *)a1 + 4);
      v10 = (char *)*((_QWORD *)a1 + 5);
      if (v10 - v11 == 32)
      {
        if (v11 == v10)
        {
          v11 = (char *)*((_QWORD *)a1 + 5);
        }
        else
        {
          do
          {
            v21 = *(_OWORD *)v11;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(v20, (unint64_t *)&v21, &v21);
            v11 += 32;
          }
          while (v11 != v10);
          v11 = (char *)*((_QWORD *)a1 + 4);
          v10 = (char *)*((_QWORD *)a1 + 5);
        }
      }
      if (v10 - v11 == 32)
        v15 = (CSCppAddressSet *)v19;
      else
        v15 = 0;
      mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>((uint64_t)a1, (uint64_t)v8, v15, a3);
LABEL_26:
      v18 = (_DWORD *)mmap_archive_arch;
      CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)v19);
      if (v18)
      {
        if (v18[4])
          CSCppSignatureEncodeMMapArchive<__CFData *>(a2, v18);
        mach_vm_deallocate(*MEMORY[0x1E0C83DA0], (mach_vm_address_t)v18, v18[1]);
      }
      return 1;
    }
    if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8) == 2)
    {
      CSCppAddressSet::CSCppAddressSet((CSCppAddressSet *)v19);
      v13 = (char *)*((_QWORD *)a1 + 4);
      v12 = (char *)*((_QWORD *)a1 + 5);
      if (v12 - v13 == 32)
      {
        if (v13 == v12)
        {
          v13 = (char *)*((_QWORD *)a1 + 5);
        }
        else
        {
          do
          {
            v21 = *(_OWORD *)v13;
            std::__tree<TRange<Pointer64>>::__emplace_unique_key_args<TRange<Pointer64>,TRange<Pointer64> const&>(v20, (unint64_t *)&v21, &v21);
            v13 += 32;
          }
          while (v13 != v12);
          v13 = (char *)*((_QWORD *)a1 + 4);
          v12 = (char *)*((_QWORD *)a1 + 5);
        }
      }
      if (v12 - v13 == 32)
        v17 = (CSCppAddressSet *)v19;
      else
        v17 = 0;
      mmap_archive_arch = CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>((uint64_t)a1, v8, v17, a3);
      goto LABEL_26;
    }
    return 0;
  }
  v9 = (_DWORD *)*((_QWORD *)v8 + 11);
  if (v9[4])
    CSCppSignatureEncodeMMapArchive<__CFData *>(a2, v9);
  return 1;
}

void sub_1B416D37C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CSCppAddressSet::~CSCppAddressSet((CSCppAddressSet *)va);
  _Unwind_Resume(a1);
}

uint64_t CSCppAddMMapArchiveToSignatureFromSymbolOwner<__CFData *>(uint64_t a1, uint64_t a2, const __CFData *a3, int a4)
{
  return _CSCppAddMMapArchiveToSignatureFromCSCppSymbolOwner<__CFData *>((CSCppSymbolOwner *)(a2 & 0xFFFFFFFFFFFFFFFCLL), a3, a4);
}

uint64_t CSCppAddSparseMMapArchiveToSignature<__CFData *>(const __CFData *a1, CSCppAddressSet *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char SymbolOwner;
  uint64_t v8;
  uint64_t v9;
  CSCppSymbolOwner *v10;
  unsigned int *v11;
  char v12;
  unsigned int *v13;
  int v14;
  _DWORD *mmap_archive_arch;
  mach_vm_address_t v16;
  uint64_t v17;

  v4 = (unsigned int *)CSSymbolicatorCreateWithSignatureFlagsAndNotification(a1, -2147475454, 0x400u, 0);
  v6 = v5;
  SymbolOwner = CSSymbolicatorGetSymbolOwner((char)v4, v5);
  v9 = v8;
  if (CSIsNull(SymbolOwner, v8))
    goto LABEL_9;
  v10 = (CSCppSymbolOwner *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  v11 = (unsigned int *)CSCppSymbolOwner::data(v10);
  v12 = atomic_load(v11 + 3);
  if (v12 < 0)
    goto LABEL_9;
  v13 = v11;
  v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11);
  if (v14 == 2)
  {
    mmap_archive_arch = (_DWORD *)CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer64>((uint64_t)v10, v13, a2, 0);
  }
  else
  {
    if (v14 != 1)
    {
LABEL_9:
      v17 = 0;
      goto LABEL_10;
    }
    mmap_archive_arch = (_DWORD *)CSCppSymbolOwnerCache::create_mmap_archive_arch_specific<Pointer32>((uint64_t)v10, (uint64_t)v13, a2, 0);
  }
  v16 = (mach_vm_address_t)mmap_archive_arch;
  if (!mmap_archive_arch)
    goto LABEL_9;
  CSCppSignatureEncodeMMapArchive<__CFData *>(a1, mmap_archive_arch);
  mach_vm_deallocate(*MEMORY[0x1E0C83DA0], v16, *(unsigned int *)(v16 + 4));
  v17 = 1;
LABEL_10:
  CSRelease(v4, v6);
  return v17;
}

void CSCppSignatureDecodeOptionalData<__CFData const*>(const __CFData *a1, unint64_t *a2, CSCppSymbolicator *a3)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v8;
  unsigned int v10;
  const UInt8 *v12;
  const UInt8 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const UInt8 *v17;
  const UInt8 *v18;
  unint64_t v19;
  unint64_t v20;
  const UInt8 *v21;
  uint64_t v22;
  size_t *v23;
  size_t *v24;
  _DWORD *v25;
  const char *v26;
  int v27;
  const char *v28;
  size_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  size_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (!a2 || !BytePtr)
    return;
  v8 = *a2;
  if (Length < *a2 || Length - *a2 < 8)
    return;
  v10 = *(_DWORD *)&BytePtr[v8 + 4];
  if (*(_DWORD *)&BytePtr[v8] != 12648430 || v10 < 2)
    return;
  *a2 = v8 + 8;
  if (v10 != 4)
  {
    if (v10 == 3)
    {
      CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>(a1, a2, a3);
    }
    else if (v10 == 2)
    {
      v12 = CFDataGetBytePtr(a1);
      if (v12)
      {
        v13 = v12;
        v14 = *a2;
        v15 = CFDataGetLength(a1);
        if (v15 > *a2 && v15 - *a2 >= 0x18)
        {
          v39 = *(_OWORD *)&v13[v14];
          v16 = *(_QWORD *)&v13[v14 + 16];
          v38 = v39;
          (*(void (**)(_QWORD *, __int128 *))(**((_QWORD **)a3 + 7) + 80))(*((_QWORD **)a3 + 7), &v38);
          (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)a3 + 7) + 88))(*((_QWORD **)a3 + 7), v16);
          *a2 += 24;
        }
      }
    }
    return;
  }
  v17 = CFDataGetBytePtr(a1);
  if (!v17)
    return;
  v18 = v17;
  v19 = *a2;
  v20 = CFDataGetLength(a1);
  if (v20 <= *a2 || v20 - *a2 < 0x38)
    return;
  v37 = *a2;
  CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>(a1, &v37, a3);
  CSCppSymbolicator::get_symbol_owners(a3, &v39);
  v21 = &v18[v19];
  v22 = (uint64_t)&v18[v19 + 56];
  v24 = (size_t *)*((_QWORD *)&v39 + 1);
  v23 = (size_t *)v39;
  if ((_QWORD)v39 == *((_QWORD *)&v39 + 1))
    goto LABEL_41;
  v25 = (_DWORD *)(v22 + 96 * *((unsigned int *)v21 + 13));
  v27 = *v25;
  v26 = (const char *)(v25 + 1);
  v28 = &v26[v27];
  while (1)
  {
    v29 = *v23;
    v30 = (std::__shared_weak_count *)v23[1];
    *(_QWORD *)&v38 = *v23;
    *((_QWORD *)&v38 + 1) = v30;
    if (!v30)
    {
      if (v26 == v28)
        goto LABEL_41;
      goto LABEL_31;
    }
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    if (v26 == v28)
      break;
LABEL_31:
    CSCppSymbolOwner::set_version(v29, v26);
    v33 = strlen(v26);
    if (v30)
    {
      v34 = (unint64_t *)&v30->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v26 += v33 + 1;
    v23 += 2;
    if (v23 == v24)
      goto LABEL_41;
  }
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_41:
  *a2 += (*(_DWORD *)(v22 + 96 * *((unsigned int *)v21 + 13)) + 96 * *((_DWORD *)v21 + 13) + 60);
  *(_QWORD *)&v38 = &v39;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_1B416D7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

unint64_t CSCppSignatureDecodeOptionalDataVersion3<__CFData const*>(const __CFData *a1, unint64_t *a2, CSCppSymbolicator *a3)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  _OWORD *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  result = (unint64_t)CFDataGetBytePtr(a1);
  if (a2)
  {
    v7 = result;
    if (result)
    {
      v8 = *a2;
      result = CFDataGetLength(a1);
      if (result > *a2 && result - *a2 >= 0x38)
      {
        v9 = v7 + v8;
        v10 = *(_OWORD *)(v7 + v8);
        v11 = *(_QWORD *)(v7 + v8 + 16);
        v25 = *(_OWORD *)(v9 + 24);
        v26 = v10;
        v12 = *(_QWORD *)(v9 + 40);
        v13 = *(unsigned __int8 *)(v9 + 48);
        v14 = *(_DWORD *)(v9 + 52);
        v23 = v25;
        v24 = v10;
        v15 = v13 != 0;
        (*(void (**)(_QWORD *, __int128 *))(**((_QWORD **)a3 + 7) + 80))(*((_QWORD **)a3 + 7), &v24);
        (*(void (**)(_QWORD *, __int128 *))(**((_QWORD **)a3 + 7) + 96))(*((_QWORD **)a3 + 7), &v23);
        (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)a3 + 7) + 88))(*((_QWORD **)a3 + 7), v11);
        (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)a3 + 7) + 104))(*((_QWORD **)a3 + 7), v12);
        *(_BYTE *)(*((_QWORD *)a3 + 7) + 16) = v15;
        result = (unint64_t)CSCppSymbolicator::initialize_aot_symbolication_session(a3);
        if (v14)
        {
          v16 = (_OWORD *)(v9 + 56);
          v17 = v14;
          do
          {
            v18 = v16[1];
            v22[0] = *v16;
            v22[1] = v18;
            v19 = v16[2];
            v20 = v16[3];
            v21 = v16[5];
            v22[4] = v16[4];
            v22[5] = v21;
            v22[2] = v19;
            v22[3] = v20;
            v16 += 6;
            result = (unint64_t)CSCppSymbolicator::add_aot_image_info((uint64_t)a3, (uint64_t)v22);
            --v17;
          }
          while (v17);
        }
        *a2 += (96 * v14 + 56);
      }
    }
  }
  return result;
}

uint64_t _createCSSymbolicatorFromFlatbuffer<__CFData const*>(FlatbufferSymbols::SymbolOwner *a1, const __CFData *a2, unsigned int a3)
{
  FlatbufferSymbols::Symbolicator *v5;
  int *v6;
  int *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  FlatbufferSymbols::SymbolOwner *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  CSCppSegmentRange *v28;
  unsigned int *v29;
  char *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  CSCppNamedRange *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  unsigned __int16 *v50;
  unsigned int v51;
  int *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  unsigned __int16 *v63;
  unsigned int v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  unsigned __int16 *v83;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  int v87;
  CSCppSymbolOwner *v88;
  __int128 v89;
  uint64_t v90;
  FlatbufferSymbolOwnerData *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  CSCppFakeTask *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 *v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unint64_t v112;
  unsigned int *v113;
  int *v114;
  unsigned __int16 *v115;
  unsigned int v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  __int128 v123;
  __int128 v124;
  void *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  _BYTE *v137;
  uint64_t PrimarySharedCacheInFlatbufferSymbolicator;
  uint64_t AOTSharedCacheInFlatbufferSymbolicator;
  unsigned __int16 *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v144;
  int *v145;
  unsigned __int16 *v146;
  unsigned int v147;
  uint64_t v148;
  unsigned __int16 *v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  unsigned __int16 *v153;
  unsigned int v154;
  uint64_t v155;
  const __CFData *v156;
  int *v157;
  FlatbufferSymbols::Symbolicator *v158;
  unsigned int v159;
  int *v160;
  unsigned int *v161;
  int v162;
  CSCppFakeTask *v163;
  unsigned int v164;
  __n128 *v165;
  CSCppSymbolOwner *v166[2];
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t ArchitectureForName;
  const char *v171;
  char *v172[3];
  uint64_t v173;
  uint64_t v174;
  void *__p[2];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  size_t v179;
  __n128 v180;
  _QWORD v181[3];

  v5 = a1;
  v181[1] = *MEMORY[0x1E0C80C00];
  v173 = 0;
  v174 = 0;
  v6 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(a1);
  v7 = v6;
  if (v6 && (v8 = (unsigned __int16 *)((char *)v6 - *v6), v9 = *v8, v9 >= 7))
  {
    if (v8[3])
      v10 = *(_QWORD *)((char *)v6 + v8[3]);
    else
      LODWORD(v10) = -1;
    v162 = v10;
    if (v9 >= 0xB)
    {
      v144 = v8[5];
      if (v144)
        CSUUIDStringToCFUUIDBytes((char *)v6 + v144 + *(unsigned int *)((char *)v6 + v144) + 4, &v173);
    }
  }
  else
  {
    v162 = -1;
  }
  v11 = FlatbufferSymbols::Symbolicator::metadata_as_DyldSharedCacheMetadata(v5);
  v12 = (int *)v11;
  v159 = a3;
  v160 = v7;
  memset(v172, 0, sizeof(v172));
  v13 = (unsigned __int16 *)((char *)v5 - *(int *)v5);
  if (*v13 >= 9u)
  {
    v14 = v13[4];
    if (v14)
    {
      v15 = (unsigned int *)((char *)v5 + v14);
      v16 = *v15;
      v18 = (unsigned int *)((char *)v15 + v16 + 4);
      v17 = *(unsigned int *)((char *)v15 + v16);
      if ((_DWORD)v17)
      {
        v161 = &v18[v17];
        v158 = v5;
        v156 = a2;
        v157 = (int *)v11;
        while (1)
        {
          v19 = (FlatbufferSymbols::SymbolOwner *)((char *)v18 + *v18);
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v176 = 0;
          ArchitectureForName = 0;
          v171 = 0;
          v180 = 0uLL;
          v168 = 0x7FFFFFFFFFFFFFFFLL;
          v169 = 0;
          v20 = *(int *)v19;
          v21 = -v20;
          v22 = (unsigned __int16 *)((char *)v19 - v20);
          if (*v22 >= 9u)
          {
            v23 = v22[4];
            if (v23)
            {
              v24 = (unsigned int *)((char *)v19 + v23);
              v25 = *v24;
              v27 = (unsigned int *)((char *)v24 + v25 + 4);
              v26 = *(unsigned int *)((char *)v24 + v25);
              if ((_DWORD)v26)
              {
                v28 = 0;
                v29 = &v27[v26];
                do
                {
                  v30 = (char *)v27 + *v27;
                  v31 = (unsigned __int16 *)&v30[-*(int *)v30];
                  v32 = *v31;
                  if (v32 >= 5)
                  {
                    v33 = v31[2];
                    if (v31[2])
                    {
                      v34 = &v30[v33];
                      if (!strstr(&v30[v33 + 4 + *(unsigned int *)&v30[v33]], "__LINKINFO"))
                      {
                        if (v32 < 7)
                        {
                          v36 = 0;
                          v35 = -1;
                        }
                        else
                        {
                          if (v31[3])
                            v35 = *(_QWORD *)&v30[v31[3]];
                          else
                            v35 = -1;
                          if (v32 >= 9 && v31[4])
                            v36 = *(_QWORD *)&v30[v31[4]];
                          else
                            v36 = 0;
                        }
                        v37 = (CSCppNamedRange *)&v34[*(unsigned int *)v34 + 4];
                        if ((unint64_t)v28 >= (unint64_t)v176)
                        {
                          v38 = ((char *)v28 - (char *)__p[0]) >> 5;
                          if ((unint64_t)(v38 + 1) >> 59)
                            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                          v39 = (uint64_t)(v176 - (unint64_t)__p[0]) >> 4;
                          if (v39 <= v38 + 1)
                            v39 = v38 + 1;
                          if ((unint64_t)v176 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFE0)
                            v40 = 0x7FFFFFFFFFFFFFFLL;
                          else
                            v40 = v39;
                          if (v40)
                          {
                            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)&v176, v40);
                            v43 = v42;
                          }
                          else
                          {
                            v41 = 0;
                            v43 = 0;
                          }
                          CSCppSegmentRange::CSCppSegmentRange((CSCppSegmentRange *)&v41[32 * v38], v35, v36, v37, 0);
                          v46 = (char *)__p[0];
                          v45 = (char *)__p[1];
                          v47 = v44;
                          if (__p[1] != __p[0])
                          {
                            do
                            {
                              v48 = *((_OWORD *)v45 - 1);
                              *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
                              *((_OWORD *)v47 - 1) = v48;
                              v47 -= 32;
                              v45 -= 32;
                            }
                            while (v45 != v46);
                            v45 = v46;
                          }
                          v49 = &v41[32 * v43];
                          v28 = (CSCppSegmentRange *)(v44 + 32);
                          __p[0] = v47;
                          __p[1] = v44 + 32;
                          *(_QWORD *)&v176 = v49;
                          if (v45)
                            operator delete(v45);
                        }
                        else
                        {
                          CSCppSegmentRange::CSCppSegmentRange(v28, v35, v36, v37, 0);
                          v28 = (CSCppSegmentRange *)((char *)v28 + 32);
                        }
                        __p[1] = v28;
                      }
                    }
                  }
                  ++v27;
                }
                while (v27 != v29);
                v21 = -(uint64_t)*(int *)v19;
                v12 = v157;
                v5 = v158;
                a2 = v156;
              }
            }
          }
          v50 = (unsigned __int16 *)((char *)v19 + v21);
          v51 = *v50;
          if (v51 >= 0x13)
          {
            if (v50[9])
            {
              v52 = (int *)((char *)v19 + v50[9] + *(unsigned int *)((char *)v19 + v50[9]));
              v53 = (unsigned __int16 *)((char *)v52 - *v52);
              if (*v53 >= 5u && (v54 = v53[2]) != 0)
                v55 = *(_QWORD *)((char *)v52 + v54);
              else
                v55 = 0;
              v169 = v55;
            }
            if (v51 >= 0x15)
            {
              v56 = v50[10];
              if (v56)
              {
                v57 = (int *)((char *)v19 + v56 + *(unsigned int *)((char *)v19 + v56));
                v58 = (unsigned __int16 *)((char *)v57 - *v57);
                if (*v58 >= 5u && (v59 = v58[2]) != 0)
                  v60 = *(_QWORD *)((char *)v57 + v59);
                else
                  v60 = 0;
                v168 = v60;
              }
            }
          }
          v61 = (const char *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata(v19);
          v62 = v61;
          if (!v61)
            goto LABEL_124;
          v63 = (unsigned __int16 *)&v61[-*(int *)v61];
          v64 = *v63;
          v65 = "<unknown>";
          if (v64 >= 7)
            break;
LABEL_75:
          v171 = v65;
          if (v64 >= 0xD)
            goto LABEL_80;
LABEL_93:
          v81 = &v62[-*(int *)v62];
          if (*(unsigned __int16 *)v81 < 5u)
          {
            v82 = 0;
          }
          else
          {
            v82 = *((unsigned __int16 *)v81 + 2);
            if (v82)
              v82 += (uint64_t)&v62[*(unsigned int *)&v62[v82]];
          }
          CSUUIDStringToCFUUIDBytes(v82 + 4, &v180);
          v167 = 1;
          v83 = (unsigned __int16 *)((char *)v19 - *(int *)v19);
          if (*v83 >= 0xFu)
          {
            v84 = v83[7];
            if (v84)
              LOBYTE(v84) = *((_BYTE *)v19 + v84) != 0;
            if ((v84 & 1) != 0)
              goto LABEL_103;
          }
          if (v12)
          {
LABEL_103:
            v85 = 513;
            v167 = 513;
            if (v12 && !ArchitectureForName)
            {
              ArchitectureForName = 16777228;
              v85 = 513;
            }
          }
          else
          {
            v85 = 1;
          }
          v86 = v173 == v180.n128_u64[0] && v174 == v180.n128_u64[1];
          v87 = !v86;
          if (v86 || !v162)
          {
            if (!v87)
              v85 |= 0x10u;
            if (!v162)
              v85 |= 0x1000u;
            v167 = v85;
          }
          v165 = &v180;
          v164 = 0;
          std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,void>(&v165, &v164, &v169, &v168, &v167, &ArchitectureForName, &v171, v166);
          v88 = v166[0];
          v89 = *((_OWORD *)v166[0] + 2);
          *((_OWORD *)v166[0] + 2) = *(_OWORD *)__p;
          *(_OWORD *)__p = v89;
          v90 = *((_QWORD *)v88 + 6);
          *((_QWORD *)v88 + 6) = v176;
          *(_QWORD *)&v176 = v90;
          v91 = (FlatbufferSymbolOwnerData *)operator new();
          FlatbufferSymbolOwnerData::FlatbufferSymbolOwnerData(v91, v166[0], v19, a2);
          CSCppSymbolOwner::set_data(v166[0], v91);
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v172, (__int128 *)v166);
          v92 = (std::__shared_weak_count *)v166[1];
          if (v166[1])
          {
            v93 = (unint64_t *)((char *)v166[1] + 8);
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
LABEL_124:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (++v18 == v161)
            goto LABEL_129;
        }
        v66 = v63[3];
        if (v63[3])
          v66 += (uint64_t)&v61[*(unsigned int *)&v61[v66]];
        if (v64 < 0x13)
        {
          if (v64 < 0x11)
          {
            if (v66)
              goto LABEL_74;
LABEL_128:
            v65 = "<unknown>";
            goto LABEL_75;
          }
          v67 = 0;
        }
        else
        {
          v67 = v63[9];
          if (v63[9])
            v67 += (uint64_t)&v61[*(unsigned int *)&v61[v67]];
        }
        v68 = v63[8];
        if (v63[8])
          v68 += (uint64_t)&v61[*(unsigned int *)&v61[v68]];
        if (v66)
        {
LABEL_74:
          v65 = (const char *)(v66 + 4);
          goto LABEL_75;
        }
        if (v67)
        {
          v69 = (const char *)(v67 + 4);
LABEL_79:
          v171 = v69;
LABEL_80:
          v70 = v63[6];
          if (v63[6])
          {
            v71 = &v61[v70];
            v72 = &v61[v70 + *(unsigned int *)&v61[v70]];
            v73 = &v72[-*(int *)v72];
            if (*(unsigned __int16 *)v73 >= 7u && (v74 = *((unsigned __int16 *)v73 + 3)) != 0)
              v75 = *(unsigned int *)&v72[v74];
            else
              v75 = 0;
            v76 = &v71[*(unsigned int *)v71];
            v77 = &v76[-*(int *)v76];
            if (*(unsigned __int16 *)v77 >= 9u && (v78 = *((unsigned __int16 *)v77 + 4)) != 0)
              v79 = *(unsigned int *)&v76[v78];
            else
              v79 = 0;
            ArchitectureForName = v75 | (v79 << 32);
          }
          else if (v64 >= 0xF)
          {
            v80 = v63[7];
            if (v80)
              ArchitectureForName = CSArchitectureGetArchitectureForName(&v61[v80 + 4 + *(unsigned int *)&v61[v80]]);
          }
          goto LABEL_93;
        }
        if (v68)
        {
          v69 = (const char *)(v68 + 4);
          goto LABEL_79;
        }
        goto LABEL_128;
      }
    }
  }
LABEL_129:
  v95 = (CSCppFakeTask *)operator new();
  CSCppFakeTask::CSCppFakeTask(v95, v162, v162 == 0);
  v163 = v95;
  v96 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v172, (uint64_t *)&v163, v159, 0);
  v98 = v97;
  v99 = (uint64_t)v163;
  v163 = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = v98 & 0xFFFFFFFFFFFFFFFCLL;
  if (v12)
  {
    v101 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v101 >= 0x15u && (v102 = v101[10]) != 0)
      v103 = *(_QWORD *)((char *)v12 + v102);
    else
      v103 = -1;
    v104 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v105 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v105 >= 5u)
    {
      v104 = v105[2];
      if (v105[2])
        v104 += (uint64_t)v12 + *(unsigned int *)((char *)v12 + v104);
    }
    CSUUIDStringToCFUUIDBytes(v104 + 4, __p);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v100 + 56) + 88))(*(_QWORD *)(v100 + 56), v103);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v100 + 56) + 80))(*(_QWORD *)(v100 + 56), __p);
    goto LABEL_140;
  }
  if (!v100)
    goto LABEL_191;
  v137 = *(_BYTE **)(v100 + 56);
  PrimarySharedCacheInFlatbufferSymbolicator = _findPrimarySharedCacheInFlatbufferSymbolicator(v5);
  AOTSharedCacheInFlatbufferSymbolicator = (uint64_t)_findAOTSharedCacheInFlatbufferSymbolicator((int *)v5);
  __p[0] = 0;
  __p[1] = 0;
  v180 = 0uLL;
  if (!PrimarySharedCacheInFlatbufferSymbolicator)
  {
    v142 = 0;
    goto LABEL_207;
  }
  v140 = (unsigned __int16 *)(PrimarySharedCacheInFlatbufferSymbolicator
                            - *(int *)PrimarySharedCacheInFlatbufferSymbolicator);
  if (*v140 >= 9u && (v141 = v140[4]) != 0)
    v142 = *(_QWORD *)(PrimarySharedCacheInFlatbufferSymbolicator + v141);
  else
    v142 = -1;
  v145 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata((FlatbufferSymbols::SymbolOwner *)PrimarySharedCacheInFlatbufferSymbolicator);
  v146 = (unsigned __int16 *)((char *)v145 - *v145);
  v147 = *v146;
  if (v147 >= 0x15)
  {
    if (v146[10])
      PrimarySharedCacheInFlatbufferSymbolicator = *(_QWORD *)((char *)v145 + v146[10]);
    else
      PrimarySharedCacheInFlatbufferSymbolicator = -1;
LABEL_204:
    v148 = v146[2];
    if (v148)
      v148 += (uint64_t)v145 + *(unsigned int *)((char *)v145 + v148);
    goto LABEL_206;
  }
  PrimarySharedCacheInFlatbufferSymbolicator = -1;
  if (v147 >= 5)
    goto LABEL_204;
  v148 = 0;
LABEL_206:
  CSUUIDStringToCFUUIDBytes(v148 + 4, __p);
LABEL_207:
  if (!AOTSharedCacheInFlatbufferSymbolicator)
  {
    v151 = 0;
    goto LABEL_222;
  }
  v149 = (unsigned __int16 *)(AOTSharedCacheInFlatbufferSymbolicator - *(int *)AOTSharedCacheInFlatbufferSymbolicator);
  if (*v149 >= 9u && (v150 = v149[4]) != 0)
    v151 = *(_QWORD *)(AOTSharedCacheInFlatbufferSymbolicator + v150);
  else
    v151 = -1;
  v152 = (int *)FlatbufferSymbols::SymbolOwner::metadata_as_MachoMetadata((FlatbufferSymbols::SymbolOwner *)AOTSharedCacheInFlatbufferSymbolicator);
  v153 = (unsigned __int16 *)((char *)v152 - *v152);
  v154 = *v153;
  if (v154 >= 0x15)
  {
    if (v153[10])
      AOTSharedCacheInFlatbufferSymbolicator = *(_QWORD *)((char *)v152 + v153[10]);
    else
      AOTSharedCacheInFlatbufferSymbolicator = -1;
LABEL_219:
    v155 = v153[2];
    if (v155)
      v155 += (uint64_t)v152 + *(unsigned int *)((char *)v152 + v155);
    goto LABEL_221;
  }
  AOTSharedCacheInFlatbufferSymbolicator = -1;
  if (v154 >= 5)
    goto LABEL_219;
  v155 = 0;
LABEL_221:
  CSUUIDStringToCFUUIDBytes(v155 + 4, &v180);
LABEL_222:
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v137 + 80))(v137, __p);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v137 + 88))(v137, v142 + PrimarySharedCacheInFlatbufferSymbolicator);
  if (AOTSharedCacheInFlatbufferSymbolicator)
  {
    v137[16] = 1;
    (*(void (**)(_BYTE *, __n128 *))(*(_QWORD *)v137 + 96))(v137, &v180);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v137 + 104))(v137, v151 + AOTSharedCacheInFlatbufferSymbolicator);
    CSCppSymbolicator::initialize_aot_symbolication_session((CSCppSymbolicator *)(v98 & 0xFFFFFFFFFFFFFFFCLL));
  }
LABEL_140:
  if (v160)
  {
    if (v100)
    {
      v180 = 0uLL;
      v181[0] = 0;
      v106 = (unsigned __int16 *)((char *)v160 - *v160);
      if (*v106 >= 0xDu)
      {
        v107 = v106[6];
        if (v107)
        {
          v108 = (unsigned int *)((char *)v160 + v107);
          v109 = *v108;
          v111 = (unsigned int *)((char *)v108 + v109 + 4);
          v110 = *(unsigned int *)((char *)v108 + v109);
          if ((_DWORD)v110)
          {
            v112 = 0;
            v113 = &v111[v110];
            while (1)
            {
              v114 = (int *)((char *)v111 + *v111);
              v115 = (unsigned __int16 *)((char *)v114 - *v114);
              v116 = *v115;
              if (v116 < 0xB)
              {
                v117 = 0;
                v118 = 0;
                v119 = 0;
                v120 = 0;
                v179 = 0;
                if (v116 < 5)
                  goto LABEL_165;
              }
              else
              {
                v117 = v115[5] ? (int *)((char *)v114 + v115[5] + *(unsigned int *)((char *)v114 + v115[5])) : 0;
                v179 = 0;
              }
              v119 = v115[2] ? *(_QWORD *)((char *)v114 + v115[2]) : 0;
              if (v116 < 7)
                break;
              if (v115[3])
                v118 = *(_QWORD *)((char *)v114 + v115[3]);
              else
                v118 = 0;
              if (v116 < 9)
                goto LABEL_164;
              v121 = v115[4];
              if (!v121)
                goto LABEL_164;
              v120 = *(_QWORD *)((char *)v114 + v121);
LABEL_165:
              v177 = 0u;
              v178 = 0u;
              *(_OWORD *)__p = 0u;
              v176 = 0u;
              v179 = *v117;
              memcpy(__p, v117 + 1, v179);
              if (v112 >= v181[0])
              {
                v125 = (void *)v180.n128_u64[0];
                v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - v180.n128_u64[0]) >> 5);
                v127 = v126 + 1;
                if (v126 + 1 > 0x2AAAAAAAAAAAAAALL)
                  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v181[0] - v180.n128_u64[0]) >> 5) > v127)
                  v127 = 0x5555555555555556 * ((uint64_t)(v181[0] - v180.n128_u64[0]) >> 5);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v181[0] - v180.n128_u64[0]) >> 5) >= 0x155555555555555)
                  v128 = 0x2AAAAAAAAAAAAAALL;
                else
                  v128 = v127;
                if (v128)
                {
                  v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)v181, v128);
                  v112 = v180.n128_u64[1];
                  v125 = (void *)v180.n128_u64[0];
                }
                else
                {
                  v129 = 0;
                }
                v130 = &v129[96 * v126];
                *(_QWORD *)v130 = v119;
                *((_QWORD *)v130 + 1) = v118;
                *((_QWORD *)v130 + 2) = v120;
                *(_OWORD *)(v130 + 40) = v176;
                *(_OWORD *)(v130 + 56) = v177;
                *(_OWORD *)(v130 + 72) = v178;
                *((_QWORD *)v130 + 11) = v179;
                *(_OWORD *)(v130 + 24) = *(_OWORD *)__p;
                if ((void *)v112 == v125)
                {
                  v136 = (unint64_t)&v129[96 * v126];
                }
                else
                {
                  v131 = &v129[96 * v126];
                  do
                  {
                    v132 = *(_OWORD *)(v112 - 80);
                    *((_OWORD *)v131 - 6) = *(_OWORD *)(v112 - 96);
                    *((_OWORD *)v131 - 5) = v132;
                    v133 = *(_OWORD *)(v112 - 64);
                    v134 = *(_OWORD *)(v112 - 48);
                    v135 = *(_OWORD *)(v112 - 16);
                    v136 = (unint64_t)(v131 - 96);
                    *((_OWORD *)v131 - 2) = *(_OWORD *)(v112 - 32);
                    *((_OWORD *)v131 - 1) = v135;
                    *((_OWORD *)v131 - 4) = v133;
                    *((_OWORD *)v131 - 3) = v134;
                    v112 -= 96;
                    v131 -= 96;
                  }
                  while ((void *)v112 != v125);
                }
                v112 = (unint64_t)(v130 + 96);
                v180.n128_u64[0] = v136;
                v180.n128_u64[1] = (unint64_t)(v130 + 96);
                v181[0] = &v129[96 * v128];
                if (v125)
                  operator delete(v125);
              }
              else
              {
                *(_QWORD *)v112 = v119;
                *(_QWORD *)(v112 + 8) = v118;
                *(_QWORD *)(v112 + 16) = v120;
                v122 = v179;
                v123 = v178;
                *(_OWORD *)(v112 + 56) = v177;
                v124 = *(_OWORD *)__p;
                *(_OWORD *)(v112 + 40) = v176;
                *(_OWORD *)(v112 + 72) = v123;
                *(_QWORD *)(v112 + 88) = v122;
                *(_OWORD *)(v112 + 24) = v124;
                v112 += 96;
              }
              v180.n128_u64[1] = v112;
              if (++v111 == v113)
                goto LABEL_184;
            }
            v118 = 0;
LABEL_164:
            v120 = 0;
            goto LABEL_165;
          }
LABEL_184:
          CSCppSymbolicator::set_aot_image_infos(v100, &v180);
          if (v180.n128_u64[0])
          {
            v180.n128_u64[1] = v180.n128_u64[0];
            operator delete((void *)v180.n128_u64[0]);
          }
        }
      }
    }
  }
LABEL_191:
  __p[0] = v172;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v96;
}

void sub_1B416E60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(_QWORD *)(v27 - 112) = v29;
    operator delete(v29);
  }
  a20 = (void **)&a27;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t FlatbufferSymbols::Symbolicator::metadata_as_DyldSharedCacheMetadata(FlatbufferSymbols::Symbolicator *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *((_BYTE *)this + v1[2]) == 3) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

const __CFData *_createCSSymbolicatorFromFlatbufferSignature<__CFData const*>(const __CFData *result, unsigned int a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  const UInt8 *v5;
  const UInt8 *v6;
  uint64_t v7;
  const UInt8 *v8;

  if (result)
  {
    v3 = result;
    BytePtr = CFDataGetBytePtr(result);
    v5 = &BytePtr[*(unsigned int *)BytePtr];
    v6 = &v5[-*(int *)v5];
    if (*(unsigned __int16 *)v6 >= 5u && (v7 = *((unsigned __int16 *)v6 + 2)) != 0)
    {
      v8 = &v5[v7 + *(unsigned int *)&v5[v7]];
      return (const __CFData *)_createCSSymbolicatorFromFlatbuffer<__CFData const*>((FlatbufferSymbols::SymbolOwner *)&v8[*((unsigned int *)v8 + 1) + 4], v3, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFData *_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRange<__CFData const*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFData *Mutable;
  const void *v6;
  uint64_t v7;
  uint64_t *v8;
  UInt8 *MutableBytePtr;
  void *__p;
  void *v12;
  uint64_t v13;
  const void *v14;
  CFIndex length;
  char v16;
  _QWORD v17[9];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 (*v21)(uint64_t, uint64_t);
  void (*v22)(_QWORD *);
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int16 v31;
  _QWORD v32[2];
  __int128 v33;
  void *v34[5];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  __n128 (*v38)(_QWORD *, uint64_t);
  void (*v39)(uint64_t);
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[4];

  if ((unint64_t)(a1 - 16385) < 0xFFFFFFFFFFFFC000 || a4 == 0)
    return 0;
  v43[0] = 0;
  v43[1] = v43;
  v43[2] = 0x2000000000;
  v43[3] = a1;
  v35 = 0;
  v36 = &v35;
  v37 = 0x4002000000;
  v38 = __Block_byref_object_copy__10;
  v39 = __Block_byref_object_dispose__11;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0xD002000000;
  v21 = __Block_byref_object_copy__12;
  v22 = __Block_byref_object_dispose__13;
  v23 = 0;
  v24 = 0;
  v25 = xmmword_1B41ACEA0;
  v26 = 0;
  v27 = 0;
  v28 = 0u;
  v29 = 0u;
  v30 = 1;
  v31 = 256;
  v34[4] = 0;
  v32[0] = 0;
  *(_QWORD *)((char *)v32 + 7) = 0;
  v33 = 0u;
  memset(v34, 0, 27);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v17[2] = ___Z84_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRangeIPK8__CFDataET_myyU13block_pointerFvU13block_pointerFv10_CSTypeRefEE_block_invoke;
  v17[3] = &unk_1E67798F8;
  v17[4] = v43;
  v17[5] = &v35;
  v17[6] = &v18;
  v17[7] = a2;
  v17[8] = a3;
  (*(void (**)(uint64_t, _QWORD *))(a4 + 16))(a4, v17);
  v6 = (const void *)v36[5];
  v7 = v36[6];
  if ((const void *)v7 == v6)
    goto LABEL_12;
  v8 = v19;
  v12 = 0;
  v13 = 0;
  __p = 0;
  std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>::__init_with_size[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 2);
  FlatbufferEncoder::encodeSymbolicatorOffsets((uint64_t)(v8 + 5), &__p, (uint64_t)&v14);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (!v16)
  {
LABEL_12:
    Mutable = 0;
  }
  else
  {
    Mutable = CFDataCreateMutable(0, 0);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v14, length);
  }
  _Block_object_dispose(&v18, 8);
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v23);
  _Block_object_dispose(&v35, 8);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  _Block_object_dispose(v43, 8);
  return Mutable;
}

void sub_1B416E9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  FlatbufferEncoder *v25;
  uint64_t v26;
  void *v28;

  _Block_object_dispose(&a25, 8);
  FlatbufferEncoder::~FlatbufferEncoder(v25);
  _Block_object_dispose((const void *)(v26 - 128), 8);
  v28 = *(void **)(v26 - 88);
  if (v28)
  {
    *(_QWORD *)(v26 - 80) = v28;
    operator delete(v28);
  }
  _Block_object_dispose((const void *)(v26 - 64), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__10(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

__n128 __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  flatbuffers::FlatBufferBuilder::FlatBufferBuilder(a1 + 40, (flatbuffers::FlatBufferBuilder *)(a2 + 40));
  v4 = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = v4;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  result = *(__n128 *)(a2 + 192);
  *(__n128 *)(a1 + 192) = result;
  return result;
}

void __Block_byref_object_dispose__13(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(a1 + 5));
}

void FlatbufferEncoder::~FlatbufferEncoder(FlatbufferEncoder *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(this);
}

void ___Z84_CSSymbolicatorCreateFlatbufferSignatureForSymbolicatorsWithBlockAtObservedTimeRangeIPK8__CFDataET_myyU13block_pointerFvU13block_pointerFv10_CSTypeRefEE_block_invoke(_QWORD *a1, char a2, uint64_t a3)
{
  int v5;
  int v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) != (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48)
                                                               - *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)) >> 2
    && (a2 & 7 | (8 * (a3 & 3))) != 0)
  {
    v5 = FlatbufferEncoder::encodeCSSymbolicatorIntoOffset(*(_QWORD *)(a1[6] + 8) + 40, a2, a3, a1[7], a1[8]);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD **)(a1[5] + 8);
      v8 = (char *)v7[6];
      v9 = v7[7];
      if ((unint64_t)v8 >= v9)
      {
        v11 = (char *)v7[5];
        v12 = (v8 - v11) >> 2;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
        v13 = v9 - (_QWORD)v11;
        v14 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
        if (v14 <= v12 + 1)
          v14 = v12 + 1;
        if (v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<FlatbufferSymbols::InlineSymbol>>>((uint64_t)(v7 + 7), v15);
          v11 = (char *)v7[5];
          v8 = (char *)v7[6];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v12];
        v18 = &v16[4 * v15];
        *(_DWORD *)v17 = v6;
        v10 = v17 + 4;
        while (v8 != v11)
        {
          v19 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        v7[5] = v17;
        v7[6] = v10;
        v7[7] = v18;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_DWORD *)v8 = v5;
        v10 = v8 + 4;
      }
      v7[6] = v10;
    }
  }
}

uint64_t _CSSymbolicatorForeachFlatbufferSymbolicatorInSignature<__CFData const*>(const __CFData *a1, unsigned int a2, uint64_t a3)
{
  return _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>(a1, a2, a3, 0);
}

uint64_t _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>(const __CFData *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  const UInt8 *BytePtr;
  const UInt8 *v9;
  const UInt8 *v10;
  uint64_t v11;
  const UInt8 *v12;
  uint64_t v13;
  uint64_t v14;
  char *i;
  uint64_t v16;
  unsigned int *CSSymbolicatorFrom;
  uint64_t v18;
  uint64_t v19;

  if (a1)
  {
    if (CSCppDetermineSignatureType<__CFData const*>(a1) == 2)
    {
      BytePtr = CFDataGetBytePtr(a1);
      v9 = &BytePtr[*(unsigned int *)BytePtr];
      v10 = &v9[-*(int *)v9];
      if (*(unsigned __int16 *)v10 >= 5u)
      {
        v11 = *((unsigned __int16 *)v10 + 2);
        if (v11)
        {
          v12 = &v9[v11 + *(unsigned int *)&v9[v11]];
          if (*(_DWORD *)v12)
          {
            v13 = 0;
            v14 = 0;
            for (i = (char *)(v12 + 4); ; i += 4)
            {
              v16 = *(unsigned int *)i;
              if (a4)
                break;
              CSSymbolicatorFrom = (unsigned int *)_createCSSymbolicatorFromFlatbuffer<__CFData const*>((FlatbufferSymbols::SymbolOwner *)&i[v16], a1, a2);
              v19 = v18;
              if (!CSIsNull((char)CSSymbolicatorFrom, v18))
              {
                if (a3)
                  (*(void (**)(uint64_t, unsigned int *, uint64_t))(a3 + 16))(a3, CSSymbolicatorFrom, v19);
                CSRelease(CSSymbolicatorFrom, v19);
                goto LABEL_13;
              }
LABEL_14:
              if (++v13 >= (unint64_t)*(unsigned int *)v12)
                return v14;
            }
            (*(void (**)(uint64_t, char *))(a4 + 16))(a4, &i[v16]);
LABEL_13:
            ++v14;
            goto LABEL_14;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t _CSSymbolicatorForeachRawFlatbufferSymbolicatorInSignature<__CFData const*>(const __CFData *a1, unsigned int a2, uint64_t a3)
{
  return _CSSymbolicatorForeachFlatbufferSymbolicatorInSignatureHelper<__CFData const*>(a1, a2, 0, a3);
}

const __CFData *_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotification<__CFData const*>(const __CFData *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const __CFData *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD **v16;
  _QWORD *v17[2];

  v8 = CSSymbolicatorCreateWithSignatureFlagsAndNotification(a1, a2, a3, a6);
  v10 = v9;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x4002000000;
  v15[3] = __Block_byref_object_copy__15_0;
  v15[4] = __Block_byref_object_dispose__16_0;
  v17[1] = 0;
  v11 = MEMORY[0x1E0C809B0];
  v16 = v17;
  v17[0] = 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke;
  v14[3] = &unk_1E6779920;
  v14[4] = v15;
  CSSymbolicatorForeachSegmentAtTime((char)v8, v9, 0x8000000000000001, (uint64_t)v14);
  v13[0] = v11;
  v13[1] = 0x40000000;
  v13[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_2;
  v13[3] = &unk_1E6779998;
  v13[5] = a4;
  v13[6] = a5;
  v13[4] = v15;
  CSSymbolicatorApplyMutableContextBlock((char)v8, v10, (uint64_t)v13);
  _Block_object_dispose(v15, 8);
  std::__tree<TRange<Pointer64>>::destroy((uint64_t)&v16, v17[0]);
  return v8;
}

void sub_1B416EEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_QWORD *a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  std::__tree<TRange<Pointer64>>::destroy(v27, a27);
  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__15_0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__16_0(uint64_t a1)
{
  std::__tree<TRange<Pointer64>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
}

uint64_t ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_3;
  v5[3] = &unk_1E6779970;
  v3 = a1[5];
  v2 = a1[6];
  v5[4] = a1[4];
  v5[5] = a2;
  return CSSymbolicatorForeachSymbolOwnerAtTime(v3, v2, 0x8000000000000001, (uint64_t)v5);
}

void ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_3(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_4;
  v6[3] = &unk_1E6779948;
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = &v7;
  CSSymbolOwnerForeachSegment(a2, a3, (uint64_t)v6);
  if (!*((_BYTE *)v8 + 24))
    CSSymbolOwnerAddInContext(a2, a3, *(char ***)(a1 + 40));
  _Block_object_dispose(&v7, 8);
}

void sub_1B416F0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t ___Z76_CSSymbolicatorCreateWithSignatureAdditionalSymbolOwnersFlagsAndNotificationIPK8__CFDataE10_CSTypeRefT_jjS3_U13block_pointerFvj19_CSNotificationDataE_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  result = CSRegionGetRange(a2, a3);
  v6 = result;
  v7 = v5;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = (_QWORD *)(v8 + 48);
  v10 = *(_QWORD **)(v8 + 48);
  if (v10)
  {
    v11 = (_QWORD *)(v8 + 48);
    do
    {
      v12 = v10[4];
      v13 = v12 >= result;
      if (v12 >= result)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 != v9)
    {
      result = CSRangeIntersectsRange(result, v5, v11[5], v11[6]);
      if ((result & 1) != 0)
      {
LABEL_19:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        return result;
      }
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v9 = v11;
    }
  }
  if (v9 != *(_QWORD **)(v8 + 40))
  {
    v15 = (_QWORD *)*v9;
    if (*v9)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)v15[1];
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v9[2];
        v17 = *v16 == (_QWORD)v9;
        v9 = v16;
      }
      while (v17);
    }
    result = CSRangeIntersectsRange(v6, v7, v16[5], v16[6]);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  return result;
}

uint64_t _createCSSymbolicatorFromCustomSignature<__CFData const*>(const __CFData *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CSCppFakeTask *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  TMMapArchive *v24;
  _QWORD *v26;
  _QWORD *exception;
  _QWORD *v28;
  CSCppFakeTask *v29;
  __int128 v30;
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const UInt8 *v38;
  _QWORD v39[4];
  __int128 v40;
  uint64_t v41;
  __int128 v42[16];
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;

  v45 = 0;
  v46 = 0;
  v44 = 0;
  v43 = 0;
  if ((CSCppSignatureDecodeSymbolicator<__CFData const*>(a1, &v43, &v44, (_DWORD *)&v46 + 1, &v46, (_DWORD *)&v45 + 1, &v45) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Error decoding symbolicator from signature", 42);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v42 + 8, &v40);
    Exception::Exception(v39, &v40);
    exception = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(exception, (uint64_t)v39);
  }
  if (v44 != 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ERROR, unhandled signature version", 34);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v42 + 8, &v40);
    Exception::Exception(v39, &v40);
    v28 = __cxa_allocate_exception(0x20uLL);
    Exception::Exception(v28, (uint64_t)v39);
  }
  if ((((a2 & 0x1000) == 0) & ((unsigned __int16)(a3 & 0x1000) >> 12)) != 0)
    v10 = (HIDWORD(v45) & a2 | a3) & 0xFFFFEFFF;
  else
    v10 = HIDWORD(v45) & a2 | a3;
  HIDWORD(v45) = v10;
  v40 = 0uLL;
  v41 = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve((char **)&v40, v45);
  if ((_DWORD)v45)
  {
    v11 = 0;
    do
    {
      v37 = 0;
      v38 = 0;
      v35 = 0;
      v36 = 0;
      v33 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v32 = 0;
      if (!CSCppSignatureDecodeSymbolOwner<__CFData const*>(a1, &v43, &v38, (_DWORD *)&v37 + 1, &v37, &v36, &v35, &v34, &v33, __p))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Error decoding symbol owner from signature", 42);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v42 + 8, &v30);
        Exception::Exception(v39, &v30);
        v26 = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(v26, (uint64_t)v39);
      }
      v39[0] = v38;
      std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>(v39, (unsigned int *)&v37 + 1, &v36, &v35, (unsigned int *)&v37, &v34, &v33, v42);
      v12 = *(_QWORD *)&v42[0];
      v13 = *(_OWORD *)(*(_QWORD *)&v42[0] + 32);
      *(_OWORD *)(*(_QWORD *)&v42[0] + 32) = *(_OWORD *)__p;
      *(_OWORD *)__p = v13;
      v14 = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 48) = v32;
      v32 = v14;
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v40, v42);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v42[0] + 1);
      if (*((_QWORD *)&v42[0] + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v42[0] + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v11;
    }
    while (v11 < v45);
  }
  v18 = (CSCppFakeTask *)operator new();
  CSCppFakeTask::CSCppFakeTask(v18, SHIDWORD(v46), (_DWORD)v46 != 0);
  v29 = v18;
  v19 = CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(&v40, (uint64_t *)&v29, HIDWORD(v45), a4);
  v21 = v20;
  v22 = (uint64_t)v29;
  v29 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v21 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v45 & 0x200000000) != 0)
  {
    *(_BYTE *)(v23 + 88) = *(_BYTE *)((v21 & 0xFFFFFFFFFFFFFFFCLL) + 88) | 1;
    if (!*(_QWORD *)(v23 + 80))
      *(_QWORD *)(v23 + 80) = a5;
  }
  else if ((*(_BYTE *)((v21 & 0xFFFFFFFFFFFFFFFCLL) + 88) & 1) == 0)
  {
    v24 = 0;
    goto LABEL_27;
  }
  if (*(_QWORD *)(v23 + 80))
    v24 = *(TMMapArchive **)(v23 + 80);
  else
    v24 = (TMMapArchive *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
LABEL_27:
  _decodeMMapArchivesFromSignature<__CFData const*>(a1, &v43, v24, a3, (uint64_t)v42);
  CSCppSignatureDecodeOptionalData<__CFData const*>(a1, &v43, (CSCppSymbolicator *)(v21 & 0xFFFFFFFFFFFFFFFCLL));
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(v21 & 0xFFFFFFFFFFFFFFFCLL), v39);
  _assignArchivesToSymbolOwners(v42, (TMMapArchive *)v39);
  __p[0] = v39;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v42);
  *(_QWORD *)&v42[0] = &v40;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
  return v19;
}

void sub_1B416F5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38)
{
  Exception::~Exception(&a28);
  if (a37 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

int32x4_t *_decodeMMapArchivesFromSignature<__CFData const*>@<X0>(const __CFData *a1@<X0>, _QWORD *a2@<X1>, TMMapArchive *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  int v9;
  int32x4_t *result;
  uint64_t v11;
  BOOL v12;
  _OWORD *v13;

  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  v12 = 0;
  if (a3)
    v9 = 0;
  else
    v9 = (a4 >> 12) & 1;
  while (1)
  {
    result = CSCppSignatureDecodeMMapArchive<__CFData const*>(a1, a2, &v12);
    if (!result)
      break;
    if (v12)
      v11 = (uint64_t)CSCppMMapArchiveCache::add_archive((unsigned int *)result, 1, a3, 0, 0);
    else
      v11 = CSCppMMapArchiveCache::add_signature_archive<__CFData const*>((uint64_t)result, a1, a3, v9);
    v13 = (_OWORD *)(v11 + 52);
    std::__hash_table<std::__hash_value_type<UUID,TMMapArchive *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,TMMapArchive *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(a5, (_QWORD *)(v11 + 52), (uint64_t)&std::piecewise_construct, &v13)[4] = v11;
  }
  return result;
}

void sub_1B416F83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

const __CFData *create_symbolicator_signature_with_symbol_owners<__CFData const*>(uint64_t a1, uint64_t **a2, char a3)
{
  const __CFData *Mutable;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  __n128 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD v20[5];
  BOOL v21;

  Mutable = CFDataCreateMutable(0, 0);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) + 12);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v10 = CSCppSymbolicator::flags((os_unfair_lock_s *)a1);
  v11.n128_f64[0] = CSCppSignatureEncodeSymbolicator<__CFData *>(Mutable, v8, v9, v10, (unint64_t)((char *)a2[1] - (char *)*a2) >> 4);
  v13 = *a2;
  v12 = a2[1];
  while (v13 != v12)
  {
    v14 = *v13;
    v13 += 2;
    CSCppSignatureEncodeSymbolOwner<__CFData *>(Mutable, (_OWORD *)(v14 + 16), *(_DWORD *)(v14 + 104), *(_DWORD *)(v14 + 108), *(_QWORD *)(v14 + 88), *(_QWORD *)(v14 + 96), *(_QWORD *)(v14 + 112), *(const char **)(v14 + 120), (_QWORD *)(v14 + 32), 0);
  }
  if ((a3 & 1) != 0)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 0x40000000;
    v20[2] = ___Z31CSCppAddMMapArchivesToSignatureIP8__CFDataEv10_CSTypeRefT_b_block_invoke;
    v20[3] = &__block_descriptor_tmp_7_3;
    v20[4] = Mutable;
    v21 = (a3 & 4) != 0;
    CSCppForEachMMapArchiveInSymbolicator(2, a1, (uint64_t)v20);
  }
  v15 = (__int128 *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v7 + 48))(v7, v11);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
  v17 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  CSCppSignatureEncodeOptionalData<__CFData *>(Mutable, 4, v15, v16, v17, v18, 2, a1);
  return Mutable;
}

unsigned int *_CSSymbolicatorCreateWithSingleSymbolOwnerSignaturesAndFlags<__CFData const*>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const __CFData *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CSCppFakeTask *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  TMMapArchive *v29;
  _QWORD v31[3];
  __int128 v32[2];
  uint64_t v33;
  _QWORD v34[3];
  CSCppFakeTask *v35;
  void *__p;
  char *v37;
  char *v38;
  char *v39[3];
  void **v40;

  memset(v39, 0, sizeof(v39));
  __p = 0;
  v37 = 0;
  v38 = 0;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(v39, a2);
  std::vector<unsigned long long>::reserve(&__p, a2);
  if (a2)
  {
    v6 = 0;
    do
    {
      v7 = *(const __CFData **)(a1 + 8 * v6);
      v34[0] = 0;
      _CSSymbolOwnerCreateUnmanagedWithSingleSymbolOwnerSignature<__CFData const*>(v7, v34, v32);
      if (*(_QWORD *)&v32[0])
      {
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](v39, v32);
        v8 = v37;
        if (v37 >= v38)
        {
          v10 = (char *)__p;
          v11 = (v37 - (_BYTE *)__p) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v13 = v38 - (_BYTE *)__p;
          if ((v38 - (_BYTE *)__p) >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v38, v14);
            v10 = (char *)__p;
            v8 = v37;
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v34[0];
          v9 = v16 + 8;
          while (v8 != v10)
          {
            v17 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          __p = v16;
          v37 = v9;
          v38 = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v37 = v34[0];
          v9 = v8 + 8;
        }
        v37 = v9;
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v32[0] + 1);
      if (*((_QWORD *)&v32[0] + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v32[0] + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      ++v6;
    }
    while (v6 != a2);
  }
  v21 = (CSCppFakeTask *)operator new();
  CSCppFakeTask::CSCppFakeTask(v21, -1, 0);
  v35 = v21;
  v22 = (unsigned int *)CSSymbolicatorCreateWithSymbolOwnersAndCSCppTask(v39, (uint64_t *)&v35, a3 | 2, 0);
  v24 = v23;
  v25 = (uint64_t)v35;
  v35 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
  *(_BYTE *)((v24 & 0xFFFFFFFFFFFFFFFCLL) + 88) |= 1u;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(v24 & 0xFFFFFFFFFFFFFFFCLL), v34);
  if (a2 == (uint64_t)(v34[1] - v34[0]) >> 4)
  {
    if (a2)
    {
      v27 = 0;
      v28 = 0;
      do
      {
        v33 = 0;
        v33 = *((_QWORD *)__p + v28);
        if (v33)
        {
          if ((*(_BYTE *)(v26 + 88) & 1) != 0)
          {
            if (*(_QWORD *)(v26 + 80))
              v29 = *(TMMapArchive **)(v26 + 80);
            else
              v29 = (TMMapArchive *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
          }
          else
          {
            v29 = 0;
          }
          _decodeMMapArchivesFromSignature<__CFData const*>(*(const __CFData **)(a1 + 8 * v28), &v33, v29, a3, (uint64_t)v32);
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::vector(v31, 1uLL, (_QWORD *)(v34[0] + v27));
          _assignArchivesToSymbolOwners(v32, (TMMapArchive *)v31);
          v40 = (void **)v31;
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v40);
          std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v32);
        }
        ++v28;
        v27 += 16;
      }
      while (a2 != v28);
    }
  }
  else
  {
    CSRelease(v22, v24);
    v22 = 0;
  }
  *(_QWORD *)&v32[0] = v34;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  if (__p)
  {
    v37 = (char *)__p;
    operator delete(__p);
  }
  *(_QWORD *)&v32[0] = v39;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  return v22;
}

void sub_1B416FD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;

  a12 = &a18;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  a12 = (char *)(v23 - 112);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void _CSSymbolOwnerCreateUnmanagedWithSingleSymbolOwnerSignature<__CFData const*>(const __CFData *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const UInt8 *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p[2];
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const UInt8 *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  if (a1
    && (v27 = 0,
        v26 = 0,
        v25 = 0,
        v24 = 0,
        (CSCppSignatureDecodeSymbolicator<__CFData const*>(a1, &v24, &v25, (_DWORD *)&v27 + 1, &v27, (_DWORD *)&v26 + 1, &v26) & 1) != 0))
  {
    v22 = 0;
    v23 = 0;
    v21 = 0;
    v20 = 0;
    v18 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    if ((CSCppSignatureDecodeSymbolOwner<__CFData const*>(a1, &v24, &v23, (_DWORD *)&v22 + 1, &v22, &v21, &v20, &v19, &v18, __p) & 1) != 0)
    {
      v13 = v23;
      std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>(&v13, (unsigned int *)&v22 + 1, &v21, &v20, (unsigned int *)&v22, &v19, &v18, &v14);
      v6 = v14;
      if (v14)
      {
        v7 = *(_OWORD *)(v14 + 32);
        *(_OWORD *)(v14 + 32) = *(_OWORD *)__p;
        *(_OWORD *)__p = v7;
        v8 = *(_QWORD *)(v6 + 48);
        *(_QWORD *)(v6 + 48) = v17;
        v17 = v8;
        if (a2)
          *a2 = v24;
        v9 = v15;
        *a3 = v6;
        a3[1] = v9;
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
        v10 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1B416FF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFData *_CSSymbolicatorCreateNonFaultingWithSignatureAndGroupKey<__CFData const*>(const __CFData *a1, uint64_t a2)
{
  return _CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(a1, 0, 0x80742u, 0, a2);
}

const __CFData *_CSSymbolicatorCreateWithSignatureFlagsAndNotification<__CFData const*>(const __CFData *result, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  const __CFData *v9;
  int v10;
  _QWORD *exception;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  if (result)
  {
    v9 = result;
    v10 = CSCppDetermineSignatureType<__CFData const*>(result);
    if (v10 == 2)
    {
      return _createCSSymbolicatorFromFlatbufferSignature<__CFData const*>(v9, a3);
    }
    else
    {
      if (v10 != 1)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Unknown symbolicator signature type.", 36);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15, &v13);
        Exception::Exception(v12, &v13);
        exception = __cxa_allocate_exception(0x20uLL);
        Exception::Exception(exception, (uint64_t)v12);
      }
      return (const __CFData *)_createCSSymbolicatorFromCustomSignature<__CFData const*>(v9, a2, a3, a4, a5);
    }
  }
  return result;
}

void sub_1B417008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  Exception::~Exception((std::exception *)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B4170008);
  }
  _Unwind_Resume(a1);
}

const __CFData *_CSSymbolicatorCreateSignatureElidingSomeSymbolOwnersWithPredicate<__CFData const*>(char a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  __int128 *v7;
  void **v8;
  const __CFData *symbolicator_signature_with_symbol;
  __int128 v11;
  uint64_t v12;
  void **v13[3];
  __int128 v14;
  uint64_t v15;
  void ***v16;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v14 = 0uLL;
  v15 = 0;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), v13);
  v7 = (__int128 *)v13[0];
  v8 = v13[1];
  while (v7 != (__int128 *)v8)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, 3, *(_QWORD *)v7) & 1) == 0)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100]((char **)&v14, v7);
    ++v7;
  }
  v16 = v13;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  v11 = v14;
  v12 = v15;
  v14 = 0uLL;
  v15 = 0;
  symbolicator_signature_with_symbol = create_symbolicator_signature_with_symbol_owners<__CFData const*>(v6, (uint64_t **)&v11, a3);
  v13[0] = (void **)&v11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v14;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](v13);
  return symbolicator_signature_with_symbol;
}

void sub_1B4170220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a12);
  *(_QWORD *)(v15 - 56) = &a15;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  _Unwind_Resume(a1);
}

const __CFData *_CSSymbolicatorCreateSignatureElidingSomeSymbolOwners<__CFData const*>(char a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  unint64_t v8;
  const __CFData *symbolicator_signature_with_symbol;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13[3];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void **v18;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v8 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  CSCppSymbolicator::get_symbol_owners((CSCppSymbolicator *)(a2 & 0xFFFFFFFFFFFFFFFCLL), &v16);
  if (!CSIsNull(a4, a5))
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__init_with_size[abi:ne180100]<std::shared_ptr<CSCppSymbolOwner>*,std::shared_ptr<CSCppSymbolOwner>*>((char *)v13, (_QWORD *)v16, *((_QWORD **)&v16 + 1), (uint64_t)(*((_QWORD *)&v16 + 1) - v16) >> 4);
    elide_some_symbol_owners(a4, a5, v13, (uint64_t)&v14);
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__vdeallocate((void **)&v16);
    v16 = v14;
    v17 = v15;
    v15 = 0;
    v14 = 0uLL;
    v18 = (void **)&v14;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)v13;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
  v11 = v16;
  v12 = v17;
  v17 = 0;
  v16 = 0uLL;
  symbolicator_signature_with_symbol = create_symbolicator_signature_with_symbol_owners<__CFData const*>(v8, (uint64_t **)&v11, a3);
  *(_QWORD *)&v14 = &v11;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  *(_QWORD *)&v14 = &v16;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  return symbolicator_signature_with_symbol;
}

void sub_1B4170398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 56) = v19;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  a15 = (void **)&a19;
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

__CFData *_CSSymbolicatorCreateFlatbufferSignatureWithProcessTimerange<__CFData const*>(char a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5)
{
  unsigned int v6;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  const void *v10;
  CFIndex length;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int16 v21;
  _QWORD v22[2];
  __int128 v23;
  void *__p[5];

  v13 = 0;
  v14 = 0;
  v15 = xmmword_1B41ACEA0;
  v16 = 0;
  if ((a3 & 0x10) != 0)
    v6 = a3 & 0xFFFFFFFB;
  else
    v6 = a3;
  v17 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v21 = 256;
  __p[4] = 0;
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 7) = 0;
  v23 = 0u;
  memset(__p, 0, 27);
  FlatbufferEncoder::encodeCSSymbolicator((uint64_t)&v13, a1, a2, v6 & 1, v6, a4, a5, &v10);
  if (v12)
  {
    Mutable = CFDataCreateMutable(0, 0);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v10, length);
  }
  else
  {
    Mutable = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v13);
  return Mutable;
}

void sub_1B41704D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  FlatbufferEncoder::~FlatbufferEncoder((FlatbufferEncoder *)va);
  _Unwind_Resume(a1);
}

__CFData *_CSSymbolOwnerCreateFlatbufferSignature<__CFData const*>(char a1, uint64_t a2, unsigned int a3)
{
  return _CSSymbolOwnerCreateFlatbufferSignatureWithAddressSet<__CFData const*>(a1, a2, a3, 0, 0);
}

__CFData *_CSSymbolOwnerCreateFlatbufferSignatureWithAddressSet<__CFData const*>(char a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  _BOOL4 v9;
  unsigned int v10;
  unint64_t v11;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  const void *v15;
  CFIndex length;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  _QWORD v27[2];
  __int128 v28;
  void *__p[5];

  v18 = 0;
  v19 = 0;
  v20 = xmmword_1B41ACEA0;
  v21 = 0;
  v22 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 1;
  v26 = 256;
  __p[4] = 0;
  v27[0] = 0;
  *(_QWORD *)((char *)v27 + 7) = 0;
  v28 = 0u;
  memset(__p, 0, 27);
  v9 = CSIsNull(a4, a5);
  if ((a3 & 0x10) != 0)
    v10 = a3 & 0xFFFFFFFB;
  else
    v10 = a3;
  if (v9)
    v11 = 0;
  else
    v11 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  FlatbufferEncoder::encodeCSSymbolOwner((uint64_t)&v18, a1, a2, v10 & 1, v11, v10, &v15);
  if (v17)
  {
    Mutable = CFDataCreateMutable(0, 0);
    CFDataSetLength(Mutable, length);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    memcpy(MutableBytePtr, v15, length);
  }
  else
  {
    Mutable = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v18);
  return Mutable;
}

void sub_1B4170610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  FlatbufferEncoder::~FlatbufferEncoder((FlatbufferEncoder *)va);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__27(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZL31_addAotImageInfosToOptionalDataR37SignatureOptionalDataEncodingVersion310_CSTypeRefP8__CFDatam_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__src, unint64_t a6)
{
  size_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  size_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a6 >= 0x40)
    v10 = 64;
  else
    v10 = a6;
  memcpy(&v34, __src, v10);
  v38 = v10;
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v12 = v11[6];
  v13 = v11[7];
  if (v12 >= v13)
  {
    v17 = v11[5];
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v17) >> 5);
    v19 = v18 + 1;
    if (v18 + 1 > 0x2AAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v17) >> 5);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x155555555555555)
      v21 = 0x2AAAAAAAAAAAAAALL;
    else
      v21 = v19;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TRawSymbol<Pointer32>>>((uint64_t)(v11 + 7), v21);
    else
      v22 = 0;
    v23 = &v22[96 * v18];
    v24 = v35;
    *(_OWORD *)(v23 + 24) = v34;
    v25 = v36;
    *(_OWORD *)(v23 + 72) = v37;
    *(_OWORD *)(v23 + 56) = v25;
    v26 = &v22[96 * v21];
    *(_QWORD *)v23 = a2;
    *((_QWORD *)v23 + 1) = a3;
    *((_QWORD *)v23 + 2) = a4;
    *((_QWORD *)v23 + 11) = v38;
    *(_OWORD *)(v23 + 40) = v24;
    v16 = v23 + 96;
    v28 = (char *)v11[5];
    v27 = (char *)v11[6];
    if (v27 != v28)
    {
      do
      {
        v29 = *((_OWORD *)v27 - 5);
        *((_OWORD *)v23 - 6) = *((_OWORD *)v27 - 6);
        *((_OWORD *)v23 - 5) = v29;
        v30 = *((_OWORD *)v27 - 4);
        v31 = *((_OWORD *)v27 - 3);
        v32 = *((_OWORD *)v27 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v27 - 2);
        *((_OWORD *)v23 - 1) = v32;
        *((_OWORD *)v23 - 4) = v30;
        *((_OWORD *)v23 - 3) = v31;
        v23 -= 96;
        v27 -= 96;
      }
      while (v27 != v28);
      v27 = (char *)v11[5];
    }
    v11[5] = v23;
    v11[6] = v16;
    v11[7] = v26;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *(_QWORD *)v12 = a2;
    *(_QWORD *)(v12 + 8) = a3;
    *(_QWORD *)(v12 + 16) = a4;
    v14 = v34;
    *(_OWORD *)(v12 + 40) = v35;
    v15 = v37;
    *(_OWORD *)(v12 + 56) = v36;
    *(_OWORD *)(v12 + 72) = v15;
    *(_QWORD *)(v12 + 88) = v38;
    v16 = (char *)(v12 + 96);
    *(_OWORD *)(v12 + 24) = v14;
  }
  v11[6] = v16;
  return 1;
}

void CSCppSegmentRange::CSCppSegmentRange(CSCppSegmentRange *this, uint64_t a2, uint64_t a3, CSCppNamedRange *a4, int a5)
{
  CSCppNamedRange *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;

  v8 = (CSCppNamedRange *)"SEGMENT";
  if (!a5)
    v8 = 0;
  v9 = 33;
  if (a5)
    v9 = 16;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v10 = CSCppNamedRange::unique_macho_string(a4, v8, (const char *)v9);
  v11 = 0;
  *((_QWORD *)this + 2) = v10;
  if (a5)
    v11 = CSCppNamedRange::unique_macho_string(a4, 0, (const char *)0x10);
  *((_QWORD *)this + 3) = v11;
}

int32x4_t *MMapArchiveEncoding::_migrate_legacy_archive(MMapArchiveEncoding *this)
{
  unsigned int v1;

  v1 = *((unsigned __int16 *)this + 2);
  if (v1 <= 4)
    return CSCppConvertLegacyPreVersion5ArchiveToModernCopy((_OWORD *)this + 1);
  if (v1 == 6)
    return (int32x4_t *)CSCppConvertLegacyPreVersion7ArchiveToModernCopy((_OWORD *)this + 1);
  if (v1 == 5)
    return (int32x4_t *)CSCppConvertLegacyPreVersion6ArchiveToModernCopy((_OWORD *)this + 1);
  return 0;
}

uint64_t flatbuffers::FlatBufferBuilder::FlatBufferBuilder(uint64_t a1, flatbuffers::FlatBufferBuilder *a2)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1B41ACEA0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 88) = 256;
  *(_QWORD *)(a1 + 96) = 0;
  flatbuffers::FlatBufferBuilder::Swap((flatbuffers::FlatBufferBuilder *)a1, a2);
  return a1;
}

void sub_1B417095C(_Unwind_Exception *a1)
{
  flatbuffers::vector_downward *v1;

  flatbuffers::vector_downward::~vector_downward(v1);
  _Unwind_Resume(a1);
}

uint64_t *flatbuffers::FlatBufferBuilder::Swap(flatbuffers::FlatBufferBuilder *this, flatbuffers::FlatBufferBuilder *a2)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = flatbuffers::vector_downward::swap((uint64_t *)this, (uint64_t *)a2);
  v5 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v5;
  LOWORD(v5) = *((_WORD *)this + 38);
  *((_WORD *)this + 38) = *((_WORD *)a2 + 38);
  *((_WORD *)a2 + 38) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 78);
  *((_BYTE *)this + 78) = *((_BYTE *)a2 + 78);
  *((_BYTE *)a2 + 78) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 79);
  *((_BYTE *)this + 79) = *((_BYTE *)a2 + 79);
  *((_BYTE *)a2 + 79) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v6;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  return result;
}

uint64_t *flatbuffers::vector_downward::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  LOBYTE(v2) = *((_BYTE *)result + 8);
  *((_BYTE *)result + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v2;
  v3 = result[2];
  result[2] = a2[2];
  a2[2] = v3;
  v4 = result[3];
  result[3] = a2[3];
  a2[3] = v4;
  v5 = result[4];
  result[4] = a2[4];
  a2[4] = v5;
  LODWORD(v5) = *((_DWORD *)result + 10);
  *((_DWORD *)result + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  v6 = result[6];
  result[6] = a2[6];
  a2[6] = v6;
  v7 = result[7];
  result[7] = a2[7];
  a2[7] = v7;
  v8 = result[8];
  result[8] = a2[8];
  a2[8] = v8;
  return result;
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  flatbuffers::vector_downward::clear_buffer(this);
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

_QWORD *flatbuffers::vector_downward::clear_buffer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = this[6];
  if (v2)
  {
    v3 = *this;
    if (*v1)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      this = (_QWORD *)MEMORY[0x1B5E36928](v2, 0x1000C8077774924);
  }
  v1[6] = 0;
  return this;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    std::__tree<TRange<Pointer64>>::destroy(*((_QWORD *)this + 12), *(_QWORD **)(v2 + 8));
    MEMORY[0x1B5E36940](v2, 0x1060C40C2B13FB5);
  }
  flatbuffers::vector_downward::~vector_downward(this);
}

_QWORD *std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>::__init_with_size[abi:ne180100]<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppDwarfAttribute>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4170BF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TMMapArchiveSerialization::_invoke_supplied_callback<WriteMMapArchiveToDirectory(CSCppSymbolOwner *,TMMapArchive &,char const*)::$_1>(void *__buf, size_t __nbyte, int __fd, _QWORD *a4)
{
  size_t v6;
  int v8;
  ssize_t v9;

  if (!__nbyte)
    return 1;
  v6 = __nbyte;
  do
  {
    v8 = 4;
    while (1)
    {
      v9 = write(__fd, __buf, v6);
      if (v9 != -1)
        break;
      if (*__error() != 4 || v8-- == 0)
        return 0;
    }
    *a4 += v9;
    v6 -= v9;
  }
  while (v6);
  return 1;
}

uint64_t TMMapArchive::TEXT_text(TMMapArchive *this)
{
  return (uint64_t)this
       + 32 * *((_DWORD *)this + 2)
       + 24 * *((_DWORD *)this + 3)
       + (24 * *((_DWORD *)this + 4))
       + (unint64_t)(4 * *((_DWORD *)this + 4))
       + (36 * *((_DWORD *)this + 5))
       + (20 * *((_DWORD *)this + 6))
       + *((unsigned int *)this + 22)
       + 96;
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,void>@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B4170D98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char const*&,std::allocator<CSCppSymbolOwner>,0>(_QWORD *a1, _QWORD *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6774D20;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B4170DFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,_CSRange>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,_CSRange>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,_CSRange>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,_CSRange>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x38uLL);
    *((_QWORD *)v10 + 4) = *(_QWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,void>@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B4170F5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,unsigned int &,unsigned long long &,unsigned long long &,unsigned int &,CSCppArchitecture &,char *&,std::allocator<CSCppSymbolOwner>,0>(_QWORD *a1, _QWORD *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6774D20;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B4170FC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<UUID,TMMapArchive *>,std::__unordered_map_hasher<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDHashFunctor,UUIDEqualsFunctor,true>,std::__unordered_map_equal<UUID,std::__hash_value_type<UUID,TMMapArchive *>,UUIDEqualsFunctor,UUIDHashFunctor,true>,std::allocator<std::__hash_value_type<UUID,TMMapArchive *>>>::__emplace_unique_key_args<UUID,std::piecewise_construct_t const&,std::tuple<UUID const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = a2[1] ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2[1] ^ *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_42:
    *v21 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B41711EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CSSymbolGetInstructionData(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t Range;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  v2 = a1;
  Range = CSSymbolGetRange(a1, a2);
  v5 = v4;
  v2 &= 0xFFFFFFFFFFFFFFF8;
  v6 = CSCppSymbolOwner::data((CSCppSymbolOwner *)v2);
  return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v6 + 192))(v6, v2, Range, v5);
}

uint64_t CSSymbolGetModuleFlags(uint64_t a1, uint64_t a2)
{
  const char *MangledName;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  MangledName = (const char *)CSSymbolGetMangledName(a1, a2);
  if (!MangledName)
    return 2;
  if (!strncmp(MangledName, "_$sS", 4uLL))
    return 1;
  return 2;
}

void XPCObject::XPCObject(XPCObject *this, xpc_object_t object, int a3)
{
  *(_QWORD *)this = object;
  if (object)
  {
    if (a3)
      xpc_retain(object);
  }
}

void XPCObject::XPCObject(XPCObject *this, void **a2)
{
  void *v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  if (v3)
    xpc_retain(v3);
}

_QWORD *XPCObject::XPCObject(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

void XPCObject::~XPCObject(void **this)
{
  void *v1;

  v1 = *this;
  if (v1)
    xpc_release(v1);
}

uint64_t XPCObject::operator*(uint64_t a1)
{
  return *(_QWORD *)a1;
}

BOOL XPCObject::operator BOOL(_QWORD *a1)
{
  return *a1 != 0;
}

uint64_t XPCObject::xpc_type(XPCObject *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    JUMPOUT(0x1B5E372E8);
  return result;
}

void XPCDictionary::XPCDictionary(XPCDictionary *this)
{
  *(_QWORD *)this = xpc_dictionary_create(0, 0, 0);
}

void XPCDictionary::set_uint64(xpc_object_t *this, const char *a2, uint64_t a3)
{
  xpc_dictionary_set_uint64(*this, a2, a3);
}

uint64_t XPCDictionary::get_uint64(xpc_object_t *this, const char *a2)
{
  return xpc_dictionary_get_uint64(*this, a2);
}

void XPCDictionary::set_object(xpc_object_t *this, const char *a2, void *a3)
{
  xpc_dictionary_set_value(*this, a2, a3);
}

xpc_object_t XPCDictionary::get_object@<X0>(xpc_object_t *this@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  xpc_object_t result;

  result = xpc_dictionary_get_value(*this, a2);
  *a3 = result;
  if (result)
    return xpc_retain(result);
  return result;
}

void XPCArray::XPCArray(XPCArray *this)
{
  *(_QWORD *)this = xpc_array_create(0, 0);
}

size_t XPCArray::count(xpc_object_t *this)
{
  return xpc_array_get_count(*this);
}

void XPCArray::set_uint64(xpc_object_t *this, size_t a2, uint64_t a3)
{
  xpc_array_set_uint64(*this, a2, a3);
}

uint64_t XPCArray::get_uint64(xpc_object_t *this, size_t a2)
{
  return xpc_array_get_uint64(*this, a2);
}

void XPCArray::set_uuid(xpc_object_t *this, size_t a2, const CFUUIDBytes *a3)
{
  xpc_array_set_uuid(*this, a2, &a3->byte0);
}

const uint8_t *XPCArray::get_uuid(xpc_object_t *this, size_t a2)
{
  return xpc_array_get_uuid(*this, a2);
}

FILE *CSFileIsCoreFile(FILE *result)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  FILE *v7;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    result = fopen((const char *)result, "re");
    v7 = result;
    if (result)
    {
      v8[0] = &off_1E67799F0;
      v8[1] = &v7;
      v8[3] = v8;
      v9[3] = v9;
      v9[0] = &off_1E67799F0;
      v9[1] = &v7;
      v3 = 0;
      v4 = 0;
      v6 = 0;
      v5 = 0;
      if (fread(&v3, 0x1CuLL, 1uLL, result) == 1)
      {
        v1 = v3;
        v2 = HIDWORD(v4);
        DeferredLambda::~DeferredLambda((DeferredLambda *)v9);
        if (v1 >> 1 == 2138504551)
          return (FILE *)(v2 == 4);
        else
          return 0;
      }
      else
      {
        DeferredLambda::~DeferredLambda((DeferredLambda *)v9);
        return 0;
      }
    }
  }
  return result;
}

BOOL CSFileIsKnownSignature(const char *a1)
{
  unint64_t type_from_beginning_of;
  char v2;
  _BOOL4 v3;

  type_from_beginning_of = read_type_from_beginning_of_file<unsigned long long>(a1);
  v3 = type_from_beginning_of == 0x1FF01FF02 || HIDWORD(type_from_beginning_of) == 1112365395;
  return v2 && v3;
}

unint64_t read_type_from_beginning_of_file<unsigned long long>(const char *a1)
{
  FILE *v1;
  size_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  uint64_t __ptr;
  FILE *v7;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  if (a1 && (v1 = fopen(a1, "re"), (v7 = v1) != 0))
  {
    v8[0] = &off_1E6779A80;
    v8[1] = &v7;
    v8[3] = v8;
    v9[0] = &off_1E6779A80;
    v9[3] = v9;
    v9[1] = &v7;
    __ptr = 0;
    v2 = fread(&__ptr, 8uLL, 1uLL, v1);
    if (v2 == 1)
      v3 = __ptr & 0xFFFFFFFFFFFFFF00;
    else
      v3 = 0;
    if (v2 == 1)
      v4 = __ptr;
    else
      v4 = 0;
    DeferredLambda::~DeferredLambda((DeferredLambda *)v9);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  return v3 & 0xFFFFFFFFFFFFFF00 | v4;
}

BOOL CSFileIsFlatbuffer(const char *a1)
{
  unint64_t v1;
  char v2;

  v1 = read_type_from_beginning_of_file<unsigned long long>(a1) >> 32;
  return v2 && v1 == 1112365395;
}

uint64_t CSFileIsSuitableForCS(const char *a1)
{
  unint64_t type_from_beginning_of;
  char v2;
  unint64_t v3;
  uint64_t result;
  int v5;
  _BOOL4 v6;

  type_from_beginning_of = read_type_from_beginning_of_file<unsigned long long>(a1);
  if (!v2)
    return 0;
  v3 = type_from_beginning_of;
  result = 1;
  if ((int)v3 > -822415875)
  {
    if ((v3 + 17958194) < 2 || (_DWORD)v3 == -822415874)
      return result;
    v5 = -805638658;
  }
  else
  {
    if ((v3 + 889275714) < 2 || (_DWORD)v3 == -1095041334)
      return result;
    v5 = -1078264118;
  }
  if ((_DWORD)v3 != v5)
  {
    v6 = v3 == 0xA3E686372613C21 || HIDWORD(v3) == 1112365395;
    return v3 == 0x1FF01FF02 || v6;
  }
  return result;
}

void std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

_QWORD *std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E67799F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E67799F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return fclose(**(FILE ***)(a1 + 8));
}

uint64_t std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1},std::allocator<std::optional<mach_header> read_type_from_beginning_of_file<mach_header>(char const*)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void DeferredLambda::~DeferredLambda(DeferredLambda *this)
{
  uint64_t v2;
  DeferredLambda *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (DeferredLambda *)*((_QWORD *)this + 3);
  if (v3 == this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

void std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

_QWORD *std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6779A80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6779A80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return fclose(**(FILE ***)(a1 + 8));
}

uint64_t std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1},std::allocator<std::optional<unsigned long long> read_type_from_beginning_of_file<unsigned long long>(char const*)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

__CFString *CSRegionCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  __CFString *i;
  unint64_t Range;
  uint64_t v8;
  uint64_t v9;
  char SymbolOwner;
  uint64_t v11;
  uint64_t Architecture;
  int v13;
  uint64_t v14;
  const char *Name;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  for (i = CFStringCreateMutable(0, 0); a3; --a3)
    CFStringAppendCString(i, "\t", 0x8000100u);
  Range = CSRegionGetRange(a1, a2);
  v9 = v8;
  SymbolOwner = CSRegionGetSymbolOwner(a1, a2);
  Architecture = CSSymbolOwnerGetArchitecture(SymbolOwner, v11);
  v13 = CSArchitectureIs64Bit(Architecture);
  v14 = Range + v9;
  Name = CSRegionGetName(a1, a2);
  if (v13)
    CFStringAppendFormat(i, 0, CFSTR("<CSRegion: %p> [0x%016llx -> 0x%016llx) %s"), a2 & 0xFFFFFFFFFFFFFFFCLL, Range, v14, Name);
  else
    CFStringAppendFormat(i, 0, CFSTR("<CSRegion: %p> [0x%08llx -> 0x%08llx) %s"), a2 & 0xFFFFFFFFFFFFFFFCLL, Range, v14, Name);
  return i;
}

__CFString *CSSourceInfoCopyDescriptionWithIndent(uint64_t a1, uint64_t a2, int a3)
{
  __CFString *i;
  unint64_t Range;
  uint64_t v8;
  uint64_t v9;
  char SymbolOwner;
  uint64_t v11;
  uint64_t Architecture;
  int v13;
  uint64_t v14;
  const char *Path;
  uint64_t LineNumber;

  if (!(a1 & 7 | (8 * (a2 & 3))))
    return 0;
  for (i = CFStringCreateMutable(0, 0); a3; --a3)
    CFStringAppendCString(i, "\t", 0x8000100u);
  Range = CSSourceInfoGetRange(a1, a2);
  v9 = v8;
  SymbolOwner = CSSourceInfoGetSymbolOwner(a1, a2);
  Architecture = CSSymbolOwnerGetArchitecture(SymbolOwner, v11);
  v13 = CSArchitectureIs64Bit(Architecture);
  v14 = Range + v9;
  Path = CSSourceInfoGetPath(a1, a2);
  LineNumber = CSSourceInfoGetLineNumber(a1, a2);
  if (v13)
    CFStringAppendFormat(i, 0, CFSTR("<CSSourceInfo: %p> [0x%016llx -> 0x%016llx) %s:%d"), a2 & 0xFFFFFFFFFFFFFFFCLL, Range, v14, Path, LineNumber);
  else
    CFStringAppendFormat(i, 0, CFSTR("<CSSourceInfo: %p> [0x%08llx -> 0x%08llx) %s:%d"), a2 & 0xFFFFFFFFFFFFFFFCLL, Range, v14, Path, LineNumber);
  return i;
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, mach_port_name_t a2, int a3)
{
  *((_BYTE *)this + 16) = 0;
  *(_QWORD *)this = &off_1E6779B00;
  *((_QWORD *)this + 1) = 0;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2, a3);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 781) = 0;
  CSCppMachTask::initialize(this);
}

void sub_1B4171BF4(_Unwind_Exception *a1)
{
  CSCppMachTaskContainer *v1;
  CSCppDyldLoadUnloadNotifier **v2;

  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](v2, 0);
  CSCppMachTaskContainer::~CSCppMachTaskContainer(v1);
  _Unwind_Resume(a1);
}

size_t CSCppMachTask::initialize(CSCppMachTask *this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  UUID *IsTranslated;
  UUID *v6;
  CSCppDyldLoadUnloadNotifier *v7;
  int v8;
  int v9;
  size_t result;
  _BYTE v11[1024];
  _BYTE v12[1024];
  _BYTE v13[16];
  int pid;
  _BYTE v15[1024];
  _BYTE buffer[1024];
  uint64_t v17;

  v1 = MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v4 = v1;
  v17 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(v1 + 64) = CSTaskIs64Bit(*(_DWORD *)(v1 + 32));
  IsTranslated = (UUID *)CSTaskIsTranslated(*(_DWORD *)(v4 + 32));
  *(_BYTE *)(v4 + 16) = (_BYTE)IsTranslated;
  v6 = (UUID *)UUID::null_uuid(IsTranslated);
  *(_OWORD *)(v4 + 6232) = *(_OWORD *)v6;
  *(_OWORD *)(v4 + 6256) = *(_OWORD *)UUID::null_uuid(v6);
  *(_QWORD *)(v4 + 6248) = 0;
  *(_QWORD *)(v4 + 6272) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  if (v3)
  {
    v7 = (CSCppDyldLoadUnloadNotifier *)operator new();
    CSCppDyldLoadUnloadNotifier::CSCppDyldLoadUnloadNotifier(v7, (const CSCppMachTaskContainer *)(v4 + 24), *(_BYTE *)(v4 + 64));
    std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100]((CSCppDyldLoadUnloadNotifier **)(v4 + 48), v7);
  }
  if (*(_DWORD *)(v4 + 36) == -1)
  {
    v8 = -1;
  }
  else
  {
    CSCppMachTask::refresh_process_info((CSCppMachTask *)v4);
    v8 = *(_DWORD *)(v4 + 36);
  }
  if (getpid() == v8)
  {
    strcpy((char *)(v4 + 65), "CoreSymbolication - creating symbolicator for current process\n");
  }
  else
  {
    getpid();
    if (sandbox_check())
    {
      strcpy((char *)(v4 + 65), "CoreSymbolication - creating symbolicator for remote process\n");
    }
    else
    {
      buffer[0] = 0;
      if (proc_name(v8, buffer, 0x400u) <= 0)
        buffer[0] = 0;
      v15[0] = 0;
      if (proc_pidpath(v8, v15, 0x400u) <= 0)
        v15[0] = 0;
      if (proc_pidinfo(v8, 3, 0, v13, 136) < 136)
      {
        snprintf((char *)(v4 + 65), 0x1800uLL, "CoreSymbolication target process: %s  pid: %d  path: %s\nCouldn't determine parent process ID\n");
      }
      else
      {
        v9 = pid;
        v12[0] = 0;
        if (proc_name(pid, v12, 0x400u) <= 0)
          v12[0] = 0;
        v11[0] = 0;
        if (proc_pidpath(v9, v11, 0x400u) <= 0)
          v11[0] = 0;
        snprintf((char *)(v4 + 65), 0x1800uLL, "CoreSymbolication target process: %s  pid: %d  path: %s\n                  parent process: %s  pid: %d  path: %s\n", buffer);
      }
    }
  }
  result = strlen((const char *)(v4 + 65));
  *(_QWORD *)(v4 + 6216) = v4 + result + 65;
  *(_QWORD *)(v4 + 6224) = 6144 - result;
  return result;
}

void sub_1B4171EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x1060C405A6396CALL);
  _Unwind_Resume(a1);
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, int a2)
{
  *((_BYTE *)this + 16) = 0;
  *(_QWORD *)this = &off_1E6779B00;
  *((_QWORD *)this + 1) = 0;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 781) = 0;
  CSCppMachTask::initialize(this);
}

void sub_1B4171F3C(_Unwind_Exception *a1)
{
  CSCppMachTaskContainer *v1;
  CSCppDyldLoadUnloadNotifier **v2;

  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](v2, 0);
  CSCppMachTaskContainer::~CSCppMachTaskContainer(v1);
  _Unwind_Resume(a1);
}

void CSCppMachTask::CSCppMachTask(CSCppMachTask *this, mach_port_name_t a2)
{
  *((_BYTE *)this + 16) = 0;
  *(_QWORD *)this = &off_1E6779B00;
  *((_QWORD *)this + 1) = 0;
  CSCppMachTaskContainer::CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24), a2);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 781) = 0;
  CSCppMachTask::initialize(this);
}

void sub_1B4171FC0(_Unwind_Exception *a1)
{
  CSCppMachTaskContainer *v1;
  CSCppDyldLoadUnloadNotifier **v2;

  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](v2, 0);
  CSCppMachTaskContainer::~CSCppMachTaskContainer(v1);
  _Unwind_Resume(a1);
}

void CSCppMachTask::~CSCppMachTask(CSCppMachTask *this)
{
  *(_QWORD *)this = &off_1E6779B00;
  if (*((_QWORD *)this + 5))
    _dyld_process_info_release();
  std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100]((CSCppDyldLoadUnloadNotifier **)this + 6, 0);
  CSCppMachTaskContainer::~CSCppMachTaskContainer((CSCppMachTask *)((char *)this + 24));
}

{
  CSCppMachTask::~CSCppMachTask(this);
  JUMPOUT(0x1B5E36940);
}

void CSCppMachTask::refresh_process_info(CSCppMachTask *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint8_t buf[16];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = _dyld_process_info_create();
  if (v2)
  {
    if (*((_QWORD *)this + 5))
      _dyld_process_info_release();
    *((_QWORD *)this + 5) = v2;
    _dyld_process_info_get_state();
    *((_QWORD *)this + 7) = v5;
    _dyld_process_info_get_cache();
    *(_OWORD *)((char *)this + 6232) = *(_OWORD *)buf;
    *((_QWORD *)this + 781) = v9;
    if (MEMORY[0x1E0C80F08])
    {
      _dyld_process_info_get_aot_cache();
      *((_OWORD *)this + 391) = v6;
      *((_QWORD *)this + 784) = v7;
    }
  }
  else if (!*((_QWORD *)this + 7)
         && !*((_QWORD *)this + 5)
         && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v4 = *((_DWORD *)this + 8);
    v3 = *((_DWORD *)this + 9);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v4;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unable to create process info for pid %d, task %d. Is dyld loaded for this binary yet?\n", buf, 0xEu);
  }
}

BOOL CSCppMachTask::is_alive(CSCppMachTask *this)
{
  return CSCppMachTaskContainer::is_alive((CSCppMachTask *)((char *)this + 24));
}

uint64_t CSCppMachTask::uses_development_dsc(CSCppMachTask *this)
{
  uint64_t v2;
  CSCppDyldSharedCache *v3;
  uint64_t v4;
  BOOL v5;
  CSCppDyldSharedCache *v6;
  _BYTE v8[120];
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)v8, (CSCppMachTask *)((char *)this + 24), 0);
  if (*((_BYTE *)this + 64))
  {
    if (!v2)
      goto LABEL_19;
    if (_dyld_process_info_get_platform() != 10)
    {
      _dyld_process_info_get_cache();
      v9 = v8;
      v3 = (CSCppDyldSharedCache *)TMemoryView<SizeAndEndianness<Pointer64,LittleEndian>>::dyld_shared_cache_at(&v9, v10);
      v2 = (uint64_t)v3;
      if (!v3)
        goto LABEL_19;
      v4 = *((_QWORD *)v3 + 13);
      if (v4 != 2)
        goto LABEL_15;
      if (CSCppDyldSharedCache::is_universal_cache(v3))
      {
LABEL_7:
        v5 = *(_DWORD *)(v2 + 456) == 0;
        goto LABEL_16;
      }
      goto LABEL_14;
    }
LABEL_10:
    v2 = 0;
    goto LABEL_19;
  }
  if (!v2)
    goto LABEL_19;
  if (_dyld_process_info_get_platform() == 10)
    goto LABEL_10;
  _dyld_process_info_get_cache();
  v9 = v8;
  v6 = (CSCppDyldSharedCache *)TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::dyld_shared_cache_at(&v9, v10);
  v2 = (uint64_t)v6;
  if (!v6)
    goto LABEL_19;
  v4 = *((_QWORD *)v6 + 13);
  if (v4 != 2)
    goto LABEL_15;
  if (CSCppDyldSharedCache::is_universal_cache(v6))
    goto LABEL_7;
LABEL_14:
  v4 = *(_QWORD *)(v2 + 104);
LABEL_15:
  v5 = v4 == 0;
LABEL_16:
  v2 = v5;
LABEL_19:
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v8);
  return v2;
}

void sub_1B41723B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void CSCppMachTask::begin_notifications(CSCppMachTask *this, CSCppSymbolicator *a2)
{
  CSCppDyldLoadUnloadNotifier *v3;

  v3 = (CSCppDyldLoadUnloadNotifier *)*((_QWORD *)this + 6);
  if (v3)
    CSCppDyldLoadUnloadNotifier::begin_processing(v3, a2, *((_QWORD *)this + 7));
}

CSCppDyldLoadUnloadNotifier *CSCppMachTask::subscribe_to_task_main_notification(CSCppMachTask *this)
{
  CSCppDyldLoadUnloadNotifier *result;

  result = (CSCppDyldLoadUnloadNotifier *)*((_QWORD *)this + 6);
  if (result)
    return (CSCppDyldLoadUnloadNotifier *)CSCppDyldLoadUnloadNotifier::subscribe_to_task_main_notification(result);
  return result;
}

CSCppDyldLoadUnloadNotifier *CSCppMachTask::end_notifications(CSCppDyldLoadUnloadNotifier **this)
{
  return std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](this + 6, 0);
}

CSCppDyldLoadUnloadNotifier *std::unique_ptr<CSCppDyldLoadUnloadNotifier>::reset[abi:ne180100](CSCppDyldLoadUnloadNotifier **a1, CSCppDyldLoadUnloadNotifier *a2)
{
  CSCppDyldLoadUnloadNotifier *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CSCppDyldLoadUnloadNotifier::~CSCppDyldLoadUnloadNotifier(result);
    JUMPOUT(0x1B5E36940);
  }
  return result;
}

void CSCppMachTask::symbol_owners(CSCppMachTask *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  _BYTE v19[136];
  void *__p;
  char v21;
  uint64_t (**v22)();
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v6 = (std::__shared_weak_count *)operator new(0x30uLL);
  v7 = v6;
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6779C70;
  v6[1].__shared_owners_ = 0;
  v6[1].__shared_weak_owners_ = 0;
  *a3 = v6 + 1;
  a3[1] = v6;
  if (*((_BYTE *)this + 64))
  {
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v22 = off_1E6779BB0;
    v23 = &v6[1].__vftable;
    v24 = v6;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator((uint64_t)v19, (CSCppMachTask *)((char *)this + 24), *((_QWORD *)this + 5), (uint64_t)this + 65, *((_QWORD *)this + 777), *((_QWORD *)this + 778), a2, (uint64_t)&v22);
    if (v21 < 0)
      operator delete(__p);
    CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v19);
    v22 = off_1E6779BB0;
    v12 = v24;
    if (v24)
    {
      v13 = (unint64_t *)&v24->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
LABEL_25:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v22 = off_1E6779C10;
    v23 = &v6[1].__vftable;
    v24 = v6;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator((uint64_t)v19, (CSCppMachTask *)((char *)this + 24), *((_QWORD *)this + 5), (uint64_t)this + 65, *((_QWORD *)this + 777), *((_QWORD *)this + 778), a2, (uint64_t)&v22);
    if (v21 < 0)
      operator delete(__p);
    CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v19);
    v22 = off_1E6779C10;
    v12 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v14 = __ldaxr(v18);
      while (__stlxr(v14 - 1, v18));
      goto LABEL_25;
    }
  }
}

void sub_1B417265C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 88) = v3;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::~SymbolOwnerIterator(_QWORD *a1)
{
  *a1 = off_1E6779BB0;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

_QWORD *SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::~SymbolOwnerIterator(_QWORD *a1)
{
  *a1 = off_1E6779C10;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

uint64_t CSCppMachTask::mach_task_container(CSCppMachTask *this)
{
  return (uint64_t)this + 24;
}

uint64_t CSCppMachTask::is_kernel_task(CSCppMachTask *this)
{
  return 0;
}

uint64_t CSCppMachTask::is_mach_task(CSCppMachTask *this)
{
  return 1;
}

uint64_t CSCppMachTask::dsc_uuid(CSCppMachTask *this)
{
  return (uint64_t)this + 6232;
}

uint64_t CSCppMachTask::aot_cache_uuid(CSCppMachTask *this)
{
  return (uint64_t)this + 6256;
}

uint64_t CSCppMachTask::dsc_base_address(CSCppMachTask *this)
{
  return *((_QWORD *)this + 781);
}

uint64_t CSCppMachTask::aot_cache_base_address(CSCppMachTask *this)
{
  return *((_QWORD *)this + 784);
}

__n128 CSCppMachTask::set_dsc_uuid(CSCppMachTask *this, __n128 *a2)
{
  __n128 result;

  if (a2)
  {
    result = *a2;
    *(__n128 *)((char *)this + 6232) = *a2;
  }
  return result;
}

uint64_t CSCppMachTask::set_dsc_base_address(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 6248) = a2;
  return this;
}

__n128 CSCppMachTask::set_aot_cache_uuid(__n128 *this, __n128 *a2)
{
  __n128 result;

  if (a2)
  {
    result = *a2;
    this[391] = *a2;
  }
  return result;
}

uint64_t CSCppMachTask::set_aot_cache_base_address(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 6272) = a2;
  return this;
}

uint64_t SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::presize(uint64_t a1, uint64_t a2)
{
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(*(char ***)(a1 + 8), a2 + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 4));
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner(a2, &v6);
  if ((_QWORD)v6)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(char ***)(a1 + 8), &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B41727E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_failed_header(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  _BYTE *v13;

  v13 = a2;
  if (a2 && *a2)
  {
    v10 = 0;
    v11 = UUID::null_uuid((UUID *)a1);
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>(&v11, (unsigned int *)&v10 + 1, &kCSBeginningOfTime, &kCSEndOfTime, (unsigned int *)&v10, &kCSArchitectureUnknown, &v13, &v12);
    v3 = v12;
    v4 = (void **)(v12 + 32);
    HIDWORD(v10) = 0;
    LODWORD(v11) = 0;
    v5 = *(_QWORD *)(v12 + 40);
    if (v5 >= *(_QWORD *)(v12 + 48))
    {
      v6 = std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>(v4, (int *)&v11, (int *)&v10 + 1, (CSCppNamedRange *)"__FAILED");
    }
    else
    {
      std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>((uint64_t)v4, (int *)&v11, (int *)&v10 + 1, (CSCppNamedRange *)"__FAILED");
      v6 = (_QWORD *)(v5 + 32);
    }
    *(_QWORD *)(v3 + 40) = v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(char ***)(a1 + 8), &v12);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B4172900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer64,LittleEndian>>::~SymbolOwnerIterator(_QWORD *a1)
{
  *a1 = off_1E6779BB0;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E36940);
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,std::allocator<CSCppSymbolOwner>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B41729E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCppSymbolOwner>::__shared_ptr_emplace[abi:ne180100]<UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,std::allocator<CSCppSymbolOwner>,0>(_QWORD *a1, _QWORD *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E6774D20;
  CSCppSymbolOwner::CSCppSymbolOwner(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B4172A48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

const char *std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>(uint64_t a1, int *a2, int *a3, CSCppNamedRange *this)
{
  _QWORD *v6;
  uint64_t v7;
  const char *result;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a3;
  *v6 = *a2;
  v6[1] = v7;
  v6[2] = CSCppNamedRange::unique_macho_string(this, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  result = CSCppNamedRange::unique_macho_string(this, 0, (const char *)0x10);
  v6[3] = result;
  *(_QWORD *)(a1 + 8) = v6 + 4;
  return result;
}

void sub_1B4172AC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>(void **a1, int *a2, int *a3, CSCppNamedRange *a4)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v5 = (char *)*a1;
  v6 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = (_BYTE *)a1[2] - v5;
  if (v12 >> 4 > v7)
    v7 = v12 >> 4;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
    v13 = 0x7FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = *a3;
  v18 = &v14[32 * v6];
  *(_QWORD *)v18 = *a2;
  *((_QWORD *)v18 + 1) = v17;
  *((_QWORD *)v18 + 2) = CSCppNamedRange::unique_macho_string(a4, (CSCppNamedRange *)"SEGMENT", (const char *)0x10);
  *((_QWORD *)v18 + 3) = CSCppNamedRange::unique_macho_string(a4, 0, (const char *)0x10);
  v19 = v18 + 32;
  v21 = (char *)*a1;
  v20 = (char *)a1[1];
  if (v20 != *a1)
  {
    do
    {
      v22 = *((_OWORD *)v20 - 1);
      *((_OWORD *)v18 - 2) = *((_OWORD *)v20 - 2);
      *((_OWORD *)v18 - 1) = v22;
      v18 -= 32;
      v20 -= 32;
    }
    while (v20 != v21);
    v20 = (char *)*a1;
  }
  *a1 = v18;
  a1[1] = v19;
  a1[2] = &v14[32 * v16];
  if (v20)
    operator delete(v20);
  return v19;
}

void sub_1B4172BF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::presize(uint64_t a1, uint64_t a2)
{
  return std::vector<std::shared_ptr<CSCppSymbolOwner>>::reserve(*(char ***)(a1 + 8), a2 + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 4));
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner(a2, &v6);
  if ((_QWORD)v6)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(char ***)(a1 + 8), &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B4172C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_failed_header(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  _BYTE *v13;

  v13 = a2;
  if (a2 && *a2)
  {
    v10 = 0;
    v11 = UUID::null_uuid((UUID *)a1);
    std::allocate_shared[abi:ne180100]<CSCppSymbolOwner,std::allocator<CSCppSymbolOwner>,UUID const*,int,unsigned long long const&,unsigned long long const&,int,_CSArchitecture const&,char const*&,void>(&v11, (unsigned int *)&v10 + 1, &kCSBeginningOfTime, &kCSEndOfTime, (unsigned int *)&v10, &kCSArchitectureUnknown, &v13, &v12);
    v3 = v12;
    v4 = (void **)(v12 + 32);
    HIDWORD(v10) = 0;
    LODWORD(v11) = 0;
    v5 = *(_QWORD *)(v12 + 40);
    if (v5 >= *(_QWORD *)(v12 + 48))
    {
      v6 = std::vector<CSCppSegmentRange>::__emplace_back_slow_path<int,int,char const(&)[9]>(v4, (int *)&v11, (int *)&v10 + 1, (CSCppNamedRange *)"__FAILED");
    }
    else
    {
      std::vector<CSCppSegmentRange>::__construct_one_at_end[abi:ne180100]<int,int,char const(&)[9]>((uint64_t)v4, (int *)&v11, (int *)&v10 + 1, (CSCppNamedRange *)"__FAILED");
      v6 = (_QWORD *)(v5 + 32);
    }
    *(_QWORD *)(v3 + 40) = v6;
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](*(char ***)(a1 + 8), &v12);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B4172DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SymbolOwnerIterator<SizeAndEndianness<Pointer32,LittleEndian>>::~SymbolOwnerIterator(_QWORD *a1)
{
  *a1 = off_1E6779C10;
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E36940);
}

uint64_t TMemoryView<SizeAndEndianness<Pointer32,LittleEndian>>::dyld_shared_cache_at(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;

  v3 = a2;
  v4 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, 32);
  v6 = (unsigned int *)v4;
  if (v4)
  {
    v7 = v5;
    if (!strncmp(v4, "dyld_v", 6uLL))
    {
      v8 = v6[4];
      v9 = v6[5];
      v10 = v6[98];
      v11 = CSCppDyldSharedCache::uses_universal_cache_struct_layout((CSCppDyldSharedCache *)v6);
      v12 = 24;
      if (v11)
        v12 = 56;
      if (v8 + 32 * v9 + v10 + v12 * (unint64_t)v6[99] > v7)
        return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v3);
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v6;
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6779C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6779C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E36940);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<CSCppSymbolOwner>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator(uint64_t a1, TMachOHeaderIterator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  BOOL is_self_task;
  uint64_t *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  uint8_t buf[4];
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  is_self_task = CSCppMachTaskContainer::is_self_task(this);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)a1, this, !is_self_task);
  *(_QWORD *)(a1 + 120) = a1;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 136) = 0;
  v17 = (uint64_t *)(a1 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a4;
  *(_QWORD *)(a1 + 168) = a5;
  *(_QWORD *)(a1 + 176) = a6;
  *(_DWORD *)(a1 + 184) = a7;
  *(_QWORD *)(a1 + 192) = a8;
  if (a3)
  {
    v18 = CSGetForceSafeMachVMReads() ^ 1;
    if ((a7 & 0x1000) != 0)
      LOBYTE(v18) = 0;
    if ((v18 & 1) != 0)
    {
      TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate();
    }
    else
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 0x40000000;
      v23[2] = ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke;
      v23[3] = &__block_descriptor_tmp_34_1;
      v23[4] = a1;
      v19 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v23);
      if (v19 != 4096)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v20 = *((_DWORD *)this + 3);
          v21 = a1 + 136;
          if (*(char *)(a1 + 159) < 0)
            v21 = *v17;
          *(_DWORD *)buf = 67109634;
          v25 = v20;
          v26 = 2080;
          v27 = v21;
          v28 = 1024;
          v29 = v19;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, read of header data for [%s] failed, err code %#x\n", buf, 0x18u);
        }
        v22 = a1 + 136;
        if (*(char *)(a1 + 159) < 0)
          v22 = *v17;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), v22);
      }
    }
  }
}

void sub_1B4173114(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[159] < 0)
    operator delete(*v2);
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke()
{
  return TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate();
}

uint64_t TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::iterate()
{
  _QWORD v1[5];
  _OWORD v2[2];
  int v3;

  v1[0] = 0;
  v1[1] = v1;
  v1[2] = 0x5002000000;
  v1[3] = __Block_byref_object_copy__12;
  v1[4] = __Block_byref_object_dispose__12;
  memset(v2, 0, sizeof(v2));
  v3 = 1065353216;
  _dyld_process_info_for_each_image();
  _Block_object_dispose(v1, 8);
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v2);
}

void sub_1B41731F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<UUID,UUIDHashFunctor,UUIDEqualsFunctor,std::allocator<UUID>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__12(uint64_t a1)
{
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(a1 + 40);
}

void ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke(uint64_t a1, unint64_t a2, unsigned __int8 *a3, const char *a4)
{
  uint64_t v7;
  CFStringRef v8;
  char *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  _BYTE v18[16];
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  v7 = *(_QWORD *)(a1 + 40);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v19))
  {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v19, &v19);
    v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, 0x8000100u);
    if (!v8)
    {
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_2(&v20);
      snprintf(*(char **)(v7 + 168), *(_QWORD *)(v7 + 176), "_dyld_process_info_for_each_image provided CoreSymbolication with invalid UTF-8 in path: %s, macho header address: %#llx, uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n", (const char *)&v20, v19, *a3, a3[1], a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12],
        a3[13],
        a3[14],
        a3[15]);
      CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v18, *(const char **)(v7 + 160));
      _os_assert_log();
      v15 = _os_crash();
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_1(v15);
    }
    CFRelease(v8);
    if (a4)
      v9 = (char *)a4;
    else
      v9 = "";
    std::string::basic_string[abi:ne180100]<0>(&v20, v9);
    v10 = (void **)(v7 + 136);
    if (*(char *)(v7 + 159) < 0)
      operator delete(*v10);
    *(_OWORD *)v10 = v20;
    *(_QWORD *)(v7 + 152) = v21;
    snprintf(*(char **)(v7 + 168), *(_QWORD *)(v7 + 176), "Processing header for %s\n", a4);
    CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v18, *(const char **)(v7 + 160));
    v11 = v19;
    v12 = 32;
    while (1)
    {
      v13 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v7 + 120) + 32))(*(_QWORD *)(v7 + 120), v11, v12);
      if (!v13 || *v13 != -17958193)
        break;
      v12 = v13[5] + 32;
      if (v12 <= v14)
      {
        LOBYTE(v16) = 0;
        v17 = 0;
        TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader((uint64_t)&v20, v7, v11, (uint64_t)v13, (uint64_t)a4, 0, 0, &v16);
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v7 + 192) + 8))(*(_QWORD *)(v7 + 192), &v20);
        break;
      }
    }
    CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v18);
  }
}

void sub_1B417347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)&a30);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B41736A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator(uint64_t a1, TMachOHeaderIterator *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  BOOL is_self_task;
  uint64_t *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  uint8_t buf[4];
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  is_self_task = CSCppMachTaskContainer::is_self_task(this);
  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)a1, this, !is_self_task);
  *(_QWORD *)(a1 + 120) = a1;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 136) = 0;
  v17 = (uint64_t *)(a1 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a4;
  *(_QWORD *)(a1 + 168) = a5;
  *(_QWORD *)(a1 + 176) = a6;
  *(_DWORD *)(a1 + 184) = a7;
  *(_QWORD *)(a1 + 192) = a8;
  if (a3)
  {
    v18 = CSGetForceSafeMachVMReads() ^ 1;
    if ((a7 & 0x1000) != 0)
      LOBYTE(v18) = 0;
    if ((v18 & 1) != 0)
    {
      TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate();
    }
    else
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 0x40000000;
      v23[2] = ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke;
      v23[3] = &__block_descriptor_tmp_41;
      v23[4] = a1;
      v19 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v23);
      if (v19 != 4096)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v20 = *((_DWORD *)this + 3);
          v21 = a1 + 136;
          if (*(char *)(a1 + 159) < 0)
            v21 = *v17;
          *(_DWORD *)buf = 67109634;
          v25 = v20;
          v26 = 2080;
          v27 = v21;
          v28 = 1024;
          v29 = v19;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, read of header data for [%s] failed, err code %#x\n", buf, 0x18u);
        }
        v22 = a1 + 136;
        if (*(char *)(a1 + 159) < 0)
          v22 = *v17;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), v22);
      }
    }
  }
}

void sub_1B4173884(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[159] < 0)
    operator delete(*v2);
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEEC2ERK22CSCppMachTaskContainerPK22dyld_process_info_basePcSB_mjR26TMachOHeaderIteratorHelperIS3_E_block_invoke()
{
  return TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate();
}

uint64_t TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::iterate()
{
  _QWORD v1[5];
  _OWORD v2[2];
  int v3;

  v1[0] = 0;
  v1[1] = v1;
  v1[2] = 0x5002000000;
  v1[3] = __Block_byref_object_copy__12;
  v1[4] = __Block_byref_object_dispose__12;
  memset(v2, 0, sizeof(v2));
  v3 = 1065353216;
  _dyld_process_info_for_each_image();
  _Block_object_dispose(v1, 8);
  return std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table((uint64_t)v2);
}

void sub_1B4173968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  std::__hash_table<char const*,std::hash<char const*>,std::equal_to<char const*>,std::allocator<char const*>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

void ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer3212LittleEndianEE7iterateEv_block_invoke(uint64_t a1, unint64_t a2, unsigned __int8 *a3, const char *a4)
{
  uint64_t v7;
  CFStringRef v8;
  char *v9;
  void **v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  v7 = *(_QWORD *)(a1 + 40);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v19))
  {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v19, &v19);
    v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, 0x8000100u);
    if (!v8)
    {
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_2(&v20);
      snprintf(*(char **)(v7 + 168), *(_QWORD *)(v7 + 176), "_dyld_process_info_for_each_image provided CoreSymbolication with invalid UTF-8 in path: %s, macho header address: %#llx, uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n", (const char *)&v20, v19, *a3, a3[1], a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12],
        a3[13],
        a3[14],
        a3[15]);
      CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v18, *(const char **)(v7 + 160));
      _os_assert_log();
      v17 = _os_crash();
      ___ZN20TMachOHeaderIteratorI17SizeAndEndiannessI9Pointer6412LittleEndianEE7iterateEv_block_invoke_cold_1(v17);
    }
    CFRelease(v8);
    if (a4)
      v9 = (char *)a4;
    else
      v9 = "";
    std::string::basic_string[abi:ne180100]<0>(&v20, v9);
    v10 = (void **)(v7 + 136);
    if (*(char *)(v7 + 159) < 0)
      operator delete(*v10);
    *(_OWORD *)v10 = v20;
    *(_QWORD *)(v7 + 152) = v21;
    snprintf(*(char **)(v7 + 168), *(_QWORD *)(v7 + 176), "Processing header for %s\n", a4);
    CSCppCrashReporterInfoSetter::CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v18, *(const char **)(v7 + 160));
    v11 = v19;
    v12 = v19;
    v13 = 28;
    while (1)
    {
      v14 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v7 + 120) + 32))(*(_QWORD *)(v7 + 120), v12, v13);
      if (!v14 || *v14 != -17958194)
        break;
      v13 = v14[5] + 28;
      if (v13 <= v15)
      {
        TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader((uint64_t)&v20, v7, v11, (uint64_t)v14, (uint64_t)a4, 0, 0, v16, 0, 0);
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v7 + 192) + 8))(*(_QWORD *)(v7 + 192), &v20);
        break;
      }
    }
    CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)v18);
  }
}

void sub_1B4173BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  CSCppCrashReporterInfoSetter::~CSCppCrashReporterInfoSetter((CSCppCrashReporterInfoSetter *)&a28);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  char *v9;
  size_t v10;
  const char *v11;

  return snprintf(v9, v10, v11);
}

void OUTLINED_FUNCTION_2_0(void *a1)
{
  bzero(a1, 0x801uLL);
}

void CSCppDyldLoadUnloadNotifier::CSCppDyldLoadUnloadNotifier(CSCppDyldLoadUnloadNotifier *this, const CSCppMachTaskContainer *a2, char a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  _QWORD handler[11];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v6 = dispatch_queue_create("CoreSymbolication dyld load/unload notifier queue", 0);
  *((_QWORD *)this + 7) = v6;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 65) = a3;
  v7 = MEMORY[0x1E0C809B0];
  handler[5] = MEMORY[0x1E0C809B0];
  handler[6] = 0x40000000;
  handler[7] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke;
  handler[8] = &__block_descriptor_tmp_4_3;
  handler[9] = this;
  handler[10] = a2;
  v8 = dispatch_source_create(MEMORY[0x1E0C80DA0], *((unsigned int *)a2 + 2), 1uLL, v6);
  *((_QWORD *)this + 6) = v8;
  handler[0] = v7;
  handler[1] = 0x40000000;
  handler[2] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_2;
  handler[3] = &__block_descriptor_tmp_6_2;
  handler[4] = this;
  dispatch_source_set_event_handler(v8, handler);
  dispatch_activate(*((dispatch_object_t *)this + 6));
  v9 = _dyld_process_info_notify();
  *((_QWORD *)this + 1) = v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = *((_DWORD *)a2 + 3);
      *(_DWORD *)buf = 67109376;
      v13 = v10;
      v14 = 1024;
      v15 = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to start process notifications for pid %d (%d)\n", buf, 0xEu);
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Failed to start process notifications for pid %d (%d)\n", *((_DWORD *)a2 + 3), 0);
  }
}

void sub_1B4173E0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 80) = v1;
  std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 80));
  _Unwind_Resume(a1);
}

void ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8;
  CSCppMachTaskContainer *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[7];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __n128 (*v29)(uint64_t, uint64_t);
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  std::__shared_weak_count *v32;

  v8 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v8 + 64) || *(_QWORD *)(v8 + 40) < a3)
  {
    v26 = 0;
    v27 = &v26;
    v28 = 0x3802000000;
    v29 = __Block_byref_object_copy__13;
    v30 = __Block_byref_object_dispose__13;
    v9 = *(CSCppMachTaskContainer **)(a1 + 40);
    if (*(_BYTE *)(v8 + 65))
      new_loaded_owner_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(v9, a4, a6, &v31);
    else
      new_loaded_owner_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(v9, a4, a6, &v31);
    if (v27[5])
    {
      if (*(_BYTE *)(v8 + 64))
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          v20[0] = MEMORY[0x1E0C809B0];
          v20[1] = 0x40000000;
          v20[2] = ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_1;
          v20[3] = &unk_1E6779D48;
          v20[4] = &v26;
          v20[5] = v8;
          v20[6] = a3;
          v21 = a2;
          _thread_local_invoke_notifier(v10, (uint64_t)v20);
        }
      }
      else
      {
        v11 = (std::__shared_weak_count *)v27[6];
        v22 = v27[5];
        v23 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        v24 = a3;
        v25 = a2 ^ 1;
        std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::push_back[abi:ne180100]((uint64_t *)(v8 + 16), (uint64_t)&v22);
        v14 = v23;
        if (v23)
        {
          v15 = (unint64_t *)&v23->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
    }
    _Block_object_dispose(&v26, 8);
    v17 = v32;
    if (v32)
    {
      v18 = (unint64_t *)&v32->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1B4173FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose((const void *)(v11 - 88), 8);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__13(uint64_t a1)
{
  return std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD v15[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v15[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>(result, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v9];
    v15[0] = v13;
    v15[1] = v14;
    v15[3] = &v13[32 * v12];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    v14[24] = *(_BYTE *)(a2 + 24);
    v15[2] = v14 + 32;
    std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__swap_out_circular_buffer(a1, v15);
    v8 = a1[1];
    result = std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::~__split_buffer((uint64_t)v15);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(v7 + 24) = *(_BYTE *)(a2 + 24);
    v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1B4174134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _thread_local_invoke_notifier(void *a1, uint64_t a2)
{
  if (_notifier_in_progress_key(void)::onceToken != -1)
    dispatch_once(&_notifier_in_progress_key(void)::onceToken, &__block_literal_global_41);
  pthread_setspecific(_notifier_in_progress_key(void)::notifier_key, a1);
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  if (_notifier_in_progress_key(void)::onceToken != -1)
    dispatch_once(&_notifier_in_progress_key(void)::onceToken, &__block_literal_global_41);
  return pthread_setspecific(_notifier_in_progress_key(void)::notifier_key, 0);
}

void ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_1(uint64_t a1)
{
  CSCppSymbolicator::dyld_activity(**(_QWORD **)(a1 + 40), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56) == 0);
}

uint64_t ___ZN27CSCppDyldLoadUnloadNotifierC2ERK22CSCppMachTaskContainerb_block_invoke_3(uint64_t a1)
{
  return CSCppSymbolicator::send_notification(**(_QWORD **)(a1 + 32), 4096, 0, 0);
}

void CSCppDyldLoadUnloadNotifier::~CSCppDyldLoadUnloadNotifier(CSCppDyldLoadUnloadNotifier *this)
{
  uint64_t i;
  uint64_t v3;
  void **v4;

  if (*((_QWORD *)this + 1))
  {
    MEMORY[0x1B5E36A90]();
    *((_QWORD *)this + 1) = 0;
  }
  dispatch_source_cancel(*((dispatch_source_t *)this + 6));
  if (!*((_BYTE *)this + 64))
    dispatch_activate(*((dispatch_object_t *)this + 7));
  if (_notifier_in_progress_key(void)::onceToken != -1)
    dispatch_once(&_notifier_in_progress_key(void)::onceToken, &__block_literal_global_41);
  if (!pthread_getspecific(_notifier_in_progress_key(void)::notifier_key))
    dispatch_sync(*((dispatch_queue_t *)this + 7), &__block_literal_global_2);
  dispatch_release(*((dispatch_object_t *)this + 6));
  dispatch_release(*((dispatch_object_t *)this + 7));
  v3 = *((_QWORD *)this + 2);
  for (i = *((_QWORD *)this + 3); i != v3; i = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](i - 32))
    ;
  *((_QWORD *)this + 3) = v3;
  v4 = (void **)((char *)this + 16);
  std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t CSCppDyldLoadUnloadNotifier::subscribe_to_task_main_notification(CSCppDyldLoadUnloadNotifier *this)
{
  uint64_t result;
  _QWORD v3[5];

  result = *((_QWORD *)this + 1);
  if (result)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_10_3;
    v3[4] = this;
    return MEMORY[0x1B5E36A84](result, v3);
  }
  return result;
}

uint64_t ___ZN27CSCppDyldLoadUnloadNotifier35subscribe_to_task_main_notificationEv_block_invoke_2(uint64_t a1)
{
  return CSCppSymbolicator::send_notification(**(_QWORD **)(a1 + 32), 4098, 0, 0);
}

void CSCppDyldLoadUnloadNotifier::begin_processing(CSCppDyldLoadUnloadNotifier *this, CSCppSymbolicator *a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *((_QWORD *)this + 7);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN27CSCppDyldLoadUnloadNotifier16begin_processingER17CSCppSymbolicatory_block_invoke;
  block[3] = &__block_descriptor_tmp_11_5;
  block[4] = this;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v3, block);
}

void sub_1B4174588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void new_loaded_owner_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(CSCppMachTaskContainer *a1@<X0>, unsigned int a2@<W1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int tv_sec;
  _BYTE v14[72];
  stat v15;
  _QWORD v16[15];

  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)v16, a1, 0);
  v8 = 28;
  do
  {
    v9 = (_DWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, unint64_t))(v16[0] + 32))(v16, a2, v8);
    v11 = (uint64_t)v9;
    if (!v9 || *v9 != -17958194)
      goto LABEL_10;
    v8 = v9[5] + 28;
  }
  while (v8 > v10);
  if (!a3)
  {
LABEL_10:
    CSCppMachTaskContainer::is_alive(a1);
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_11;
  }
  if (stat(a3, &v15))
    tv_sec = 0;
  else
    tv_sec = v15.st_mtimespec.tv_sec;
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::TExtendedMachOHeader((uint64_t)v14, (uint64_t)v16, a2, v11, (uint64_t)a3, tv_sec, 0, v12, 0, 0);
  TExtendedMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::symbol_owner((uint64_t)v14, a4);
LABEL_11:
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v16);
}

void sub_1B417469C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)(v1 - 184));
  _Unwind_Resume(a1);
}

void new_loaded_owner_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(CSCppMachTaskContainer *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int tv_sec;
  __int128 v13;
  char v14;
  _BYTE v15[88];
  stat v16;
  _QWORD v17[15];

  CSCppTaskMemory::CSCppTaskMemory((CSCppTaskMemory *)v17, a1, 0);
  v8 = 32;
  do
  {
    v9 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(v17[0] + 32))(v17, a2, v8);
    v11 = (uint64_t)v9;
    if (!v9 || *v9 != -17958193)
      goto LABEL_10;
    v8 = v9[5] + 32;
  }
  while (v8 > v10);
  if (!a3)
  {
LABEL_10:
    CSCppMachTaskContainer::is_alive(a1);
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_11;
  }
  if (stat(a3, &v16))
    tv_sec = 0;
  else
    tv_sec = v16.st_mtimespec.tv_sec;
  LOBYTE(v13) = 0;
  v14 = 0;
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::TExtendedMachOHeader((uint64_t)v15, (uint64_t)v17, a2, v11, (uint64_t)a3, tv_sec, 0, &v13);
  TExtendedMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::symbol_owner((uint64_t)v15, a4);
LABEL_11:
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v17);
}

void sub_1B41747C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)(v1 - 184));
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_BYTE *)(v6 - 8) = *(_BYTE *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::tuple<std::shared_ptr<CSCppSymbolOwner>,unsigned long long,BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100](v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ___ZL25_notifier_in_progress_keyv_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&_notifier_in_progress_key(void)::notifier_key, 0);
}

void CSBinaryDataRef::CSBinaryDataRef(CSBinaryDataRef *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
}

void CSBinaryDataRef::CSBinaryDataRef(CSBinaryDataRef *this, const unsigned __int8 *a2, uint64_t a3, char a4)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = &a2[a3];
  *((_BYTE *)this + 16) = a4;
  *((_BYTE *)this + 17) = 0;
}

const unsigned __int8 **CSBinaryDataRef::SetData(const unsigned __int8 **this, const unsigned __int8 *a2, uint64_t a3)
{
  const unsigned __int8 *v3;
  const unsigned __int8 *v4;

  v3 = &a2[a3];
  if (a3)
    v4 = a2;
  else
    v4 = 0;
  if (!a3)
    v3 = 0;
  *this = v4;
  this[1] = v3;
  return this;
}

uint64_t CSBinaryDataRef::Get8(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v3)
    return 0;
  v4 = *a2;
  if ((v3 - v2) <= v4)
    return 0;
  result = *(unsigned __int8 *)(v2 + v4);
  *a2 = v4 + 1;
  return result;
}

uint64_t CSBinaryDataRef::Get16(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v3 || (v4 = *a2, (v3 - v2) <= (unint64_t)(v4 + 1)))
  {
    LOWORD(v5) = 0;
  }
  else
  {
    v5 = *(unsigned __int16 *)(v2 + v4);
    v6 = bswap32(v5) >> 16;
    if (*((_BYTE *)this + 16))
      LOWORD(v5) = v6;
    *a2 = v4 + 2;
  }
  return (unsigned __int16)v5;
}

uint64_t CSBinaryDataRef::Get32(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v3)
    return 0;
  v4 = *a2;
  if ((v3 - v2) <= (unint64_t)(v4 + 3))
    return 0;
  v5 = *(_DWORD *)(v2 + v4);
  v6 = bswap32(v5);
  if (*((_BYTE *)this + 16))
    result = v6;
  else
    result = v5;
  *a2 = v4 + 4;
  return result;
}

unint64_t CSBinaryDataRef::Get64(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v3)
    return 0;
  v4 = *a2;
  if ((v3 - v2) <= (unint64_t)(v4 + 7))
    return 0;
  v5 = *(_QWORD *)(v2 + v4);
  v6 = bswap64(v5);
  if (*((_BYTE *)this + 16))
    result = v6;
  else
    result = v5;
  *a2 = v4 + 8;
  return result;
}

unint64_t CSBinaryDataRef::GetMax64(CSBinaryDataRef *this, unsigned int *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = 0;
  switch(a3)
  {
    case 1:
      v4 = *(_QWORD *)this;
      v5 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v5)
        return 0;
      v6 = *a2;
      if ((v5 - v4) <= v6)
        return 0;
      v3 = *(unsigned __int8 *)(v4 + v6);
      v7 = v6 + 1;
      goto LABEL_21;
    case 2:
      v8 = *(_QWORD *)this;
      v9 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v9)
        return 0;
      v10 = *a2;
      if ((v9 - v8) <= (unint64_t)(v10 + 1))
        return 0;
      v11 = *(unsigned __int16 *)(v8 + v10);
      v12 = bswap32(v11) >> 16;
      if (*((_BYTE *)this + 16))
        LOWORD(v11) = v12;
      *a2 = v10 + 2;
      return (unsigned __int16)v11;
    case 4:
      v3 = *(_QWORD *)this;
      v13 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v13)
        return 0;
      v14 = *a2;
      if ((v13 - v3) <= (unint64_t)(v14 + 3))
        return 0;
      LODWORD(v3) = *(_DWORD *)(v3 + v14);
      v15 = bswap32(v3);
      if (*((_BYTE *)this + 16))
        v3 = v15;
      else
        v3 = v3;
      v7 = v14 + 4;
      goto LABEL_21;
    case 8:
      v16 = *(_QWORD *)this;
      v17 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v17)
        return 0;
      v18 = *a2;
      if ((v17 - v16) <= (unint64_t)(v18 + 7))
        return 0;
      v3 = *(_QWORD *)(v16 + v18);
      v19 = bswap64(v3);
      if (*((_BYTE *)this + 16))
        v3 = v19;
      v7 = v18 + 8;
LABEL_21:
      *a2 = v7;
      return v3;
    default:
      return v3;
  }
}

unint64_t CSBinaryDataRef::GetPointer(CSBinaryDataRef *this, unsigned int *a2)
{
  return CSBinaryDataRef::GetMax64(this, a2, *((unsigned __int8 *)this + 17));
}

uint64_t CSBinaryDataRef::GetDwarfEHPtr(CSBinaryDataRef *this, unsigned int *a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t Max64;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  signed int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a3 == 255)
    return -1;
  switch(((a3 & 0x70u) - 16) >> 4)
  {
    case 0u:
      v6 = *a4 + *a2;
      goto LABEL_8;
    case 1u:
      v7 = 0;
      v6 = a4[1];
      break;
    case 2u:
      v6 = a4[2];
      goto LABEL_8;
    case 3u:
      v6 = 0;
LABEL_8:
      v7 = 1;
      break;
    case 4u:
      v8 = *((unsigned __int8 *)this + 17);
      if (!*((_BYTE *)this + 17))
        goto LABEL_13;
      v6 = 0;
      v7 = 0;
      v9 = *a2 % v8;
      v10 = v8 - v9;
      if (!v9)
        v10 = 0;
      a2 += v10;
      break;
    default:
LABEL_13:
      v6 = 0;
      v7 = 0;
      break;
  }
  Max64 = 0;
  switch(a3 & 0xF)
  {
    case 0:
      Max64 = CSBinaryDataRef::GetMax64(this, a2, *((unsigned __int8 *)this + 17));
      break;
    case 1:
      Max64 = CSBinaryDataRef::Get_ULEB128(this, a2);
      break;
    case 2:
      v18 = *(_QWORD *)this;
      v19 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v19)
        goto LABEL_46;
      v20 = *a2;
      if ((v19 - v18) <= (unint64_t)(v20 + 1))
        goto LABEL_46;
      v21 = *(unsigned __int16 *)(v18 + v20);
      v22 = bswap32(v21) >> 16;
      if (*((_BYTE *)this + 16))
        LOWORD(v21) = v22;
      *a2 = v20 + 2;
      Max64 = (unsigned __int16)v21;
      break;
    case 3:
      v23 = *(_QWORD *)this;
      v24 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v24)
        goto LABEL_46;
      v25 = *a2;
      if ((v24 - v23) <= (unint64_t)(v25 + 3))
        goto LABEL_46;
      v26 = *(_DWORD *)(v23 + v25);
      v27 = bswap32(v26);
      if (*((_BYTE *)this + 16))
        Max64 = v27;
      else
        Max64 = v26;
      v17 = v25 + 4;
      goto LABEL_34;
    case 4:
    case 0xC:
      v12 = *(_QWORD *)this;
      v13 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v13)
        goto LABEL_46;
      v14 = *a2;
      if ((v13 - v12) <= (unint64_t)(v14 + 7))
        goto LABEL_46;
      v15 = *(_QWORD *)(v12 + v14);
      v16 = bswap64(v15);
      if (*((_BYTE *)this + 16))
        Max64 = v16;
      else
        Max64 = v15;
      v17 = v14 + 8;
LABEL_34:
      *a2 = v17;
      break;
    case 9:
      Max64 = CSBinaryDataRef::Get_SLEB128(this, a2);
      break;
    case 0xA:
      v28 = *(_QWORD *)this;
      v29 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v29)
        goto LABEL_46;
      v30 = *a2;
      if ((v29 - v28) <= (unint64_t)(v30 + 1))
        goto LABEL_46;
      v31 = *(unsigned __int16 *)(v28 + v30);
      v32 = bswap32(v31) >> 16;
      if (*((_BYTE *)this + 16))
        LOWORD(v31) = v32;
      *a2 = v30 + 2;
      Max64 = (__int16)v31;
      break;
    case 0xB:
      v33 = *(_QWORD *)this;
      v34 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this >= v34 || (v35 = *a2, (v34 - v33) <= (unint64_t)(v35 + 3)))
      {
LABEL_46:
        Max64 = 0;
      }
      else
      {
        v36 = *(_DWORD *)(v33 + v35);
        v37 = bswap32(v36);
        if (*((_BYTE *)this + 16))
          v36 = v37;
        *a2 = v35 + 4;
        Max64 = v36;
      }
      break;
    default:
      break;
  }
  if (v7)
  {
    v38 = *((unsigned __int8 *)this + 17);
    if (v38 <= 7)
    {
      v39 = 1 << (8 * v38 - 1);
      if ((v39 & Max64) != 0)
        v40 = -v39;
      else
        v40 = 0;
      Max64 |= v40;
    }
  }
  return Max64 + v6;
}

uint64_t CSBinaryDataRef::Get_ULEB128(CSBinaryDataRef *this, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v2)
    return 0;
  v4 = 0;
  result = 0;
  v6 = 0;
  v7 = *a2;
  v8 = v3 + v7;
  do
  {
    if (v8 + v4 >= v2)
      break;
    v9 = *(_BYTE *)(v8 + v4);
    result |= (v9 & 0x7F) << v6;
    v6 += 7;
    ++v4;
  }
  while (v9 < 0);
  *a2 = v4 + v7;
  return result;
}

uint64_t CSBinaryDataRef::Get_SLEB128(CSBinaryDataRef *this, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v3)
    return 0;
  v4 = *a2;
  v5 = v2 + v4;
  if (v2 + v4 >= v3)
  {
    v8 = 0;
    v11 = 0;
    v10 = 0;
    v14 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v4 + v2;
    v10 = v3 - (v4 + v2);
    v11 = -7 * v9 - v3 + 8 * v3;
    while (1)
    {
      v12 = *(char *)(v5 + v6);
      v8 |= (v12 & 0x7F) << v7;
      if ((v12 & 0x80000000) == 0)
        break;
      ++v6;
      v7 += 7;
      if (v5 + v6 >= v3)
        goto LABEL_10;
    }
    v10 = v6 + 1;
    v11 = v7 + 7;
LABEL_10:
    v14 = (v12 & 0x40) == 0;
  }
  if (v11 > 31)
    v14 = 1;
  v15 = -1 << v11;
  if (v14)
    v15 = 0;
  result = v15 | v8;
  *a2 = v10 + v4;
  return result;
}

uint64_t CSBinaryDataRef::GetData(CSBinaryDataRef *this, unsigned int *a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a3)
    return 0;
  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v4)
    return 0;
  v5 = *a2;
  if ((v4 - v3) <= v5 + (unint64_t)a3 - 1)
    return 0;
  result = v3 + v5;
  *a2 = v5 + a3;
  return result;
}

void CSThreadArm::CSThreadArm(CSThreadArm *this)
{
  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E6779EB8;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 37) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
}

void CSThreadArm::~CSThreadArm(CSThreadArm *this)
{
  JUMPOUT(0x1B5E36940);
}

uint64_t CSThreadArm::GetRARegNum(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9))
    return 30;
  else
    return 14;
}

uint64_t CSThreadArm::ConvertRegisterNumberToRegisterIndex(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 9))
  {
    if (a2 < 0x11)
      return a2;
    return 0xFFFFFFFFLL;
  }
  if (a2 >= 0x22)
    return 0xFFFFFFFFLL;
  return a2;
}

uint64_t CSThreadArm::RegisterNameToRegisterIndex(CSThreadArm *this, const char *a2, int a3)
{
  char v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  const char *v8;

  if (!a2 || !*a2)
    return 0xFFFFFFFFLL;
  v4 = a3;
  v5 = 0;
  if (a3)
    v6 = g64BitRegNames_arm;
  else
    v6 = g32BitRegNames_arm;
  if (a3)
    v7 = 34;
  else
    v7 = 17;
  while (1)
  {
    v8 = v6[v5];
    if (v8)
    {
      if (!strcasecmp(a2, v8))
        break;
    }
    if (v7 == ++v5)
    {
      if ((v4 & 1) != 0)
        return 0xFFFFFFFFLL;
      if (!strcasecmp(a2, "fp"))
        return 7;
      if (!strcasecmp(a2, "r13"))
        return 13;
      if (!strcasecmp(a2, "r14"))
        return 14;
      if (!strcasecmp(a2, "r15"))
        return 15;
      if (!strcasecmp(a2, "ip"))
        return 12;
      if (strcasecmp(a2, "psr"))
        return 0xFFFFFFFFLL;
      return 16;
    }
  }
  return v5;
}

uint64_t CSThreadArm::NumRegisters(CSThreadArm *this)
{
  if (*((_BYTE *)this + 9))
    return 34;
  else
    return 17;
}

uint64_t CSThreadArm::GetFPRegNum(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9))
    return 29;
  else
    return 11;
}

uint64_t CSThreadArm::GetPCRegNum(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9))
    return 32;
  else
    return 15;
}

uint64_t CSThreadArm::ThreadGetState(int8x8_t *this, thread_read_t a2, int a3)
{
  uint64_t state;
  mach_msg_type_number_t old_stateCnt;
  __darwin_arm_thread_state64 old_state;

  (*(void (**)(int8x8_t *))(*(_QWORD *)this + 88))(this);
  this[1].i8[1] = a3;
  if (a3)
  {
    old_stateCnt = 68;
    state = thread_get_state(a2, 6, (thread_state_t)&old_state, &old_stateCnt);
    if (!(_DWORD)state)
      CSThreadArm::SetState(this, &old_state);
  }
  else
  {
    old_stateCnt = 17;
    state = thread_get_state(a2, 1, (thread_state_t)&old_state, &old_stateCnt);
    if (!(_DWORD)state)
      CSThreadArm::SetState((CSThreadArm *)this, (const __darwin_arm_thread_state *)&old_state);
  }
  return state;
}

int8x8_t CSThreadArm::SetState(int8x8_t *this, const __darwin_arm_thread_state64 *a2)
{
  int64x2_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64x2_t v6;
  int64x2_t v7;
  int8x8_t result;
  int8x8_t *v9;
  int v10;

  this[1].i8[1] = 1;
  memcpy(&this[3], a2, 0x110uLL);
  v9 = this + 37;
  v10 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v9, 0x22uLL);
  v3 = (int64x2_t)xmmword_1B41AD200;
  *(int8x8_t *)v4.i8 = this[37];
  v5 = 34;
  v6 = (uint64x2_t)vdupq_n_s64(1uLL);
  v7 = vdupq_n_s64(2uLL);
  do
  {
    v4 = vorrq_s8(v4, (int8x16_t)vshlq_u64(v6, (uint64x2_t)v3));
    v3 = vaddq_s64(v3, v7);
    v5 -= 2;
  }
  while (v5);
  result = vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  this[37] = result;
  this[2] = (int8x8_t)8;
  return result;
}

int8x8_t CSThreadArm::SetState(CSThreadArm *this, const __darwin_arm_thread_state *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t *v6;
  int64x2_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64x2_t v10;
  int64x2_t v11;
  int8x16_t v12;
  uint64x2_t v13;
  int8x16_t v14;
  int8x8_t result;
  char *v16;
  int v17;

  *((_BYTE *)this + 9) = 0;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a2->__r;
  v3 = *(_OWORD *)&a2->__r[4];
  v4 = *(_OWORD *)&a2->__r[8];
  v5 = *(_OWORD *)&a2->__r[12];
  *((_DWORD *)this + 22) = a2->__cpsr;
  *(_OWORD *)((char *)this + 72) = v5;
  *(_OWORD *)((char *)this + 56) = v4;
  *(_OWORD *)((char *)this + 40) = v3;
  v6 = (uint64_t *)((char *)this + 296);
  v16 = (char *)this + 296;
  v17 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v16, 0x22uLL);
  v7 = (int64x2_t)xmmword_1B41AD200;
  v8.i64[0] = *v6;
  v9 = 18;
  v10 = (uint64x2_t)vdupq_n_s64(1uLL);
  v11 = vdupq_n_s64(2uLL);
  do
  {
    v12 = v8;
    v13 = (uint64x2_t)v7;
    v8 = vorrq_s8(v8, (int8x16_t)vshlq_u64(v10, (uint64x2_t)v7));
    v7 = vaddq_s64(v7, v11);
    v9 -= 2;
  }
  while (v9);
  v14 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x11uLL), v13), v8, v12);
  result = vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  *((int8x8_t *)this + 37) = result;
  *((_QWORD *)this + 2) = 4;
  return result;
}

uint64_t CSThreadArm::GetSPRegNum(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9))
    return 31;
  else
    return 13;
}

unint64_t CSThreadArm::FPAppearsValidForFPBackchain(CSThreadArm *this, char a2)
{
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = (*(uint64_t (**)(CSThreadArm *))(*(_QWORD *)this + 120))(this);
  result = (*(uint64_t (**)(CSThreadArm *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 160))(this, v4, 0, 0);
  if (result)
  {
    v6 = result;
    v7 = (*(uint64_t (**)(CSThreadArm *))(*(_QWORD *)this + 128))(this);
    v8 = (*(uint64_t (**)(CSThreadArm *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 160))(this, v7, 0, 0);
    if ((a2 & 1) == 0 && v6 < v8)
      return 0;
    if (*((_BYTE *)this + 9))
    {
      if ((v6 & 7) != 0)
        return 0;
    }
    else if ((v6 & 3) != 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t CSThread::GetFP(CSThread *this, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(CSThread *))(*(_QWORD *)this + 120))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 160))(this, v4, a2, 0);
}

uint64_t CSThread::GetSP(CSThread *this, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(CSThread *))(*(_QWORD *)this + 128))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 160))(this, v4, a2, 0);
}

uint64_t CSThreadArm::GetPCRegIndex(CSThreadArm *this)
{
  if (*((_BYTE *)this + 9))
    return 32;
  else
    return 15;
}

uint64_t CSThreadArm::GetFPRegIndex(CSThreadArm *this)
{
  if (*((_BYTE *)this + 8))
    return 5;
  if (*((_BYTE *)this + 9))
    return 29;
  return 7;
}

uint64_t CSThreadArm::GetSPRegIndex(CSThreadArm *this)
{
  if (*((_BYTE *)this + 8))
    return 4;
  if (*((_BYTE *)this + 9))
    return 31;
  return 13;
}

uint64_t CSThreadArm::GetLRRegIndex(CSThreadArm *this)
{
  if (*((_BYTE *)this + 9))
    return 30;
  else
    return 14;
}

char *CSThreadArm::GetRegisterNameByIndex(CSThreadArm *this, unsigned int a2)
{
  char **v2;

  if (*((_BYTE *)this + 9))
  {
    if (a2 <= 0x21)
    {
      v2 = g64BitRegNames_arm;
      return v2[a2];
    }
  }
  else if (a2 <= 0x10)
  {
    v2 = g32BitRegNames_arm;
    return v2[a2];
  }
  return 0;
}

uint64_t CSThreadArm::GetRegisterValueByIndex(CSThreadArm *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  unsigned int v6;
  BOOL v8;

  v6 = a2;
  if (*((_BYTE *)this + 9))
  {
    if (a2 <= 0x21
      && (*(unsigned int (**)(CSThreadArm *, uint64_t))(*(_QWORD *)this + 176))(this, a2))
    {
      switch(v6)
      {
        case 0x1Du:
          a3 = *((_QWORD *)this + 32);
          break;
        case 0x1Eu:
          a3 = *((_QWORD *)this + 33);
          break;
        case 0x1Fu:
          a3 = *((_QWORD *)this + 34);
          break;
        case 0x20u:
          a3 = *((_QWORD *)this + 35);
          break;
        case 0x21u:
          a3 = *((unsigned int *)this + 72);
          break;
        default:
          a3 = *((_QWORD *)this + v6 + 3);
          break;
      }
LABEL_17:
      v8 = 1;
      if (!a4)
        return a3;
      goto LABEL_10;
    }
  }
  else if (a2 <= 0x10
         && (*(unsigned int (**)(CSThreadArm *, uint64_t))(*(_QWORD *)this + 176))(this, a2))
  {
    a3 = *((unsigned int *)this + v6 + 6);
    goto LABEL_17;
  }
  v8 = 0;
  if (a4)
LABEL_10:
    *a4 = v8;
  return a3;
}

uint64_t CSThreadArm::SetRegisterValueByIndex(CSThreadArm *this, unsigned int a2, uint64_t a3)
{
  uint64_t v3;

  if (*((_BYTE *)this + 9))
  {
    if (a2 <= 0x21)
    {
      switch(a2)
      {
        case 0x1Du:
          *((_QWORD *)this + 32) = a3;
          break;
        case 0x1Eu:
          *((_QWORD *)this + 33) = a3;
          break;
        case 0x1Fu:
          *((_QWORD *)this + 34) = a3;
          break;
        case 0x20u:
          *((_QWORD *)this + 35) = a3;
          break;
        case 0x21u:
          *((_DWORD *)this + 72) = a3;
          break;
        default:
          *((_QWORD *)this + a2 + 3) = a3;
          break;
      }
      goto LABEL_13;
    }
  }
  else if (a2 <= 0x10)
  {
    *((_DWORD *)this + a2 + 6) = a3;
LABEL_13:
    v3 = 1;
    goto LABEL_14;
  }
  v3 = 0;
LABEL_14:
  (*(void (**)(CSThreadArm *))(*(_QWORD *)this + 184))(this);
  return v3;
}

uint64_t CSThreadArm::RegisterIsPreservedByABI(_BYTE *a1)
{
  unsigned int v1;

  if (a1[9])
    return 0;
  v1 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 96))(a1);
  if (v1 > 0xC)
    return 0;
  else
    return (0x1DF0u >> v1) & 1;
}

void CSThreadArm::InvalidateAllRegisters(CSThreadArm *this)
{
  char *v1;
  int v2;

  v1 = (char *)this + 296;
  v2 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v1, 0x22uLL);
}

uint64_t CSThreadArm::GetRegisterIsValidByIndex(CSThreadArm *this, unsigned int a2)
{
  if (a2 > 0x21)
    return 0;
  else
    return (*((_QWORD *)this + 37) >> a2) & 1;
}

uint64_t CSThreadArm::SetRegisterIsValidByIndex(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;

  if (a3)
  {
    if (a2 >= 0x22)
      std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
    v3 = *(_QWORD *)(this + 296) | (1 << a2);
  }
  else
  {
    if (a2 >= 0x22)
      std::__throw_out_of_range[abi:ne180100]("bitset reset argument out of range");
    v3 = *(_QWORD *)(this + 296) & ~(1 << a2);
  }
  *(_QWORD *)(this + 296) = v3;
  return this;
}

uint64_t CSThread::GetRegisterValue(CSThread *this, const char *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(CSThread *, const char *, _QWORD))(*(_QWORD *)this + 144))(this, a2, *((unsigned __int8 *)this + 9));
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, BOOL *))(*(_QWORD *)this + 160))(this, v7, a3, a4);
}

uint64_t CSThread::GetRegisterValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, v8, a4, a5);
}

uint64_t CSThread::SetRegisterValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v6, a4);
}

uint64_t CSThread::SetRegisterIsValid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v6, a4);
}

uint64_t CSThread::GetPC(CSThread *this, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(CSThread *))(*(_QWORD *)this + 112))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 160))(this, v4, a2, 0);
}

uint64_t CSThread::GetLR(CSThread *this, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(CSThread *))(*(_QWORD *)this + 136))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 160))(this, v4, a2, 0);
}

uint64_t CSThread::SetPC(CSThread *this, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(CSThread *))(*(_QWORD *)this + 112))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(_QWORD *)this + 168))(this, v4, a2);
}

uint64_t CSThread::SetFP(CSThread *this, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(CSThread *))(*(_QWORD *)this + 120))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(_QWORD *)this + 168))(this, v4, a2);
}

uint64_t CSThread::SetSP(CSThread *this, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(CSThread *))(*(_QWORD *)this + 128))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(_QWORD *)this + 168))(this, v4, a2);
}

uint64_t CSThread::SetLR(CSThread *this, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(CSThread *))(*(_QWORD *)this + 136))(this);
  return (*(uint64_t (**)(CSThread *, uint64_t, uint64_t))(*(_QWORD *)this + 168))(this, v4, a2);
}

void *CSThreadArm::assign(CSThreadArm *this, const CSThread *a2)
{
  void *result;

  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  result = memcpy((char *)this + 24, (char *)a2 + 24, 0x110uLL);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  return result;
}

uint64_t CSThreadArm::UnwindThroughSigtramp()
{
  return 0;
}

char **CSCallFrameInfo::FindCallFrameInfoForBinary@<X0>(char **this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = *this;
  v4 = this[1];
  if (*this == v4)
    goto LABEL_13;
  v5 = (v4 - v3) >> 4;
  do
  {
    v6 = v5 >> 1;
    v7 = &v3[16 * (v5 >> 1)];
    v9 = *(_QWORD *)v7;
    v8 = v7 + 16;
    v5 += ~(v5 >> 1);
    if (*(_QWORD *)(v9 + 32) + *(_QWORD *)(v9 + 24) <= a2)
      v3 = v8;
    else
      v5 = v6;
  }
  while (v5);
  if (v3 == v4 || (v10 = *(_QWORD *)v3, a2 - *(_QWORD *)(*(_QWORD *)v3 + 24) >= *(_QWORD *)(*(_QWORD *)v3 + 32)))
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v11 = *((_QWORD *)v3 + 1);
    *a3 = v10;
    a3[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  return this;
}

uint64_t CSCallFrameInfo::GuessIsFOmitFramePointerCFI(CSCallFrameInfo *this, const CSThread *a2)
{
  return 0;
}

uint64_t CSCallFrameInfo::UnwindThreadState(char **a1, CSThread *a2, uint64_t a3, int a4, CSThread *a5)
{
  uint64_t v5;
  uint64_t PC;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v17[2];
  std::__shared_weak_count *v18;

  v5 = 0;
  if (a2 && a5)
  {
    (*(void (**)(CSThread *))(*(_QWORD *)a5 + 16))(a5);
    PC = CSThread::GetPC(a2, -1);
    if (PC == -1)
    {
      return 0;
    }
    else
    {
      if (PC)
        v12 = (void *)(PC - (a4 ^ 1u));
      else
        v12 = 0;
      CSCallFrameInfo::FindCallFrameInfoForBinary(a1, (unint64_t)v12, v17);
      if (*(_QWORD *)v17)
        v5 = CSCallFrameInfoForBinary::UnwindThreadState(*(CSCallFrameInfoForBinary **)v17, a2, a3, a5, v12);
      else
        v5 = 0;
      v13 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
  return v5;
}

void sub_1B4175D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CSCallFrameInfo::ParseCFIForTask(CSCallFrameInfo *this)
{
  uint64_t v1;
  unsigned int v2;
  __int128 *v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE v6[136];
  void *__p;
  char v8;
  uint64_t (**v9)();
  uint64_t v10;
  int v11;
  _BYTE v12[24];
  _BYTE v13[12];
  int v14;
  uint64_t v15;
  char v16;
  _BYTE v17[6151];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = MEMORY[0x1E0C80A78](this);
  v20 = *MEMORY[0x1E0C80C00];
  CSCppMachTask::CSCppMachTask((CSCppMachTask *)v12, v2, 0);
  if (v16)
  {
    v9 = off_1E677A148;
    v10 = v1;
    v11 = v14;
    TMachOHeaderIterator<SizeAndEndianness<Pointer64,LittleEndian>>::TMachOHeaderIterator((uint64_t)v6, (TMachOHeaderIterator *)v13, v15, (uint64_t)v17, v18, v19, 0, (uint64_t)&v9);
  }
  else
  {
    v9 = off_1E677A1E8;
    v10 = v1;
    v11 = v14;
    TMachOHeaderIterator<SizeAndEndianness<Pointer32,LittleEndian>>::TMachOHeaderIterator((uint64_t)v6, (TMachOHeaderIterator *)v13, v15, (uint64_t)v17, v18, v19, 0, (uint64_t)&v9);
  }
  if (v8 < 0)
    operator delete(__p);
  CSCppTaskMemory::~CSCppTaskMemory((CSCppTaskMemory *)v6);
  v3 = *(__int128 **)(v1 + 8);
  v4 = 126 - 2 * __clz(((uint64_t)v3 - *(_QWORD *)v1) >> 4);
  if (v3 == *(__int128 **)v1)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *,false>(*(__int128 **)v1, v3, v5, 1);
  CSCppMachTask::~CSCppMachTask((CSCppMachTask *)v12);
}

void sub_1B4175E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *,false>(__int128 *a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  __int128 *v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 *v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 *v108;
  __int128 *v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;

_QWORD *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 24);
  v5 = *result;
  v6 = *a3;
  v7 = *(_QWORD *)(*a3 + 24);
  if (v4 < *(_QWORD *)(*result + 24))
  {
    if (v7 >= v4)
    {
      *result = v3;
      *a2 = v5;
      v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      v13 = *a2;
      if (*(_QWORD *)(*a3 + 24) >= *(_QWORD *)(*a2 + 24))
        return result;
      *a2 = *a3;
      *a3 = v13;
      v8 = a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v6;
      *a3 = v5;
      v8 = a3 + 1;
    }
    v9 = v8;
    goto LABEL_10;
  }
  if (v7 < v4)
  {
    *a2 = v6;
    *a3 = v3;
    v9 = a2 + 1;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v11 = *result;
    if (*(_QWORD *)(*a2 + 24) < *(_QWORD *)(*result + 24))
    {
      *result++ = *a2;
      *a2 = v11;
LABEL_10:
      v14 = *result;
      *result = *v9;
      *v9 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(char *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 2);
      v7 = *(_QWORD *)a1;
      if (*(_QWORD *)(v6 + 24) < *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        *(_QWORD *)a1 = v6;
        *((_QWORD *)a2 - 2) = v7;
        v8 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6);
      v20 = *((_QWORD *)a2 - 2);
      v21 = *((_QWORD *)a1 + 6);
      if (*(_QWORD *)(v20 + 24) < *(_QWORD *)(v21 + 24))
      {
        *((_QWORD *)a1 + 6) = v20;
        *((_QWORD *)a2 - 2) = v21;
        v22 = *((_QWORD *)a1 + 7);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v22;
        v23 = *((_QWORD *)a1 + 6);
        v24 = *(_QWORD *)(v23 + 24);
        v25 = *((_QWORD *)a1 + 4);
        if (v24 < *(_QWORD *)(v25 + 24))
        {
          v26 = *((_QWORD *)a1 + 5);
          v27 = *((_QWORD *)a1 + 7);
          *((_QWORD *)a1 + 4) = v23;
          *((_QWORD *)a1 + 5) = v27;
          *((_QWORD *)a1 + 6) = v25;
          *((_QWORD *)a1 + 7) = v26;
          v28 = *((_QWORD *)a1 + 2);
          if (v24 < *(_QWORD *)(v28 + 24))
          {
            v29 = *((_QWORD *)a1 + 3);
            *((_QWORD *)a1 + 2) = v23;
            *((_QWORD *)a1 + 3) = v27;
            *((_QWORD *)a1 + 4) = v28;
            *((_QWORD *)a1 + 5) = v29;
            v30 = *(_QWORD *)a1;
            if (v24 < *(_QWORD *)(*(_QWORD *)a1 + 24))
            {
              v31 = *((_QWORD *)a1 + 1);
              *(_QWORD *)a1 = v23;
              *((_QWORD *)a1 + 1) = v27;
              *((_QWORD *)a1 + 2) = v30;
              *((_QWORD *)a1 + 3) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (*(_QWORD *)(*(_QWORD *)v10 + 24) < *(_QWORD *)(*(_QWORD *)v9 + 24))
    {
      v13 = *((_QWORD *)v10 + 1);
      *(_QWORD *)&v32 = *(_QWORD *)v10;
      *((_QWORD *)&v32 + 1) = v13;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      v14 = v11;
      while (1)
      {
        std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100]((uint64_t)&a1[v14 + 48], (__int128 *)&a1[v14 + 32]);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(*(_QWORD *)&a1[v14 + 16] + 24);
        v14 -= 16;
        if (*(_QWORD *)(v32 + 24) >= v15)
        {
          v16 = (uint64_t)&a1[v14 + 48];
          goto LABEL_13;
        }
      }
      v16 = (uint64_t)a1;
LABEL_13:
      std::shared_ptr<CSCppSymbolOwnerTimeline>::operator=[abi:ne180100](v16, &v32);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask(unsigned int)::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CSCallFrameInfo::ParseCFIForTask::$_0 &,std::shared_ptr<CSCallFrameInfoForBinary> *>(a1, a2, a3);
  v9 = *a3;
  if (*(_QWORD *)(*a4 + 24) < *(_QWORD *)(*a3 + 24))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = *a2;
    if (*(_QWORD *)(*a3 + 24) < *(_QWORD *)(*a2 + 24))
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *a1;
      if (*(_QWORD *)(*a2 + 24) < *(_QWORD *)(*a1 + 24))
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

void CFIIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
  CreateCallFrameInfoForBinary<SizeAndEndianness<Pointer64,LittleEndian>>(*(char ***)(a1 + 8), a2);
}

void CFIIterator<SizeAndEndianness<Pointer64,LittleEndian>>::process_failed_header(uint64_t a1, const char *a2)
{
  int v4;
  const char *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 16);
    v5 = "NULL";
    if (a2)
      v5 = a2;
    v6[0] = 67109378;
    v6[1] = v4;
    v7 = 2080;
    v8 = v5;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "pid %d Failure reading CFI info at %s\n", (uint8_t *)v6, 0x12u);
  }
}

void CFIIterator<SizeAndEndianness<Pointer64,LittleEndian>>::~CFIIterator()
{
  JUMPOUT(0x1B5E36940);
}

void CreateCallFrameInfoForBinary<SizeAndEndianness<Pointer64,LittleEndian>>(char **a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Current;
  char IsLittleEndian;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned __int8 v21;
  char v22;
  unsigned __int8 *v23;
  __int128 v24;
  _QWORD v25[2];

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v5 = TMachOHeader<SizeAndEndianness<Pointer64,LittleEndian>>::segment_named(*(_QWORD *)(a2 + 24), "__TEXT");
  if (v5)
  {
    v6 = (_QWORD *)v5;
    v7 = TSegmentLoadCommand<SizeAndEndianness<Pointer64,LittleEndian>>::section_named(v5, "__eh_frame");
    if (v7)
    {
      v8 = *((_QWORD *)v7 + 5);
      if (v8)
      {
        if (v4)
        {
          v9 = *(_QWORD *)(a2 + 32);
          v10 = v9 + *((_QWORD *)v7 + 4);
          v11 = v6 + 3;
        }
        else
        {
          v9 = *(_QWORD *)(a2 + 16);
          v10 = v9 + *((unsigned int *)v7 + 12);
          v11 = v6 + 5;
        }
        v12 = v9 + *v11;
        v25[0] = v10;
        v25[1] = v8;
        v13 = v6[6];
        *(_QWORD *)&v24 = v12;
        *((_QWORD *)&v24 + 1) = v13;
        v23 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
        if (v23)
        {
          Current = CSArchitectureGetCurrent();
          IsLittleEndian = CSArchitectureIsLittleEndian(Current);
          v22 = IsLittleEndian ^ CSArchitectureIsLittleEndian(*(unsigned int *)(*(_QWORD *)(a2 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFF) << 32));
          v21 = CSArchitectureIs32Bit(*(unsigned int *)(*(_QWORD *)(a2 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFF) << 32));
          v19 = *(char **)(a2 + 48);
          std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>(&v19, &v24, (uint64_t)v25, &v23, &v22, &v21, &v20);
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](a1, &v20);
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
          if (*((_QWORD *)&v20 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
      }
    }
  }
}

void sub_1B4176EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>@<X0>(char **a1@<X1>, _OWORD *a2@<X2>, uint64_t a3@<X3>, unsigned __int8 **a4@<X4>, char *a5@<X5>, unsigned __int8 *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0xB8uLL);
  result = std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__shared_ptr_emplace[abi:ne180100]<char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,std::allocator<CSCallFrameInfoForBinary>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B4176F4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__shared_ptr_emplace[abi:ne180100]<char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,std::allocator<CSCallFrameInfoForBinary>,0>(_QWORD *a1, char **a2, _OWORD *a3, uint64_t a4, unsigned __int8 **a5, char *a6, unsigned __int8 *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E677A198;
  CSCallFrameInfoForBinary::CSCallFrameInfoForBinary((uint64_t)(a1 + 3), *a2, a3, a4, *a5, *a6, *a7);
  return a1;
}

void sub_1B4176FA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E677A198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E677A198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E36940);
}

void std::__shared_ptr_emplace<CSCallFrameInfoForBinary>::__on_zero_shared(uint64_t a1)
{
  CSCallFrameInfoForBinary::~CSCallFrameInfoForBinary((CSCallFrameInfoForBinary *)(a1 + 24));
}

uint64_t CSCallFrameInfoForBinary::CSCallFrameInfoForBinary(uint64_t a1, char *a2, _OWORD *a3, uint64_t a4, unsigned __int8 *a5, char a6, int a7)
{
  _QWORD *v13;
  const unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t *i;

  v13 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  *(_OWORD *)(v13 + 3) = *a3;
  *(_OWORD *)(v13 + 5) = *(_OWORD *)a4;
  v14 = (const unsigned __int8 **)(v13 + 7);
  CSBinaryDataRef::CSBinaryDataRef((CSBinaryDataRef *)(v13 + 7));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v15 = CSRangeOfDyldSharedCacheInCurrentProcess();
  v16 = *(_QWORD *)(a4 + 8);
  if ((unint64_t)&a5[-v15] >= v17)
  {
    std::vector<unsigned char>::reserve((unint64_t *)(a1 + 80), *(_QWORD *)(a4 + 8));
    v18 = *(_QWORD *)(a4 + 8);
    for (i = (unint64_t *)(a1 + 80); v18; --v18)
      std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](&i, a5++);
    a5 = *(unsigned __int8 **)(a1 + 80);
    v16 = *(_QWORD *)(a1 + 88) - (_QWORD)a5;
  }
  CSBinaryDataRef::SetData(v14, a5, v16);
  *(_BYTE *)(a1 + 72) = a6;
  if (a7)
    v19 = 4;
  else
    v19 = 8;
  *(_BYTE *)(a1 + 73) = v19;
  return a1;
}

void sub_1B417711C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

unint64_t **std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](unint64_t **a1, _BYTE *a2)
{
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v4 = *a1;
  v6 = (_BYTE *)(*a1)[1];
  v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = &v6[-*v4];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = *a2;
    v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

void CSCallFrameInfoForBinary::~CSCallFrameInfoForBinary(CSCallFrameInfoForBinary *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  std::__tree<TRange<Pointer64>>::destroy((uint64_t)this + 112, *((_QWORD **)this + 15));
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  CSCppAddressSet::sort((CSCallFrameInfoForBinary *)((char *)this + 56));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void CFIIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_header(uint64_t a1, uint64_t a2)
{
  CreateCallFrameInfoForBinary<SizeAndEndianness<Pointer32,LittleEndian>>(*(char ***)(a1 + 8), a2);
}

void CFIIterator<SizeAndEndianness<Pointer32,LittleEndian>>::process_failed_header(uint64_t a1, const char *a2)
{
  int v4;
  const char *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 16);
    v5 = "NULL";
    if (a2)
      v5 = a2;
    v6[0] = 67109378;
    v6[1] = v4;
    v7 = 2080;
    v8 = v5;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "pid %d Failure reading CFI info at %s\n", (uint8_t *)v6, 0x12u);
  }
}

void CFIIterator<SizeAndEndianness<Pointer32,LittleEndian>>::~CFIIterator()
{
  JUMPOUT(0x1B5E36940);
}

void CreateCallFrameInfoForBinary<SizeAndEndianness<Pointer32,LittleEndian>>(char **a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  _DWORD *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t Current;
  char IsLittleEndian;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned __int8 v21;
  char v22;
  unsigned __int8 *v23;
  __int128 v24;
  _QWORD v25[2];

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v5 = TMachOHeader<SizeAndEndianness<Pointer32,LittleEndian>>::segment_named(*(_QWORD *)(a2 + 24), "__TEXT");
  if (v5)
  {
    v6 = (_DWORD *)v5;
    v7 = TSegmentLoadCommand<SizeAndEndianness<Pointer32,LittleEndian>>::section_named(v5, "__eh_frame");
    if (v7)
    {
      v8 = *((unsigned int *)v7 + 9);
      if ((_DWORD)v8)
      {
        if (v4)
        {
          v9 = *(_DWORD *)(a2 + 32);
          v10 = v9 + *((_DWORD *)v7 + 8);
          v11 = v6 + 6;
        }
        else
        {
          v9 = *(_DWORD *)(a2 + 16);
          v10 = v9 + *((_DWORD *)v7 + 10);
          v11 = v6 + 8;
        }
        v12 = *v11;
        v25[0] = v10;
        v25[1] = v8;
        v13 = v6[9];
        *(_QWORD *)&v24 = (v9 + v12);
        *((_QWORD *)&v24 + 1) = v13;
        v23 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
        if (v23)
        {
          Current = CSArchitectureGetCurrent();
          IsLittleEndian = CSArchitectureIsLittleEndian(Current);
          v22 = IsLittleEndian ^ CSArchitectureIsLittleEndian(*(unsigned int *)(*(_QWORD *)(a2 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFF) << 32));
          v21 = CSArchitectureIs32Bit(*(unsigned int *)(*(_QWORD *)(a2 + 24) + 4) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFF) << 32));
          v19 = *(char **)(a2 + 40);
          std::allocate_shared[abi:ne180100]<CSCallFrameInfoForBinary,std::allocator<CSCallFrameInfoForBinary>,char const*,_CSRange &,_CSRange &,unsigned char const*&,BOOL &,BOOL &,void>(&v19, &v24, (uint64_t)v25, &v23, &v22, &v21, &v20);
          std::vector<std::shared_ptr<CSCppSymbolOwner>>::push_back[abi:ne180100](a1, &v20);
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
          if (*((_QWORD *)&v20 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
      }
    }
  }
}

void sub_1B41775E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<CSCppSymbolOwner>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *CSCppCoreFileMemory::CSCppCoreFileMemory(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_1E677A238;
  a1[1] = retain_mapped_memory_cache(a2);
  a1[2] = 0;
  return a1;
}

void CSCppCoreFileMemory::~CSCppCoreFileMemory(CSCppCoreFileMemory *this)
{
  *(_QWORD *)this = &off_1E677A238;
  release_core_file_mapped_memory_cache(*((_QWORD *)this + 1));
}

{
  CSCppCoreFileMemory::~CSCppCoreFileMemory(this);
  JUMPOUT(0x1B5E36940);
}

uint64_t CSCppCoreFileMemory::footprint(CSCppCoreFileMemory *this)
{
  return *((_QWORD *)this + 2);
}

_QWORD *CSCppCoreFileMemory::to_string@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CSCppCoreFileMemory");
}

uint64_t CSCppCoreFileMemory::bytes_at(uint64_t a1, tree *a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  v5 = mapped_memory_read(*(const char **)(a1 + 8), a2, a3, &v7);
  result = 0;
  if (!v5)
  {
    *(_QWORD *)(a1 + 16) += a3;
    return v7;
  }
  return result;
}

void CSCppCoreFileMemory::clear_unretained_reconstructed_core_file_memory(CSCppCoreFileMemory *this)
{
  clear_mapped_memory(*((_QWORD *)this + 1));
  *((_QWORD *)this + 2) = 0;
}

uint64_t CSCppCoreFileMemory::get_unretained_reconstructed_core_file_memory(CSCppCoreFileMemory *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t CSCppCoreFileMemory::is_task(CSCppCoreFileMemory *this)
{
  return 1;
}

uint64_t CSCppCoreFileMemory::is_dyld_shared_cache(CSCppCoreFileMemory *this)
{
  return 0;
}

uint64_t create_sampling_context_for_task_pid_symbolicator(task_name_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  uint64_t v10;
  kern_return_t v11;
  integer_t v12;
  uint64_t v13;
  int FlagsForNListOnlyData;
  uint64_t v15;
  CSCallFrameInfo *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t SharedCacheBaseAddress;
  uint64_t AotSharedCacheAddress;
  UUID *SharedCacheUUID;
  UUID *AotSharedCacheUUID;
  uint64_t runtime_location;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t SectionWithName;
  uint64_t v30;
  uint64_t v31;
  mach_vm_address_t Range;
  mach_msg_type_number_t v33;
  _QWORD v35[5];
  _QWORD v36[6];
  integer_t task_info_out[2];
  integer_t *v38;
  uint64_t v39;
  __n128 (*v40)(uint64_t, uint64_t);
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  int v45;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_msg_type_number_t infoCnt;
  mach_msg_type_number_t task_info_outCnt[12];
  natural_t nesting_depth;

  if ((a5 & 5) == 1)
    v9 = a5;
  else
    v9 = a5 | 2;
  v10 = operator new();
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_QWORD *)(v10 + 112) = v10 + 120;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)(v10 + 152) = 0;
  *(_QWORD *)(v10 + 136) = v10 + 144;
  *(_DWORD *)v10 = a1;
  *(_DWORD *)(v10 + 4) = a2;
  task_info_outCnt[0] = 1;
  v11 = task_info(a1, 0x1Cu, task_info_out, task_info_outCnt);
  v12 = task_info_out[0];
  if (v11)
    v12 = 0;
  *(_DWORD *)(v10 + 164) = v12;
  *(_BYTE *)(v10 + 168) = CSTaskIsTranslated(a1);
  *(_DWORD *)(v10 + 160) = v9;
  v45 = 0;
  v44 = 4;
  if (sysctlbyname("machdep.virtual_address_size", &v45, &v44, 0, 0))
    v13 = -1;
  else
    v13 = ~(-1 << v45);
  *(_QWORD *)(v10 + 176) = v13;
  *(_QWORD *)(v10 + 8) = task_get_mapped_memory_cache_with_label(a1, (uint64_t)"CSSampling");
  if (CSIsNull(a3, a4))
  {
    if ((v9 & 0x10) != 0)
    {
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
    }
    else
    {
      FlagsForNListOnlyData = CSSymbolicatorGetFlagsForNListOnlyData();
      *(_QWORD *)(v10 + 24) = CSSymbolicatorCreateWithTaskFlagsAndNotification(a1, FlagsForNListOnlyData | 3u, 0);
      *(_QWORD *)(v10 + 32) = v15;
    }
  }
  else
  {
    CSRetain(a3, a4);
    *(_QWORD *)(v10 + 24) = a3;
    *(_QWORD *)(v10 + 32) = a4;
  }
  init_sampling_context_from_symbols((sampling_context_t *)v10, 1);
  *(_QWORD *)(v10 + 16) = 0;
  if ((v9 & 0xA) == 2)
  {
    v16 = (CSCallFrameInfo *)operator new();
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)(v10 + 16) = v16;
    CSCallFrameInfo::ParseCFIForTask(v16);
  }
  if (*(_BYTE *)(v10 + 168))
  {
    v17 = *(_QWORD *)(v10 + 24);
    v18 = *(_QWORD *)(v10 + 32);
    SharedCacheBaseAddress = CSSymbolicatorGetSharedCacheBaseAddress(v17, v18);
    AotSharedCacheAddress = CSSymbolicatorGetAotSharedCacheAddress(v17, v18);
    SharedCacheUUID = CSSymbolicatorGetSharedCacheUUID(v17, v18);
    AotSharedCacheUUID = CSSymbolicatorGetAotSharedCacheUUID(v17, v18);
    CSInitializeAotSymbolicationSession((uint64_t *)(v10 + 184), SharedCacheBaseAddress, AotSharedCacheAddress, (const CFUUIDBytes *)SharedCacheUUID, (const CFUUIDBytes *)AotSharedCacheUUID);
    if (MEMORY[0x1E0DE2EB8])
    {
      runtime_location = rosetta_get_runtime_location();
      *(_QWORD *)task_info_out = 0;
      v38 = task_info_out;
      v39 = 0x3802000000;
      v40 = __Block_byref_object_copy__14;
      v41 = __Block_byref_object_dispose__14;
      v42 = 0;
      v43 = 0;
      v25 = *(_QWORD *)(v10 + 24);
      v24 = *(_QWORD *)(v10 + 32);
      v26 = MEMORY[0x1E0C809B0];
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 0x40000000;
      v36[2] = __create_sampling_context_for_task_pid_symbolicator_block_invoke;
      v36[3] = &unk_1E677A290;
      v36[4] = task_info_out;
      v36[5] = runtime_location;
      CSSymbolicatorForeachSymbolOwnerAtTime(v25, v24, 0x8000000000000000, (uint64_t)v36);
      if (!CSIsNull(*((_QWORD *)v38 + 5), *((_QWORD *)v38 + 6)))
      {
        v27 = *((_QWORD *)v38 + 5);
        v28 = *((_QWORD *)v38 + 6);
        v35[0] = v26;
        v35[1] = 0x40000000;
        v35[2] = __create_sampling_context_for_task_pid_symbolicator_block_invoke_2;
        v35[3] = &__block_descriptor_tmp_6_3;
        v35[4] = v10;
        CSSymbolOwnerForeachSegment(v27, v28, (uint64_t)v35);
        SectionWithName = CSSymbolOwnerGetSectionWithName(*((_QWORD *)v38 + 5), *((_QWORD *)v38 + 6), (uint64_t)"__TEXT runtime_entry");
        v31 = v30;
        if (!CSIsNull(SectionWithName, v30))
        {
          Range = CSRegionGetRange(SectionWithName, v31);
          nesting_depth = 999999;
          infoCnt = 12;
          address = Range;
          size = 0;
          if (mach_vm_region_recurse(*(_DWORD *)v10, &address, &size, &nesting_depth, (vm_region_recurse_info_t)task_info_outCnt, &infoCnt)|| address > Range|| size + address <= Range)
          {
            v33 = 0;
          }
          else
          {
            v33 = task_info_outCnt[10];
          }
          *(_DWORD *)(v10 + 208) = v33;
        }
      }
      _Block_object_dispose(task_info_out, 8);
    }
  }
  return v10;
}

void sub_1B4177AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t init_sampling_context_from_symbols(sampling_context_t *a1, int a2)
{
  uint64_t result;
  uint64_t SymbolWithMangledNameFromSymbolOwnerWithNameAtTime;
  uint64_t v6;
  uint64_t v7;
  tree *Range;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = CSIsNull(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
  if ((result & 1) == 0)
  {
    if (!*((_QWORD *)a1 + 13) && (*((_BYTE *)a1 + 160) & 8) == 0)
    {
      SymbolWithMangledNameFromSymbolOwnerWithNameAtTime = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4), (uint64_t)"_dispatch_queue_offsets", (uint64_t)"libdispatch.dylib", 0x8000000000000000);
      v7 = v6;
      result = CSIsNull(SymbolWithMangledNameFromSymbolOwnerWithNameAtTime, v6);
      if ((result & 1) == 0)
      {
        Range = (tree *)CSSymbolGetRange(SymbolWithMangledNameFromSymbolOwnerWithNameAtTime, v7);
        v19 = 0;
        result = mapped_memory_read(*((const char **)a1 + 1), Range, 34, &v19);
        if (!(_DWORD)result)
        {
          if (v19)
          {
            result = (uint64_t)malloc_type_malloc(0x22uLL, 0x1000040A995D64BuLL);
            *((_QWORD *)a1 + 13) = result;
            if (result)
            {
              v9 = *(_WORD *)(v19 + 32);
              v10 = *(_OWORD *)(v19 + 16);
              *(_OWORD *)result = *(_OWORD *)v19;
              *(_OWORD *)(result + 16) = v10;
              *(_WORD *)(result + 32) = v9;
            }
          }
        }
      }
    }
    if (a2)
    {
      if (!*((_QWORD *)a1 + 6))
      {
        v11 = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4), (uint64_t)"__sigtramp", (uint64_t)"libsystem_platform.dylib", 0x8000000000000000);
        v13 = v12;
        result = CSIsNull(v11, v12);
        if ((result & 1) == 0)
        {
          result = CSSymbolGetRange(v11, v13);
          *((_QWORD *)a1 + 5) = result;
          *((_QWORD *)a1 + 6) = v14;
        }
      }
      if (!*((_QWORD *)a1 + 8))
      {
        v15 = CSSymbolicatorGetSymbolWithMangledNameFromSymbolOwnerWithNameAtTime(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4), (uint64_t)"_start_wqthread", (uint64_t)"libsystem_pthread.dylib", 0x8000000000000000);
        v17 = v16;
        result = CSIsNull(v15, v16);
        if ((result & 1) == 0)
        {
          result = CSSymbolGetRange(v15, v17);
          *((_QWORD *)a1 + 7) = result;
          *((_QWORD *)a1 + 8) = v18;
        }
      }
    }
  }
  return result;
}

void sampling_context_t::~sampling_context_t(char **this)
{
  char *v2;

  std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy((uint64_t)(this + 17), this[18]);
  std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy((uint64_t)(this + 14), this[15]);
  v2 = this[10];
  if (v2)
  {
    this[11] = v2;
    operator delete(v2);
  }
}

uint64_t *CSInitializeAotSymbolicationSession(uint64_t *result, uint64_t a2, uint64_t a3, const CFUUIDBytes *a4, const CFUUIDBytes *a5)
{
  BOOL v5;

  if (MEMORY[0x1E0DE2EA0])
    v5 = MEMORY[0x1E0DE2EA8] == 0;
  else
    v5 = 1;
  if (!v5 && result != 0 && a4 != 0 && a2 != 0 && a3 != 0 && a5 != 0)
  {
    *result = aot_symbolication_session_create();
    return (uint64_t *)aot_init_shared_cache_info();
  }
  return result;
}

unint64_t __create_sampling_context_for_task_pid_symbolicator_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v7;
  const char *v8[2];

  v8[0] = (const char *)CSSymbolOwnerGetPath(a2, a3);
  v8[1] = (const char *)strlen(v8[0]);
  result = std::string_view::find[abi:ne180100]((uint64_t *)v8, *(char **)(a1 + 40), 0);
  if (!result
    || (result = std::string_view::find[abi:ne180100]((uint64_t *)v8, "/usr/local/libexec/rosetta/runtime", 0)) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_QWORD *)(v7 + 40) = a2;
    *(_QWORD *)(v7 + 48) = a3;
  }
  return result;
}

unint64_t __create_sampling_context_for_task_pid_symbolicator_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *Name;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;

  Name = CSRegionGetName(a2, a3);
  result = strncmp(Name, "__TEXT", 6uLL);
  if (!(_DWORD)result)
  {
    result = CSRegionGetRange(a2, a3);
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v8 + 192) = result;
    *(_QWORD *)(v8 + 200) = v9;
  }
  return result;
}

uint64_t CSDestroyAotSymbolicationSession(uint64_t result)
{
  if (result)
  {
    if (MEMORY[0x1E0DE2EB0])
      return aot_symbolication_session_destroy();
  }
  return result;
}

uint64_t CSSymbolicatorTranslateFromNativeAddress(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  if ((a1 & 7 | (8 * (a2 & 3))) != 2)
    return 0;
  v7[1] = v3;
  v7[2] = v4;
  v7[0] = 0;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 56);
  if (!*(_BYTE *)(v5 + 16))
    return 0;
  translate_aot_frame(a1, a2, *(_QWORD *)(v5 + 8), a3, v7);
  return v7[0];
}

BOOL translate_aot_frame(char a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  BOOL v9;
  _BOOL8 v10;
  BOOL v11;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = CSIsNull(a1, a2);
  v10 = 0;
  if (a3 && !v9)
  {
    v11 = !MEMORY[0x1E0DE2E90] || MEMORY[0x1E0DE2E98] == 0;
    if (!v11 && MEMORY[0x1E0DE2E80] != 0)
    {
      v14 = 0;
      v15 = &v14;
      v16 = 0x2000000000;
      v17 = 0;
      if (aot_address_in_shared_cache() && aot_get_x86_address_shared_cache())
        goto LABEL_14;
      CSCppSymbolicator::get_aot_image_info_for_address(a2 & 0xFFFFFFFFFFFFFFFCLL, a4, (uint64_t)&v18);
      v31 = v24;
      v29 = v22;
      v30 = v23;
      v25 = v18;
      v26 = v19;
      v27 = v20;
      v28 = v21;
      if (!v24)
        goto LABEL_15;
      if (aot_get_x86_address())
      {
LABEL_14:
        *a5 = v15[3];
        v10 = 1;
      }
      else
      {
LABEL_15:
        *(_QWORD *)&v18 = 0;
        *((_QWORD *)&v18 + 1) = &v18;
        *(_QWORD *)&v19 = 0x2000000000;
        BYTE8(v19) = 0;
        CSSymbolicatorForEachAotImage();
        v10 = *(_BYTE *)(*((_QWORD *)&v18 + 1) + 24) != 0;
        _Block_object_dispose(&v18, 8);
      }
      _Block_object_dispose(&v14, 8);
    }
  }
  return v10;
}

void sub_1B4178100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t create_sampling_context_for_task(task_name_t a1, int a2)
{
  int x;

  x = 0;
  if (pid_for_task(a1, &x))
    return 0;
  else
    return create_sampling_context_for_task_pid_symbolicator(a1, x, 0, 0, a2);
}

void sampling_context_clear_cache(uint64_t a1)
{
  if (a1)
    clear_mapped_memory(*(_QWORD *)(a1 + 8));
}

uint64_t destroy_sampling_context(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 168))
      v2 = MEMORY[0x1E0DE2EB0] == 0;
    else
      v2 = 1;
    if (!v2)
      aot_symbolication_session_destroy();
    task_release_mapped_memory_cache(*(_DWORD *)v1);
    *(_QWORD *)(v1 + 8) = 0;
    v3 = *(_QWORD *)(v1 + 16);
    if (v3)
    {
      v6 = *(void ***)(v1 + 16);
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__destroy_vector::operator()[abi:ne180100](&v6);
      MEMORY[0x1B5E36940](v3, 0x20C40960023A9);
      *(_QWORD *)(v1 + 16) = 0;
    }
    v4 = *(void **)(v1 + 104);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(v1 + 104) = 0;
    }
    CSRelease(*(unsigned int **)(v1 + 24), *(_QWORD *)(v1 + 32));
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(v1 + 136, *(char **)(v1 + 144));
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(v1 + 112, *(char **)(v1 + 120));
    v5 = *(void **)(v1 + 80);
    if (v5)
    {
      *(_QWORD *)(v1 + 88) = v5;
      operator delete(v5);
    }
    return MEMORY[0x1B5E36940](v1, 0x10A0C409B837E7ALL);
  }
  return result;
}

uint64_t get_remote_thread_dispatch_queue(sampling_context_t *a1, thread_inspect_t a2, unint64_t *a3)
{
  int v6;
  int v7;
  int remote_thread_dispatch_queue2;
  uint64_t v9;
  _QWORD v11[7];
  thread_inspect_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  if (CSGetForceSafeMachVMReads())
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = __get_remote_thread_dispatch_queue_block_invoke;
    v11[3] = &unk_1E677A2D8;
    v11[4] = &v13;
    v11[5] = a1;
    v12 = a2;
    v11[6] = a3;
    v6 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v11);
    if (v6 != 4096 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 67109376;
      v18 = v7;
      v19 = 1024;
      v20 = v6;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, sampling of thread failed, err code %d\n", buf, 0xEu);
    }
  }
  else
  {
    remote_thread_dispatch_queue2 = get_remote_thread_dispatch_queue2(a1, a2, a3);
    *((_DWORD *)v14 + 6) = remote_thread_dispatch_queue2;
  }
  v9 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1B41783DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __get_remote_thread_dispatch_queue_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = get_remote_thread_dispatch_queue2(*(sampling_context_t **)(a1 + 40), *(_DWORD *)(a1 + 56), *(unint64_t **)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t get_remote_thread_dispatch_queue2(sampling_context_t *a1, thread_inspect_t target_act, unint64_t *a3)
{
  kern_return_t v6;
  int v7;
  _WORD *v9;
  char *v10;
  char *v11;
  thread_inspect_t v12;
  BOOL v13;
  char **v14;
  kern_return_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  tree *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t **v33;
  tree *v34;
  char *__src;
  mach_msg_type_number_t v36[2];
  unint64_t v37;
  uint64_t v38;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[4];
  tree *v41;
  thread_inspect_t v42;
  unint64_t *v43;
  std::string v44;
  __int128 v45;
  uint64_t *v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  thread_inspect_t v50;
  __int16 v51;
  kern_return_t v52;
  _BYTE v53[88];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v42 = target_act;
  if (!a1)
    return 4;
  if (a3)
  {
    *a3 = 0;
    if (!*((_QWORD *)a1 + 13) && (*((_BYTE *)a1 + 160) & 8) == 0)
      init_sampling_context_from_symbols(a1, 0);
    thread_info_outCnt = 6;
    v6 = thread_info(target_act, 4u, thread_info_out, &thread_info_outCnt);
    if (v6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v7 = *((_DWORD *)a1 + 1);
        *(_DWORD *)buf = 67109632;
        v48 = v7;
        v49 = 1024;
        v50 = target_act;
        v51 = 1024;
        v52 = v6;
        _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "get_remote_thread_dispatch_queue2 thread_info(THREAD_IDENTIFIER_INFO) call failed for pid %u thread %u, err %d", buf, 0x14u);
      }
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "get_remote_thread_dispatch_queue2 thread_info(THREAD_IDENTIFIER_INFO) call failed for pid %u thread %u, err %d", *((_DWORD *)a1 + 1), target_act, v6);
      return 0;
    }
    v37 = 0;
    v38 = 0;
    v9 = (_WORD *)*((_QWORD *)a1 + 13);
    if (!v9
      || !v41
      || mapped_memory_read_pointer(*((_QWORD *)a1 + 1), v41, &v38)
      || !v38
      || mapped_memory_read_pointer(*((_QWORD *)a1 + 1), (tree *)(v38 + (unsigned __int16)v9[5]), &v37)
      || !v37
      || (*a3 = v37,
          *(_QWORD *)v36 = 0,
          mapped_memory_read(*((const char **)a1 + 1), (tree *)(v38 + (unsigned __int16)v9[7]), (unsigned __int16)v9[8], v36)))
    {
LABEL_18:
      v10 = (char *)*((_QWORD *)a1 + 18);
      if (!v10)
        goto LABEL_29;
      v11 = (char *)a1 + 144;
      do
      {
        v12 = *((_DWORD *)v10 + 8);
        v13 = v12 >= target_act;
        if (v12 >= target_act)
          v14 = (char **)v10;
        else
          v14 = (char **)(v10 + 8);
        if (v13)
          v11 = v10;
        v10 = *v14;
      }
      while (*v14);
      if (v11 != (char *)a1 + 144 && *((_DWORD *)v11 + 8) <= target_act)
      {
        v21 = v37;
        if (v11[72])
        {
          if (v37 != *((_QWORD *)v11 + 10))
            *((_QWORD *)v11 + 10) = 0;
        }
        else if (v37)
        {
          v11[72] = 1;
          *((_QWORD *)v11 + 10) = v21;
        }
      }
      else
      {
LABEL_29:
        v36[0] = 28;
        v15 = thread_info(target_act, 5u, (thread_info_t)buf, v36);
        if (v15 || !v36[0])
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v17 = *((_DWORD *)a1 + 1);
            LODWORD(v44.__r_.__value_.__l.__data_) = 67109632;
            HIDWORD(v44.__r_.__value_.__r.__words[0]) = v17;
            LOWORD(v44.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v44.__r_.__value_.__r.__words[1] + 2) = target_act;
            HIWORD(v44.__r_.__value_.__r.__words[1]) = 1024;
            LODWORD(v44.__r_.__value_.__r.__words[2]) = v15;
            _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "get_remote_thread_dispatch_queue2 thread_info(THREAD_EXTENDED_INFO) call failed for pid %u thread %u, err %d", (uint8_t *)&v44, 0x14u);
          }
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "get_remote_thread_dispatch_queue2 thread_info(THREAD_EXTENDED_INFO) call failed for pid %u thread %u, err %d", *((_DWORD *)a1 + 1), target_act, v15);
          v16 = "";
        }
        else
        {
          v16 = v53;
        }
        v18 = *(_QWORD *)thread_info_out;
        v19 = v37;
        std::string::basic_string[abi:ne180100]<0>(&v44, v16);
        *(_QWORD *)&v45 = v18;
        v46 = (uint64_t *)v19;
        BYTE8(v45) = v19 != 0;
        v43 = (unint64_t *)&v42;
        v20 = std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a1 + 17, &v42, (uint64_t)&std::piecewise_construct, (_DWORD **)&v43);
        std::string::operator=((std::string *)(v20 + 5), &v44);
        *((_OWORD *)v20 + 4) = v45;
        v20[10] = v46;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
      }
      return 0;
    }
    v22 = (unsigned __int16)v9[8];
    if (v22 == 2)
    {
      v23 = (unsigned __int16)**(_WORD **)v36;
    }
    else if (v22 == 4)
    {
      v23 = **(_DWORD **)v36;
    }
    else
    {
      v23 = 0;
    }
    v24 = (_QWORD *)*((_QWORD *)a1 + 15);
    if (v24)
    {
      v25 = (char *)a1 + 120;
      do
      {
        v26 = v24[4];
        v27 = v26 >= v37;
        if (v26 >= v37)
          v28 = v24;
        else
          v28 = v24 + 1;
        if (v27)
          v25 = (char *)v24;
        v24 = (_QWORD *)*v28;
      }
      while (*v28);
      if (v25 != (char *)a1 + 120 && v37 >= *((_QWORD *)v25 + 4))
      {
        if (*((_QWORD *)v25 + 9) != *(_QWORD *)thread_info_out)
          *((_QWORD *)v25 + 9) = 0;
        if (v23 > *((_DWORD *)v25 + 16))
          *((_DWORD *)v25 + 16) = v23;
        goto LABEL_18;
      }
    }
    v34 = 0;
    __src = 0;
    if (*v9 == 3)
    {
      v29 = (tree *)(v38 + (unsigned __int16)v9[1]);
      v34 = v29;
    }
    else
    {
      v30 = mapped_memory_read_pointer(*((_QWORD *)a1 + 1), (tree *)(v38 + (unsigned __int16)v9[1]), &v34);
      v29 = v34;
      if (v30)
        v31 = 1;
      else
        v31 = v34 == 0;
      if (v31)
      {
LABEL_67:
        if (!v30)
        {
          if (__src)
          {
            strncpy((char *)buf, __src, 0x7FuLL);
            v53[79] = 0;
            v32 = *(_QWORD *)thread_info_out;
            std::string::basic_string[abi:ne180100]<0>(&v44, (char *)buf);
            LODWORD(v45) = v23;
            *((_QWORD *)&v45 + 1) = v32;
            v43 = &v37;
            v33 = std::__tree<std::__value_type<unsigned long long,dispatch_queue_info>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,dispatch_queue_info>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,dispatch_queue_info>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)a1 + 14, &v37, (uint64_t)&std::piecewise_construct, (uint64_t **)&v43);
            std::string::operator=((std::string *)(v33 + 5), &v44);
            *((_OWORD *)v33 + 4) = v45;
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v44.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_18;
      }
    }
    v30 = mapped_memory_read(*((const char **)a1 + 1), v29, 128, &__src);
    goto LABEL_67;
  }
  return 0;
}

#error "1B41789E8: call analysis failed (funcsize=58)"

size_t debug_print_backtrace(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  FILE **v8;
  uint64_t v9;
  char SymbolOwnerWithAddressAtTime;
  uint64_t v11;
  CSCppSymbolOwner *SymbolWithAddressAtTime;
  uint64_t v13;
  FILE *v14;

  v8 = (FILE **)MEMORY[0x1E0C80C10];
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "\nFrame count is %d:\n", a2);
  if (a2)
  {
    v9 = 0;
    do
    {
      SymbolOwnerWithAddressAtTime = CSSymbolicatorGetSymbolOwnerWithAddressAtTime(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a3 + 8 * v9), 0x8000000000000000);
      CSSymbolOwnerGetName(SymbolOwnerWithAddressAtTime, v11);
      SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a3 + 8 * v9), 0x8000000000000000);
      CSSymbolGetName((uint64_t)SymbolWithAddressAtTime, v13);
      v14 = *v8;
      if (a4)
        fprintf(v14, "[%3d] %#8.8llx fp:%#8.8llx %s %s\n");
      else
        fprintf(v14, "[%3d] %#8.8llx %s %s\n");
      ++v9;
    }
    while (a2 != v9);
  }
  return fwrite("\n\n", 2uLL, 1uLL, *v8);
}

uint64_t sample_remote_thread_with_dispatch_queue(uint64_t a1, int a2, char a3, uint64_t a4)
{
  int v5;
  int v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __sample_remote_thread_with_dispatch_queue_block_invoke;
  v9[3] = &unk_1E677A300;
  v9[4] = &v12;
  v9[5] = a1;
  v10 = a2;
  v11 = a3;
  v9[6] = a4;
  if (CSGetForceSafeMachVMReads())
  {
    v5 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)v9);
    if (v5 != 4096 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)buf = 67109376;
      v17 = v6;
      v18 = 1024;
      v19 = v5;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, sampling of thread failed, err code %d\n", buf, 0xEu);
    }
  }
  else
  {
    __sample_remote_thread_with_dispatch_queue_block_invoke((uint64_t)v9);
  }
  v7 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_1B4178D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __sample_remote_thread_with_dispatch_queue_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  _DWORD *v10;
  _BYTE *v11;
  int v12;
  int v13;
  uint64_t Architecture;
  sampling_context_t *PC;
  sampling_context_t *v16;
  uint64_t v17;
  CSCallFrameInfo *v18;
  uint64_t v19;
  uint64_t RegisterValue;
  uint64_t v22;
  _BOOL4 IsX86_64;
  int v24;
  mach_vm_address_t v25;
  uint64_t v26;
  tree *FP;
  uint64_t v28;
  int v29;
  CSThread *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t LR;
  _BOOL4 v34;
  _QWORD *p_size;
  char v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  char v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t SP;
  unint64_t v49;
  tree *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int IsFOmitFramePointerCFI;
  uint64_t v56;
  unint64_t v57;
  CSThreadArm *v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  sampling_context_t **v65;
  CSThreadArm *thread_state;
  natural_t nesting_depth[2];
  mach_vm_address_t address;
  mach_msg_type_number_t infoCnt;
  mach_vm_size_t size;
  __int16 v71;
  int v72;
  uint8_t buf[8];
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  void *v76;
  uint64_t *v77;
  uint64_t v78;
  CSThreadArm *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;

  v1 = result;
  v84 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 40);
  v3 = 4;
  if (!v2)
    goto LABEL_144;
  v4 = *(_QWORD *)(result + 48);
  v5 = *(_QWORD **)v4;
  v63 = *(_DWORD **)(v4 + 24);
  if (!*(_QWORD *)v4 || *(_QWORD *)(v4 + 24) == 0)
    goto LABEL_144;
  v7 = *(unsigned int *)(result + 56);
  v62 = *(unsigned __int8 *)(result + 60);
  v65 = *(sampling_context_t ***)(v4 + 8);
  v8 = *(_DWORD *)(v4 + 16);
  v10 = *(_DWORD **)(v4 + 32);
  v9 = *(unint64_t **)(v4 + 40);
  v11 = *(_BYTE **)(v4 + 48);
  if (v11)
    *v11 = 0;
  v60 = v11;
  if (!*(_QWORD *)(v2 + 48) && !CSIsNull(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32)))
  {
    init_sampling_context_from_symbols((sampling_context_t *)v2, 1);
    v12 = *(_DWORD *)(v2 + 72);
    if (*(_QWORD *)(v2 + 48))
    {
      if (v12)
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Found _sigtramp symbol after %u tries\n", *(_DWORD *)(v2 + 72));
    }
    else
    {
      if (!v12)
      {
        fwrite("Couldn't find _sigtramp symbol in expected dylibs\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        v12 = *(_DWORD *)(v2 + 72);
      }
      *(_DWORD *)(v2 + 72) = v12 + 1;
    }
  }
  v64 = v7;
  result = get_remote_thread_dispatch_queue2((sampling_context_t *)v2, v7, v9);
  v3 = result;
  if ((_DWORD)result)
    goto LABEL_144;
  thread_state = _create_thread_state((sampling_context_t *)result);
  v3 = (*(uint64_t (**)(CSThreadArm *, uint64_t, _QWORD))(*(_QWORD *)thread_state + 24))(thread_state, v64, (*(_DWORD *)(v2 + 164) >> 1) & 1);
  if (v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v13 = *(_DWORD *)(v2 + 4);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v13;
      LOWORD(v74) = 1024;
      *(_DWORD *)((char *)&v74 + 2) = v64;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "sample_remote_thread_with_dispatch_queue2 failed to get thread state for pid %u thread %u", buf, 0xEu);
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sample_remote_thread_with_dispatch_queue2 failed to get thread state for pid %u thread %u", *(_DWORD *)(v2 + 4), v64);
    result = (*(uint64_t (**)(CSThreadArm *))(*(_QWORD *)thread_state + 8))(thread_state);
    goto LABEL_144;
  }
  v54 = v1;
  Architecture = CSSymbolicatorGetArchitecture(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  if (*(_BYTE *)(v2 + 168) && CSArchitectureIsX86_64(Architecture))
    *((_BYTE *)thread_state + 8) = 1;
  if (v10)
    *v10 = 64;
  v56 = *((_QWORD *)thread_state + 2);
  PC = (sampling_context_t *)CSThread::GetPC(thread_state, -1);
  v16 = PC;
  *v5 = PC;
  v17 = *(_QWORD *)(v2 + 56);
  v59 = *(_QWORD *)(v2 + 64);
  if (v65)
  {
    PC = (sampling_context_t *)CSThread::GetFP(thread_state, 0);
    *v65 = PC;
  }
  v58 = _create_thread_state(PC);
  if ((*(_BYTE *)(v2 + 160) & 4) != 0)
  {
    IsFOmitFramePointerCFI = 1;
  }
  else
  {
    v18 = *(CSCallFrameInfo **)(v2 + 16);
    if (v18)
      IsFOmitFramePointerCFI = CSCallFrameInfo::GuessIsFOmitFramePointerCFI(v18, thread_state);
    else
      IsFOmitFramePointerCFI = 0;
  }
  v61 = (v8 - 1);
  LODWORD(v19) = 1;
  if (*(_BYTE *)(v2 + 168))
  {
    if (MEMORY[0x1E0DE2E88] && MEMORY[0x1E0DE2E80] != 0)
    {
      RegisterValue = CSThread::GetRegisterValue(thread_state, "x18", 0, 0);
      if ((RegisterValue & 1) == 0)
      {
        v22 = CSSymbolicatorGetArchitecture(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
        IsX86_64 = CSArchitectureIsX86_64(v22);
        if (v22)
          v24 = IsX86_64;
        else
          v24 = 1;
        v25 = CSThread::GetPC(thread_state, -1);
        v26 = RegisterValue & 0x7FFFFFFFFFFFFFFFLL;
        if (v25 - *(_QWORD *)(v2 + 192) < *(_QWORD *)(v2 + 200))
        {
          if (v24)
            *((_BYTE *)thread_state + 8) = 0;
          v19 = 1;
          if (v61 >= 2)
          {
            while (1)
            {
              *(_QWORD *)buf = 0;
              size = 0;
              if (!(*(unsigned int (**)(CSThreadArm *, _QWORD))(*(_QWORD *)thread_state + 40))(thread_state, 0))break;
              FP = (tree *)CSThread::GetFP(thread_state, 0);
              if ((unint64_t)FP - *(_QWORD *)(v2 + 192) < *(_QWORD *)(v2 + 200))
                break;
              if (mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), FP, &size))
                break;
              if (mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), (tree *)((char *)FP + *((_QWORD *)thread_state + 2)), buf))break;
              CSThread::SetFP(thread_state, size);
              CSThread::SetPC(thread_state, *(uint64_t *)buf);
              if (!*(_QWORD *)buf)
                break;
              v5[v19] = *(_QWORD *)buf;
              if (v65)
                v65[v19] = (sampling_context_t *)size;
              if (v61 == ++v19)
              {
                LODWORD(v19) = v61;
                break;
              }
            }
          }
          if (v24)
            *((_BYTE *)thread_state + 8) = 1;
LABEL_67:
          *(_QWORD *)buf = 0;
          if (v24)
            v31 = 48;
          else
            v31 = 256;
          mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), (tree *)(v26 + 8), buf);
          v32 = 248;
          if (v24)
            v32 = 56;
          size = 0;
          mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), (tree *)(v32 + v26), &size);
          CSThread::SetFP(thread_state, size);
          address = 0;
          mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), (tree *)(v31 + v26), &address);
          CSThread::SetSP(thread_state, address);
          LR = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_83;
          goto LABEL_73;
        }
        if (aot_address_in_shared_cache())
        {
          if ((RegisterValue & 0x8000000000000000) == 0)
          {
            *(_DWORD *)buf = 0;
            aot_get_shared_cache_fragment_type();
            goto LABEL_61;
          }
        }
        else if ((RegisterValue & 0x8000000000000000) == 0)
        {
          nesting_depth[0] = 999999;
          infoCnt = 12;
          size = 0;
          address = v25;
          if (mach_vm_region_recurse(*(_DWORD *)v2, &address, &size, nesting_depth, (vm_region_recurse_info_t)buf, &infoCnt))
          {
            v29 = 0;
            v30 = thread_state;
          }
          else
          {
            v30 = thread_state;
            if (address > v25 || size + address <= v25)
              v29 = 0;
            else
              v29 = v78;
          }
          if (*(_DWORD *)(v2 + 208) == v29)
          {
            LR = CSThread::GetLR(v30, 0);
            *(_QWORD *)buf = LR;
            LODWORD(v19) = 1;
            if (LR)
            {
LABEL_73:
              size = 0;
              v34 = translate_aot_frame(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 184), LR, &size);
              p_size = buf;
              if (v34)
                p_size = &size;
              v5[v19] = *p_size;
              if (v65)
                v65[v19] = v65[(v19 - 1)];
              LODWORD(v19) = v19 + 1;
            }
LABEL_83:
            if ((v24 & 1) == 0)
            {
              *(_QWORD *)buf = 0;
              mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), (tree *)(v26 + 320), buf);
              CSThread::SetLR(thread_state, *(uint64_t *)buf);
            }
            goto LABEL_85;
          }
LABEL_61:
          *(_QWORD *)buf = 0;
          if (translate_aot_frame(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 184), v25, buf))
          {
            v28 = *(_QWORD *)buf;
          }
          else
          {
            size = 0;
            mapped_memory_read(*(const char **)(v2 + 8), (tree *)(v26 + 736), 16, &size);
            if (!size || v25 != *(_QWORD *)size)
              goto LABEL_82;
            v28 = *(_QWORD *)(size + 8);
          }
          *v5 = v28;
LABEL_82:
          LODWORD(v19) = 1;
          goto LABEL_83;
        }
        LODWORD(v19) = 1;
        goto LABEL_67;
      }
      LODWORD(v19) = 1;
    }
  }
LABEL_85:
  if (v19 < v61 && (unint64_t)v16 - v17 >= v59)
  {
    v36 = 0;
    v57 = -1;
    v37 = 1;
    while (1)
    {
      *(_QWORD *)nesting_depth = 0;
      address = -1;
      v38 = *(_QWORD *)(v2 + 48);
      v39 = v5[(v19 - 1)] - *(_QWORD *)(v2 + 40);
      if (!v37)
        goto LABEL_98;
      v80 = 0;
      v81 = &v80;
      v82 = 0x2000000000;
      v83 = 0;
      if (CSGetForceSafeMachVMReads())
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v74 = 0x40000000;
        v75 = ___ZL19CheckForSecondFrameP18sampling_context_tP8CSThread_block_invoke;
        v76 = &unk_1E677A350;
        v77 = &v80;
        v78 = v2;
        v79 = thread_state;
        v40 = CSExceptionSafeThreadRunBlock((CSCppExceptionSafeThread *)buf);
        if (v40 != 4096 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v41 = *(_DWORD *)(v2 + 4);
          LODWORD(size) = 67109376;
          HIDWORD(size) = v41;
          v71 = 1024;
          v72 = v40;
          _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Missing page in pid %d, checking for second frame failed, err code %d\n", (uint8_t *)&size, 0xEu);
        }
      }
      else
      {
        v42 = CheckForSecondFrame2(v2, thread_state);
        *((_BYTE *)v81 + 24) = v42;
      }
      v43 = *((unsigned __int8 *)v81 + 24);
      _Block_object_dispose(&v80, 8);
      if (v43)
        break;
      v44 = 1;
LABEL_99:
      v45 = (*(uint64_t (**)(CSThreadArm *, _QWORD))(*(_QWORD *)thread_state + 40))(thread_state, v36 & 1);
      v46 = v45;
      v47 = *(_QWORD *)(v2 + 16);
      if (!((v47 == 0) | v36 & 1)
        && (((v44 ^ 1 | IsFOmitFramePointerCFI) & 1) != 0 || v45 != 1)
        && CSCallFrameInfo::UnwindThreadState(*(char ***)(v2 + 16), thread_state, *(_QWORD *)(v2 + 8), v44, v58)&& (address = CSThread::GetPC(v58, -1), SP = CSThread::GetSP(v58, -1), address != -1)&& ((v49 = SP, v57 == -1) || SP > v57))
      {
        (*(void (**)(CSThreadArm *, CSThreadArm *))(*(_QWORD *)thread_state + 16))(thread_state, v58);
        v36 = 0;
        v57 = v49;
      }
      else
      {
        if (v39 >= v38
          || !(*(unsigned int (**)(CSThreadArm *, uint64_t, _QWORD, uint64_t, CSThreadArm *))(*(_QWORD *)thread_state + 104))(thread_state, v47, *(_QWORD *)(v2 + 8), v44, v58)|| (address = CSThread::GetPC(v58, -1), address == -1))
        {
          if (!v46)
            goto LABEL_136;
          v50 = (tree *)CSThread::GetFP(thread_state, 0);
          *(_QWORD *)nesting_depth = 0;
          if (mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), v50, nesting_depth))
          {
            v51 = 0;
            *(_QWORD *)nesting_depth = 0;
          }
          else
          {
            v51 = *(_QWORD *)nesting_depth;
          }
          if (*(_BYTE *)(v2 + 168) && !v51)
            goto LABEL_136;
          if (v51 >> 60 == 1)
          {
            *(_QWORD *)buf = -1;
            if (!v62
              || mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), (tree *)((char *)v50 - 8), buf)
              || mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), *(tree **)buf, nesting_depth))
            {
              *(_QWORD *)nesting_depth &= 0xFFFFFFFFFFFFFFFuLL;
            }
            else
            {
              if (v60)
                *v60 = 1;
              v36 = 1;
              v50 = *(tree **)buf;
            }
          }
          if (mapped_memory_read_pointer(*(_QWORD *)(v2 + 8), (tree *)((char *)v50 + v56), &address))
            goto LABEL_136;
          if ((v36 & (address != 0)) == 1)
            ++address;
          (*(void (**)(CSThreadArm *))(*(_QWORD *)thread_state + 88))(thread_state);
          CSThread::SetFP(thread_state, *(uint64_t *)nesting_depth);
          CSThread::SetPC(thread_state, address);
        }
        else
        {
          (*(void (**)(CSThreadArm *, CSThreadArm *))(*(_QWORD *)thread_state + 16))(thread_state, v58);
        }
        v57 = -1;
      }
      if (address != -1)
      {
        v5[v19] = address;
        if (v65)
          v65[v19] = *(sampling_context_t **)nesting_depth;
        LODWORD(v19) = v19 + 1;
        v37 = v39 < v38;
        if (v19 < v61)
          continue;
      }
      goto LABEL_136;
    }
    address = CSThread::GetPC(thread_state, -1);
    v5[v19] = address;
    if (v65)
      v65[v19] = 0;
    LODWORD(v19) = v19 + 1;
    if (v19 >= v61)
      goto LABEL_136;
LABEL_98:
    v44 = 0;
    goto LABEL_99;
  }
LABEL_136:
  *v63 = v19;
  v1 = v54;
  if (!CSIsNull(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32)))
  {
    v52 = *v63;
    if ((_DWORD)v52)
    {
      do
      {
        *v5++ &= *(_QWORD *)(v2 + 176);
        --v52;
      }
      while (v52);
    }
  }
  if (!(_DWORD)v61)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v53 = *(_DWORD *)(v2 + 4);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v53;
      LOWORD(v74) = 1024;
      *(_DWORD *)((char *)&v74 + 2) = v64;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "sample_remote_thread_with_dispatch_queue2 got zero frames for pid %u thread %u", buf, 0xEu);
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sample_remote_thread_with_dispatch_queue2 got zero frames for pid %u thread %u", *(_DWORD *)(v2 + 4), v64);
  }
  (*(void (**)(CSThreadArm *))(*(_QWORD *)thread_state + 8))(thread_state);
  result = (*(uint64_t (**)(CSThreadArm *))(*(_QWORD *)v58 + 8))(v58);
  v3 = 0;
LABEL_144:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = v3;
  return result;
}

#error "1B417995C: call analysis failed (funcsize=73)"

uint64_t sample_remote_thread_with_dispatch_queue_regular_and_swift_async(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  size_t v10;
  void *v11;
  const void *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _BYTE *v16;
  BOOL v17;

  v17 = 0;
  if (!sample_should_capture_swift_async(a1, &v17))
  {
    result = sample_remote_thread_with_dispatch_queue(a1, a2, 0, a3);
    if ((_DWORD)result)
      return result;
    goto LABEL_13;
  }
  result = sample_remote_thread_with_dispatch_queue(a1, a2, 1, a4);
  if ((_DWORD)result)
    return result;
  if (**(_BYTE **)(a4 + 48))
  {
LABEL_13:
    if (v17 && **(_BYTE **)(a4 + 48))
      return sample_remote_thread_with_dispatch_queue(a1, a2, 0, a3);
    else
      return 0;
  }
  v9 = **(unsigned int **)(a4 + 24);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    if (*(_QWORD *)a3 && *(_QWORD *)a4)
      memcpy(*(void **)a3, *(const void **)a4, 8 * v9);
    v11 = *(void **)(a3 + 8);
    if (v11)
    {
      v12 = *(const void **)(a4 + 8);
      if (v12)
        memcpy(v11, v12, v10);
    }
  }
  result = 0;
  v13 = *(_DWORD **)(a4 + 24);
  v14 = *(_DWORD **)(a4 + 32);
  v15 = *(_DWORD **)(a3 + 32);
  **(_DWORD **)(a3 + 24) = *v13;
  *v15 = *v14;
  v16 = *(_BYTE **)(a3 + 48);
  **(_QWORD **)(a3 + 40) = **(_QWORD **)(a4 + 40);
  *v16 = 0;
  *v13 = 0;
  return result;
}

BOOL sample_should_capture_swift_async(uint64_t a1, BOOL *a2)
{
  int v3;
  uint8_t v5[16];

  v3 = *(_DWORD *)(a1 + 160);
  if ((v3 & 0x60) == 0x60 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SAMPLING_SAMPLE_BOTH_REGULAR_AND_SWIFT_ASYNC will override SAMPLING_IGNORE_SWIFT_ASYNC", v5, 2u);
  }
  *a2 = (v3 & 0x40) != 0;
  return (v3 & 0x60) != 32;
}

uint64_t sample_remote_thread(uint64_t a1, int a2, uint64_t a3)
{
  char should_capture_swift_async;
  BOOL v8;

  should_capture_swift_async = sample_should_capture_swift_async(a1, &v8);
  return sample_remote_thread_with_dispatch_queue(a1, a2, should_capture_swift_async, a3);
}

uint64_t thread_name_for_thread_port(uint64_t a1, unsigned int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t result;

  if (!a1)
    goto LABEL_14;
  if (!a2)
    goto LABEL_14;
  v6 = *(_QWORD *)(a1 + 144);
  v4 = a1 + 144;
  v5 = v6;
  if (!v6)
    goto LABEL_14;
  v7 = v4;
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (a3)
      *a3 = *(_QWORD *)(v7 + 64);
    if (a4)
      *a4 = *(_QWORD *)(v7 + 80);
    result = v7 + 40;
    if (*(char *)(v7 + 63) < 0)
      return *(_QWORD *)result;
  }
  else
  {
LABEL_14:
    if (a3)
      *a3 = 0;
    result = 0;
    if (a4)
      *a4 = 0;
  }
  return result;
}

_QWORD *dispatch_queue_name_for_serial_number(uint64_t a1, unint64_t a2, BOOL *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *result;

  if (!a1)
    goto LABEL_13;
  v6 = *(_QWORD **)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  v5 = v6;
  if (!v6)
    goto LABEL_13;
  v7 = v4;
  do
  {
    v8 = v5[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v4 && v7[4] <= a2)
  {
    if (a3)
      *a3 = *((_DWORD *)v7 + 16) > 1u;
    if (a4)
      *a4 = v7[9];
    result = v7 + 5;
    if (*((char *)v7 + 63) < 0)
      return (_QWORD *)*result;
  }
  else
  {
LABEL_13:
    if (a3)
      *a3 = 0;
    result = 0;
    if (a4)
      *a4 = 0;
  }
  return result;
}

void CSSymbolicatorFixupFrames(char a1, uint64_t a2, tree **a3, unsigned int *a4, unsigned int a5, _DWORD *a6, uint64_t a7, int a8, uint64_t a9)
{
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  CSCppSymbolOwner *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t InstructionData;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int Architecture;
  int v31;
  const char *v32;
  CSCppSymbolOwner *SymbolWithAddressAtTime;
  uint64_t v34;
  uint64_t v35;
  unint64_t Range;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  tree **v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int ThumbInstruction;
  uint64_t v49;
  unsigned int v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  tree *v58;
  uint64_t v59;
  unint64_t v60;
  _BOOL4 IsValidPC;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64[2];
  uint64_t v65;

  if (!a3 || !a4 || !a6)
    return;
  v16 = *a4;
  if (a7)
    v17 = a7;
  else
    v17 = 0x8000000000000000;
  if (*a6 == 65)
  {
    v64[0] = 0;
    v64[1] = 0;
    v63 = (unint64_t)v64;
    if (v16)
    {
      if (a5)
      {
        v20 = v16 - a5;
        v62 = (uint64_t)a3[v16 - a5];
      }
      else
      {
        v62 = -1;
        v20 = v16;
      }
      Architecture = CSSymbolicatorGetArchitecture(a1, a2);
      *a6 = 64;
      if (!v20)
        goto LABEL_73;
      v31 = Architecture;
      if (a9)
        v32 = *(const char **)(a9 + 8);
      else
        v32 = 0;
      IsValidPC = _IsValidPC(v32, *a3);
      if (v20 >= 2)
      {
        if (v62)
        {
          if (v20 + 1 <= v16)
          {
            SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, (uint64_t)*a3, v17);
            v35 = v34;
            if (!CSIsNull((char)SymbolWithAddressAtTime, v34))
            {
              Range = CSSymbolGetRange((uint64_t)SymbolWithAddressAtTime, v35);
              if (Range)
              {
                if (_IsValidLinkRegister(Range, v37, (uint64_t)*a3, (uint64_t)SymbolWithAddressAtTime, v35, v31 != 12))
                {
                  memmove(a3 + 2, a3 + 1, 8 * (v20 - 1));
                  a3[1] = (tree *)v62;
                  ++v20;
                  if (!IsValidPC)
                    goto LABEL_73;
LABEL_41:
                  v38 = v20 - 1;
                  if (v20 - 1 < 2)
                  {
                    v39 = v20;
                  }
                  else
                  {
                    v39 = v20;
                    do
                    {
                      v40 = &a3[v38];
                      if (!*v40)
                      {
                        if (v38 < v39 - 1)
                          memmove(v40, &a3[v20], 8 * (v39 - v20));
                        v38 = v20 - 2;
                        --v39;
                      }
                      v20 = v38--;
                    }
                    while (v38 > 1);
                  }
                  if (v31 == 12 && v39 >= 2)
                  {
                    v41 = a3 + 1;
                    v42 = v39 - 1;
                    do
                    {
                      *v41++ &= ~1uLL;
                      --v42;
                    }
                    while (v42);
                  }
                  if (a8 && v39 >= 2)
                  {
                    v43 = (uint64_t *)(a3 + 1);
                    v44 = v39 - 1;
                    v45 = a9;
                    do
                    {
                      v46 = *v43;
                      if (*v43 != -1)
                      {
                        if (v31 == 12 && (v46 & 1) != 0)
                        {
                          if (v45)
                          {
                            v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
                            ThumbInstruction = _GetThumbInstruction(*(const char **)(v45 + 8), (uint64_t)&v63, (tree *)((v46 & 0xFFFFFFFFFFFFFFFELL) - 4));
                            v49 = v45;
                            v50 = ThumbInstruction;
                            if (_GetThumbInstruction(*(const char **)(v49 + 8), (uint64_t)&v63, (tree *)(v47 - 2)) >> 14 > 2&& v50 >> 12 > 0xE)
                            {
                              v52 = -4;
                            }
                            else
                            {
                              v52 = -2;
                            }
                            v53 = *v43 + v52;
                            v45 = a9;
                          }
                          else
                          {
                            v53 = v46 - 2;
                          }
                        }
                        else
                        {
                          v53 = v46 - 4;
                        }
                        *v43 = v53;
                      }
                      ++v43;
                      --v44;
                    }
                    while (v44);
                  }
                  v20 = v39;
                  goto LABEL_73;
                }
              }
            }
          }
        }
      }
      if (IsValidPC)
        goto LABEL_41;
    }
    else
    {
      v20 = 0;
    }
LABEL_73:
    std::__tree<TRange<Pointer64>>::destroy((uint64_t)&v63, v64[0]);
    v16 = v20;
    goto LABEL_83;
  }
  if (*a6 == 33 && v16)
  {
    if (a5)
    {
      v18 = v16 - a5;
      v19 = a3[v16 - a5] != 0;
    }
    else
    {
      v19 = 1;
      v18 = *a4;
    }
    *a6 = 32;
    if (v18 >= 2 && v19 && v18 + 1 <= v16)
    {
      v21 = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, (uint64_t)*a3, v17);
      v23 = v22;
      if (!CSIsNull((char)v21, v22))
      {
        v24 = CSSymbolGetRange((uint64_t)v21, v23);
        v60 = v25;
        InstructionData = CSSymbolGetInstructionData((uint64_t)v21, v23);
        if (InstructionData)
        {
          v59 = InstructionData;
          v27 = CSSymbolicatorGetArchitecture(a1, a2);
          v63 = 0;
          v65 = 0;
          v28 = (const char *)a9;
          if (a9)
            v28 = *(const char **)(a9 + 8);
          if (ScanInstructionsForMissingSecondFrameLocation_Intel(a1, a2, v27 == 16777223, (uint64_t)*a3, v59, v60, (unint64_t)*a3 - v24, &v63, &v65, (char)v21, SHIDWORD(v21), v23, v28))
          {
            if (v63 >= a5)
              v29 = -1;
            else
              v29 = (uint64_t)*(&a3[v63] + *a4 - a5);
            memmove(a3 + 2, a3 + 1, 8 * (v18 - 1));
            a3[1] = (tree *)v29;
            ++v18;
          }
        }
      }
    }
    if (v18 >= 2 && a8)
    {
      v54 = a3 + 1;
      v55 = v18 - 1;
      do
      {
        if (*v54 != -1)
          --*v54;
        ++v54;
        --v55;
      }
      while (v55);
    }
    v16 = v18;
  }
LABEL_83:
  v56 = v16 + 1;
  v57 = v16;
  while (v57 * 8)
  {
    v58 = a3[v57 - 1];
    --v56;
    --v57;
    if (v58)
      goto LABEL_88;
  }
  v56 = 0;
LABEL_88:
  *a4 = v56;
}

void sub_1B417A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  std::__tree<TRange<Pointer64>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

uint64_t ScanInstructionsForMissingSecondFrameLocation_Intel(char a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, _QWORD *a8, _QWORD *a9, char a10, int a11, char a12, const char *a13)
{
  _BOOL4 v21;
  uint64_t result;
  BOOL v23;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  _BYTE *v28;
  char v29;
  char SymbolWithAddressAtTime;
  char v31;
  char SymbolOwner;
  uint64_t v33;
  uint64_t v34;
  const char *Name;
  const char *v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  CSCppSymbolOwner *v40;
  uint64_t v41;
  _BYTE *v42;

  v21 = CSIsNull(a1, a2);
  result = 0;
  if (a7 >= a6)
    return result;
  v23 = !a9 || a8 == 0;
  if (v23 || v21)
    return result;
  v25 = a7;
  if (a3)
  {
    v25 = a7;
    if (*(_BYTE *)(a5 + a7) == 72)
    {
      v25 = a7 + 1;
      if (a7 + 1 >= a6)
        return 0;
    }
  }
  result = 0;
  v26 = *(unsigned __int8 *)(a5 + v25);
  if (v26 <= 0x8A)
  {
    if (v26 == 85)
    {
LABEL_45:
      *a8 = 0;
      result = 1;
      *a9 = 1;
      return result;
    }
    if (v26 != 115)
    {
      if (v26 != 137)
        return result;
      v27 = v25 + 1;
      if (v27 >= a6 || *(unsigned __int8 *)(a5 + v27) != 229)
        return 0;
LABEL_36:
      result = 1;
      *a8 = 1;
      *a9 = 2;
      return result;
    }
    if (a3)
    {
      v42 = 0;
      if (a7 < 2)
      {
        if (!a13)
          return 0;
        if (mapped_memory_read(a13, (tree *)(a4 - 2), 2, &v42))
          return 0;
        v28 = v42;
        if (!v42)
          return 0;
      }
      else
      {
        v28 = (_BYTE *)(a7 + a5 - 2);
        v42 = v28;
        if (a7 + a5 == 2)
          return 0;
      }
      if (*v28 != 15 || v28[1] != 5)
        return 0;
      SymbolWithAddressAtTime = a10;
      v29 = a12;
      if (CSIsNull(a10, a12))
      {
        SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, a4, 0x8000000000000000);
        v29 = v31;
      }
      if (CSIsNull(SymbolWithAddressAtTime, v29))
        return 0;
      SymbolOwner = CSSymbolGetSymbolOwner(SymbolWithAddressAtTime, v29);
      v34 = v33;
      if (CSIsNull(SymbolOwner, v33))
        return 0;
      Name = (const char *)CSSymbolOwnerGetName(SymbolOwner, v34);
      v36 = "libsystem_kernel.dylib";
    }
    else
    {
      v42 = 0;
      if (a7 < 5)
      {
        if (!a13)
          return 0;
        if (mapped_memory_read(a13, (tree *)(a4 - 5), 5, &v42))
          return 0;
        v38 = v42;
        if (!v42)
          return 0;
      }
      else
      {
        v38 = (unsigned __int8 *)(a7 + a5 - 5);
        v42 = v38;
        if (a7 + a5 == 5)
          return 0;
      }
      if (*v38 != 232)
        return 0;
      v39 = *(int *)(v38 + 1);
      if ((int)v39 < 0)
        v39 |= 0xFFFFFFFF00000000;
      v40 = CSSymbolicatorGetSymbolWithAddressAtTime(a1, a2, v39 + a4, 0x8000000000000000);
      Name = CSSymbolGetName((uint64_t)v40, v41);
      if (!Name)
        return 0;
      v36 = "_sysenter_trap";
    }
    if (!strcmp(Name, v36))
      goto LABEL_45;
    return 0;
  }
  if (v26 == 139)
  {
    v37 = v25 + 1;
    if (v37 < a6 && *(unsigned __int8 *)(a5 + v37) == 236)
      goto LABEL_36;
    return 0;
  }
  if (v26 == 195 || v26 == 203)
  {
    *a8 = 0;
    result = 1;
    *a9 = 1;
  }
  return result;
}

BOOL _IsValidPC(const char *a1, tree *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  _QWORD v5[3];

  result = 0;
  if ((unint64_t)a2 >= 0x800)
  {
    if (!a1)
      return 1;
    v5[1] = v2;
    v5[2] = v3;
    v5[0] = 0;
    if (!mapped_memory_read(a1, a2, 4, v5))
      return 1;
  }
  return result;
}

uint64_t _IsValidLinkRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t InstructionData;
  uint64_t v12;
  const char *MangledName;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _BOOL4 v25;
  int v26;
  int v27;
  int v28;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  char v35;

  InstructionData = CSSymbolGetInstructionData(a4, a5);
  if (InstructionData)
  {
    v12 = InstructionData;
    MangledName = (const char *)CSSymbolGetMangledName(a4, a5);
    if (MangledName && !strcmp(MangledName, "_objc_msgSend"))
    {
      v14 = 1;
    }
    else
    {
      v14 = 1;
      if ((a3 & 1) != 0)
        v15 = 1;
      else
        v15 = 2;
      v16 = ((a3 & 0xFFFFFFFFFFFFFFFELL) - a1) >> v15;
      if (v16 >= 8)
        v16 = 8;
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = 0;
        if ((a3 & 1) != 0)
          v19 = 1;
        else
          v19 = 2;
        v20 = a1 + ((_DWORD)v16 << v19);
        do
        {
          if (a6)
          {
            v21 = *(_DWORD *)(v12 + 4 * v17);
            v18 |= (v21 & 0xFE407FFF) == -1476363267;
            v22 = (v21 & 0x1C000000) == 0x10000000 || (v21 & 0xE000000) == 167772160;
            if (!v22 || (*(_DWORD *)(v12 + 4 * v17) & 0x1Fu) - 29 >= 2)
              goto LABEL_46;
            v14 = 0;
          }
          else
          {
            if ((a3 & 1) != 0)
            {
              v31 = *(unsigned __int16 *)(v12 + 2 * v17);
              v22 = v31 == 18031;
              v18 |= (~v31 & 0xB500) == 0;
              v32 = v31 & 0xFD87;
              v33 = v31 & 0xFF00;
              v30 = v22 || v33 == 44800 || v32 == 17542;
              goto LABEL_42;
            }
            v23 = *(_DWORD *)(v12 + 4 * v17);
            if (v23 >> 28 != 15)
            {
              v25 = (v23 & 0xE5F4000) == 0x80D4000 || (v23 & 0xC5FF000) == 69066752;
              v18 |= v25;
              v26 = v23 & 0xC00F000;
              v27 = v23 & 0xC0FF000;
              v28 = v23 & 0xFFFFFFF;
              v30 = v27 == 880640 || v28 == 27291661 || v26 == 57344;
LABEL_42:
              v35 = !v30;
              v14 &= v35;
LABEL_46:
              if ((v18 & v14 & 1) != 0)
                v14 &= v20 >= (a3 & 0xFFFFFFFFFFFFFFFELL);
            }
          }
          ++v17;
        }
        while (v16 != v17);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t _GetThumbInstruction(const char *a1, uint64_t a2, tree *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v13[2];
  _WORD *v14;

  v5 = *(_QWORD **)(a2 + 8);
  if (!v5)
    goto LABEL_12;
  v6 = (_QWORD *)(a2 + 8);
  do
  {
    v7 = v5[4];
    v8 = v7 >= (unint64_t)a3;
    if (v7 >= (unint64_t)a3)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != (_QWORD *)(a2 + 8) && v6[4] <= (unint64_t)a3)
  {
    return (unsigned __int16)*((_DWORD *)v6 + 10);
  }
  else
  {
LABEL_12:
    v14 = 0;
    if (mapped_memory_read(a1, a3, 2, &v14))
    {
      LOWORD(v10) = 0;
    }
    else
    {
      v11 = (unsigned __int16)*v14;
      v13[0] = (unint64_t)a3;
      v13[1] = v11;
      std::__tree<std::__value_type<unsigned long long,unsigned int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned int>>((uint64_t **)a2, v13, (uint64_t)v13);
      LOWORD(v10) = *v14;
    }
  }
  return (unsigned __int16)v10;
}

void std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,dispatch_queue_info>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,dispatch_queue_info>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,dispatch_queue_info>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x50uLL);
    v12 = **a4;
    v11[9] = 0;
    *((_DWORD *)v11 + 16) = 0;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned int,thread_name_info>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,thread_name_info>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,thread_name_info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_QWORD *)v11 + 10) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t ___ZL19translate_aot_frame10_CSTypeRefPvyPy_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4 < a3 || v4 >= a4 + a3;
  v6 = v5;
  if (!v5 && aot_get_x86_address())
  {
    **(_QWORD **)(a1 + 64) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  return v6;
}

CSThreadArm *_create_thread_state(sampling_context_t *a1)
{
  CSThreadArm *v1;

  v1 = (CSThreadArm *)operator new();
  CSThreadArm::CSThreadArm(v1);
  return v1;
}

void sub_1B417AA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E36940](v1, 0x1081C40245BAA4DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZL19CheckForSecondFrameP18sampling_context_tP8CSThread_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = CheckForSecondFrame2(*(_QWORD *)(a1 + 40), *(CSThread **)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CheckForSecondFrame2(uint64_t result, CSThread *this)
{
  uint64_t v3;
  uint64_t LR;
  uint64_t Architecture;
  _BOOL4 IsX86_64;
  int v7;
  int v8;
  tree *PC;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t FP;
  uint64_t v19;
  tree *v20;
  tree *RegisterValue;
  uint64_t SP;
  unint64_t v23;
  uint64_t RegionWithAddressAtTime;
  uint64_t v25;
  const char *Name;
  const char *v27;
  CSCppSymbolOwner *SymbolWithAddressAtTime;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;

  if (!result)
    return result;
  v3 = result;
  LR = CSThread::GetLR(this, 0);
  v32 = LR;
  Architecture = CSSymbolicatorGetArchitecture(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
  IsX86_64 = CSArchitectureIsX86_64(Architecture);
  if (*(_BYTE *)(v3 + 168))
  {
    if (Architecture)
      v7 = IsX86_64;
    else
      v7 = 1;
    if ((CSThread::GetRegisterValue(this, "x18", 0, 0) & 1) != 0)
      v8 = 0;
    else
      v8 = v7;
    if (LR)
      goto LABEL_13;
  }
  else
  {
    v8 = 0;
    if (LR)
      goto LABEL_13;
  }
  if (!v8)
    return 0;
LABEL_13:
  PC = (tree *)CSThread::GetPC(this, -1);
  if ((*(_BYTE *)(v3 + 160) & 8) != 0)
  {
    v10 = CSRangeOfDyldSharedCacheInCurrentProcess();
    if ((unint64_t)PC - v10 >= v11)
      return 0;
  }
  result = _IsValidPC(*(const char **)(v3 + 8), PC);
  if (!(_DWORD)result)
    return result;
  if (!v8)
    goto LABEL_48;
  v35 = 0;
  v12 = CSThread::GetPC(this, -1);
  if (mapped_memory_read(*(const char **)(v3 + 8), (tree *)(v12 - 4), 8, &v35) || !v35)
    goto LABEL_48;
  v13 = 0;
  v15 = *v35;
  v14 = v35[1];
  v16 = "x21";
  if (v14 > -698416385)
  {
    if (v14 > -132150140)
    {
      if (v14 == -132150139)
        goto LABEL_42;
      v17 = -129989482;
LABEL_31:
      if (v14 == v17)
        goto LABEL_42;
LABEL_32:
      if (v15 == -698416384 && (v14 & 0x94000000) == 0x94000000
        || v15 == -887684391 && (v14 & 0xB5000000) == 0xB5000000)
      {
        goto LABEL_36;
      }
      goto LABEL_27;
    }
    if (v14 != -698416384)
    {
      v17 = -132153211;
      goto LABEL_31;
    }
LABEL_36:
    v13 = 0;
    v16 = "x23";
    goto LABEL_42;
  }
  if (v14 == -1463721289 || v14 == -1442577435)
  {
LABEL_42:
    RegisterValue = (tree *)CSThread::GetRegisterValue(this, v16, 0, 0);
    mapped_memory_read_pointer(*(_QWORD *)(v3 + 8), RegisterValue, &v32);
    if (v32 + 1 >= 2)
    {
      CSThread::SetPC(this, v32);
      SP = CSThread::GetSP(this, 0);
      CSThread::SetSP(this, SP + v13);
      return 1;
    }
    return 0;
  }
  if (v14 != -887684391)
    goto LABEL_32;
  if (v15 == -1463721289)
    goto LABEL_36;
LABEL_27:
  FP = CSThread::GetFP(this, 0);
  if (CSThread::GetSP(this, 0) - FP == 8)
  {
    v13 = -8;
LABEL_41:
    v16 = "x21";
    goto LABEL_42;
  }
  v34 = -1;
  mapped_memory_read_pointer(*(_QWORD *)(v3 + 8), (tree *)(*((_QWORD *)this + 2) + FP), &v34);
  v19 = CSThread::GetLR(this, 0);
  v20 = (tree *)CSThread::GetRegisterValue(this, "x21", 0, 0);
  v33 = -1;
  mapped_memory_read_pointer(*(_QWORD *)(v3 + 8), v20, &v33);
  if ((unint64_t)(v33 + 1) >= 2 && v33 != v19 && v33 != v34
    || (v23 = CSSymbolicatorTranslateFromNativeAddress(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), v12)) != 0
    && (RegionWithAddressAtTime = CSSymbolicatorGetRegionWithAddressAtTime(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), v23, 0x8000000000000000), (Name = CSRegionGetName(RegionWithAddressAtTime, v25)) != 0)&& ((v27 = Name, !strncmp(Name, "__TEXT __stubs", 0xFuLL)) || !strncmp(v27, "__TEXT __stub_helper", 0x15uLL)))
  {
    v13 = 0;
    goto LABEL_41;
  }
LABEL_48:
  if (CSIsNull(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32)))
    return 0;
  SymbolWithAddressAtTime = CSSymbolicatorGetSymbolWithAddressAtTime(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), (uint64_t)PC, 0x8000000000000000);
  v30 = v29;
  if (CSIsNull((char)SymbolWithAddressAtTime, v29))
    return 0;
  result = CSSymbolGetRange((uint64_t)SymbolWithAddressAtTime, v30);
  if (result)
  {
    result = _IsValidLinkRegister(result, v31, (uint64_t)PC, (uint64_t)SymbolWithAddressAtTime, v30, *((unsigned __int8 *)this + 9));
    if ((_DWORD)result)
    {
      CSThread::SetPC(this, LR);
      return 1;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,unsigned int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned int>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  _QWORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v10[4] = *(_QWORD *)a3;
    *((_DWORD *)v10 + 10) = *(_DWORD *)(a3 + 8);
    std::__tree<TRange<Pointer64>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void TMMapSymbolOwnerData::TMMapSymbolOwnerData(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, TMMapArchive *a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  void *__p;
  _BYTE *v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;

  *((_QWORD *)this + 1) = 1;
  *((_QWORD *)this + 2) = 850045863;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_QWORD *)this = &off_1E677A380;
  *((_QWORD *)this + 11) = a3;
  *((_OWORD *)this + 6) = 0u;
  v6 = (char *)this + 96;
  v7 = (char *)this + 120;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((_QWORD *)this + 33) = 850045863;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 850045863;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 21) = 0u;
  v8 = *((unsigned int *)a3 + 2);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::vector<MMapSegment>::__init_with_size[abi:ne180100]<MMapSegment const*,MMapSegment const*>(&v16, (char *)a3 + 96, (uint64_t)a3 + 32 * v8 + 96, v8);
  v9 = (char *)a2 + 32;
  create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>((uint64_t)v9, (uint64_t)&v16, 1, &__p);
  v14 = 0uLL;
  v15 = 0;
  std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(&v14, __p, (uint64_t)v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)__p) >> 3));
  v10 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *((_QWORD *)this + 13) = v10;
    operator delete(v10);
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
  }
  *((_OWORD *)this + 6) = v14;
  *((_QWORD *)this + 14) = v15;
  v15 = 0;
  v14 = 0uLL;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>((uint64_t)&v16, (uint64_t)v9, 1, &__p);
  v14 = 0uLL;
  v15 = 0;
  std::vector<TRangeValue<Pointer64,unsigned long long>>::__init_with_size[abi:ne180100]<TRangeValue<Pointer64,unsigned long long>*,TRangeValue<Pointer64,unsigned long long>*>(&v14, __p, (uint64_t)v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)__p) >> 3));
  v11 = *(void **)v7;
  if (*(_QWORD *)v7)
  {
    *((_QWORD *)this + 16) = v11;
    operator delete(v11);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
  }
  *(_OWORD *)((char *)this + 120) = v14;
  *((_QWORD *)this + 17) = v15;
  v15 = 0;
  v14 = 0uLL;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  atomic_store(*((_DWORD *)a3 + 7), (unsigned int *)this + 3);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
}

void sub_1B417B1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  _QWORD *v17;
  std::mutex *v18;
  CSCppDeferredDemangler *v19;
  void **v20;
  void **v21;
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  CSCppDeferredDemangler::~CSCppDeferredDemangler(v19);
  v23 = *v20;
  if (*v20)
  {
    v17[16] = v23;
    operator delete(v23);
  }
  v24 = *v21;
  if (*v21)
  {
    v17[13] = v24;
    operator delete(v24);
  }
  *v17 = off_1E6775488;
  std::mutex::~mutex(v18);
  _Unwind_Resume(a1);
}

void create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t *v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  void *__p;
  char *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  char v51;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - *(_QWORD *)a1;
  if (v8 != *(_QWORD *)a1 && *(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&v48, v7, v8, v9 >> 5);
    v11 = *(const void **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (v12 - *(_QWORD *)a2) >> 5;
    v46 = 0;
    v47 = 0;
    __p = 0;
    std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>(&__p, v11, v12, v13);
    v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v14 != 32 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    {
      v15 = 126 - 2 * __clz((v49 - (_BYTE *)v48) >> 5);
      if (v49 == v48)
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>((unint64_t *)v48, (unint64_t *)v49, (uint64_t)&v51, v16, 1);
      v17 = 126 - 2 * __clz((v46 - (_BYTE *)__p) >> 5);
      if (v46 == __p)
        v18 = 0;
      else
        v18 = v17;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,false>((char *)__p, v46, (uint64_t)&v51, v18, 1);
      v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    }
    v19 = (unint64_t *)v48;
    v20 = (char *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    v21 = v49;
    if (v19 != (unint64_t *)v49)
    {
      v22 = v46;
      if (v20 != v46)
      {
        while (1)
        {
          v23 = (const char *)v19[3];
          if (!v23)
            v23 = (const char *)v19[2];
          if (!strncmp(v20 + 16, v23, 0x10uLL))
            goto LABEL_23;
          if (is_relocation_skippable(v23))
          {
            v19 += 4;
            if (v19 == (unint64_t *)v21)
              break;
          }
          else
          {
            if (is_relocation_skippable(v20 + 16))
            {
              if (v19 == (unint64_t *)v21)
                break;
              v20 += 32;
              goto LABEL_38;
            }
LABEL_23:
            v24 = *(_QWORD *)v20;
            v25 = *v19;
            v26 = v19[1];
            v27 = *(_QWORD *)v20 - *v19;
            v29 = (unint64_t *)a4[1];
            v28 = (unint64_t)a4[2];
            if ((unint64_t)v29 >= v28)
            {
              v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (_BYTE *)*a4) >> 3);
              v32 = v31 + 1;
              if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)*a4) >> 3);
              if (2 * v33 > v32)
                v32 = 2 * v33;
              if (v33 >= 0x555555555555555)
                v34 = 0xAAAAAAAAAAAAAAALL;
              else
                v34 = v32;
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a4 + 2), v34);
              v37 = (unint64_t *)&v35[24 * v31];
              *v37 = v25;
              v37[1] = v26;
              v37[2] = v27;
              v39 = (char *)*a4;
              v38 = (char *)a4[1];
              v40 = v37;
              if (v38 != *a4)
              {
                do
                {
                  v41 = *(_OWORD *)(v38 - 24);
                  *(v40 - 1) = *((_QWORD *)v38 - 1);
                  *(_OWORD *)(v40 - 3) = v41;
                  v40 -= 3;
                  v38 -= 24;
                }
                while (v38 != v39);
                v38 = (char *)*a4;
              }
              v30 = (char *)(v37 + 3);
              *a4 = v40;
              a4[1] = v37 + 3;
              a4[2] = &v35[24 * v36];
              if (v38)
                operator delete(v38);
            }
            else
            {
              *v29 = v25;
              v29[1] = v26;
              v30 = (char *)(v29 + 3);
              v29[2] = v27;
            }
            a4[1] = v30;
            a3 |= v24 != v25;
            v19 += 4;
            v21 = v49;
            if (v19 == (unint64_t *)v49)
              break;
            v20 += 32;
            v22 = v46;
LABEL_38:
            if (v20 == v22)
              break;
          }
        }
      }
    }
    if ((a3 & 1) != 0)
    {
      v42 = (unint64_t *)a4[1];
      v43 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (_BYTE *)*a4) >> 3));
      if (v42 == *a4)
        v44 = 0;
      else
        v44 = v43;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>((uint64_t)*a4, v42, (uint64_t)&v51, v44, 1);
    }
    else
    {
      a4[1] = *a4;
    }
    if (__p)
    {
      v46 = (char *)__p;
      operator delete(__p);
    }
    if (v48)
    {
      v49 = (char *)v48;
      operator delete(v48);
    }
  }
}

void sub_1B417B568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t *v20;
  char *v21;
  char *v22;
  const char *v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  void *__p;
  char *v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  char v52;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - *(_QWORD *)a1;
  if (v8 != *(_QWORD *)a1 && *(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>(&v49, v7, v8, v9 >> 5);
    v11 = *(const void **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (v12 - *(_QWORD *)a2) >> 5;
    v47 = 0;
    v48 = 0;
    __p = 0;
    std::vector<CSCppSegmentRange>::__init_with_size[abi:ne180100]<std::__wrap_iter<CSCppSegmentRange const*>,std::__wrap_iter<CSCppSegmentRange const*>>(&__p, v11, v12, v13);
    v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v14 != 32 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    {
      v15 = 126 - 2 * __clz((v50 - (_BYTE *)v49) >> 5);
      if (v50 == v49)
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*,false>((char *)v49, v50, (uint64_t)&v52, v16, 1);
      v17 = 126 - 2 * __clz((v47 - (_BYTE *)__p) >> 5);
      if (v47 == __p)
        v18 = 0;
      else
        v18 = v17;
      std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*,false>((unint64_t *)__p, (unint64_t *)v47, (uint64_t)&v52, v18, 1);
      v14 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    }
    v19 = (char *)v49;
    v20 = (unint64_t *)__p;
    std::vector<TRangeValue<Pointer64,unsigned long long>>::reserve(a4, v14 >> 5);
    v21 = v50;
    if (v19 != v50)
    {
      v22 = v47;
      if (v20 != (unint64_t *)v47)
      {
        while (2)
        {
          v23 = (const char *)v20[3];
          while (1)
          {
            v24 = v23;
            if (!v23)
              v24 = (const char *)v20[2];
            if (!strncmp(v24, v19 + 16, 0x10uLL))
              break;
            if (!is_relocation_skippable(v19 + 16))
            {
              if (!v23)
                v23 = (const char *)v20[2];
              if (is_relocation_skippable(v23))
              {
                if (v19 == v21)
                  goto LABEL_42;
                v20 += 4;
                goto LABEL_41;
              }
              break;
            }
            v19 += 32;
            if (v19 == v21)
              goto LABEL_42;
          }
          v25 = *v20;
          v26 = *(_QWORD *)v19;
          v27 = *((_QWORD *)v19 + 1);
          v28 = *v20 - *(_QWORD *)v19;
          v30 = (char *)a4[1];
          v29 = (unint64_t)a4[2];
          if ((unint64_t)v30 >= v29)
          {
            v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (_BYTE *)*a4) >> 3);
            v33 = v32 + 1;
            if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)*a4) >> 3);
            if (2 * v34 > v33)
              v33 = 2 * v34;
            if (v34 >= 0x555555555555555)
              v35 = 0xAAAAAAAAAAAAAAALL;
            else
              v35 = v33;
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSectionRange>>((uint64_t)(a4 + 2), v35);
            v38 = &v36[24 * v32];
            *(_QWORD *)v38 = v26;
            *((_QWORD *)v38 + 1) = v27;
            *((_QWORD *)v38 + 2) = v28;
            v40 = (char *)*a4;
            v39 = (char *)a4[1];
            v41 = v38;
            if (v39 != *a4)
            {
              do
              {
                v42 = *(_OWORD *)(v39 - 24);
                *((_QWORD *)v41 - 1) = *((_QWORD *)v39 - 1);
                *(_OWORD *)(v41 - 24) = v42;
                v41 -= 24;
                v39 -= 24;
              }
              while (v39 != v40);
              v39 = (char *)*a4;
            }
            v31 = v38 + 24;
            *a4 = v41;
            a4[1] = v38 + 24;
            a4[2] = &v36[24 * v37];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_QWORD *)v30 = v26;
            *((_QWORD *)v30 + 1) = v27;
            v31 = v30 + 24;
            *((_QWORD *)v30 + 2) = v28;
          }
          a4[1] = v31;
          a3 |= v25 != v26;
          v19 += 32;
          v21 = v50;
          if (v19 == v50)
            break;
          v20 += 4;
          v22 = v47;
LABEL_41:
          if (v20 != (unint64_t *)v22)
            continue;
          break;
        }
      }
    }
LABEL_42:
    if ((a3 & 1) != 0)
    {
      v43 = (unint64_t *)a4[1];
      v44 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (_BYTE *)*a4) >> 3));
      if (v43 == *a4)
        v45 = 0;
      else
        v45 = v44;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TRangeValue<Pointer64,unsigned long long> *,false>((uint64_t)*a4, v43, (uint64_t)&v52, v45, 1);
    }
    else
    {
      a4[1] = *a4;
    }
    if (__p)
    {
      v47 = (char *)__p;
      operator delete(__p);
    }
    if (v49)
    {
      v50 = (char *)v49;
      operator delete(v49);
    }
  }
}

void sub_1B417B904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL TMMapSymbolOwnerData::is_string_pointer_valid(TMMapArchive **this, char *a2)
{
  return TMMapArchive::is_pointer_within_strtab(this[11], a2);
}

BOOL TMMapArchive::is_pointer_within_strtab(TMMapArchive *this, char *a2)
{
  return (char *)this
       + 32 * *((_DWORD *)this + 2)
       + 24 * *((_DWORD *)this + 3)
       + (24 * *((_DWORD *)this + 4))
       + (unint64_t)(4 * *((_DWORD *)this + 4))
       + (36 * *((_DWORD *)this + 5))
       + (20 * *((_DWORD *)this + 6))
       + *((unsigned int *)this + 22)
       + *((unsigned int *)this + 20)
       + 96 <= a2
      && TMMapArchive::strtab_end(this) > (unint64_t)a2;
}

uint64_t TMMapSymbolOwnerData::convert_archive_address_to_real_address(TMMapSymbolOwnerData *this, unint64_t a2, unint64_t *a3)
{
  return TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)this + 15, a2, a3);
}

uint64_t TMMapSymbolOwnerData::regions_in_address_range(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (*(_DWORD *)(a1[11] + 12))
    v5 = a3 == -1;
  else
    v5 = 1;
  if (v5)
    return 0;
  v7 = (unint64_t *)a1[12];
  v8 = (unint64_t *)a1[13];
  if (v7 == v8)
    return 0;
  v12 = 0;
  if (__CFADD__(a4, a3))
    v13 = -1;
  else
    v13 = a4 + a3;
  do
  {
    v14 = *v7;
    if (*v7 < v13)
    {
      v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3)
          v16 = a3;
        else
          v16 = *v7;
        if (v13 >= v15)
          v17 = v7[1] + v14;
        else
          v17 = v13;
        if (v17 != v16)
          v12 += TMMapSymbolOwnerData::regions_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
      }
    }
    v7 += 3;
  }
  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::regions_in_real_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  unint64_t result;
  unint64_t v11;

  v11 = 0;
  v9 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(a1 + 96), a3, &v11);
  result = 0;
  if (v9)
    return TMMapSymbolOwnerData::regions_in_archive_address_range(a1, a2, v11, a4, a5);
  return result;
}

uint64_t TMMapSymbolOwnerData::footprint(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 11) + 4) + 416;
}

unint64_t TMMapSymbolOwnerData::regions_in_archive_address_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;

  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_DWORD *)(v7 + 12);
  v13 = v7 + (32 * *(_DWORD *)(v7 + 8)) + 96;
  v12 = v13 + 24 * v8;
  if (!find_lower_and_upper_bounds_of_range<TMMapRegionImpl<Pointer64>>(a3, a4, &v13, &v12))
    return 0;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v13) >> 3);
  if (a5)
  {
    v10 = a2 | 4;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
      v13 += 24;
    }
    while (v13 < v12);
  }
  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<TMMapRegionImpl<Pointer64>>(unint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = (_QWORD *)*a3;
  v5 = (_QWORD *)*a4;
  v6 = (_QWORD *)*a3;
  if (*a4 != *a3)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a4 - *a3) >> 3);
    v6 = (_QWORD *)*a3;
    do
    {
      v8 = v7 >> 1;
      v9 = &v6[3 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 3;
      v7 += ~(v7 >> 1);
      if (a1 < v11)
        v7 = v8;
      else
        v6 = v10;
    }
    while (v7);
  }
  while (v6 != v4)
  {
    v12 = *(v6 - 3);
    v13 = *(v6 - 2);
    v6 -= 3;
    if (a1 - v12 >= v13)
    {
      v4 = v6 + 3;
      break;
    }
  }
  *a3 = v4;
  if (v5 != v4)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
    v5 = v4;
    do
    {
      v15 = v14 >> 1;
      v16 = &v5[3 * (v14 >> 1)];
      v18 = *v16;
      v17 = v16 + 3;
      v14 += ~(v14 >> 1);
      if (a1 + a2 - 1 < v18)
        v14 = v15;
      else
        v5 = v17;
    }
    while (v14);
  }
  *a4 = v5;
  return *a3 != (_QWORD)v5;
}

uint64_t TMMapSymbolOwnerData::symbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD **)(a1 + 88);
  v4 = v3[4];
  if (a3 && (_DWORD)v4)
  {
    v6 = (uint64_t)v3 + 32 * v3[2] + (24 * v3[3]) + 96;
    v7 = a2 | 5;
    v8 = v3[4];
    do
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, v7, v6);
      v6 += 24;
      --v8;
    }
    while (v8);
  }
  return v4;
}

uint64_t TMMapSymbolOwnerData::symbols_for_name_in_archive(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, int a5)
{
  TMMapArchive *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  TMMapArchive *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  char *v22;
  char *__s2;
  TMMapArchive *v25[2];

  __s2 = a3;
  v9 = *(TMMapArchive **)(a1 + 88);
  v10 = *((_DWORD *)v9 + 4);
  v11 = (_DWORD *)((char *)v9
                 + 32 * *((_DWORD *)v9 + 2)
                 + 24 * *((_DWORD *)v9 + 3)
                 + (24 * v10)
                 + (unint64_t)(36 * *((_DWORD *)v9 + 5))
                 + (20 * *((_DWORD *)v9 + 6))
                 + 96);
  v12 = (_DWORD *)((char *)v11 + *((unsigned int *)v9 + 22));
  v13 = (TMMapArchive *)((char *)v12 + (4 * v10) + (unint64_t)*((unsigned int *)v9 + 20));
  v25[0] = v13;
  v25[1] = v9;
  v14 = std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity>(v11, v12, (const char **)&__s2, v25);
  v16 = v14;
  v17 = v15;
  if (a5)
  {
    if (v14 != v15)
    {
      v18 = 0;
      v19 = a2 | 5;
      v20 = v14;
      do
      {
        v21 = (char *)v16 - *v20;
        if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v21 + 3))|| strcmp((const char *)v13 + *((unsigned int *)v21 + 3), __s2))
        {
          break;
        }
        if (a4)
          (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, v19, v21);
        ++v18;
        ++v20;
        ++v16;
      }
      while (v20 != v17);
      return v18;
    }
    return 0;
  }
  if ((char *)v15 - (char *)v14 != 4)
    return v15 - v14;
  v22 = (char *)v14 - *v14;
  if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v22 + 3))
    || strcmp((const char *)v13 + *((unsigned int *)v22 + 3), __s2))
  {
    return 0;
  }
  if (a4)
    (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, a2 | 5, v22);
  return 1;
}

void sub_1B417BF48(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B417BEF4);
  }
  _Unwind_Resume(a1);
}

uint64_t TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  CSCppDeferredDemangler *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;

  v9 = (CSCppDeferredDemangler *)(a1 + 144);
  CSCppDeferredDemangler::demangleAllConcreteSymbolsIfNeeded(a1 + 144, a1, a2);
  v10 = CSCppDeferredDemangler::mmapSymbolAddressesForDemangledName(v9, a3);
  if (v10 == v11)
    return 0;
  v12 = v10;
  v13 = v11;
  v14 = 0;
  v15 = v10;
  do
  {
    ++v14;
    v15 = (uint64_t **)*v15;
  }
  while (v15 != v11);
  if (a5)
  {
    if (v10 != v11)
    {
      v16 = a2 | 5;
      do
      {
        if (a4)
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a4, v16, v12[4]);
        v12 = (uint64_t **)*v12;
      }
      while (v12 != v13);
    }
  }
  else if (a4 && v14 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a4, a2 | 5, v10[4]);
  }
  return v14;
}

uint64_t TMMapSymbolOwnerData::symbols_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8;

  v8 = TMMapSymbolOwnerData::symbols_for_name_in_archive(a1, a2, a3, a4, 1);
  return TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling(a1, a2, a3, a4, 1) + v8;
}

uint64_t TMMapSymbolOwnerData::symbol_for_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t result;

  result = TMMapSymbolOwnerData::symbols_for_name_in_archive(a1, a2, a3, a4, 0);
  if (!result)
    return TMMapSymbolOwnerData::symbols_for_name_with_deferred_demangling(a1, a2, a3, a4, 0);
  return result;
}

uint64_t TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, int a5)
{
  TMMapArchive *v9;
  int v10;
  _DWORD *v11;
  unsigned int *v12;
  TMMapArchive *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  char *v20;
  char *v21;
  char *__s2;
  TMMapArchive *v24[2];

  __s2 = a3;
  v9 = *(TMMapArchive **)(a1 + 88);
  v10 = *((_DWORD *)v9 + 4);
  v11 = (_DWORD *)((char *)v9
                 + 32 * *((_DWORD *)v9 + 2)
                 + 24 * *((_DWORD *)v9 + 3)
                 + (24 * v10)
                 + (unint64_t)(36 * *((_DWORD *)v9 + 5))
                 + (20 * *((_DWORD *)v9 + 6))
                 + *((unsigned int *)v9 + 22)
                 + 96);
  v12 = (_DWORD *)((char *)v11 + (4 * v10));
  v13 = (TMMapArchive *)((char *)v12 + *((unsigned int *)v9 + 20));
  v24[0] = v13;
  v24[1] = v9;
  v14 = std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity>(v11, v12, (const char **)&__s2, v24);
  v16 = v14;
  if (a5)
  {
    if (v14 != v12)
    {
      v17 = 0;
      v18 = a2 | 5;
      v19 = v14;
      do
      {
        v20 = (char *)v16 - *v19;
        if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v20 + 4))|| strcmp((const char *)v13 + *((unsigned int *)v20 + 4), __s2))
        {
          break;
        }
        if (a4)
          (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, v18, v20);
        ++v17;
        ++v19;
        ++v16;
      }
      while (v19 != v12);
      return v17;
    }
    return 0;
  }
  if (v15 - (_QWORD)v14 != 4)
    return (v15 - (uint64_t)v14) >> 2;
  v21 = (char *)v14 - *v14;
  if (!TMMapArchive::is_pointer_within_strtab(*(TMMapArchive **)(a1 + 88), (char *)v13 + *((unsigned int *)v21 + 4))
    || strcmp((const char *)v13 + *((unsigned int *)v21 + 4), __s2))
  {
    return 0;
  }
  if (a4)
    (*(void (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, a2 | 5, v21);
  return 1;
}

void sub_1B417C2D4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B417C280);
  }
  _Unwind_Resume(a1);
}

uint64_t TMMapSymbolOwnerData::symbols_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  return TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive(a1, a2, a3, a4, 1);
}

uint64_t TMMapSymbolOwnerData::symbol_for_mangled_name(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  return TMMapSymbolOwnerData::symbols_for_mangled_name_in_archive(a1, a2, a3, a4, 0);
}

uint64_t TMMapSymbolOwnerData::symbols_in_address_range(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (*(_DWORD *)(a1[11] + 16))
    v5 = a3 == -1;
  else
    v5 = 1;
  if (v5)
    return 0;
  v7 = (unint64_t *)a1[12];
  v8 = (unint64_t *)a1[13];
  if (v7 == v8)
    return 0;
  v12 = 0;
  if (__CFADD__(a4, a3))
    v13 = -1;
  else
    v13 = a4 + a3;
  do
  {
    v14 = *v7;
    if (*v7 < v13)
    {
      v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3)
          v16 = a3;
        else
          v16 = *v7;
        if (v13 >= v15)
          v17 = v7[1] + v14;
        else
          v17 = v13;
        if (v17 != v16)
          v12 += TMMapSymbolOwnerData::symbols_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
      }
    }
    v7 += 3;
  }
  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::symbols_in_real_address_range(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v11;

  if (!*(_DWORD *)(*(_QWORD *)(a1 + 88) + 16))
    return 0;
  v11 = 0;
  if (!TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return 0;
  }
  v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4)
    v9 = a4;
  return TMMapSymbolOwnerData::symbols_in_archive_address_range(a1, a2, v11 | (v9 << 32), a5);
}

unint64_t TMMapSymbolOwnerData::symbols_in_archive_address_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v4;
  int v5;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v12;
  char *v13;

  v4 = *(_DWORD **)(a1 + 88);
  v5 = v4[4];
  if (!v5)
    return 0;
  v8 = (char *)v4 + 32 * v4[2] + (24 * v4[3]) + 96;
  v12 = &v8[24 * v5];
  v13 = v8;
  if (!find_lower_and_upper_bounds_of_range<CSCppMMapSymbol>(a3, &v13, &v12))
    return 0;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3);
  if (a4)
  {
    v10 = a2 | 5;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
      v13 += 24;
    }
    while (v13 < v12);
  }
  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<CSCppMMapSymbol>(uint64_t a1, char **a2, char **a3)
{
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  char *v16;
  unsigned int v17;

  v3 = *a2;
  v4 = *a3;
  v5 = *a2;
  if (*a3 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((*a3 - *a2) >> 3);
    v5 = *a2;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v5[24 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 6);
      v6 += ~(v6 >> 1);
      if (v10 > a1)
        v6 = v7;
      else
        v5 = v9;
    }
    while (v6);
  }
  while (v5 != v3)
  {
    v11 = *((_DWORD *)v5 - 6);
    v12 = *((_DWORD *)v5 - 5);
    v5 -= 24;
    if ((int)a1 - v11 >= v12)
    {
      v3 = v5 + 24;
      break;
    }
  }
  *a2 = v3;
  if (v4 != v3)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3);
    v4 = v3;
    do
    {
      v14 = v13 >> 1;
      v15 = (unsigned int *)&v4[24 * (v13 >> 1)];
      v17 = *v15;
      v16 = (char *)(v15 + 6);
      v13 += ~(v13 >> 1);
      if ((int)a1 + HIDWORD(a1) - 1 < v17)
        v13 = v14;
      else
        v4 = v16;
    }
    while (v13);
  }
  *a3 = v4;
  return *a2 != v4;
}

uint64_t TMMapSymbolOwnerData::symbol_for_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  if (a3 == -1)
    return 0;
  else
    return TMMapSymbolOwnerData::symbol_for_real_address(this, a2, a3);
}

uint64_t TMMapSymbolOwnerData::symbol_for_real_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  int v5;
  uint64_t result;
  unsigned int v7[2];

  *(_QWORD *)v7 = 0;
  v5 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)this + 12, a3, v7);
  result = 0;
  if (v5)
  {
    if (*(_QWORD *)v7 > 0xFFFFFFFEuLL)
      return 0;
    else
      return TMMapSymbolOwnerData::symbol_for_archive_address(this, a2, v7[0]);
  }
  return result;
}

uint64_t TMMapSymbolOwnerData::symbol_for_archive_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unsigned int a3)
{
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3802000000;
  v9 = __Block_byref_object_copy__15;
  v10 = __Block_byref_object_dispose__15;
  v11 = 0;
  v12 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN20TMMapSymbolOwnerData26symbol_for_archive_addressEP16CSCppSymbolOwnerj_block_invoke;
  v5[3] = &unk_1E677A478;
  v5[4] = &v6;
  TMMapSymbolOwnerData::symbols_in_archive_address_range((uint64_t)this, (uint64_t)a2, a3 | 0x100000000, (uint64_t)v5);
  v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B417C76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN20TMMapSymbolOwnerData26symbol_for_archive_addressEP16CSCppSymbolOwnerj_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((*(_BYTE *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 9) & 2) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_QWORD *)(v3 + 40) = a2;
    *(_QWORD *)(v3 + 48) = a3;
  }
  return result;
}

unint64_t TMMapSymbolOwnerData::child_for_archive_address(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;

  v3 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v3 != -1)
  {
    v4 = *(unsigned int **)(a1 + 88);
    v5 = v4[5];
    if (v3 < v5)
    {
      v6 = (unint64_t)&v4[9 * v3 + 24 + 8 * v4[2] + 6 * v4[3] + 6 * v4[4]];
      v7 = ~v3 + v5;
      v8 = v6;
      while (v6 >= (unint64_t)v4)
      {
        v9 = v7;
        if (v8 >= (unint64_t)v4 + v4[1])
          break;
        if ((a3 - *(_DWORD *)v8) < *(_DWORD *)(v8 + 4))
          return v8;
        result = 0;
        if ((*(_BYTE *)(v8 + 11) & 0x40) == 0)
        {
          --v7;
          v8 += 36;
          if (v9)
            continue;
        }
        return result;
      }
    }
  }
  return 0;
}

uint64_t TMMapSymbolOwnerData::for_each_child_symbol_with_parent_symbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  v3 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v3 == -1)
    return 0;
  v8 = *(_DWORD **)(a1 + 88);
  v9 = (char *)v8 + 32 * v8[2] + (24 * v8[3]);
  v11 = v8[4];
  v10 = v8[5];
  v12 = (uint64_t)&v9[36 * v3 + 24 * v11];
  if (v3 <= v10)
    v13 = v10;
  else
    v13 = v3;
  v14 = v13 - v3;
  v15 = v12 + 96;
  while (v14)
  {
    v16 = *(_QWORD *)(a1 + 88);
    if (v16 <= v15 && v15 < *(unsigned int *)(v16 + 4) + v16)
    {
      (*(void (**)(uint64_t, unint64_t))(a3 + 16))(a3, v15);
      LODWORD(v3) = v3 + 1;
      --v14;
      v17 = *(_BYTE *)(v15 + 11);
      v15 += 36;
      if ((v17 & 0x40) == 0)
        continue;
    }
    return (v3 - *(_DWORD *)(a2 + 20));
  }
  LODWORD(v3) = v13;
  return (v3 - *(_DWORD *)(a2 + 20));
}

uint64_t TMMapSymbolOwnerData::source_infos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD **)(a1 + 88);
  v4 = v3[6];
  if (a3 && (_DWORD)v4)
  {
    v6 = (unint64_t)v3
       + 32 * v3[2]
       + 24 * v3[3]
       + (24 * v3[4])
       + (unint64_t)(36 * v3[5])
       + 96;
    v7 = a2 | 6;
    v8 = v3[6];
    do
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(a3 + 16))(a3, v7, v6);
      v6 += 20;
      --v8;
    }
    while (v8);
  }
  return v4;
}

uint64_t TMMapSymbolOwnerData::source_infos_in_address_range(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (*(_DWORD *)(a1[11] + 24))
    v5 = a3 == -1;
  else
    v5 = 1;
  if (v5)
    return 0;
  v7 = (unint64_t *)a1[12];
  v8 = (unint64_t *)a1[13];
  if (v7 == v8)
    return 0;
  v12 = 0;
  if (__CFADD__(a4, a3))
    v13 = -1;
  else
    v13 = a4 + a3;
  do
  {
    v14 = *v7;
    if (*v7 < v13)
    {
      v15 = v7[1] + v14;
      if (a3 < v15)
      {
        if (v14 <= a3)
          v16 = a3;
        else
          v16 = *v7;
        if (v13 >= v15)
          v17 = v7[1] + v14;
        else
          v17 = v13;
        if (v17 != v16)
          v12 += TMMapSymbolOwnerData::source_infos_in_real_address_range((uint64_t)a1, a2, v16, v17 - v16, a5);
      }
    }
    v7 += 3;
  }
  while (v7 != v8);
  return v12;
}

unint64_t TMMapSymbolOwnerData::source_infos_in_real_address_range(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v11;

  if (!*(_DWORD *)(*(_QWORD *)(a1 + 88) + 24))
    return 0;
  v11 = 0;
  if (!TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return 0;
  }
  v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4)
    v9 = a4;
  return TMMapSymbolOwnerData::source_infos_in_archive_address_range(a1, a2, v11 | (v9 << 32), a5);
}

unint64_t TMMapSymbolOwnerData::source_infos_in_archive_address_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_DWORD *)(v4 + 24);
  if (!v5)
    return 0;
  v8 = v4 + vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v4 + 8), (int32x4_t)xmmword_1B41A9130)) + 96;
  v12 = v8 + 20 * v5;
  v13 = v8;
  if (!find_lower_and_upper_bounds_of_range<CSCppMMapSourceInfo>(a3, &v13, &v12))
    return 0;
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v13) >> 2);
  if (a4)
  {
    v10 = a2 | 6;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
      v13 += 20;
    }
    while (v13 < v12);
  }
  return v9;
}

BOOL find_lower_and_upper_bounds_of_range<CSCppMMapSourceInfo>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;

  v3 = (_DWORD *)*a2;
  v4 = (_DWORD *)*a3;
  v5 = (_DWORD *)*a2;
  if (*a3 != *a2)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a3 - *a2) >> 2);
    v5 = (_DWORD *)*a2;
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[5 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 5;
      v6 += ~(v6 >> 1);
      if (v10 > a1)
        v6 = v7;
      else
        v5 = v9;
    }
    while (v6);
  }
  while (v5 != v3)
  {
    v11 = *(v5 - 5);
    v12 = *(v5 - 4);
    v5 -= 5;
    if ((int)a1 - v11 >= v12)
    {
      v3 = v5 + 5;
      break;
    }
  }
  *a2 = v3;
  if (v4 != v3)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v4 - v3);
    v4 = v3;
    do
    {
      v14 = v13 >> 1;
      v15 = &v4[5 * (v13 >> 1)];
      v17 = *v15;
      v16 = v15 + 5;
      v13 += ~(v13 >> 1);
      if ((int)a1 + HIDWORD(a1) - 1 < v17)
        v13 = v14;
      else
        v4 = v16;
    }
    while (v13);
  }
  *a3 = v4;
  return *a2 != (_QWORD)v4;
}

unint64_t TMMapSymbolOwnerData::source_info_for_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  if (a3 == -1)
    return 0;
  else
    return TMMapSymbolOwnerData::source_info_for_real_address(this, a2, a3);
}

unint64_t TMMapSymbolOwnerData::source_info_for_real_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unint64_t a3)
{
  int v5;
  unint64_t result;
  unsigned int v7[2];

  *(_QWORD *)v7 = 0;
  v5 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)this + 12, a3, v7);
  result = 0;
  if (v5)
  {
    if (*(_QWORD *)v7 <= 0xFFFFFFFEuLL)
      return TMMapSymbolOwnerData::source_info_for_archive_address(this, a2, v7[0]);
  }
  return result;
}

unint64_t TMMapSymbolOwnerData::source_info_for_archive_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2, unsigned int a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_DWORD *)(*((_QWORD *)this + 11) + 24))
    return 0;
  v6 = TMMapSymbolOwnerData::symbol_for_archive_address(this, a2, a3);
  v8 = v7;
  if (!CSIsNull(v6, v7)
    && TMMapSymbolOwnerData::child_for_archive_address((uint64_t)this, v8 & 0xFFFFFFFFFFFFFFFCLL, a3))
  {
    return (unint64_t)a2 | 5;
  }
  if (TMMapSymbolOwnerData::do_source_info_lookup(this, a3))
    return (unint64_t)a2 | 6;
  return 0;
}

_DWORD *TMMapSymbolOwnerData::do_source_info_lookup(TMMapSymbolOwnerData *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;

  v2 = *((_QWORD *)this + 11);
  v3 = *(unsigned int *)(v2 + 24);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2 + vaddlvq_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)(v2 + 8), (int32x4_t)xmmword_1B41A9130)) + 96;
  v5 = v3;
  v6 = v4;
  do
  {
    v7 = v5 >> 1;
    v8 = (unsigned int *)(v6 + 20 * (v5 >> 1));
    v10 = *v8;
    v9 = v8 + 5;
    v5 += ~(v5 >> 1);
    if (v10 > a2)
      v5 = v7;
    else
      v6 = (unint64_t)v9;
  }
  while (v5);
  if (v6 == v4)
    v11 = 0;
  else
    v11 = -1;
  v12 = (_DWORD *)(v6 + 20 * v11);
  if (a2 - *v12 >= v12[1])
    return 0;
  else
    return v12;
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_address(TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  if (a3 == -1)
    return 0;
  else
    return TMMapSymbolOwnerData::for_each_stack_frame_at_real_address(a1, a2, a3, a4);
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_real_address(TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t result;
  unint64_t v9;

  v9 = 0;
  v7 = TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)a1 + 12, a3, &v9);
  result = 0;
  if (v7)
  {
    if (v9 > 0xFFFFFFFE)
      return 0;
    else
      return TMMapSymbolOwnerData::for_each_stack_frame_at_archive_address(a1, a2, v9, a4);
  }
  return result;
}

uint64_t TMMapSymbolOwnerData::for_each_stack_frame_at_archive_address(TMMapSymbolOwnerData *a1, CSCppSymbolOwner *a2, unsigned int a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;

  v8 = TMMapSymbolOwnerData::symbol_for_archive_address(a1, a2, a3);
  v10 = v9;
  if (CSIsNull(v8, v9))
    return 0;
  v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  v12 = TMMapSymbolOwnerData::do_source_info_lookup(a1, a3);
  if ((v10 & 0xFFFFFFFFFFFFFFFCLL) == 0)
    return 0;
  v13 = v12;
  v14 = (unint64_t)a2 | 5;
  v15 = (unint64_t)a2 | 6;
  v16 = TMMapSymbolOwnerData::child_for_archive_address((uint64_t)a1, v11, a3);
  if (v16)
  {
    v17 = v16;
    v18 = 1;
    do
    {
      if ((*(_DWORD *)(v17 + 8) & 0x80000000) != 0)
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(a4 + 16))(a4, v14, v11, v14, v17);
      else
        (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(a4 + 16))(a4, v14, v11, 0, 0);
      v11 = v17;
      ++v18;
      v17 = TMMapSymbolOwnerData::child_for_archive_address((uint64_t)a1, v17, a3);
    }
    while (v17);
  }
  else
  {
    v18 = 1;
  }
  if (v13)
    v19 = v15;
  else
    v19 = 0;
  if (v13)
    v20 = v13;
  else
    v20 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *))(a4 + 16))(a4, v14, v11, v19, v20);
  return v18;
}

uint64_t TMMapSymbolOwnerData::for_each_inline_range_for_symbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(a1, a2, a3, a4, -1, a5);
}

uint64_t TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint8_t buf[8];
  uint8_t *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v10 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  __p = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v11 = *(_DWORD *)(a4 & 0xFFFFFFFFFFFFFFFCLL);
  if ((TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(a1 + 120), v11, &v21) & 1) != 0)
  {
    v19[1] = a6;
    v20 = 0;
    v19[0] = &v20;
    v12 = operator new(0x48uLL);
    *v12 = &off_1E677A4C0;
    v12[1] = v29;
    v12[2] = &v25;
    v12[3] = &__p;
    v12[4] = a2;
    v12[5] = v19;
    v12[6] = &v21;
    *((_DWORD *)v12 + 14) = a5;
    v12[8] = a1;
    v32 = (uint8_t *)v12;
    std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::swap[abi:ne180100](buf, v29);
    v13 = v32;
    if (v32 == buf)
    {
      v14 = 4;
      v13 = buf;
    }
    else
    {
      if (!v32)
      {
LABEL_10:
        *(_QWORD *)buf = v10;
        v28 = 0;
        if (!v30)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, uint8_t *, uint64_t *))(*v30 + 48))(v30, buf, &v28);
        v15 = v20;
        if (__p)
        {
          v23 = __p;
          operator delete(__p);
        }
        goto LABEL_13;
      }
      v14 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
    goto LABEL_10;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v11;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Symbol archive address 0x%x could not be relocated to real address\n", buf, 8u);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Symbol archive address 0x%x could not be relocated to real address\n", v11);
  v15 = 0;
LABEL_13:
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  v16 = v30;
  if (v30 == v29)
  {
    v17 = 4;
    v16 = v29;
    goto LABEL_19;
  }
  if (v30)
  {
    v17 = 5;
LABEL_19:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  return v15;
}

void sub_1B417D2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  char *v25;
  uint64_t v26;

  if (__p)
    operator delete(__p);
  v25 = a24;
  if (a24 == &a21)
  {
    v26 = 4;
    v25 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_8;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_range(_QWORD *a1, os_unfair_lock_s **a2, unint64_t a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = *(_DWORD *)(a1[11] + 76);
  v9 = (CSCppSymbolicator::flags(a2[1]) >> 8) & 1;
  if (v8)
    LOBYTE(v9) = 0;
  if ((v9 & 1) != 0)
    return 0;
  if (a3 == -1)
    return 0;
  v10 = (unint64_t *)a1[12];
  v11 = (unint64_t *)a1[13];
  if (v10 == v11)
    return 0;
  v12 = a4 + a3;
  if (__CFADD__(a4, a3))
    v12 = -1;
  while (1)
  {
    v13 = *v10;
    if (*v10 < v12)
    {
      v14 = v10[1] + v13;
      if (a3 < v14)
      {
        v15 = v13 <= a3 ? a3 : *v10;
        v16 = v12 >= v14 ? v10[1] + v13 : v12;
        if (v16 != v15)
          break;
      }
    }
    v10 += 3;
    if (v10 == v11)
      return 0;
  }
  return TMMapSymbolOwnerData::raw_bytes_for_real_range((uint64_t)a1, (CSCppSymbolOwner *)a2, v15, v16 - v15);
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_real_range(uint64_t a1, CSCppSymbolOwner *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;

  v11 = 0;
  if (!TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(a1 + 96), a3, &v11)
    || v11 > 0xFFFFFFFE)
  {
    return TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault(a1, a2, a3, a4);
  }
  v9 = 0xFFFFFFFF - v11;
  if (0xFFFFFFFF - v11 >= a4)
    v9 = a4;
  result = TMMapSymbolOwnerData::raw_bytes_for_archive_range(a1, v8, v11 | (v9 << 32));
  if (!result)
    return TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault(a1, a2, a3, a4);
  return result;
}

unint64_t TMMapSymbolOwnerData::raw_bytes_for_archive_range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(v3 + 76);
  if (a3 >= v4
    && HIDWORD(a3) + (int)a3 <= (HIDWORD(v4) + v4)
    && (v5 = v3
           + (32 * *(_DWORD *)(v3 + 8))
           + (24 * *(_DWORD *)(v3 + 12))
           + (24 * *(_DWORD *)(v3 + 16))
           + (unint64_t)(4 * *(_DWORD *)(v3 + 16))
           + (36 * *(_DWORD *)(v3 + 20))
           + (unint64_t)(20 * *(_DWORD *)(v3 + 24))
           + *(unsigned int *)(v3 + 88)
           + 96) != 0)
  {
    return v5 + (a3 - v4);
  }
  else
  {
    return 0;
  }
}

uint64_t TMMapSymbolOwnerData::_raw_bytes_for_real_range_on_demand_fault(uint64_t a1, CSCppSymbolOwner *a2, unint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  _QWORD v12[3];

  v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (!*(_QWORD *)(a1 + 408))
  {
    v9 = operator new();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)v9 = v9 + 8;
    *(_QWORD *)(v9 + 24) = 850045863;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(a1 + 408) = v9;
  }
  std::mutex::unlock(v8);
  result = CSCppTextSectionDescriptorMap<Pointer64>::find_section_descriptor_for_range(*(_QWORD *)(a1 + 408), a3, a4);
  if (result
    || (result = (uint64_t)CSCppTextSectionDescriptorMap<Pointer64>::create_section_descriptor_for_range(*(_QWORD *)(a1 + 408), a2, a3, a4)) != 0)
  {
    CSCppTextSectionDataDescriptor::get_text_section_for_range<Pointer64>(result, a3, a4, (uint64_t)a2, (uint64_t)v12);
    if (a4 + a3 <= v12[0] + v12[1])
      v11 = v12[2] + a3 - v12[0];
    else
      v11 = 0;
    if (a3 >= v12[0])
      return v11;
    else
      return 0;
  }
  return result;
}

void sub_1B417D648(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

TMMapSymbolOwnerData *TMMapSymbolOwnerData::_augment_data_to_include_text_section(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  unsigned int *v3;
  __int16 v4;
  CSCppSymbolOwner *v6;
  __int16 v7;
  CSCppMMapArchiveCache *v8;
  TMMapArchive *v9;
  TMMapSymbolOwnerData *v10;

  v3 = (unsigned int *)((char *)this + 12);
  v4 = atomic_load((unsigned int *)this + 3);
  if ((v4 & 0x1000) != 0)
  {
    v10 = 0;
  }
  else
  {
    std::mutex::lock((std::mutex *)((char *)this + 16));
    v7 = atomic_load(v3);
    if ((v7 & 0x1000) != 0
      || (v8 = CSCppMMapArchiveCache::augment_mmap_archive_to_include_text_section(*((CSCppMMapArchiveCache **)this + 11), a2, v6), (v9 = v8) == 0)|| v8 == *((CSCppMMapArchiveCache **)this + 11))
    {
      v10 = 0;
    }
    else
    {
      v10 = (TMMapSymbolOwnerData *)operator new();
      TMMapSymbolOwnerData::TMMapSymbolOwnerData(v10, a2, v9);
    }
    std::mutex::unlock((std::mutex *)((char *)this + 16));
  }
  if (v10)
    return v10;
  else
    return this;
}

void sub_1B417D714(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  MEMORY[0x1B5E36940](v2, 0x10A1C40F2B1C752);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

char *TMMapSymbolOwnerData::demangledNameForSymbol(uint64_t a1, unint64_t a2)
{
  _DWORD *v2;
  char *result;
  uint64_t v4;

  v2 = *(_DWORD **)(a1 + 88);
  result = CSCppDeferredDemangler::demangledNameForSymbol(a1 + 144, a2, (uint64_t)v2+ 32 * v2[2]+ 24 * v2[3]+ (24 * v2[4])+ (unint64_t)(4 * v2[4])+ (36 * v2[5])+ (20 * v2[6])+ v2[22]+ v2[20]+ 96);
  if (!v4)
    return 0;
  return result;
}

void TMMapSymbolOwnerData::~TMMapSymbolOwnerData(TMMapSymbolOwnerData *this, TMMapArchive *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E677A380;
  v3 = *((_QWORD *)this + 51);
  if (v3)
  {
    v4 = CSCppTextSectionDescriptorMap<Pointer64>::~CSCppTextSectionDescriptorMap(v3);
    MEMORY[0x1B5E36940](v4, 0x1020C40791C62A7);
  }
  CSCppMMapArchiveCache::release_archive(*((_QWORD *)this + 11), a2);
  CSCppDeferredDemangler::~CSCppDeferredDemangler((TMMapSymbolOwnerData *)((char *)this + 144));
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  *(_QWORD *)this = off_1E6775488;
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

{
  TMMapSymbolOwnerData::~TMMapSymbolOwnerData(this, a2);
  JUMPOUT(0x1B5E36940);
}

uint64_t TMMapSymbolOwnerData::relinked_subdylib_path_for_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0;
}

uint64_t TMMapSymbolOwnerData::relinked_subdylib_name_for_address(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0;
}

uint64_t TMMapSymbolOwnerData::unique_relinked_subdylib_count(TMMapSymbolOwnerData *this, CSCppSymbolOwner *a2)
{
  return 0;
}

uint64_t TMMapSymbolOwnerData::type_id(TMMapSymbolOwnerData *this)
{
  return 4;
}

uint64_t TMMapSymbolOwnerData::dsym_path(TMMapArchive **this)
{
  return TMMapArchive::dsym_path(this[11]);
}

uint64_t TMMapSymbolOwnerData::dylib_current_version(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 11) + 32);
}

uint64_t TMMapSymbolOwnerData::dylib_compatibility_version(TMMapSymbolOwnerData *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 11) + 36);
}

uint64_t TMMapSymbolOwnerData::version(TMMapArchive **this)
{
  return TMMapArchive::version(this[11]);
}

char *TMMapSymbolOwnerData::optional_symbolicator_flags(TMMapSymbolOwnerData *this)
{
  char *result;

  result = (char *)*((_QWORD *)this + 11);
  if (result)
  {
    result = TMMapArchive::optional_data((TMMapArchive *)result);
    if (result)
    {
      if (*((_DWORD *)result + 1))
      {
        if (*((_DWORD *)result + 2) >= 0x14u)
          result += 16;
        else
          return 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

_QWORD *std::vector<MMapSegment>::__init_with_size[abi:ne180100]<MMapSegment const*,MMapSegment const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B417D96C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  _DWORD *v4;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a1;
    v8 = a2 - a1;
    while (1)
    {
      v9 = v8 >> 1;
      v10 = &v7[v8 >> 1];
      v11 = *a3;
      v12 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 12);
      SearchSymbolByName::verify_string_pointer(this, v12);
      if (strcmp(v12, v11) < 0)
      {
        v7 = v10 + 1;
        v9 = v8 + ~v9;
      }
      else
      {
        v13 = *a3;
        v14 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 12);
        SearchSymbolByName::verify_string_pointer(this, v14);
        if ((strcmp(v13, v14) & 0x80000000) == 0)
        {
          v7 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByName>(v7, &v7[v8 >> 1], a3, this);
          std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity &>(v10 + 1, v4, a3, this);
          return v7;
        }
        v4 = &v7[v8 >> 1];
      }
      v8 = v9;
      if (!v9)
        return v7;
    }
  }
  return a2;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByName>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  _DWORD *v4;
  unint64_t v7;
  const char *v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  char *v12;
  int v13;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = *a3;
      v9 = &v4[v7 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 3] - v11);
      SearchSymbolByName::verify_string_pointer(this, v12);
      v13 = strcmp(v12, v8);
      if (v13 >= 0)
        v7 >>= 1;
      else
        v7 += ~(v7 >> 1);
      if (v13 < 0)
        v4 = v10;
    }
    while (v7);
  }
  return v4;
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByName &,unsigned int *,unsigned int *,char const*,std::__identity &>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  _DWORD *v4;
  unint64_t v7;
  const char *v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  char *v12;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = *a3;
      v9 = &v4[v7 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 3] - v11);
      SearchSymbolByName::verify_string_pointer(this, v12);
      if (strcmp(v8, v12) < 0)
      {
        v7 >>= 1;
      }
      else
      {
        v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

BOOL SearchSymbolByName::verify_string_pointer(TMMapArchive **this, char *a2)
{
  _BOOL8 result;
  void *exception;

  result = TMMapArchive::is_pointer_within_strtab(this[1], a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E36748](exception, "Encountered symbol with bad name reference during binary search");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B417DC70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__equal_range[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  _DWORD *v4;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a1;
    v8 = a2 - a1;
    while (1)
    {
      v9 = v8 >> 1;
      v10 = &v7[v8 >> 1];
      v11 = *a3;
      v12 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 16);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      if (strcmp(v12, v11) < 0)
      {
        v7 = v10 + 1;
        v9 = v8 + ~v9;
      }
      else
      {
        v13 = *a3;
        v14 = (char *)*this + *(unsigned int *)((char *)v10 - *v10 + 16);
        SearchSymbolByMangledName::verify_string_pointer(this, v14);
        if ((strcmp(v13, v14) & 0x80000000) == 0)
        {
          v7 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByMangledName>(v7, &v7[v8 >> 1], a3, this);
          std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity &>(v10 + 1, v4, a3, this);
          return v7;
        }
        v4 = &v7[v8 >> 1];
      }
      v8 = v9;
      if (!v9)
        return v7;
    }
  }
  return a2;
}

_DWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,unsigned int *,char const*,std::__identity,SearchSymbolByMangledName>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  _DWORD *v4;
  unint64_t v7;
  const char *v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  char *v12;
  int v13;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = *a3;
      v9 = &v4[v7 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 4] - v11);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      v13 = strcmp(v12, v8);
      if (v13 >= 0)
        v7 >>= 1;
      else
        v7 += ~(v7 >> 1);
      if (v13 < 0)
        v4 = v10;
    }
    while (v7);
  }
  return v4;
}

_DWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,SearchSymbolByMangledName &,unsigned int *,unsigned int *,char const*,std::__identity &>(_DWORD *a1, _DWORD *a2, const char **a3, TMMapArchive **this)
{
  _DWORD *v4;
  unint64_t v7;
  const char *v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  char *v12;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = a2 - a1;
    v4 = a1;
    do
    {
      v8 = *a3;
      v9 = &v4[v7 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v12 = (char *)*this + *(unsigned int *)((char *)&v4[(v7 >> 1) + 4] - v11);
      SearchSymbolByMangledName::verify_string_pointer(this, v12);
      if (strcmp(v8, v12) < 0)
      {
        v7 >>= 1;
      }
      else
      {
        v4 = v10;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

BOOL SearchSymbolByMangledName::verify_string_pointer(TMMapArchive **this, char *a2)
{
  _BOOL8 result;
  void *exception;

  result = TMMapArchive::is_pointer_within_strtab(this[1], a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E36748](exception, "Encountered symbol with bad name reference during binary search");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B417DF6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MMapSegment>::__init_with_size[abi:ne180100]<std::__wrap_iter<MMapSegment const*>,std::__wrap_iter<MMapSegment const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CSCppSegmentRange>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B417DFDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  const char *v17;
  const char *v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  char v22;
  BOOL v23;
  const char *v24;
  const char *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  const char *v29;
  int v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1))
        v6 = (const char *)*(a2 - 1);
      else
        v6 = (const char *)*(a2 - 2);
      if (a1[3])
        v7 = (const char *)a1[3];
      else
        v7 = (const char *)a1[2];
      v8 = strncmp(v6, v7, 0x10uLL);
      v10 = *(v2 - 4);
      v9 = v2 - 4;
      v11 = v10 < *a1;
      if (v8)
        v11 = v8 < 0;
      if (v11)
      {
        v13 = *(_OWORD *)a1;
        v12 = *((_OWORD *)a1 + 1);
        v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      v16 = a1 + 12;
      if (a1 + 12 == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v33 = v2;
      break;
  }
  while (1)
  {
    v20 = v16[2];
    v19 = v16[3];
    if (v19)
      v21 = (const char *)v16[3];
    else
      v21 = (const char *)v16[2];
    if (v15[3])
      v22 = (const char *)v15[3];
    else
      v22 = (const char *)v15[2];
    v23 = strncmp(v21, v22, 0x10uLL);
    v24 = *v16;
    v25 = *v16 < *v15;
    if (v23)
      v25 = v23 < 0;
    if (v25)
    {
      v34 = v16[1];
      v26 = v17;
      while (1)
      {
        v27 = (char *)a1 + v26;
        v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64)
          break;
        if (*((_QWORD *)v27 + 7))
          v29 = (const char *)*((_QWORD *)v27 + 7);
        else
          v29 = (const char *)*((_QWORD *)v27 + 6);
        v30 = strncmp(v21, v29, 0x10uLL);
        v31 = v24 < *((_QWORD *)v27 + 4);
        if (v30)
          v31 = v30 < 0;
        v26 -= 32;
        if (!v31)
        {
          v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      v32 = a1;
LABEL_33:
      v2 = v33;
      *v32 = v24;
      v32[1] = v34;
      v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8)
        return v16 + 4 == v33;
    }
    v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,false>(char *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  int v17;
  BOOL v18;
  char *v19;
  char v20;
  BOOL v21;
  int v22;
  char *v23;
  unint64_t v24;
  _BOOL4 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

_OWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(_OWORD *result, _OWORD *a2)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  const char *v7;
  _BOOL4 v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  BOOL v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v3 = result;
    v4 = result + 2;
    if (result + 2 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = (const char *)v6;
        v6 = v4;
        result = (_OWORD *)strncmp(v7 + 48, v7 + 16, 0x10uLL);
        v8 = *((_QWORD *)v7 + 4) < *(_QWORD *)v7;
        if ((_DWORD)result)
          v8 = (int)result < 0;
        if (v8)
        {
          v15 = *v6;
          v16 = v6[1];
          v9 = v5;
          while (1)
          {
            v10 = (char *)v3 + v9;
            v11 = *(_OWORD *)((char *)v3 + v9 + 16);
            *((_OWORD *)v10 + 2) = *(_OWORD *)((char *)v3 + v9);
            *((_OWORD *)v10 + 3) = v11;
            if (!v9)
              break;
            result = (_OWORD *)strncmp((const char *)&v16, v10 - 16, 0x10uLL);
            v12 = (unint64_t)v15 < *((_QWORD *)v10 - 4);
            if ((_DWORD)result)
              v12 = (int)result < 0;
            v9 -= 32;
            if (!v12)
            {
              v13 = (_OWORD *)((char *)v3 + v9 + 32);
              goto LABEL_14;
            }
          }
          v13 = v3;
LABEL_14:
          v14 = v16;
          *v13 = v15;
          v13[1] = v14;
        }
        v4 = v6 + 2;
        v5 += 32;
      }
      while (v6 + 2 != a2);
    }
  }
  return result;
}

_OWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(_OWORD *result, _OWORD *a2)
{
  _OWORD *v3;
  _OWORD *i;
  const char *v5;
  _BOOL4 v6;
  char *v7;
  char *v8;
  __int128 v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v3 = result;
    for (i = result + 2; v3 + 2 != a2; i = v3 + 2)
    {
      v5 = (const char *)v3;
      v3 = i;
      result = (_OWORD *)strncmp(v5 + 48, v5 + 16, 0x10uLL);
      v6 = *((_QWORD *)v5 + 4) < *(_QWORD *)v5;
      if ((_DWORD)result)
        v6 = (int)result < 0;
      if (v6)
      {
        v12 = *v3;
        v13 = v3[1];
        v7 = (char *)v3;
        do
        {
          v9 = *((_OWORD *)v7 - 1);
          *(_OWORD *)v7 = *((_OWORD *)v7 - 2);
          *((_OWORD *)v7 + 1) = v9;
          result = (_OWORD *)strncmp((const char *)&v13, v7 - 48, 0x10uLL);
          v10 = (unint64_t)v12 < *((_QWORD *)v7 - 8);
          if ((_DWORD)result)
            v10 = (int)result < 0;
          v8 = v7 - 32;
          v7 -= 32;
        }
        while (v10);
        v11 = v13;
        *(_OWORD *)v8 = v12;
        *((_OWORD *)v8 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(char *a1, char *a2, char *a3)
{
  const char *v6;
  const char *v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _BOOL4 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  _BOOL4 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v6 = a2 + 16;
  v7 = a1 + 16;
  v8 = strncmp(a2 + 16, a1 + 16, 0x10uLL);
  v9 = *(_QWORD *)a2;
  if (v8)
    v10 = v8 < 0;
  else
    v10 = *(_QWORD *)a2 < *(_QWORD *)a1;
  v11 = strncmp(a3 + 16, v6, 0x10uLL);
  v12 = *(_QWORD *)a3 < v9;
  if (v11)
    v12 = v11 < 0;
  if (v10)
  {
    if (v12)
    {
      v14 = *(_OWORD *)a1;
      v13 = *((_OWORD *)a1 + 1);
      v15 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v15;
      *(_OWORD *)a3 = v14;
      *((_OWORD *)a3 + 1) = v13;
      return 1;
    }
    v25 = *(_OWORD *)a1;
    v24 = *((_OWORD *)a1 + 1);
    v26 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v26;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v24;
    v27 = strncmp(a3 + 16, v6, 0x10uLL);
    v28 = *(_QWORD *)a3 < *(_QWORD *)a2;
    if (v27)
      v28 = v27 < 0;
    if (!v28)
      return 1;
    v30 = *(_OWORD *)a2;
    v29 = *((_OWORD *)a2 + 1);
    v31 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v31;
    *(_OWORD *)a3 = v30;
    *((_OWORD *)a3 + 1) = v29;
    return 2;
  }
  if (v12)
  {
    v17 = *(_OWORD *)a2;
    v16 = *((_OWORD *)a2 + 1);
    v18 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v18;
    *(_OWORD *)a3 = v17;
    *((_OWORD *)a3 + 1) = v16;
    v19 = strncmp(v6, v7, 0x10uLL);
    v20 = *(_QWORD *)a2 < *(_QWORD *)a1;
    if (v19)
      v20 = v19 < 0;
    if (!v20)
      return 1;
    v22 = *(_OWORD *)a1;
    v21 = *((_OWORD *)a1 + 1);
    v23 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v23;
    *(_OWORD *)a2 = v22;
    *((_OWORD *)a2 + 1) = v21;
    return 2;
  }
  return 0;
}

char *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(char *a1, _OWORD *a2)
{
  _OWORD *v2;
  const char *v4;
  int v5;
  BOOL v6;
  const char *v7;
  int v8;
  BOOL v9;
  char *v10;
  _OWORD *v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  __int128 v16;
  __int128 v17;
  const char *v18;
  __int128 v19;
  int v20;
  _BOOL4 v21;
  const char *v22;
  int v23;
  BOOL v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  v29 = *(_OWORD *)a1;
  v30 = *((_OWORD *)a1 + 1);
  v4 = (const char *)(a2 - 1);
  v5 = strncmp((const char *)&v30, (const char *)a2 - 16, 0x10uLL);
  v6 = (unint64_t)v29 < *((_QWORD *)v2 - 4);
  if (v5)
    v6 = v5 < 0;
  if (v6)
  {
    v7 = a1 + 48;
    do
    {
      v8 = strncmp((const char *)&v30, v7, 0x10uLL);
      v9 = (unint64_t)v29 < *((_QWORD *)v7 - 2);
      if (v8)
        v9 = v8 < 0;
      v7 += 32;
    }
    while (!v9);
    v10 = (char *)(v7 - 48);
  }
  else
  {
    v11 = a1 + 32;
    do
    {
      v10 = (char *)v11;
      if (v11 >= v2)
        break;
      v12 = strncmp((const char *)&v30, (const char *)v11 + 16, 0x10uLL);
      v11 = v10 + 32;
      v13 = (unint64_t)v29 < *(_QWORD *)v10;
      if (v12)
        v13 = v12 < 0;
    }
    while (!v13);
  }
  if (v10 < (char *)v2)
  {
    do
    {
      v14 = strncmp((const char *)&v30, v4, 0x10uLL);
      v15 = (unint64_t)v29 < *((_QWORD *)v4 - 2);
      if (v14)
        v15 = v14 < 0;
      v4 -= 32;
    }
    while (v15);
    v2 = v4 + 16;
  }
  while (v10 < (char *)v2)
  {
    v16 = *((_OWORD *)v10 + 1);
    v31 = *(_OWORD *)v10;
    v32 = v16;
    v17 = v2[1];
    *(_OWORD *)v10 = *v2;
    *((_OWORD *)v10 + 1) = v17;
    v18 = v10 + 48;
    v19 = v32;
    *v2 = v31;
    v2[1] = v19;
    do
    {
      v20 = strncmp((const char *)&v30, v18, 0x10uLL);
      v21 = (unint64_t)v29 < *((_QWORD *)v18 - 2);
      if (v20)
        v21 = v20 < 0;
      v18 += 32;
    }
    while (!v21);
    v10 = (char *)(v18 - 48);
    v22 = (const char *)(v2 - 1);
    do
    {
      v23 = strncmp((const char *)&v30, v22, 0x10uLL);
      v24 = (unint64_t)v29 < *((_QWORD *)v22 - 2);
      if (v23)
        v24 = v23 < 0;
      v22 -= 32;
    }
    while (v24);
    v2 = v22 + 16;
  }
  v25 = v10 - 32;
  if (v10 - 32 != a1)
  {
    v26 = *((_OWORD *)v10 - 1);
    *(_OWORD *)a1 = *(_OWORD *)v25;
    *((_OWORD *)a1 + 1) = v26;
  }
  v27 = v30;
  *(_OWORD *)v25 = v29;
  *((_OWORD *)v10 - 1) = v27;
  return v10;
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MMapSegment *,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &>(char *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  unint64_t v7;
  char *v8;
  const char *v9;
  int v10;
  BOOL v11;
  const char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const char *v18;
  int v19;
  BOOL v20;
  const char *v21;
  int v22;
  _BOOL4 v23;
  __int128 v24;
  __int128 v25;
  int v27;
  BOOL v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v4 = 0;
  v33 = *MEMORY[0x1E0C80C00];
  v29 = *(_OWORD *)a1;
  v30 = *((_OWORD *)a1 + 1);
  do
  {
    v5 = strncmp(&a1[v4 + 48], (const char *)&v30, 0x10uLL);
    v6 = *(_QWORD *)&a1[v4 + 32] < (unint64_t)v29;
    if (v5)
      v6 = v5 < 0;
    v4 += 32;
  }
  while (v6);
  v7 = (unint64_t)&a1[v4];
  v8 = &a1[v4 - 32];
  v9 = (const char *)(a2 - 16);
  if (v4 == 32)
  {
    while (1)
    {
      v12 = v9 + 16;
      if (v7 >= (unint64_t)(v9 + 16))
        break;
      v27 = strncmp(v9, (const char *)&v30, 0x10uLL);
      v28 = *((_QWORD *)v9 - 2) < (unint64_t)v29;
      if (v27)
        v28 = v27 < 0;
      v9 -= 32;
      if (v28)
        goto LABEL_9;
    }
  }
  else
  {
    do
    {
      v10 = strncmp(v9, (const char *)&v30, 0x10uLL);
      v11 = *((_QWORD *)v9 - 2) < (unint64_t)v29;
      if (v10)
        v11 = v10 < 0;
      v9 -= 32;
    }
    while (!v11);
LABEL_9:
    v12 = v9 + 16;
  }
  if (v7 < (unint64_t)v12)
  {
    v13 = (char *)v7;
    v14 = (char *)v12;
    do
    {
      v15 = *((_OWORD *)v13 + 1);
      v31 = *(_OWORD *)v13;
      v32 = v15;
      v16 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v16;
      v17 = v32;
      *(_OWORD *)v14 = v31;
      *((_OWORD *)v14 + 1) = v17;
      v18 = v13 + 48;
      do
      {
        v19 = strncmp(v18, (const char *)&v30, 0x10uLL);
        v20 = *((_QWORD *)v18 - 2) < (unint64_t)v29;
        if (v19)
          v20 = v19 < 0;
        v18 += 32;
      }
      while (v20);
      v13 = (char *)(v18 - 48);
      v21 = v14 - 16;
      do
      {
        v22 = strncmp(v21, (const char *)&v30, 0x10uLL);
        v23 = *((_QWORD *)v21 - 2) < (unint64_t)v29;
        if (v22)
          v23 = v22 < 0;
        v21 -= 32;
      }
      while (!v23);
      v14 = (char *)(v21 + 16);
    }
    while (v13 < v14);
    v8 = (char *)(v18 - 80);
  }
  if (v8 != a1)
  {
    v24 = *((_OWORD *)v8 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *((_OWORD *)a1 + 1) = v24;
  }
  v25 = v30;
  *(_OWORD *)v8 = v29;
  *((_OWORD *)v8 + 1) = v25;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  _OWORD *v7;
  unint64_t v8;
  _BOOL4 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  BOOL v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  char v27[56];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = strncmp((const char *)(a2 - 16), (const char *)(a1 + 16), 0x10uLL);
      v8 = *(_QWORD *)(a2 - 32);
      v7 = (_OWORD *)(a2 - 32);
      v9 = v8 < *(_QWORD *)a1;
      if (v6)
        v9 = v6 < 0;
      if (v9)
      {
        v11 = *(_OWORD *)a1;
        v10 = *(_OWORD *)(a1 + 16);
        v12 = v7[1];
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 16) = v12;
        *v7 = v11;
        v7[1] = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)(a1 + 32), (char *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (char *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, a1 + 32, a1 + 64, (__int128 *)(a1 + 96), (char *)(a2 - 32));
      return 1;
    default:
      v13 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)(a1 + 32), (char *)(a1 + 64));
      v14 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = strncmp((const char *)(v14 + 16), (const char *)(v13 + 16), 0x10uLL);
    v18 = *(_QWORD *)v14 < *(_QWORD *)v13;
    if (v17)
      v18 = v17 < 0;
    if (v18)
    {
      v26 = *(_OWORD *)v14;
      *(_OWORD *)v27 = *(_OWORD *)(v14 + 16);
      v19 = v15;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(a1 + v19 + 64);
        *(_OWORD *)(v20 + 112) = v21;
        if (v19 == -64)
          break;
        v22 = strncmp(v27, (const char *)(v20 + 48), 0x10uLL);
        v23 = (unint64_t)v26 < *(_QWORD *)(v20 + 32);
        if (v22)
          v23 = v22 < 0;
        v19 -= 32;
        if (!v23)
        {
          v24 = (_OWORD *)(a1 + v19 + 96);
          goto LABEL_18;
        }
      }
      v24 = (_OWORD *)a1;
LABEL_18:
      v25 = *(_OWORD *)v27;
      *v24 = v26;
      v24[1] = v25;
      if (++v16 == 8)
        return v14 + 32 == a2;
    }
    v13 = v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(__int128 *a1, __int128 *a2, __int128 *a3, char *a4)
{
  int v8;
  __n128 result;
  _BOOL4 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  _BOOL4 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _BOOL4 v20;
  __int128 v21;
  __int128 v22;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)a2, (char *)a3);
  v8 = strncmp(a4 + 16, (const char *)a3 + 16, 0x10uLL);
  v10 = *(_QWORD *)a4 < *(_QWORD *)a3;
  if (v8)
    v10 = v8 < 0;
  if (v10)
  {
    v12 = *a3;
    v11 = a3[1];
    v13 = *((_OWORD *)a4 + 1);
    *a3 = *(_OWORD *)a4;
    a3[1] = v13;
    *(_OWORD *)a4 = v12;
    *((_OWORD *)a4 + 1) = v11;
    v14 = strncmp((const char *)a3 + 16, (const char *)a2 + 16, 0x10uLL);
    v15 = *(_QWORD *)a3 < *(_QWORD *)a2;
    if (v14)
      v15 = v14 < 0;
    if (v15)
    {
      v17 = *a2;
      v16 = a2[1];
      v18 = a3[1];
      *a2 = *a3;
      a2[1] = v18;
      *a3 = v17;
      a3[1] = v16;
      v19 = strncmp((const char *)a2 + 16, (const char *)a1 + 16, 0x10uLL);
      v20 = *(_QWORD *)a2 < *(_QWORD *)a1;
      if (v19)
        v20 = v19 < 0;
      if (v20)
      {
        v21 = *a1;
        result = (__n128)a1[1];
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *a2 = v21;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, char *a5)
{
  int v10;
  __n128 result;
  _BOOL4 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  _BOOL4 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  _BOOL4 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  _BOOL4 v27;
  __int128 v28;
  __int128 v29;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, (char *)a4);
  v10 = strncmp(a5 + 16, (const char *)a4 + 16, 0x10uLL);
  v12 = *(_QWORD *)a5 < *(_QWORD *)a4;
  if (v10)
    v12 = v10 < 0;
  if (v12)
  {
    v14 = *a4;
    v13 = a4[1];
    v15 = *((_OWORD *)a5 + 1);
    *a4 = *(_OWORD *)a5;
    a4[1] = v15;
    *(_OWORD *)a5 = v14;
    *((_OWORD *)a5 + 1) = v13;
    v16 = strncmp((const char *)a4 + 16, (const char *)(a3 + 16), 0x10uLL);
    v17 = *(_QWORD *)a4 < *(_QWORD *)a3;
    if (v16)
      v17 = v16 < 0;
    if (v17)
    {
      v19 = *(_OWORD *)a3;
      v18 = *(_OWORD *)(a3 + 16);
      v20 = a4[1];
      *(_OWORD *)a3 = *a4;
      *(_OWORD *)(a3 + 16) = v20;
      *a4 = v19;
      a4[1] = v18;
      v21 = strncmp((const char *)(a3 + 16), (const char *)(a2 + 16), 0x10uLL);
      v22 = *(_QWORD *)a3 < *(_QWORD *)a2;
      if (v21)
        v22 = v21 < 0;
      if (v22)
      {
        v24 = *(_OWORD *)a2;
        v23 = *(_OWORD *)(a2 + 16);
        v25 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v25;
        *(_OWORD *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v23;
        v26 = strncmp((const char *)(a2 + 16), (const char *)(a1 + 16), 0x10uLL);
        v27 = *(_QWORD *)a2 < *(_QWORD *)a1;
        if (v26)
          v27 = v26 < 0;
        if (v27)
        {
          v28 = *(_OWORD *)a1;
          result = *(__n128 *)(a1 + 16);
          v29 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v29;
          *(_OWORD *)a2 = v28;
          *(__n128 *)(a2 + 16) = result;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*,MMapSegment*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  char *v14;
  int v15;
  _BOOL4 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v26;
  __int128 v27;

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (char *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = (char *)a2;
      do
      {
        v15 = strncmp(v14 + 16, (const char *)(a1 + 16), 0x10uLL);
        v16 = *(_QWORD *)v14 < *(_QWORD *)a1;
        if (v15)
          v16 = v15 < 0;
        if (v16)
        {
          v18 = *(_OWORD *)v14;
          v17 = *((_OWORD *)v14 + 1);
          v19 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *((_OWORD *)v14 + 1) = v19;
          *(_OWORD *)a1 = v18;
          *(_OWORD *)(a1 + 16) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, a4, v9, (char *)a1);
        }
        v14 += 32;
      }
      while (v14 != (char *)a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v20 = (unint64_t)v8 >> 5;
      v21 = (char *)(a2 - 2);
      do
      {
        v26 = *(_OWORD *)a1;
        v27 = *(_OWORD *)(a1 + 16);
        v22 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, a4, v20);
        if (v21 == v22)
        {
          *(_OWORD *)v22 = v26;
          *((_OWORD *)v22 + 1) = v27;
        }
        else
        {
          v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)v22 = *(_OWORD *)v21;
          *((_OWORD *)v22 + 1) = v23;
          *(_OWORD *)v21 = v26;
          *((_OWORD *)v21 + 1) = v27;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, (uint64_t)(v22 + 32), a4, (uint64_t)&v22[-a1 + 32] >> 5);
        }
        v21 -= 32;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

double std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  char *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  unint64_t v15;
  int v16;
  double result;
  BOOL v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  unint64_t v24;
  int v25;
  _BOOL4 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)&a4[-a1] >> 5)
    {
      v9 = (uint64_t)&a4[-a1] >> 4;
      v10 = v9 + 1;
      v11 = (uint64_t *)(a1 + 32 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        v15 = *v11;
      }
      else
      {
        v13 = strncmp((const char *)v11 + 16, (const char *)v11 + 48, 0x10uLL);
        v14 = *v11 < (unint64_t)v11[4];
        if (v13)
          v14 = v13 < 0;
        if (v14)
          v15 = v11[4];
        else
          v15 = *v11;
        if (v14)
        {
          v11 += 4;
          v10 = v12;
        }
      }
      v16 = strncmp((const char *)v11 + 16, v5 + 16, 0x10uLL);
      v18 = v15 < *(_QWORD *)v5;
      if (v16)
        v18 = v16 < 0;
      if (!v18)
      {
        v28 = *(_OWORD *)v5;
        v29 = *((_OWORD *)v5 + 1);
        do
        {
          v19 = (char *)v11;
          v20 = *((_OWORD *)v11 + 1);
          *(_OWORD *)v5 = *(_OWORD *)v11;
          *((_OWORD *)v5 + 1) = v20;
          if (v7 < v10)
            break;
          v21 = (2 * v10) | 1;
          v11 = (uint64_t *)(a1 + 32 * v21);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v24 = *v11;
            v10 = v21;
          }
          else
          {
            v22 = strncmp((const char *)v11 + 16, (const char *)v11 + 48, 0x10uLL);
            v23 = *v11 < (unint64_t)v11[4];
            if (v22)
              v23 = v22 < 0;
            v24 = v23 ? v11[4] : *v11;
            if (v23)
              v11 += 4;
            else
              v10 = v21;
          }
          v25 = strncmp((const char *)v11 + 16, (const char *)&v29, 0x10uLL);
          v26 = v24 < (unint64_t)v28;
          if (v25)
            v26 = v25 < 0;
          v5 = v19;
        }
        while (!v26);
        result = *(double *)&v28;
        v27 = v29;
        *(_OWORD *)v19 = v28;
        *((_OWORD *)v19 + 1) = v27;
      }
    }
  }
  return result;
}

const char *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  __int128 v13;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[32 * v5 + 32];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      v11 = strncmp(v8 + 16, v8 + 48, 0x10uLL);
      v12 = *(_QWORD *)v8 < *((_QWORD *)v8 + 4);
      if (v11)
        v12 = v11 < 0;
      if (v12)
      {
        v8 += 32;
        v9 = v10;
      }
    }
    v13 = *((_OWORD *)v8 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *((_OWORD *)a1 + 1) = v13;
    a1 = (char *)v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  int v9;
  double result;
  __int128 *v11;
  unint64_t v12;
  _BOOL4 v13;
  __int128 *v14;
  __int128 v15;
  int v16;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = a1 + 32 * (v4 >> 1);
    v9 = strncmp((const char *)(v8 + 16), (const char *)(a2 - 16), 0x10uLL);
    v12 = *(_QWORD *)(a2 - 32);
    v11 = (__int128 *)(a2 - 32);
    v13 = *(_QWORD *)v8 < v12;
    if (v9)
      v13 = v9 < 0;
    if (v13)
    {
      v19 = *v11;
      v20 = v11[1];
      do
      {
        v14 = (__int128 *)v8;
        v15 = *(_OWORD *)(v8 + 16);
        *v11 = *(_OWORD *)v8;
        v11[1] = v15;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = a1 + 32 * v7;
        v16 = strncmp((const char *)(v8 + 16), (const char *)&v20, 0x10uLL);
        v17 = *(_QWORD *)v8 < (unint64_t)v19;
        if (v16)
          v17 = v16 < 0;
        v11 = v14;
      }
      while (v17);
      result = *(double *)&v19;
      v18 = v20;
      *v14 = v19;
      v14[1] = v18;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*,false>(char *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  int v17;
  BOOL v18;
  char *v19;
  char v20;
  BOOL v21;
  int v22;
  char *v23;
  unint64_t v24;
  _BOOL4 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,MMapSegment*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  _OWORD *v7;
  unint64_t v8;
  _BOOL4 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  BOOL v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  char v27[56];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = strncmp((const char *)(a2 - 16), (const char *)(a1 + 16), 0x10uLL);
      v8 = *(_QWORD *)(a2 - 32);
      v7 = (_OWORD *)(a2 - 32);
      v9 = v8 < *(_QWORD *)a1;
      if (v6)
        v9 = v6 < 0;
      if (v9)
      {
        v11 = *(_OWORD *)a1;
        v10 = *(_OWORD *)(a1 + 16);
        v12 = v7[1];
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 16) = v12;
        *v7 = v11;
        v7[1] = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)(a1 + 32), (char *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (char *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>(a1, a1 + 32, a1 + 64, (__int128 *)(a1 + 96), (char *)(a2 - 32));
      return 1;
    default:
      v13 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,MMapSegment>(std::vector<CSCppSegmentRange> const&,std::vector<MMapSegment> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,MMapSegment*>((char *)a1, (char *)(a1 + 32), (char *)(a1 + 64));
      v14 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = strncmp((const char *)(v14 + 16), (const char *)(v13 + 16), 0x10uLL);
    v18 = *(_QWORD *)v14 < *(_QWORD *)v13;
    if (v17)
      v18 = v17 < 0;
    if (v18)
    {
      v26 = *(_OWORD *)v14;
      *(_OWORD *)v27 = *(_OWORD *)(v14 + 16);
      v19 = v15;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(a1 + v19 + 64);
        *(_OWORD *)(v20 + 112) = v21;
        if (v19 == -64)
          break;
        v22 = strncmp(v27, (const char *)(v20 + 48), 0x10uLL);
        v23 = (unint64_t)v26 < *(_QWORD *)(v20 + 32);
        if (v22)
          v23 = v22 < 0;
        v19 -= 32;
        if (!v23)
        {
          v24 = (_OWORD *)(a1 + v19 + 96);
          goto LABEL_18;
        }
      }
      v24 = (_OWORD *)a1;
LABEL_18:
      v25 = *(_OWORD *)v27;
      *v24 = v26;
      v24[1] = v25;
      if (++v16 == 8)
        return v14 + 32 == a2;
    }
    v13 = v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  const char *v17;
  const char *v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  char v22;
  BOOL v23;
  const char *v24;
  const char *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,MMapSegment,CSCppSegmentRange>(std::vector<MMapSegment> const&,std::vector<CSCppSegmentRange> const&,BOOL)::{lambda(Pointer64&,MMapSegment&)#1} &,CSCppSegmentRange*>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  const char *v29;
  int v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1))
        v6 = (const char *)*(a2 - 1);
      else
        v6 = (const char *)*(a2 - 2);
      if (a1[3])
        v7 = (const char *)a1[3];
      else
        v7 = (const char *)a1[2];
      v8 = strncmp(v6, v7, 0x10uLL);
      v10 = *(v2 - 4);
      v9 = v2 - 4;
      v11 = v10 < *a1;
      if (v8)
        v11 = v8 < 0;
      if (v11)
      {
        v13 = *(_OWORD *)a1;
        v12 = *((_OWORD *)a1 + 1);
        v14 = *((_OWORD *)v9 + 1);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *((_OWORD *)a1 + 1) = v14;
        *(_OWORD *)v9 = v13;
        *((_OWORD *)v9 + 1) = v12;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v15 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<TRangeValue<Pointer64,Pointer64::off_t>> create_segment_relocation_deltas<Pointer64,CSCppSegmentRange,CSCppFlatbufferRelocation>(std::vector<CSCppSegmentRange> const&,std::vector<CSCppFlatbufferRelocation> const&,BOOL)::{lambda(Pointer64&,CSCppSegmentRange&)#1} &,CSCppSegmentRange*>(a1, a1 + 4, a1 + 8);
      v16 = a1 + 12;
      if (a1 + 12 == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v33 = v2;
      break;
  }
  while (1)
  {
    v20 = v16[2];
    v19 = v16[3];
    if (v19)
      v21 = (const char *)v16[3];
    else
      v21 = (const char *)v16[2];
    if (v15[3])
      v22 = (const char *)v15[3];
    else
      v22 = (const char *)v15[2];
    v23 = strncmp(v21, v22, 0x10uLL);
    v24 = *v16;
    v25 = *v16 < *v15;
    if (v23)
      v25 = v23 < 0;
    if (v25)
    {
      v34 = v16[1];
      v26 = v17;
      while (1)
      {
        v27 = (char *)a1 + v26;
        v28 = *(_OWORD *)((char *)a1 + v26 + 80);
        *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)a1 + v26 + 64);
        *((_OWORD *)v27 + 7) = v28;
        if (v26 == -64)
          break;
        if (*((_QWORD *)v27 + 7))
          v29 = (const char *)*((_QWORD *)v27 + 7);
        else
          v29 = (const char *)*((_QWORD *)v27 + 6);
        v30 = strncmp(v21, v29, 0x10uLL);
        v31 = v24 < *((_QWORD *)v27 + 4);
        if (v30)
          v31 = v30 < 0;
        v26 -= 32;
        if (!v31)
        {
          v32 = (unint64_t *)((char *)a1 + v26 + 96);
          goto LABEL_33;
        }
      }
      v32 = a1;
LABEL_33:
      v2 = v33;
      *v32 = v24;
      v32[1] = v34;
      v32[2] = v20;
      v32[3] = v19;
      if (++v18 == 8)
        return v16 + 4 == v33;
    }
    v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == v2)
      return 1;
  }
}

void std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::~__func()
{
  JUMPOUT(0x1B5E36940);
}

__n128 std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E677A4C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E677A4C0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::operator()(uint64_t a1, unint64_t **a2, uint64_t *a3)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint8_t v56[4];
  int v57;
  uint8_t buf[8];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = **a2;
  v55 = 0;
  if ((TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(v6 + 120), v7, &v55) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Symbol archive address 0x%x could not be relocated to real address\n", buf, 8u);
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Symbol archive address 0x%x could not be relocated to real address\n");
    return;
  }
  v8 = v55;
  if (*(_DWORD *)(a1 + 56) == -1 && v55 > **(_QWORD **)(a1 + 48))
  {
    v9 = *(_QWORD *)(a1 + 40);
    (*(void (**)(void))(*(_QWORD *)(v9 + 8) + 16))();
    ++**(_QWORD **)v9;
    **(_QWORD **)(a1 + 48) = v55;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 32) | 5;
  v12 = *(uint64_t **)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  if ((unint64_t)v12 >= v13)
  {
    v15 = *(uint64_t **)v10;
    v16 = ((uint64_t)v12 - *(_QWORD *)v10) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v18 = v13 - (_QWORD)v15;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v10 + 16, v19);
      v15 = *(uint64_t **)v10;
      v12 = *(uint64_t **)(v10 + 8);
    }
    else
    {
      v20 = 0;
    }
    v21 = (uint64_t *)&v20[16 * v16];
    v22 = &v20[16 * v19];
    *v21 = v11;
    v21[1] = (uint64_t)v4;
    v14 = v21 + 2;
    if (v12 != v15)
    {
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v12 - 1);
        v21 -= 2;
        v12 -= 2;
      }
      while (v12 != v15);
      v15 = *(uint64_t **)v10;
    }
    *(_QWORD *)v10 = v21;
    *(_QWORD *)(v10 + 8) = v14;
    *(_QWORD *)(v10 + 16) = v22;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v12 = v11;
    v12[1] = (uint64_t)v4;
    v14 = v12 + 2;
  }
  *(_QWORD *)(v10 + 8) = v14;
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v25 = v24 | 5;
    v26 = *(_QWORD *)(v23 + 16);
    v27 = *(uint64_t **)(v23 + 8);
    if ((unint64_t)v27 < v26)
    {
      *v27 = v25;
      v27[1] = v5;
LABEL_30:
      v29 = v27 + 2;
      goto LABEL_57;
    }
    v30 = *(uint64_t **)v23;
    v31 = ((uint64_t)v27 - *(_QWORD *)v23) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v33 = v26 - (_QWORD)v30;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v23 + 16, v34);
      v30 = *(uint64_t **)v23;
      v27 = *(uint64_t **)(v23 + 8);
    }
    else
    {
      v35 = 0;
    }
    v41 = (uint64_t *)&v35[16 * v31];
    v42 = &v35[16 * v34];
    *v41 = v25;
    v41[1] = v5;
    v29 = v41 + 2;
    if (v27 != v30)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v27 - 1);
        v41 -= 2;
        v27 -= 2;
      }
      while (v27 != v30);
LABEL_54:
      v30 = *(uint64_t **)v23;
    }
  }
  else
  {
    v28 = *(_QWORD *)(v23 + 16);
    v27 = *(uint64_t **)(v23 + 8);
    if ((unint64_t)v27 < v28)
    {
      *v27 = v24;
      v27[1] = (uint64_t)v4;
      goto LABEL_30;
    }
    v30 = *(uint64_t **)v23;
    v36 = ((uint64_t)v27 - *(_QWORD *)v23) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
    v38 = v28 - (_QWORD)v30;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>(v23 + 16, v39);
      v30 = *(uint64_t **)v23;
      v27 = *(uint64_t **)(v23 + 8);
    }
    else
    {
      v40 = 0;
    }
    v41 = (uint64_t *)&v40[16 * v36];
    v42 = &v40[16 * v39];
    *v41 = v24;
    v41[1] = (uint64_t)v4;
    v29 = v41 + 2;
    if (v27 != v30)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v27 - 1);
        v41 -= 2;
        v27 -= 2;
      }
      while (v27 != v30);
      goto LABEL_54;
    }
  }
  *(_QWORD *)v23 = v41;
  *(_QWORD *)(v23 + 8) = v29;
  *(_QWORD *)(v23 + 16) = v42;
  if (v30)
    operator delete(v30);
LABEL_57:
  *(_QWORD *)(v23 + 8) = v29;
  if (*(int *)(a1 + 56) + 1 == (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 4)
  {
    v43 = *(_QWORD *)(a1 + 40);
    CSSymbolGetRange(*(_QWORD *)(a1 + 32) | 5, (uint64_t)v4);
    (*(void (**)(void))(*(_QWORD *)(v43 + 8) + 16))();
    ++**(_QWORD **)v43;
  }
  v44 = v8 + HIDWORD(v7);
  v45 = *((unsigned int *)v4 + 5);
  v46 = v44;
  if ((_DWORD)v45 == -1)
  {
LABEL_73:
    if (*(_DWORD *)(a1 + 56) != -1)
    {
LABEL_74:
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) -= 16;
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) -= 16;
      return;
    }
    if (v46 <= **(_QWORD **)(a1 + 48))
    {
      v46 = **(_QWORD **)(a1 + 48);
    }
    else
    {
      v53 = *(_QWORD *)(a1 + 40);
      (*(void (**)(void))(*(_QWORD *)(v53 + 8) + 16))();
      ++**(_QWORD **)v53;
      **(_QWORD **)(a1 + 48) = v46;
      if (*(_DWORD *)(a1 + 56) != -1)
        goto LABEL_74;
    }
    if (v44 > v46)
    {
      v54 = *(_QWORD *)(a1 + 40);
      (*(void (**)(void))(*(_QWORD *)(v54 + 8) + 16))();
      ++**(_QWORD **)v54;
      **(_QWORD **)(a1 + 48) = v44;
    }
    goto LABEL_74;
  }
  v47 = *(unsigned int **)(v6 + 88);
  v48 = v47[5];
  v46 = v44;
  if (v45 >= v48
    || (v49 = (unint64_t)&v47[9 * v45 + 24 + 8 * v47[2] + 6 * v47[3] + 6 * v47[4]],
        v46 = v44,
        (unint64_t)v47 > v49)
    || (v46 = v44, v49 >= (unint64_t)v47 + v47[1]))
  {
LABEL_70:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Out of bounds children index iterating inline ranges", buf, 2u);
    }
    fwrite("Out of bounds children index iterating inline ranges", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    goto LABEL_73;
  }
  v50 = v48 - v45;
  while (1)
  {
    std::function<void ()(UUID const*,unsigned long long)>::operator()(*(_QWORD *)(a1 + 8), v49, v49);
    *(_QWORD *)buf = 0;
    v51 = *(_QWORD *)v49;
    if ((TThreadsafeAddressRelocator<Pointer64>::relocate((_QWORD *)(v6 + 120), *(_QWORD *)v49, buf) & 1) == 0)
      break;
    if ((*(_BYTE *)(v49 + 11) & 0x40) != 0)
    {
      v46 = *(_QWORD *)buf + HIDWORD(v51);
      goto LABEL_73;
    }
    if (--v50)
    {
      v52 = *(_QWORD *)(v6 + 88);
      v49 += 36;
      if (v52 <= v49 && v49 < *(unsigned int *)(v52 + 4) + v52)
        continue;
    }
    v46 = *(_QWORD *)buf + HIDWORD(v51);
    goto LABEL_70;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v56 = 67109120;
    v57 = v51;
    _os_log_impl(&dword_1B40C5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Child symbol archive address 0x%x could not be relocated to real address\n", v56, 8u);
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Child symbol archive address 0x%x could not be relocated to real address\n");
}

uint64_t std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1,std::allocator<TMMapSymbolOwnerData::for_each_inline_range_for_symbol_at_depth(CSCppSymbolOwner *,_CSTypeRef,int,void({block_pointer})(_CSRange,_CSTypeRef*,_CSTypeRef*,unsigned long))::$_1>,void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(CSCppMMapSymbol *,CSCppMMapInlinedSymbol *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B41812DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t task_get_mapped_memory_cache(mach_port_name_t a1)
{
  return task_get_mapped_memory_cache_with_label(a1, (uint64_t)"");
}

uint64_t task_get_mapped_memory_cache_with_label(mach_port_name_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t mapped_memory_cache_for_task_with_label;
  mach_port_name_t v9;
  mach_port_name_t v10;

  v9 = a1;
  std::mutex::lock(&_task_to_mapped_memory_lock(void)::lock);
  v4 = task_to_mapped_memory;
  if (!task_to_mapped_memory)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = 1065353216;
    task_to_mapped_memory = v4;
  }
  v10 = a1;
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>((_QWORD *)v4, &v10);
  if (v5 && (v6 = v5[3]) != 0)
  {
    std::mutex::lock((std::mutex *)(v6 + 128));
    ++*(_DWORD *)(v6 + 104);
    std::mutex::unlock((std::mutex *)(v6 + 128));
  }
  else
  {
    mapped_memory_cache_for_task_with_label = create_mapped_memory_cache_for_task_with_label(a1, 0, a2);
    std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::__emplace_unique_key_args<unsigned int,unsigned int &,mapped_memory_t *&>(task_to_mapped_memory, &v9, &v9, &mapped_memory_cache_for_task_with_label);
    v6 = mapped_memory_cache_for_task_with_label;
  }
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  return v6;
}

void sub_1B41813E4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  _Unwind_Resume(a1);
}

uint64_t create_mapped_memory_cache_for_task_with_label(mach_port_name_t name, char a2, uint64_t a3)
{
  uint64_t v6;
  int v8;
  BOOL v9;
  uint64_t shared_cache_range;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (name - 1 > 0xFFFFFFFD || mach_port_mod_refs(*MEMORY[0x1E0C83DA0], name, 0, 1))
    return 0;
  v6 = operator new();
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_QWORD *)(v6 + 40) = v6 + 48;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 128) = 850045863;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_DWORD *)(v6 + 88) = name;
  *(_DWORD *)(v6 + 96) = 0;
  v8 = CSTaskIs64Bit(name);
  *(_BYTE *)(v6 + 101) = v8;
  *(_BYTE *)(v6 + 100) = a2;
  *(_QWORD *)(v6 + 120) = a3;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  if (v8
    && (CSTaskIsTranslated(name) & 1) == 0
    && _dyld_get_shared_cache_uuid()
    && _dyld_process_info_create())
  {
    _dyld_process_info_get_cache();
    if (v11)
      v9 = 0;
    else
      v9 = v12 == 0;
    if (v9 && v13)
    {
      shared_cache_range = _dyld_get_shared_cache_range();
      *(_QWORD *)(v6 + 16) = v13;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = shared_cache_range - v13;
    }
    _dyld_process_info_release();
  }
  *(_DWORD *)(v6 + 104) = 1;
  return v6;
}

void sub_1B41815AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  a11 = 0;
  std::default_delete<mapped_memory_t>::operator()[abi:ne180100]((uint64_t)&a11, v11);
  _Unwind_Resume(a1);
}

uint64_t retain_mapped_memory_cache(uint64_t a1)
{
  if (a1)
  {
    std::mutex::lock((std::mutex *)(a1 + 128));
    ++*(_DWORD *)(a1 + 104);
    std::mutex::unlock((std::mutex *)(a1 + 128));
  }
  return a1;
}

uint64_t task_lookup_mapped_memory_cache(unsigned int a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;

  std::mutex::lock(&_task_to_mapped_memory_lock(void)::lock);
  v5 = a1;
  if (task_to_mapped_memory
    && (v2 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>((_QWORD *)task_to_mapped_memory, &v5)) != 0)
  {
    v3 = v2[3];
  }
  else
  {
    v3 = 0;
  }
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  return v3;
}

void sub_1B4181688(_Unwind_Exception *a1)
{
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  _Unwind_Resume(a1);
}

void task_release_mapped_memory_cache(unsigned int a1)
{
  uint64_t *v2;
  std::mutex *v3;
  unsigned int v4;
  unsigned int v5;

  v4 = a1;
  std::mutex::lock(&_task_to_mapped_memory_lock(void)::lock);
  v5 = a1;
  if (task_to_mapped_memory)
  {
    v2 = std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::find<unsigned int>((_QWORD *)task_to_mapped_memory, &v5);
    if (v2)
    {
      v3 = (std::mutex *)v2[3];
      if (v3)
      {
        if (!release_mapped_memory_cache(v3))
          std::__hash_table<std::__hash_value_type<unsigned int,mapped_memory_t *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mapped_memory_t *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mapped_memory_t *>>>::__erase_unique<unsigned int>((_QWORD *)task_to_mapped_memory, &v4);
      }
    }
  }
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
}

void sub_1B4181718(_Unwind_Exception *a1)
{
  std::mutex::unlock(&_task_to_mapped_memory_lock(void)::lock);
  _Unwind_Resume(a1);
}

std::mutex *release_mapped_memory_cache(std::mutex *result)
{
  uint64_t v1;
  int v2;
  std::unique_lock<std::mutex> v3;

  if (result)
  {
    v1 = (uint64_t)result;
    v3.__m_ = result + 2;
    v3.__owns_ = 1;
    std::mutex::lock(result + 2);
    v2 = *(_DWORD *)(v1 + 104) - 1;
    *(_DWORD *)(v1 + 104) = v2;
    if (v2
      || (std::unique_lock<std::mutex>::unlock(&v3), destroy_mapped_memory_cache(v1), v1 = 0, result = 0, v3.__owns_))
    {
      std::mutex::unlock(v3.__m_);
      return (std::mutex *)v1;
    }
  }
  return result;
}

void sub_1B41817AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t enumerate_mapped_memory_core_file_dumped_regions(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;

  v2 = *(_QWORD *)(result + 192);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    v4 = *(_QWORD *)(v2 + 24);
    if (v3 != v4)
    {
      v6 = v3 + 40;
      do
      {
        v12 = 0;
        v7 = *(_QWORD *)(v6 - 8);
        v8 = *(_OWORD *)(v6 - 24);
        v10[0] = *(_OWORD *)(v6 - 40);
        v10[1] = v8;
        v11 = v7;
        result = (*(uint64_t (**)(uint64_t, _OWORD *, char *))(a2 + 16))(a2, v10, &v12);
        if (v12)
          break;
        v9 = v6 == v4;
        v6 += 40;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t create_mapped_memory_cache_for_core_file_without_exclave_metadata(char *a1, const char *a2)
{
  return common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata(a1, a2, 0);
}

uint64_t common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata(char *a1, const char *a2, uint64_t a3)
{
  char *v5;
  _DWORD *v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 *v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  const note_command *v14;
  int v15;
  void **v16;
  void **v17;
  void **v18;
  BOOL v19;
  char v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  void *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  void **v41;
  void **v42;
  void **v43;
  int v44;
  uint64_t **v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  unint64_t v58;
  const note_command *v59;
  int v60;
  void **v61;
  void **v62;
  void **v63;
  char v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  char *v73;
  void *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  void **v85;
  void **v86;
  void **v87;
  int v88;
  uint64_t **v89;
  uint64_t *v90;
  char **v91;
  char ***v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  char v107;
  __n128 *v108;
  uint64_t v109;
  char SymbolOwnerWithNameAtTime;
  char v111;
  mach_port_name_t v112;
  uint64_t SymbolWithMangledNameAtTime;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  unint64_t v126;
  _QWORD *v127;
  unsigned int *v128;
  unint64_t v129;
  unsigned __int8 *v130;
  unint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  char v137;
  void **v138;
  void **v139;
  void **v140;
  unint64_t Range;
  _QWORD *v142;
  _QWORD *v143;
  unint64_t v144;
  unsigned __int8 *v145;
  unint64_t v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int v151;
  char v152;
  void **v153;
  void **v154;
  void **v155;
  unint64_t v156;
  unsigned int *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void **v162;
  void **v163;
  void **v164;
  unint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void **v172;
  void **v173;
  void **v174;
  void **v175;
  void **v176;
  void **v177;
  void **v178;
  void **v179;
  void **v180;
  void **v181;
  void **v182;
  void **v183;
  void **v184;
  void **v185;
  void **v186;
  uint64_t v187;
  int v188;
  __int16 v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unsigned __int8 v194;
  int v195;
  __n128 *v196;
  __n128 *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  __n128 *v204;
  __n128 *v205;
  __n128 *v206;
  __n128 v207;
  __n128 *v208;
  __n128 *v209;
  uint64_t v210;
  int v211;
  __int16 v212;
  unsigned int v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  int v218;
  __int128 *v219;
  __int128 *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  __int128 *v226;
  __int128 *v227;
  __int128 *v228;
  __int128 *v229;
  __int128 v230;
  __n128 *v231;
  __n128 *v232;
  unint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  _QWORD *v240;
  char *v241;
  int64_t v242;
  _QWORD *v243;
  _BYTE *v244;
  unsigned __int8 *v245;
  unint64_t v246;
  uint64_t v247;
  unsigned int v248;
  int v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t *v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t *v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  __int128 *v272;
  __int128 *v273;
  _BOOL4 v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  unint64_t *v280;
  char *v281;
  int64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  unint64_t *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char *v297;
  unint64_t *v298;
  unint64_t *v299;
  unint64_t *v300;
  int v301;
  int v302;
  __int128 v303;
  int v304;
  unint64_t v305;
  uint64_t v306;
  BOOL v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  void *v311;
  unint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  __int128 *v318;
  _QWORD *v319;
  char *v320;
  int64_t v321;
  _QWORD *v322;
  _BYTE *v323;
  unsigned __int8 *v324;
  unint64_t v325;
  uint64_t v326;
  unsigned int v327;
  int v328;
  uint64_t v329;
  unint64_t *v330;
  unint64_t *v331;
  unsigned int v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  _BYTE *v339;
  uint64_t *v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  char *v351;
  char *v352;
  _BOOL4 v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  unint64_t *v359;
  char *v360;
  int64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  char *v365;
  unint64_t *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t *v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  char *v376;
  unint64_t *v377;
  unint64_t *v378;
  unint64_t *v379;
  int v380;
  int v381;
  __int128 v382;
  int v383;
  unint64_t v384;
  uint64_t v385;
  BOOL v386;
  uint64_t v387;
  void *v388;
  uint64_t v389;
  void *v390;
  __n128 *v391;
  __int128 *v392;
  int v393;
  int v394;
  int v395;
  int v396;
  const char *v397;
  const char *v398;
  unsigned __int8 *v399;
  unsigned __int8 *v400;
  char *v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char v407;
  _QWORD v408[15];
  void *v409[2];
  char *v410;
  char *v411;
  void *v412;
  char *v413;
  unint64_t v414;
  uint64_t v415;
  void *v416;
  __n128 *v417;
  unint64_t v418;
  unsigned __int32 *v419;
  void **v420;
  uint64_t v421;
  uint64_t v422;
  void *v423[2];
  char *v424;
  void *v425[2];
  char *v426;
  __int16 v427;
  mach_port_name_t v428;
  mach_port_name_t name[2];
  void *v430[2];
  __int128 v431;
  void *v432;
  _BYTE v433[32];
  uint64_t v434;
  __int16 v435;
  int v436;
  uint64_t v437;
  void *v438;
  void *v439;
  char v440;
  char v441;
  char v442;
  char v443;
  __int128 v444;
  char *v445;
  char v446;
  __int128 v447;
  char *v448;
  char v449;
  uint64_t v450;
  void *v451;
  void *v452;
  char v453;
  void *__p;
  void *v455;
  char v456;
  char v457;
  _BYTE v458[72];
  uint64_t v459;
  __int16 v460;
  _BYTE v461[20];
  void *v462;
  char v463;
  char v464;
  char v465;
  char v466;
  __int128 v467;
  char *v468;
  char v469;
  __int128 v470;
  char *v471;
  char v472;
  unint64_t *v473;
  void *v474;
  void *v475;
  char v476;
  void *v477;
  void *v478;
  char v479;
  char v480;
  _BYTE v481[9];
  int v482;
  __int16 v483;
  char v484;
  char v485;
  uint64_t v486;
  int v487;
  __int16 v488;
  char v489;
  char v490;
  uint64_t v491;

  v5 = a1;
  v491 = *MEMORY[0x1E0C80C00];
  CSCppFileMemory::CSCppFileMemory(v408, a1, 0);
  v6 = (_DWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v408[0] + 32))(v408, 0, 28);
  if (!v6 || *v6 != -17958194)
  {
    CSCppFileMemory::CSCppFileMemory(&v405, v5, 0);
    v51 = (_DWORD *)(*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v405 + 32))(&v405, 0, 32);
    if (!v51 || *v51 != -17958193)
    {
LABEL_267:
      v95 = 0;
      goto LABEL_268;
    }
    v425[0] = 0;
    v425[1] = 0;
    v426 = 0;
    CSCppFileMemory::CSCppFileMemory(v481, v5, 0);
    v398 = a2;
    v52 = 32;
    do
    {
      v53 = (*(uint64_t (**)(_BYTE *, _QWORD, unint64_t))(*(_QWORD *)v481 + 32))(v481, 0, v52);
      v55 = v53;
      if (!v53 || *(_DWORD *)v53 != -17958193)
        goto LABEL_183;
      v52 = *(unsigned int *)(v53 + 20) + 32;
    }
    while (v52 > v54);
    if (*(_DWORD *)(v53 + 12) != 4)
    {
LABEL_183:
      v95 = 0;
      goto LABEL_184;
    }
    v394 = 0;
    v423[1] = 0;
    v424 = 0;
    v56 = &v423[1];
    v423[0] = &v423[1];
    LOBYTE(v416) = 0;
    LOBYTE(v419) = 0;
    v458[0] = 0;
    v480 = 0;
    LOBYTE(v420) = 0;
    LOBYTE(v421) = 0;
    v57 = *(unsigned int *)(v53 + 20);
    LODWORD(v412) = *(_DWORD *)(v53 + 16);
    v413 = (char *)v53;
    v414 = v53 + 32 + v57;
    v415 = v53 + 32;
    v402 = v5;
    while (1)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            v58 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v412);
            v59 = (const note_command *)v58;
            if (!v58)
            {
              v121 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v425[1] - (char *)v425[0]) >> 3));
              if (v425[1] == v425[0])
                v122 = 0;
              else
                v122 = v121;
              std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>((uint64_t)v425[0], (unint64_t)v425[1], v122, 1);
              v428 = 0;
              v428 = open(v5, 0x1000000);
              if ((v428 & 0x80000000) != 0)
              {
                v153 = (void **)v423[0];
                if (v423[0] != v56)
                {
                  do
                  {
                    mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v153 + 8));
                    v154 = (void **)v153[1];
                    if (v154)
                    {
                      do
                      {
                        v155 = v154;
                        v154 = (void **)*v154;
                      }
                      while (v154);
                    }
                    else
                    {
                      do
                      {
                        v155 = (void **)v153[2];
                        v19 = *v155 == v153;
                        v153 = v155;
                      }
                      while (!v19);
                    }
                    v153 = v155;
                  }
                  while (v155 != v56);
                }
LABEL_330:
                v95 = 0;
              }
              else
              {
                v95 = operator new();
                *(_OWORD *)(v95 + 16) = 0u;
                *(_OWORD *)(v95 + 32) = 0u;
                *(_OWORD *)(v95 + 64) = 0u;
                *(_OWORD *)(v95 + 80) = 0u;
                *(_OWORD *)(v95 + 96) = 0u;
                *(_OWORD *)(v95 + 112) = 0u;
                *(_OWORD *)v95 = 0u;
                *(_OWORD *)(v95 + 48) = 0u;
                *(_QWORD *)(v95 + 40) = v95 + 48;
                *(_QWORD *)(v95 + 64) = 0;
                *(_QWORD *)(v95 + 72) = 0;
                *(_QWORD *)(v95 + 80) = 0;
                *(_QWORD *)(v95 + 128) = 850045863;
                *(_OWORD *)(v95 + 136) = 0u;
                *(_OWORD *)(v95 + 152) = 0u;
                *(_OWORD *)(v95 + 168) = 0u;
                *(_OWORD *)(v95 + 184) = 0u;
                *(_BYTE *)(v95 + 101) = CSArchitectureIs64Bit(*(unsigned int *)(v55 + 4) | ((unint64_t)(*(_DWORD *)(v55 + 8) & 0xFFFFFF) << 32));
                *(_BYTE *)(v95 + 100) = 0;
                *(_QWORD *)(v95 + 120) = v398;
                *(_QWORD *)(v95 + 16) = 0;
                *(_QWORD *)(v95 + 24) = 0;
                *(_QWORD *)name = *(unsigned int *)(v55 + 4) | ((unint64_t)(*(_DWORD *)(v55 + 8) & 0xFFFFFF) << 32);
                std::make_unique[abi:ne180100]<CSCppCoreFileDarwinMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> &,CSCppArchitecture const,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> &,std::optional<CSCppCoreFileRegionsTree> &,std::optional<unsigned long long> &,std::optional<CSCppCoreFileTaskCrashinfo> &>(&v428, (uint64_t)v425, (uint64_t *)name, (uint64_t)v423, (uint64_t)&v416, (uint64_t *)&v420, (const CSCppCoreFileTaskCrashinfo *)v458, v409);
                v123 = v409[0];
                v409[0] = 0;
                v124 = *(_QWORD *)(v95 + 192);
                *(_QWORD *)(v95 + 192) = v123;
                if (v124)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
                  v125 = v409[0];
                  v409[0] = 0;
                  if (v125)
                    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
                }
                *(_DWORD *)(v95 + 104) = 1;
              }
              goto LABEL_331;
            }
            v60 = *(_DWORD *)v58;
            if (*(_DWORD *)v58 != 25)
              break;
            v65 = v56;
            v66 = a3;
            v68 = *(_QWORD *)(v58 + 24);
            v67 = *(_QWORD *)(v58 + 32);
            v70 = *(_QWORD *)(v58 + 40);
            v69 = *(_QWORD *)(v58 + 48);
            v71 = *(_DWORD *)(v58 + 56);
            v72 = *(_DWORD *)(v58 + 60);
            v73 = (char *)v425[1];
            if (v425[1] >= v426)
            {
              v75 = (char *)v425[0];
              v76 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v425[1] - (char *)v425[0]) >> 3);
              v77 = v76 + 1;
              if (v76 + 1 > 0x666666666666666)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((v426 - (char *)v425[0]) >> 3) > v77)
                v77 = 0x999999999999999ALL * ((v426 - (char *)v425[0]) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * ((v426 - (char *)v425[0]) >> 3) >= 0x333333333333333)
                v78 = 0x666666666666666;
              else
                v78 = v77;
              if (v78)
              {
                v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)&v426, v78);
                v75 = (char *)v425[0];
                v73 = (char *)v425[1];
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[40 * v76];
              *(_QWORD *)v80 = v68;
              *((_QWORD *)v80 + 1) = v67;
              *((_QWORD *)v80 + 2) = v70;
              *((_QWORD *)v80 + 3) = v69;
              *((_DWORD *)v80 + 8) = v72;
              *((_DWORD *)v80 + 9) = v71;
              if (v73 == v75)
              {
                v84 = &v79[40 * v76];
                a3 = v66;
                v56 = v65;
              }
              else
              {
                v81 = &v79[40 * v76];
                a3 = v66;
                v56 = v65;
                do
                {
                  v82 = *(_OWORD *)(v73 - 40);
                  v83 = *(_OWORD *)(v73 - 24);
                  v84 = v81 - 40;
                  *((_QWORD *)v81 - 1) = *((_QWORD *)v73 - 1);
                  *(_OWORD *)(v81 - 24) = v83;
                  *(_OWORD *)(v81 - 40) = v82;
                  v73 -= 40;
                  v81 -= 40;
                }
                while (v73 != v75);
              }
              v74 = v80 + 40;
              v425[0] = v84;
              v425[1] = v80 + 40;
              v426 = &v79[40 * v78];
              v5 = v402;
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v425[1] = v68;
              *((_QWORD *)v73 + 1) = v67;
              *((_QWORD *)v73 + 2) = v70;
              *((_QWORD *)v73 + 3) = v69;
              v74 = v73 + 40;
              *((_DWORD *)v73 + 8) = v72;
              *((_DWORD *)v73 + 9) = v71;
              a3 = v66;
              v56 = v65;
              v5 = v402;
            }
            v425[1] = v74;
          }
          if (v60 != 49)
            break;
          if (!strncmp((const char *)(v58 + 8), "vm info", 0x10uLL))
          {
            parse_vm_info_note(v5, v59, v430);
            std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileRegionsTree,false>>((uint64_t)&v416, (__n128 *)v430);
            if (BYTE8(v431))
            {
              v409[0] = v430;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v409);
            }
            if (!(_BYTE)v419)
            {
              v172 = (void **)v423[0];
              if (v423[0] != v56)
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v172 + 8));
                  v173 = (void **)v172[1];
                  if (v173)
                  {
                    do
                    {
                      v174 = v173;
                      v173 = (void **)*v173;
                    }
                    while (v173);
                  }
                  else
                  {
                    do
                    {
                      v174 = (void **)v172[2];
                      v19 = *v174 == v172;
                      v172 = v174;
                    }
                    while (!v19);
                  }
                  v172 = v174;
                }
                while (v174 != v56);
              }
              goto LABEL_330;
            }
          }
          else if (!strncmp(v59->data_owner, "task crashinfo", 0x10uLL))
          {
            parse_task_crashinfo_note(v5, v59, v430);
            std::__optional_storage_base<CSCppCoreFileTaskCrashinfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileTaskCrashinfo,false>>((CSCppCoreFileTaskCrashinfo *)v458, (uint64_t)v430);
            if (v457)
            {
              if (v456 && __p)
              {
                v455 = __p;
                operator delete(__p);
              }
              if (v453 && v451)
              {
                v452 = v451;
                operator delete(v451);
              }
              if (v441 && v440 < 0)
                operator delete(v438);
              if ((_BYTE)v437 && SHIBYTE(v436) < 0)
                operator delete(*(void **)&v433[24]);
              if (v433[16] && (v433[15] & 0x80000000) != 0)
                operator delete(v432);
              if (BYTE8(v431) && SBYTE7(v431) < 0)
                operator delete(v430[0]);
            }
            if (!v480)
            {
              v178 = (void **)v423[0];
              if (v423[0] != v56)
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v178 + 8));
                  v179 = (void **)v178[1];
                  if (v179)
                  {
                    do
                    {
                      v180 = v179;
                      v179 = (void **)*v179;
                    }
                    while (v179);
                  }
                  else
                  {
                    do
                    {
                      v180 = (void **)v178[2];
                      v19 = *v180 == v178;
                      v178 = v180;
                    }
                    while (!v19);
                  }
                  v178 = v180;
                }
                while (v180 != v56);
                goto LABEL_330;
              }
              v95 = 0;
LABEL_355:
              if ((_BYTE)v419)
              {
                *(_QWORD *)v458 = &v416;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
              }
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v423, (_QWORD *)v423[1]);
LABEL_184:
              CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v481);
              if (v425[0])
              {
                v425[1] = v425[0];
                operator delete(v425[0]);
              }
              if ((_DWORD)a3)
              {
                if (CSArchitectureIsArm64(*(_QWORD *)(*(_QWORD *)(v95 + 192) + 40)))
                {
                  v106 = (void *)CSSymbolicatorCreateWithCoreFilePathAndFlags(v5, 0, 0, 0);
                  v107 = (char)v106;
                  v109 = (uint64_t)v108;
                  v416 = v106;
                  v417 = v108;
                  if (!CSIsNull((char)v106, (char)v108))
                  {
                    v430[0] = &off_1E677A5D0;
                    v430[1] = &v416;
                    *((_QWORD *)&v431 + 1) = v430;
                    *(_QWORD *)&v458[24] = v458;
                    *(_QWORD *)v458 = &off_1E677A5D0;
                    *(_QWORD *)&v458[8] = &v416;
                    SymbolOwnerWithNameAtTime = CSSymbolicatorGetSymbolOwnerWithNameAtTime(v107, v109, (uint64_t)"dyld", 0x8000000000000000);
                    v112 = CSIsNull(SymbolOwnerWithNameAtTime, v111);
                    SymbolWithMangledNameAtTime = CSSymbolicatorGetSymbolWithMangledNameAtTime((char)v416, (uint64_t)v417, (uint64_t)"_vas__segmentinfo_table", 0x8000000000000000);
                    v115 = v114;
                    if (CSIsNull(SymbolWithMangledNameAtTime, v114))
                    {
                      DeferredLambda::~DeferredLambda((DeferredLambda *)v458);
                      goto LABEL_254;
                    }
                    Range = CSSymbolGetRange(SymbolWithMangledNameAtTime, v115);
                    v142 = CSCppCoreFileMemory::CSCppCoreFileMemory(v481, v95);
                    v143 = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*(_QWORD *)v481 + 32))(v142, Range, 8);
                    if (v144 >= 8
                      && (v145 = (unsigned __int8 *)(*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)v481 + 32))(v481, *v143, 24), v146 >= 0x18))
                    {
                      v152 = 0;
                      v151 = *v145;
                      v150 = ((unint64_t)*(unsigned int *)(v145 + 1) << 8) | ((unint64_t)(*(unsigned __int16 *)(v145 + 5) | (v145[7] << 16)) << 40);
                      v147 = v145[16];
                      v148 = v145[17];
                      LODWORD(v149) = v145[18];
                    }
                    else
                    {
                      v147 = 0;
                      v148 = 0;
                      LODWORD(v149) = 0;
                      v150 = 0;
                      v151 = 0;
                      v152 = 1;
                    }
                    CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v481);
                    DeferredLambda::~DeferredLambda((DeferredLambda *)v458);
                    if ((v152 & 1) == 0)
                    {
                      v428 = v112;
                      CSCppCoreFileMemory::CSCppCoreFileMemory(&v416, v95);
                      if (v147 == 1 && v149 <= v148 && (_DWORD)v149)
                      {
                        v149 = v149;
                        v165 = v150 + v151;
                        do
                        {
                          v166 = (uint64_t *)(*((uint64_t (**)(void **, unint64_t, uint64_t))v416 + 4))(&v416, v165, 8);
                          if (v167 < 8)
                            break;
                          v168 = *v166;
                          if (!*v166)
                            break;
                          v169 = (*((uint64_t (**)(void **, uint64_t, uint64_t))v416 + 4))(&v416, v168, 32);
                          if (v170 < 0x20 || *(_BYTE *)v169 != 1)
                            break;
                          if (!*(_BYTE *)(v169 + 16))
                          {
                            v481[0] = 1;
                            v210 = *(_QWORD *)(v169 + 1);
                            v211 = *(_DWORD *)(v169 + 9);
                            v212 = *(_WORD *)(v169 + 13);
                            v484 = *(_BYTE *)(v169 + 15);
                            v483 = v212;
                            v482 = v211;
                            *(_QWORD *)&v481[1] = v210;
                            v485 = 0;
                            LODWORD(v210) = *(_DWORD *)(v169 + 25);
                            LOWORD(v211) = *(_WORD *)(v169 + 29);
                            LOBYTE(v212) = *(_BYTE *)(v169 + 31);
                            v486 = *(_QWORD *)(v169 + 17);
                            v489 = v212;
                            v488 = v211;
                            v487 = v210;
                            v490 = 1;
                            v412 = 0;
                            v413 = 0;
                            v414 = 0;
                            v213 = *(unsigned __int16 *)&v481[6];
                            if (*(_WORD *)&v481[6])
                            {
                              v214 = 0;
                              do
                              {
                                v215 = (*((uint64_t (**)(void **, unint64_t, uint64_t))v416 + 4))(&v416, v168 + v481[1] + v214 * v481[2], 32);
                                if (v216 < 0x20)
                                {
LABEL_709:
                                  v386 = 0;
                                  goto LABEL_710;
                                }
                                v217 = *(_BYTE *)v215;
                                *(_OWORD *)v458 = *(_OWORD *)(v215 + 1);
                                *(_QWORD *)&v458[15] = *(_QWORD *)(v215 + 16);
                                v218 = *(unsigned __int8 *)(v215 + 24);
                                LODWORD(v430[0]) = *(_DWORD *)(v215 + 25);
                                *(_DWORD *)((char *)v430 + 3) = *(_DWORD *)(v215 + 28);
                                if (v218)
                                {
                                  v219 = (__int128 *)v413;
                                  if ((unint64_t)v413 >= v414)
                                  {
                                    v221 = (v413 - (_BYTE *)v412) >> 5;
                                    v222 = v221 + 1;
                                    if ((unint64_t)(v221 + 1) >> 59)
                                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                                    v223 = v414 - (_QWORD)v412;
                                    if ((uint64_t)(v414 - (_QWORD)v412) >> 4 > v222)
                                      v222 = v223 >> 4;
                                    if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFE0)
                                      v224 = 0x7FFFFFFFFFFFFFFLL;
                                    else
                                      v224 = v222;
                                    if (v224)
                                      v225 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)&v414, v224);
                                    else
                                      v225 = 0;
                                    v226 = (__int128 *)&v225[32 * v221];
                                    *(_BYTE *)v226 = v217;
                                    *(__int128 *)((char *)v226 + 1) = *(_OWORD *)v458;
                                    *((_QWORD *)v226 + 2) = *(_QWORD *)&v458[15];
                                    *((_BYTE *)v226 + 24) = v218;
                                    *(_DWORD *)((char *)v226 + 25) = v430[0];
                                    *((_DWORD *)v226 + 7) = *(_DWORD *)((char *)v430 + 3);
                                    v228 = (__int128 *)v412;
                                    v227 = (__int128 *)v413;
                                    v229 = v226;
                                    if (v413 != v412)
                                    {
                                      do
                                      {
                                        v230 = *(v227 - 1);
                                        *(v229 - 2) = *(v227 - 2);
                                        *(v229 - 1) = v230;
                                        v229 -= 2;
                                        v227 -= 2;
                                      }
                                      while (v227 != v228);
                                      v227 = v228;
                                    }
                                    v220 = v226 + 2;
                                    v412 = v229;
                                    v413 = (char *)(v226 + 2);
                                    v414 = (unint64_t)&v225[32 * v224];
                                    if (v227)
                                      operator delete(v227);
                                  }
                                  else
                                  {
                                    *v413 = v217;
                                    *(__int128 *)((char *)v219 + 1) = *(_OWORD *)v458;
                                    *((_QWORD *)v219 + 2) = *(_QWORD *)&v458[15];
                                    *((_BYTE *)v219 + 24) = v218;
                                    *(_DWORD *)((char *)v219 + 25) = v430[0];
                                    *((_DWORD *)v219 + 7) = *(_DWORD *)((char *)v430 + 3);
                                    v220 = v219 + 2;
                                  }
                                  v413 = (char *)v220;
                                  v213 = *(unsigned __int16 *)&v481[6];
                                }
                                ++v214;
                              }
                              while (v214 < v213);
                              v231 = (__n128 *)v412;
                              v232 = (__n128 *)v413;
                            }
                            else
                            {
                              v232 = 0;
                              v231 = 0;
                            }
                            v312 = 126 - 2 * __clz(((char *)v232 - (char *)v231) >> 5);
                            if (v232 == v231)
                              v313 = 0;
                            else
                              v313 = v312;
                            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((uint64_t)v231, v232, v313, 1);
                            *(_QWORD *)&v458[16] = 0;
                            *(_QWORD *)&v458[8] = 0;
                            *(_QWORD *)v458 = &v458[8];
                            v430[0] = (void *)1;
                            v314 = v412;
                            if ((unint64_t)(v413 - (_BYTE *)v412) < 0x21)
                              goto LABEL_576;
                            v315 = 1;
                            while (1)
                            {
                              if (CSRangeIntersectsRange(v314[4 * v315 - 4], v314[4 * v315 - 3], v314[4 * v315], v314[4 * v315 + 1]))
                              {
                                v316 = v314[4 * v315 - 2];
                                v317 = v314[4 * v315 + 2];
                                if (v316 >= v317)
                                {
                                  if (v316 <= v317)
                                  {
                                    std::__tree<TRange<Pointer64>>::destroy((uint64_t)v458, *(_QWORD **)&v458[8]);
                                    goto LABEL_709;
                                  }
                                  std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)v458, (unint64_t *)v430, (uint64_t *)v430);
                                }
                                else
                                {
                                  v409[0] = (char *)v430[0] - 1;
                                  std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)v458, (unint64_t *)v409, (uint64_t *)v409);
                                }
                              }
                              v315 = (unint64_t)v430[0] + 1;
                              v430[0] = (void *)v315;
                              v314 = v412;
                              v318 = (__int128 *)v413;
                              if (v315 >= (v413 - (_BYTE *)v412) >> 5)
                              {
                                v319 = *(_QWORD **)v458;
                                if (*(_BYTE **)v458 != &v458[8])
                                {
                                  do
                                  {
                                    v320 = (char *)v412 + 32 * v319[4];
                                    v321 = (char *)v318 - (v320 + 32);
                                    if (v318 != (__int128 *)(v320 + 32))
                                      memmove((char *)v412 + 32 * v319[4], v320 + 32, (char *)v318 - (v320 + 32));
                                    v318 = (__int128 *)&v320[v321];
                                    v413 = &v320[v321];
                                    v322 = (_QWORD *)v319[1];
                                    if (v322)
                                    {
                                      do
                                      {
                                        v323 = v322;
                                        v322 = (_QWORD *)*v322;
                                      }
                                      while (v322);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v323 = (_BYTE *)v319[2];
                                        v19 = *(_QWORD *)v323 == (_QWORD)v319;
                                        v319 = v323;
                                      }
                                      while (!v19);
                                    }
                                    v319 = v323;
                                  }
                                  while (v323 != &v458[8]);
                                }
LABEL_576:
                                std::__tree<TRange<Pointer64>>::destroy((uint64_t)v458, *(_QWORD **)&v458[8]);
                                v409[0] = 0;
                                v409[1] = 0;
                                v410 = 0;
                                v324 = (unsigned __int8 *)v412;
                                v392 = (__int128 *)v413;
                                if (v412 != v413)
                                {
                                  do
                                  {
                                    v325 = *(_QWORD *)v324;
                                    v326 = *((_QWORD *)v324 + 1);
                                    *(_QWORD *)v458 = *(_QWORD *)v324;
                                    *(_QWORD *)&v458[8] = v326;
                                    memset(&v458[16], 0, 52);
                                    v458[68] = 1;
                                    v459 = 0;
                                    v460 = 0;
                                    *(_QWORD *)v461 = 0;
                                    *(_QWORD *)&v461[8] = 0;
                                    *(_DWORD *)&v461[16] = *((_DWORD *)v324 + 7);
                                    LOBYTE(v462) = 0;
                                    v466 = 0;
                                    LOBYTE(v467) = 0;
                                    v469 = 0;
                                    LOBYTE(v470) = 0;
                                    v472 = 0;
                                    v474 = 0;
                                    v475 = 0;
                                    v473 = 0;
                                    v400 = v324;
                                    v327 = *((_DWORD *)v324 + 7);
                                    if ((v327 & 1) != 0)
                                      v328 = 3;
                                    else
                                      v328 = 1;
                                    v427 = 9;
                                    v329 = *(_QWORD *)(v95 + 192);
                                    v331 = *(unint64_t **)(v329 + 16);
                                    v330 = *(unint64_t **)(v329 + 24);
                                    if (v331 == v330)
                                    {
                                      v338 = v326;
                                      v337 = v325;
                                    }
                                    else
                                    {
                                      v332 = v328 & 0xFFFFFFFB | (4 * ((v327 >> 1) & 1));
                                      v396 = (v327 >> 2) & 1;
                                      do
                                      {
                                        v333 = *v331;
                                        v334 = v331[1];
                                        if (CSRangeIntersectsRange(*v331, v334, v325, v326))
                                        {
                                          v430[0] = (void *)CSRangeIntersectionRange(v333, v334, v325, v326);
                                          v430[1] = (void *)v335;
                                          LODWORD(v431) = 1;
                                          DWORD1(v431) = v332;
                                          *((_QWORD *)&v431 + 1) = v332;
                                          v432 = 0;
                                          *(_DWORD *)v433 = v324[25];
                                          *(_QWORD *)&v433[4] = 0;
                                          *(_QWORD *)&v433[12] = 0;
                                          *(_QWORD *)&v433[19] = 0;
                                          *(_WORD *)&v433[27] = v396;
                                          v434 = 0;
                                          v435 = 0;
                                          v436 = 0;
                                          v437 = 0;
                                          LODWORD(v438) = 3;
                                          HIDWORD(v438) = *((_DWORD *)v324 + 7);
                                          LOBYTE(v439) = 0;
                                          v336 = v335 >> 14;
                                          v443 = 0;
                                          std::vector<unsigned short>::vector(v425, v335 >> 14, &v427);
                                          v444 = *(_OWORD *)v425;
                                          v445 = v426;
                                          v425[1] = 0;
                                          v426 = 0;
                                          v425[0] = 0;
                                          v446 = 1;
                                          std::vector<unsigned short>::vector(v423, v336, &v427);
                                          v447 = *(_OWORD *)v423;
                                          v448 = v424;
                                          v423[1] = 0;
                                          v424 = 0;
                                          v423[0] = 0;
                                          v449 = 1;
                                          v451 = 0;
                                          v452 = 0;
                                          v450 = 0;
                                          std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v473, (__int128 *)v430);
                                          *(_QWORD *)name = &v450;
                                          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)name);
                                          if (v449 && (_QWORD)v447)
                                          {
                                            *((_QWORD *)&v447 + 1) = v447;
                                            operator delete((void *)v447);
                                          }
                                          if (v446 && (_QWORD)v444)
                                          {
                                            *((_QWORD *)&v444 + 1) = v444;
                                            operator delete((void *)v444);
                                          }
                                          if (v443 && v442 < 0)
                                            operator delete(v439);
                                          if (v423[0])
                                          {
                                            v423[1] = v423[0];
                                            operator delete(v423[0]);
                                          }
                                          if (v425[0])
                                          {
                                            v425[1] = v425[0];
                                            operator delete(v425[0]);
                                          }
                                        }
                                        v331 += 5;
                                      }
                                      while (v331 != v330);
                                      v337 = *(_QWORD *)v458;
                                      v338 = *(_QWORD *)&v458[8];
                                    }
                                    v339 = 0;
                                    v340 = 0;
                                    v425[0] = 0;
                                    v425[1] = 0;
                                    v426 = 0;
                                    if (v337 < v337 + v338)
                                    {
                                      v341 = v473;
                                      v342 = v326 + v325;
                                      do
                                      {
                                        *(_OWORD *)v430 = *(_OWORD *)v324;
                                        v431 = *((_OWORD *)v324 + 1);
                                        v432 = (void *)0x4000;
                                        *(_QWORD *)v433 = v337;
                                        *(_QWORD *)&v433[8] = v425;
                                        if (v341 == v474)
                                        {
                                          set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()((uint64_t)v430, v342);
                                          v337 = v342;
                                        }
                                        else
                                        {
                                          v343 = *v341;
                                          if (v337 < *v341)
                                          {
                                            if (v342 >= v343)
                                              v344 = *v341;
                                            else
                                              v344 = v342;
                                            set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer64,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()((uint64_t)v430, v344);
                                            v343 = *v341;
                                          }
                                          v337 = v341[1] + v343;
                                          v341 += 28;
                                        }
                                      }
                                      while (v337 < *(_QWORD *)&v458[8] + *(_QWORD *)v458);
                                      v340 = (uint64_t *)v425[0];
                                      v339 = v425[1];
                                    }
                                    std::vector<CSCppCoreFileRegionInfo>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CSCppCoreFileRegionInfo*>,std::__wrap_iter<CSCppCoreFileRegionInfo*>>((uint64_t *)&v473, (__int128 *)v474, v340, (uint64_t)v339, 0x6DB6DB6DB6DB6DB7 * ((v339 - (_BYTE *)v340) >> 5));
                                    v345 = 126
                                         - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v474 - (_BYTE *)v473) >> 5));
                                    if (v474 == v473)
                                      v346 = 0;
                                    else
                                      v346 = v345;
                                    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v473, (__int128 *)v474, v346, 1);
                                    std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)v409, (__int128 *)v458);
                                    v430[0] = v425;
                                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v430);
                                    v430[0] = &v473;
                                    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v430);
                                    if (v472 && (_QWORD)v470)
                                    {
                                      *((_QWORD *)&v470 + 1) = v470;
                                      operator delete((void *)v470);
                                    }
                                    if (v469 && (_QWORD)v467)
                                    {
                                      *((_QWORD *)&v467 + 1) = v467;
                                      operator delete((void *)v467);
                                    }
                                    if (v466 && v465 < 0)
                                      operator delete(v462);
                                    v324 += 32;
                                  }
                                  while (v400 + 32 != (unsigned __int8 *)v392);
                                }
                                v347 = *(_QWORD *)(v95 + 192);
                                v348 = *(_QWORD *)(v347 + 16);
                                v404 = *(_QWORD *)(v347 + 24);
                                if (v348 != v404)
                                {
                                  do
                                  {
                                    v350 = *(_QWORD *)v348;
                                    v349 = *(_QWORD *)(v348 + 8);
                                    v430[1] = 0;
                                    v430[0] = 0;
                                    *(_QWORD *)&v431 = 0;
                                    v352 = (char *)v409[0];
                                    v351 = (char *)v409[1];
                                    if (v409[0] == v409[1])
                                    {
                                      v359 = 0;
                                      goto LABEL_653;
                                    }
                                    do
                                    {
                                      if (CSRangeContainsRange(*(_QWORD *)v352, *((_QWORD *)v352 + 1), v350, v349))
                                      {
                                        v359 = (unint64_t *)v430[1];
                                        goto LABEL_672;
                                      }
                                      v353 = CSRangeIntersectsRange(v350, v349, *(_QWORD *)v352, *((_QWORD *)v352 + 1));
                                      v354 = *(_QWORD *)v352;
                                      if (v353)
                                      {
                                        v355 = *((_QWORD *)v352 + 1);
                                        if (v350 - v354 >= v355)
                                        {
                                          v357 = v354 - v350;
                                          v358 = (char *)v430[1];
                                          if (v430[1] >= (void *)v431)
                                          {
                                            v360 = (char *)v430[0];
                                            v361 = ((char *)v430[1] - (char *)v430[0]) >> 4;
                                            v362 = v361 + 1;
                                            if ((unint64_t)(v361 + 1) >> 60)
                                              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                                            v363 = v431 - (unint64_t)v430[0];
                                            if ((uint64_t)(v431 - (unint64_t)v430[0]) >> 3 > v362)
                                              v362 = v363 >> 3;
                                            if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFF0)
                                              v364 = 0xFFFFFFFFFFFFFFFLL;
                                            else
                                              v364 = v362;
                                            if (v364)
                                            {
                                              v365 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v431, v364);
                                              v358 = (char *)v430[1];
                                              v360 = (char *)v430[0];
                                            }
                                            else
                                            {
                                              v365 = 0;
                                            }
                                            v366 = (unint64_t *)&v365[16 * v361];
                                            *v366 = v350;
                                            v366[1] = v357;
                                            v367 = v366;
                                            if (v358 != v360)
                                            {
                                              do
                                              {
                                                *((_OWORD *)v367 - 1) = *((_OWORD *)v358 - 1);
                                                v367 -= 2;
                                                v358 -= 16;
                                              }
                                              while (v358 != v360);
                                              v360 = (char *)v430[0];
                                            }
                                            v359 = v366 + 2;
                                            v430[0] = v367;
                                            v430[1] = v366 + 2;
                                            *(_QWORD *)&v431 = &v365[16 * v364];
                                            if (v360)
                                              operator delete(v360);
                                          }
                                          else
                                          {
                                            *(_QWORD *)v430[1] = v350;
                                            *((_QWORD *)v358 + 1) = v357;
                                            v359 = (unint64_t *)(v358 + 16);
                                          }
                                          v430[1] = v359;
                                          v368 = *(_QWORD *)v352;
                                          v369 = *((_QWORD *)v352 + 1);
                                          v370 = v350 + v349;
                                          if (v350 + v349 - *(_QWORD *)v352 < v369)
                                            goto LABEL_672;
                                          v350 = v369 + v368;
                                          v349 = v370 - (v369 + v368);
                                        }
                                        else
                                        {
                                          v356 = v350 + v349;
                                          v350 = v355 + v354;
                                          v349 = v356 - (v355 + v354);
                                        }
                                      }
                                      else if (v354 > v350 + v349)
                                      {
                                        break;
                                      }
                                      v352 += 224;
                                    }
                                    while (v352 != v351);
                                    v359 = (unint64_t *)v430[1];
LABEL_653:
                                    if (v349)
                                    {
                                      if ((unint64_t)v359 >= (unint64_t)v431)
                                      {
                                        v371 = (unint64_t *)v430[0];
                                        v372 = ((char *)v359 - (char *)v430[0]) >> 4;
                                        v373 = v372 + 1;
                                        if ((unint64_t)(v372 + 1) >> 60)
                                          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                                        v374 = v431 - (unint64_t)v430[0];
                                        if ((uint64_t)(v431 - (unint64_t)v430[0]) >> 3 > v373)
                                          v373 = v374 >> 3;
                                        if ((unint64_t)v374 >= 0x7FFFFFFFFFFFFFF0)
                                          v375 = 0xFFFFFFFFFFFFFFFLL;
                                        else
                                          v375 = v373;
                                        if (v375)
                                        {
                                          v376 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v431, v375);
                                          v359 = (unint64_t *)v430[1];
                                          v371 = (unint64_t *)v430[0];
                                        }
                                        else
                                        {
                                          v376 = 0;
                                        }
                                        v377 = (unint64_t *)&v376[16 * v372];
                                        *v377 = v350;
                                        v377[1] = v349;
                                        v378 = v377;
                                        if (v359 != v371)
                                        {
                                          do
                                          {
                                            *((_OWORD *)v378 - 1) = *((_OWORD *)v359 - 1);
                                            v378 -= 2;
                                            v359 -= 2;
                                          }
                                          while (v359 != v371);
                                          v371 = (unint64_t *)v430[0];
                                        }
                                        v359 = v377 + 2;
                                        v430[0] = v378;
                                        v430[1] = v377 + 2;
                                        *(_QWORD *)&v431 = &v376[16 * v375];
                                        if (v371)
                                          operator delete(v371);
                                      }
                                      else
                                      {
                                        *v359 = v350;
                                        v359[1] = v349;
                                        v359 += 2;
                                      }
                                      v430[1] = v359;
                                    }
LABEL_672:
                                    v379 = (unint64_t *)v430[0];
                                    if (v430[0] != v359)
                                    {
                                      do
                                      {
                                        v427 = 9;
                                        v380 = *(_DWORD *)(v348 + 32);
                                        v381 = *(_DWORD *)(v348 + 36);
                                        v382 = *(_OWORD *)v379;
                                        *(_DWORD *)&v458[16] = 0;
                                        *(_DWORD *)&v458[20] = v380 | 1;
                                        if ((v380 & 4) != 0)
                                          v383 = 3;
                                        else
                                          v383 = 1;
                                        *(_OWORD *)v458 = v382;
                                        *(_DWORD *)&v458[24] = v381 | 1;
                                        v459 = 0;
                                        v460 = 0;
                                        *(_DWORD *)v461 = 0;
                                        *(_QWORD *)&v461[4] = 0;
                                        memset(&v458[28], 0, 41);
                                        *(_DWORD *)&v461[12] = 3;
                                        *(_DWORD *)&v461[16] = v383;
                                        LOBYTE(v462) = 0;
                                        v466 = 0;
                                        std::vector<unsigned short>::vector(v425, v379[1] >> 14, &v427);
                                        v467 = *(_OWORD *)v425;
                                        v468 = v426;
                                        v425[1] = 0;
                                        v426 = 0;
                                        v425[0] = 0;
                                        v469 = 1;
                                        std::vector<unsigned short>::vector(v423, v379[1] >> 14, &v427);
                                        v470 = *(_OWORD *)v423;
                                        v471 = v424;
                                        v423[1] = 0;
                                        v424 = 0;
                                        v423[0] = 0;
                                        v472 = 1;
                                        v474 = 0;
                                        v475 = 0;
                                        v473 = 0;
                                        std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)v409, (__int128 *)v458);
                                        *(_QWORD *)name = &v473;
                                        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)name);
                                        if (v472 && (_QWORD)v470)
                                        {
                                          *((_QWORD *)&v470 + 1) = v470;
                                          operator delete((void *)v470);
                                        }
                                        if (v469 && (_QWORD)v467)
                                        {
                                          *((_QWORD *)&v467 + 1) = v467;
                                          operator delete((void *)v467);
                                        }
                                        if (v466 && v465 < 0)
                                          operator delete(v462);
                                        if (v423[0])
                                        {
                                          v423[1] = v423[0];
                                          operator delete(v423[0]);
                                        }
                                        if (v425[0])
                                        {
                                          v425[1] = v425[0];
                                          operator delete(v425[0]);
                                        }
                                        v379 += 2;
                                      }
                                      while (v379 != v359);
                                      v384 = 126
                                           - 2
                                           * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v409[1] - (char *)v409[0]) >> 5));
                                      if (v409[1] == v409[0])
                                        v385 = 0;
                                      else
                                        v385 = v384;
                                      _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer6412LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v409[0], (__int128 *)v409[1], v385, 1);
                                      v359 = (unint64_t *)v430[0];
                                    }
                                    if (v359)
                                    {
                                      v430[1] = v359;
                                      operator delete(v359);
                                    }
                                    v348 += 40;
                                  }
                                  while (v348 != v404);
                                  v347 = *(_QWORD *)(v95 + 192);
                                }
                                std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100]((uint64_t *)v458, v347 + 48);
                                *(_QWORD *)&v431 = 0;
                                v430[1] = 0;
                                v430[0] = &v430[1];
                                std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__move_assign(*(_QWORD *)(v95 + 192) + 48, v430);
                                std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v430, (_QWORD *)v430[1]);
                                name[0] = dup(*(_DWORD *)(*(_QWORD *)(v95 + 192) + 8));
                                v386 = name[0] != -1;
                                if (name[0] != -1)
                                {
                                  v387 = *(_QWORD *)(v95 + 192);
                                  v421 = 0;
                                  v422 = 0;
                                  v420 = 0;
                                  std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(&v420, (uint64_t)v409[0], (uint64_t)v409[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v409[1] - (char *)v409[0]) >> 5));
                                  v430[1] = 0;
                                  v430[0] = 0;
                                  *(_QWORD *)&v431 = 0;
                                  std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v430, (uint64_t)v420, v421, 0x6DB6DB6DB6DB6DB7 * ((v421 - (uint64_t)v420) >> 5));
                                  std::make_unique[abi:ne180100]<CSCppCoreFileExclavesMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> const&,_CSArchitecture const&,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&,std::optional<unsigned long long> const&,CSCppCoreFileRegionsTree,CSExclaveCoreFileType const&,long long &>(name, v387 + 16, (uint64_t *)(v387 + 40), (uint64_t)v458, (uint64_t *)(v387 + 72), (__int128 *)v430, (int *)&v428, (uint64_t *)&v481[8], (uint64_t *)v423);
                                  v388 = v423[0];
                                  v423[0] = 0;
                                  v389 = *(_QWORD *)(v95 + 192);
                                  *(_QWORD *)(v95 + 192) = v388;
                                  if (v389)
                                  {
                                    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
                                    v390 = v423[0];
                                    v423[0] = 0;
                                    if (v390)
                                      (*(void (**)(void *))(*(_QWORD *)v390 + 8))(v390);
                                  }
                                  v425[0] = v430;
                                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
                                  v425[0] = &v420;
                                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v425);
                                }
                                std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v458, *(_QWORD **)&v458[8]);
                                *(_QWORD *)v458 = v409;
                                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
LABEL_710:
                                if (v412)
                                {
                                  v413 = (char *)v412;
                                  operator delete(v412);
                                }
                                CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v416);
                                if (!v386)
                                {
LABEL_266:
                                  release_mapped_memory_cache((std::mutex *)v95);
                                  goto LABEL_267;
                                }
                                goto LABEL_254;
                              }
                            }
                          }
                          v165 += 8;
                          --v149;
                        }
                        while (v149);
                      }
                      CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v416);
                      goto LABEL_266;
                    }
                  }
                }
LABEL_254:
                clear_mapped_memory(v95);
              }
LABEL_268:
              CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&v405);
              goto LABEL_269;
            }
          }
          else if (!strncmp(v59->data_owner, "addrable bits", 0x10uLL))
          {
            v420 = (void **)parse_addrable_bits_note(v5, v59);
            LOBYTE(v421) = v64;
            if (!v64)
            {
              v184 = (void **)v423[0];
              if (v423[0] == v56)
                goto LABEL_330;
              do
              {
                mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v184 + 8));
                v185 = (void **)v184[1];
                if (v185)
                {
                  do
                  {
                    v186 = v185;
                    v185 = (void **)*v185;
                  }
                  while (v185);
                }
                else
                {
                  do
                  {
                    v186 = (void **)v184[2];
                    v19 = *v186 == v184;
                    v184 = v186;
                  }
                  while (!v19);
                }
                v95 = 0;
                v184 = v186;
              }
              while (v186 != v56);
LABEL_331:
              if (v480)
              {
                if (v479 && v477)
                {
                  v478 = v477;
                  operator delete(v477);
                }
                if (v476 && v474)
                {
                  v475 = v474;
                  operator delete(v474);
                }
                if (v464 && v463 < 0)
                  operator delete(*(void **)&v461[12]);
                if (v461[4] && (v461[3] & 0x80000000) != 0)
                  operator delete(*(void **)&v458[64]);
                if (v458[56] && (v458[55] & 0x80000000) != 0)
                  operator delete(*(void **)&v458[32]);
                if (v458[24] && (v458[23] & 0x80000000) != 0)
                  operator delete(*(void **)v458);
              }
              goto LABEL_355;
            }
          }
        }
      }
      while (v60 != 4);
      parse_thread_load_command((const thread_command *)v58, (uint64_t)v430);
      if (BYTE8(v431))
      {
        v428 = 0;
        if (!mach_port_allocate(*MEMORY[0x1E0C83DA0], 4u, &v428))
        {
          LODWORD(v409[0]) = v394;
          std::map<int,std::vector<unsigned char>>::map[abi:ne180100]((uint64_t *)&v409[1], (uint64_t)v430);
          *(_QWORD *)name = &v428;
          v89 = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v423, &v428, (uint64_t)&std::piecewise_construct, (_DWORD **)name);
          v91 = (char **)(v89 + 7);
          v90 = v89[7];
          *((_DWORD *)v89 + 10) = v409[0];
          v92 = (char ***)(v89 + 6);
          std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)(v89 + 6), v90);
          v93 = v410;
          *(v91 - 1) = (char *)v409[1];
          *v91 = v93;
          v94 = v411;
          v91[1] = v411;
          if (v94)
          {
            *((_QWORD *)v93 + 2) = v91;
            v409[1] = &v410;
            v410 = 0;
            v411 = 0;
            v93 = 0;
          }
          else
          {
            *v92 = v91;
          }
          ++v394;
          std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)&v409[1], v93);
          v88 = 0;
          goto LABEL_171;
        }
        v61 = (void **)v423[0];
        if (v423[0] != v56)
        {
          do
          {
            mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v61 + 8));
            v62 = (void **)v61[1];
            if (v62)
            {
              do
              {
                v63 = v62;
                v62 = (void **)*v62;
              }
              while (v62);
            }
            else
            {
              do
              {
                v63 = (void **)v61[2];
                v19 = *v63 == v61;
                v61 = v63;
              }
              while (!v19);
            }
            v61 = v63;
          }
          while (v63 != v56);
        }
      }
      else
      {
        v85 = (void **)v423[0];
        if (v423[0] == v56)
          goto LABEL_330;
        do
        {
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v85 + 8));
          v86 = (void **)v85[1];
          if (v86)
          {
            do
            {
              v87 = v86;
              v86 = (void **)*v86;
            }
            while (v86);
          }
          else
          {
            do
            {
              v87 = (void **)v85[2];
              v19 = *v87 == v85;
              v85 = v87;
            }
            while (!v19);
          }
          v85 = v87;
        }
        while (v87 != v56);
      }
      v88 = 1;
LABEL_171:
      if (BYTE8(v431))
        std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)v430, (_QWORD *)v430[1]);
      if (v88)
        goto LABEL_330;
    }
  }
  v409[0] = 0;
  v409[1] = 0;
  v410 = 0;
  CSCppFileMemory::CSCppFileMemory(v481, v5, 0);
  v397 = a2;
  v7 = 28;
  do
  {
    v8 = (__n128 *)(*(uint64_t (**)(_BYTE *, _QWORD, unint64_t))(*(_QWORD *)v481 + 32))(v481, 0, v7);
    v10 = v8;
    if (!v8 || v8->n128_u32[0] != -17958194)
      goto LABEL_175;
    v7 = v8[1].n128_u32[1] + 28;
  }
  while (v7 > v9);
  if (v8->n128_u32[3] != 4)
  {
LABEL_175:
    v95 = 0;
    goto LABEL_176;
  }
  v393 = 0;
  v425[1] = 0;
  v426 = 0;
  v11 = &v425[1];
  v425[0] = &v425[1];
  LOBYTE(v405) = 0;
  v407 = 0;
  v458[0] = 0;
  v480 = 0;
  LOBYTE(v423[0]) = 0;
  LOBYTE(v423[1]) = 0;
  v12 = v8[1].n128_u32[1];
  LODWORD(v416) = v8[1].n128_u32[0];
  v417 = v8;
  v418 = (unint64_t)&v8[1].n128_u64[1] + v12 + 4;
  v419 = &v8[1].n128_u32[3];
  v401 = v5;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v13 = TLoadCommandIterator<SizeAndEndianness<Pointer32,LittleEndian>>::command((uint64_t)&v416);
            v14 = (const note_command *)v13;
            if (!v13)
            {
              v116 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v409[1] - (char *)v409[0]) >> 3));
              if (v409[1] == v409[0])
                v117 = 0;
              else
                v117 = v116;
              std::__introsort<std::_ClassicAlgPolicy,mapped_memory_t * create_mapped_memory_cache_for_core_file_without_exclave_metadata_arch_specific<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long,char const*)::{lambda(mapped_memory_core_file_dumped_region_info_t const&,mapped_memory_core_file_dumped_region_info_t const&)#1} &,mapped_memory_core_file_dumped_region_info_t*,false>((uint64_t)v409[0], (unint64_t)v409[1], v117, 1);
              name[0] = 0;
              name[0] = open(v5, 0x1000000);
              if ((name[0] & 0x80000000) != 0)
              {
                v138 = (void **)v425[0];
                if (v425[0] != v11)
                {
                  do
                  {
                    mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v138 + 8));
                    v139 = (void **)v138[1];
                    if (v139)
                    {
                      do
                      {
                        v140 = v139;
                        v139 = (void **)*v139;
                      }
                      while (v139);
                    }
                    else
                    {
                      do
                      {
                        v140 = (void **)v138[2];
                        v19 = *v140 == v138;
                        v138 = v140;
                      }
                      while (!v19);
                    }
                    v138 = v140;
                  }
                  while (v140 != v11);
                }
                goto LABEL_302;
              }
              v95 = operator new();
              *(_OWORD *)(v95 + 16) = 0u;
              *(_OWORD *)(v95 + 32) = 0u;
              *(_OWORD *)(v95 + 64) = 0u;
              *(_OWORD *)(v95 + 80) = 0u;
              *(_OWORD *)(v95 + 96) = 0u;
              *(_OWORD *)(v95 + 112) = 0u;
              *(_OWORD *)v95 = 0u;
              *(_OWORD *)(v95 + 48) = 0u;
              *(_QWORD *)(v95 + 40) = v95 + 48;
              *(_QWORD *)(v95 + 64) = 0;
              *(_QWORD *)(v95 + 72) = 0;
              *(_QWORD *)(v95 + 80) = 0;
              *(_QWORD *)(v95 + 128) = 850045863;
              *(_OWORD *)(v95 + 136) = 0u;
              *(_OWORD *)(v95 + 152) = 0u;
              *(_OWORD *)(v95 + 168) = 0u;
              *(_OWORD *)(v95 + 184) = 0u;
              *(_BYTE *)(v95 + 101) = CSArchitectureIs64Bit(v10->n128_u32[1] | ((unint64_t)(v10->n128_u32[2] & 0xFFFFFF) << 32));
              *(_BYTE *)(v95 + 100) = 0;
              *(_QWORD *)(v95 + 120) = v397;
              *(_QWORD *)(v95 + 16) = 0;
              *(_QWORD *)(v95 + 24) = 0;
              v420 = (void **)(v10->n128_u32[1] | ((unint64_t)(v10->n128_u32[2] & 0xFFFFFF) << 32));
              std::make_unique[abi:ne180100]<CSCppCoreFileDarwinMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> &,CSCppArchitecture const,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> &,std::optional<CSCppCoreFileRegionsTree> &,std::optional<unsigned long long> &,std::optional<CSCppCoreFileTaskCrashinfo> &>(name, (uint64_t)v409, (uint64_t *)&v420, (uint64_t)v425, (uint64_t)&v405, (uint64_t *)v423, (const CSCppCoreFileTaskCrashinfo *)v458, &v412);
              v118 = v412;
              v412 = 0;
              v119 = *(_QWORD *)(v95 + 192);
              *(_QWORD *)(v95 + 192) = v118;
              if (v119)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
                v120 = v412;
                v412 = 0;
                if (v120)
                  (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
              }
              *(_DWORD *)(v95 + 104) = 1;
              goto LABEL_303;
            }
            v15 = *(_DWORD *)v13;
            if (*(_DWORD *)v13 != 1)
              break;
            v21 = v11;
            v22 = a3;
            v23 = *(unsigned int *)(v13 + 24);
            v24 = *(unsigned int *)(v13 + 28);
            v25 = *(unsigned int *)(v13 + 32);
            v26 = *(unsigned int *)(v13 + 36);
            v27 = *(_DWORD *)(v13 + 40);
            v28 = *(_DWORD *)(v13 + 44);
            v29 = (char *)v409[1];
            if (v409[1] >= v410)
            {
              v31 = (char *)v409[0];
              v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v409[1] - (char *)v409[0]) >> 3);
              v33 = v32 + 1;
              if (v32 + 1 > 0x666666666666666)
                std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((v410 - (char *)v409[0]) >> 3) > v33)
                v33 = 0x999999999999999ALL * ((v410 - (char *)v409[0]) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * ((v410 - (char *)v409[0]) >> 3) >= 0x333333333333333)
                v34 = 0x666666666666666;
              else
                v34 = v33;
              if (v34)
              {
                v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)&v410, v34);
                v31 = (char *)v409[0];
                v29 = (char *)v409[1];
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[40 * v32];
              *(_QWORD *)v36 = v23;
              *((_QWORD *)v36 + 1) = v24;
              *((_QWORD *)v36 + 2) = v25;
              *((_QWORD *)v36 + 3) = v26;
              *((_DWORD *)v36 + 8) = v28;
              *((_DWORD *)v36 + 9) = v27;
              if (v29 == v31)
              {
                v40 = &v35[40 * v32];
                a3 = v22;
                v11 = v21;
              }
              else
              {
                v37 = &v35[40 * v32];
                a3 = v22;
                v11 = v21;
                do
                {
                  v38 = *(_OWORD *)(v29 - 40);
                  v39 = *(_OWORD *)(v29 - 24);
                  v40 = v37 - 40;
                  *((_QWORD *)v37 - 1) = *((_QWORD *)v29 - 1);
                  *(_OWORD *)(v37 - 24) = v39;
                  *(_OWORD *)(v37 - 40) = v38;
                  v29 -= 40;
                  v37 -= 40;
                }
                while (v29 != v31);
              }
              v30 = v36 + 40;
              v409[0] = v40;
              v409[1] = v36 + 40;
              v410 = &v35[40 * v34];
              v5 = v401;
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v409[1] = v23;
              *((_QWORD *)v29 + 1) = v24;
              *((_QWORD *)v29 + 2) = v25;
              *((_QWORD *)v29 + 3) = v26;
              v30 = v29 + 40;
              *((_DWORD *)v29 + 8) = v28;
              *((_DWORD *)v29 + 9) = v27;
              a3 = v22;
              v11 = v21;
              v5 = v401;
            }
            v409[1] = v30;
          }
          if (v15 == 49)
            break;
          if (v15 == 4)
          {
            parse_thread_load_command((const thread_command *)v13, (uint64_t)v430);
            if (BYTE8(v431))
            {
              name[0] = 0;
              if (!mach_port_allocate(*MEMORY[0x1E0C83DA0], 4u, name))
              {
                LODWORD(v412) = v393;
                std::map<int,std::vector<unsigned char>>::map[abi:ne180100]((uint64_t *)&v413, (uint64_t)v430);
                v420 = (void **)name;
                v45 = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v425, name, (uint64_t)&std::piecewise_construct, (_DWORD **)&v420);
                v47 = v45 + 7;
                v46 = v45[7];
                *((_DWORD *)v45 + 10) = (_DWORD)v412;
                v48 = v45 + 6;
                std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)(v45 + 6), v46);
                v49 = (_QWORD *)v414;
                *(v47 - 1) = v413;
                *v47 = v49;
                v50 = v415;
                v47[1] = v415;
                if (v50)
                {
                  v49[2] = v47;
                  v413 = (char *)&v414;
                  v414 = 0;
                  v415 = 0;
                  v49 = 0;
                }
                else
                {
                  *v48 = v47;
                }
                ++v393;
                std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)&v413, v49);
                v44 = 0;
                goto LABEL_84;
              }
              v16 = (void **)v425[0];
              if (v425[0] != v11)
              {
                do
                {
                  mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v16 + 8));
                  v17 = (void **)v16[1];
                  if (v17)
                  {
                    do
                    {
                      v18 = v17;
                      v17 = (void **)*v17;
                    }
                    while (v17);
                  }
                  else
                  {
                    do
                    {
                      v18 = (void **)v16[2];
                      v19 = *v18 == v16;
                      v16 = v18;
                    }
                    while (!v19);
                  }
                  v16 = v18;
                }
                while (v18 != v11);
              }
            }
            else
            {
              v41 = (void **)v425[0];
              if (v425[0] == v11)
                goto LABEL_302;
              do
              {
                mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v41 + 8));
                v42 = (void **)v41[1];
                if (v42)
                {
                  do
                  {
                    v43 = v42;
                    v42 = (void **)*v42;
                  }
                  while (v42);
                }
                else
                {
                  do
                  {
                    v43 = (void **)v41[2];
                    v19 = *v43 == v41;
                    v41 = v43;
                  }
                  while (!v19);
                }
                v41 = v43;
              }
              while (v43 != v11);
            }
            v44 = 1;
LABEL_84:
            if (BYTE8(v431))
              std::__tree<std::__value_type<int,std::vector<unsigned char>>,std::__map_value_compare<int,std::__value_type<int,std::vector<unsigned char>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<unsigned char>>>>::destroy((uint64_t)v430, (_QWORD *)v430[1]);
            if (v44)
              goto LABEL_302;
          }
        }
        if (strncmp((const char *)(v13 + 8), "vm info", 0x10uLL))
          break;
        parse_vm_info_note(v5, v14, v430);
        std::__optional_storage_base<CSCppCoreFileRegionsTree,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileRegionsTree,false>>((uint64_t)&v405, (__n128 *)v430);
        if (BYTE8(v431))
        {
          v412 = v430;
          std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v412);
        }
        if (!v407)
        {
          v162 = (void **)v425[0];
          if (v425[0] != v11)
          {
            do
            {
              mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v162 + 8));
              v163 = (void **)v162[1];
              if (v163)
              {
                do
                {
                  v164 = v163;
                  v163 = (void **)*v163;
                }
                while (v163);
              }
              else
              {
                do
                {
                  v164 = (void **)v162[2];
                  v19 = *v164 == v162;
                  v162 = v164;
                }
                while (!v19);
              }
              v162 = v164;
            }
            while (v164 != v11);
          }
          goto LABEL_302;
        }
      }
      if (strncmp(v14->data_owner, "task crashinfo", 0x10uLL))
        break;
      parse_task_crashinfo_note(v5, v14, v430);
      std::__optional_storage_base<CSCppCoreFileTaskCrashinfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<CSCppCoreFileTaskCrashinfo,false>>((CSCppCoreFileTaskCrashinfo *)v458, (uint64_t)v430);
      if (v457)
      {
        if (v456 && __p)
        {
          v455 = __p;
          operator delete(__p);
        }
        if (v453 && v451)
        {
          v452 = v451;
          operator delete(v451);
        }
        if (v441 && v440 < 0)
          operator delete(v438);
        if ((_BYTE)v437 && SHIBYTE(v436) < 0)
          operator delete(*(void **)&v433[24]);
        if (v433[16] && (v433[15] & 0x80000000) != 0)
          operator delete(v432);
        if (BYTE8(v431) && SBYTE7(v431) < 0)
          operator delete(v430[0]);
      }
      if (!v480)
      {
        v175 = (void **)v425[0];
        if (v425[0] == v11)
        {
          v95 = 0;
          goto LABEL_351;
        }
        do
        {
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v175 + 8));
          v176 = (void **)v175[1];
          if (v176)
          {
            do
            {
              v177 = v176;
              v176 = (void **)*v176;
            }
            while (v176);
          }
          else
          {
            do
            {
              v177 = (void **)v175[2];
              v19 = *v177 == v175;
              v175 = v177;
            }
            while (!v19);
          }
          v175 = v177;
        }
        while (v177 != v11);
        goto LABEL_302;
      }
    }
    if (!strncmp(v14->data_owner, "addrable bits", 0x10uLL))
    {
      v423[0] = (void *)parse_addrable_bits_note(v5, v14);
      LOBYTE(v423[1]) = v20;
      if (!v20)
        break;
    }
  }
  v181 = (void **)v425[0];
  if (v425[0] == v11)
  {
LABEL_302:
    v95 = 0;
    goto LABEL_303;
  }
  do
  {
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v181 + 8));
    v182 = (void **)v181[1];
    if (v182)
    {
      do
      {
        v183 = v182;
        v182 = (void **)*v182;
      }
      while (v182);
    }
    else
    {
      do
      {
        v183 = (void **)v181[2];
        v19 = *v183 == v181;
        v181 = v183;
      }
      while (!v19);
    }
    v95 = 0;
    v181 = v183;
  }
  while (v183 != v11);
LABEL_303:
  if (v480)
  {
    if (v479 && v477)
    {
      v478 = v477;
      operator delete(v477);
    }
    if (v476 && v474)
    {
      v475 = v474;
      operator delete(v474);
    }
    if (v464 && v463 < 0)
      operator delete(*(void **)&v461[12]);
    if (v461[4] && (v461[3] & 0x80000000) != 0)
      operator delete(*(void **)&v458[64]);
    if (v458[56] && (v458[55] & 0x80000000) != 0)
      operator delete(*(void **)&v458[32]);
    if (v458[24] && (v458[23] & 0x80000000) != 0)
      operator delete(*(void **)v458);
  }
LABEL_351:
  if (v407)
  {
    *(_QWORD *)v458 = &v405;
    std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
  }
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v425, (_QWORD *)v425[1]);
LABEL_176:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v481);
  if (v409[0])
  {
    v409[1] = v409[0];
    operator delete(v409[0]);
  }
  if ((_DWORD)a3)
  {
    if (!CSArchitectureIsArm64(*(_QWORD *)(*(_QWORD *)(v95 + 192) + 40)))
      goto LABEL_231;
    v96 = CSSymbolicatorCreateWithCoreFilePathAndFlags(v5, 0, 0, 0);
    v97 = v96;
    v99 = v98;
    v405 = v96;
    v406 = v98;
    if (CSIsNull(v96, v98))
      goto LABEL_231;
    v430[0] = &off_1E677A550;
    v430[1] = &v405;
    *((_QWORD *)&v431 + 1) = v430;
    *(_QWORD *)&v458[24] = v458;
    *(_QWORD *)v458 = &off_1E677A550;
    *(_QWORD *)&v458[8] = &v405;
    v100 = CSSymbolicatorGetSymbolOwnerWithNameAtTime(v97, v99, (uint64_t)"dyld", 0x8000000000000000);
    v102 = CSIsNull(v100, v101);
    v103 = CSSymbolicatorGetSymbolWithMangledNameAtTime(v405, v406, (uint64_t)"_vas__segmentinfo_table", 0x8000000000000000);
    v105 = v104;
    if (CSIsNull(v103, v104))
    {
      DeferredLambda::~DeferredLambda((DeferredLambda *)v458);
      goto LABEL_231;
    }
    v126 = CSSymbolGetRange(v103, v105);
    v127 = CSCppCoreFileMemory::CSCppCoreFileMemory(v481, v95);
    v128 = (unsigned int *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*(_QWORD *)v481 + 32))(v127, v126, 4);
    if (v129 >= 4
      && (v130 = (unsigned __int8 *)(*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)v481 + 32))(v481, *v128, 24), v131 >= 0x18))
    {
      v137 = 0;
      v136 = *v130;
      v135 = ((unint64_t)*(unsigned int *)(v130 + 1) << 8) | ((unint64_t)(*(unsigned __int16 *)(v130 + 5) | (v130[7] << 16)) << 40);
      v132 = v130[16];
      v133 = v130[17];
      LODWORD(v134) = v130[18];
    }
    else
    {
      v132 = 0;
      v133 = 0;
      LODWORD(v134) = 0;
      v135 = 0;
      v136 = 0;
      v137 = 1;
    }
    CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)v481);
    DeferredLambda::~DeferredLambda((DeferredLambda *)v458);
    if ((v137 & 1) != 0)
    {
LABEL_231:
      clear_mapped_memory(v95);
    }
    else
    {
      name[0] = v102;
      CSCppCoreFileMemory::CSCppCoreFileMemory(&v405, v95);
      if (v132 == 1 && v134 <= v133 && (_DWORD)v134)
      {
        v134 = v134;
        v156 = v135 + v136;
        do
        {
          v157 = (unsigned int *)(*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(v405 + 32))(&v405, v156, 4);
          if (v158 < 4)
            break;
          v159 = *v157;
          if (!(_DWORD)v159)
            break;
          v160 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v405 + 32))(&v405, v159, 32);
          if (v161 < 0x20 || *(_BYTE *)v160 != 1)
            break;
          if (!*(_BYTE *)(v160 + 16))
          {
            v481[0] = 1;
            v187 = *(_QWORD *)(v160 + 1);
            v188 = *(_DWORD *)(v160 + 9);
            v189 = *(_WORD *)(v160 + 13);
            v484 = *(_BYTE *)(v160 + 15);
            v483 = v189;
            v482 = v188;
            *(_QWORD *)&v481[1] = v187;
            v485 = 0;
            LODWORD(v187) = *(_DWORD *)(v160 + 25);
            LOWORD(v188) = *(_WORD *)(v160 + 29);
            LOBYTE(v189) = *(_BYTE *)(v160 + 31);
            v486 = *(_QWORD *)(v160 + 17);
            v489 = v189;
            v488 = v188;
            v487 = v187;
            v490 = 1;
            v416 = 0;
            v417 = 0;
            v418 = 0;
            v190 = *(unsigned __int16 *)&v481[6];
            if (*(_WORD *)&v481[6])
            {
              v191 = 0;
              while (1)
              {
                v192 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v405 + 32))(&v405, v481[1] + v159 + v191 * v481[2], 32);
                if (v193 < 0x20)
                  break;
                v194 = *(_BYTE *)v192;
                *(_OWORD *)v458 = *(_OWORD *)(v192 + 1);
                *(_QWORD *)&v458[15] = *(_QWORD *)(v192 + 16);
                v195 = *(unsigned __int8 *)(v192 + 24);
                LODWORD(v430[0]) = *(_DWORD *)(v192 + 25);
                *(_DWORD *)((char *)v430 + 3) = *(_DWORD *)(v192 + 28);
                if (v195)
                {
                  v196 = v417;
                  if ((unint64_t)v417 >= v418)
                  {
                    v198 = ((char *)v417 - (_BYTE *)v416) >> 5;
                    v199 = v198 + 1;
                    if ((unint64_t)(v198 + 1) >> 59)
                      std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                    v200 = v418 - (_QWORD)v416;
                    if ((uint64_t)(v418 - (_QWORD)v416) >> 4 > v199)
                      v199 = v200 >> 4;
                    if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFE0)
                      v201 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v201 = v199;
                    if (v201)
                      v202 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppSegmentRange>>((uint64_t)&v418, v201);
                    else
                      v202 = 0;
                    v203 = &v202[32 * v198];
                    *v203 = v194;
                    *(_OWORD *)(v203 + 1) = *(_OWORD *)v458;
                    *((_QWORD *)v203 + 2) = *(_QWORD *)&v458[15];
                    v203[24] = v195;
                    *(_DWORD *)(v203 + 25) = v430[0];
                    *((_DWORD *)v203 + 7) = *(_DWORD *)((char *)v430 + 3);
                    v205 = (__n128 *)v416;
                    v204 = v417;
                    v206 = (__n128 *)v203;
                    if (v417 != v416)
                    {
                      do
                      {
                        v207 = v204[-1];
                        v206[-2] = v204[-2];
                        v206[-1] = v207;
                        v206 -= 2;
                        v204 -= 2;
                      }
                      while (v204 != v205);
                      v204 = v205;
                    }
                    v197 = (__n128 *)(v203 + 32);
                    v416 = v206;
                    v417 = (__n128 *)(v203 + 32);
                    v418 = (unint64_t)&v202[32 * v201];
                    if (v204)
                      operator delete(v204);
                  }
                  else
                  {
                    v417->n128_u8[0] = v194;
                    *(__n128 *)((char *)v196 + 1) = *(__n128 *)v458;
                    v196[1].n128_u64[0] = *(_QWORD *)&v458[15];
                    v196[1].n128_u8[8] = v195;
                    *(unsigned __int32 *)((char *)&v196[1].n128_u32[2] + 1) = (unsigned __int32)v430[0];
                    v196[1].n128_u32[3] = *(_DWORD *)((char *)v430 + 3);
                    v197 = v196 + 2;
                  }
                  v417 = v197;
                  v190 = *(unsigned __int16 *)&v481[6];
                }
                if (++v191 >= (unint64_t)v190)
                {
                  v208 = (__n128 *)v416;
                  v209 = v417;
                  goto LABEL_405;
                }
              }
LABEL_704:
              v307 = 0;
            }
            else
            {
              v209 = 0;
              v208 = 0;
LABEL_405:
              v233 = 126 - 2 * __clz(((char *)v209 - (char *)v208) >> 5);
              if (v209 == v208)
                v234 = 0;
              else
                v234 = v233;
              _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E_P11vas_segmentLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((uint64_t)v208, v209, v234, 1);
              *(_QWORD *)&v458[16] = 0;
              *(_QWORD *)&v458[8] = 0;
              *(_QWORD *)v458 = &v458[8];
              v430[0] = (void *)1;
              v235 = v416;
              if ((unint64_t)((char *)v417 - (_BYTE *)v416) >= 0x21)
              {
                v236 = 1;
                do
                {
                  if (CSRangeIntersectsRange(v235[4 * v236 - 4], v235[4 * v236 - 3], v235[4 * v236], v235[4 * v236 + 1]))
                  {
                    v237 = v235[4 * v236 - 2];
                    v238 = v235[4 * v236 + 2];
                    if (v237 >= v238)
                    {
                      if (v237 <= v238)
                      {
                        std::__tree<TRange<Pointer64>>::destroy((uint64_t)v458, *(_QWORD **)&v458[8]);
                        goto LABEL_704;
                      }
                      std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)v458, (unint64_t *)v430, (uint64_t *)v430);
                    }
                    else
                    {
                      v412 = (char *)v430[0] - 1;
                      std::__tree<unsigned long,std::greater<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)v458, (unint64_t *)&v412, (uint64_t *)&v412);
                    }
                  }
                  v236 = (unint64_t)v430[0] + 1;
                  v430[0] = (void *)v236;
                  v235 = v416;
                  v239 = (char *)v417;
                }
                while (v236 < ((char *)v417 - (_BYTE *)v416) >> 5);
                v240 = *(_QWORD **)v458;
                if (*(_BYTE **)v458 != &v458[8])
                {
                  do
                  {
                    v241 = (char *)v416 + 32 * v240[4];
                    v242 = v239 - (v241 + 32);
                    if (v239 != v241 + 32)
                      memmove((char *)v416 + 32 * v240[4], v241 + 32, v239 - (v241 + 32));
                    v239 = &v241[v242];
                    v417 = (__n128 *)&v241[v242];
                    v243 = (_QWORD *)v240[1];
                    if (v243)
                    {
                      do
                      {
                        v244 = v243;
                        v243 = (_QWORD *)*v243;
                      }
                      while (v243);
                    }
                    else
                    {
                      do
                      {
                        v244 = (_BYTE *)v240[2];
                        v19 = *(_QWORD *)v244 == (_QWORD)v240;
                        v240 = v244;
                      }
                      while (!v19);
                    }
                    v240 = v244;
                  }
                  while (v244 != &v458[8]);
                }
              }
              std::__tree<TRange<Pointer64>>::destroy((uint64_t)v458, *(_QWORD **)&v458[8]);
              v412 = 0;
              v413 = 0;
              v414 = 0;
              v245 = (unsigned __int8 *)v416;
              v391 = v417;
              if (v416 != v417)
              {
                do
                {
                  v246 = *(_QWORD *)v245;
                  v247 = *((_QWORD *)v245 + 1);
                  *(_QWORD *)v458 = *(_QWORD *)v245;
                  *(_QWORD *)&v458[8] = v247;
                  memset(&v458[16], 0, 52);
                  v458[68] = 1;
                  v459 = 0;
                  v460 = 0;
                  *(_OWORD *)v461 = 0uLL;
                  *(_DWORD *)&v461[16] = *((_DWORD *)v245 + 7);
                  LOBYTE(v462) = 0;
                  v466 = 0;
                  LOBYTE(v467) = 0;
                  v469 = 0;
                  LOBYTE(v470) = 0;
                  v472 = 0;
                  v474 = 0;
                  v475 = 0;
                  v473 = 0;
                  v399 = v245;
                  v248 = *((_DWORD *)v245 + 7);
                  if ((v248 & 1) != 0)
                    v249 = 3;
                  else
                    v249 = 1;
                  LOWORD(v428) = 9;
                  v250 = *(_QWORD *)(v95 + 192);
                  v252 = *(unint64_t **)(v250 + 16);
                  v251 = *(unint64_t **)(v250 + 24);
                  if (v252 == v251)
                  {
                    v259 = v247;
                    v258 = v246;
                  }
                  else
                  {
                    v253 = v249 & 0xFFFFFFFB | (4 * ((v248 >> 1) & 1));
                    v395 = (v248 >> 2) & 1;
                    do
                    {
                      v254 = *v252;
                      v255 = v252[1];
                      if (CSRangeIntersectsRange(*v252, v255, v246, v247))
                      {
                        v430[0] = (void *)CSRangeIntersectionRange(v254, v255, v246, v247);
                        v430[1] = (void *)v256;
                        LODWORD(v431) = 1;
                        DWORD1(v431) = v253;
                        *((_QWORD *)&v431 + 1) = v253;
                        v432 = 0;
                        *(_DWORD *)v433 = v245[25];
                        *(_QWORD *)&v433[4] = 0;
                        *(_QWORD *)&v433[12] = 0;
                        *(_QWORD *)&v433[19] = 0;
                        *(_WORD *)&v433[27] = v395;
                        v434 = 0;
                        v435 = 0;
                        v436 = 0;
                        v437 = 0;
                        LODWORD(v438) = 3;
                        HIDWORD(v438) = *((_DWORD *)v245 + 7);
                        LOBYTE(v439) = 0;
                        v257 = v256 >> 14;
                        v443 = 0;
                        std::vector<unsigned short>::vector(v409, v256 >> 14, &v428);
                        v444 = *(_OWORD *)v409;
                        v445 = v410;
                        v409[1] = 0;
                        v410 = 0;
                        v409[0] = 0;
                        v446 = 1;
                        std::vector<unsigned short>::vector(v425, v257, &v428);
                        v447 = *(_OWORD *)v425;
                        v448 = v426;
                        v425[1] = 0;
                        v426 = 0;
                        v425[0] = 0;
                        v449 = 1;
                        v451 = 0;
                        v452 = 0;
                        v450 = 0;
                        std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v473, (__int128 *)v430);
                        v420 = (void **)&v450;
                        std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v420);
                        if (v449 && (_QWORD)v447)
                        {
                          *((_QWORD *)&v447 + 1) = v447;
                          operator delete((void *)v447);
                        }
                        if (v446 && (_QWORD)v444)
                        {
                          *((_QWORD *)&v444 + 1) = v444;
                          operator delete((void *)v444);
                        }
                        if (v443 && v442 < 0)
                          operator delete(v439);
                        if (v425[0])
                        {
                          v425[1] = v425[0];
                          operator delete(v425[0]);
                        }
                        if (v409[0])
                        {
                          v409[1] = v409[0];
                          operator delete(v409[0]);
                        }
                      }
                      v252 += 5;
                    }
                    while (v252 != v251);
                    v258 = *(_QWORD *)v458;
                    v259 = *(_QWORD *)&v458[8];
                  }
                  v260 = 0;
                  v261 = 0;
                  v409[0] = 0;
                  v409[1] = 0;
                  v410 = 0;
                  if (v258 < v258 + v259)
                  {
                    v262 = v473;
                    v263 = v247 + v246;
                    do
                    {
                      *(_OWORD *)v430 = *(_OWORD *)v245;
                      v431 = *((_OWORD *)v245 + 1);
                      v432 = (void *)0x4000;
                      *(_QWORD *)v433 = v258;
                      *(_QWORD *)&v433[8] = v409;
                      if (v262 == v474)
                      {
                        set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()((uint64_t)v430, v263);
                        v258 = v263;
                      }
                      else
                      {
                        v264 = *v262;
                        if (v258 < *v262)
                        {
                          if (v263 >= v264)
                            v265 = *v262;
                          else
                            v265 = v263;
                          set_up_mapped_memory_cache_for_exclave_core_file<SizeAndEndianness<Pointer32,LittleEndian>>(char const*,unsigned long long,vas_segmentinfo_table const&,CSExclaveCoreFileType,mapped_memory_t *)::{lambda(unsigned long long)#1}::operator()((uint64_t)v430, v265);
                          v264 = *v262;
                        }
                        v258 = v262[1] + v264;
                        v262 += 28;
                      }
                    }
                    while (v258 < *(_QWORD *)&v458[8] + *(_QWORD *)v458);
                    v261 = (uint64_t *)v409[0];
                    v260 = v409[1];
                  }
                  std::vector<CSCppCoreFileRegionInfo>::__insert_with_size[abi:ne180100]<std::__wrap_iter<CSCppCoreFileRegionInfo*>,std::__wrap_iter<CSCppCoreFileRegionInfo*>>((uint64_t *)&v473, (__int128 *)v474, v261, (uint64_t)v260, 0x6DB6DB6DB6DB6DB7 * ((v260 - (_BYTE *)v261) >> 5));
                  v266 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v474 - (_BYTE *)v473) >> 5));
                  if (v474 == v473)
                    v267 = 0;
                  else
                    v267 = v266;
                  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E0_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v473, (__int128 *)v474, v267, 1);
                  std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v412, (__int128 *)v458);
                  v430[0] = v409;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v430);
                  v430[0] = &v473;
                  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v430);
                  if (v472 && (_QWORD)v470)
                  {
                    *((_QWORD *)&v470 + 1) = v470;
                    operator delete((void *)v470);
                  }
                  if (v469 && (_QWORD)v467)
                  {
                    *((_QWORD *)&v467 + 1) = v467;
                    operator delete((void *)v467);
                  }
                  if (v466 && v465 < 0)
                    operator delete(v462);
                  v245 += 32;
                }
                while (v399 + 32 != (unsigned __int8 *)v391);
              }
              v268 = *(_QWORD *)(v95 + 192);
              v269 = *(_QWORD *)(v268 + 16);
              v403 = *(_QWORD *)(v268 + 24);
              if (v269 != v403)
              {
                do
                {
                  v271 = *(_QWORD *)v269;
                  v270 = *(_QWORD *)(v269 + 8);
                  v430[1] = 0;
                  v430[0] = 0;
                  *(_QWORD *)&v431 = 0;
                  v273 = (__int128 *)v412;
                  v272 = (__int128 *)v413;
                  if (v412 == v413)
                  {
                    v280 = 0;
LABEL_503:
                    if (v270)
                    {
                      if ((unint64_t)v280 >= (unint64_t)v431)
                      {
                        v292 = (unint64_t *)v430[0];
                        v293 = ((char *)v280 - (char *)v430[0]) >> 4;
                        v294 = v293 + 1;
                        if ((unint64_t)(v293 + 1) >> 60)
                          std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                        v295 = v431 - (unint64_t)v430[0];
                        if ((uint64_t)(v431 - (unint64_t)v430[0]) >> 3 > v294)
                          v294 = v295 >> 3;
                        if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF0)
                          v296 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v296 = v294;
                        if (v296)
                        {
                          v297 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v431, v296);
                          v280 = (unint64_t *)v430[1];
                          v292 = (unint64_t *)v430[0];
                        }
                        else
                        {
                          v297 = 0;
                        }
                        v298 = (unint64_t *)&v297[16 * v293];
                        *v298 = v271;
                        v298[1] = v270;
                        v299 = v298;
                        if (v280 != v292)
                        {
                          do
                          {
                            *((_OWORD *)v299 - 1) = *((_OWORD *)v280 - 1);
                            v299 -= 2;
                            v280 -= 2;
                          }
                          while (v280 != v292);
                          v292 = (unint64_t *)v430[0];
                        }
                        v280 = v298 + 2;
                        v430[0] = v299;
                        v430[1] = v298 + 2;
                        *(_QWORD *)&v431 = &v297[16 * v296];
                        if (v292)
                          operator delete(v292);
                      }
                      else
                      {
                        *v280 = v271;
                        v280[1] = v270;
                        v280 += 2;
                      }
                      v430[1] = v280;
                    }
                  }
                  else
                  {
                    while (!CSRangeContainsRange(*(_QWORD *)v273, *((_QWORD *)v273 + 1), v271, v270))
                    {
                      v274 = CSRangeIntersectsRange(v271, v270, *(_QWORD *)v273, *((_QWORD *)v273 + 1));
                      v275 = *(_QWORD *)v273;
                      if (v274)
                      {
                        v276 = *((_QWORD *)v273 + 1);
                        if (v271 - v275 >= v276)
                        {
                          v278 = v275 - v271;
                          v279 = (char *)v430[1];
                          if (v430[1] >= (void *)v431)
                          {
                            v281 = (char *)v430[0];
                            v282 = ((char *)v430[1] - (char *)v430[0]) >> 4;
                            v283 = v282 + 1;
                            if ((unint64_t)(v282 + 1) >> 60)
                              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
                            v284 = v431 - (unint64_t)v430[0];
                            if ((uint64_t)(v431 - (unint64_t)v430[0]) >> 3 > v283)
                              v283 = v284 >> 3;
                            if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFF0)
                              v285 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v285 = v283;
                            if (v285)
                            {
                              v286 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<CSCppSymbolOwner>>>((uint64_t)&v431, v285);
                              v279 = (char *)v430[1];
                              v281 = (char *)v430[0];
                            }
                            else
                            {
                              v286 = 0;
                            }
                            v287 = (unint64_t *)&v286[16 * v282];
                            *v287 = v271;
                            v287[1] = v278;
                            v288 = v287;
                            if (v279 != v281)
                            {
                              do
                              {
                                *((_OWORD *)v288 - 1) = *((_OWORD *)v279 - 1);
                                v288 -= 2;
                                v279 -= 16;
                              }
                              while (v279 != v281);
                              v281 = (char *)v430[0];
                            }
                            v280 = v287 + 2;
                            v430[0] = v288;
                            v430[1] = v287 + 2;
                            *(_QWORD *)&v431 = &v286[16 * v285];
                            if (v281)
                              operator delete(v281);
                          }
                          else
                          {
                            *(_QWORD *)v430[1] = v271;
                            *((_QWORD *)v279 + 1) = v278;
                            v280 = (unint64_t *)(v279 + 16);
                          }
                          v430[1] = v280;
                          v289 = *(_QWORD *)v273;
                          v290 = *((_QWORD *)v273 + 1);
                          v291 = v271 + v270;
                          if (v271 + v270 - *(_QWORD *)v273 < v290)
                            goto LABEL_522;
                          v271 = v290 + v289;
                          v270 = v291 - (v290 + v289);
                        }
                        else
                        {
                          v277 = v271 + v270;
                          v271 = v276 + v275;
                          v270 = v277 - (v276 + v275);
                        }
                      }
                      else if (v275 > v271 + v270)
                      {
                        goto LABEL_501;
                      }
                      v273 += 14;
                      if (v273 == v272)
                      {
LABEL_501:
                        v280 = (unint64_t *)v430[1];
                        goto LABEL_503;
                      }
                    }
                    v280 = (unint64_t *)v430[1];
                  }
LABEL_522:
                  v300 = (unint64_t *)v430[0];
                  if (v430[0] != v280)
                  {
                    do
                    {
                      LOWORD(v428) = 9;
                      v301 = *(_DWORD *)(v269 + 32);
                      v302 = *(_DWORD *)(v269 + 36);
                      v303 = *(_OWORD *)v300;
                      *(_DWORD *)&v458[16] = 0;
                      *(_DWORD *)&v458[20] = v301 | 1;
                      if ((v301 & 4) != 0)
                        v304 = 3;
                      else
                        v304 = 1;
                      *(_OWORD *)v458 = v303;
                      *(_DWORD *)&v458[24] = v302 | 1;
                      v459 = 0;
                      v460 = 0;
                      *(_DWORD *)v461 = 0;
                      *(_QWORD *)&v461[4] = 0;
                      memset(&v458[28], 0, 41);
                      *(_DWORD *)&v461[12] = 3;
                      *(_DWORD *)&v461[16] = v304;
                      LOBYTE(v462) = 0;
                      v466 = 0;
                      std::vector<unsigned short>::vector(v409, v300[1] >> 14, &v428);
                      v467 = *(_OWORD *)v409;
                      v468 = v410;
                      v409[1] = 0;
                      v410 = 0;
                      v409[0] = 0;
                      v469 = 1;
                      std::vector<unsigned short>::vector(v425, v300[1] >> 14, &v428);
                      v470 = *(_OWORD *)v425;
                      v471 = v426;
                      v425[1] = 0;
                      v426 = 0;
                      v425[0] = 0;
                      v472 = 1;
                      v474 = 0;
                      v475 = 0;
                      v473 = 0;
                      std::vector<CSCppCoreFileRegionInfo>::push_back[abi:ne180100]((uint64_t *)&v412, (__int128 *)v458);
                      v420 = (void **)&v473;
                      std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100](&v420);
                      if (v472 && (_QWORD)v470)
                      {
                        *((_QWORD *)&v470 + 1) = v470;
                        operator delete((void *)v470);
                      }
                      if (v469 && (_QWORD)v467)
                      {
                        *((_QWORD *)&v467 + 1) = v467;
                        operator delete((void *)v467);
                      }
                      if (v466 && v465 < 0)
                        operator delete(v462);
                      if (v425[0])
                      {
                        v425[1] = v425[0];
                        operator delete(v425[0]);
                      }
                      if (v409[0])
                      {
                        v409[1] = v409[0];
                        operator delete(v409[0]);
                      }
                      v300 += 2;
                    }
                    while (v300 != v280);
                    v305 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v413 - (_BYTE *)v412) >> 5));
                    if (v413 == v412)
                      v306 = 0;
                    else
                      v306 = v305;
                    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZL48set_up_mapped_memory_cache_for_exclave_core_fileI17SizeAndEndiannessI9Pointer3212LittleEndianEEbPKcyRK21vas_segmentinfo_table21CSExclaveCoreFileTypeP15mapped_memory_tEUlRKT_RKT0_E1_P23CSCppCoreFileRegionInfoLb0EEEvT1_SP_SI_NS_15iterator_traitsISP_E15difference_typeEb((unint64_t)v412, (__int128 *)v413, v306, 1);
                    v280 = (unint64_t *)v430[0];
                  }
                  if (v280)
                  {
                    v430[1] = v280;
                    operator delete(v280);
                  }
                  v269 += 40;
                }
                while (v269 != v403);
                v268 = *(_QWORD *)(v95 + 192);
              }
              std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>::map[abi:ne180100]((uint64_t *)v458, v268 + 48);
              *(_QWORD *)&v431 = 0;
              v430[1] = 0;
              v430[0] = &v430[1];
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::__move_assign(*(_QWORD *)(v95 + 192) + 48, v430);
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v430, (_QWORD *)v430[1]);
              LODWORD(v420) = dup(*(_DWORD *)(*(_QWORD *)(v95 + 192) + 8));
              v307 = (_DWORD)v420 != -1;
              if ((_DWORD)v420 != -1)
              {
                v308 = *(_QWORD *)(v95 + 192);
                v423[1] = 0;
                v424 = 0;
                v423[0] = 0;
                std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v423, (uint64_t)v412, (uint64_t)v413, 0x6DB6DB6DB6DB6DB7 * ((v413 - (_BYTE *)v412) >> 5));
                v430[1] = 0;
                v430[0] = 0;
                *(_QWORD *)&v431 = 0;
                std::vector<CSCppCoreFileRegionInfo>::__init_with_size[abi:ne180100]<CSCppCoreFileRegionInfo*,CSCppCoreFileRegionInfo*>(v430, (uint64_t)v423[0], (uint64_t)v423[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v423[1] - (char *)v423[0]) >> 5));
                std::make_unique[abi:ne180100]<CSCppCoreFileExclavesMetadata,int const&,std::vector<mapped_memory_core_file_dumped_region_info_t> const&,_CSArchitecture const&,std::map<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>> const&,std::optional<unsigned long long> const&,CSCppCoreFileRegionsTree,CSExclaveCoreFileType const&,long long &>(&v420, v308 + 16, (uint64_t *)(v308 + 40), (uint64_t)v458, (uint64_t *)(v308 + 72), (__int128 *)v430, (int *)name, (uint64_t *)&v481[8], (uint64_t *)v425);
                v309 = v425[0];
                v425[0] = 0;
                v310 = *(_QWORD *)(v95 + 192);
                *(_QWORD *)(v95 + 192) = v309;
                if (v310)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v310 + 8))(v310);
                  v311 = v425[0];
                  v425[0] = 0;
                  if (v311)
                    (*(void (**)(void *))(*(_QWORD *)v311 + 8))(v311);
                }
                v409[0] = v430;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v409);
                v409[0] = v423;
                std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v409);
              }
              std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)v458, *(_QWORD **)&v458[8]);
              *(_QWORD *)v458 = &v412;
              std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v458);
            }
            if (v416)
            {
              v417 = (__n128 *)v416;
              operator delete(v416);
            }
            CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v405);
            if (v307)
              goto LABEL_231;
            goto LABEL_243;
          }
          v156 += 4;
          --v134;
        }
        while (v134);
      }
      CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&v405);
LABEL_243:
      release_mapped_memory_cache((std::mutex *)v95);
      v95 = 0;
    }
  }
LABEL_269:
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)v408);
  return v95;
}

void sub_1B4184AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,__int16 a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a67;

  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  a67 = &a60;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<int,std::vector<unsigned char>>>>>>::destroy((uint64_t)&STACK[0x3C0], (_QWORD *)STACK[0x3C8]);
  STACK[0x3C0] = (unint64_t)&a47;
  std::vector<CSCppCoreFileRegionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  CSCppCoreFileMemory::~CSCppCoreFileMemory((CSCppCoreFileMemory *)&a56);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a17);
  CSCppFileMemory::~CSCppFileMemory((CSCppFileMemory *)&a32);
  _Unwind_Resume(a1);
}

uint64_t create_mapped_memory_cache_for_core_file_with_label(char *a1, const char *a2)
{
  return common_create_mapped_memory_cache_for_core_file_with_label_and_optional_exclave_metadata(a1, a2, 1);
}

BOOL mapped_memory_is_64_bit(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 101) != 0;
  return result;
}

uint64_t create_mapped_memory_cache_for_task(mach_port_name_t a1, char a2)
{
  return create_mapped_memory_cache_for_task_with_label(a1, a2, (uint64_t)"");
}

void set_mapped_memory_cache_region_info_block(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  *(_QWORD *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t destroy_mapped_memory_cache(uint64_t result)
{
  uint64_t v1;
  mach_port_name_t v2;
  task_suspension_token_t v3;
  uint64_t v4;
  void *v5;

  if (result)
  {
    v1 = result;
    clear_mapped_memory(result);
    v2 = *(_DWORD *)(v1 + 88);
    if (v2)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v2);
    v3 = *(_DWORD *)(v1 + 92);
    if (v3)
      task_resume2(v3);
    v4 = *(_QWORD *)(v1 + 192);
    *(_QWORD *)(v1 + 192) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    std::mutex::~mutex((std::mutex *)(v1 + 128));
    v5 = *(void **)(v1 + 64);
    if (v5)
    {
      *(_QWORD *)(v1 + 72) = v5;
      operator delete(v5);
    }
    std::__tree<TRange<Pointer64>>::destroy(v1 + 40, *(_QWORD **)(v1 + 48));
    JUMPOUT(0x1B5E36940);
  }
  return result;
}

void clear_mapped_memory(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  v3 = *(_QWORD **)(a1 + 40);
  v4 = (_QWORD *)(a1 + 48);
  if (v3 != (_QWORD *)(a1 + 48))
  {
    do
    {
      v5 = *((_OWORD *)v3 + 3);
      v12 = *((_OWORD *)v3 + 2);
      v13 = v5;
      v14 = v3[8];
      deallocate_node((uint64_t)&v12);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<TRange<Pointer64>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  v9 = *(__int128 **)(a1 + 64);
  v10 = *(__int128 **)(a1 + 72);
  if (v9 != v10)
  {
    do
    {
      v11 = v9[1];
      v12 = *v9;
      v13 = v11;
      v14 = *((_QWORD *)v9 + 4);
      deallocate_node((uint64_t)&v12);
      v9 = (__int128 *)((char *)v9 + 40);
    }
    while (v9 != v10);
    v9 = *(__int128 **)(a1 + 64);
  }
  *(_QWORD *)(a1 + 72) = v9;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::mutex::unlock(v2);
}

void sub_1B4185330(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

tree *__cdecl find_node(const char *a1, tree *a2)
{
  uint64_t v2;
  int v3;
  const char *v4;
  int v5;
  uint64_t v6;
  std::mutex *v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;

  v4 = a1;
  if (a1)
  {
    v5 = v3;
    v6 = v2;
    v8 = (std::mutex *)(a1 + 128);
    std::mutex::lock((std::mutex *)a1 + 2);
    if ((tree *)((char *)a2 + v6) <= a2)
      goto LABEL_24;
    v9 = (uint64_t *)(v4 + 48);
    v10 = (_QWORD *)*((_QWORD *)v4 + 6);
    if (v10)
    {
      do
      {
        v11 = v10[4];
        v12 = v11 > (unint64_t)a2;
        if (v11 <= (unint64_t)a2)
          v13 = v10 + 1;
        else
          v13 = v10;
        if (v12)
          v9 = v10;
        v10 = (_QWORD *)*v13;
      }
      while (*v13);
    }
    if (v9 == *((uint64_t **)v4 + 5))
      goto LABEL_24;
    v14 = *v9;
    if (*v9)
    {
      do
      {
        v15 = v14;
        v14 = *(_QWORD *)(v14 + 8);
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = v9[2];
        v18 = *(_QWORD *)v15 == (_QWORD)v9;
        v9 = (uint64_t *)v15;
      }
      while (v18);
    }
    v4 = (const char *)(v15 + 32);
    v16 = *(_QWORD *)(v15 + 32);
    if (v16 > (unint64_t)a2)
      goto LABEL_24;
    v17 = *(_QWORD *)(v15 + 40) + v16;
    v18 = v17 <= (unint64_t)a2 || v5 == 0;
    if (v18)
    {
      if (v17 <= (unint64_t)a2)
      {
LABEL_24:
        v4 = 0;
        goto LABEL_25;
      }
    }
    else if (v17 < (unint64_t)a2 + v6)
    {
      goto LABEL_24;
    }
    ++*(_DWORD *)(v15 + 64);
LABEL_25:
    std::mutex::unlock(v8);
  }
  return (tree *)v4;
}

BOOL vm_tag_is_malloc(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0xD || ((1 << a1) & 0x3BDE) == 0)
    return a1 == 99;
  return result;
}

uint64_t **map_new_node(uint64_t a1, mach_vm_address_t a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t *core_file_dumped_region_containing_location;
  char v13;
  mach_vm_address_t v14;
  unint64_t v15;
  char v16;
  uint64_t **v17;
  int v18;
  vm_map_read_t v19;
  mach_vm_address_t v20;
  mach_vm_size_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  int v24;
  char v25;
  mach_vm_address_t v26;
  mach_vm_address_t v27;
  mach_vm_address_t v28;
  mach_vm_size_t v29;
  char v30;
  char v31;
  _BOOL4 v32;
  mach_vm_size_t v33;
  _BOOL4 v34;
  int v35;
  vm_map_read_t v36;
  task_name_t v37;
  mach_vm_size_t v38;
  uint64_t **v39;
  unsigned __int8 v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t region_at_address;
  char v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  mach_vm_size_t v49;
  char *v50;
  char *v51;
  char *v52;
  mach_vm_size_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  BOOL v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  mach_vm_size_t v74;
  mach_vm_size_t v75;
  __int128 v76;
  __int128 v77;
  mach_vm_size_t v78;
  vm_map_t *v79;
  int v80;
  mach_vm_size_t v81;
  uint64_t v82;
  mach_vm_size_t v83;
  char v84;
  uint64_t **v85;
  char **v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  char *v105;
  char *v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t **v110;
  uint64_t **v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t **v115;
  unsigned __int8 v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t **v119;
  char **v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  __int128 v137;
  __int128 v138;
  char *v139;
  char *v140;
  char *v141;
  __int128 v142;
  __int128 v143;
  uint64_t **v144;
  char v145;
  uint64_t v147;
  uint64_t **v148;
  task_name_t task;
  task_name_t taska[2];
  uint64_t v151;
  mach_vm_size_t v152;
  uint64_t **v153;
  std::mutex *v154;
  std::mutex *v155;
  vm_prot_t nesting_depth[2];
  mach_vm_size_t size;
  char *v158;
  char *v159;
  mach_vm_address_t address;
  mach_msg_type_number_t infoCnt;
  int info[2];
  mach_vm_size_t v163;
  mach_vm_address_t v164;
  task_name_t v165;
  int v166;

  if (!a1)
  {
    if (a4)
    {
      v17 = 0;
      v18 = 4;
LABEL_11:
      *a4 = v18;
      return v17;
    }
    return 0;
  }
  if (!a2)
  {
    if (a4)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_11;
    }
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 192);
  v10 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  if (!v9)
  {
    v19 = *(_DWORD *)(a1 + 88);
    nesting_depth[0] = 999999;
    infoCnt = 12;
    size = 0;
    address = a2;
    if (mach_vm_region_recurse(v19, &address, &size, (natural_t *)nesting_depth, info, &infoCnt)
      || (v20 = address, address > a2)
      || (v21 = size, size + address <= a2))
    {
      v22 = 0;
      v23 = 0;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v23 = info[0];
      v22 = info[1];
    }
    if (v20 - 1 >= a2)
    {
      if (a4)
      {
        v17 = 0;
        *a4 = 1;
        goto LABEL_214;
      }
      goto LABEL_162;
    }
    v154 = v10;
    v24 = (v23 & 2) == 0;
    v25 = ((v23 | v22) & 2) == 0;
    v26 = a3 + a2;
    v27 = v20 + v21;
    if (v26 > v20 + v21)
    {
      do
      {
        nesting_depth[0] = 999999;
        infoCnt = 12;
        size = 0;
        address = v27;
        if (mach_vm_region_recurse(v19, &address, &size, (natural_t *)nesting_depth, info, &infoCnt)
          || (v28 = address, address > v27)
          || (v29 = size, size + address <= v27))
        {
          v30 = 0;
          v31 = 0;
          v28 = 0;
          v29 = 0;
        }
        else
        {
          v31 = info[0];
          v30 = info[1];
        }
        if (!v28)
        {
          v17 = 0;
          if (a4)
            *a4 = 1;
          v10 = v154;
          goto LABEL_214;
        }
        v32 = (v31 & 2) == 0;
        v24 &= v32;
        if ((v30 & 2) != 0)
          v25 = 0;
        else
          v25 &= v32;
        v27 = v28 + v29;
      }
      while (v26 > v28 + v29);
    }
    v33 = v27 - v20;
    v34 = CSRangeContainsRange(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v20, v27 - v20);
    v10 = v154;
    if ((v25 & 1) != 0 || (!*(_QWORD *)(a1 + 32) ? (v35 = v24) : (v35 = 0), v36 = v19, v35 == 1))
      v36 = *MEMORY[0x1E0C83DA0];
    if (v34)
      v37 = v36;
    else
      v37 = v19;
    if (*(_BYTE *)(a1 + 100))
    {
      if (!mach_task_is_self(v37))
      {
        *(_QWORD *)info = 0;
        size = 0;
        v80 = mach_vm_read_overwrite(*(_DWORD *)(a1 + 88), v20, 1uLL, (mach_vm_address_t)info, &size);
        if (v80)
          goto LABEL_125;
      }
    }
    *(_QWORD *)info = v20;
    v163 = v33;
    v165 = v37;
    v166 = 0;
    if (mach_task_is_self(v37))
    {
      v38 = *(_QWORD *)(a1 + 32) + v20;
    }
    else
    {
      LODWORD(address) = 0;
      nesting_depth[0] = 1;
      size = 0;
      v80 = remap_memory_from_target(*MEMORY[0x1E0C83DA0], &size, v33, 0, 33, v37, v20, 0, (vm_prot_t *)&address, nesting_depth, 1u);
      if (v80)
      {
LABEL_125:
        if (a4)
          *a4 = v80;
        goto LABEL_162;
      }
      v38 = size;
    }
    v164 = v38;
    v39 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>((uint64_t **)(a1 + 40), (unint64_t *)info, (uint64_t)info);
    v152 = v33;
    task = v37;
    v147 = v40;
    v148 = v39;
    if (v40)
    {
      v41 = v39[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
      else
      {
        v85 = v39;
        do
        {
          v42 = v85[2];
          v66 = *v42 == (_QWORD)v85;
          v85 = (uint64_t **)v42;
        }
        while (!v66);
      }
    }
    else
    {
      v42 = (uint64_t *)v39;
    }
    if (v42 != (uint64_t *)(a1 + 48))
    {
      v86 = (char **)(a1 + 64);
      do
      {
        v88 = v42 + 4;
        v87 = v42[4];
        if (*(_QWORD *)info > v87)
          break;
        v89 = v42;
        if (v42[5] + v87 > v163 + *(_QWORD *)info)
          break;
        v90 = (uint64_t *)v42[1];
        v91 = v42;
        if (v90)
        {
          do
          {
            v42 = v90;
            v90 = (uint64_t *)*v90;
          }
          while (v90);
        }
        else
        {
          do
          {
            v42 = (uint64_t *)v91[2];
            v66 = *v42 == (_QWORD)v91;
            v91 = v42;
          }
          while (!v66);
        }
        v92 = *(_QWORD *)(a1 + 72);
        v93 = *(_QWORD *)(a1 + 80);
        if (v92 >= v93)
        {
          v97 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v92 - (_QWORD)*v86) >> 3);
          v98 = v97 + 1;
          if (v97 + 1 > 0x666666666666666)
            std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
          v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v93 - (_QWORD)*v86) >> 3);
          if (2 * v99 > v98)
            v98 = 2 * v99;
          if (v99 >= 0x333333333333333)
            v100 = 0x666666666666666;
          else
            v100 = v98;
          if (v100)
            v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(a1 + 80, v100);
          else
            v101 = 0;
          v102 = &v101[40 * v97];
          v103 = *(_OWORD *)v88;
          v104 = *((_OWORD *)v88 + 1);
          *((_QWORD *)v102 + 4) = v88[4];
          *(_OWORD *)v102 = v103;
          *((_OWORD *)v102 + 1) = v104;
          v106 = *(char **)(a1 + 64);
          v105 = *(char **)(a1 + 72);
          v107 = v102;
          if (v105 != v106)
          {
            do
            {
              v108 = *(_OWORD *)(v105 - 40);
              v109 = *(_OWORD *)(v105 - 24);
              *((_DWORD *)v107 - 2) = *((_DWORD *)v105 - 2);
              *(_OWORD *)(v107 - 24) = v109;
              *(_OWORD *)(v107 - 40) = v108;
              v107 -= 40;
              v105 -= 40;
            }
            while (v105 != v106);
            v105 = *v86;
          }
          v96 = v102 + 40;
          *(_QWORD *)(a1 + 64) = v107;
          *(_QWORD *)(a1 + 72) = v102 + 40;
          *(_QWORD *)(a1 + 80) = &v101[40 * v100];
          if (v105)
            operator delete(v105);
        }
        else
        {
          v94 = *(_OWORD *)v88;
          v95 = *((_OWORD *)v88 + 1);
          *(_QWORD *)(v92 + 32) = v88[4];
          *(_OWORD *)v92 = v94;
          *(_OWORD *)(v92 + 16) = v95;
          v96 = (char *)(v92 + 40);
        }
        *(_QWORD *)(a1 + 72) = v96;
        std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)(a1 + 40), v89);
        operator delete(v89);
      }
      while (v42 != (uint64_t *)(a1 + 48));
    }
    v10 = v154;
    v110 = v148;
    if (!v147)
    {
      v111 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>((uint64_t **)(a1 + 40), (unint64_t *)info, (uint64_t)info);
      if (!v112)
      {
LABEL_162:
        v17 = 0;
        goto LABEL_214;
      }
      v110 = v111;
    }
    if (!mach_task_is_self(task))
    {
      ++*(_DWORD *)a1;
      *(_QWORD *)(a1 + 8) += v152;
    }
    v17 = v110 + 4;
    goto LABEL_214;
  }
  size = 0;
  v158 = 0;
  v159 = 0;
  v11 = *(_QWORD *)(a1 + 192);
  if (v11)
  {
    core_file_dumped_region_containing_location = find_core_file_dumped_region_containing_location(v11 + 16, a2);
    if (v13)
    {
      v151 = *core_file_dumped_region_containing_location;
      v15 = core_file_dumped_region_containing_location[2];
      v14 = core_file_dumped_region_containing_location[3];
      v4 = v15 >> 8;
      v16 = 1;
      goto LABEL_57;
    }
    v11 = *(_QWORD *)(a1 + 192);
  }
  if (!*(_BYTE *)(v11 + 112)
    || (region_at_address = CSCppCoreFileRegionsTree::get_region_at_address((char **)(v11 + 88), a2, 0x270FuLL), !v44)
    || (v14 = *(_QWORD *)(region_at_address + 8), a2 - *(_QWORD *)region_at_address >= v14)
    || *(_BYTE *)(region_at_address + 67) != 3)
  {
    v17 = 0;
    if (!a4)
      goto LABEL_212;
    v45 = 1;
LABEL_107:
    *a4 = v45;
    goto LABEL_212;
  }
  v151 = *(_QWORD *)region_at_address;
  v16 = 0;
  LOBYTE(v15) = 0;
LABEL_57:
  v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v158[-size] >> 3) + 1;
  if (v46 > 0x666666666666666)
    std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((uint64_t)&v159[-size] >> 3) > v46)
    v46 = 0x999999999999999ALL * ((uint64_t)&v159[-size] >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v159[-size] >> 3) >= 0x333333333333333)
    v47 = 0x666666666666666;
  else
    v47 = v46;
  if (v47)
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)&v159, v47);
  else
    v48 = 0;
  v49 = (mach_vm_size_t)&v48[8 * ((uint64_t)&v158[-size] >> 3)];
  v50 = &v48[40 * v47];
  *(_QWORD *)v49 = v15 | (v4 << 8);
  *(_QWORD *)(v49 + 8) = v14;
  *(_BYTE *)(v49 + 16) = v16;
  *(_DWORD *)(v49 + 17) = nesting_depth[0];
  *(_DWORD *)(v49 + 20) = *(vm_prot_t *)((char *)nesting_depth + 3);
  *(_QWORD *)(v49 + 24) = v151;
  *(_QWORD *)(v49 + 32) = v14;
  v51 = (char *)(v49 + 40);
  v53 = size;
  v52 = v158;
  if (v158 != (char *)size)
  {
    do
    {
      v54 = *(_OWORD *)(v52 - 40);
      v55 = *(_OWORD *)(v52 - 24);
      *(_QWORD *)(v49 - 8) = *((_QWORD *)v52 - 1);
      *(_OWORD *)(v49 - 24) = v55;
      *(_OWORD *)(v49 - 40) = v54;
      v49 -= 40;
      v52 -= 40;
    }
    while (v52 != (char *)v53);
    v52 = (char *)v53;
  }
  size = v49;
  v158 = v51;
  v159 = v50;
  if (v52)
    operator delete(v52);
  v155 = v10;
  v158 = v51;
  v56 = a3 + a2;
  v57 = v14 + v151;
  if (v56 <= v14 + v151)
  {
LABEL_102:
    v78 = v57 - v151;
    *(_QWORD *)info = v151;
    v163 = v57 - v151;
    v165 = *(_DWORD *)(a1 + 88);
    v166 = 0;
    v10 = v155;
    if (!*(_QWORD *)(a1 + 192)
      || (char *)size == v51
      || (address = 0, v79 = (vm_map_t *)MEMORY[0x1E0C83DA0], mach_vm_allocate(*MEMORY[0x1E0C83DA0], &address, v78, 1)))
    {
LABEL_105:
      if (a4)
      {
        v17 = 0;
        v45 = 5;
        goto LABEL_107;
      }
    }
    else
    {
      v81 = size;
      if ((char *)size != v158)
      {
        v82 = *MEMORY[0x1E0C85AC0];
        v83 = size;
        while (!*(_BYTE *)(v83 + 16) || (*(_QWORD *)v83 & v82) == 0 && (*(_QWORD *)(v83 + 8) & v82) == 0)
        {
          v83 += 40;
          if ((char *)v83 == v158)
          {
            v84 = 1;
            goto LABEL_164;
          }
        }
        v84 = 0;
        do
        {
LABEL_164:
          if (*(_BYTE *)(v81 + 16))
          {
            v113 = *(_QWORD *)(v81 + 24) - *(_QWORD *)(size + 24);
            if ((v84 & 1) != 0)
            {
              if (mmap((void *)(address + v113), *(_QWORD *)(v81 + 8), 1, 18, *(_DWORD *)(*(_QWORD *)(a1 + 192) + 8), *(_QWORD *)v81) == (void *)-1)goto LABEL_178;
            }
            else
            {
              while (1)
              {
                v114 = pread(*(_DWORD *)(*(_QWORD *)(a1 + 192) + 8), (void *)(address + v113), *(_QWORD *)(v81 + 8), *(_QWORD *)v81);
                if (v114 != -1)
                  break;
                if (*__error() != 4)
                  goto LABEL_172;
              }
              if (v114 < *(_QWORD *)(v81 + 8))
              {
LABEL_178:
                mach_vm_deallocate(*v79, address, v78);
                goto LABEL_105;
              }
            }
          }
LABEL_172:
          v81 += 40;
        }
        while ((char *)v81 != v158);
      }
      v164 = address;
      v115 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>((uint64_t **)(a1 + 40), (unint64_t *)info, (uint64_t)info);
      *(_QWORD *)taska = v116;
      v153 = v115;
      if (v116)
      {
        v117 = v115[1];
        if (v117)
        {
          do
          {
            v118 = v117;
            v117 = (uint64_t *)*v117;
          }
          while (v117);
        }
        else
        {
          v119 = v115;
          do
          {
            v118 = v119[2];
            v66 = *v118 == (_QWORD)v119;
            v119 = (uint64_t **)v118;
          }
          while (!v66);
        }
      }
      else
      {
        v118 = (uint64_t *)v115;
      }
      if (v118 != (uint64_t *)(a1 + 48))
      {
        v120 = (char **)(a1 + 64);
        do
        {
          v122 = v118 + 4;
          v121 = v118[4];
          if (*(_QWORD *)info > v121)
            break;
          v123 = v118;
          if (v118[5] + v121 > v163 + *(_QWORD *)info)
            break;
          v124 = (uint64_t *)v118[1];
          v125 = v118;
          if (v124)
          {
            do
            {
              v118 = v124;
              v124 = (uint64_t *)*v124;
            }
            while (v124);
          }
          else
          {
            do
            {
              v118 = (uint64_t *)v125[2];
              v66 = *v118 == (_QWORD)v125;
              v125 = v118;
            }
            while (!v66);
          }
          v126 = *(_QWORD *)(a1 + 72);
          v127 = *(_QWORD *)(a1 + 80);
          if (v126 >= v127)
          {
            v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v126 - (_QWORD)*v120) >> 3);
            v132 = v131 + 1;
            if (v131 + 1 > 0x666666666666666)
              std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
            v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v127 - (_QWORD)*v120) >> 3);
            if (2 * v133 > v132)
              v132 = 2 * v133;
            if (v133 >= 0x333333333333333)
              v134 = 0x666666666666666;
            else
              v134 = v132;
            if (v134)
              v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>(a1 + 80, v134);
            else
              v135 = 0;
            v136 = &v135[40 * v131];
            v137 = *(_OWORD *)v122;
            v138 = *((_OWORD *)v122 + 1);
            *((_QWORD *)v136 + 4) = v122[4];
            *(_OWORD *)v136 = v137;
            *((_OWORD *)v136 + 1) = v138;
            v140 = *(char **)(a1 + 64);
            v139 = *(char **)(a1 + 72);
            v141 = v136;
            if (v139 != v140)
            {
              do
              {
                v142 = *(_OWORD *)(v139 - 40);
                v143 = *(_OWORD *)(v139 - 24);
                *((_DWORD *)v141 - 2) = *((_DWORD *)v139 - 2);
                *(_OWORD *)(v141 - 24) = v143;
                *(_OWORD *)(v141 - 40) = v142;
                v141 -= 40;
                v139 -= 40;
              }
              while (v139 != v140);
              v139 = *v120;
            }
            v130 = v136 + 40;
            *(_QWORD *)(a1 + 64) = v141;
            *(_QWORD *)(a1 + 72) = v136 + 40;
            *(_QWORD *)(a1 + 80) = &v135[40 * v134];
            if (v139)
              operator delete(v139);
          }
          else
          {
            v128 = *(_OWORD *)v122;
            v129 = *((_OWORD *)v122 + 1);
            *(_QWORD *)(v126 + 32) = v122[4];
            *(_OWORD *)v126 = v128;
            *(_OWORD *)(v126 + 16) = v129;
            v130 = (char *)(v126 + 40);
          }
          *(_QWORD *)(a1 + 72) = v130;
          std::__tree<TRangeValue<Pointer64,unsigned char *>>::__remove_node_pointer((uint64_t **)(a1 + 40), v123);
          operator delete(v123);
        }
        while (v118 != (uint64_t *)(a1 + 48));
      }
      v10 = v155;
      v144 = v153;
      if (*(_QWORD *)taska
        || (v144 = std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__emplace_unique_key_args<mapped_region_node_internal_t,mapped_region_node_internal_t const&>((uint64_t **)(a1 + 40), (unint64_t *)info, (uint64_t)info), v145))
      {
        ++*(_DWORD *)a1;
        *(_QWORD *)(a1 + 8) += v14;
        v17 = v144 + 4;
        goto LABEL_212;
      }
    }
    v17 = 0;
    goto LABEL_212;
  }
  v58 = 0;
  while (1)
  {
    v59 = *(_QWORD *)(a1 + 192);
    if (!v59)
      break;
    v60 = find_core_file_dumped_region_containing_location(v59 + 16, v57);
    if (!v61)
    {
      v59 = *(_QWORD *)(a1 + 192);
      break;
    }
    v57 = *v60;
    v10 = (std::mutex *)v60[3];
    v62 = v60[2];
    v58 = v60[2] >> 8;
    v63 = 1;
    v14 = (mach_vm_address_t)v10;
LABEL_85:
    v67 = v158;
    if (v158 >= v159)
    {
      v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v158[-size] >> 3);
      v69 = v68 + 1;
      if (v68 + 1 > 0x666666666666666)
        std::vector<std::shared_ptr<CSCppSymbolOwner>>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((uint64_t)&v159[-size] >> 3) > v69)
        v69 = 0x999999999999999ALL * ((uint64_t)&v159[-size] >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v159[-size] >> 3) >= 0x333333333333333)
        v70 = 0x666666666666666;
      else
        v70 = v69;
      if (v70)
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CSCppDyldSplitSharedCacheMemory::CacheMemoryAndPath>>((uint64_t)&v159, v70);
      else
        v71 = 0;
      v72 = &v71[8 * ((uint64_t)&v158[-size] >> 3)];
      *(_QWORD *)v72 = v62 | (v58 << 8);
      *((_QWORD *)v72 + 1) = v10;
      v72[16] = v63;
      *(_DWORD *)(v72 + 17) = info[0];
      *((_DWORD *)v72 + 5) = *(int *)((char *)info + 3);
      *((_QWORD *)v72 + 3) = v57;
      *((_QWORD *)v72 + 4) = v14;
      v74 = size;
      v73 = v158;
      v75 = (mach_vm_size_t)&v71[40 * v68];
      if (v158 != (char *)size)
      {
        do
        {
          v76 = *(_OWORD *)(v73 - 40);
          v77 = *(_OWORD *)(v73 - 24);
          *(_QWORD *)(v75 - 8) = *((_QWORD *)v73 - 1);
          *(_OWORD *)(v75 - 24) = v77;
          *(_OWORD *)(v75 - 40) = v76;
          v75 -= 40;
          v73 -= 40;
        }
        while (v73 != (char *)v74);
        v73 = (char *)v74;
      }
      v51 = v72 + 40;
      size = v75;
      v158 = v72 + 40;
      v159 = &v71[40 * v70];
      if (v73)
        operator delete(v73);
    }
    else
    {
      *(_QWORD *)v158 = v62 | (v58 << 8);
      v67[1] = v10;
      *((_BYTE *)v67 + 16) = v63;
      *(_DWORD *)((char *)v67 + 17) = info[0];
      *((_DWORD *)v67 + 5) = *(int *)((char *)info + 3);
      v67[3] = v57;
      v67[4] = v14;
      v51 = (char *)(v67 + 5);
    }
    v158 = v51;
    v57 += v14;
    if (v56 <= v57)
      goto LABEL_102;
  }
  if (*(_BYTE *)(v59 + 112))
  {
    v64 = CSCppCoreFileRegionsTree::get_region_at_address((char **)(v59 + 88), v57, 0x270FuLL);
    if (v65)
    {
      v66 = *(_QWORD *)v64 == v57 && *(_BYTE *)(v64 + 67) == 3;
      if (v66)
      {
        v62 = 0;
        v63 = 0;
        v14 = *(_QWORD *)(v64 + 8);
        goto LABEL_85;
      }
    }
  }
  if (a4)
    *a4 = 1;
  v17 = 0;
  v10 = v155;
LABEL_212:
  if (size)
  {
    v158 = (char *)size;
    operator delete((void *)size);
  }
LABEL_214:
  std::mutex::unlock(v10);
  return v17;
}

void sub_1B41861A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

uint64_t unmap_node(uint64_t a1, tree *a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  tree *node;
  unint64_t *v9;
  uint64_t v10;
  __int128 v12;
  _OWORD v13[2];
  unint64_t v14;

  node = find_node((const char *)a1, a2);
  if (node)
  {
    v9 = (unint64_t *)node;
    std::mutex::lock((std::mutex *)(a1 + 128));
    if (*((_DWORD *)v9 + 6) == *MEMORY[0x1E0C83DA0])
    {
      v10 = 0;
      if (!a4)
      {
LABEL_5:
        if (a5)
          *a5 = v9[1];
        std::__tree<mapped_region_node_internal_t,CompareMappedRegionNode,std::allocator<mapped_region_node_internal_t>>::__erase_unique<mapped_region_node_internal_t>(a1 + 40, v9);
        std::mutex::unlock((std::mutex *)(a1 + 128));
        return v10;
      }
    }
    else
    {
      --*(_DWORD *)a1;
      *(_QWORD *)(a1 + 8) -= v9[1];
      v12 = *((_OWORD *)v9 + 1);
      v13[0] = *(_OWORD *)v9;
      v13[1] = v12;
      v14 = v9[4];
      v10 = deallocate_node((uint64_t)v13);
      if (!a4)
        goto LABEL_5;
    }
    *a4 = *v9;
    goto LABEL_5;
  }
  if (a4)
    *a4 = 0;
  v10 = 0;
  if (a5)
    *a5 = 0;
  return v10;
}

void sub_1B4186328(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t deallocate_node(uint64_t a1)
{
  if (mach_task_is_self(*(_DWORD *)(a1 + 24)))
    return 0;
  else
    return mach_vm_deallocate(*MEMORY[0x1E0C83DA0], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

_QWORD *next_node(uint64_t a1, unint64_t *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;

  if (!a2)
    return 0;
  v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  v7 = *(_QWORD **)(a1 + 48);
  v6 = (_QWORD *)(a1 + 48);
  v5 = v7;
  if (!v7)
    goto LABEL_13;
  v8 = *a2;
  v9 = v6;
  do
  {
    v10 = v5[4];
    v11 = v8 >= v10;
    if (v8 >= v10)
      v12 = v5 + 1;
    else
      v12 = v5;
    if (!v11)
      v9 = v5;
    v5 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v6 || (v14 = v9 + 4, v13 = v9[4], v13 <= v8) && v9[5] + v13 > v8)
LABEL_13:
    v14 = 0;
  std::mutex::unlock(v4);
  return v14;
}

void enumerate_mapped_memory_cache(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  v5 = *(_QWORD **)(a1 + 40);
  if (v5 != (_QWORD *)(a1 + 48))
  {
    do
    {
      v6 = *((_OWORD *)v5 + 3);
      v14 = *((_OWORD *)v5 + 2);
      v15 = v6;
      v16 = v5[8];
      (*(void (**)(uint64_t, __int128 *, _QWORD))(a2 + 16))(a2, &v14, 0);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != (_QWORD *)(a1 + 48));
  }
  v11 = *(__int128 **)(a1 + 64);
  v10 = *(__int128 **)(a1 + 72);
  while (v11 != v10)
  {
    v12 = *v11;
    v13 = v11[1];
    v16 = *((_QWORD *)v11 + 4);
    v14 = v12;
    v15 = v13;
    (*(void (**)(uint64_t, __int128 *, uint64_t))(a2 + 16))(a2, &v14, 1);
    v11 = (__int128 *)((char *)v11 + 40);
  }
  std::mutex::unlock(v4);
}

void sub_1B4186518(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t mapped_memory_suspend_target(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char __str[1024];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4;
  if (*(_QWORD *)(a1 + 192))
    return 0;
  v2 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v2 + 1;
  if (v2 || mach_task_is_self(*(_DWORD *)(a1 + 88)))
    return 0;
  v3 = task_suspend2(*(_DWORD *)(a1 + 88), (task_suspension_token_t *)(a1 + 92));
  if ((_DWORD)v3)
  {
    snprintf(__str, 0x400uLL, "%s: %s failed ", "mapped_memory_suspend_target", "can't suspend");
    mach_error(__str, v3);
  }
  return v3;
}

uint64_t mapped_memory_resume_target(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  char __str[1024];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4;
  v2 = *(_DWORD *)(a1 + 96);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a1 + 192))
    return 0;
  v3 = v2 - 1;
  *(_DWORD *)(a1 + 96) = v3;
  if (v3 || mach_task_is_self(*(_DWORD *)(a1 + 88)))
    return 0;
  v4 = task_resume2(*(_DWORD *)(a1 + 92));
  *(_DWORD *)(a1 + 92) = 0;
  if ((_DWORD)v4)
  {
    snprintf(__str, 0x400uLL, "%s: %s failed ", "mapped_memory_resume_target", "can't suspend");
    mach_error(__str, v4);
  }
  return v4;
}

uint64_t mapped_memory_read_pointer(uint64_t a1, tree *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;

  if (*(_BYTE *)(a1 + 101))
    v5 = 8;
  else
    v5 = 4;
  v8 = 0;
  result = mapped_memory_read((const char *)a1, a2, v5, &v8);
  if (v8)
  {
    if (*(_BYTE *)(a1 + 101))
      v7 = *(_QWORD *)v8;
    else
      v7 = *v8;
    result = 0;
    *a3 = v7;
  }
  return result;
}

uint64_t mapped_memory_read(const char *a1, tree *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *node;
  uint64_t result;
  unsigned int v10;

  node = find_node(a1, a2);
  if (!node)
  {
    v10 = 0;
    node = map_new_node((uint64_t)a1, (mach_vm_address_t)a2, a3, (int *)&v10);
    if (!node)
      return v10;
  }
  result = 0;
  *a4 = (char *)a2 + node[2] - *node;
  return result;
}

uint64_t mapped_memory_task_threads(uint64_t a1, unsigned int **a2, unsigned int *a3)
{
  if (!a1)
    return 4;
  if (*(_QWORD *)(a1 + 192))
    return CSCppCoreFileMetadata::task_threads(*(CSCppCoreFileMetadata **)(a1 + 192), a2, a3);
  return task_threads(*(_DWORD *)(a1 + 88), a2, a3);
}

uint64_t mapped_memory_thread_get_state(uint64_t a1, thread_read_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt)
{
  CSCppCoreFileMetadata *v5;

  if (!a1)
    return 4;
  v5 = *(CSCppCoreFileMetadata **)(a1 + 192);
  if (v5)
    return CSCppCoreFileMetadata::thread_get_state(v5, target_act, flavor, old_state, old_stateCnt);
  else
    return thread_get_state(target_act, flavor, old_state, old_stateCnt);
}

uint64_t mapped_memory_core_file_mach_vm_region_recurse_submap_short_64(uint64_t a1, unint64_t *a2, _QWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;

  if (a1 && (v5 = *(_QWORD *)(a1 + 192)) != 0)
    return CSCppCoreFileMetadata::mach_vm_region_recurse_submap_short_64(v5, a2, a3, a4, a5);
  else
    return 4;
}

uint64_t mapped_memory_core_file_mach_vm_region_recurse_submap_64(uint64_t a1, unint64_t *a2, _QWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;

  if (a1 && (v5 = *(_QWORD *)(a1 + 192)) != 0)
    return CSCppCoreFileMetadata::mach_vm_region_recurse_submap_64(v5, a2, a3, a4, a5);
  else
    return 4;
}

uint64_t mapped_memory_core_file_mach_vm_page_range_query(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4, unint64_t *a5, int a6)
{
  CSCppCoreFileMetadata *v6;

  if (a1 && (v6 = *(CSCppCoreFileMetadata **)(a1 + 192)) != 0)
    return CSCppCoreFileMetadata::mach_vm_page_range_query(v6, a2, a3, a4, a5, a6);
  else
    return 4;
}

uint64_t mapped_memory_core_file_mach_vm_purgable_control(uint64_t a1, unint64_t a2, int a3, int *a4)
{
  char **v4;

  if (a1 && (v4 = *(char ***)(a1 + 192)) != 0)
    return CSCppCoreFileMetadata::mach_vm_purgable_control(v4, a2, a3, a4);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_udata_ptrs(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_owned_vm_objects(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  else
    return 4;
}

unint64_t mapped_memory_core_file_region_filename(uint64_t a1, unint64_t a2, char *a3, unsigned int a4)
{
  char **v4;

  if (a1 && (v4 = *(char ***)(a1 + 192)) != 0)
    return CSCppCoreFileMetadata::region_filename(v4, a2, a3, a4);
  else
    return 0;
}

uint64_t mapped_memory_core_file_get_proc_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_proc_path(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_parent_proc_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_parent_proc_path(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_pid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ppid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_proc_starttime_sec(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_proc_starttime_usec(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_userstack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_proc_flags(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_argslen(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_proc_argc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 120))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_dirty_flags(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_dyld_all_image_infos_addr(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_dyld_shared_cache_range(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_internal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_internal_compressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 168))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_iokit_mapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_alternate_accounting(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 184))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_alternate_compressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 192))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_purgable_nonvolatile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 200))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_purgable_nonvolatile_compressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_page_table(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 216))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_phys_footprint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 224))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_phys_footprint_lifetime_max(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 232))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_network_nonvolatile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 240))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_network_nonvolatile_compressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 248))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_wired_mem(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 256))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_tagged_footprint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_tagged_footprint_compressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 272))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_media_footprint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 280))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_media_footprint_compressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 288))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_graphics_footprint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 296))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_graphics_footprint_compressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 304))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_neural_footprint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 312))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_ledger_neural_footprint_compressed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v2);
  else
    return 4;
}

uint64_t mapped_memory_core_file_get_architecture(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1);
  else
    return 4;
}

uint64_t mapped_memory_core_file_has_info_for_memory_analysis(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 192)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1);
  else
    return 0;
}

_QWORD *mapped_memory_core_file_is_exclavecore(_QWORD *result)
{
  if (result)
  {
    result = (_QWORD *)result[24];
    if (result)
    {
      if (result)
        return (_QWORD *)(*((_DWORD *)result + 30) == 1);
    }
  }
  return result;
}

